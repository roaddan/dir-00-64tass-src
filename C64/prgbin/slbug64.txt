
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L slbug64.txt -o slbug64.prg slbug64.asm
; Wed Sep 24 22:45:04 2025

;Offset	;Hex		;Source

;******  Processing input file: slbug64.asm

="20250924-000001"	                Version = "20250924-000001"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 55 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"
.0854	60		              rts                  ; ... doit se rerminer par un RTS.

;******  Return to file: slbug64.asm

.0855			main
.0855	20 8c 0d	               jsr  scrmaninit
.0858	08		               php
.0859	48		               pha
.085a	a9 0e		               lda  #14
.085c	20 d2 ff	               jsr  $ffd2
.085f	68		               pla
.0860	28		               plp
.0861	08		               php
.0862	48		               pha
.0863	a9 08		               lda  #$08
.0865	20 d2 ff	               jsr  $ffd2
.0868	68		               pla
.0869	28		               plp
.086a	a9 05		               lda  #cvert
.086c	8d 20 d0	               sta  vicbordcol
.086f	a9 06		               lda  #cbleu
.0871	8d 21 d0	               sta  vicbackcol
.0874	a9 01		               lda  #cblanc
.0876	8d 86 02	               sta  bascol
.0879	20 ac 0d	               jsr  cls
.087c	20 9b 08	               jsr  help
.087f	20 4c 12	               jsr  anykey
.0882	20 86 08	               jsr  slbug64
.0885	60		               rts
.0886			slbug64
.0886	08		                php
.0887	48		                pha
.0888	ad 21 d0	                lda vicbackcol
.088b	48		                pha
.088c	a9 10		                lda #$10
.088e	8d 21 d0	                sta vicbackcol
.0891	20 4c 12	                jsr anykey
.0894	68		                pla
.0895	8d 20 d0	                sta vicbordcol
.0898	68		                pla
.0899	28		                plp
.089a	60		                rts
.089b			help
=4			left = 4
=5			top = 5
=$3			color = ccyan
.089b	20 bf 0e	                jsr pushall
.089e	20 ac 0d	                jsr cls
.08a1	a9 0d		                lda #$0d
.08a3	20 c3 0d	                jsr putch
.08a6	20 c3 0d	                jsr putch
.08a9	20 c3 0d	                jsr putch
.08ac	20 c3 0d	                jsr putch
.08af	a9 12		                lda #b_rvs_on
.08b1	20 c3 0d	                jsr putch
.08b4	20 2d 0f	                jsr  pushreg
.08b7	ad 86 02	                lda  bascol
.08ba	48		                pha
.08bb	a9 03		                lda  #color
.08bd	8d 86 02	                sta  bascol
.08c0	a0 04		                ldy  #left
.08c2	a2 05		                ldx  #top+0
.08c4	18		                clc
.08c5	20 f0 ff	                jsr  plot
.08c8	a2 bb		                ldx  #<line
.08ca	a0 0a		                ldy  #>line
.08cc	20 c9 0d	                jsr  puts
.08cf	68		                pla
.08d0	8d 86 02	                sta  bascol
.08d3	20 5c 0f	                jsr  popreg
.08d6	20 2d 0f	                jsr  pushreg
.08d9	ad 86 02	                lda  bascol
.08dc	48		                pha
.08dd	a9 03		                lda  #color
.08df	8d 86 02	                sta  bascol
.08e2	a0 04		                ldy  #left
.08e4	a2 06		                ldx  #top+1
.08e6	18		                clc
.08e7	20 f0 ff	                jsr  plot
.08ea	a2 dc		                ldx  #<texta
.08ec	a0 0a		                ldy  #>texta
.08ee	20 c9 0d	                jsr  puts
.08f1	68		                pla
.08f2	8d 86 02	                sta  bascol
.08f5	20 5c 0f	                jsr  popreg
.08f8	20 2d 0f	                jsr  pushreg
.08fb	ad 86 02	                lda  bascol
.08fe	48		                pha
.08ff	a9 03		                lda  #color
.0901	8d 86 02	                sta  bascol
.0904	a0 04		                ldy  #left
.0906	a2 07		                ldx  #top+2
.0908	18		                clc
.0909	20 f0 ff	                jsr  plot
.090c	a2 fd		                ldx  #<textb
.090e	a0 0a		                ldy  #>textb
.0910	20 c9 0d	                jsr  puts
.0913	68		                pla
.0914	8d 86 02	                sta  bascol
.0917	20 5c 0f	                jsr  popreg
.091a	20 2d 0f	                jsr  pushreg
.091d	ad 86 02	                lda  bascol
.0920	48		                pha
.0921	a9 03		                lda  #color
.0923	8d 86 02	                sta  bascol
.0926	a0 04		                ldy  #left
.0928	a2 08		                ldx  #top+3
.092a	18		                clc
.092b	20 f0 ff	                jsr  plot
.092e	a2 a2		                ldx  #<textg
.0930	a0 0b		                ldy  #>textg
.0932	20 c9 0d	                jsr  puts
.0935	68		                pla
.0936	8d 86 02	                sta  bascol
.0939	20 5c 0f	                jsr  popreg
.093c	20 2d 0f	                jsr  pushreg
.093f	ad 86 02	                lda  bascol
.0942	48		                pha
.0943	a9 03		                lda  #color
.0945	8d 86 02	                sta  bascol
.0948	a0 04		                ldy  #left
.094a	a2 09		                ldx  #top+4
.094c	18		                clc
.094d	20 f0 ff	                jsr  plot
.0950	a2 bb		                ldx  #<line
.0952	a0 0a		                ldy  #>line
.0954	20 c9 0d	                jsr  puts
.0957	68		                pla
.0958	8d 86 02	                sta  bascol
.095b	20 5c 0f	                jsr  popreg
.095e	20 2d 0f	                jsr  pushreg
.0961	ad 86 02	                lda  bascol
.0964	48		                pha
.0965	a9 03		                lda  #color
.0967	8d 86 02	                sta  bascol
.096a	a0 04		                ldy  #left
.096c	a2 0a		                ldx  #top+5
.096e	18		                clc
.096f	20 f0 ff	                jsr  plot
.0972	a2 1e		                ldx  #<textc
.0974	a0 0b		                ldy  #>textc
.0976	20 c9 0d	                jsr  puts
.0979	68		                pla
.097a	8d 86 02	                sta  bascol
.097d	20 5c 0f	                jsr  popreg
.0980	20 2d 0f	                jsr  pushreg
.0983	ad 86 02	                lda  bascol
.0986	48		                pha
.0987	a9 03		                lda  #color
.0989	8d 86 02	                sta  bascol
.098c	a0 04		                ldy  #left
.098e	a2 0b		                ldx  #top+6
.0990	18		                clc
.0991	20 f0 ff	                jsr  plot
.0994	a2 3f		                ldx  #<textd
.0996	a0 0b		                ldy  #>textd
.0998	20 c9 0d	                jsr  puts
.099b	68		                pla
.099c	8d 86 02	                sta  bascol
.099f	20 5c 0f	                jsr  popreg
.09a2	20 2d 0f	                jsr  pushreg
.09a5	ad 86 02	                lda  bascol
.09a8	48		                pha
.09a9	a9 03		                lda  #color
.09ab	8d 86 02	                sta  bascol
.09ae	a0 04		                ldy  #left
.09b0	a2 0c		                ldx  #top+7
.09b2	18		                clc
.09b3	20 f0 ff	                jsr  plot
.09b6	a2 bb		                ldx  #<line
.09b8	a0 0a		                ldy  #>line
.09ba	20 c9 0d	                jsr  puts
.09bd	68		                pla
.09be	8d 86 02	                sta  bascol
.09c1	20 5c 0f	                jsr  popreg
.09c4	20 2d 0f	                jsr  pushreg
.09c7	ad 86 02	                lda  bascol
.09ca	48		                pha
.09cb	a9 03		                lda  #color
.09cd	8d 86 02	                sta  bascol
.09d0	a0 04		                ldy  #left
.09d2	a2 0d		                ldx  #top+8
.09d4	18		                clc
.09d5	20 f0 ff	                jsr  plot
.09d8	a2 60		                ldx  #<texte
.09da	a0 0b		                ldy  #>texte
.09dc	20 c9 0d	                jsr  puts
.09df	68		                pla
.09e0	8d 86 02	                sta  bascol
.09e3	20 5c 0f	                jsr  popreg
.09e6	20 2d 0f	                jsr  pushreg
.09e9	ad 86 02	                lda  bascol
.09ec	48		                pha
.09ed	a9 03		                lda  #color
.09ef	8d 86 02	                sta  bascol
.09f2	a0 04		                ldy  #left
.09f4	a2 0e		                ldx  #top+9
.09f6	18		                clc
.09f7	20 f0 ff	                jsr  plot
.09fa	a2 81		                ldx  #<textf
.09fc	a0 0b		                ldy  #>textf
.09fe	20 c9 0d	                jsr  puts
.0a01	68		                pla
.0a02	8d 86 02	                sta  bascol
.0a05	20 5c 0f	                jsr  popreg
.0a08	20 2d 0f	                jsr  pushreg
.0a0b	ad 86 02	                lda  bascol
.0a0e	48		                pha
.0a0f	a9 03		                lda  #color
.0a11	8d 86 02	                sta  bascol
.0a14	a0 04		                ldy  #left
.0a16	a2 0f		                ldx  #top+10
.0a18	18		                clc
.0a19	20 f0 ff	                jsr  plot
.0a1c	a2 bb		                ldx  #<line
.0a1e	a0 0a		                ldy  #>line
.0a20	20 c9 0d	                jsr  puts
.0a23	68		                pla
.0a24	8d 86 02	                sta  bascol
.0a27	20 5c 0f	                jsr  popreg
.0a2a	20 2d 0f	                jsr  pushreg
.0a2d	ad 86 02	                lda  bascol
.0a30	48		                pha
.0a31	a9 03		                lda  #color
.0a33	8d 86 02	                sta  bascol
.0a36	a0 04		                ldy  #left
.0a38	a2 10		                ldx  #top+11
.0a3a	18		                clc
.0a3b	20 f0 ff	                jsr  plot
.0a3e	a2 e4		                ldx  #<texti
.0a40	a0 0b		                ldy  #>texti
.0a42	20 c9 0d	                jsr  puts
.0a45	68		                pla
.0a46	8d 86 02	                sta  bascol
.0a49	20 5c 0f	                jsr  popreg
.0a4c	20 2d 0f	                jsr  pushreg
.0a4f	ad 86 02	                lda  bascol
.0a52	48		                pha
.0a53	a9 03		                lda  #color
.0a55	8d 86 02	                sta  bascol
.0a58	a0 04		                ldy  #left
.0a5a	a2 11		                ldx  #top+12
.0a5c	18		                clc
.0a5d	20 f0 ff	                jsr  plot
.0a60	a2 05		                ldx  #<textj
.0a62	a0 0c		                ldy  #>textj
.0a64	20 c9 0d	                jsr  puts
.0a67	68		                pla
.0a68	8d 86 02	                sta  bascol
.0a6b	20 5c 0f	                jsr  popreg
.0a6e	20 2d 0f	                jsr  pushreg
.0a71	ad 86 02	                lda  bascol
.0a74	48		                pha
.0a75	a9 03		                lda  #color
.0a77	8d 86 02	                sta  bascol
.0a7a	a0 04		                ldy  #left
.0a7c	a2 12		                ldx  #top+13
.0a7e	18		                clc
.0a7f	20 f0 ff	                jsr  plot
.0a82	a2 26		                ldx  #<textk
.0a84	a0 0c		                ldy  #>textk
.0a86	20 c9 0d	                jsr  puts
.0a89	68		                pla
.0a8a	8d 86 02	                sta  bascol
.0a8d	20 5c 0f	                jsr  popreg
.0a90	20 2d 0f	                jsr  pushreg
.0a93	ad 86 02	                lda  bascol
.0a96	48		                pha
.0a97	a9 03		                lda  #color
.0a99	8d 86 02	                sta  bascol
.0a9c	a0 04		                ldy  #left
.0a9e	a2 13		                ldx  #top+14
.0aa0	18		                clc
.0aa1	20 f0 ff	                jsr  plot
.0aa4	a2 bb		                ldx  #<line
.0aa6	a0 0a		                ldy  #>line
.0aa8	20 c9 0d	                jsr  puts
.0aab	68		                pla
.0aac	8d 86 02	                sta  bascol
.0aaf	20 5c 0f	                jsr  popreg
.0ab2	a9 92		                lda #b_rvs_off
.0ab4	20 c3 0d	                jsr putch
.0ab7	20 fa 0e	                jsr popall
.0aba	60		                rts

;******  Processing file: chaines_fr.asm

=158			headtcol        =   b_jaune
=158			normtcol        =   b_jaune
>0abb	2a 2d 2d 2d	line            .null          "*------------------------------*"
>0abf	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0acf	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2a 00
>0adc	2a 20 3e 3e	texta           .null   "* >> SL-BUG 64 Version 4.00 << *"
>0ae0	20 d3 cc 2d c2 d5 c7 20 36 34 20 d6 45 52 53 49
>0af0	4f 4e 20 34 2e 30 30 20 3c 3c 20 2a 00
>0afd	2a 20 20 20	textb           .null   "*       Pour Commodore 64      *"
>0b01	20 20 20 20 d0 4f 55 52 20 c3 4f 4d 4d 4f 44 4f
>0b11	52 45 20 36 34 20 20 20 20 20 20 2a 00
>0b1e	2a 20 20 c9	textc           .null   "*  Idee Originale sur MC-6809  *"
>0b22	44 45 45 20 cf 52 49 47 49 4e 41 4c 45 20 53 55
>0b32	52 20 cd c3 2d 36 38 30 39 20 20 2a 00
>0b3f	2a 20 20 d0	textd           .null   "*  Par Serge Leblanc mai 1994  *"
>0b43	41 52 20 d3 45 52 47 45 20 cc 45 42 4c 41 4e 43
>0b53	20 4d 41 49 20 31 39 39 34 20 20 2a 00
>0b60	2a 20 d0 4f	texte           .null   "* Port sur C64 Daniel Lafrance *"
>0b64	52 54 20 53 55 52 20 c3 36 34 20 c4 41 4e 49 45
>0b74	4c 20 cc 41 46 52 41 4e 43 45 20 2a 00
>0b81	2a 20 20 20	textf           .null   "*      (c) Septembre 2025      *"
>0b85	20 20 20 28 43 29 20 d3 45 50 54 45 4d 42 52 45
>0b95	20 32 30 32 35 20 20 20 20 20 20 2a 00
>0ba2	2a 20 20 20	textg           .null   format("*   Version: %-18s*",Version)
>0ba6	d6 45 52 53 49 4f 4e 3a 20 32 30 32 35 30 39 32
>0bb6	34 2d 30 30 30 30 30 31 20 20 20 2a 00
>0bc3	2a 2d 2d 2d	texth           .null   "*---- R A C C O U R C I S -----*"
>0bc7	2d 20 d2 20 c1 20 c3 20 c3 20 cf 20 d5 20 d2 20
>0bd7	c3 20 c9 20 d3 20 2d 2d 2d 2d 2d 2a 00
>0be4	2a 20 c5 58	texti           .null   format("* Execution.: SYS%05d ($%04X) *",slbug64,slbug64)
>0be8	45 43 55 54 49 4f 4e 2e 3a 20 d3 d9 d3 30 32 31
>0bf8	38 32 20 28 24 30 38 38 36 29 20 2a 00
>0c05	2a 20 c1 49	textj           .null   format("* Aide......: SYS%05d ($%04X) *",help,help)
>0c09	44 45 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 32
>0c19	30 33 20 28 24 30 38 39 c2 29 20 2a 00
>0c26	2a 20 c3 cc	textk           .null   format("* CLS.......: SYS%05d ($%04X) *",cls,cls)
>0c2a	d3 2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 33 35
>0c3a	30 30 20 28 24 30 c4 c1 c3 29 20 2a 00
>0c47	20 cc 41 4e	textl           .null   format(" Lancement de slbug64  : SYS%5d",slbug64)
>0c4b	43 45 4d 45 4e 54 20 44 45 20 53 4c 42 55 47 36
>0c5b	34 20 20 3a 20 d3 d9 d3 20 32 31 38 32 00
>0c69	20 45 58 2e	textm           .null   format(" ex.: SYS%5d",slbug64)
>0c6d	3a 20 d3 d9 d3 20 32 31 38 32 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0c78	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0c7c	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black         =   144  ;0,  ctrl-1
=5			b_white         =   5    ;1,  ctrl-2
=28			b_red           =   28   ;2,  ctrl-3
=159			b_cyan          =   159  ;3,  ctrl-4
=156			b_purple        =   156  ;4,  ctrl-5
=30			b_green         =   30   ;5,  ctrl-6
=31			b_blue          =   31   ;6,  ctrl-7
=158			b_yellow        =   158  ;7,  ctrl-8
=129			b_orange        =   129  ;8,  C=-1
=149			b_brown         =   149  ;9,  C=-2
=150			b_ltred         =   150  ;10, C=-3
=155			b_gray3         =   155  ;11, C=-4
=155			b_grey3         =   155  ;11, C=-4
=152			b_gray2         =   152  ;12, C=-5
=152			b_grey2         =   152  ;13, C=-5
=153			b_ltgreen       =   153  ;13, C=-6
=154			b_ltblue        =   154  ;14, C=-7
=151			b_gray1         =   151  ;15, C=-8
=151			b_grey1         =   151  ;15, C=-8
=144			b_noir          =   144  ;0,  ctrl-1
=5			b_blanc         =   5    ;1,  ctrl-2
=28			b_rouge         =   28   ;2,  ctrl-3
=156			b_mauve         =   156  ;4,  ctrl-5
=30			b_vert          =   30   ;5,  ctrl-6
=31			b_bleu          =   31   ;6,  ctrl-7
=158			b_jaune         =   158  ;7,  ctrl-8
=149			b_brun          =   149  ;9,  C=-2
=150			b_rose          =   150  ;10, C=-3
=155			b_gris3         =   155  ;11, C=-4
=152			b_gris2         =   152  ;12, C=-5
=153			b_vert2         =   153  ;13, C=-6
=154			b_blue2         =   154  ;14, C=-7
=151			b_gris1         =   151  ;15, C=-8
=151			b_gris          =   151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.0c80			screendis
.0c80	08		               php
.0c81	48		               pha
.0c82	ad 11 d0	               lda  $d011
.0c85	29 ef		               and  #%11101111
.0c87	8d 11 d0	               sta  $d011
.0c8a	68		               pla
.0c8b	28		               plp
.0c8c	60		               rts
.0c8d			screenena
.0c8d	08		               php
.0c8e	48		               pha
.0c8f	ad 11 d0	               lda  $d011
.0c92	09 10		               ora  #%00010000
.0c94	8d 11 d0	               sta  $d011
.0c97	68		               pla
.0c98	28		               plp
.0c99	60		               rts
=8192			bmpram = 8192
.0c9a			victohighres
.0c9a	08		               php
.0c9b	48		               pha
.0c9c	ad 11 d0	               lda  vicmiscfnc
.0c9f	09 20		               ora  #%00100000     ; 32
.0ca1	8d 11 d0	               sta  vicmiscfnc
.0ca4	ad 18 d0	               lda  vicmemptr
.0ca7	09 08		               ora  #%00001000     ; $08
.0ca9	8d 18 d0	               sta  vicmemptr
.0cac	a9 ff		               lda  #$ff           ; 255
.0cae	85 37		               sta  $0037
.0cb0	a9 1f		               lda  #$1f           ; 31
.0cb2	85 38		               sta  $0038
.0cb4	68		               pla
.0cb5	28		               plp
.0cb6	60		               rts
.0cb7			victonormal
.0cb7	08		               php
.0cb8	48		               pha
.0cb9	ad 11 d0	               lda  vicmiscfnc
.0cbc	29 df		               and  #%11011111     ; 233
.0cbe	8d 11 d0	               sta  vicmiscfnc
.0cc1	ad 18 d0	               lda  vicmemptr
.0cc4	29 f7		               and  #%11110111     ; $08
.0cc6	8d 18 d0	               sta  vicmemptr
.0cc9	a9 00		               lda  #$00
.0ccb	85 37		               sta  $0037
.0ccd	a9 a0		               lda  #$a0
.0ccf	85 38		               sta  $0038
.0cd1	20 ac 0d	               jsr  cls
.0cd4	68		               pla
.0cd5	28		               plp
.0cd6	60		               rts
.0cd7			vicbmpclear
.0cd7	20 bf 0e	               jsr  push
.0cda	a9 04		               lda  #cmauve
.0cdc	20 05 0d	               jsr  setvicbmpbackcol
.0cdf	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.0ce1	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.0ce3	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.0ce5	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.0ce7	48		               pha
.0ce8	a9 ff		               lda  #<$0000+(8191)
.0cea	8d e3 10	               sta  loopcount
.0ced	a9 1f		               lda  #>$0000+(8191)
.0cef	8d e4 10	               sta  loopcount+1
.0cf2	68		               pla
.0cf3	a0 00		               ldy  #$00
.0cf5	a9 0f		next           lda  #$0f
.0cf7	91 fb		               sta  (zpage1),y
.0cf9	20 14 10	               jsr  inczpage1
.0cfc	20 c3 10	               jsr  loop
.0cff	d0 f4		               bne  next
.0d01	20 fa 0e	               jsr  pop
.0d04	60		               rts
.0d05			setvicbmpbackcol
.0d05	20 bf 0e	               jsr  push
.0d08	29 0f		               and  #$0f
.0d0a	8d 38 0d	               sta  vicbmpbackcol
.0d0d	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.0d0f	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.0d11	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.0d13	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.0d15	48		               pha
.0d16	a9 00		               lda  #<$0000+(1024)
.0d18	8d e3 10	               sta  loopcount
.0d1b	a9 04		               lda  #>$0000+(1024)
.0d1d	8d e4 10	               sta  loopcount+1
.0d20	68		               pla
.0d21	a0 00		               ldy  #$00
.0d23	b1 fb		next           lda  (zpage1),y
.0d25	29 f0		               and  #$f0
.0d27	0d 38 0d	               ora  vicbmpbackcol
.0d2a	91 fb		               sta  (zpage1),y
.0d2c	20 14 10	               jsr  inczpage1
.0d2f	20 c3 10	               jsr  loop
.0d32	d0 ef		               bne  next
.0d34	20 fa 0e	               jsr  pop
.0d37	60		               rts
>0d38	00		vicbmpbackcol  .byte     $00
.0d39			setvicbmpforecol
.0d39	20 bf 0e	               jsr  push
.0d3c	2a		               rol
.0d3d	2a		               rol
.0d3e	2a		               rol
.0d3f	2a		               rol
.0d40	29 f0		               and  #$f0
.0d42	8d 70 0d	               sta  vicbmpforecol
.0d45	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.0d47	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.0d49	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.0d4b	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.0d4d	48		               pha
.0d4e	a9 00		               lda  #<$0000+(1024)
.0d50	8d e3 10	               sta  loopcount
.0d53	a9 04		               lda  #>$0000+(1024)
.0d55	8d e4 10	               sta  loopcount+1
.0d58	68		               pla
.0d59	a0 00		               ldy  #$00
.0d5b	b1 fb		next           lda  (zpage1),y
.0d5d	29 0f		               and  #$0f
.0d5f	0d 70 0d	               ora  vicbmpforecol
.0d62	91 fb		               sta  (zpage1),y
.0d64	20 14 10	               jsr  inczpage1
.0d67	20 c3 10	               jsr  loop
.0d6a	d0 ef		               bne  next
.0d6c	20 fa 0e	               jsr  pop
.0d6f	60		               rts
>0d70	00		vicbmpforecol  .byte     $00
.0d71			bmphrcalccoords
.0d71	20 bf 0e	               jsr  push
.0d74	18		               clc       ; On met Carry à 0
.0d75	6a		               ror       ; le bit 0 de a dans carry  ?/2
.0d76	8a		               txa       ; x dans a
.0d77	4a		               lsr       ; ?/4
.0d78	4a		               lsr       ; ?/8 a = (ax)/8
.0d79	8d 8a 0d	               sta  bmphrcol
.0d7c	98		               tya       ; Y dans a
.0d7d	4a		               lsr       ; ?/2
.0d7e	4a		               lsr       ; ?/4
.0d7f	4a		               lsr       ; ?/8 a=Y/8
.0d80	8d 89 0d	               sta  bmphrrow
.0d83	48		               pha
.0d84	98		               tya
.0d85	20 fa 0e	               jsr  pop
.0d88	60		               rts
.0d89			vicbmpfill
>0d89	00		bmphrrow       .byte     $00
>0d8a	00		bmphrcol       .byte     $00
>0d8b	00		bmphrmask      .byte     $00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.0d8c			scrmaninit
.0d8c	20 2d 0f	               jsr  pushreg        ; Sauvegarde tous les registres
.0d8f	20 80 0c	               jsr  screendis      ; Disable screen
.0d92	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.0d94	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.0d97	a9 05		               lda  #vvert         ; vert pour la couleur
.0d99	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.0d9c	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.0d9e	8d 86 02	               sta  bascol         ; texte.
.0da1	20 ac 0d	               jsr  cls            ; Efface l'écran.
.0da4	20 8d 0c	               jsr  screenena      ; enable screen
.0da7	20 5c 0f	               jsr  popreg         ; Récupère tous les registres.
.0daa	60		               rts
>0dab	8e		characterset   .byte b_uppercase
.0dac			cls
.0dac	08		               php                 ; Sauvegarde les registres
.0dad	48		               pha                 ;   modifiés.
.0dae	a9 93		               lda  #$93           ; Affiche le code basic de
.0db0	20 c3 0d	               jsr  putch          ;   d'effacement d'écran.
.0db3	68		               pla                 ; Récupère les registres
.0db4	28		               plp                 ;   modifiés.
.0db5	60		               rts
.0db6			putnch
.0db6	20 2d 0f	               jsr  pushreg        ; Sauvegarde tous les registres.
.0db9	20 d2 ff	again          jsr  $ffd2          ; On affiche A.
.0dbc	ca		               dex                 ; Un de moins à faire.
.0dbd	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.0dbf	20 5c 0f	out            jsr  popreg         ; Récupère tous les registres.
.0dc2	60		               rts
.0dc3			putch
.0dc3	08		               php                 ; Sauvegarde le registre de status.
.0dc4	20 d2 ff	               jsr  $ffd2          ; Affiche le caractère de Acc.
.0dc7	28		               plp                 ; Récupère le registre de status.
.0dc8	60		               rts
.0dc9			puts
.0dc9	20 bf 0e	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.0dcc	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.0dce	84 fc		               sty  zpage1+1       ;   dans ZP1.
.0dd0	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.0dd2	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.0dd4	f0 09		               beq  exit           ; Si $00 on sort.
.0dd6	20 c3 0d	               jsr  putch          ; Affiche le caractères.
.0dd9	20 14 10	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.0ddc	4c d2 0d	               jmp  next           ; Saute chercher le prochain carac.
.0ddf	20 fa 0e	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.0de2	60		               rts
.0de3			gotoxy
.0de3	08		               php                 ; Sauvegarde le registre de
.0de4	48		               pha                 ;   status et le registre a.
.0de5	18		               clc                 ; Carry = 1 pour que kplot
.0de6	8a		               txa                 ;   positionne le curseur.
.0de7	48		               pha                 ; On inverse X et Y pcq kplot
.0de8	98		               tya                 ;
.0de9	aa		               tax                 ;   prend X comme la ligne
.0dea	68		               pla                 ;
.0deb	a8		               tay                 ;   et Y comme la colonne.
.0dec	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.0def	68		               pla                 ; Récupère le registre a et
.0df0	28		               plp                 ;   le registre de status.
.0df1	60		               rts
.0df2			cursor
=$0286			bascol    =    $0286               ; debugme
.0df2	20 2d 0f	               jsr  pushreg        ; Sauvegarde tous les registres.
.0df5	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.0df7	20 f0 ff	               jsr  kplot          ; On récupère la position du
.0dfa	8c 1c 0e	               sty  cx             ;   curseur et on la sauvegarde
.0dfd	8e 1d 0e	               stx  cy             ;   dans les vars locales.
.0e00	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.0e03	8d 1e 0e	               sta  bcol           ; BASIC du texte.
.0e06	4c 18 0e	               jmp  out            ; c'est fini on sort.
.0e09	ae 1d 0e	restore        ldx  cy             ; Comme C=1, On charge x avec
.0e0c	ac 1c 0e	               ldy  cx             ;   la ligne, y ace  la col.
.0e0f	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.0e12	ad 1e 0e	               lda  bcol           ; On replace la couleur par basic
.0e15	8d 86 02	               sta  bascol         ;   sauvegardé.
.0e18	20 5c 0f	out            jsr  popreg         ; Récupère tous les registres.
.0e1b	60		               rts
>0e1c	00		cx   .byte     $00
>0e1d	00		cy   .byte     $00
>0e1e	00		bcol .byte     $00
.0e1f			cursave
.0e1f	08		               php
.0e20	38		               sec
.0e21	20 f2 0d	               jsr  cursor         ; Voir cette fonction plus haut.
.0e24	28		               plp
.0e25	60		               rts
.0e26			curput
.0e26	08		               php
.0e27	18		               clc
.0e28	20 f2 0d	               jsr  cursor         ; Voir cette fonction plus haut.
.0e2b	28		               plp
.0e2c	60		               rts
.0e2d			putsxy
.0e2d	20 bf 0e	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.0e30	86 fb		               stx  zpage1         ; On place la position de la
.0e32	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.0e34	a0 00		               ldy  #$00           ; On charge l'index à 0.
.0e36	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.0e38	aa		               tax                 ;   dans X.
.0e39	20 14 10	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.0e3c	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.0e3e	a8		               tay                 ; dans Y.
.0e3f	20 e3 0d	               jsr  gotoxy         ; on positionne le curseur.
.0e42	20 14 10	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.0e45	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.0e47	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.0e49	20 c9 0d	               jsr  puts           ;   l'affiche.
.0e4c	20 fa 0e	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.0e4f	60		               rts
>0e50	00 00		straddr   .word     $00
>0e52	00		px        .byte     $00
>0e53	00		py        .byte     $00
>0e54	00 00		zp1       .word     $00
.0e56			putscxy
.0e56	20 bf 0e	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.0e59	86 fb		               stx  zpage1         ; On place la position de la
.0e5b	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.0e5d	a0 00		               ldy  #$00           ; On charge l'index à 0.
.0e5f	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.0e62	48		               pha                 ;   actuelle de basic.
.0e63	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.0e65	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.0e68	20 14 10	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.0e6b	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.0e6d	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.0e6f	20 2d 0e	               jsr  putsxy         ;   l'affiche.
.0e72	68		               pla                 ; On replace la couleur basic
.0e73	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.0e76	20 fa 0e	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.0e79	60		               rts
.0e7a			putrahex
.0e7a	20 2d 0f	               jsr  pushreg        ; Sauvegarde tous les registres.
.0e7d	20 4d 11	               jsr  atohex         ; Conversion de a chaîne hexa.
.0e80	a2 ea		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.0e82	a0 10		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.0e84	20 c9 0d	               jsr  puts           ; Affiche la chaîne.
.0e87	20 5c 0f	               jsr  popreg         ; Récupère tous les registres.
.0e8a	60		               rts
.0e8b			kputrahexxy
.0e8b			bputrahexxy
.0e8b			putrahexxy
.0e8b	08		               php                 ; Sauvegarde le registre de
.0e8c	48		               pha                 ;   status et le registre a.
.0e8d	20 4d 11	               jsr  atohex         ; Convertion de a en hexadécimal.
.0e90	a2 e7		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.0e92	a0 10		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.0e94	20 2d 0e	               jsr  putsxy         ; Positionne et affiche la chaîne.
.0e97	68		               pla                 ; Récupère le registre a et
.0e98	28		               plp                 ;   le registre de status.
.0e99	60		               rts
.0e9a			putrahexcxy
.0e9a	20 2d 0f	               jsr  pushreg        ; Sauvegarde tous les registres.
.0e9d	20 4d 11	               jsr  atohex         ; Convertion de a en hexadécimal.
.0ea0	a2 e7		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.0ea2	a0 10		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.0ea4	20 2d 0e	               jsr  putsxy         ; Colore, positionne et affiche la
.0ea7	20 5c 0f	               jsr  popreg         ; Récupère tous les registres.
.0eaa	60		               rts
.0eab			setinverse
.0eab	48		               pha
.0eac	a9 12		               lda  #$12
.0eae	20 d2 ff	               jsr  $ffd2
.0eb1	68		               pla
.0eb2	60		               rts
.0eb3			clrinverse
.0eb3	48		               pha
.0eb4	a9 92		               lda  #$92
.0eb6	20 d2 ff	               jsr  $ffd2
.0eb9	68		               pla
.0eba	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>0ebb	00		rp        .byte     0
>0ebc	00		ra        .byte     0
>0ebd	00 00		pc        .word     0
.0ebf			pushall
.0ebf			push
.0ebf	08		          php            ; stack : flg, pcl, pch
.0ec0	78		          sei
.0ec1	8d bc 0e	          sta  ra        ; save a
.0ec4	68		          pla            ; stack : pcl, pch
.0ec5	8d bb 0e	          sta  rp        ; save rp
.0ec8	68		          pla            ; stack : pch
.0ec9	8d bd 0e	          sta  pc        ; save pcl
.0ecc	68		          pla            ; stack : -
.0ecd	8d be 0e	          sta  pc+1      ; save pch
.0ed0	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0ed2	48		          pha            ; stack : zp1l
.0ed3	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0ed5	48		          pha            ; stack : zp1h, zp1l
.0ed6	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0ed8	48		          pha            ; stack : zp2l, zp1h, zp1l
.0ed9	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0edb	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0edc	ad bb 0e	          lda  rp        ; get rp
.0edf	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0ee0	ad bc 0e	          lda  ra        ; get a
.0ee3	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ee4	8a		          txa            ; get x
.0ee5	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ee6	98		          tya            ; get y
.0ee7	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ee8	ad be 0e	          lda  pc+1      ; get pch
.0eeb	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eec	ad bd 0e	          lda  pc        ; get pcl
.0eef	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef0	ad bb 0e	          lda  rp        ; get rp
.0ef3	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef4	ad bc 0e	          lda  ra        ; get a
.0ef7	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef8	58		          cli
.0ef9	60		          rts
.0efa			pullall
.0efa			pull
.0efa			popall
.0efa			pop
.0efa	78		          sei
.0efb	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0efc	8d bd 0e	          sta  pc        ; save pcl
.0eff	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f00	8d be 0e	          sta  pc+1      ; save pch
.0f03	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f04	a8		          tay            ; set y
.0f05	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f06	aa		          tax            ; set x
.0f07	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0f08	8d bc 0e	          sta  ra        ; save a
.0f0b	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0f0c	8d bb 0e	          sta  rp        ; save rp
.0f0f	68		          pla            ; stack : zp2l, zp1h, zp1l
.0f10	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0f12	68		          pla            ; stack : zp1h, zp1l
.0f13	85 fd		          sta  zpage2    ; get zpage2 High byte
.0f15	68		          pla            ; stack : zp1l
.0f16	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0f18	68		          pla            ; stack :
.0f19	85 fb		          sta  zpage1    ; get zpage1 High byte
.0f1b	ad be 0e	          lda  pc+1      ; get pch
.0f1e	48		          pha            ; stack : pch
.0f1f	ad bd 0e	          lda  pc
.0f22	48		          pha            ; stack : pcl, pch
.0f23	ad bb 0e	          lda  rp        ; get rp
.0f26	48		          pha            ; stack : rp, pcl, pch
.0f27	ad bc 0e	          lda  ra        ; set ra
.0f2a	58		          cli
.0f2b	28		          plp            ; stack : pcl, pch
.0f2c	60		          rts
.0f2d			pushreg
.0f2d	08		          php            ; stack : flg, pcl, pch
.0f2e	78		          sei
.0f2f	8d bc 0e	          sta  ra        ; save a
.0f32	68		          pla            ; stack : pcl, pch
.0f33	8d bb 0e	          sta  rp        ; save rp
.0f36	68		          pla            ; stack : pch
.0f37	8d bd 0e	          sta  pc        ; save pcl
.0f3a	68		          pla            ; stack : -
.0f3b	8d be 0e	          sta  pc+1      ; save pch
.0f3e	ad bb 0e	          lda  rp        ; get rp
.0f41	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0f42	ad bc 0e	          lda  ra        ; get a
.0f45	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f46	8a		          txa            ; get x
.0f47	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f48	98		          tya            ; get y
.0f49	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f4a	ad be 0e	          lda  pc+1      ; get pch
.0f4d	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f4e	ad bd 0e	          lda  pc        ; get pcl
.0f51	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f52	ad bb 0e	          lda  rp        ; get rp
.0f55	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f56	ad bc 0e	          lda  ra        ; get a
.0f59	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f5a	58		          cli
.0f5b	60		          rts
.0f5c			pullreg
.0f5c			popreg
.0f5c	78		          sei
.0f5d	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f5e	8d bd 0e	          sta  pc        ; save pcl
.0f61	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f62	8d be 0e	          sta  pc+1      ; save pch
.0f65	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f66	a8		          tay            ; set y
.0f67	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f68	aa		          tax            ; set x
.0f69	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0f6a	8d bc 0e	          sta  ra        ; save a
.0f6d	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0f6e	8d bb 0e	          sta  rp        ; save rp
.0f71	ad be 0e	          lda  pc+1      ; get pch
.0f74	48		          pha            ; stack : pch
.0f75	ad bd 0e	          lda  pc
.0f78	48		          pha            ; stack : pcl, pch
.0f79	ad bb 0e	          lda  rp        ; get rp
.0f7c	48		          pha            ; stack : rp, pcl, pch
.0f7d	ad bc 0e	          lda  ra        ; set ra
.0f80	58		          cli
.0f81	28		          plp            ; stack : pcl, pch
.0f82	60		          rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0f83			blkfill
.0f83	20 bf 0e	bf0            jsr  push
.0f86	20 4e 10	               jsr  savezp1
.0f89	84 fc		               sty  zpage1+1
.0f8b	a0 00		               ldy  #$00
.0f8d	84 fb		               sty  zpage1
.0f8f	91 fb		bf1            sta  (zpage1),y
.0f91	c8		               iny
.0f92	d0 fb		               bne  bf1
.0f94	20 5d 10	               jsr  restzp1
.0f97	20 fa 0e	               jsr  pop
.0f9a	60		               rts
.0f9b			memfill
.0f9b	20 bf 0e	               jsr  push
.0f9e	20 83 0f	mf1            jsr  blkfill
.0fa1	c8		               iny
.0fa2	ca		               dex
.0fa3	d0 f9		               bne  mf1
.0fa5	20 fa 0e	               jsr  pop
.0fa8	60		               rts
.0fa9			memmove
.0fa9	20 bf 0e	               jsr  push
.0fac	ba		               tsx            ; On se crée un pointeur ...
.0fad	8a		               txa
.0fae	18		               clc
.0faf	69 0b		               adc  #11
.0fb1	a8		               tay
.0fb2	a2 06		               ldx  #$06
.0fb4	b9 00 01	nextbyte       lda  $0100,y
.0fb7	99 03 10	               sta  words,y
.0fba	c8		               iny
.0fbb	ca		               dex
.0fbc	d0 f6		               bne  nextbyte
.0fbe	ad 03 10	               lda  s
.0fc1	8d da 0f	               sta  source+1
.0fc4	ad 04 10	               lda  s+1
.0fc7	8d db 0f	               sta  source+2
.0fca	ad 05 10	               lda  d
.0fcd	8d d7 0f	               sta  destin+1
.0fd0	ad 06 10	               lda  d+1
.0fd3	8d d8 0f	               sta  destin+2
.0fd6	ad ff ff	destin         lda  $ffff
.0fd9	8d ff ff	source         sta  $ffff
.0fdc	ee d7 0f	               inc  destin+1
.0fdf	d0 03		               bne  src
.0fe1	ee d8 0f	               inc  destin+2
.0fe4	ee da 0f	src            inc  source+1
.0fe7	d0 03		               bne  cnt
.0fe9	ee db 0f	               inc  source+2
.0fec	ad 07 10	cnt            lda  compte
.0fef	d0 08		               bne  decit
.0ff1	ad 08 10	               lda  compte+1
.0ff4	f0 09		               beq  fini
.0ff6	ce 08 10	               dec  compte+1
.0ff9	ce 07 10	decit          dec  compte
.0ffc	4c d6 0f	               jmp  destin
.0fff	20 fa 0e	fini           jsr  pop
.1002	60		               rts
.1003			words
>1003	00 00		s         .word     $0000
>1005	00 00		d         .word     $0000
>1007	00 00		compte    .word     $0000
.1009			decword
.1009	20 bf 0e	               jsr  push
.100c	86 fd		               stx  zpage2
.100e	84 fe		               sty  zpage2+1
.1010	20 fa 0e	               jsr  pop
.1013	60		               rts
.1014			inczpage1
.1014			inczp1
.1014	08		               php
.1015	48		               pha
.1016	e6 fb		               inc  zpage1
.1018	a5 fb		               lda  zpage1
.101a	d0 02		               bne  nopage
.101c	e6 fc		               inc  zpage1+1
.101e	68		nopage         pla
.101f	28		               plp
.1020	60		               rts
.1021			deczpage1
.1021			deczp1
.1021	08		               php
.1022	48		               pha
.1023	c6 fb		               dec  zpage1
.1025	a5 fb		               lda  zpage1
.1027	c9 ff		               cmp  #$ff
.1029	f0 02		               beq  report
.102b	d0 02		               bne  nopage
.102d	c6 fc		report         dec  zpage1+1
.102f	68		nopage         pla
.1030	28		               plp
.1031	60		               rts
.1032			inczpage2
.1032			inczp2
.1032	08		               php
.1033	48		               pha
.1034	e6 fd		               inc  zpage2
.1036	a5 fd		               lda  zpage2
.1038	d0 02		               bne  nopage
.103a	e6 fe		               inc  zpage2+1
.103c	68		nopage         pla
.103d	28		               plp
.103e	60		               rts
.103f			deczpage2
.103f			deczp2
.103f	08		               php
.1040	c6 fd		               dec  zpage2
.1042	a5 fd		               lda  zpage2
.1044	c9 ff		               cmp  #$ff
.1046	f0 02		               beq  report
.1048	d0 02		               bne  nopage
.104a	c6 fe		report         dec  zpage2+1
.104c	28		nopage         plp
.104d	60		               rts
.104e			savezp1
.104e	08		               php
.104f	48		               pha
.1050	a5 fb		               lda  zpage1
.1052	8d df 10	               sta  zp1
.1055	a5 fc		               lda  zpage1+1
.1057	8d e0 10	               sta  zp1+1
.105a	68		               pla
.105b	28		               plp
.105c	60		               rts
.105d			restzp1
.105d	08		               php
.105e	48		               pha
.105f	ad df 10	               lda  zp1
.1062	85 fb		               sta  zpage1
.1064	ad e0 10	               lda  zp1+1
.1067	85 fc		               sta  zpage1+1
.1069	68		               pla
.106a	28		               plp
.106b	60		               rts
.106c			savezp2
.106c	08		               php
.106d	48		               pha
.106e	a5 fd		               lda  zpage2
.1070	8d e1 10	               sta  zp2
.1073	a5 fe		               lda  zpage2+1
.1075	8d e2 10	               sta  zp2+1
.1078	68		               pla
.1079	28		               plp
.107a	60		               rts
.107b			restzp2
.107b	08		               php
.107c	48		               pha
.107d	ad e1 10	               lda  zp2
.1080	85 fd		               sta  zpage2
.1082	ad e2 10	               lda  zp2+1
.1085	85 fe		               sta  zpage2+1
.1087	68		               pla
.1088	28		               plp
.1089	60		               rts
.108a			xy2addr
.108a	08		               php
.108b	48		               pha
.108c	8a		               txa
.108d	48		               pha
.108e	98		               tya
.108f	48		               pha
.1090	ad da 10	               lda  addr1+1
.1093	8d dc 10	               sta  addr2+1
.1096	ad d9 10	               lda  addr1
.1099	8d db 10	               sta  addr2
.109c	c0 00		               cpy  #$00
.109e	f0 0f		               beq  addx
.10a0	18		moreline       clc
.10a1	6d d8 10	               adc  ymult
.10a4	90 03		               bcc  norepy
.10a6	ee dc 10	               inc  addr2+1
.10a9	8d db 10	norepy         sta  addr2
.10ac	88		               dey
.10ad	d0 f1		               bne  moreline
.10af	8a		addx           txa
.10b0	18		               clc
.10b1	6d db 10	               adc  addr2
.10b4	90 03		               bcc  thatsit
.10b6	ee dc 10	               inc  addr2+1
.10b9	8d db 10	thatsit        sta  addr2
.10bc	68		               pla
.10bd	a8		               tay
.10be	68		               pla
.10bf	aa		               tax
.10c0	68		               pla
.10c1	28		               plp
.10c2	60		               rts
.10c3			loop
.10c3	ce e3 10	               dec  loopcount
.10c6	d0 03		               bne  norep
.10c8	ce e4 10	               dec  loopcount+1
.10cb	ad e3 10	norep          lda  loopcount
.10ce	c9 00		               cmp  #$00
.10d0	d0 05		               bne  out
.10d2	4d e4 10	               eor  loopcount+1
.10d5	c9 ff		               cmp  #$ff
.10d7	60		out            rts
>10d8	28		ymult          .byte     40
>10d9	00 00		addr1          .word     $0000
>10db	00 00		addr2          .word     $0000
>10dd	00 00		bytecnt        .word     $0000
>10df	00 00		zp1            .word     $0000
>10e1	00 00		zp2            .word     $0000
>10e3	00 00		loopcount      .word     $0000

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>10e5	01		a2hexcol       .byte     1              ; pour aputscxy
>10e6	00		a2hexbkcol     .byte     %00000000
.10e7			a2hexpos
>10e7	00		a2hexpx        .byte     0              ; pour aputsxy
>10e8	00		a2hexpy        .byte     0
>10e9	24		a2hexprefix    .byte     "$"            ; pour aputs
>10ea	00 00		a2hexstr       .word     $00
>10ec	00 00		               .word     $00
>10ee	00		               .byte     0              ; 0 end string
>10ef	01		abincol        .byte     1
>10f0	00		abinbkcol      .byte     %00000000
>10f1	30 30 30 30	abin           .null     "00000000"
>10f5	30 30 30 30 00
>10fa	20 20 20 00	adec           .null     "   "
.10fe			putahexfmtxy
.10fe	20 bf 0e	               jsr  push
.1101	20 4d 11	               jsr  atohex
.1104	ae e7 10	               ldx  a2hexpx
.1107	ac e8 10	               ldy  a2hexpy
.110a	20 e3 0d	               jsr  gotoxy
.110d	a2 e9		               ldx  #<a2hexprefix
.110f	a0 10		               ldy  #>a2hexprefix
.1111	20 c9 0d	               jsr  puts
.1114	20 fa 0e	               jsr  pop
.1117	60		               rts
.1118			putahexfmt
.1118	20 bf 0e	               jsr  push
.111b	20 4d 11	               jsr  atohex
.111e	a2 e9		               ldx  #<a2hexprefix
.1120	a0 10		               ldy  #>a2hexprefix
.1122	20 c9 0d	               jsr  puts
.1125	20 fa 0e	               jsr  pop
.1128	60		               rts
.1129			putahex
.1129	20 bf 0e	               jsr  push
.112c	20 4d 11	               jsr  atohex
.112f	a2 ea		               ldx  #<a2hexstr
.1131	a0 10		               ldy  #>a2hexstr
.1133	20 c9 0d	               jsr  puts
.1136	20 fa 0e	               jsr  pop
.1139	60		               rts
.113a			nibtohex
.113a	08		               php
.113b	29 0f		               and  #$0f
.113d	f8		               sed
.113e	18		               clc
.113f	69 90		               adc  #$90
.1141	69 40		               adc  #$40
.1143	d8		               cld
.1144	28		               plp
.1145	60		               rts
.1146			lsra4bits
.1146	08		               php
.1147	4a		               lsr
.1148	4a		               lsr
.1149	4a		               lsr
.114a	4a		               lsr
.114b	28		               plp
.114c	60		               rts
.114d			atohex
.114d	08		               php
.114e	48		               pha
.114f	48		               pha
.1150	20 46 11	               jsr  lsra4bits
.1153	20 3a 11	               jsr  nibtohex
.1156	8d ea 10	               sta  a2hexstr
.1159	68		               pla
.115a	20 3a 11	               jsr  nibtohex
.115d	8d eb 10	               sta  a2hexstr+1
.1160	a9 00		               lda  #$00                ; set end of string
.1162	8d ec 10	               sta  a2hexstr+2
.1165	68		               pla
.1166	28		               plp
.1167	60		               rts
.1168			xy2hex
.1168	20 bf 0e	               jsr  push
.116b	20 4d 11	               jsr  atohex
.116e	8a		               txa
.116f	48		               pha
.1170	20 46 11	               jsr  lsra4bits
.1173	20 3a 11	               jsr  nibtohex
.1176	8d ea 10	               sta  a2hexstr
.1179	68		               pla
.117a	20 3a 11	               jsr  nibtohex
.117d	8d eb 10	               sta  a2hexstr+1
.1180	98		               tya
.1181	48		               pha
.1182	20 46 11	               jsr  lsra4bits
.1185	20 3a 11	               jsr  nibtohex
.1188	8d ec 10	               sta  a2hexstr+2
.118b	68		               pla
.118c	20 3a 11	               jsr  nibtohex
.118f	8d ed 10	               sta  a2hexstr+3
.1192	a9 00		               lda  #$00                ; 0 ended string
.1194	8d ee 10	               sta  a2hexstr+4
.1197	20 fa 0e	               jsr  pop
.119a			atobin
.119a	20 bf 0e	               jsr  push
.119d	a2 08		               ldx  #8
.119f	a0 00		               ldy  #0
.11a1	18		               clc
.11a2	2a		nextbit        rol
.11a3	48		               pha
.11a4	69 00		               adc  #$00
.11a6	29 01		               and  #$01
.11a8	20 3a 11	               jsr  nibtohex
.11ab	99 f1 10	               sta  abin,y
.11ae	68		               pla
.11af	c8		               iny
.11b0	ca		               dex
.11b1	d0 ef		               bne  nextbit
.11b3	a9 00		               lda  #0
.11b5	99 f1 10	               sta  abin,y
.11b8	20 fa 0e	               jsr  pull
.11bb	60		               rts
.11bc			abinsetmccol
.11bc	20 2d 0f	               jsr  pushreg
.11bf	20 5c 0f	               jsr  popreg
.11c2	60		               rts
.11c3			putabin
.11c3	20 9a 11	               jsr     atobin
.11c6	20 bf 0e	               jsr     push
.11c9	a2 f1		               ldx     #<abin
.11cb	a0 10		               ldy     #>abin
.11cd	20 c9 0d	               jsr     puts
.11d0	20 fa 0e	               jsr     pop
.11d3	60		               rts
.11d4			printabin
.11d4	20 bf 0e	               jsr     push
.11d7	a2 f1		               ldx     #<abin
.11d9	a0 10		               ldy     #>abin
.11db	20 c9 0d	               jsr     puts
.11de	20 fa 0e	               jsr     pop
.11e1	60		               rts
.11e2			putabinfmt
.11e2	08		               php
.11e3	48		               pha
.11e4	a9 25		               lda     #"%"
.11e6	20 c3 0d	               jsr     putch
.11e9	68		               pla
.11ea	20 c3 11	               jsr     putabin
.11ed	28		               plp
.11ee	60		               rts
.11ef			putabinxy
.11ef	20 e3 0d	               jsr     gotoxy
.11f2	20 c3 11	               jsr     putabin
.11f5	60		               rts
.11f6			putabinfmtxy
.11f6	20 e3 0d	               jsr     gotoxy
.11f9	20 e2 11	               jsr     putabinfmt
.11fc	60		               rts
.11fd			atodec
.11fd	20 bf 0e	               jsr  push
.1200	f8		               sed            ; On se place en mode décimal.
.1201	aa		               tax            ; On déplace a dans x.
.1202	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.1204	a9 00		               lda  #$00      ; 0 dans A.
.1206	18		nextbit        clc            ; Bit carry a 0.
.1207	69 01		               adc  #$01      ; Ajoute 1 a A.
.1209	90 01		               bcc  decx      ; Pas de carry, pas de report.
.120b	c8		               iny            ; On incrémente Y
.120c	ca		decx           dex            ; X=X-1
.120d	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.120f	48		               pha            ; A sur le stack.
.1210	98		               tya            ; Y dans A (MSB)
.1211	20 3a 11	               jsr  nibtohex  ; a hex petsci ...
.1214	8d fa 10	               sta  adec      ; ... dans tampon.
.1217	68		               pla            ; Récupere A
.1218	48		               pha            ;
.1219	20 3a 11	               jsr  nibtohex
.121c	8d fc 10	               sta  adec+2
.121f	68		               pla
.1220	6a		               ror
.1221	6a		               ror
.1222	6a		               ror
.1223	6a		               ror
.1224	20 3a 11	               jsr  nibtohex
.1227	8d fb 10	               sta  adec+1
.122a	d8		               cld            ; On revient en mode binaire.
.122b	20 fa 0e	               jsr  pull
.122e	60		               rts
.122f			putadec
.122f	20 bf 0e	               jsr  push
.1232	20 fd 11	               jsr  atodec
.1235	a2 fa		               ldx  #<adec
.1237	a0 10		               ldy  #>adec+1
.1239	20 c9 0d	               jsr  puts
.123c	20 fa 0e	               jsr  pop
.123f	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.1240			waitstop
.1240	20 bf 0e	               jsr  push
.1243	20 ed f6	wait           jsr  k_stop
.1246	d0 fb		               bne  wait
.1248	20 fa 0e	               jsr  pop
.124b	60		               rts
.124c			anykey
.124c	08		               php
.124d	48		               pha
.124e	a5 cb		nokey          lda 203
.1250	c9 40		               cmp #64
.1252	f0 fa		               beq nokey
.1254	20 5a 12	               jsr releasekey
.1257	68		               pla
.1258	28		               plp
.1259	60		               rts
.125a			releasekey
.125a	08		               php
.125b	48		               pha
.125c	a5 cb		keypressed     lda 203
.125e	c9 40		               cmp #64
.1260	d0 fa		               bne keypressed
.1262	68		               pla
.1263	28		               plp
.1264	60		               rts
.1265			getkey
.1265	20 e4 ff	gkagain        jsr  getin
.1268	c9 00		               cmp  #0
.126a	f0 f9		               beq  gkagain
.126c	60		               rts
.126d			kbflushbuff
.126d	08		               php
.126e	48		               pha
.126f	20 e4 ff	again          jsr  getin
.1272	c9 00		               cmp  #0
.1274	d0 f9		               bne  again
.1276	68		               pla
.1277	28		               plp
.1278	60		               rts
.1279			waitkey
.1279	20 bf 0e	               jsr  push
.127c	8d ca 12	               sta  thekey
.127f	20 e4 ff	nope           jsr  getin
.1282	20 d2 ff	               jsr  chrout
.1285	cd ca 12	               cmp  thekey
.1288	d0 f5		               bne  nope
.128a	20 d2 ff	               jsr  chrout
.128d	20 fa 0e	               jsr  pop
.1290	60		               rts
.1291			waitspace
.1291	20 bf 0e	               jsr  push
.1294	a9 7f		wait           lda  #$7f  ;%01111111
.1296	8d 00 dc	               sta  $dc00
.1299	ad 01 dc	               lda  $dc01
.129c	29 10		               and  #$10  ;mask %00010000
.129e	d0 f4		               bne  wait
.12a0	20 fa 0e	               jsr  pop
.12a3			waitsstop
.12a3	20 bf 0e	               jsr  push
.12a6	20 ed f6	wait           jsr  k_stop  ;%01111111
.12a9	d0 fb		               bne  wait
.12ab	20 fa 0e	               jsr  pop
.12ae			waitreturn
.12ae	20 bf 0e	               jsr  push
.12b1	ad cb 12	               lda  thecount
.12b4	8d 00 04	               sta  scrnram
.12b7	a9 02		               lda  #$02
.12b9	8d 00 d8	               sta  colorram
.12bc	20 e4 ff	nope           jsr  getin
.12bf	c9 0d		nohex          cmp  #$0d
.12c1	d0 f9		               bne  nope
.12c3	ee cb 12	               inc  thecount
.12c6	20 fa 0e	               jsr  pop
.12c9	60		               rts
>12ca	00		thekey         .byte   0
>12cb	01		thecount       .byte   $01
>12cc	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>12d0	00 00 00 00 00 00 00 00 00 0d 00 00
>12dc	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>12e0	00 00 00 00 00 00 00 00 00 00 00 00
>12ec	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>12f0	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>12fc	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1300	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>130c	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1310	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>131c	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1320	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>132c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1330	00 00 00 00 00 00 00 00 00 00 00 00
>133c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1340	00 00 00 00 00 00 00 00 00 00 00 00
>134c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1350	00 00 00 00 00 00 00 00 00 00 00 00
>135c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1360	00 00 00 00 00 00 00 00 00 00 00 00
>136c	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1370	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>137c	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1380	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>138c	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1390	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>139c	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>13a0	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>13ac	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>13b0	00 00 00 00 00 00 00 00 00 00 00 00
>13bc	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>13c0	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: slbug64.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L slbug64.txt -o slbug64.prg slbug64.asm
; Fri Sep 26 17:09:25 2025

;Offset	;Hex		;Source

;******  Processing input file: slbug64.asm

="20250925-190639"	                Version = "20250925-190639"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 55 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"
.0854	60		              rts                  ; ... doit se rerminer par un RTS.

;******  Return to file: slbug64.asm

.0855			main
.0855	20 a7 10	               jsr  scrmaninit
.0858	08		               php
.0859	48		               pha
.085a	a9 0e		               lda  #14
.085c	20 d2 ff	               jsr  $ffd2
.085f	68		               pla
.0860	28		               plp
.0861	08		               php
.0862	48		               pha
.0863	a9 08		               lda  #$08
.0865	20 d2 ff	               jsr  $ffd2
.0868	68		               pla
.0869	28		               plp
.086a	a9 05		               lda  #cvert
.086c	8d 20 d0	               sta  vicbordcol
.086f	a9 06		               lda  #cbleu
.0871	8d 21 d0	               sta  vicbackcol
.0874	a9 01		               lda  #cblanc
.0876	8d 86 02	               sta  bascol
.0879	20 c7 10	               jsr  cls
.087c	20 8b 0b	               jsr  help
.087f	20 67 15	               jsr  anykey
.0882	20 96 08	               jsr  slbug64
.0885	20 48 12	               jsr  pushreg
.0888	a2 00		               ldx  #0
.088a	a0 00		               ldy  #0
.088c	20 fe 10	               jsr  gotoxy
.088f	20 77 12	               jsr  popreg
.0892	20 67 15	               jsr  anykey
.0895	60		               rts
.0896			slbug64
.0896	08		                php
.0897	48		                pha
.0898	ad 21 d0	                lda vicbackcol
.089b	48		                pha
.089c	a9 00		                lda #cnoir
.089e	8d 21 d0	                sta vicbackcol
.08a1	8d 20 d0	                sta vicbordcol
.08a4	20 eb 16	                jsr showregs
.08a7	20 67 15	                jsr anykey
.08aa	68		                pla
.08ab	20 48 12	               jsr  pushreg
.08ae	a2 00		               ldx  #0
.08b0	a0 00		               ldy  #0
.08b2	20 fe 10	               jsr  gotoxy
.08b5	20 77 12	               jsr  popreg
.08b8	08		                php                 ; Sauvegarde les registres.
.08b9	48		                pha
.08ba	a9 01		                lda #1           ; Initialise le paramètre top et la ...
.08bc	8d b7 19	                sta drawbox_top
.08bf	8d bc 19	                sta drawbox_curline ; ... position de la ligne à traiter.
.08c2	a9 01		                lda #1          ; Initialise le paramètre left.
.08c4	8d b8 19	                sta drawbox_left
.08c7	a9 11		                lda #17         ; Initialise le paramètre width.
.08c9	8d b9 19	                sta drawbox_width
.08cc	a9 05		                lda #5        ; Initialise le paramètre height.
.08ce	8d ba 19	                sta drawbox_height
.08d1	a9 11		                lda #cblanc+reverse        ; Initialise le paramètre colour.
.08d3	8d bb 19	                sta drawbox_colour
.08d6	68		                pla                 ; Récupère les registres.
.08d7	28		                plp
.08d8	20 9a 19	                jsr db_drawbox      ; Dessine la fenêtre.
.08db	20 48 12	                jsr  pushreg
.08de	ad 86 02	                lda  bascol
.08e1	48		                pha
.08e2	a9 11		                lda  #cblanc+reverse
.08e4	8d 86 02	                sta  bascol
.08e7	a0 02		                ldy  #1+1
.08e9	a2 01		                ldx  #1
.08eb	18		                clc
.08ec	20 f0 ff	                jsr  plot
.08ef	a2 07		                ldx  #<titre
.08f1	a0 0f		                ldy  #>titre
.08f3	20 e4 10	                jsr  puts
.08f6	68		                pla
.08f7	8d 86 02	                sta  bascol
.08fa	20 77 12	                jsr  popreg
.08fd	ee 0d 0f	                inc titre+6
.0900	08		                php                 ; Sauvegarde les registres.
.0901	48		                pha
.0902	a9 03		                lda #3           ; Initialise le paramètre top et la ...
.0904	8d b7 19	                sta drawbox_top
.0907	8d bc 19	                sta drawbox_curline ; ... position de la ligne à traiter.
.090a	a9 03		                lda #3          ; Initialise le paramètre left.
.090c	8d b8 19	                sta drawbox_left
.090f	a9 11		                lda #17         ; Initialise le paramètre width.
.0911	8d b9 19	                sta drawbox_width
.0914	a9 05		                lda #5        ; Initialise le paramètre height.
.0916	8d ba 19	                sta drawbox_height
.0919	a9 0f		                lda #cgris3        ; Initialise le paramètre colour.
.091b	8d bb 19	                sta drawbox_colour
.091e	68		                pla                 ; Récupère les registres.
.091f	28		                plp
.0920	20 9a 19	                jsr db_drawbox      ; Dessine la fenêtre.
.0923	20 48 12	                jsr  pushreg
.0926	ad 86 02	                lda  bascol
.0929	48		                pha
.092a	a9 0f		                lda  #cgris3
.092c	8d 86 02	                sta  bascol
.092f	a0 04		                ldy  #3+1
.0931	a2 03		                ldx  #3
.0933	18		                clc
.0934	20 f0 ff	                jsr  plot
.0937	a2 07		                ldx  #<titre
.0939	a0 0f		                ldy  #>titre
.093b	20 e4 10	                jsr  puts
.093e	68		                pla
.093f	8d 86 02	                sta  bascol
.0942	20 77 12	                jsr  popreg
.0945	ee 0d 0f	                inc titre+6
.0948	08		                php                 ; Sauvegarde les registres.
.0949	48		                pha
.094a	a9 05		                lda #5           ; Initialise le paramètre top et la ...
.094c	8d b7 19	                sta drawbox_top
.094f	8d bc 19	                sta drawbox_curline ; ... position de la ligne à traiter.
.0952	a9 05		                lda #5          ; Initialise le paramètre left.
.0954	8d b8 19	                sta drawbox_left
.0957	a9 11		                lda #17         ; Initialise le paramètre width.
.0959	8d b9 19	                sta drawbox_width
.095c	a9 05		                lda #5        ; Initialise le paramètre height.
.095e	8d ba 19	                sta drawbox_height
.0961	a9 1c		                lda #cgris1+reverse        ; Initialise le paramètre colour.
.0963	8d bb 19	                sta drawbox_colour
.0966	68		                pla                 ; Récupère les registres.
.0967	28		                plp
.0968	20 9a 19	                jsr db_drawbox      ; Dessine la fenêtre.
.096b	20 48 12	                jsr  pushreg
.096e	ad 86 02	                lda  bascol
.0971	48		                pha
.0972	a9 1c		                lda  #cgris1+reverse
.0974	8d 86 02	                sta  bascol
.0977	a0 06		                ldy  #5+1
.0979	a2 05		                ldx  #5
.097b	18		                clc
.097c	20 f0 ff	                jsr  plot
.097f	a2 07		                ldx  #<titre
.0981	a0 0f		                ldy  #>titre
.0983	20 e4 10	                jsr  puts
.0986	68		                pla
.0987	8d 86 02	                sta  bascol
.098a	20 77 12	                jsr  popreg
.098d	ee 0d 0f	                inc titre+6
.0990	08		                php                 ; Sauvegarde les registres.
.0991	48		                pha
.0992	a9 07		                lda #7           ; Initialise le paramètre top et la ...
.0994	8d b7 19	                sta drawbox_top
.0997	8d bc 19	                sta drawbox_curline ; ... position de la ligne à traiter.
.099a	a9 07		                lda #7          ; Initialise le paramètre left.
.099c	8d b8 19	                sta drawbox_left
.099f	a9 11		                lda #17         ; Initialise le paramètre width.
.09a1	8d b9 19	                sta drawbox_width
.09a4	a9 05		                lda #5        ; Initialise le paramètre height.
.09a6	8d ba 19	                sta drawbox_height
.09a9	a9 0b		                lda #cgris0        ; Initialise le paramètre colour.
.09ab	8d bb 19	                sta drawbox_colour
.09ae	68		                pla                 ; Récupère les registres.
.09af	28		                plp
.09b0	20 9a 19	                jsr db_drawbox      ; Dessine la fenêtre.
.09b3	20 48 12	                jsr  pushreg
.09b6	ad 86 02	                lda  bascol
.09b9	48		                pha
.09ba	a9 0b		                lda  #cgris0
.09bc	8d 86 02	                sta  bascol
.09bf	a0 08		                ldy  #7+1
.09c1	a2 07		                ldx  #7
.09c3	18		                clc
.09c4	20 f0 ff	                jsr  plot
.09c7	a2 07		                ldx  #<titre
.09c9	a0 0f		                ldy  #>titre
.09cb	20 e4 10	                jsr  puts
.09ce	68		                pla
.09cf	8d 86 02	                sta  bascol
.09d2	20 77 12	                jsr  popreg
.09d5	ee 0d 0f	                inc titre+6
.09d8	08		                php                 ; Sauvegarde les registres.
.09d9	48		                pha
.09da	a9 09		                lda #9           ; Initialise le paramètre top et la ...
.09dc	8d b7 19	                sta drawbox_top
.09df	8d bc 19	                sta drawbox_curline ; ... position de la ligne à traiter.
.09e2	a9 09		                lda #9          ; Initialise le paramètre left.
.09e4	8d b8 19	                sta drawbox_left
.09e7	a9 11		                lda #17         ; Initialise le paramètre width.
.09e9	8d b9 19	                sta drawbox_width
.09ec	a9 05		                lda #5        ; Initialise le paramètre height.
.09ee	8d ba 19	                sta drawbox_height
.09f1	a9 1a		                lda #crose+reverse        ; Initialise le paramètre colour.
.09f3	8d bb 19	                sta drawbox_colour
.09f6	68		                pla                 ; Récupère les registres.
.09f7	28		                plp
.09f8	20 9a 19	                jsr db_drawbox      ; Dessine la fenêtre.
.09fb	20 48 12	                jsr  pushreg
.09fe	ad 86 02	                lda  bascol
.0a01	48		                pha
.0a02	a9 1a		                lda  #crose+reverse
.0a04	8d 86 02	                sta  bascol
.0a07	a0 0a		                ldy  #9+1
.0a09	a2 09		                ldx  #9
.0a0b	18		                clc
.0a0c	20 f0 ff	                jsr  plot
.0a0f	a2 07		                ldx  #<titre
.0a11	a0 0f		                ldy  #>titre
.0a13	20 e4 10	                jsr  puts
.0a16	68		                pla
.0a17	8d 86 02	                sta  bascol
.0a1a	20 77 12	                jsr  popreg
.0a1d	ee 0d 0f	                inc titre+6
.0a20	08		                php                 ; Sauvegarde les registres.
.0a21	48		                pha
.0a22	a9 0b		                lda #11           ; Initialise le paramètre top et la ...
.0a24	8d b7 19	                sta drawbox_top
.0a27	8d bc 19	                sta drawbox_curline ; ... position de la ligne à traiter.
.0a2a	a9 0b		                lda #11          ; Initialise le paramètre left.
.0a2c	8d b8 19	                sta drawbox_left
.0a2f	a9 11		                lda #17         ; Initialise le paramètre width.
.0a31	8d b9 19	                sta drawbox_width
.0a34	a9 05		                lda #5        ; Initialise le paramètre height.
.0a36	8d ba 19	                sta drawbox_height
.0a39	a9 02		                lda #crouge        ; Initialise le paramètre colour.
.0a3b	8d bb 19	                sta drawbox_colour
.0a3e	68		                pla                 ; Récupère les registres.
.0a3f	28		                plp
.0a40	20 9a 19	                jsr db_drawbox      ; Dessine la fenêtre.
.0a43	20 48 12	                jsr  pushreg
.0a46	ad 86 02	                lda  bascol
.0a49	48		                pha
.0a4a	a9 02		                lda  #crouge
.0a4c	8d 86 02	                sta  bascol
.0a4f	a0 0c		                ldy  #11+1
.0a51	a2 0b		                ldx  #11
.0a53	18		                clc
.0a54	20 f0 ff	                jsr  plot
.0a57	a2 07		                ldx  #<titre
.0a59	a0 0f		                ldy  #>titre
.0a5b	20 e4 10	                jsr  puts
.0a5e	68		                pla
.0a5f	8d 86 02	                sta  bascol
.0a62	20 77 12	                jsr  popreg
.0a65	ee 0d 0f	                inc titre+6
.0a68	08		                php                 ; Sauvegarde les registres.
.0a69	48		                pha
.0a6a	a9 0d		                lda #13           ; Initialise le paramètre top et la ...
.0a6c	8d b7 19	                sta drawbox_top
.0a6f	8d bc 19	                sta drawbox_curline ; ... position de la ligne à traiter.
.0a72	a9 0d		                lda #13          ; Initialise le paramètre left.
.0a74	8d b8 19	                sta drawbox_left
.0a77	a9 11		                lda #17         ; Initialise le paramètre width.
.0a79	8d b9 19	                sta drawbox_width
.0a7c	a9 05		                lda #5        ; Initialise le paramètre height.
.0a7e	8d ba 19	                sta drawbox_height
.0a81	a9 14		                lda #cmauve+reverse        ; Initialise le paramètre colour.
.0a83	8d bb 19	                sta drawbox_colour
.0a86	68		                pla                 ; Récupère les registres.
.0a87	28		                plp
.0a88	20 9a 19	                jsr db_drawbox      ; Dessine la fenêtre.
.0a8b	20 48 12	                jsr  pushreg
.0a8e	ad 86 02	                lda  bascol
.0a91	48		                pha
.0a92	a9 14		                lda  #cmauve+reverse
.0a94	8d 86 02	                sta  bascol
.0a97	a0 0e		                ldy  #13+1
.0a99	a2 0d		                ldx  #13
.0a9b	18		                clc
.0a9c	20 f0 ff	                jsr  plot
.0a9f	a2 07		                ldx  #<titre
.0aa1	a0 0f		                ldy  #>titre
.0aa3	20 e4 10	                jsr  puts
.0aa6	68		                pla
.0aa7	8d 86 02	                sta  bascol
.0aaa	20 77 12	                jsr  popreg
.0aad	ee 0d 0f	                inc titre+6
.0ab0	08		                php                 ; Sauvegarde les registres.
.0ab1	48		                pha
.0ab2	a9 0f		                lda #15           ; Initialise le paramètre top et la ...
.0ab4	8d b7 19	                sta drawbox_top
.0ab7	8d bc 19	                sta drawbox_curline ; ... position de la ligne à traiter.
.0aba	a9 0f		                lda #15          ; Initialise le paramètre left.
.0abc	8d b8 19	                sta drawbox_left
.0abf	a9 11		                lda #17         ; Initialise le paramètre width.
.0ac1	8d b9 19	                sta drawbox_width
.0ac4	a9 05		                lda #5        ; Initialise le paramètre height.
.0ac6	8d ba 19	                sta drawbox_height
.0ac9	a9 06		                lda #cbleu        ; Initialise le paramètre colour.
.0acb	8d bb 19	                sta drawbox_colour
.0ace	68		                pla                 ; Récupère les registres.
.0acf	28		                plp
.0ad0	20 9a 19	                jsr db_drawbox      ; Dessine la fenêtre.
.0ad3	20 48 12	                jsr  pushreg
.0ad6	ad 86 02	                lda  bascol
.0ad9	48		                pha
.0ada	a9 06		                lda  #cbleu
.0adc	8d 86 02	                sta  bascol
.0adf	a0 10		                ldy  #15+1
.0ae1	a2 0f		                ldx  #15
.0ae3	18		                clc
.0ae4	20 f0 ff	                jsr  plot
.0ae7	a2 07		                ldx  #<titre
.0ae9	a0 0f		                ldy  #>titre
.0aeb	20 e4 10	                jsr  puts
.0aee	68		                pla
.0aef	8d 86 02	                sta  bascol
.0af2	20 77 12	                jsr  popreg
.0af5	ee 0d 0f	                inc titre+6
.0af8	08		                php                 ; Sauvegarde les registres.
.0af9	48		                pha
.0afa	a9 11		                lda #17           ; Initialise le paramètre top et la ...
.0afc	8d b7 19	                sta drawbox_top
.0aff	8d bc 19	                sta drawbox_curline ; ... position de la ligne à traiter.
.0b02	a9 11		                lda #17          ; Initialise le paramètre left.
.0b04	8d b8 19	                sta drawbox_left
.0b07	a9 11		                lda #17         ; Initialise le paramètre width.
.0b09	8d b9 19	                sta drawbox_width
.0b0c	a9 05		                lda #5        ; Initialise le paramètre height.
.0b0e	8d ba 19	                sta drawbox_height
.0b11	a9 13		                lda #ccyan+reverse        ; Initialise le paramètre colour.
.0b13	8d bb 19	                sta drawbox_colour
.0b16	68		                pla                 ; Récupère les registres.
.0b17	28		                plp
.0b18	20 9a 19	                jsr db_drawbox      ; Dessine la fenêtre.
.0b1b	20 48 12	                jsr  pushreg
.0b1e	ad 86 02	                lda  bascol
.0b21	48		                pha
.0b22	a9 13		                lda  #ccyan+reverse
.0b24	8d 86 02	                sta  bascol
.0b27	a0 12		                ldy  #17+1
.0b29	a2 11		                ldx  #17
.0b2b	18		                clc
.0b2c	20 f0 ff	                jsr  plot
.0b2f	a2 07		                ldx  #<titre
.0b31	a0 0f		                ldy  #>titre
.0b33	20 e4 10	                jsr  puts
.0b36	68		                pla
.0b37	8d 86 02	                sta  bascol
.0b3a	20 77 12	                jsr  popreg
.0b3d	ee 0d 0f	                inc titre+6
.0b40	08		                php                 ; Sauvegarde les registres.
.0b41	48		                pha
.0b42	a9 13		                lda #19           ; Initialise le paramètre top et la ...
.0b44	8d b7 19	                sta drawbox_top
.0b47	8d bc 19	                sta drawbox_curline ; ... position de la ligne à traiter.
.0b4a	a9 13		                lda #19          ; Initialise le paramètre left.
.0b4c	8d b8 19	                sta drawbox_left
.0b4f	a9 11		                lda #17         ; Initialise le paramètre width.
.0b51	8d b9 19	                sta drawbox_width
.0b54	a9 05		                lda #5        ; Initialise le paramètre height.
.0b56	8d ba 19	                sta drawbox_height
.0b59	a9 05		                lda #cvert        ; Initialise le paramètre colour.
.0b5b	8d bb 19	                sta drawbox_colour
.0b5e	68		                pla                 ; Récupère les registres.
.0b5f	28		                plp
.0b60	20 9a 19	                jsr db_drawbox      ; Dessine la fenêtre.
.0b63	20 48 12	                jsr  pushreg
.0b66	ad 86 02	                lda  bascol
.0b69	48		                pha
.0b6a	a9 05		                lda  #cvert
.0b6c	8d 86 02	                sta  bascol
.0b6f	a0 14		                ldy  #19+1
.0b71	a2 13		                ldx  #19
.0b73	18		                clc
.0b74	20 f0 ff	                jsr  plot
.0b77	a2 07		                ldx  #<titre
.0b79	a0 0f		                ldy  #>titre
.0b7b	20 e4 10	                jsr  puts
.0b7e	68		                pla
.0b7f	8d 86 02	                sta  bascol
.0b82	20 77 12	                jsr  popreg
.0b85	20 eb 16	                jsr showregs
.0b88	68		                pla
.0b89	28		                plp
.0b8a	60		                rts
=$10			reverse = $10
.0b8b			help
=4			left = 4
=4			top = 4
=$1			color = cblanc
=$a			color2 = crose
.0b8b	20 da 11	                jsr pushall
.0b8e	20 c7 10	                jsr cls
.0b91	a9 0d		                lda #$0d
.0b93	20 de 10	                jsr putch
.0b96	20 de 10	                jsr putch
.0b99	20 de 10	                jsr putch
.0b9c	20 de 10	                jsr putch
.0b9f	a9 12		                lda #b_rvs_on
.0ba1	20 de 10	                jsr putch
.0ba4	08		                php                 ; Sauvegarde les registres.
.0ba5	48		                pha
.0ba6	a9 04		                lda #top           ; Initialise le paramètre top et la ...
.0ba8	8d b7 19	                sta drawbox_top
.0bab	8d bc 19	                sta drawbox_curline ; ... position de la ligne à traiter.
.0bae	a9 04		                lda #left          ; Initialise le paramètre left.
.0bb0	8d b8 19	                sta drawbox_left
.0bb3	a9 20		                lda #32         ; Initialise le paramètre width.
.0bb5	8d b9 19	                sta drawbox_width
.0bb8	a9 0a		                lda #10        ; Initialise le paramètre height.
.0bba	8d ba 19	                sta drawbox_height
.0bbd	a9 11		                lda #color+reverse        ; Initialise le paramètre colour.
.0bbf	8d bb 19	                sta drawbox_colour
.0bc2	68		                pla                 ; Récupère les registres.
.0bc3	28		                plp
.0bc4	20 9a 19	                jsr db_drawbox      ; Dessine la fenêtre.
.0bc7	20 48 12	                jsr  pushreg
.0bca	ad 86 02	                lda  bascol
.0bcd	48		                pha
.0bce	a9 11		                lda  #color+reverse
.0bd0	8d 86 02	                sta  bascol
.0bd3	a0 05		                ldy  #left+1
.0bd5	a2 04		                ldx  #top
.0bd7	18		                clc
.0bd8	20 f0 ff	                jsr  plot
.0bdb	a2 ad		                ldx  #<texta
.0bdd	a0 0d		                ldy  #>texta
.0bdf	20 e4 10	                jsr  puts
.0be2	68		                pla
.0be3	8d 86 02	                sta  bascol
.0be6	20 77 12	                jsr  popreg
.0be9	20 48 12	                jsr  pushreg
.0bec	ad 86 02	                lda  bascol
.0bef	48		                pha
.0bf0	a9 01		                lda  #color
.0bf2	8d 86 02	                sta  bascol
.0bf5	a0 05		                ldy  #left+1
.0bf7	a2 06		                ldx  #top+2
.0bf9	18		                clc
.0bfa	20 f0 ff	                jsr  plot
.0bfd	a2 c8		                ldx  #<textb
.0bff	a0 0d		                ldy  #>textb
.0c01	20 e4 10	                jsr  puts
.0c04	68		                pla
.0c05	8d 86 02	                sta  bascol
.0c08	20 77 12	                jsr  popreg
.0c0b	20 48 12	                jsr  pushreg
.0c0e	ad 86 02	                lda  bascol
.0c11	48		                pha
.0c12	a9 01		                lda  #color
.0c14	8d 86 02	                sta  bascol
.0c17	a0 05		                ldy  #left+1
.0c19	a2 07		                ldx  #top+3
.0c1b	18		                clc
.0c1c	20 f0 ff	                jsr  plot
.0c1f	a2 e7		                ldx  #<textc
.0c21	a0 0d		                ldy  #>textc
.0c23	20 e4 10	                jsr  puts
.0c26	68		                pla
.0c27	8d 86 02	                sta  bascol
.0c2a	20 77 12	                jsr  popreg
.0c2d	20 48 12	                jsr  pushreg
.0c30	ad 86 02	                lda  bascol
.0c33	48		                pha
.0c34	a9 01		                lda  #color
.0c36	8d 86 02	                sta  bascol
.0c39	a0 05		                ldy  #left+1
.0c3b	a2 08		                ldx  #top+4
.0c3d	18		                clc
.0c3e	20 f0 ff	                jsr  plot
.0c41	a2 06		                ldx  #<textd
.0c43	a0 0e		                ldy  #>textd
.0c45	20 e4 10	                jsr  puts
.0c48	68		                pla
.0c49	8d 86 02	                sta  bascol
.0c4c	20 77 12	                jsr  popreg
.0c4f	20 48 12	                jsr  pushreg
.0c52	ad 86 02	                lda  bascol
.0c55	48		                pha
.0c56	a9 01		                lda  #color
.0c58	8d 86 02	                sta  bascol
.0c5b	a0 05		                ldy  #left+1
.0c5d	a2 0a		                ldx  #top+6
.0c5f	18		                clc
.0c60	20 f0 ff	                jsr  plot
.0c63	a2 25		                ldx  #<texte
.0c65	a0 0e		                ldy  #>texte
.0c67	20 e4 10	                jsr  puts
.0c6a	68		                pla
.0c6b	8d 86 02	                sta  bascol
.0c6e	20 77 12	                jsr  popreg
.0c71	20 48 12	                jsr  pushreg
.0c74	ad 86 02	                lda  bascol
.0c77	48		                pha
.0c78	a9 01		                lda  #color
.0c7a	8d 86 02	                sta  bascol
.0c7d	a0 05		                ldy  #left+1
.0c7f	a2 0b		                ldx  #top+7
.0c81	18		                clc
.0c82	20 f0 ff	                jsr  plot
.0c85	a2 44		                ldx  #<textf
.0c87	a0 0e		                ldy  #>textf
.0c89	20 e4 10	                jsr  puts
.0c8c	68		                pla
.0c8d	8d 86 02	                sta  bascol
.0c90	20 77 12	                jsr  popreg
.0c93	20 48 12	                jsr  pushreg
.0c96	ad 86 02	                lda  bascol
.0c99	48		                pha
.0c9a	a9 01		                lda  #color
.0c9c	8d 86 02	                sta  bascol
.0c9f	a0 05		                ldy  #left+1
.0ca1	a2 0c		                ldx  #top+8
.0ca3	18		                clc
.0ca4	20 f0 ff	                jsr  plot
.0ca7	a2 63		                ldx  #<textg
.0ca9	a0 0e		                ldy  #>textg
.0cab	20 e4 10	                jsr  puts
.0cae	68		                pla
.0caf	8d 86 02	                sta  bascol
.0cb2	20 77 12	                jsr  popreg
.0cb5	08		                php                 ; Sauvegarde les registres.
.0cb6	48		                pha
.0cb7	a9 0f		                lda #top+11           ; Initialise le paramètre top et la ...
.0cb9	8d b7 19	                sta drawbox_top
.0cbc	8d bc 19	                sta drawbox_curline ; ... position de la ligne à traiter.
.0cbf	a9 04		                lda #left          ; Initialise le paramètre left.
.0cc1	8d b8 19	                sta drawbox_left
.0cc4	a9 20		                lda #32         ; Initialise le paramètre width.
.0cc6	8d b9 19	                sta drawbox_width
.0cc9	a9 06		                lda #6        ; Initialise le paramètre height.
.0ccb	8d ba 19	                sta drawbox_height
.0cce	a9 1a		                lda #color2+reverse        ; Initialise le paramètre colour.
.0cd0	8d bb 19	                sta drawbox_colour
.0cd3	68		                pla                 ; Récupère les registres.
.0cd4	28		                plp
.0cd5	20 9a 19	                jsr db_drawbox      ; Dessine la fenêtre.
.0cd8	20 48 12	                jsr  pushreg
.0cdb	ad 86 02	                lda  bascol
.0cde	48		                pha
.0cdf	a9 1a		                lda  #color2+reverse
.0ce1	8d 86 02	                sta  bascol
.0ce4	a0 05		                ldy  #left+1
.0ce6	a2 0f		                ldx  #top+11
.0ce8	18		                clc
.0ce9	20 f0 ff	                jsr  plot
.0cec	a2 82		                ldx  #<texth
.0cee	a0 0e		                ldy  #>texth
.0cf0	20 e4 10	                jsr  puts
.0cf3	68		                pla
.0cf4	8d 86 02	                sta  bascol
.0cf7	20 77 12	                jsr  popreg
.0cfa	20 48 12	                jsr  pushreg
.0cfd	ad 86 02	                lda  bascol
.0d00	48		                pha
.0d01	a9 0a		                lda  #color2
.0d03	8d 86 02	                sta  bascol
.0d06	a0 05		                ldy  #left+1
.0d08	a2 11		                ldx  #top+13
.0d0a	18		                clc
.0d0b	20 f0 ff	                jsr  plot
.0d0e	a2 91		                ldx  #<texti
.0d10	a0 0e		                ldy  #>texti
.0d12	20 e4 10	                jsr  puts
.0d15	68		                pla
.0d16	8d 86 02	                sta  bascol
.0d19	20 77 12	                jsr  popreg
.0d1c	20 48 12	                jsr  pushreg
.0d1f	ad 86 02	                lda  bascol
.0d22	48		                pha
.0d23	a9 0a		                lda  #color2
.0d25	8d 86 02	                sta  bascol
.0d28	a0 05		                ldy  #left+1
.0d2a	a2 12		                ldx  #top+14
.0d2c	18		                clc
.0d2d	20 f0 ff	                jsr  plot
.0d30	a2 b0		                ldx  #<textj
.0d32	a0 0e		                ldy  #>textj
.0d34	20 e4 10	                jsr  puts
.0d37	68		                pla
.0d38	8d 86 02	                sta  bascol
.0d3b	20 77 12	                jsr  popreg
.0d3e	20 48 12	                jsr  pushreg
.0d41	ad 86 02	                lda  bascol
.0d44	48		                pha
.0d45	a9 0a		                lda  #color2
.0d47	8d 86 02	                sta  bascol
.0d4a	a0 05		                ldy  #left+1
.0d4c	a2 13		                ldx  #top+15
.0d4e	18		                clc
.0d4f	20 f0 ff	                jsr  plot
.0d52	a2 cf		                ldx  #<textk
.0d54	a0 0e		                ldy  #>textk
.0d56	20 e4 10	                jsr  puts
.0d59	68		                pla
.0d5a	8d 86 02	                sta  bascol
.0d5d	20 77 12	                jsr  popreg
.0d60	a9 92		                lda #b_rvs_off
.0d62	20 de 10	                jsr putch
.0d65	20 48 12	                jsr  pushreg
.0d68	ad 86 02	                lda  bascol
.0d6b	48		                pha
.0d6c	a9 01		                lda  #cblanc
.0d6e	8d 86 02	                sta  bascol
.0d71	a0 0f		                ldy  #39-24
.0d73	a2 18		                ldx  #24
.0d75	18		                clc
.0d76	20 f0 ff	                jsr  plot
.0d79	a2 ee		                ldx  #<textl
.0d7b	a0 0e		                ldy  #>textl
.0d7d	20 e4 10	                jsr  puts
.0d80	68		                pla
.0d81	8d 86 02	                sta  bascol
.0d84	20 77 12	                jsr  popreg
.0d87	20 15 12	                jsr popall
.0d8a	60		                rts

;******  Processing file: chaines_fr.asm

=158			headtcol        =   b_jaune
=158			normtcol        =   b_jaune
>0d8b	00		nextline        .byte   0
>0d8c	20 20 20 20	line            .null           "                                "
>0d90	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0da0	20 20 20 20 20 20 20 20 20 20 20 20 00
>0dad	92		texta           .byte           b_rvs_off
>0dae	20 d3 cc 2d	                .text           " SL-BUG 64 Version 4.00 "
>0db2	c2 d5 c7 20 36 34 20 d6 45 52 53 49 4f 4e 20 34
>0dc2	2e 30 30 20
>0dc6	12 00		                .byte           b_rvs_on,0
>0dc8	20 20 20 20	textb           .null           "     Version Commodore 64     "
>0dcc	20 d6 45 52 53 49 4f 4e 20 c3 4f 4d 4d 4f 44 4f
>0ddc	52 45 20 36 34 20 20 20 20 20 00
>0de7	20 20 c9 44	textc           .null           "  Idee Originale sur MC-6809  "
>0deb	45 45 20 cf 52 49 47 49 4e 41 4c 45 20 53 55 52
>0dfb	20 cd c3 2d 36 38 30 39 20 20 00
>0e06	20 20 d0 41	textd           .null           "  Par Serge Leblanc mai 1994  "
>0e0a	52 20 d3 45 52 47 45 20 cc 45 42 4c 41 4e 43 20
>0e1a	4d 41 49 20 31 39 39 34 20 20 00
>0e25	20 d0 4f 52	texte           .null           " Port C64 par Daniel Lafrance "
>0e29	54 20 c3 36 34 20 50 41 52 20 c4 41 4e 49 45 4c
>0e39	20 cc 41 46 52 41 4e 43 45 20 00
>0e44	20 20 20 20	textf           .null           "       (c) Octobre 2025       "
>0e48	20 20 20 28 43 29 20 cf 43 54 4f 42 52 45 20 32
>0e58	30 32 35 20 20 20 20 20 20 20 00
>0e63	20 20 20 d6	textg           .null   format( "   Version: %-17s ",Version)
>0e67	45 52 53 49 4f 4e 3a 20 32 30 32 35 30 39 32 35
>0e77	2d 31 39 30 36 33 39 20 20 20 00
>0e82	92		texth           .byte           b_rvs_off
>0e83	20 d2 c1 c3	                .text           " RACCOURCIS "
>0e87	c3 cf d5 d2 c3 c9 d3 20
>0e8f	12 00		                .byte           b_rvs_on,0
>0e91	20 c5 58 45	texti           .null   format( " Execution.: SYS%5d ($%4X) ",slbug64,slbug64)
>0e95	43 55 54 49 4f 4e 2e 3a 20 d3 d9 d3 20 32 31 39
>0ea5	38 20 28 24 20 38 39 36 29 20 00
>0eb0	20 c1 49 44	textj           .null   format( " Aide......: SYS%5d ($%4X) ",help,help)
>0eb4	45 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 39 35
>0ec4	35 20 28 24 20 c2 38 c2 29 20 00
>0ecf	20 c3 cc d3	textk           .null   format( " CLS.......: SYS%5d ($%4X) ",cls,cls)
>0ed3	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 34 32 39
>0ee3	35 20 28 24 31 30 c3 37 29 20 00
>0eee	d5 4e 45 20	textl           .null           "Une clef pour continuer!"
>0ef2	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0f02	55 45 52 21 00
>0f07	d4 49 54 52	titre           .null   "Titre 0"
>0f0b	45 20 30 00
>0f0f	b0 c0 c0 c0	tline   .byte   176,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,174,0
>0f13	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>0f23	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ae 00
>0f30	ab c0 c0 c0	mline   .byte   171,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,179,0
>0f34	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>0f44	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 b3 00
>0f51	ad c0 c0 c0	bline   .byte   173,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,189,0
>0f55	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>0f65	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 bd 00
>0f72	dd 20 20 20	eline   .byte   221,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,221,0
>0f76	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0f86	20 20 20 20 20 20 20 20 20 20 20 dd 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0f93	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0f97	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black         =   144  ;0,  ctrl-1
=5			b_white         =   5    ;1,  ctrl-2
=28			b_red           =   28   ;2,  ctrl-3
=159			b_cyan          =   159  ;3,  ctrl-4
=156			b_purple        =   156  ;4,  ctrl-5
=30			b_green         =   30   ;5,  ctrl-6
=31			b_blue          =   31   ;6,  ctrl-7
=158			b_yellow        =   158  ;7,  ctrl-8
=129			b_orange        =   129  ;8,  C=-1
=149			b_brown         =   149  ;9,  C=-2
=150			b_ltred         =   150  ;10, C=-3
=155			b_gray3         =   155  ;11, C=-4
=155			b_grey3         =   155  ;11, C=-4
=152			b_gray2         =   152  ;12, C=-5
=152			b_grey2         =   152  ;13, C=-5
=153			b_ltgreen       =   153  ;13, C=-6
=154			b_ltblue        =   154  ;14, C=-7
=151			b_gray1         =   151  ;15, C=-8
=151			b_grey1         =   151  ;15, C=-8
=144			b_noir          =   144  ;0,  ctrl-1
=5			b_blanc         =   5    ;1,  ctrl-2
=28			b_rouge         =   28   ;2,  ctrl-3
=156			b_mauve         =   156  ;4,  ctrl-5
=30			b_vert          =   30   ;5,  ctrl-6
=31			b_bleu          =   31   ;6,  ctrl-7
=158			b_jaune         =   158  ;7,  ctrl-8
=149			b_brun          =   149  ;9,  C=-2
=150			b_rose          =   150  ;10, C=-3
=155			b_gris3         =   155  ;11, C=-4
=152			b_gris2         =   152  ;12, C=-5
=153			b_vert2         =   153  ;13, C=-6
=154			b_blue2         =   154  ;14, C=-7
=151			b_gris1         =   151  ;15, C=-8
=151			b_gris          =   151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.0f9b			screendis
.0f9b	08		               php
.0f9c	48		               pha
.0f9d	ad 11 d0	               lda  $d011
.0fa0	29 ef		               and  #%11101111
.0fa2	8d 11 d0	               sta  $d011
.0fa5	68		               pla
.0fa6	28		               plp
.0fa7	60		               rts
.0fa8			screenena
.0fa8	08		               php
.0fa9	48		               pha
.0faa	ad 11 d0	               lda  $d011
.0fad	09 10		               ora  #%00010000
.0faf	8d 11 d0	               sta  $d011
.0fb2	68		               pla
.0fb3	28		               plp
.0fb4	60		               rts
=8192			bmpram = 8192
.0fb5			victohighres
.0fb5	08		               php
.0fb6	48		               pha
.0fb7	ad 11 d0	               lda  vicmiscfnc
.0fba	09 20		               ora  #%00100000     ; 32
.0fbc	8d 11 d0	               sta  vicmiscfnc
.0fbf	ad 18 d0	               lda  vicmemptr
.0fc2	09 08		               ora  #%00001000     ; $08
.0fc4	8d 18 d0	               sta  vicmemptr
.0fc7	a9 ff		               lda  #$ff           ; 255
.0fc9	85 37		               sta  $0037
.0fcb	a9 1f		               lda  #$1f           ; 31
.0fcd	85 38		               sta  $0038
.0fcf	68		               pla
.0fd0	28		               plp
.0fd1	60		               rts
.0fd2			victonormal
.0fd2	08		               php
.0fd3	48		               pha
.0fd4	ad 11 d0	               lda  vicmiscfnc
.0fd7	29 df		               and  #%11011111     ; 233
.0fd9	8d 11 d0	               sta  vicmiscfnc
.0fdc	ad 18 d0	               lda  vicmemptr
.0fdf	29 f7		               and  #%11110111     ; $08
.0fe1	8d 18 d0	               sta  vicmemptr
.0fe4	a9 00		               lda  #$00
.0fe6	85 37		               sta  $0037
.0fe8	a9 a0		               lda  #$a0
.0fea	85 38		               sta  $0038
.0fec	20 c7 10	               jsr  cls
.0fef	68		               pla
.0ff0	28		               plp
.0ff1	60		               rts
.0ff2			vicbmpclear
.0ff2	20 da 11	               jsr  push
.0ff5	a9 04		               lda  #cmauve
.0ff7	20 20 10	               jsr  setvicbmpbackcol
.0ffa	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.0ffc	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.0ffe	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.1000	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.1002	48		               pha
.1003	a9 ff		               lda  #<$0000+(8191)
.1005	8d fe 13	               sta  loopcount
.1008	a9 1f		               lda  #>$0000+(8191)
.100a	8d ff 13	               sta  loopcount+1
.100d	68		               pla
.100e	a0 00		               ldy  #$00
.1010	a9 0f		next           lda  #$0f
.1012	91 fb		               sta  (zpage1),y
.1014	20 2f 13	               jsr  inczpage1
.1017	20 de 13	               jsr  loop
.101a	d0 f4		               bne  next
.101c	20 15 12	               jsr  pop
.101f	60		               rts
.1020			setvicbmpbackcol
.1020	20 da 11	               jsr  push
.1023	29 0f		               and  #$0f
.1025	8d 53 10	               sta  vicbmpbackcol
.1028	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.102a	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.102c	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.102e	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.1030	48		               pha
.1031	a9 00		               lda  #<$0000+(1024)
.1033	8d fe 13	               sta  loopcount
.1036	a9 04		               lda  #>$0000+(1024)
.1038	8d ff 13	               sta  loopcount+1
.103b	68		               pla
.103c	a0 00		               ldy  #$00
.103e	b1 fb		next           lda  (zpage1),y
.1040	29 f0		               and  #$f0
.1042	0d 53 10	               ora  vicbmpbackcol
.1045	91 fb		               sta  (zpage1),y
.1047	20 2f 13	               jsr  inczpage1
.104a	20 de 13	               jsr  loop
.104d	d0 ef		               bne  next
.104f	20 15 12	               jsr  pop
.1052	60		               rts
>1053	00		vicbmpbackcol  .byte     $00
.1054			setvicbmpforecol
.1054	20 da 11	               jsr  push
.1057	2a		               rol
.1058	2a		               rol
.1059	2a		               rol
.105a	2a		               rol
.105b	29 f0		               and  #$f0
.105d	8d 8b 10	               sta  vicbmpforecol
.1060	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.1062	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.1064	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.1066	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.1068	48		               pha
.1069	a9 00		               lda  #<$0000+(1024)
.106b	8d fe 13	               sta  loopcount
.106e	a9 04		               lda  #>$0000+(1024)
.1070	8d ff 13	               sta  loopcount+1
.1073	68		               pla
.1074	a0 00		               ldy  #$00
.1076	b1 fb		next           lda  (zpage1),y
.1078	29 0f		               and  #$0f
.107a	0d 8b 10	               ora  vicbmpforecol
.107d	91 fb		               sta  (zpage1),y
.107f	20 2f 13	               jsr  inczpage1
.1082	20 de 13	               jsr  loop
.1085	d0 ef		               bne  next
.1087	20 15 12	               jsr  pop
.108a	60		               rts
>108b	00		vicbmpforecol  .byte     $00
.108c			bmphrcalccoords
.108c	20 da 11	               jsr  push
.108f	18		               clc       ; On met Carry à 0
.1090	6a		               ror       ; le bit 0 de a dans carry  ?/2
.1091	8a		               txa       ; x dans a
.1092	4a		               lsr       ; ?/4
.1093	4a		               lsr       ; ?/8 a = (ax)/8
.1094	8d a5 10	               sta  bmphrcol
.1097	98		               tya       ; Y dans a
.1098	4a		               lsr       ; ?/2
.1099	4a		               lsr       ; ?/4
.109a	4a		               lsr       ; ?/8 a=Y/8
.109b	8d a4 10	               sta  bmphrrow
.109e	48		               pha
.109f	98		               tya
.10a0	20 15 12	               jsr  pop
.10a3	60		               rts
.10a4			vicbmpfill
>10a4	00		bmphrrow       .byte     $00
>10a5	00		bmphrcol       .byte     $00
>10a6	00		bmphrmask      .byte     $00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.10a7			scrmaninit
.10a7	20 48 12	               jsr  pushreg        ; Sauvegarde tous les registres
.10aa	20 9b 0f	               jsr  screendis      ; Disable screen
.10ad	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.10af	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.10b2	a9 05		               lda  #vvert         ; vert pour la couleur
.10b4	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.10b7	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.10b9	8d 86 02	               sta  bascol         ; texte.
.10bc	20 c7 10	               jsr  cls            ; Efface l'écran.
.10bf	20 a8 0f	               jsr  screenena      ; enable screen
.10c2	20 77 12	               jsr  popreg         ; Récupère tous les registres.
.10c5	60		               rts
>10c6	8e		characterset   .byte b_uppercase
.10c7			cls
.10c7	08		               php                 ; Sauvegarde les registres
.10c8	48		               pha                 ;   modifiés.
.10c9	a9 93		               lda  #$93           ; Affiche le code basic de
.10cb	20 d2 ff	               jsr  chrout         ;   d'effacement d'écran.
.10ce	68		               pla                 ; Récupère les registres
.10cf	28		               plp                 ;   modifiés.
.10d0	60		               rts
.10d1			putnch
.10d1	20 48 12	               jsr  pushreg        ; Sauvegarde tous les registres.
.10d4	20 d2 ff	again          jsr  chrout         ; On affiche A.
.10d7	ca		               dex                 ; Un de moins à faire.
.10d8	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.10da	20 77 12	out            jsr  popreg         ; Récupère tous les registres.
.10dd	60		               rts
.10de			putch
.10de	08		               php                 ; Sauvegarde le registre de status.
.10df	20 d2 ff	               jsr  chrout         ; Affiche le caractère de Acc.
.10e2	28		               plp                 ; Récupère le registre de status.
.10e3	60		               rts
.10e4			puts
.10e4	20 da 11	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.10e7	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.10e9	84 fc		               sty  zpage1+1       ;   dans ZP1.
.10eb	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.10ed	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.10ef	f0 09		               beq  exit           ; Si $00 on sort.
.10f1	20 d2 ff	               jsr  chrout         ; Affiche le caractères.
.10f4	20 2f 13	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.10f7	4c ed 10	               jmp  next           ; Saute chercher le prochain carac.
.10fa	20 15 12	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.10fd	60		               rts
.10fe			gotoxy
.10fe	08		               php                 ; Sauvegarde le registre de
.10ff	48		               pha                 ;   status et le registre a.
.1100	18		               clc                 ; Carry = 1 pour que kplot
.1101	8a		               txa                 ;   positionne le curseur.
.1102	48		               pha                 ; On inverse X et Y pcq kplot
.1103	98		               tya                 ;
.1104	aa		               tax                 ;   prend X comme la ligne
.1105	68		               pla                 ;
.1106	a8		               tay                 ;   et Y comme la colonne.
.1107	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.110a	68		               pla                 ; Récupère le registre a et
.110b	28		               plp                 ;   le registre de status.
.110c	60		               rts
.110d			cursor
=$0286			bascol    =    $0286               ; debugme
.110d	20 48 12	               jsr  pushreg        ; Sauvegarde tous les registres.
.1110	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.1112	20 f0 ff	               jsr  kplot          ; On récupère la position du
.1115	8c 37 11	               sty  cx             ;   curseur et on la sauvegarde
.1118	8e 38 11	               stx  cy             ;   dans les vars locales.
.111b	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.111e	8d 39 11	               sta  bcol           ; BASIC du texte.
.1121	4c 33 11	               jmp  out            ; c'est fini on sort.
.1124	ae 38 11	restore        ldx  cy             ; Comme C=1, On charge x avec
.1127	ac 37 11	               ldy  cx             ;   la ligne, y ace  la col.
.112a	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.112d	ad 39 11	               lda  bcol           ; On replace la couleur par basic
.1130	8d 86 02	               sta  bascol         ;   sauvegardé.
.1133	20 77 12	out            jsr  popreg         ; Récupère tous les registres.
.1136	60		               rts
>1137	00		cx   .byte     $00
>1138	00		cy   .byte     $00
>1139	00		bcol .byte     $00
.113a			cursave
.113a	08		               php
.113b	38		               sec
.113c	20 0d 11	               jsr  cursor         ; Voir cette fonction plus haut.
.113f	28		               plp
.1140	60		               rts
.1141			curput
.1141	08		               php
.1142	18		               clc
.1143	20 0d 11	               jsr  cursor         ; Voir cette fonction plus haut.
.1146	28		               plp
.1147	60		               rts
.1148			putsxy
.1148	20 da 11	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.114b	86 fb		               stx  zpage1         ; On place la position de la
.114d	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.114f	a0 00		               ldy  #$00           ; On charge l'index à 0.
.1151	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.1153	aa		               tax                 ;   dans X.
.1154	20 2f 13	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1157	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.1159	a8		               tay                 ; dans Y.
.115a	20 fe 10	               jsr  gotoxy         ; on positionne le curseur.
.115d	20 2f 13	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1160	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.1162	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.1164	20 e4 10	               jsr  puts           ;   l'affiche.
.1167	20 15 12	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.116a	60		               rts
>116b	00 00		straddr   .word     $00
>116d	00		px        .byte     $00
>116e	00		py        .byte     $00
>116f	00 00		zp1       .word     $00
.1171			putscxy
.1171	20 da 11	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.1174	86 fb		               stx  zpage1         ; On place la position de la
.1176	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.1178	a0 00		               ldy  #$00           ; On charge l'index à 0.
.117a	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.117d	48		               pha                 ;   actuelle de basic.
.117e	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.1180	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.1183	20 2f 13	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1186	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.1188	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.118a	20 48 11	               jsr  putsxy         ;   l'affiche.
.118d	68		               pla                 ; On replace la couleur basic
.118e	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.1191	20 15 12	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.1194	60		               rts
.1195			putrahex
.1195	20 48 12	               jsr  pushreg        ; Sauvegarde tous les registres.
.1198	20 68 14	               jsr  atohex         ; Conversion de a chaîne hexa.
.119b	a2 05		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.119d	a0 14		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.119f	20 e4 10	               jsr  puts           ; Affiche la chaîne.
.11a2	20 77 12	               jsr  popreg         ; Récupère tous les registres.
.11a5	60		               rts
.11a6			kputrahexxy
.11a6			bputrahexxy
.11a6			putrahexxy
.11a6	08		               php                 ; Sauvegarde le registre de
.11a7	48		               pha                 ;   status et le registre a.
.11a8	20 68 14	               jsr  atohex         ; Convertion de a en hexadécimal.
.11ab	a2 02		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.11ad	a0 14		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.11af	20 48 11	               jsr  putsxy         ; Positionne et affiche la chaîne.
.11b2	68		               pla                 ; Récupère le registre a et
.11b3	28		               plp                 ;   le registre de status.
.11b4	60		               rts
.11b5			putrahexcxy
.11b5	20 48 12	               jsr  pushreg        ; Sauvegarde tous les registres.
.11b8	20 68 14	               jsr  atohex         ; Convertion de a en hexadécimal.
.11bb	a2 02		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.11bd	a0 14		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.11bf	20 48 11	               jsr  putsxy         ; Colore, positionne et affiche la
.11c2	20 77 12	               jsr  popreg         ; Récupère tous les registres.
.11c5	60		               rts
.11c6			setinverse
.11c6	48		               pha
.11c7	a9 12		               lda  #$12
.11c9	20 d2 ff	               jsr  chrout
.11cc	68		               pla
.11cd	60		               rts
.11ce			clrinverse
.11ce	48		               pha
.11cf	a9 92		               lda  #$92
.11d1	20 d2 ff	               jsr  chrout
.11d4	68		               pla
.11d5	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>11d6	00		rp        .byte     0
>11d7	00		ra        .byte     0
>11d8	00 00		pc        .word     0
.11da			pushall
.11da			push
.11da	08		          php            ; stack : flg, pcl, pch
.11db	78		          sei
.11dc	8d d7 11	          sta  ra        ; save a
.11df	68		          pla            ; stack : pcl, pch
.11e0	8d d6 11	          sta  rp        ; save rp
.11e3	68		          pla            ; stack : pch
.11e4	8d d8 11	          sta  pc        ; save pcl
.11e7	68		          pla            ; stack : -
.11e8	8d d9 11	          sta  pc+1      ; save pch
.11eb	a5 fb		          lda  zpage1    ; get zpage1 low byte
.11ed	48		          pha            ; stack : zp1l
.11ee	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.11f0	48		          pha            ; stack : zp1h, zp1l
.11f1	a5 fd		          lda  zpage2    ; get zpage2 low byte
.11f3	48		          pha            ; stack : zp2l, zp1h, zp1l
.11f4	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.11f6	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.11f7	ad d6 11	          lda  rp        ; get rp
.11fa	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.11fb	ad d7 11	          lda  ra        ; get a
.11fe	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.11ff	8a		          txa            ; get x
.1200	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1201	98		          tya            ; get y
.1202	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1203	ad d9 11	          lda  pc+1      ; get pch
.1206	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1207	ad d8 11	          lda  pc        ; get pcl
.120a	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.120b	ad d6 11	          lda  rp        ; get rp
.120e	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.120f	ad d7 11	          lda  ra        ; get a
.1212	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1213	58		          cli
.1214	60		          rts
.1215			pullall
.1215			pull
.1215			popall
.1215			pop
.1215	78		          sei
.1216	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1217	8d d8 11	          sta  pc        ; save pcl
.121a	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.121b	8d d9 11	          sta  pc+1      ; save pch
.121e	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.121f	a8		          tay            ; set y
.1220	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1221	aa		          tax            ; set x
.1222	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1223	8d d7 11	          sta  ra        ; save a
.1226	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1227	8d d6 11	          sta  rp        ; save rp
.122a	68		          pla            ; stack : zp2l, zp1h, zp1l
.122b	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.122d	68		          pla            ; stack : zp1h, zp1l
.122e	85 fd		          sta  zpage2    ; get zpage2 High byte
.1230	68		          pla            ; stack : zp1l
.1231	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1233	68		          pla            ; stack :
.1234	85 fb		          sta  zpage1    ; get zpage1 High byte
.1236	ad d9 11	          lda  pc+1      ; get pch
.1239	48		          pha            ; stack : pch
.123a	ad d8 11	          lda  pc
.123d	48		          pha            ; stack : pcl, pch
.123e	ad d6 11	          lda  rp        ; get rp
.1241	48		          pha            ; stack : rp, pcl, pch
.1242	ad d7 11	          lda  ra        ; set ra
.1245	58		          cli
.1246	28		          plp            ; stack : pcl, pch
.1247	60		          rts
.1248			pushreg
.1248	08		          php            ; stack : flg, pcl, pch
.1249	78		          sei
.124a	8d d7 11	          sta  ra        ; save a
.124d	68		          pla            ; stack : pcl, pch
.124e	8d d6 11	          sta  rp        ; save rp
.1251	68		          pla            ; stack : pch
.1252	8d d8 11	          sta  pc        ; save pcl
.1255	68		          pla            ; stack : -
.1256	8d d9 11	          sta  pc+1      ; save pch
.1259	ad d6 11	          lda  rp        ; get rp
.125c	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.125d	ad d7 11	          lda  ra        ; get a
.1260	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1261	8a		          txa            ; get x
.1262	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1263	98		          tya            ; get y
.1264	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1265	ad d9 11	          lda  pc+1      ; get pch
.1268	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1269	ad d8 11	          lda  pc        ; get pcl
.126c	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.126d	ad d6 11	          lda  rp        ; get rp
.1270	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1271	ad d7 11	          lda  ra        ; get a
.1274	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1275	58		          cli
.1276	60		          rts
.1277			pullreg
.1277			popreg
.1277	78		          sei
.1278	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1279	8d d8 11	          sta  pc        ; save pcl
.127c	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.127d	8d d9 11	          sta  pc+1      ; save pch
.1280	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1281	a8		          tay            ; set y
.1282	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1283	aa		          tax            ; set x
.1284	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1285	8d d7 11	          sta  ra        ; save a
.1288	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1289	8d d6 11	          sta  rp        ; save rp
.128c	ad d9 11	          lda  pc+1      ; get pch
.128f	48		          pha            ; stack : pch
.1290	ad d8 11	          lda  pc
.1293	48		          pha            ; stack : pcl, pch
.1294	ad d6 11	          lda  rp        ; get rp
.1297	48		          pha            ; stack : rp, pcl, pch
.1298	ad d7 11	          lda  ra        ; set ra
.129b	58		          cli
.129c	28		          plp            ; stack : pcl, pch
.129d	60		          rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.129e			blkfill
.129e	20 da 11	bf0            jsr  push
.12a1	20 69 13	               jsr  savezp1
.12a4	84 fc		               sty  zpage1+1
.12a6	a0 00		               ldy  #$00
.12a8	84 fb		               sty  zpage1
.12aa	91 fb		bf1            sta  (zpage1),y
.12ac	c8		               iny
.12ad	d0 fb		               bne  bf1
.12af	20 78 13	               jsr  restzp1
.12b2	20 15 12	               jsr  pop
.12b5	60		               rts
.12b6			memfill
.12b6	20 da 11	               jsr  push
.12b9	20 9e 12	mf1            jsr  blkfill
.12bc	c8		               iny
.12bd	ca		               dex
.12be	d0 f9		               bne  mf1
.12c0	20 15 12	               jsr  pop
.12c3	60		               rts
.12c4			memmove
.12c4	20 da 11	               jsr  push
.12c7	ba		               tsx            ; On se crée un pointeur ...
.12c8	8a		               txa
.12c9	18		               clc
.12ca	69 0b		               adc  #11
.12cc	a8		               tay
.12cd	a2 06		               ldx  #$06
.12cf	b9 00 01	nextbyte       lda  $0100,y
.12d2	99 1e 13	               sta  words,y
.12d5	c8		               iny
.12d6	ca		               dex
.12d7	d0 f6		               bne  nextbyte
.12d9	ad 1e 13	               lda  s
.12dc	8d f5 12	               sta  source+1
.12df	ad 1f 13	               lda  s+1
.12e2	8d f6 12	               sta  source+2
.12e5	ad 20 13	               lda  d
.12e8	8d f2 12	               sta  destin+1
.12eb	ad 21 13	               lda  d+1
.12ee	8d f3 12	               sta  destin+2
.12f1	ad ff ff	destin         lda  $ffff
.12f4	8d ff ff	source         sta  $ffff
.12f7	ee f2 12	               inc  destin+1
.12fa	d0 03		               bne  src
.12fc	ee f3 12	               inc  destin+2
.12ff	ee f5 12	src            inc  source+1
.1302	d0 03		               bne  cnt
.1304	ee f6 12	               inc  source+2
.1307	ad 22 13	cnt            lda  compte
.130a	d0 08		               bne  decit
.130c	ad 23 13	               lda  compte+1
.130f	f0 09		               beq  fini
.1311	ce 23 13	               dec  compte+1
.1314	ce 22 13	decit          dec  compte
.1317	4c f1 12	               jmp  destin
.131a	20 15 12	fini           jsr  pop
.131d	60		               rts
.131e			words
>131e	00 00		s         .word     $0000
>1320	00 00		d         .word     $0000
>1322	00 00		compte    .word     $0000
.1324			decword
.1324	20 da 11	               jsr  push
.1327	86 fd		               stx  zpage2
.1329	84 fe		               sty  zpage2+1
.132b	20 15 12	               jsr  pop
.132e	60		               rts
.132f			inczpage1
.132f			inczp1
.132f	08		               php
.1330	48		               pha
.1331	e6 fb		               inc  zpage1
.1333	a5 fb		               lda  zpage1
.1335	d0 02		               bne  nopage
.1337	e6 fc		               inc  zpage1+1
.1339	68		nopage         pla
.133a	28		               plp
.133b	60		               rts
.133c			deczpage1
.133c			deczp1
.133c	08		               php
.133d	48		               pha
.133e	c6 fb		               dec  zpage1
.1340	a5 fb		               lda  zpage1
.1342	c9 ff		               cmp  #$ff
.1344	f0 02		               beq  report
.1346	d0 02		               bne  nopage
.1348	c6 fc		report         dec  zpage1+1
.134a	68		nopage         pla
.134b	28		               plp
.134c	60		               rts
.134d			inczpage2
.134d			inczp2
.134d	08		               php
.134e	48		               pha
.134f	e6 fd		               inc  zpage2
.1351	a5 fd		               lda  zpage2
.1353	d0 02		               bne  nopage
.1355	e6 fe		               inc  zpage2+1
.1357	68		nopage         pla
.1358	28		               plp
.1359	60		               rts
.135a			deczpage2
.135a			deczp2
.135a	08		               php
.135b	c6 fd		               dec  zpage2
.135d	a5 fd		               lda  zpage2
.135f	c9 ff		               cmp  #$ff
.1361	f0 02		               beq  report
.1363	d0 02		               bne  nopage
.1365	c6 fe		report         dec  zpage2+1
.1367	28		nopage         plp
.1368	60		               rts
.1369			savezp1
.1369	08		               php
.136a	48		               pha
.136b	a5 fb		               lda  zpage1
.136d	8d fa 13	               sta  zp1
.1370	a5 fc		               lda  zpage1+1
.1372	8d fb 13	               sta  zp1+1
.1375	68		               pla
.1376	28		               plp
.1377	60		               rts
.1378			restzp1
.1378	08		               php
.1379	48		               pha
.137a	ad fa 13	               lda  zp1
.137d	85 fb		               sta  zpage1
.137f	ad fb 13	               lda  zp1+1
.1382	85 fc		               sta  zpage1+1
.1384	68		               pla
.1385	28		               plp
.1386	60		               rts
.1387			savezp2
.1387	08		               php
.1388	48		               pha
.1389	a5 fd		               lda  zpage2
.138b	8d fc 13	               sta  zp2
.138e	a5 fe		               lda  zpage2+1
.1390	8d fd 13	               sta  zp2+1
.1393	68		               pla
.1394	28		               plp
.1395	60		               rts
.1396			restzp2
.1396	08		               php
.1397	48		               pha
.1398	ad fc 13	               lda  zp2
.139b	85 fd		               sta  zpage2
.139d	ad fd 13	               lda  zp2+1
.13a0	85 fe		               sta  zpage2+1
.13a2	68		               pla
.13a3	28		               plp
.13a4	60		               rts
.13a5			xy2addr
.13a5	08		               php
.13a6	48		               pha
.13a7	8a		               txa
.13a8	48		               pha
.13a9	98		               tya
.13aa	48		               pha
.13ab	ad f5 13	               lda  addr1+1
.13ae	8d f7 13	               sta  addr2+1
.13b1	ad f4 13	               lda  addr1
.13b4	8d f6 13	               sta  addr2
.13b7	c0 00		               cpy  #$00
.13b9	f0 0f		               beq  addx
.13bb	18		moreline       clc
.13bc	6d f3 13	               adc  ymult
.13bf	90 03		               bcc  norepy
.13c1	ee f7 13	               inc  addr2+1
.13c4	8d f6 13	norepy         sta  addr2
.13c7	88		               dey
.13c8	d0 f1		               bne  moreline
.13ca	8a		addx           txa
.13cb	18		               clc
.13cc	6d f6 13	               adc  addr2
.13cf	90 03		               bcc  thatsit
.13d1	ee f7 13	               inc  addr2+1
.13d4	8d f6 13	thatsit        sta  addr2
.13d7	68		               pla
.13d8	a8		               tay
.13d9	68		               pla
.13da	aa		               tax
.13db	68		               pla
.13dc	28		               plp
.13dd	60		               rts
.13de			loop
.13de	ce fe 13	               dec  loopcount
.13e1	d0 03		               bne  norep
.13e3	ce ff 13	               dec  loopcount+1
.13e6	ad fe 13	norep          lda  loopcount
.13e9	c9 00		               cmp  #$00
.13eb	d0 05		               bne  out
.13ed	4d ff 13	               eor  loopcount+1
.13f0	c9 ff		               cmp  #$ff
.13f2	60		out            rts
>13f3	28		ymult          .byte     40
>13f4	00 00		addr1          .word     $0000
>13f6	00 00		addr2          .word     $0000
>13f8	00 00		bytecnt        .word     $0000
>13fa	00 00		zp1            .word     $0000
>13fc	00 00		zp2            .word     $0000
>13fe	00 00		loopcount      .word     $0000

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1400	01		a2hexcol       .byte     1              ; pour aputscxy
>1401	00		a2hexbkcol     .byte     %00000000
.1402			a2hexpos
>1402	00		a2hexpx        .byte     0              ; pour aputsxy
>1403	00		a2hexpy        .byte     0
>1404	24		a2hexprefix    .byte     "$"            ; pour aputs
>1405	00 00		a2hexstr       .word     $00
>1407	00 00		               .word     $00
>1409	00		               .byte     0              ; 0 end string
>140a	01		abincol        .byte     1
>140b	00		abinbkcol      .byte     %00000000
>140c	30 30 30 30	abin           .null     "00000000"
>1410	30 30 30 30 00
>1415	20 20 20 00	adec           .null     "   "
.1419			putahexfmtxy
.1419	20 da 11	               jsr  push
.141c	20 68 14	               jsr  atohex
.141f	ae 02 14	               ldx  a2hexpx
.1422	ac 03 14	               ldy  a2hexpy
.1425	20 fe 10	               jsr  gotoxy
.1428	a2 04		               ldx  #<a2hexprefix
.142a	a0 14		               ldy  #>a2hexprefix
.142c	20 e4 10	               jsr  puts
.142f	20 15 12	               jsr  pop
.1432	60		               rts
.1433			putahexfmt
.1433	20 da 11	               jsr  push
.1436	20 68 14	               jsr  atohex
.1439	a2 04		               ldx  #<a2hexprefix
.143b	a0 14		               ldy  #>a2hexprefix
.143d	20 e4 10	               jsr  puts
.1440	20 15 12	               jsr  pop
.1443	60		               rts
.1444			putahex
.1444	20 da 11	               jsr  push
.1447	20 68 14	               jsr  atohex
.144a	a2 05		               ldx  #<a2hexstr
.144c	a0 14		               ldy  #>a2hexstr
.144e	20 e4 10	               jsr  puts
.1451	20 15 12	               jsr  pop
.1454	60		               rts
.1455			nibtohex
.1455	08		               php
.1456	29 0f		               and  #$0f
.1458	f8		               sed
.1459	18		               clc
.145a	69 90		               adc  #$90
.145c	69 40		               adc  #$40
.145e	d8		               cld
.145f	28		               plp
.1460	60		               rts
.1461			lsra4bits
.1461	08		               php
.1462	4a		               lsr
.1463	4a		               lsr
.1464	4a		               lsr
.1465	4a		               lsr
.1466	28		               plp
.1467	60		               rts
.1468			atohex
.1468	08		               php
.1469	48		               pha
.146a	48		               pha
.146b	20 61 14	               jsr  lsra4bits
.146e	20 55 14	               jsr  nibtohex
.1471	8d 05 14	               sta  a2hexstr
.1474	68		               pla
.1475	20 55 14	               jsr  nibtohex
.1478	8d 06 14	               sta  a2hexstr+1
.147b	a9 00		               lda  #$00                ; set end of string
.147d	8d 07 14	               sta  a2hexstr+2
.1480	68		               pla
.1481	28		               plp
.1482	60		               rts
.1483			xy2hex
.1483	20 da 11	               jsr  push
.1486	20 68 14	               jsr  atohex
.1489	8a		               txa
.148a	48		               pha
.148b	20 61 14	               jsr  lsra4bits
.148e	20 55 14	               jsr  nibtohex
.1491	8d 05 14	               sta  a2hexstr
.1494	68		               pla
.1495	20 55 14	               jsr  nibtohex
.1498	8d 06 14	               sta  a2hexstr+1
.149b	98		               tya
.149c	48		               pha
.149d	20 61 14	               jsr  lsra4bits
.14a0	20 55 14	               jsr  nibtohex
.14a3	8d 07 14	               sta  a2hexstr+2
.14a6	68		               pla
.14a7	20 55 14	               jsr  nibtohex
.14aa	8d 08 14	               sta  a2hexstr+3
.14ad	a9 00		               lda  #$00                ; 0 ended string
.14af	8d 09 14	               sta  a2hexstr+4
.14b2	20 15 12	               jsr  pop
.14b5			atobin
.14b5	20 da 11	               jsr  push
.14b8	a2 08		               ldx  #8
.14ba	a0 00		               ldy  #0
.14bc	18		               clc
.14bd	2a		nextbit        rol
.14be	48		               pha
.14bf	69 00		               adc  #$00
.14c1	29 01		               and  #$01
.14c3	20 55 14	               jsr  nibtohex
.14c6	99 0c 14	               sta  abin,y
.14c9	68		               pla
.14ca	c8		               iny
.14cb	ca		               dex
.14cc	d0 ef		               bne  nextbit
.14ce	a9 00		               lda  #0
.14d0	99 0c 14	               sta  abin,y
.14d3	20 15 12	               jsr  pull
.14d6	60		               rts
.14d7			abinsetmccol
.14d7	20 48 12	               jsr  pushreg
.14da	20 77 12	               jsr  popreg
.14dd	60		               rts
.14de			putabin
.14de	20 b5 14	               jsr     atobin
.14e1	20 da 11	               jsr     push
.14e4	a2 0c		               ldx     #<abin
.14e6	a0 14		               ldy     #>abin
.14e8	20 e4 10	               jsr     puts
.14eb	20 15 12	               jsr     pop
.14ee	60		               rts
.14ef			printabin
.14ef	20 da 11	               jsr     push
.14f2	a2 0c		               ldx     #<abin
.14f4	a0 14		               ldy     #>abin
.14f6	20 e4 10	               jsr     puts
.14f9	20 15 12	               jsr     pop
.14fc	60		               rts
.14fd			putabinfmt
.14fd	08		               php
.14fe	48		               pha
.14ff	a9 25		               lda     #"%"
.1501	20 de 10	               jsr     putch
.1504	68		               pla
.1505	20 de 14	               jsr     putabin
.1508	28		               plp
.1509	60		               rts
.150a			putabinxy
.150a	20 fe 10	               jsr     gotoxy
.150d	20 de 14	               jsr     putabin
.1510	60		               rts
.1511			putabinfmtxy
.1511	20 fe 10	               jsr     gotoxy
.1514	20 fd 14	               jsr     putabinfmt
.1517	60		               rts
.1518			atodec
.1518	20 da 11	               jsr  push
.151b	f8		               sed            ; On se place en mode décimal.
.151c	aa		               tax            ; On déplace a dans x.
.151d	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.151f	a9 00		               lda  #$00      ; 0 dans A.
.1521	18		nextbit        clc            ; Bit carry a 0.
.1522	69 01		               adc  #$01      ; Ajoute 1 a A.
.1524	90 01		               bcc  decx      ; Pas de carry, pas de report.
.1526	c8		               iny            ; On incrémente Y
.1527	ca		decx           dex            ; X=X-1
.1528	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.152a	48		               pha            ; A sur le stack.
.152b	98		               tya            ; Y dans A (MSB)
.152c	20 55 14	               jsr  nibtohex  ; a hex petsci ...
.152f	8d 15 14	               sta  adec      ; ... dans tampon.
.1532	68		               pla            ; Récupere A
.1533	48		               pha            ;
.1534	20 55 14	               jsr  nibtohex
.1537	8d 17 14	               sta  adec+2
.153a	68		               pla
.153b	6a		               ror
.153c	6a		               ror
.153d	6a		               ror
.153e	6a		               ror
.153f	20 55 14	               jsr  nibtohex
.1542	8d 16 14	               sta  adec+1
.1545	d8		               cld            ; On revient en mode binaire.
.1546	20 15 12	               jsr  pull
.1549	60		               rts
.154a			putadec
.154a	20 da 11	               jsr  push
.154d	20 18 15	               jsr  atodec
.1550	a2 15		               ldx  #<adec
.1552	a0 14		               ldy  #>adec+1
.1554	20 e4 10	               jsr  puts
.1557	20 15 12	               jsr  pop
.155a	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.155b			waitstop
.155b	20 da 11	               jsr  push
.155e	20 ed f6	wait           jsr  k_stop
.1561	d0 fb		               bne  wait
.1563	20 15 12	               jsr  pop
.1566	60		               rts
.1567			anykey
.1567	08		               php
.1568	48		               pha
.1569	a5 cb		nokey          lda 203
.156b	c9 40		               cmp #64
.156d	f0 fa		               beq nokey
.156f	20 79 15	               jsr releasekey
.1572	a9 00		               lda #0
.1574	85 c6		               sta 198
.1576	68		               pla
.1577	28		               plp
.1578	60		               rts
.1579			releasekey
.1579	08		               php
.157a	48		               pha
.157b	a5 cb		keypressed     lda 203
.157d	c9 40		               cmp #64
.157f	d0 fa		               bne keypressed
.1581	68		               pla
.1582	28		               plp
.1583	60		               rts
.1584			getkey
.1584	20 e4 ff	gkagain        jsr  getin
.1587	c9 00		               cmp  #0
.1589	f0 f9		               beq  gkagain
.158b	60		               rts
.158c			kbflushbuff
.158c	08		               php
.158d	48		               pha
.158e	20 e4 ff	again          jsr  getin
.1591	c9 00		               cmp  #0
.1593	d0 f9		               bne  again
.1595	68		               pla
.1596	28		               plp
.1597	60		               rts
.1598			waitkey
.1598	20 da 11	               jsr  push
.159b	8d e9 15	               sta  thekey
.159e	20 e4 ff	nope           jsr  getin
.15a1	20 d2 ff	               jsr  chrout
.15a4	cd e9 15	               cmp  thekey
.15a7	d0 f5		               bne  nope
.15a9	20 d2 ff	               jsr  chrout
.15ac	20 15 12	               jsr  pop
.15af	60		               rts
.15b0			waitspace
.15b0	20 da 11	               jsr  push
.15b3	a9 7f		wait           lda  #$7f  ;%01111111
.15b5	8d 00 dc	               sta  $dc00
.15b8	ad 01 dc	               lda  $dc01
.15bb	29 10		               and  #$10  ;mask %00010000
.15bd	d0 f4		               bne  wait
.15bf	20 15 12	               jsr  pop
.15c2			waitsstop
.15c2	20 da 11	               jsr  push
.15c5	20 ed f6	wait           jsr  k_stop  ;%01111111
.15c8	d0 fb		               bne  wait
.15ca	20 15 12	               jsr  pop
.15cd			waitreturn
.15cd	20 da 11	               jsr  push
.15d0	ad ea 15	               lda  thecount
.15d3	8d 00 04	               sta  scrnram
.15d6	a9 02		               lda  #$02
.15d8	8d 00 d8	               sta  colorram
.15db	20 e4 ff	nope           jsr  getin
.15de	c9 0d		nohex          cmp  #$0d
.15e0	d0 f9		               bne  nope
.15e2	ee ea 15	               inc  thecount
.15e5	20 15 12	               jsr  pop
.15e8	60		               rts
>15e9	00		thekey         .byte   0
>15ea	01		thecount       .byte   $01
>15eb	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>15ef	00 00 00 00 00 00 00 00 00 0d 00 00
>15fb	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>15ff	00 00 00 00 00 00 00 00 00 00 00 00
>160b	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>160f	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>161b	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>161f	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>162b	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>162f	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>163b	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>163f	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>164b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>164f	00 00 00 00 00 00 00 00 00 00 00 00
>165b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>165f	00 00 00 00 00 00 00 00 00 00 00 00
>166b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>166f	00 00 00 00 00 00 00 00 00 00 00 00
>167b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>167f	00 00 00 00 00 00 00 00 00 00 00 00
>168b	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>168f	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>169b	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>169f	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>16ab	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>16af	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>16bb	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>16bf	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>16cb	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>16cf	00 00 00 00 00 00 00 00 00 00 00 00
>16db	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>16df	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-showregs.asm

.16eb			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.16eb	08		               php                 ; Sauvegarde le registre de status sur stack.
.16ec	8d e6 18	               sta  rega           ; Sauvegarde Acc en mémoire.
.16ef	68		               pla                 ; Récupère le registre de status du stack.
.16f0	8d e9 18	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.16f3	8e e7 18	               stx  regx           ; Sauvegarde le registre X en mémoire.
.16f6	8c e8 18	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.16f9	ba		               tsx                 ; Copie le registre S dans X.
.16fa	8e ea 18	               stx  regs           ; Sauvegarde le registre S en mémoire.
.16fd	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.16fe	8d ec 18	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.1701	8d ee 18	               sta  regpcl2        ; ... une seconde fois.
.1704	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.1705	8d eb 18	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.1708	8d ed 18	               sta  regpch2        ; ... une seconde fois.
.170b	ad e6 18	               lda  rega           ; On commence par le registre Acc.
.170e	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.170f	20 55 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1712	8d 83 18	               sta  vala+1         ; ... et le place dans la chaine.
.1715	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1716	20 61 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1719	20 55 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.171c	8d 82 18	               sta  vala           ; ... et le place dans la chaine.
.171f	ad e8 18	               lda  regy           ; Ensuite, le registre Y.
.1722	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1723	20 55 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1726	8d 9a 18	               sta  valy+1         ; ... et le place dans la chaine.
.1729	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.172a	20 61 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.172d	20 55 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1730	8d 99 18	               sta  valy           ; ... et le place dans la chaine.
.1733	ad e7 18	               lda  regx           ; Ensuite, le registre X.
.1736	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1737	20 55 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.173a	8d 8e 18	               sta  valx+1         ; ... et le place dans la chaine.
.173d	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.173e	20 61 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1741	20 55 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1744	8d 8d 18	               sta  valx           ; ... et le place dans la chaine.
.1747	ad e9 18	               lda  regp           ; Ensuite, le registre de status.
.174a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.174b	20 55 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.174e	8d a5 18	               sta  valp+1         ; ... et le place dans la chaine.
.1751	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1752	20 61 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1755	20 55 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1758	8d a4 18	               sta  valp           ; ... et le place dans la chaine.
.175b	ad ea 18	               lda  regs           ; Ensuite, le pointeur de stack.
.175e	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.175f	20 55 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1762	8d b0 18	               sta  vals+1         ; ... et le place dans la chaine.
.1765	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1766	20 61 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1769	20 55 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.176c	8d af 18	               sta  vals           ; ... et le place dans la chaine.
.176f	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.1770	ad ee 18	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.1773	69 00		               adc  #$00           ; On y ajoute 1.
.1775	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.1777	ee ed 18	               inc  regpch2        ; ... en incrémentant le MSB.
.177a	8d ee 18	noreport       sta  regpcl2        ; On le sauvegarde.
.177d	ad ee 18	               lda  regpcl2        ; On récupère la partie basse du compteur.
.1780	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1781	20 55 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1784	8d c0 18	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.1787	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1788	20 61 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.178b	20 55 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.178e	8d bf 18	               sta  valpcl         ; ... et lace le code à la position "--X-".
.1791	ad ed 18	               lda regpch2         ; On récupère la partie haute du compteur.
.1794	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1795	20 55 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1798	8d be 18	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.179b	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.179c	20 61 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.179f	20 55 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.17a2	8d bd 18	               sta  valpch         ; ... et lace le code à la position "X---".
.17a5	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.17a7	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.17a8	20 55 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.17ab	8d d1 18	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.17ae	68		               pla
.17af	20 61 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.17b2	20 55 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.17b5	8d d0 18	               sta  valz1l         ; ... et lace le code à la position "--X-".
.17b8	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.17ba	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.17bb	20 55 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.17be	8d cf 18	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.17c1	68		               pla
.17c2	20 61 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.17c5	20 55 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.17c8	8d ce 18	               sta  valz1h         ; ... et lace le code à la position "X---".
.17cb	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.17cd	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.17ce	20 55 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.17d1	8d e2 18	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.17d4	68		               pla
.17d5	20 61 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.17d8	20 55 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.17db	8d e1 18	               sta  valz2l         ; ... et lace le code à la position "--X-".
.17de	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.17e0	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.17e1	20 55 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.17e4	8d e0 18	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.17e7	68		               pla
.17e8	20 61 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.17eb	20 55 14	               jsr  nibtohex
.17ee	8d df 18	               sta  valz2h         ; ... et lace le code à la position "X---".
.17f1	20 c6 11	               jsr  setinverse     ; On se place en mode inverse vidéo.
.17f4	20 48 12	               jsr  pushreg
.17f7	a2 7a		               ldx  #<srega
.17f9	a0 18		               ldy  #>srega
.17fb	20 71 11	               jsr  putscxy
.17fe	20 77 12	               jsr  popreg
.1801	20 48 12	               jsr  pushreg
.1804	a2 86		               ldx  #<sregx
.1806	a0 18		               ldy  #>sregx
.1808	20 71 11	               jsr  putscxy
.180b	20 77 12	               jsr  popreg
.180e	20 48 12	               jsr  pushreg
.1811	a2 91		               ldx  #<sregy
.1813	a0 18		               ldy  #>sregy
.1815	20 71 11	               jsr  putscxy
.1818	20 77 12	               jsr  popreg
.181b	20 48 12	               jsr  pushreg
.181e	a2 9d		               ldx  #<sregp
.1820	a0 18		               ldy  #>sregp
.1822	20 71 11	               jsr  putscxy
.1825	20 77 12	               jsr  popreg
.1828	20 48 12	               jsr  pushreg
.182b	a2 a8		               ldx  #<sregs
.182d	a0 18		               ldy  #>sregs
.182f	20 71 11	               jsr  putscxy
.1832	20 77 12	               jsr  popreg
.1835	20 48 12	               jsr  pushreg
.1838	a2 b4		               ldx  #<sregpc
.183a	a0 18		               ldy  #>sregpc
.183c	20 71 11	               jsr  putscxy
.183f	20 77 12	               jsr  popreg
.1842	20 48 12	               jsr  pushreg
.1845	a2 c4		               ldx  #<sregz1
.1847	a0 18		               ldy  #>sregz1
.1849	20 71 11	               jsr  putscxy
.184c	20 77 12	               jsr  popreg
.184f	20 48 12	               jsr  pushreg
.1852	a2 d5		               ldx  #<sregz2
.1854	a0 18		               ldy  #>sregz2
.1856	20 71 11	               jsr  putscxy
.1859	20 77 12	               jsr  popreg
.185c	20 ce 11	               jsr  clrinverse     ; On quitte le mode inverse vidéo.
.185f	ad eb 18	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.1862	48		               pha                 ; ... à la bonne position sur la pile.
.1863	ad ec 18	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.1866	48		               pha                 ; ... à la bonne position sur la pile.
.1867	ae ea 18	               ldx  regs           ; On replace tous les registre à leurs ...
.186a	9a		               txs                 ; ...
.186b	ac e8 18	               ldy  regy           ; ...
.186e	ae e7 18	               ldx  regx           ; ...
.1871	ad e9 18	               lda  regp           ; ...
.1874	48		               pha                 ; ...
.1875	ad e6 18	               lda  rega           ; ...
.1878	28		               plp                 ; ... valeurs initiales
.1879	60		               rts
>187a	07 01 17	srega   .byte   cyellow,coln+1,line
>187d	20 20 41 3a	        .text   '  a:$' ;4,24
>1881	24
>1882	00 00 20 00	vala    .byte   0,0,32,0
>1886	03 09 17	sregx   .byte   ccyan,coln+9,line
>1889	20 58 3a 24	        .text   ' x:$' ;4,24
>188d	00 00 20 00	valx    .byte   0,0,32,0
>1891	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>1894	20 59 3a 20	        .text   ' y: $' ;4,24
>1898	24
>1899	00 00 20 00	valy    .byte   0,0,32,0
>189d	08 18 17	sregp   .byte   corange,coln+24,line
>18a0	20 50 3a 24	        .text   ' p:$' ;4,24
>18a4	00 00 20 00	valp    .byte   0,0,32,0
>18a8	0a 1f 17	sregs   .byte   clightred,coln+31,line
>18ab	20 53 3a 24	        .text   ' s:$' ;4,24
>18af	00 00 20 20	vals    .byte   0,0,32,32,0
>18b3	00
>18b4	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>18b8	20 50 43 3a	        .text   ' pc:$' ;4,24
>18bc	24
>18bd	00 00		valpch  .byte   0,0
>18bf	00 00 20 20	valpcl  .byte   0,0,32,32,0
>18c3	00
>18c4	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>18c8	20 5a 50 31	        .text   ' zp1:$' ;4,24
>18cc	3a 24
>18ce	00 00		valz1h  .byte   0,0
>18d0	00 00 20 20	valz1l  .byte   0,0,32,32,0
>18d4	00
>18d5	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>18d9	20 5a 50 32	        .text   ' zp2:$' ;4,24
>18dd	3a 24
>18df	00 00		valz2h  .byte   0,0
>18e1	00 00 20 20	valz2l  .byte   0,0,32,32,0
>18e5	00
>18e6	00		rega    .byte   0
>18e7	00		regx    .byte   0
>18e8	00		regy    .byte   0
>18e9	00		regp    .byte   0
>18ea	00		regs    .byte   0
>18eb	00		regpch  .byte   0
>18ec	00		regpcl  .byte   0
>18ed	00		regpch2 .byte   0
>18ee	00		regpcl2 .byte   0
>18ef	00		vzp1h   .byte   0
>18f0	00		vzp1l   .byte   0
>18f1	00		vzp2h   .byte   0
>18f2	00		vzp2l   .byte   0

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-drawbox.asm

.18f3			db_tline
.18f3	08		                php                 ; Sauvegarde les registres.
.18f4	48		                pha
.18f5	a9 b0		                lda #tleft          ; Coin suppérieur gauche.
.18f7	8d b4 19	                sta db_left
.18fa	a9 c0		                lda #hline          ; Ligne horizontale.
.18fc	8d b6 19	                sta db_mid
.18ff	a9 ae		                lda #tright         ; Coin suppérieur droit.
.1901	8d b5 19	                sta db_right
.1904	28		                plp                 ; Récupère les registres.
.1905	68		                pla
.1906	20 4f 19	                jsr db_drawline
.1909	60		                rts
.190a			db_bline
.190a	08		                php                 ; Sauvegarde les registres.
.190b	48		                pha
.190c	a9 ad		                lda #bleft          ; Coin inférieur gauche.
.190e	8d b4 19	                sta db_left
.1911	a9 c0		                lda #hline          ; Ligne horizontale.
.1913	8d b6 19	                sta db_mid
.1916	a9 bd		                lda #bright         ; Coin inférieur droit.
.1918	8d b5 19	                sta db_right
.191b	28		                plp                 ; Récupère les registres.
.191c	68		                pla
.191d	20 4f 19	                jsr db_drawline
.1920	60		                rts
.1921			db_eline
.1921	08		                php                 ; Sauvegarde les registres.
.1922	48		                pha
.1923	a9 dd		                lda #vline          ; Ligne verticale.
.1925	8d b4 19	                sta db_left
.1928	a9 20		                lda #space          ; Caractère espace.
.192a	8d b6 19	                sta db_mid
.192d	a9 dd		                lda #vline          ; Ligne verticale.
.192f	8d b5 19	                sta db_right
.1932	28		                plp                 ; Récupère les registres.
.1933	68		                pla
.1934	20 4f 19	                jsr db_drawline
.1937	60		                rts
.1938			db_hline
.1938	08		                php                 ; Sauvegarde les registres.
.1939	48		                pha
.193a	a9 ab		                lda #hleft          ; Extrémité gauche d'une ligne médianne.
.193c	8d b4 19	                sta db_left
.193f	a9 c0		                lda #hline          ; Ligne horizontale.
.1941	8d b6 19	                sta db_mid
.1944	a9 b3		                lda #hright         ; Extrémité droite d'une ligne médianne.
.1946	8d b5 19	                sta db_right
.1949	28		                plp                 ; Récupère les registres.
.194a	68		                pla
.194b	20 4f 19	                jsr db_drawline
.194e	60		                rts
.194f			db_drawline
.194f	20 48 12	                jsr pushreg         ; Sauvegarde les registres.
.1952	ad 86 02	                lda bascol          ; Sauvegarde de la ...
.1955	8d bd 19	                sta drawbox_bascol  ; ... couleur basic.
.1958	ad bb 19	                lda drawbox_colour  ; Sélectionne la couleur...
.195b	8d 86 02	                sta bascol          ; ... de la fenêtre.
.195e	c9 10		                cmp #$10            ; Couleur inverse vidéo?
.1960	30 05		                bmi noreverse       ; Non ...
.1962	a9 12		                lda #18             ; Oui on place basic en inverse ...
.1964	20 d2 ff	                jsr chrout          ; Vidéo.
.1967	ae bc 19	noreverse       ldx drawbox_curline ; On positionne le curseur au ...
.196a	ac b8 19	                ldy drawbox_left    ; ... coin suppérieur gauche ...
.196d	18		                clc                 ; ... de la fenêtre.
.196e	20 f0 ff	                jsr plot
.1971	ad b4 19	                lda db_left         ; On dessine le premier caractère.
.1974	20 d2 ff	                jsr chrout
.1977	ad b6 19	                lda db_mid          ; On dessine la ligne horizontale ...
.197a	ae b9 19	                ldx drawbox_width   ; ... selon la largeur voulue ...
.197d	ca		                dex                 ; ... de la fenêtre moins les ...
.197e	ca		                dex                 ; ... deux caractères d'extrémité.
.197f	20 d1 10	                jsr putnch
.1982	ad b5 19	                lda db_right        ; On dessine le dernier caractère.
.1985	20 d2 ff	                jsr chrout
.1988	a9 92		                lda #146            ; On met fin à l'inverse vidéo.
.198a	20 d2 ff	                jsr chrout
.198d	ad bd 19	                lda drawbox_bascol  ; On récupère et replace la ...
.1990	8d 86 02	                sta bascol          ; ... couleur de basic.
.1993	ee bc 19	                inc drawbox_curline ; Passe à la ligne suivante.
.1996	20 77 12	                jsr popreg          ; Récupère les registres.
.1999	60		                rts
.199a			db_drawbox
.199a	20 48 12	                jsr pushreg         ; Sauvegarde les registres.
.199d	ae ba 19	                ldx drawbox_height  ; Récupère la hauteur de la fenètre.
.19a0	20 f3 18	                jsr db_tline        ; Dessine la ligne suppérieure.
.19a3	ca		                dex                 ; Soustrait 2 pour tenir compte des ...
.19a4	ca		                dex                 ; lignes suppérieures et inférieures.
.19a5	f0 06		                beq lastline        ; Si 0 pas de ligne vide dans la fenètre.
.19a7	20 21 19	moreline        jsr db_eline        ; Dessine une ligne vide de la boîte.
.19aa	ca		                dex                 ; Une ligne de moins à faire.
.19ab	d0 fa		                bne moreline        ; On passe à la prochaine s'il en reste.
.19ad	20 0a 19	lastline        jsr db_bline        ; Dessine la ligne inférieure.
.19b0	20 77 12	                jsr popreg          ; Récupère les registres.
.19b3	60		                rts
=176			tleft           =       176         ; Coin suppérieur gauche.
=174			tright          =       174         ; Coin suppérieur droit.
=173			bleft           =       173         ; Coin inférieur gauche.
=189			bright          =       189         ; Coin inférieur droit.
=171			hleft           =       171         ; Extrémité gauche d'une ligne médianne.
=179			hright          =       179         ; Extrémité droite d'une ligne médianne.
=221			vline           =       221         ; Ligne verticale.
=192			hline           =       192         ; Ligne horizontale.
=32			space           =       32          ; Caractère espace.
>19b4	00		db_left         .byte   0           ; Caractère Gauche de la ligne courante.
>19b5	00		db_right        .byte   0           ; Caractère droit de la ligne courante.
>19b6	00		db_mid          .byte   0           ; Caractère central de la ligne courante.
>19b7	00		drawbox_top     .byte   0           ; Coordonné du haut de la boite.
>19b8	00		drawbox_left    .byte   0           ; Coordonné de la gauche de la boîte.
>19b9	00		drawbox_width   .byte   0           ; Largeur de la boîte.
>19ba	00		drawbox_height  .byte   0           ; Hauteur de la boîte.
>19bb	00		drawbox_colour  .byte   0           ; Couleur de la boîte.
>19bc	00		drawbox_curline .byte   0           ; No de la ligne courante à dessiner.
>19bd	00		drawbox_bascol  .byte   0           ; Case de mémorisation de la couleur Basic.

;******  Return to file: slbug64.asm


;******  End of listing

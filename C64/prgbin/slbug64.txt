
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L slbug64.txt -o slbug64.prg slbug64.asm
; Fri Oct 17 17:46:44 2025

;Offset	;Hex		;Source

;******  Processing input file: slbug64.asm

="20251017-125301"	            Version = "20251017-125301"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	20 50 52 4f	               .text " programmation assembleur sur c64."
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2e
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	20 50 41 52	               .text " par daniel lafrance."
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2e
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 55 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"
.0854	60		              rts                  ; ... doit se rerminer par un RTS.

;******  Return to file: slbug64.asm

.0855			main
.0855	20 d3 11	            jsr scrmaninit  ; Met en place la gestion d'écran.
.0858	a9 41		            lda #"a"
.085a	20 c1 16	            jsr waitkey
.085d	20 ff 17	            jsr showregs
.0860	20 d8 16	            jsr waitspace
.0863	60		            rts
.0864			main2
.0864	20 d3 11	            jsr scrmaninit  ; Met en place la gestion d'écran.
.0867	08		               php
.0868	48		               pha
.0869	a9 0e		               lda  #14
.086b	20 d2 ff	               jsr  $ffd2
.086e	68		               pla
.086f	28		               plp
.0870	08		               php
.0871	48		               pha
.0872	a9 08		               lda  #$08
.0874	20 d2 ff	               jsr  $ffd2
.0877	68		               pla
.0878	28		               plp
.0879	20 74 13	               jsr  pushreg
.087c	48		               pha
.087d	a9 05		               lda  #cvert
.087f	8d 20 d0	               sta  $d020
.0882	68		               pla
.0883	48		               pha
.0884	a9 06		               lda  #cbleu
.0886	8d 21 d0	               sta  $d021
.0889	68		               pla
.088a	48		               pha
.088b	a9 01		               lda  #cblanc
.088d	8d 86 02	               sta  bascol
.0890	68		               pla
.0891	20 a3 13	               jsr  popreg
.0894	20 f3 11	            jsr cls         ; Efface l'écran.
.0897	20 a3 0c	            jsr help        ; Affiche le menu d'aide.
.089a	20 95 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.089d	20 e7 08	            jsr slbug64     ; Lance la fonction principale.
.08a0	20 74 13	               jsr  pushreg
.08a3	a2 00		               ldx  #0
.08a5	a0 00		               ldy  #0
.08a7	20 2a 12	               jsr  gotoxy
.08aa	20 a3 13	               jsr  popreg
.08ad	20 95 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.08b0	20 a3 0c	            jsr help        ; Affiche l'écran d'aide.
.08b3	20 95 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.08b6	20 f3 11	            jsr cls         ; Efface l'écran.
.08b9	20 74 13	               jsr  pushreg
.08bc	48		               pha
.08bd	a9 0e		               lda  #cbleupale
.08bf	8d 20 d0	               sta  $d020
.08c2	68		               pla
.08c3	48		               pha
.08c4	a9 06		               lda  #cbleu
.08c6	8d 21 d0	               sta  $d021
.08c9	68		               pla
.08ca	48		               pha
.08cb	a9 01		               lda  #cblanc
.08cd	8d 86 02	               sta  bascol
.08d0	68		               pla
.08d1	20 a3 13	               jsr  popreg
.08d4	08		               php
.08d5	48		               pha
.08d6	a9 09		               lda  #$09
.08d8	20 d2 ff	               jsr  $ffd2
.08db	68		               pla
.08dc	28		               plp
.08dd	08		               php
.08de	48		               pha
.08df	a9 8e		               lda  #b_uppercase
.08e1	20 d2 ff	               jsr  $ffd2
.08e4	68		               pla
.08e5	28		               plp
.08e6	60		            rts
.08e7			slbug64
.08e7	20 eb 08	            jsr boxdrawtest
.08ea	60		            rts
.08eb			boxdrawtest
.08eb	08		            php
.08ec	48		            pha
.08ed	ad 21 d0	            lda vicbackcol
.08f0	48		            pha
.08f1	a9 00		            lda #cnoir      ; \
.08f3	8d 21 d0	            sta vicbackcol  ;  > Bordure et fond en noir.
.08f6	8d 20 d0	            sta vicbordcol  ; /
.08f9	20 95 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.08fc	68		            pla
.08fd	20 74 13	               jsr  pushreg
.0900	a2 00		               ldx  #0
.0902	a0 00		               ldy  #0
.0904	20 2a 12	               jsr  gotoxy
.0907	20 a3 13	               jsr  popreg
.090a	20 f3 11	            jsr cls
.090d	08		               php
.090e	48		               pha
.090f	a9 0e		               lda  #14
.0911	20 d2 ff	               jsr  $ffd2
.0914	68		               pla
.0915	28		               plp
.0916	08		               php
.0917	48		               pha
.0918	a9 08		               lda  #$08
.091a	20 d2 ff	               jsr  $ffd2
.091d	68		               pla
.091e	28		               plp
.091f	08		                php                 ; Sauvegarde les registres.
.0920	48		                pha
.0921	a9 00		                lda #0           ; Initialise le paramètre top et la ...
.0923	8d ce 1a	                sta drawbox_top
.0926	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0929	a9 00		                lda #0          ; Initialise le paramètre left.
.092b	8d cf 1a	                sta drawbox_left
.092e	a9 28		                lda #40         ; Initialise le paramètre width.
.0930	8d d0 1a	                sta drawbox_width
.0933	a9 18		                lda #24        ; Initialise le paramètre height.
.0935	8d d1 1a	                sta drawbox_height
.0938	a9 0c		                lda #cgris1        ; Initialise le paramètre colour.
.093a	8d d2 1a	                sta drawbox_colour
.093d	68		                pla                 ; Récupère les registres.
.093e	28		                plp
.093f	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0942	a9 12		                    lda #18         ; le titre zzzzzz
.0944	20 d2 ff	                    jsr chrout
.0947	20 74 13	                jsr pushreg
.094a	ad 86 02	                lda bascol
.094d	48		                pha
.094e	a9 0c		                lda #cgris1
.0950	8d 86 02	                sta bascol
.0953	a0 01		                ldy #0+1
.0955	a2 00		                ldx  #0
.0957	18		                clc
.0958	20 f0 ff	                jsr  plot
.095b	a2 31		                ldx  #<titre
.095d	a0 10		                ldy  #>titre
.095f	20 10 12	                jsr  puts
.0962	68		                pla
.0963	8d 86 02	                sta  bascol
.0966	20 a3 13	                jsr  popreg
.0969	a9 92		                    lda #146
.096b	20 d2 ff	                    jsr chrout
.096e	08		                php                 ; Sauvegarde les registres.
.096f	48		                pha
.0970	a9 01		                lda #1           ; Initialise le paramètre top et la ...
.0972	8d ce 1a	                sta drawbox_top
.0975	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0978	a9 01		                lda #1          ; Initialise le paramètre left.
.097a	8d cf 1a	                sta drawbox_left
.097d	a9 26		                lda #38         ; Initialise le paramètre width.
.097f	8d d0 1a	                sta drawbox_width
.0982	a9 05		                lda #5        ; Initialise le paramètre height.
.0984	8d d1 1a	                sta drawbox_height
.0987	a9 17		                lda #cjaune+reverse        ; Initialise le paramètre colour.
.0989	8d d2 1a	                sta drawbox_colour
.098c	68		                pla                 ; Récupère les registres.
.098d	28		                plp
.098e	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0991	20 74 13	                jsr pushreg
.0994	ad 86 02	                lda bascol
.0997	48		                pha
.0998	a9 17		                lda #cjaune+reverse
.099a	8d 86 02	                sta bascol
.099d	a0 02		                ldy #1+1
.099f	a2 01		                ldx  #1
.09a1	18		                clc
.09a2	20 f0 ff	                jsr  plot
.09a5	a2 31		                ldx  #<titre
.09a7	a0 10		                ldy  #>titre
.09a9	20 10 12	                jsr  puts
.09ac	68		                pla
.09ad	8d 86 02	                sta  bascol
.09b0	20 a3 13	                jsr  popreg
.09b3	08		                php                 ; Sauvegarde les registres.
.09b4	48		                pha
.09b5	a9 06		                lda #6           ; Initialise le paramètre top et la ...
.09b7	8d ce 1a	                sta drawbox_top
.09ba	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.09bd	a9 01		                lda #1          ; Initialise le paramètre left.
.09bf	8d cf 1a	                sta drawbox_left
.09c2	a9 13		                lda #19         ; Initialise le paramètre width.
.09c4	8d d0 1a	                sta drawbox_width
.09c7	a9 11		                lda #17        ; Initialise le paramètre height.
.09c9	8d d1 1a	                sta drawbox_height
.09cc	a9 13		                lda #ccyan+reverse        ; Initialise le paramètre colour.
.09ce	8d d2 1a	                sta drawbox_colour
.09d1	68		                pla                 ; Récupère les registres.
.09d2	28		                plp
.09d3	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.09d6	20 74 13	                jsr pushreg
.09d9	ad 86 02	                lda bascol
.09dc	48		                pha
.09dd	a9 13		                lda #ccyan+reverse
.09df	8d 86 02	                sta bascol
.09e2	a0 02		                ldy #1+1
.09e4	a2 06		                ldx  #6
.09e6	18		                clc
.09e7	20 f0 ff	                jsr  plot
.09ea	a2 31		                ldx  #<titre
.09ec	a0 10		                ldy  #>titre
.09ee	20 10 12	                jsr  puts
.09f1	68		                pla
.09f2	8d 86 02	                sta  bascol
.09f5	20 a3 13	                jsr  popreg
.09f8	08		                php                 ; Sauvegarde les registres.
.09f9	48		                pha
.09fa	a9 06		                lda #6           ; Initialise le paramètre top et la ...
.09fc	8d ce 1a	                sta drawbox_top
.09ff	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0a02	a9 14		                lda #20          ; Initialise le paramètre left.
.0a04	8d cf 1a	                sta drawbox_left
.0a07	a9 13		                lda #19         ; Initialise le paramètre width.
.0a09	8d d0 1a	                sta drawbox_width
.0a0c	a9 11		                lda #17        ; Initialise le paramètre height.
.0a0e	8d d1 1a	                sta drawbox_height
.0a11	a9 05		                lda #cvert        ; Initialise le paramètre colour.
.0a13	8d d2 1a	                sta drawbox_colour
.0a16	68		                pla                 ; Récupère les registres.
.0a17	28		                plp
.0a18	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0a1b	a9 12		                    lda #18         ; le titre zzzzzz
.0a1d	20 d2 ff	                    jsr chrout
.0a20	20 74 13	                jsr pushreg
.0a23	ad 86 02	                lda bascol
.0a26	48		                pha
.0a27	a9 05		                lda #cvert
.0a29	8d 86 02	                sta bascol
.0a2c	a0 15		                ldy #20+1
.0a2e	a2 06		                ldx  #6
.0a30	18		                clc
.0a31	20 f0 ff	                jsr  plot
.0a34	a2 31		                ldx  #<titre
.0a36	a0 10		                ldy  #>titre
.0a38	20 10 12	                jsr  puts
.0a3b	68		                pla
.0a3c	8d 86 02	                sta  bascol
.0a3f	20 a3 13	                jsr  popreg
.0a42	a9 92		                    lda #146
.0a44	20 d2 ff	                    jsr chrout
.0a47	20 95 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.0a4a	08		                php                 ; Sauvegarde les registres.
.0a4b	48		                pha
.0a4c	a9 05		                lda #5           ; Initialise le paramètre top et la ...
.0a4e	8d ce 1a	                sta drawbox_top
.0a51	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0a54	a9 05		                lda #5          ; Initialise le paramètre left.
.0a56	8d cf 1a	                sta drawbox_left
.0a59	a9 14		                lda #20         ; Initialise le paramètre width.
.0a5b	8d d0 1a	                sta drawbox_width
.0a5e	a9 05		                lda #5        ; Initialise le paramètre height.
.0a60	8d d1 1a	                sta drawbox_height
.0a63	a9 1c		                lda #cgris1+reverse        ; Initialise le paramètre colour.
.0a65	8d d2 1a	                sta drawbox_colour
.0a68	68		                pla                 ; Récupère les registres.
.0a69	28		                plp
.0a6a	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0a6d	20 74 13	                jsr pushreg
.0a70	ad 86 02	                lda bascol
.0a73	48		                pha
.0a74	a9 1c		                lda #cgris1+reverse
.0a76	8d 86 02	                sta bascol
.0a79	a0 06		                ldy #5+1
.0a7b	a2 05		                ldx  #5
.0a7d	18		                clc
.0a7e	20 f0 ff	                jsr  plot
.0a81	a2 31		                ldx  #<titre
.0a83	a0 10		                ldy  #>titre
.0a85	20 10 12	                jsr  puts
.0a88	68		                pla
.0a89	8d 86 02	                sta  bascol
.0a8c	20 a3 13	                jsr  popreg
.0a8f	08		                php                 ; Sauvegarde les registres.
.0a90	48		                pha
.0a91	a9 07		                lda #7           ; Initialise le paramètre top et la ...
.0a93	8d ce 1a	                sta drawbox_top
.0a96	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0a99	a9 07		                lda #7          ; Initialise le paramètre left.
.0a9b	8d cf 1a	                sta drawbox_left
.0a9e	a9 14		                lda #20         ; Initialise le paramètre width.
.0aa0	8d d0 1a	                sta drawbox_width
.0aa3	a9 05		                lda #5        ; Initialise le paramètre height.
.0aa5	8d d1 1a	                sta drawbox_height
.0aa8	a9 0b		                lda #cgris0        ; Initialise le paramètre colour.
.0aaa	8d d2 1a	                sta drawbox_colour
.0aad	68		                pla                 ; Récupère les registres.
.0aae	28		                plp
.0aaf	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0ab2	a9 12		                    lda #18         ; le titre zzzzzz
.0ab4	20 d2 ff	                    jsr chrout
.0ab7	20 74 13	                jsr pushreg
.0aba	ad 86 02	                lda bascol
.0abd	48		                pha
.0abe	a9 0b		                lda #cgris0
.0ac0	8d 86 02	                sta bascol
.0ac3	a0 08		                ldy #7+1
.0ac5	a2 07		                ldx  #7
.0ac7	18		                clc
.0ac8	20 f0 ff	                jsr  plot
.0acb	a2 31		                ldx  #<titre
.0acd	a0 10		                ldy  #>titre
.0acf	20 10 12	                jsr  puts
.0ad2	68		                pla
.0ad3	8d 86 02	                sta  bascol
.0ad6	20 a3 13	                jsr  popreg
.0ad9	a9 92		                    lda #146
.0adb	20 d2 ff	                    jsr chrout
.0ade	08		                php                 ; Sauvegarde les registres.
.0adf	48		                pha
.0ae0	a9 09		                lda #9           ; Initialise le paramètre top et la ...
.0ae2	8d ce 1a	                sta drawbox_top
.0ae5	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0ae8	a9 09		                lda #9          ; Initialise le paramètre left.
.0aea	8d cf 1a	                sta drawbox_left
.0aed	a9 14		                lda #20         ; Initialise le paramètre width.
.0aef	8d d0 1a	                sta drawbox_width
.0af2	a9 05		                lda #5        ; Initialise le paramètre height.
.0af4	8d d1 1a	                sta drawbox_height
.0af7	a9 1a		                lda #crose+reverse        ; Initialise le paramètre colour.
.0af9	8d d2 1a	                sta drawbox_colour
.0afc	68		                pla                 ; Récupère les registres.
.0afd	28		                plp
.0afe	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0b01	20 74 13	                jsr pushreg
.0b04	ad 86 02	                lda bascol
.0b07	48		                pha
.0b08	a9 1a		                lda #crose+reverse
.0b0a	8d 86 02	                sta bascol
.0b0d	a0 0a		                ldy #9+1
.0b0f	a2 09		                ldx  #9
.0b11	18		                clc
.0b12	20 f0 ff	                jsr  plot
.0b15	a2 31		                ldx  #<titre
.0b17	a0 10		                ldy  #>titre
.0b19	20 10 12	                jsr  puts
.0b1c	68		                pla
.0b1d	8d 86 02	                sta  bascol
.0b20	20 a3 13	                jsr  popreg
.0b23	08		                php                 ; Sauvegarde les registres.
.0b24	48		                pha
.0b25	a9 0b		                lda #11           ; Initialise le paramètre top et la ...
.0b27	8d ce 1a	                sta drawbox_top
.0b2a	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0b2d	a9 0b		                lda #11          ; Initialise le paramètre left.
.0b2f	8d cf 1a	                sta drawbox_left
.0b32	a9 14		                lda #20         ; Initialise le paramètre width.
.0b34	8d d0 1a	                sta drawbox_width
.0b37	a9 05		                lda #5        ; Initialise le paramètre height.
.0b39	8d d1 1a	                sta drawbox_height
.0b3c	a9 02		                lda #crouge        ; Initialise le paramètre colour.
.0b3e	8d d2 1a	                sta drawbox_colour
.0b41	68		                pla                 ; Récupère les registres.
.0b42	28		                plp
.0b43	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0b46	a9 12		                    lda #18         ; le titre zzzzzz
.0b48	20 d2 ff	                    jsr chrout
.0b4b	20 74 13	                jsr pushreg
.0b4e	ad 86 02	                lda bascol
.0b51	48		                pha
.0b52	a9 02		                lda #crouge
.0b54	8d 86 02	                sta bascol
.0b57	a0 0c		                ldy #11+1
.0b59	a2 0b		                ldx  #11
.0b5b	18		                clc
.0b5c	20 f0 ff	                jsr  plot
.0b5f	a2 31		                ldx  #<titre
.0b61	a0 10		                ldy  #>titre
.0b63	20 10 12	                jsr  puts
.0b66	68		                pla
.0b67	8d 86 02	                sta  bascol
.0b6a	20 a3 13	                jsr  popreg
.0b6d	a9 92		                    lda #146
.0b6f	20 d2 ff	                    jsr chrout
.0b72	08		                php                 ; Sauvegarde les registres.
.0b73	48		                pha
.0b74	a9 0d		                lda #13           ; Initialise le paramètre top et la ...
.0b76	8d ce 1a	                sta drawbox_top
.0b79	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0b7c	a9 0d		                lda #13          ; Initialise le paramètre left.
.0b7e	8d cf 1a	                sta drawbox_left
.0b81	a9 14		                lda #20         ; Initialise le paramètre width.
.0b83	8d d0 1a	                sta drawbox_width
.0b86	a9 05		                lda #5        ; Initialise le paramètre height.
.0b88	8d d1 1a	                sta drawbox_height
.0b8b	a9 14		                lda #cmauve+reverse        ; Initialise le paramètre colour.
.0b8d	8d d2 1a	                sta drawbox_colour
.0b90	68		                pla                 ; Récupère les registres.
.0b91	28		                plp
.0b92	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0b95	20 74 13	                jsr pushreg
.0b98	ad 86 02	                lda bascol
.0b9b	48		                pha
.0b9c	a9 14		                lda #cmauve+reverse
.0b9e	8d 86 02	                sta bascol
.0ba1	a0 0e		                ldy #13+1
.0ba3	a2 0d		                ldx  #13
.0ba5	18		                clc
.0ba6	20 f0 ff	                jsr  plot
.0ba9	a2 31		                ldx  #<titre
.0bab	a0 10		                ldy  #>titre
.0bad	20 10 12	                jsr  puts
.0bb0	68		                pla
.0bb1	8d 86 02	                sta  bascol
.0bb4	20 a3 13	                jsr  popreg
.0bb7	08		                php                 ; Sauvegarde les registres.
.0bb8	48		                pha
.0bb9	a9 0f		                lda #15           ; Initialise le paramètre top et la ...
.0bbb	8d ce 1a	                sta drawbox_top
.0bbe	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0bc1	a9 0f		                lda #15          ; Initialise le paramètre left.
.0bc3	8d cf 1a	                sta drawbox_left
.0bc6	a9 14		                lda #20         ; Initialise le paramètre width.
.0bc8	8d d0 1a	                sta drawbox_width
.0bcb	a9 05		                lda #5        ; Initialise le paramètre height.
.0bcd	8d d1 1a	                sta drawbox_height
.0bd0	a9 06		                lda #cbleu        ; Initialise le paramètre colour.
.0bd2	8d d2 1a	                sta drawbox_colour
.0bd5	68		                pla                 ; Récupère les registres.
.0bd6	28		                plp
.0bd7	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0bda	a9 12		                    lda #18         ; le titre zzzzzz
.0bdc	20 d2 ff	                    jsr chrout
.0bdf	20 74 13	                jsr pushreg
.0be2	ad 86 02	                lda bascol
.0be5	48		                pha
.0be6	a9 06		                lda #cbleu
.0be8	8d 86 02	                sta bascol
.0beb	a0 10		                ldy #15+1
.0bed	a2 0f		                ldx  #15
.0bef	18		                clc
.0bf0	20 f0 ff	                jsr  plot
.0bf3	a2 31		                ldx  #<titre
.0bf5	a0 10		                ldy  #>titre
.0bf7	20 10 12	                jsr  puts
.0bfa	68		                pla
.0bfb	8d 86 02	                sta  bascol
.0bfe	20 a3 13	                jsr  popreg
.0c01	a9 92		                    lda #146
.0c03	20 d2 ff	                    jsr chrout
.0c06	08		                php                 ; Sauvegarde les registres.
.0c07	48		                pha
.0c08	a9 11		                lda #17           ; Initialise le paramètre top et la ...
.0c0a	8d ce 1a	                sta drawbox_top
.0c0d	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0c10	a9 11		                lda #17          ; Initialise le paramètre left.
.0c12	8d cf 1a	                sta drawbox_left
.0c15	a9 14		                lda #20         ; Initialise le paramètre width.
.0c17	8d d0 1a	                sta drawbox_width
.0c1a	a9 05		                lda #5        ; Initialise le paramètre height.
.0c1c	8d d1 1a	                sta drawbox_height
.0c1f	a9 13		                lda #ccyan+reverse        ; Initialise le paramètre colour.
.0c21	8d d2 1a	                sta drawbox_colour
.0c24	68		                pla                 ; Récupère les registres.
.0c25	28		                plp
.0c26	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0c29	20 74 13	                jsr pushreg
.0c2c	ad 86 02	                lda bascol
.0c2f	48		                pha
.0c30	a9 13		                lda #ccyan+reverse
.0c32	8d 86 02	                sta bascol
.0c35	a0 12		                ldy #17+1
.0c37	a2 11		                ldx  #17
.0c39	18		                clc
.0c3a	20 f0 ff	                jsr  plot
.0c3d	a2 31		                ldx  #<titre
.0c3f	a0 10		                ldy  #>titre
.0c41	20 10 12	                jsr  puts
.0c44	68		                pla
.0c45	8d 86 02	                sta  bascol
.0c48	20 a3 13	                jsr  popreg
.0c4b	08		                php                 ; Sauvegarde les registres.
.0c4c	48		                pha
.0c4d	a9 13		                lda #19           ; Initialise le paramètre top et la ...
.0c4f	8d ce 1a	                sta drawbox_top
.0c52	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0c55	a9 13		                lda #19          ; Initialise le paramètre left.
.0c57	8d cf 1a	                sta drawbox_left
.0c5a	a9 14		                lda #20         ; Initialise le paramètre width.
.0c5c	8d d0 1a	                sta drawbox_width
.0c5f	a9 05		                lda #5        ; Initialise le paramètre height.
.0c61	8d d1 1a	                sta drawbox_height
.0c64	a9 05		                lda #cvert        ; Initialise le paramètre colour.
.0c66	8d d2 1a	                sta drawbox_colour
.0c69	68		                pla                 ; Récupère les registres.
.0c6a	28		                plp
.0c6b	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0c6e	a9 12		                    lda #18         ; le titre zzzzzz
.0c70	20 d2 ff	                    jsr chrout
.0c73	20 74 13	                jsr pushreg
.0c76	ad 86 02	                lda bascol
.0c79	48		                pha
.0c7a	a9 05		                lda #cvert
.0c7c	8d 86 02	                sta bascol
.0c7f	a0 14		                ldy #19+1
.0c81	a2 13		                ldx  #19
.0c83	18		                clc
.0c84	20 f0 ff	                jsr  plot
.0c87	a2 31		                ldx  #<titre
.0c89	a0 10		                ldy  #>titre
.0c8b	20 10 12	                jsr  puts
.0c8e	68		                pla
.0c8f	8d 86 02	                sta  bascol
.0c92	20 a3 13	                jsr  popreg
.0c95	a9 92		                    lda #146
.0c97	20 d2 ff	                    jsr chrout
.0c9a	20 95 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.0c9d	20 ff 17	            jsr showregs
.0ca0	68		            pla
.0ca1	28		            plp
.0ca2	60		            rts
=16			reverse = 16
.0ca3			help
.0ca3	20 06 13	            jsr pushall
.0ca6	20 f3 11	            jsr cls
.0ca9	08		               php
.0caa	48		               pha
.0cab	a9 0e		               lda  #14
.0cad	20 d2 ff	               jsr  $ffd2
.0cb0	68		               pla
.0cb1	28		               plp
.0cb2	08		               php
.0cb3	48		               pha
.0cb4	a9 08		               lda  #$08
.0cb6	20 d2 ff	               jsr  $ffd2
.0cb9	68		               pla
.0cba	28		               plp
.0cbb	a9 0d		            lda #$0d
.0cbd	20 0a 12	            jsr putch
.0cc0	20 0a 12	            jsr putch
.0cc3	20 0a 12	            jsr putch
.0cc6	20 0a 12	            jsr putch
.0cc9	a9 12		            lda #b_rvs_on
.0ccb	20 0a 12	            jsr putch
.0cce	08		                php                 ; Sauvegarde les registres.
.0ccf	48		                pha
.0cd0	a9 04		                lda #top           ; Initialise le paramètre top et la ...
.0cd2	8d ce 1a	                sta drawbox_top
.0cd5	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0cd8	a9 04		                lda #left          ; Initialise le paramètre left.
.0cda	8d cf 1a	                sta drawbox_left
.0cdd	a9 20		                lda #32         ; Initialise le paramètre width.
.0cdf	8d d0 1a	                sta drawbox_width
.0ce2	a9 0a		                lda #10        ; Initialise le paramètre height.
.0ce4	8d d1 1a	                sta drawbox_height
.0ce7	a9 11		                lda #color+reverse        ; Initialise le paramètre colour.
.0ce9	8d d2 1a	                sta drawbox_colour
.0cec	68		                pla                 ; Récupère les registres.
.0ced	28		                plp
.0cee	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0cf1	20 74 13	                jsr pushreg
.0cf4	ad 86 02	                lda bascol
.0cf7	48		                pha
.0cf8	a9 11		                lda #color+reverse
.0cfa	8d 86 02	                sta bascol
.0cfd	a0 05		                ldy #left+1
.0cff	a2 04		                ldx  #top
.0d01	18		                clc
.0d02	20 f0 ff	                jsr  plot
.0d05	a2 d7		                ldx  #<texta
.0d07	a0 0e		                ldy  #>texta
.0d09	20 10 12	                jsr  puts
.0d0c	68		                pla
.0d0d	8d 86 02	                sta  bascol
.0d10	20 a3 13	                jsr  popreg
.0d13	20 74 13	                jsr pushreg
.0d16	ad 86 02	                lda bascol
.0d19	48		                pha
.0d1a	a9 01		                lda #color
.0d1c	8d 86 02	                sta bascol
.0d1f	a0 05		                ldy #left+1
.0d21	a2 06		                ldx  #top+2
.0d23	18		                clc
.0d24	20 f0 ff	                jsr  plot
.0d27	a2 f2		                ldx  #<textb
.0d29	a0 0e		                ldy  #>textb
.0d2b	20 10 12	                jsr  puts
.0d2e	68		                pla
.0d2f	8d 86 02	                sta  bascol
.0d32	20 a3 13	                jsr  popreg
.0d35	20 74 13	                jsr pushreg
.0d38	ad 86 02	                lda bascol
.0d3b	48		                pha
.0d3c	a9 01		                lda #color
.0d3e	8d 86 02	                sta bascol
.0d41	a0 05		                ldy #left+1
.0d43	a2 07		                ldx  #top+3
.0d45	18		                clc
.0d46	20 f0 ff	                jsr  plot
.0d49	a2 11		                ldx  #<textc
.0d4b	a0 0f		                ldy  #>textc
.0d4d	20 10 12	                jsr  puts
.0d50	68		                pla
.0d51	8d 86 02	                sta  bascol
.0d54	20 a3 13	                jsr  popreg
.0d57	20 74 13	                jsr pushreg
.0d5a	ad 86 02	                lda bascol
.0d5d	48		                pha
.0d5e	a9 01		                lda #color
.0d60	8d 86 02	                sta bascol
.0d63	a0 05		                ldy #left+1
.0d65	a2 08		                ldx  #top+4
.0d67	18		                clc
.0d68	20 f0 ff	                jsr  plot
.0d6b	a2 30		                ldx  #<textd
.0d6d	a0 0f		                ldy  #>textd
.0d6f	20 10 12	                jsr  puts
.0d72	68		                pla
.0d73	8d 86 02	                sta  bascol
.0d76	20 a3 13	                jsr  popreg
.0d79	20 74 13	                jsr pushreg
.0d7c	ad 86 02	                lda bascol
.0d7f	48		                pha
.0d80	a9 01		                lda #color
.0d82	8d 86 02	                sta bascol
.0d85	a0 05		                ldy #left+1
.0d87	a2 0a		                ldx  #top+6
.0d89	18		                clc
.0d8a	20 f0 ff	                jsr  plot
.0d8d	a2 4f		                ldx  #<texte
.0d8f	a0 0f		                ldy  #>texte
.0d91	20 10 12	                jsr  puts
.0d94	68		                pla
.0d95	8d 86 02	                sta  bascol
.0d98	20 a3 13	                jsr  popreg
.0d9b	20 74 13	                jsr pushreg
.0d9e	ad 86 02	                lda bascol
.0da1	48		                pha
.0da2	a9 01		                lda #color
.0da4	8d 86 02	                sta bascol
.0da7	a0 05		                ldy #left+1
.0da9	a2 0b		                ldx  #top+7
.0dab	18		                clc
.0dac	20 f0 ff	                jsr  plot
.0daf	a2 6e		                ldx  #<textf
.0db1	a0 0f		                ldy  #>textf
.0db3	20 10 12	                jsr  puts
.0db6	68		                pla
.0db7	8d 86 02	                sta  bascol
.0dba	20 a3 13	                jsr  popreg
.0dbd	20 74 13	                jsr pushreg
.0dc0	ad 86 02	                lda bascol
.0dc3	48		                pha
.0dc4	a9 01		                lda #color
.0dc6	8d 86 02	                sta bascol
.0dc9	a0 05		                ldy #left+1
.0dcb	a2 0c		                ldx  #top+8
.0dcd	18		                clc
.0dce	20 f0 ff	                jsr  plot
.0dd1	a2 8d		                ldx  #<textg
.0dd3	a0 0f		                ldy  #>textg
.0dd5	20 10 12	                jsr  puts
.0dd8	68		                pla
.0dd9	8d 86 02	                sta  bascol
.0ddc	20 a3 13	                jsr  popreg
.0ddf	08		                php                 ; Sauvegarde les registres.
.0de0	48		                pha
.0de1	a9 0f		                lda #top+11           ; Initialise le paramètre top et la ...
.0de3	8d ce 1a	                sta drawbox_top
.0de6	8d d3 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0de9	a9 04		                lda #left          ; Initialise le paramètre left.
.0deb	8d cf 1a	                sta drawbox_left
.0dee	a9 20		                lda #32         ; Initialise le paramètre width.
.0df0	8d d0 1a	                sta drawbox_width
.0df3	a9 06		                lda #6        ; Initialise le paramètre height.
.0df5	8d d1 1a	                sta drawbox_height
.0df8	a9 1a		                lda #color2+reverse        ; Initialise le paramètre colour.
.0dfa	8d d2 1a	                sta drawbox_colour
.0dfd	68		                pla                 ; Récupère les registres.
.0dfe	28		                plp
.0dff	20 b1 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0e02	20 74 13	                jsr pushreg
.0e05	ad 86 02	                lda bascol
.0e08	48		                pha
.0e09	a9 1a		                lda #color2+reverse
.0e0b	8d 86 02	                sta bascol
.0e0e	a0 05		                ldy #left+1
.0e10	a2 0f		                ldx  #top+11
.0e12	18		                clc
.0e13	20 f0 ff	                jsr  plot
.0e16	a2 ac		                ldx  #<texth
.0e18	a0 0f		                ldy  #>texth
.0e1a	20 10 12	                jsr  puts
.0e1d	68		                pla
.0e1e	8d 86 02	                sta  bascol
.0e21	20 a3 13	                jsr  popreg
.0e24	20 74 13	                jsr pushreg
.0e27	ad 86 02	                lda bascol
.0e2a	48		                pha
.0e2b	a9 0a		                lda #color2
.0e2d	8d 86 02	                sta bascol
.0e30	a0 05		                ldy #left+1
.0e32	a2 11		                ldx  #top+13
.0e34	18		                clc
.0e35	20 f0 ff	                jsr  plot
.0e38	a2 bb		                ldx  #<texti
.0e3a	a0 0f		                ldy  #>texti
.0e3c	20 10 12	                jsr  puts
.0e3f	68		                pla
.0e40	8d 86 02	                sta  bascol
.0e43	20 a3 13	                jsr  popreg
.0e46	20 74 13	                jsr pushreg
.0e49	ad 86 02	                lda bascol
.0e4c	48		                pha
.0e4d	a9 0a		                lda #color2
.0e4f	8d 86 02	                sta bascol
.0e52	a0 05		                ldy #left+1
.0e54	a2 12		                ldx  #top+14
.0e56	18		                clc
.0e57	20 f0 ff	                jsr  plot
.0e5a	a2 da		                ldx  #<textj
.0e5c	a0 0f		                ldy  #>textj
.0e5e	20 10 12	                jsr  puts
.0e61	68		                pla
.0e62	8d 86 02	                sta  bascol
.0e65	20 a3 13	                jsr  popreg
.0e68	20 74 13	                jsr pushreg
.0e6b	ad 86 02	                lda bascol
.0e6e	48		                pha
.0e6f	a9 0a		                lda #color2
.0e71	8d 86 02	                sta bascol
.0e74	a0 05		                ldy #left+1
.0e76	a2 13		                ldx  #top+15
.0e78	18		                clc
.0e79	20 f0 ff	                jsr  plot
.0e7c	a2 f9		                ldx  #<textk
.0e7e	a0 0f		                ldy  #>textk
.0e80	20 10 12	                jsr  puts
.0e83	68		                pla
.0e84	8d 86 02	                sta  bascol
.0e87	20 a3 13	                jsr  popreg
.0e8a	a9 92		            lda #b_rvs_off
.0e8c	20 0a 12	            jsr putch
.0e8f	20 74 13	                jsr pushreg
.0e92	ad 86 02	                lda bascol
.0e95	48		                pha
.0e96	a9 01		                lda #cblanc
.0e98	8d 86 02	                sta bascol
.0e9b	a0 0f		                ldy #39-24
.0e9d	a2 18		                ldx  #24
.0e9f	18		                clc
.0ea0	20 f0 ff	                jsr  plot
.0ea3	a2 18		                ldx  #<textl
.0ea5	a0 10		                ldy  #>textl
.0ea7	20 10 12	                jsr  puts
.0eaa	68		                pla
.0eab	8d 86 02	                sta  bascol
.0eae	20 a3 13	                jsr  popreg
.0eb1	20 41 13	            jsr popall
.0eb4	60		            rts
=4			left = 4
=4			top = 4
=$1			color = cblanc
=$a			color2 = crose

;******  Processing file: chaines_fr.asm

=158			headtcol        =   b_jaune
=158			normtcol        =   b_jaune
>0eb5	00		nextline        .byte   0
>0eb6	20 20 20 20	line            .null           "                                "
>0eba	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0eca	20 20 20 20 20 20 20 20 20 20 20 20 00
>0ed7	92		texta           .byte           b_rvs_off
>0ed8	20 d3 cc 2d	                .text           " SL-BUG 64 Version 4.00 "
>0edc	c2 d5 c7 20 36 34 20 d6 45 52 53 49 4f 4e 20 34
>0eec	2e 30 30 20
>0ef0	12 00		                .byte           b_rvs_on,0
>0ef2	20 20 20 20	textb           .null           "     Version Commodore 64     "
>0ef6	20 d6 45 52 53 49 4f 4e 20 c3 4f 4d 4d 4f 44 4f
>0f06	52 45 20 36 34 20 20 20 20 20 00
>0f11	20 20 c9 44	textc           .null           "  Idee Originale sur MC-6809  "
>0f15	45 45 20 cf 52 49 47 49 4e 41 4c 45 20 53 55 52
>0f25	20 cd c3 2d 36 38 30 39 20 20 00
>0f30	20 20 d0 41	textd           .null           "  Par Serge Leblanc mai 1994  "
>0f34	52 20 d3 45 52 47 45 20 cc 45 42 4c 41 4e 43 20
>0f44	4d 41 49 20 31 39 39 34 20 20 00
>0f4f	20 d0 4f 52	texte           .null           " Port C64 par Daniel Lafrance "
>0f53	54 20 c3 36 34 20 50 41 52 20 c4 41 4e 49 45 4c
>0f63	20 cc 41 46 52 41 4e 43 45 20 00
>0f6e	20 20 20 20	textf           .null           "       (c) Octobre 2025       "
>0f72	20 20 20 28 43 29 20 cf 43 54 4f 42 52 45 20 32
>0f82	30 32 35 20 20 20 20 20 20 20 00
>0f8d	20 20 20 d6	textg           .null   format( "   Version: %-17s ",Version)
>0f91	45 52 53 49 4f 4e 3a 20 32 30 32 35 31 30 31 37
>0fa1	2d 31 32 35 33 30 31 20 20 20 00
>0fac	92		texth           .byte           b_rvs_off
>0fad	20 d2 c1 c3	                .text           " RACCOURCIS "
>0fb1	c3 cf d5 d2 c3 c9 d3 20
>0fb9	12 00		                .byte           b_rvs_on,0
>0fbb	20 c5 58 45	texti           .null   format( " Execution.: SYS%5d ($%4X) ",slbug64,slbug64)
>0fbf	43 55 54 49 4f 4e 2e 3a 20 d3 d9 d3 20 32 32 37
>0fcf	39 20 28 24 20 38 c5 37 29 20 00
>0fda	20 c1 49 44	textj           .null   format( " Aide......: SYS%5d ($%4X) ",help,help)
>0fde	45 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 32 33
>0fee	35 20 28 24 20 c3 c1 33 29 20 00
>0ff9	20 c3 cc d3	textk           .null   format( " CLS.......: SYS%5d ($%4X) ",cls,cls)
>0ffd	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 34 35 39
>100d	35 20 28 24 31 31 c6 33 29 20 00
>1018	d5 4e 45 20	textl           .null           "Une clef pour continuer!"
>101c	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>102c	55 45 52 21 00
>1031	5b c6 45 4e	titre           .null   "[Fenetre]"
>1035	45 54 52 45 5d 00
>103b	b0 c0 c0 c0	tline   .byte   176,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,174,0
>103f	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>104f	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ae 00
>105c	ab c0 c0 c0	mline   .byte   171,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,179,0
>1060	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>1070	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 b3 00
>107d	ad c0 c0 c0	bline   .byte   173,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,189,0
>1081	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>1091	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 bd 00
>109e	dd 20 20 20	eline   .byte   221,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,221,0
>10a2	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>10b2	20 20 20 20 20 20 20 20 20 20 20 dd 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>10bf	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>10c3	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black         =   144  ;0,  ctrl-1
=5			b_white         =   5    ;1,  ctrl-2
=28			b_red           =   28   ;2,  ctrl-3
=159			b_cyan          =   159  ;3,  ctrl-4
=156			b_purple        =   156  ;4,  ctrl-5
=30			b_green         =   30   ;5,  ctrl-6
=31			b_blue          =   31   ;6,  ctrl-7
=158			b_yellow        =   158  ;7,  ctrl-8
=129			b_orange        =   129  ;8,  C=-1
=149			b_brown         =   149  ;9,  C=-2
=150			b_ltred         =   150  ;10, C=-3
=155			b_gray3         =   155  ;11, C=-4
=155			b_grey3         =   155  ;11, C=-4
=152			b_gray2         =   152  ;12, C=-5
=152			b_grey2         =   152  ;13, C=-5
=153			b_ltgreen       =   153  ;13, C=-6
=154			b_ltblue        =   154  ;14, C=-7
=151			b_gray1         =   151  ;15, C=-8
=151			b_grey1         =   151  ;15, C=-8
=144			b_noir          =   144  ;0,  ctrl-1
=5			b_blanc         =   5    ;1,  ctrl-2
=28			b_rouge         =   28   ;2,  ctrl-3
=156			b_mauve         =   156  ;4,  ctrl-5
=30			b_vert          =   30   ;5,  ctrl-6
=31			b_bleu          =   31   ;6,  ctrl-7
=158			b_jaune         =   158  ;7,  ctrl-8
=149			b_brun          =   149  ;9,  C=-2
=150			b_rose          =   150  ;10, C=-3
=155			b_gris3         =   155  ;11, C=-4
=152			b_gris2         =   152  ;12, C=-5
=153			b_vert2         =   153  ;13, C=-6
=154			b_blue2         =   154  ;14, C=-7
=151			b_gris1         =   151  ;15, C=-8
=151			b_gris          =   151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.10c7			screendis
.10c7	08		               php
.10c8	48		               pha
.10c9	ad 11 d0	               lda  $d011
.10cc	29 ef		               and  #%11101111
.10ce	8d 11 d0	               sta  $d011
.10d1	68		               pla
.10d2	28		               plp
.10d3	60		               rts
.10d4			screenena
.10d4	08		               php
.10d5	48		               pha
.10d6	ad 11 d0	               lda  $d011
.10d9	09 10		               ora  #%00010000
.10db	8d 11 d0	               sta  $d011
.10de	68		               pla
.10df	28		               plp
.10e0	60		               rts
=8192			bmpram = 8192
.10e1			victohighres
.10e1	08		               php
.10e2	48		               pha
.10e3	ad 11 d0	               lda  vicmiscfnc
.10e6	09 20		               ora  #%00100000     ; 32
.10e8	8d 11 d0	               sta  vicmiscfnc
.10eb	ad 18 d0	               lda  vicmemptr
.10ee	09 08		               ora  #%00001000     ; $08
.10f0	8d 18 d0	               sta  vicmemptr
.10f3	a9 ff		               lda  #$ff           ; 255
.10f5	85 37		               sta  $0037
.10f7	a9 1f		               lda  #$1f           ; 31
.10f9	85 38		               sta  $0038
.10fb	68		               pla
.10fc	28		               plp
.10fd	60		               rts
.10fe			victonormal
.10fe	08		               php
.10ff	48		               pha
.1100	ad 11 d0	               lda  vicmiscfnc
.1103	29 df		               and  #%11011111     ; 233
.1105	8d 11 d0	               sta  vicmiscfnc
.1108	ad 18 d0	               lda  vicmemptr
.110b	29 f7		               and  #%11110111     ; $08
.110d	8d 18 d0	               sta  vicmemptr
.1110	a9 00		               lda  #$00
.1112	85 37		               sta  $0037
.1114	a9 a0		               lda  #$a0
.1116	85 38		               sta  $0038
.1118	20 f3 11	               jsr  cls
.111b	68		               pla
.111c	28		               plp
.111d	60		               rts
.111e			vicbmpclear
.111e	20 06 13	               jsr  push
.1121	a9 04		               lda  #cmauve
.1123	20 4c 11	               jsr  setvicbmpbackcol
.1126	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.1128	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.112a	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.112c	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.112e	48		               pha
.112f	a9 ff		               lda  #<$0000+(8191)
.1131	8d 2a 15	               sta  loopcount
.1134	a9 1f		               lda  #>$0000+(8191)
.1136	8d 2b 15	               sta  loopcount+1
.1139	68		               pla
.113a	a0 00		               ldy  #$00
.113c	a9 0f		next           lda  #$0f
.113e	91 fb		               sta  (zpage1),y
.1140	20 5b 14	               jsr  inczpage1
.1143	20 0a 15	               jsr  loop
.1146	d0 f4		               bne  next
.1148	20 41 13	               jsr  pop
.114b	60		               rts
.114c			setvicbmpbackcol
.114c	20 06 13	               jsr  push
.114f	29 0f		               and  #$0f
.1151	8d 7f 11	               sta  vicbmpbackcol
.1154	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.1156	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.1158	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.115a	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.115c	48		               pha
.115d	a9 00		               lda  #<$0000+(1024)
.115f	8d 2a 15	               sta  loopcount
.1162	a9 04		               lda  #>$0000+(1024)
.1164	8d 2b 15	               sta  loopcount+1
.1167	68		               pla
.1168	a0 00		               ldy  #$00
.116a	b1 fb		next           lda  (zpage1),y
.116c	29 f0		               and  #$f0
.116e	0d 7f 11	               ora  vicbmpbackcol
.1171	91 fb		               sta  (zpage1),y
.1173	20 5b 14	               jsr  inczpage1
.1176	20 0a 15	               jsr  loop
.1179	d0 ef		               bne  next
.117b	20 41 13	               jsr  pop
.117e	60		               rts
>117f	00		vicbmpbackcol  .byte     $00
.1180			setvicbmpforecol
.1180	20 06 13	               jsr  push
.1183	2a		               rol
.1184	2a		               rol
.1185	2a		               rol
.1186	2a		               rol
.1187	29 f0		               and  #$f0
.1189	8d b7 11	               sta  vicbmpforecol
.118c	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.118e	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.1190	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.1192	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.1194	48		               pha
.1195	a9 00		               lda  #<$0000+(1024)
.1197	8d 2a 15	               sta  loopcount
.119a	a9 04		               lda  #>$0000+(1024)
.119c	8d 2b 15	               sta  loopcount+1
.119f	68		               pla
.11a0	a0 00		               ldy  #$00
.11a2	b1 fb		next           lda  (zpage1),y
.11a4	29 0f		               and  #$0f
.11a6	0d b7 11	               ora  vicbmpforecol
.11a9	91 fb		               sta  (zpage1),y
.11ab	20 5b 14	               jsr  inczpage1
.11ae	20 0a 15	               jsr  loop
.11b1	d0 ef		               bne  next
.11b3	20 41 13	               jsr  pop
.11b6	60		               rts
>11b7	00		vicbmpforecol  .byte     $00
.11b8			bmphrcalccoords
.11b8	20 06 13	               jsr  push
.11bb	18		               clc       ; On met Carry à 0
.11bc	6a		               ror       ; le bit 0 de a dans carry  ?/2
.11bd	8a		               txa       ; x dans a
.11be	4a		               lsr       ; ?/4
.11bf	4a		               lsr       ; ?/8 a = (ax)/8
.11c0	8d d1 11	               sta  bmphrcol
.11c3	98		               tya       ; Y dans a
.11c4	4a		               lsr       ; ?/2
.11c5	4a		               lsr       ; ?/4
.11c6	4a		               lsr       ; ?/8 a=Y/8
.11c7	8d d0 11	               sta  bmphrrow
.11ca	48		               pha
.11cb	98		               tya
.11cc	20 41 13	               jsr  pop
.11cf	60		               rts
.11d0			vicbmpfill
>11d0	00		bmphrrow       .byte     $00
>11d1	00		bmphrcol       .byte     $00
>11d2	00		bmphrmask      .byte     $00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.11d3			scrmaninit
.11d3	20 74 13	               jsr  pushreg        ; Sauvegarde tous les registres
.11d6	20 c7 10	               jsr  screendis      ; Disable screen
.11d9	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.11db	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.11de	a9 05		               lda  #vvert         ; vert pour la couleur
.11e0	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.11e3	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.11e5	8d 86 02	               sta  bascol         ; texte.
.11e8	20 f3 11	               jsr  cls            ; Efface l'écran.
.11eb	20 d4 10	               jsr  screenena      ; enable screen
.11ee	20 a3 13	               jsr  popreg         ; Récupère tous les registres.
.11f1	60		               rts
>11f2	8e		characterset   .byte b_uppercase
.11f3			cls
.11f3	08		               php                 ; Sauvegarde les registres
.11f4	48		               pha                 ;   modifiés.
.11f5	a9 93		               lda  #$93           ; Affiche le code basic de
.11f7	20 d2 ff	               jsr  chrout         ;   d'effacement d'écran.
.11fa	68		               pla                 ; Récupère les registres
.11fb	28		               plp                 ;   modifiés.
.11fc	60		               rts
.11fd			putnch
.11fd	20 74 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.1200	20 d2 ff	again          jsr  chrout         ; On affiche A.
.1203	ca		               dex                 ; Un de moins à faire.
.1204	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.1206	20 a3 13	out            jsr  popreg         ; Récupère tous les registres.
.1209	60		               rts
.120a			putch
.120a	08		               php                 ; Sauvegarde le registre de status.
.120b	20 d2 ff	               jsr  chrout         ; Affiche le caractère de Acc.
.120e	28		               plp                 ; Récupère le registre de status.
.120f	60		               rts
.1210			puts
.1210	20 06 13	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.1213	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.1215	84 fc		               sty  zpage1+1       ;   dans ZP1.
.1217	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.1219	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.121b	f0 09		               beq  exit           ; Si $00 on sort.
.121d	20 d2 ff	               jsr  chrout         ; Affiche le caractères.
.1220	20 5b 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1223	4c 19 12	               jmp  next           ; Saute chercher le prochain carac.
.1226	20 41 13	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.1229	60		               rts
.122a			gotoxy
.122a	08		               php                 ; Sauvegarde le registre de
.122b	48		               pha                 ;   status et le registre a.
.122c	18		               clc                 ; Carry = 1 pour que kplot
.122d	8a		               txa                 ;   positionne le curseur.
.122e	48		               pha                 ; On inverse X et Y pcq kplot
.122f	98		               tya                 ;
.1230	aa		               tax                 ;   prend X comme la ligne
.1231	68		               pla                 ;
.1232	a8		               tay                 ;   et Y comme la colonne.
.1233	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.1236	68		               pla                 ; Récupère le registre a et
.1237	28		               plp                 ;   le registre de status.
.1238	60		               rts
.1239			cursor
=$0286			bascol    =    $0286               ; debugme
.1239	20 74 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.123c	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.123e	20 f0 ff	               jsr  kplot          ; On récupère la position du
.1241	8c 63 12	               sty  cx             ;   curseur et on la sauvegarde
.1244	8e 64 12	               stx  cy             ;   dans les vars locales.
.1247	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.124a	8d 65 12	               sta  bcol           ; BASIC du texte.
.124d	4c 5f 12	               jmp  out            ; c'est fini on sort.
.1250	ae 64 12	restore        ldx  cy             ; Comme C=1, On charge x avec
.1253	ac 63 12	               ldy  cx             ;   la ligne, y ace  la col.
.1256	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.1259	ad 65 12	               lda  bcol           ; On replace la couleur par basic
.125c	8d 86 02	               sta  bascol         ;   sauvegardé.
.125f	20 a3 13	out            jsr  popreg         ; Récupère tous les registres.
.1262	60		               rts
>1263	00		cx   .byte     $00
>1264	00		cy   .byte     $00
>1265	00		bcol .byte     $00
.1266			cursave
.1266	08		               php
.1267	38		               sec
.1268	20 39 12	               jsr  cursor         ; Voir cette fonction plus haut.
.126b	28		               plp
.126c	60		               rts
.126d			curput
.126d	08		               php
.126e	18		               clc
.126f	20 39 12	               jsr  cursor         ; Voir cette fonction plus haut.
.1272	28		               plp
.1273	60		               rts
.1274			putsxy
.1274	20 06 13	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.1277	86 fb		               stx  zpage1         ; On place la position de la
.1279	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.127b	a0 00		               ldy  #$00           ; On charge l'index à 0.
.127d	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.127f	aa		               tax                 ;   dans X.
.1280	20 5b 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1283	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.1285	a8		               tay                 ; dans Y.
.1286	20 2a 12	               jsr  gotoxy         ; on positionne le curseur.
.1289	20 5b 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.128c	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.128e	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.1290	20 10 12	               jsr  puts           ;   l'affiche.
.1293	20 41 13	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.1296	60		               rts
>1297	00 00		straddr   .word     $00
>1299	00		px        .byte     $00
>129a	00		py        .byte     $00
>129b	00 00		zp1       .word     $00
.129d			putscxy
.129d	20 06 13	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.12a0	86 fb		               stx  zpage1         ; On place la position de la
.12a2	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.12a4	a0 00		               ldy  #$00           ; On charge l'index à 0.
.12a6	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.12a9	48		               pha                 ;   actuelle de basic.
.12aa	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.12ac	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.12af	20 5b 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.12b2	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.12b4	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.12b6	20 74 12	               jsr  putsxy         ;   l'affiche.
.12b9	68		               pla                 ; On replace la couleur basic
.12ba	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.12bd	20 41 13	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.12c0	60		               rts
.12c1			putrahex
.12c1	20 74 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.12c4	20 94 15	               jsr  atohex         ; Conversion de a chaîne hexa.
.12c7	a2 31		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.12c9	a0 15		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.12cb	20 10 12	               jsr  puts           ; Affiche la chaîne.
.12ce	20 a3 13	               jsr  popreg         ; Récupère tous les registres.
.12d1	60		               rts
.12d2			kputrahexxy
.12d2			bputrahexxy
.12d2			putrahexxy
.12d2	08		               php                 ; Sauvegarde le registre de
.12d3	48		               pha                 ;   status et le registre a.
.12d4	20 94 15	               jsr  atohex         ; Convertion de a en hexadécimal.
.12d7	a2 2e		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.12d9	a0 15		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.12db	20 74 12	               jsr  putsxy         ; Positionne et affiche la chaîne.
.12de	68		               pla                 ; Récupère le registre a et
.12df	28		               plp                 ;   le registre de status.
.12e0	60		               rts
.12e1			putrahexcxy
.12e1	20 74 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.12e4	20 94 15	               jsr  atohex         ; Convertion de a en hexadécimal.
.12e7	a2 2e		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.12e9	a0 15		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.12eb	20 74 12	               jsr  putsxy         ; Colore, positionne et affiche la
.12ee	20 a3 13	               jsr  popreg         ; Récupère tous les registres.
.12f1	60		               rts
.12f2			setinverse
.12f2	48		               pha
.12f3	a9 12		               lda  #$12
.12f5	20 d2 ff	               jsr  chrout
.12f8	68		               pla
.12f9	60		               rts
.12fa			clrinverse
.12fa	48		               pha
.12fb	a9 92		               lda  #$92
.12fd	20 d2 ff	               jsr  chrout
.1300	68		               pla
.1301	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>1302	00		rp        .byte     0
>1303	00		ra        .byte     0
>1304	00 00		pc        .word     0
.1306			pushall
.1306			push
.1306	08		          php            ; stack : flg, pcl, pch
.1307	78		          sei
.1308	8d 03 13	          sta  ra        ; save a
.130b	68		          pla            ; stack : pcl, pch
.130c	8d 02 13	          sta  rp        ; save rp
.130f	68		          pla            ; stack : pch
.1310	8d 04 13	          sta  pc        ; save pcl
.1313	68		          pla            ; stack : -
.1314	8d 05 13	          sta  pc+1      ; save pch
.1317	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1319	48		          pha            ; stack : zp1l
.131a	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.131c	48		          pha            ; stack : zp1h, zp1l
.131d	a5 fd		          lda  zpage2    ; get zpage2 low byte
.131f	48		          pha            ; stack : zp2l, zp1h, zp1l
.1320	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1322	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1323	ad 02 13	          lda  rp        ; get rp
.1326	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1327	ad 03 13	          lda  ra        ; get a
.132a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.132b	8a		          txa            ; get x
.132c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.132d	98		          tya            ; get y
.132e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.132f	ad 05 13	          lda  pc+1      ; get pch
.1332	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1333	ad 04 13	          lda  pc        ; get pcl
.1336	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1337	ad 02 13	          lda  rp        ; get rp
.133a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.133b	ad 03 13	          lda  ra        ; get a
.133e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.133f	58		          cli
.1340	60		          rts
.1341			pullall
.1341			pull
.1341			popall
.1341			pop
.1341	78		          sei
.1342	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1343	8d 04 13	          sta  pc        ; save pcl
.1346	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1347	8d 05 13	          sta  pc+1      ; save pch
.134a	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.134b	a8		          tay            ; set y
.134c	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.134d	aa		          tax            ; set x
.134e	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.134f	8d 03 13	          sta  ra        ; save a
.1352	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1353	8d 02 13	          sta  rp        ; save rp
.1356	68		          pla            ; stack : zp2l, zp1h, zp1l
.1357	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1359	68		          pla            ; stack : zp1h, zp1l
.135a	85 fd		          sta  zpage2    ; get zpage2 High byte
.135c	68		          pla            ; stack : zp1l
.135d	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.135f	68		          pla            ; stack :
.1360	85 fb		          sta  zpage1    ; get zpage1 High byte
.1362	ad 05 13	          lda  pc+1      ; get pch
.1365	48		          pha            ; stack : pch
.1366	ad 04 13	          lda  pc
.1369	48		          pha            ; stack : pcl, pch
.136a	ad 02 13	          lda  rp        ; get rp
.136d	48		          pha            ; stack : rp, pcl, pch
.136e	ad 03 13	          lda  ra        ; set ra
.1371	58		          cli
.1372	28		          plp            ; stack : pcl, pch
.1373	60		          rts
.1374			pushreg
.1374	08		          php            ; stack : flg, pcl, pch
.1375	78		          sei
.1376	8d 03 13	          sta  ra        ; save a
.1379	68		          pla            ; stack : pcl, pch
.137a	8d 02 13	          sta  rp        ; save rp
.137d	68		          pla            ; stack : pch
.137e	8d 04 13	          sta  pc        ; save pcl
.1381	68		          pla            ; stack : -
.1382	8d 05 13	          sta  pc+1      ; save pch
.1385	ad 02 13	          lda  rp        ; get rp
.1388	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1389	ad 03 13	          lda  ra        ; get a
.138c	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.138d	8a		          txa            ; get x
.138e	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.138f	98		          tya            ; get y
.1390	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1391	ad 05 13	          lda  pc+1      ; get pch
.1394	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1395	ad 04 13	          lda  pc        ; get pcl
.1398	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1399	ad 02 13	          lda  rp        ; get rp
.139c	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.139d	ad 03 13	          lda  ra        ; get a
.13a0	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.13a1	58		          cli
.13a2	60		          rts
.13a3			pullreg
.13a3			popreg
.13a3	78		          sei
.13a4	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.13a5	8d 04 13	          sta  pc        ; save pcl
.13a8	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.13a9	8d 05 13	          sta  pc+1      ; save pch
.13ac	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.13ad	a8		          tay            ; set y
.13ae	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.13af	aa		          tax            ; set x
.13b0	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.13b1	8d 03 13	          sta  ra        ; save a
.13b4	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.13b5	8d 02 13	          sta  rp        ; save rp
.13b8	ad 05 13	          lda  pc+1      ; get pch
.13bb	48		          pha            ; stack : pch
.13bc	ad 04 13	          lda  pc
.13bf	48		          pha            ; stack : pcl, pch
.13c0	ad 02 13	          lda  rp        ; get rp
.13c3	48		          pha            ; stack : rp, pcl, pch
.13c4	ad 03 13	          lda  ra        ; set ra
.13c7	58		          cli
.13c8	28		          plp            ; stack : pcl, pch
.13c9	60		          rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.13ca			blkfill
.13ca	20 06 13	bf0            jsr  push
.13cd	20 95 14	               jsr  savezp1
.13d0	84 fc		               sty  zpage1+1
.13d2	a0 00		               ldy  #$00
.13d4	84 fb		               sty  zpage1
.13d6	91 fb		bf1            sta  (zpage1),y
.13d8	c8		               iny
.13d9	d0 fb		               bne  bf1
.13db	20 a4 14	               jsr  restzp1
.13de	20 41 13	               jsr  pop
.13e1	60		               rts
.13e2			memfill
.13e2	20 06 13	               jsr  push
.13e5	20 ca 13	mf1            jsr  blkfill
.13e8	c8		               iny
.13e9	ca		               dex
.13ea	d0 f9		               bne  mf1
.13ec	20 41 13	               jsr  pop
.13ef	60		               rts
.13f0			memmove
.13f0	20 06 13	               jsr  push
.13f3	ba		               tsx            ; On se crée un pointeur ...
.13f4	8a		               txa
.13f5	18		               clc
.13f6	69 0b		               adc  #11
.13f8	a8		               tay
.13f9	a2 06		               ldx  #$06
.13fb	b9 00 01	nextbyte       lda  $0100,y
.13fe	99 4a 14	               sta  words,y
.1401	c8		               iny
.1402	ca		               dex
.1403	d0 f6		               bne  nextbyte
.1405	ad 4a 14	               lda  s
.1408	8d 21 14	               sta  source+1
.140b	ad 4b 14	               lda  s+1
.140e	8d 22 14	               sta  source+2
.1411	ad 4c 14	               lda  d
.1414	8d 1e 14	               sta  destin+1
.1417	ad 4d 14	               lda  d+1
.141a	8d 1f 14	               sta  destin+2
.141d	ad ff ff	destin         lda  $ffff
.1420	8d ff ff	source         sta  $ffff
.1423	ee 1e 14	               inc  destin+1
.1426	d0 03		               bne  src
.1428	ee 1f 14	               inc  destin+2
.142b	ee 21 14	src            inc  source+1
.142e	d0 03		               bne  cnt
.1430	ee 22 14	               inc  source+2
.1433	ad 4e 14	cnt            lda  compte
.1436	d0 08		               bne  decit
.1438	ad 4f 14	               lda  compte+1
.143b	f0 09		               beq  fini
.143d	ce 4f 14	               dec  compte+1
.1440	ce 4e 14	decit          dec  compte
.1443	4c 1d 14	               jmp  destin
.1446	20 41 13	fini           jsr  pop
.1449	60		               rts
.144a			words
>144a	00 00		s         .word     $0000
>144c	00 00		d         .word     $0000
>144e	00 00		compte    .word     $0000
.1450			decword
.1450	20 06 13	               jsr  push
.1453	86 fd		               stx  zpage2
.1455	84 fe		               sty  zpage2+1
.1457	20 41 13	               jsr  pop
.145a	60		               rts
.145b			inczpage1
.145b			inczp1
.145b	08		               php
.145c	48		               pha
.145d	e6 fb		               inc  zpage1
.145f	a5 fb		               lda  zpage1
.1461	d0 02		               bne  nopage
.1463	e6 fc		               inc  zpage1+1
.1465	68		nopage         pla
.1466	28		               plp
.1467	60		               rts
.1468			deczpage1
.1468			deczp1
.1468	08		               php
.1469	48		               pha
.146a	c6 fb		               dec  zpage1
.146c	a5 fb		               lda  zpage1
.146e	c9 ff		               cmp  #$ff
.1470	f0 02		               beq  report
.1472	d0 02		               bne  nopage
.1474	c6 fc		report         dec  zpage1+1
.1476	68		nopage         pla
.1477	28		               plp
.1478	60		               rts
.1479			inczpage2
.1479			inczp2
.1479	08		               php
.147a	48		               pha
.147b	e6 fd		               inc  zpage2
.147d	a5 fd		               lda  zpage2
.147f	d0 02		               bne  nopage
.1481	e6 fe		               inc  zpage2+1
.1483	68		nopage         pla
.1484	28		               plp
.1485	60		               rts
.1486			deczpage2
.1486			deczp2
.1486	08		               php
.1487	c6 fd		               dec  zpage2
.1489	a5 fd		               lda  zpage2
.148b	c9 ff		               cmp  #$ff
.148d	f0 02		               beq  report
.148f	d0 02		               bne  nopage
.1491	c6 fe		report         dec  zpage2+1
.1493	28		nopage         plp
.1494	60		               rts
.1495			savezp1
.1495	08		               php
.1496	48		               pha
.1497	a5 fb		               lda  zpage1
.1499	8d 26 15	               sta  zp1
.149c	a5 fc		               lda  zpage1+1
.149e	8d 27 15	               sta  zp1+1
.14a1	68		               pla
.14a2	28		               plp
.14a3	60		               rts
.14a4			restzp1
.14a4	08		               php
.14a5	48		               pha
.14a6	ad 26 15	               lda  zp1
.14a9	85 fb		               sta  zpage1
.14ab	ad 27 15	               lda  zp1+1
.14ae	85 fc		               sta  zpage1+1
.14b0	68		               pla
.14b1	28		               plp
.14b2	60		               rts
.14b3			savezp2
.14b3	08		               php
.14b4	48		               pha
.14b5	a5 fd		               lda  zpage2
.14b7	8d 28 15	               sta  zp2
.14ba	a5 fe		               lda  zpage2+1
.14bc	8d 29 15	               sta  zp2+1
.14bf	68		               pla
.14c0	28		               plp
.14c1	60		               rts
.14c2			restzp2
.14c2	08		               php
.14c3	48		               pha
.14c4	ad 28 15	               lda  zp2
.14c7	85 fd		               sta  zpage2
.14c9	ad 29 15	               lda  zp2+1
.14cc	85 fe		               sta  zpage2+1
.14ce	68		               pla
.14cf	28		               plp
.14d0	60		               rts
.14d1			xy2addr
.14d1	08		               php
.14d2	48		               pha
.14d3	8a		               txa
.14d4	48		               pha
.14d5	98		               tya
.14d6	48		               pha
.14d7	ad 21 15	               lda  addr1+1
.14da	8d 23 15	               sta  addr2+1
.14dd	ad 20 15	               lda  addr1
.14e0	8d 22 15	               sta  addr2
.14e3	c0 00		               cpy  #$00
.14e5	f0 0f		               beq  addx
.14e7	18		moreline       clc
.14e8	6d 1f 15	               adc  ymult
.14eb	90 03		               bcc  norepy
.14ed	ee 23 15	               inc  addr2+1
.14f0	8d 22 15	norepy         sta  addr2
.14f3	88		               dey
.14f4	d0 f1		               bne  moreline
.14f6	8a		addx           txa
.14f7	18		               clc
.14f8	6d 22 15	               adc  addr2
.14fb	90 03		               bcc  thatsit
.14fd	ee 23 15	               inc  addr2+1
.1500	8d 22 15	thatsit        sta  addr2
.1503	68		               pla
.1504	a8		               tay
.1505	68		               pla
.1506	aa		               tax
.1507	68		               pla
.1508	28		               plp
.1509	60		               rts
.150a			loop
.150a	ce 2a 15	               dec  loopcount
.150d	d0 03		               bne  norep
.150f	ce 2b 15	               dec  loopcount+1
.1512	ad 2a 15	norep          lda  loopcount
.1515	c9 00		               cmp  #$00
.1517	d0 05		               bne  out
.1519	4d 2b 15	               eor  loopcount+1
.151c	c9 ff		               cmp  #$ff
.151e	60		out            rts
>151f	28		ymult          .byte     40
>1520	00 00		addr1          .word     $0000
>1522	00 00		addr2          .word     $0000
>1524	00 00		bytecnt        .word     $0000
>1526	00 00		zp1            .word     $0000
>1528	00 00		zp2            .word     $0000
>152a	00 00		loopcount      .word     $0000

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>152c	01		a2hexcol       .byte     1              ; pour aputscxy
>152d	00		a2hexbkcol     .byte     %00000000
.152e			a2hexpos
>152e	00		a2hexpx        .byte     0              ; pour aputsxy
>152f	00		a2hexpy        .byte     0
>1530	24		a2hexprefix    .byte     "$"            ; pour aputs
>1531	00 00		a2hexstr       .word     $00
>1533	00 00		               .word     $00
>1535	00		               .byte     0              ; 0 end string
>1536	01		abincol        .byte     1
>1537	00		abinbkcol      .byte     %00000000
>1538	30 30 30 30	abin           .null     "00000000"
>153c	30 30 30 30 00
>1541	20 20 20 00	adec           .null     "   "
.1545			putahexfmtxy
.1545	20 06 13	               jsr  push
.1548	20 94 15	               jsr  atohex
.154b	ae 2e 15	               ldx  a2hexpx
.154e	ac 2f 15	               ldy  a2hexpy
.1551	20 2a 12	               jsr  gotoxy
.1554	a2 30		               ldx  #<a2hexprefix
.1556	a0 15		               ldy  #>a2hexprefix
.1558	20 10 12	               jsr  puts
.155b	20 41 13	               jsr  pop
.155e	60		               rts
.155f			putahexfmt
.155f	20 06 13	               jsr  push
.1562	20 94 15	               jsr  atohex
.1565	a2 30		               ldx  #<a2hexprefix
.1567	a0 15		               ldy  #>a2hexprefix
.1569	20 10 12	               jsr  puts
.156c	20 41 13	               jsr  pop
.156f	60		               rts
.1570			putahex
.1570	20 06 13	               jsr  push
.1573	20 94 15	               jsr  atohex
.1576	a2 31		               ldx  #<a2hexstr
.1578	a0 15		               ldy  #>a2hexstr
.157a	20 10 12	               jsr  puts
.157d	20 41 13	               jsr  pop
.1580	60		               rts
.1581			nibtohex
.1581	08		               php
.1582	29 0f		               and  #$0f
.1584	f8		               sed
.1585	18		               clc
.1586	69 90		               adc  #$90
.1588	69 40		               adc  #$40
.158a	d8		               cld
.158b	28		               plp
.158c	60		               rts
.158d			lsra4bits
.158d	08		               php
.158e	4a		               lsr
.158f	4a		               lsr
.1590	4a		               lsr
.1591	4a		               lsr
.1592	28		               plp
.1593	60		               rts
.1594			atohex
.1594	08		               php
.1595	48		               pha
.1596	48		               pha
.1597	20 8d 15	               jsr  lsra4bits
.159a	20 81 15	               jsr  nibtohex
.159d	8d 31 15	               sta  a2hexstr
.15a0	68		               pla
.15a1	20 81 15	               jsr  nibtohex
.15a4	8d 32 15	               sta  a2hexstr+1
.15a7	a9 00		               lda  #$00                ; set end of string
.15a9	8d 33 15	               sta  a2hexstr+2
.15ac	68		               pla
.15ad	28		               plp
.15ae	60		               rts
.15af			xy2hex
.15af	20 06 13	               jsr  push
.15b2	20 94 15	               jsr  atohex
.15b5	8a		               txa
.15b6	48		               pha
.15b7	20 8d 15	               jsr  lsra4bits
.15ba	20 81 15	               jsr  nibtohex
.15bd	8d 31 15	               sta  a2hexstr
.15c0	68		               pla
.15c1	20 81 15	               jsr  nibtohex
.15c4	8d 32 15	               sta  a2hexstr+1
.15c7	98		               tya
.15c8	48		               pha
.15c9	20 8d 15	               jsr  lsra4bits
.15cc	20 81 15	               jsr  nibtohex
.15cf	8d 33 15	               sta  a2hexstr+2
.15d2	68		               pla
.15d3	20 81 15	               jsr  nibtohex
.15d6	8d 34 15	               sta  a2hexstr+3
.15d9	a9 00		               lda  #$00                ; 0 ended string
.15db	8d 35 15	               sta  a2hexstr+4
.15de	20 41 13	               jsr  pop
.15e1			atobin
.15e1	20 06 13	               jsr  push
.15e4	a2 08		               ldx  #8
.15e6	a0 00		               ldy  #0
.15e8	18		               clc
.15e9	2a		nextbit        rol
.15ea	48		               pha
.15eb	69 00		               adc  #$00
.15ed	29 01		               and  #$01
.15ef	20 81 15	               jsr  nibtohex
.15f2	99 38 15	               sta  abin,y
.15f5	68		               pla
.15f6	c8		               iny
.15f7	ca		               dex
.15f8	d0 ef		               bne  nextbit
.15fa	a9 00		               lda  #0
.15fc	99 38 15	               sta  abin,y
.15ff	20 41 13	               jsr  pull
.1602	60		               rts
.1603			abinsetmccol
.1603	20 74 13	               jsr  pushreg
.1606	20 a3 13	               jsr  popreg
.1609	60		               rts
.160a			putabin
.160a	20 e1 15	               jsr     atobin
.160d	20 06 13	               jsr     push
.1610	a2 38		               ldx     #<abin
.1612	a0 15		               ldy     #>abin
.1614	20 10 12	               jsr     puts
.1617	20 41 13	               jsr     pop
.161a	60		               rts
.161b			printabin
.161b	20 06 13	               jsr     push
.161e	a2 38		               ldx     #<abin
.1620	a0 15		               ldy     #>abin
.1622	20 10 12	               jsr     puts
.1625	20 41 13	               jsr     pop
.1628	60		               rts
.1629			putabinfmt
.1629	08		               php
.162a	48		               pha
.162b	a9 25		               lda     #"%"
.162d	20 0a 12	               jsr     putch
.1630	68		               pla
.1631	20 0a 16	               jsr     putabin
.1634	28		               plp
.1635	60		               rts
.1636			putabinxy
.1636	20 2a 12	               jsr     gotoxy
.1639	20 0a 16	               jsr     putabin
.163c	60		               rts
.163d			putabinfmtxy
.163d	20 2a 12	               jsr     gotoxy
.1640	20 29 16	               jsr     putabinfmt
.1643	60		               rts
.1644			atodec
.1644	20 06 13	               jsr  push
.1647	f8		               sed            ; On se place en mode décimal.
.1648	aa		               tax            ; On déplace a dans x.
.1649	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.164b	a9 00		               lda  #$00      ; 0 dans A.
.164d	18		nextbit        clc            ; Bit carry a 0.
.164e	69 01		               adc  #$01      ; Ajoute 1 a A.
.1650	90 01		               bcc  decx      ; Pas de carry, pas de report.
.1652	c8		               iny            ; On incrémente Y
.1653	ca		decx           dex            ; X=X-1
.1654	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.1656	48		               pha            ; A sur le stack.
.1657	98		               tya            ; Y dans A (MSB)
.1658	20 81 15	               jsr  nibtohex  ; a hex petsci ...
.165b	8d 41 15	               sta  adec      ; ... dans tampon.
.165e	68		               pla            ; Récupere A
.165f	48		               pha            ;
.1660	20 81 15	               jsr  nibtohex
.1663	8d 43 15	               sta  adec+2
.1666	68		               pla
.1667	6a		               ror
.1668	6a		               ror
.1669	6a		               ror
.166a	6a		               ror
.166b	20 81 15	               jsr  nibtohex
.166e	8d 42 15	               sta  adec+1
.1671	d8		               cld            ; On revient en mode binaire.
.1672	20 41 13	               jsr  pull
.1675	60		               rts
.1676			putadec
.1676	20 06 13	               jsr  push
.1679	20 44 16	               jsr  atodec
.167c	a2 41		               ldx  #<adec
.167e	a0 15		               ldy  #>adec+1
.1680	20 10 12	               jsr  puts
.1683	20 41 13	               jsr  pop
.1686	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.1687			waitstop
.1687	08		            php         ;\ Sauvegarde les drapeaux
.1688	48		            pha         ;/  et l'accumulateur.
.1689	a9 00		            lda #0      ;\ Efface le tampon
.168b	85 c6		            sta 198     ;/  du clavier.
.168d	20 ed f6	wait        jsr k_stop  ; Cherche la clef [RUN/STOP].
.1690	d0 fb		            bne  wait   ;  Elle n'est pas pesée.
.1692	68		            pla         ;\ Récupère l'accmulateur et
.1693	28		            plp         ;/  les drapeaux.
.1694	60		            rts
.1695			anykey
.1695	08		            php         ;\ Sauvegarde les drapeaux
.1696	48		            pha         ;/  et l'accumulateur.
.1697	a5 cb		nokey       lda 203     ; Lit la matrice de la clef actuelle dans le tampon.
.1699	c9 40		            cmp #64     ; Si 64 alors aucune clef n'est appuyée.
.169b	f0 fa		            beq nokey   ; On attend qu'il y en aie une.
.169d	20 a3 16	            jsr kbfree  ; On attend que le clavier soit relâché.
.16a0	68		            pla         ;\ Récupère l'accmulateur et
.16a1	28		            plp         ;/  les drapeaux.
.16a2	60		            rts
.16a3			kbfree
.16a3	08		            php         ;\ Sauvegarde les drapeaux
.16a4	48		            pha         ;/  et l'accumulateur.
.16a5	a5 cb		iskey       lda 203     ; Lit la matrice de la clef actuelle dans le tampon.
.16a7	c9 40		            cmp #64     ; Si 64 alors aucune clef n'est appuyée.
.16a9	d0 fa		            bne iskey   ; On attend qu'il y en aie aucune.
.16ab	68		            pla         ;\ Récupère l'accmulateur et
.16ac	28		            plp         ;/  les drapeaux.
.16ad	60		            rts
.16ae			getkey
.16ae	08		            php         ; Sauvegarde les drapeaux.
.16af	20 e4 ff	gkagain     jsr getin   ; Tente de lire une clef.
.16b2	c9 00		            cmp #0      ; 0 si aucune.
.16b4	f0 f9		            beq gkagain ; Aucune, alors on attend.
.16b6	08		            php         ; Récupère les drapeaux.
.16b7	60		            rts
.16b8			kbflushbuff
.16b8	08		            php         ;\ Sauvegarde les drapeaux
.16b9	48		            pha         ;/  et l'accumulateur.
.16ba	a9 00		            lda #0      ;\ Efface le tampon
.16bc	85 c6		            sta 198     ;/  du clavier.
.16be	68		            pla         ;\ Récupère l'accmulateur et
.16bf	28		            plp         ;/  les drapeaux.
.16c0	60		            rts
.16c1			waitkey
.16c1	08		            php         ;\ Sauvegarde les drapeaux
.16c2	48		            pha         ;/  et l'accumulateur.
.16c3	8d fd 16	            sta thekey  ; Sauvegarde la clef attendue.
.16c6	a9 00		            lda #0      ;\ Efface le tampon
.16c8	85 c6		            sta 198     ;/  du clavier.
.16ca	20 e4 ff	nogood      jsr getin   ; Tente de lire une clef.
.16cd	cd fd 16	            cmp thekey  ; La compare avec celle attendue.
.16d0	d0 f8		            bne nogood  ; Boucle si ce l'est pas la bonne.
.16d2	20 d2 ff	            jsr chrout  ; L'affiche quand elle est bonne.
.16d5	68		            pla         ;\ Récupère l'accmulateur et
.16d6	28		            plp         ;/  les drapeaux.
.16d7	60		            rts
.16d8			waitspace
.16d8	08		            php         ;\ Sauvegarde les drapeaux
.16d9	48		            pha         ;/  et l'accumulateur.
.16da	a9 00		            lda #0      ;\ Efface le tampon
.16dc	85 c6		            sta 198     ;/  du clavier.
.16de	20 01 1a	nospace     jsr showregsrev
.16e1	a9 cb		            lda #203    ; Lit la matrice du clavier.
.16e3	c9 3c		            cmp #60     ; 60 dans la matrice = barre d'espace appuyée.
.16e5	d0 f7		            bne nospace
.16e7	68		            pla         ;\ Récupère l'accmulateur et
.16e8	28		            plp         ;/  les drapeaux.
.16e9			waitreturn
.16e9	08		            php         ;\ Sauvegarde les drapeaux
.16ea	48		            pha         ;/  et l'accumulateur.
.16eb	a9 00		            lda #0      ;\ Efface le tampon
.16ed	85 c6		            sta 198     ;/  du clavier.
.16ef	a9 cb		noreturn    lda #203    ; Lit la matrice du clavier.
.16f1	c9 01		            cmp #1      ; 1 dans la matrice = [RETURN] appuyé.
.16f3	08		            php         ; Sauvegarde les drapeaux pour la comparaison.
.16f4	a9 00		            lda #0      ;\ Efface le tampon
.16f6	85 c6		            sta 198     ;/  du clavier.
.16f8	28		            plp         ; Récupère les drapeaux pour la comparaison.
.16f9	d0 f4		            bne noreturn
.16fb	68		            pla         ;\ Récupère l'accmulateur et
.16fc	28		            plp         ;/  les drapeaux.
>16fd	00		thekey      .byte   0
>16fe	01		thecount    .byte   $01
>16ff	00 00 00 00	asciitorom  .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1703	00 00 00 00 00 00 00 00 00 0d 00 00
>170f	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1713	00 00 00 00 00 00 00 00 00 00 00 00
>171f	20 21 22 23	            .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1723	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>172f	30 31 32 33	            .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1733	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>173f	00 01 02 03	            .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1743	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>174f	10 11 12 13	            .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1753	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>175f	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1763	00 00 00 00 00 00 00 00 00 00 00 00
>176f	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1773	00 00 00 00 00 00 00 00 00 00 00 00
>177f	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1783	00 00 00 00 00 00 00 00 00 00 00 00
>178f	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1793	00 00 00 00 00 00 00 00 00 00 00 00
>179f	60 61 62 63	            .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>17a3	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>17af	70 71 72 73	            .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>17b3	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>17bf	40 41 42 43	            .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>17c3	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>17cf	50 51 52 53	            .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>17d3	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>17df	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>17e3	00 00 00 00 00 00 00 00 00 00 00 00
>17ef	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>17f3	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-showregs.asm

.17ff			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.17ff	08		               php                 ; Sauvegarde le registre de status sur stack.
.1800	8d f4 19	               sta  rega           ; Sauvegarde Acc en mémoire.
.1803	68		               pla                 ; Récupère le registre de status du stack.
.1804	8d f7 19	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.1807	8e f5 19	               stx  regx           ; Sauvegarde le registre X en mémoire.
.180a	8c f6 19	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.180d	ba		               tsx                 ; Copie le registre S dans X.
.180e	8e f8 19	               stx  regs           ; Sauvegarde le registre S en mémoire.
.1811	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.1812	8d fa 19	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.1815	8d fc 19	               sta  regpcl2        ; ... une seconde fois.
.1818	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.1819	8d f9 19	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.181c	8d fb 19	               sta  regpch2        ; ... une seconde fois.
.181f	ad f4 19	               lda  rega           ; On commence par le registre Acc.
.1822	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1823	20 81 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1826	8d 91 19	               sta  vala+1         ; ... et le place dans la chaine.
.1829	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.182a	20 8d 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.182d	20 81 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1830	8d 90 19	               sta  vala           ; ... et le place dans la chaine.
.1833	ad f6 19	               lda  regy           ; Ensuite, le registre Y.
.1836	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1837	20 81 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.183a	8d a8 19	               sta  valy+1         ; ... et le place dans la chaine.
.183d	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.183e	20 8d 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1841	20 81 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1844	8d a7 19	               sta  valy           ; ... et le place dans la chaine.
.1847	ad f5 19	               lda  regx           ; Ensuite, le registre X.
.184a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.184b	20 81 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.184e	8d 9c 19	               sta  valx+1         ; ... et le place dans la chaine.
.1851	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1852	20 8d 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1855	20 81 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1858	8d 9b 19	               sta  valx           ; ... et le place dans la chaine.
.185b	ad f7 19	               lda  regp           ; Ensuite, le registre de status.
.185e	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.185f	20 81 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1862	8d b3 19	               sta  valp+1         ; ... et le place dans la chaine.
.1865	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1866	20 8d 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1869	20 81 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.186c	8d b2 19	               sta  valp           ; ... et le place dans la chaine.
.186f	ad f8 19	               lda  regs           ; Ensuite, le pointeur de stack.
.1872	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1873	20 81 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1876	8d be 19	               sta  vals+1         ; ... et le place dans la chaine.
.1879	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.187a	20 8d 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.187d	20 81 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1880	8d bd 19	               sta  vals           ; ... et le place dans la chaine.
.1883	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.1884	ad fc 19	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.1887	69 00		               adc  #$00           ; On y ajoute 1.
.1889	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.188b	ee fb 19	               inc  regpch2        ; ... en incrémentant le MSB.
.188e	8d fc 19	noreport       sta  regpcl2        ; On le sauvegarde.
.1891	ad fc 19	               lda  regpcl2        ; On récupère la partie basse du compteur.
.1894	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1895	20 81 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1898	8d ce 19	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.189b	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.189c	20 8d 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.189f	20 81 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18a2	8d cd 19	               sta  valpcl         ; ... et lace le code à la position "--X-".
.18a5	ad fb 19	               lda regpch2         ; On récupère la partie haute du compteur.
.18a8	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18a9	20 81 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18ac	8d cc 19	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.18af	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.18b0	20 8d 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18b3	20 81 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18b6	8d cb 19	               sta  valpch         ; ... et lace le code à la position "X---".
.18b9	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.18bb	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18bc	20 81 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18bf	8d df 19	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.18c2	68		               pla
.18c3	20 8d 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18c6	20 81 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18c9	8d de 19	               sta  valz1l         ; ... et lace le code à la position "--X-".
.18cc	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.18ce	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18cf	20 81 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18d2	8d dd 19	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.18d5	68		               pla
.18d6	20 8d 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18d9	20 81 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18dc	8d dc 19	               sta  valz1h         ; ... et lace le code à la position "X---".
.18df	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.18e1	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18e2	20 81 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18e5	8d f0 19	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.18e8	68		               pla
.18e9	20 8d 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18ec	20 81 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18ef	8d ef 19	               sta  valz2l         ; ... et lace le code à la position "--X-".
.18f2	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.18f4	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18f5	20 81 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18f8	8d ee 19	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.18fb	68		               pla
.18fc	20 8d 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18ff	20 81 15	               jsr  nibtohex
.1902	8d ed 19	               sta  valz2h         ; ... et lace le code à la position "X---".
.1905	20 74 13	               jsr  pushreg
.1908	a2 88		               ldx  #<srega
.190a	a0 19		               ldy  #>srega
.190c	20 9d 12	               jsr  putscxy
.190f	20 a3 13	               jsr  popreg
.1912	20 74 13	               jsr  pushreg
.1915	a2 94		               ldx  #<sregx
.1917	a0 19		               ldy  #>sregx
.1919	20 9d 12	               jsr  putscxy
.191c	20 a3 13	               jsr  popreg
.191f	20 74 13	               jsr  pushreg
.1922	a2 9f		               ldx  #<sregy
.1924	a0 19		               ldy  #>sregy
.1926	20 9d 12	               jsr  putscxy
.1929	20 a3 13	               jsr  popreg
.192c	20 74 13	               jsr  pushreg
.192f	a2 ab		               ldx  #<sregp
.1931	a0 19		               ldy  #>sregp
.1933	20 9d 12	               jsr  putscxy
.1936	20 a3 13	               jsr  popreg
.1939	20 74 13	               jsr  pushreg
.193c	a2 b6		               ldx  #<sregs
.193e	a0 19		               ldy  #>sregs
.1940	20 9d 12	               jsr  putscxy
.1943	20 a3 13	               jsr  popreg
.1946	20 74 13	               jsr  pushreg
.1949	a2 c2		               ldx  #<sregpc
.194b	a0 19		               ldy  #>sregpc
.194d	20 9d 12	               jsr  putscxy
.1950	20 a3 13	               jsr  popreg
.1953	20 74 13	               jsr  pushreg
.1956	a2 d2		               ldx  #<sregz1
.1958	a0 19		               ldy  #>sregz1
.195a	20 9d 12	               jsr  putscxy
.195d	20 a3 13	               jsr  popreg
.1960	20 74 13	               jsr  pushreg
.1963	a2 e3		               ldx  #<sregz2
.1965	a0 19		               ldy  #>sregz2
.1967	20 9d 12	               jsr  putscxy
.196a	20 a3 13	               jsr  popreg
.196d	ad f9 19	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.1970	48		               pha                 ; ... à la bonne position sur la pile.
.1971	ad fa 19	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.1974	48		               pha                 ; ... à la bonne position sur la pile.
.1975	ae f8 19	               ldx  regs           ; On replace tous les registre à leurs ...
.1978	9a		               txs                 ; ...
.1979	ac f6 19	               ldy  regy           ; ...
.197c	ae f5 19	               ldx  regx           ; ...
.197f	ad f7 19	               lda  regp           ; ...
.1982	48		               pha                 ; ...
.1983	ad f4 19	               lda  rega           ; ...
.1986	28		               plp                 ; ... valeurs initiales
.1987	60		               rts
>1988	07 01 17	srega   .byte   cyellow,coln+1,line
>198b	20 20 41 3a	        .text   '  a:$' ;4,24
>198f	24
>1990	00 00 20 00	vala    .byte   0,0,32,0
>1994	03 09 17	sregx   .byte   ccyan,coln+9,line
>1997	20 58 3a 24	        .text   ' x:$' ;4,24
>199b	00 00 20 00	valx    .byte   0,0,32,0
>199f	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>19a2	20 59 3a 20	        .text   ' y: $' ;4,24
>19a6	24
>19a7	00 00 20 00	valy    .byte   0,0,32,0
>19ab	08 18 17	sregp   .byte   corange,coln+24,line
>19ae	20 50 3a 24	        .text   ' p:$' ;4,24
>19b2	00 00 20 00	valp    .byte   0,0,32,0
>19b6	0a 1f 17	sregs   .byte   clightred,coln+31,line
>19b9	20 53 3a 24	        .text   ' s:$' ;4,24
>19bd	00 00 20 20	vals    .byte   0,0,32,32,0
>19c1	00
>19c2	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>19c6	20 50 43 3a	        .text   ' pc:$' ;4,24
>19ca	24
>19cb	00 00		valpch  .byte   0,0
>19cd	00 00 20 20	valpcl  .byte   0,0,32,32,0
>19d1	00
>19d2	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>19d6	20 5a 50 31	        .text   ' zp1:$' ;4,24
>19da	3a 24
>19dc	00 00		valz1h  .byte   0,0
>19de	00 00 20 20	valz1l  .byte   0,0,32,32,0
>19e2	00
>19e3	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>19e7	20 5a 50 32	        .text   ' zp2:$' ;4,24
>19eb	3a 24
>19ed	00 00		valz2h  .byte   0,0
>19ef	00 00 20 20	valz2l  .byte   0,0,32,32,0
>19f3	00
>19f4	00		rega    .byte   0
>19f5	00		regx    .byte   0
>19f6	00		regy    .byte   0
>19f7	00		regp    .byte   0
>19f8	00		regs    .byte   0
>19f9	00		regpch  .byte   0
>19fa	00		regpcl  .byte   0
>19fb	00		regpch2 .byte   0
>19fc	00		regpcl2 .byte   0
>19fd	00		vzp1h   .byte   0
>19fe	00		vzp1l   .byte   0
>19ff	00		vzp2h   .byte   0
>1a00	00		vzp2l   .byte   0
.1a01			showregsrev
.1a01	20 f2 12	                jsr setinverse     ; On se place en mode inverse vidéo.
.1a04	20 ff 17	                jsr showregs
.1a07	20 fa 12	                jsr clrinverse     ; On quitte le mode inverse vidéo.

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-drawbox.asm

.1a0a			db_tline
.1a0a	08		                php                 ; Sauvegarde les registres.
.1a0b	48		                pha
.1a0c	a9 b0		                lda #tleft          ; Coin suppérieur gauche.
.1a0e	8d cb 1a	                sta db_left
.1a11	a9 c0		                lda #hline          ; Ligne horizontale.
.1a13	8d cd 1a	                sta db_mid
.1a16	a9 ae		                lda #tright         ; Coin suppérieur droit.
.1a18	8d cc 1a	                sta db_right
.1a1b	28		                plp                 ; Récupère les registres.
.1a1c	68		                pla
.1a1d	20 66 1a	                jsr db_drawline
.1a20	60		                rts
.1a21			db_bline
.1a21	08		                php                 ; Sauvegarde les registres.
.1a22	48		                pha
.1a23	a9 ad		                lda #bleft          ; Coin inférieur gauche.
.1a25	8d cb 1a	                sta db_left
.1a28	a9 c0		                lda #hline          ; Ligne horizontale.
.1a2a	8d cd 1a	                sta db_mid
.1a2d	a9 bd		                lda #bright         ; Coin inférieur droit.
.1a2f	8d cc 1a	                sta db_right
.1a32	28		                plp                 ; Récupère les registres.
.1a33	68		                pla
.1a34	20 66 1a	                jsr db_drawline
.1a37	60		                rts
.1a38			db_eline
.1a38	08		                php                 ; Sauvegarde les registres.
.1a39	48		                pha
.1a3a	a9 dd		                lda #vline          ; Ligne verticale.
.1a3c	8d cb 1a	                sta db_left
.1a3f	a9 20		                lda #space          ; Caractère espace.
.1a41	8d cd 1a	                sta db_mid
.1a44	a9 dd		                lda #vline          ; Ligne verticale.
.1a46	8d cc 1a	                sta db_right
.1a49	28		                plp                 ; Récupère les registres.
.1a4a	68		                pla
.1a4b	20 66 1a	                jsr db_drawline
.1a4e	60		                rts
.1a4f			db_hline
.1a4f	08		                php                 ; Sauvegarde les registres.
.1a50	48		                pha
.1a51	a9 ab		                lda #hleft          ; Extrémité gauche d'une ligne médianne.
.1a53	8d cb 1a	                sta db_left
.1a56	a9 c0		                lda #hline          ; Ligne horizontale.
.1a58	8d cd 1a	                sta db_mid
.1a5b	a9 b3		                lda #hright         ; Extrémité droite d'une ligne médianne.
.1a5d	8d cc 1a	                sta db_right
.1a60	28		                plp                 ; Récupère les registres.
.1a61	68		                pla
.1a62	20 66 1a	                jsr db_drawline
.1a65	60		                rts
.1a66			db_drawline
.1a66	20 74 13	                jsr pushreg         ; Sauvegarde les registres.
.1a69	ad 86 02	                lda bascol          ; Sauvegarde de la ...
.1a6c	8d d4 1a	                sta drawbox_bascol  ; ... couleur basic.
.1a6f	ad d2 1a	                lda drawbox_colour  ; Sélectionne la couleur...
.1a72	8d 86 02	                sta bascol          ; ... de la fenêtre.
.1a75	c9 10		                cmp #$10            ; Couleur inverse vidéo?
.1a77	30 05		                bmi noreverse       ; Non ...
.1a79	a9 12		                lda #18             ; Oui on place basic en inverse ...
.1a7b	20 d2 ff	                jsr chrout          ; Vidéo.
.1a7e	ae d3 1a	noreverse       ldx drawbox_curline ; On positionne le curseur au ...
.1a81	ac cf 1a	                ldy drawbox_left    ; ... coin suppérieur gauche ...
.1a84	18		                clc                 ; ... de la fenêtre.
.1a85	20 f0 ff	                jsr plot
.1a88	ad cb 1a	                lda db_left         ; On dessine le premier caractère.
.1a8b	20 d2 ff	                jsr chrout
.1a8e	ad cd 1a	                lda db_mid          ; On dessine la ligne horizontale ...
.1a91	ae d0 1a	                ldx drawbox_width   ; ... selon la largeur voulue ...
.1a94	ca		                dex                 ; ... de la fenêtre moins les ...
.1a95	ca		                dex                 ; ... deux caractères d'extrémité.
.1a96	20 fd 11	                jsr putnch
.1a99	ad cc 1a	                lda db_right        ; On dessine le dernier caractère.
.1a9c	20 d2 ff	                jsr chrout
.1a9f	a9 92		                lda #146            ; On met fin à l'inverse vidéo.
.1aa1	20 d2 ff	                jsr chrout
.1aa4	ad d4 1a	                lda drawbox_bascol  ; On récupère et replace la ...
.1aa7	8d 86 02	                sta bascol          ; ... couleur de basic.
.1aaa	ee d3 1a	                inc drawbox_curline ; Passe à la ligne suivante.
.1aad	20 a3 13	                jsr popreg          ; Récupère les registres.
.1ab0	60		                rts
.1ab1			db_drawbox
.1ab1	20 74 13	                jsr pushreg         ; Sauvegarde les registres.
.1ab4	ae d1 1a	                ldx drawbox_height  ; Récupère la hauteur de la fenètre.
.1ab7	20 0a 1a	                jsr db_tline        ; Dessine la ligne suppérieure.
.1aba	ca		                dex                 ; Soustrait 2 pour tenir compte des ...
.1abb	ca		                dex                 ; lignes suppérieures et inférieures.
.1abc	f0 06		                beq lastline        ; Si 0 pas de ligne vide dans la fenètre.
.1abe	20 38 1a	moreline        jsr db_eline        ; Dessine une ligne vide de la boîte.
.1ac1	ca		                dex                 ; Une ligne de moins à faire.
.1ac2	d0 fa		                bne moreline        ; On passe à la prochaine s'il en reste.
.1ac4	20 21 1a	lastline        jsr db_bline        ; Dessine la ligne inférieure.
.1ac7	20 a3 13	                jsr popreg          ; Récupère les registres.
.1aca	60		                rts
=176			tleft           =       176         ; Coin suppérieur gauche.
=174			tright          =       174         ; Coin suppérieur droit.
=173			bleft           =       173         ; Coin inférieur gauche.
=189			bright          =       189         ; Coin inférieur droit.
=171			hleft           =       171         ; Extrémité gauche d'une ligne médianne.
=179			hright          =       179         ; Extrémité droite d'une ligne médianne.
=221			vline           =       221         ; Ligne verticale.
=192			hline           =       192         ; Ligne horizontale.
=32			space           =       32          ; Caractère espace.
>1acb	00		db_left         .byte   0           ; Caractère Gauche de la ligne courante.
>1acc	00		db_right        .byte   0           ; Caractère droit de la ligne courante.
>1acd	00		db_mid          .byte   0           ; Caractère central de la ligne courante.
>1ace	00		drawbox_top     .byte   0           ; Coordonné du haut de la boite.
>1acf	00		drawbox_left    .byte   0           ; Coordonné de la gauche de la boîte.
>1ad0	00		drawbox_width   .byte   0           ; Largeur de la boîte.
>1ad1	00		drawbox_height  .byte   0           ; Hauteur de la boîte.
>1ad2	00		drawbox_colour  .byte   0           ; Couleur de la boîte.
>1ad3	00		drawbox_curline .byte   0           ; No de la ligne courante à dessiner.
>1ad4	00		drawbox_bascol  .byte   0           ; Case de mémorisation de la couleur Basic.

;******  Return to file: slbug64.asm


;******  End of listing

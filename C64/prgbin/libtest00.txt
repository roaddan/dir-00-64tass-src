
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L libtest00.txt -o libtest00.prg libtest00.asm
; Sun May 25 20:15:12 2025

;Offset	;Hex		;Source

;******  Processing input file: libtest00.asm

="20250525-151829 "	                Version = "20250525-151829 "

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande PRINT du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart     jmp   main           ; Le programme principale doit s'appeler "main"

;******  Return to file: libtest00.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: libtest00.asm

.0854			main
.0854	20 14 c1	               jsr scrmaninit
.0857	08		               php
.0858	48		               pha
.0859	a9 8e		               lda  #b_uppercase
.085b	8d 33 c1	               sta  characterset
.085e	20 d2 ff	               jsr  $ffd2
.0861	68		               pla
.0862	28		               plp
.0863	08		               php
.0864	48		               pha
.0865	a9 8e		               lda  #b_uppercase
.0867	20 d2 ff	               jsr  $ffd2
.086a	68		               pla
.086b	28		               plp
.086c	08		               php
.086d	48		               pha
.086e	a9 08		               lda  #$08
.0870	20 d2 ff	               jsr  $ffd2
.0873	68		               pla
.0874	28		               plp
.0875	20 ce 08	               jsr aide
.0878	20 9b c7	               jsr anykey
.087b	20 b5 c2	               jsr  pushreg
.087e	48		               pha
.087f	a9 05		               lda  #cvert
.0881	8d 20 d0	               sta  $d020
.0884	68		               pla
.0885	48		               pha
.0886	a9 06		               lda  #cbleu
.0888	8d 21 d0	               sta  $d021
.088b	68		               pla
.088c	48		               pha
.088d	a9 01		               lda  #cblanc
.088f	8d 86 02	               sta  bascol
.0892	68		               pla
.0893	20 e4 c2	               jsr  popreg
.0896	a9 05		               lda #$05
.0898	20 46 09	               jsr libtest00
.089b	08		               php
.089c	48		               pha
.089d	a9 09		               lda  #$09
.089f	20 d2 ff	               jsr  $ffd2
.08a2	68		               pla
.08a3	28		               plp
.08a4	08		               php
.08a5	48		               pha
.08a6	a9 8e		               lda  #b_uppercase
.08a8	8d 33 c1	               sta  characterset
.08ab	20 d2 ff	               jsr  $ffd2
.08ae	68		               pla
.08af	28		               plp
.08b0	20 34 c1	               jsr  cls
.08b3	20 b5 c2	               jsr  pushreg
.08b6	48		               pha
.08b7	a9 05		               lda  #cvert
.08b9	8d 20 d0	               sta  $d020
.08bc	68		               pla
.08bd	48		               pha
.08be	a9 06		               lda  #cbleu
.08c0	8d 21 d0	               sta  $d021
.08c3	68		               pla
.08c4	48		               pha
.08c5	a9 01		               lda  #cblanc
.08c7	8d 86 02	               sta  bascol
.08ca	68		               pla
.08cb	20 e4 c2	               jsr  popreg
.08ce			aide
.08ce	08		               php
.08cf	48		               pha
.08d0	a9 0e		               lda  #14
.08d2	8d 33 c1	               sta  characterset
.08d5	20 d2 ff	               jsr  $ffd2
.08d8	68		               pla
.08d9	28		               plp
.08da	20 34 c1	               jsr cls
.08dd	20 b5 c2	               jsr  pushreg
.08e0	a2 e3		               ldx  #<line
.08e2	a0 0a		               ldy  #>line
.08e4	20 51 c1	               jsr  puts
.08e7	20 e4 c2	               jsr  popreg
.08ea	20 b5 c2	               jsr  pushreg
.08ed	a2 86		               ldx  #<headera
.08ef	a0 09		               ldy  #>headera
.08f1	20 51 c1	               jsr  puts
.08f4	20 e4 c2	               jsr  popreg
.08f7	20 b5 c2	               jsr  pushreg
.08fa	a2 ad		               ldx  #<headerb
.08fc	a0 09		               ldy  #>headerb
.08fe	20 51 c1	               jsr  puts
.0901	20 e4 c2	               jsr  popreg
.0904	20 b5 c2	               jsr  pushreg
.0907	a2 e3		               ldx  #<line
.0909	a0 0a		               ldy  #>line
.090b	20 51 c1	               jsr  puts
.090e	20 e4 c2	               jsr  popreg
.0911	20 b5 c2	               jsr  pushreg
.0914	a2 e3		               ldx  #<line
.0916	a0 0a		               ldy  #>line
.0918	20 51 c1	               jsr  puts
.091b	20 e4 c2	               jsr  popreg
.091e	20 b5 c2	               jsr  pushreg
.0921	a2 09		               ldx  #<shortcuts
.0923	a0 0a		               ldy  #>shortcuts
.0925	20 51 c1	               jsr  puts
.0928	20 e4 c2	               jsr  popreg
.092b	20 b5 c2	               jsr  pushreg
.092e	a2 8f		               ldx  #<aidetext
.0930	a0 0a		               ldy  #>aidetext
.0932	20 51 c1	               jsr  puts
.0935	20 e4 c2	               jsr  popreg
.0938	20 b5 c2	               jsr  pushreg
.093b	a2 e3		               ldx  #<line
.093d	a0 0a		               ldy  #>line
.093f	20 51 c1	               jsr  puts
.0942	20 e4 c2	               jsr  popreg
.0945	60		               rts
.0946			libtest00
.0946	08		               php
.0947	48		               pha
.0948	20 34 c1	               jsr  cls
.094b	a9 a6		               lda  #166
.094d	48		nexta          pha
.094e	20 b5 c2	               jsr  pushreg
.0951	a2 0c		               ldx  #<dataloc
.0953	a0 0b		               ldy  #>dataloc
.0955	20 de c1	               jsr  putscxy
.0958	20 e4 c2	               jsr  popreg
.095b	48		               pha
.095c	a9 03		               lda  #ccyan
.095e	8d 86 02	               sta  bascol
.0961	68		               pla
.0962	48		               pha
.0963	a9 ff		               lda  #<$0000+(65535)
.0965	8d 3b c5	               sta  loopcount
.0968	a9 ff		               lda  #>$0000+(65535)
.096a	8d 3c c5	               sta  loopcount+1
.096d	68		               pla
.096e	20 34 c1	               jsr  cls
.0971	20 1b c8	               jsr  showregs
.0974	20 31 c3	roll           jsr  bmtester
.0977	20 70 c4	               jsr  inczp1
.097a	20 97 c4	               jsr  deczp2
.097d	20 1b c5	               jsr  loop
.0980	d0 f2		               bne  roll
.0982	68		out            pla
.0983	28		               plp
.0984	60		               rts
>0985	a6		car            .byte     166

;******  Processing file: strings_fr.asm

.0986			headera
>0986	13 1d 1d 1d	               .byte     b_home,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right
>098a	1d
>098b	20 c3 4f 4d	               .text              " Commodore 64 test de libraries "
>098f	4d 4f 44 4f 52 45 20 36 34 20 54 45 53 54 20 44
>099f	45 20 4c 49 42 52 41 52 49 45 53 20
>09ab	0d 00		               .byte     $0d,0
>09ad	20 20 20 20	headerb        .text          "               libtest00 "
>09b1	20 20 20 20 20 20 20 20 20 20 20 4c 49 42 54 45
>09c1	53 54 30 30 20
>09c6	0d		               .byte     $0d
>09c7	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>09cb	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>09db	45 4c 20 cc 41 46 52 41 4e 43 45
>09e6	0d		               .byte     $0d
>09e7	20 20 20 20	               .text   format("       Version: %s",Version)
>09eb	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>09fb	30 35 32 35 2d 31 35 31 38 32 39 20
>0a07	0d 00		               .byte     $0d,0
>0a09	0d		shortcuts      .byte     $0d
>0a0a	91 91		               .byte     ucurkey,ucurkey
>0a0c	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>0a10	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>0a14	1d
>0a15	20 d2 20 c1	               .text          " R A C C O U R C I S "
>0a19	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>0a29	20
>0a2a	0d		               .byte     $0d
>0a2b	20 4c 49 42	               .text   format(" libtest00: SYS%05d (jsr $%04X)",main, main)
>0a2f	54 45 53 54 30 30 3a 20 d3 d9 d3 30 32 31 33 32
>0a3f	20 28 4a 53 52 20 24 30 38 35 34 29
>0a4b	0d		               .byte     $0d
>0a4c	20 41 49 44	               .text   format(" aide.....: SYS%05d (jsr $%04X)",aide, aide)
>0a50	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 32 35 34
>0a60	20 28 4a 53 52 20 24 30 38 c3 c5 29
>0a6c	0d		               .byte     $0d
>0a6d	20 43 4c 53	               .text   format(" cls......: SYS%05d (jsr $%04X)",cls, cls)
>0a71	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34 39 34 36 30
>0a81	20 28 4a 53 52 20 24 c3 31 33 34 29
>0a8d	0d 00		               .byte     $0d,0
>0a8f	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d (jsr $%04X)",libtest00, libtest00)
>0a93	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 33 37 34
>0aa3	20 28 4a 53 52 20 24 30 39 34 36 29
>0aaf	0d 0d		               .byte     $0d, $0d
>0ab1	20 20 20 20	                .text   format("    ex.: SYS%05d",libtest00)
>0ab5	45 58 2e 3a 20 d3 d9 d3 30 32 33 37 34
>0ac2	0d		                .byte     $0d
>0ac3	20 20 20 20	                .text   format("    for i=0to100:SYS%05d:next",libtest00)
>0ac7	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0ad7	30 32 33 37 34 3a 4e 45 58 54
>0ae1	0d 00		                .byte     $0d,0
>0ae3	20 c0 c0 c0	line            .byte     $20,192,192,192,192,192,192,192,192,192
>0ae7	c0 c0 c0 c0 c0 c0
>0aed	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>0af1	c0 c0 c0 c0 c0 c0
>0af7	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>0afb	c0 c0 c0 c0 c0 c0
>0b01	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192
>0b05	c0 c0 c0 c0 c0
>0b0a	0d 00		                .byte     $0d,0
>0b0c	01 00 00 00	dataloc         .byte       1,0,0,0

;******  Return to file: libtest00.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>c000	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>c004	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.c008			libtart

;******  Return to file: libtest00.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: libtest00.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.c008			screendis
.c008	08		               php
.c009	48		               pha
.c00a	ad 11 d0	               lda  $d011
.c00d	29 ef		               and  #%11101111
.c00f	8d 11 d0	               sta  $d011
.c012	68		               pla
.c013	28		               plp
.c014	60		               rts
.c015			screenena
.c015	08		               php
.c016	48		               pha
.c017	ad 11 d0	               lda  $d011
.c01a	09 10		               ora  #%00010000
.c01c	8d 11 d0	               sta  $d011
.c01f	68		               pla
.c020	28		               plp
.c021	60		               rts
=8192			bmpram = 8192
.c022			victohighres
.c022	08		               php
.c023	48		               pha
.c024	ad 11 d0	               lda  vicmiscfnc
.c027	09 20		               ora  #%00100000     ; 32
.c029	8d 11 d0	               sta  vicmiscfnc
.c02c	ad 18 d0	               lda  vicmemptr
.c02f	09 08		               ora  #%00001000     ; $08
.c031	8d 18 d0	               sta  vicmemptr
.c034	a9 ff		               lda  #$ff           ; 255
.c036	85 37		               sta  $0037
.c038	a9 1f		               lda  #$1f           ; 31
.c03a	85 38		               sta  $0038
.c03c	68		               pla
.c03d	28		               plp
.c03e	60		               rts
.c03f			victonormal
.c03f	08		               php
.c040	48		               pha
.c041	ad 11 d0	               lda  vicmiscfnc
.c044	29 df		               and  #%11011111     ; 233
.c046	8d 11 d0	               sta  vicmiscfnc
.c049	ad 18 d0	               lda  vicmemptr
.c04c	29 f7		               and  #%11110111     ; $08
.c04e	8d 18 d0	               sta  vicmemptr
.c051	a9 00		               lda  #$00
.c053	85 37		               sta  $0037
.c055	a9 a0		               lda  #$a0
.c057	85 38		               sta  $0038
.c059	20 34 c1	               jsr  cls
.c05c	68		               pla
.c05d	28		               plp
.c05e	60		               rts
.c05f			vicbmpclear
.c05f	20 47 c2	               jsr  push
.c062	a9 04		               lda  #cmauve
.c064	20 8d c0	               jsr  setvicbmpbackcol
.c067	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.c069	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.c06b	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.c06d	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.c06f	48		               pha
.c070	a9 ff		               lda  #<$0000+(8191)
.c072	8d 3b c5	               sta  loopcount
.c075	a9 1f		               lda  #>$0000+(8191)
.c077	8d 3c c5	               sta  loopcount+1
.c07a	68		               pla
.c07b	a0 00		               ldy  #$00
.c07d	a9 0f		next           lda  #$0f
.c07f	91 fb		               sta  (zpage1),y
.c081	20 70 c4	               jsr  inczpage1
.c084	20 1b c5	               jsr  loop
.c087	d0 f4		               bne  next
.c089	20 82 c2	               jsr  pop
.c08c	60		               rts
.c08d			setvicbmpbackcol
.c08d	20 47 c2	               jsr  push
.c090	29 0f		               and  #$0f
.c092	8d c0 c0	               sta  vicbmpbackcol
.c095	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.c097	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.c099	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.c09b	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.c09d	48		               pha
.c09e	a9 00		               lda  #<$0000+(1024)
.c0a0	8d 3b c5	               sta  loopcount
.c0a3	a9 04		               lda  #>$0000+(1024)
.c0a5	8d 3c c5	               sta  loopcount+1
.c0a8	68		               pla
.c0a9	a0 00		               ldy  #$00
.c0ab	b1 fb		next           lda  (zpage1),y
.c0ad	29 f0		               and  #$f0
.c0af	0d c0 c0	               ora  vicbmpbackcol
.c0b2	91 fb		               sta  (zpage1),y
.c0b4	20 70 c4	               jsr  inczpage1
.c0b7	20 1b c5	               jsr  loop
.c0ba	d0 ef		               bne  next
.c0bc	20 82 c2	               jsr  pop
.c0bf	60		               rts
>c0c0	00		vicbmpbackcol  .byte     $00
.c0c1			setvicbmpforecol
.c0c1	20 47 c2	               jsr  push
.c0c4	2a		               rol
.c0c5	2a		               rol
.c0c6	2a		               rol
.c0c7	2a		               rol
.c0c8	29 f0		               and  #$f0
.c0ca	8d f8 c0	               sta  vicbmpforecol
.c0cd	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.c0cf	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.c0d1	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.c0d3	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.c0d5	48		               pha
.c0d6	a9 00		               lda  #<$0000+(1024)
.c0d8	8d 3b c5	               sta  loopcount
.c0db	a9 04		               lda  #>$0000+(1024)
.c0dd	8d 3c c5	               sta  loopcount+1
.c0e0	68		               pla
.c0e1	a0 00		               ldy  #$00
.c0e3	b1 fb		next           lda  (zpage1),y
.c0e5	29 0f		               and  #$0f
.c0e7	0d f8 c0	               ora  vicbmpforecol
.c0ea	91 fb		               sta  (zpage1),y
.c0ec	20 70 c4	               jsr  inczpage1
.c0ef	20 1b c5	               jsr  loop
.c0f2	d0 ef		               bne  next
.c0f4	20 82 c2	               jsr  pop
.c0f7	60		               rts
>c0f8	00		vicbmpforecol  .byte     $00
.c0f9			bmphrcalccoords
.c0f9	20 47 c2	               jsr  push
.c0fc	18		               clc       ; On met Carry à 0
.c0fd	6a		               ror       ; le bit 0 de a dans carry  ?/2
.c0fe	8a		               txa       ; x dans a
.c0ff	4a		               lsr       ; ?/4
.c100	4a		               lsr       ; ?/8 a = (ax)/8
.c101	8d 12 c1	               sta  bmphrcol
.c104	98		               tya       ; Y dans a
.c105	4a		               lsr       ; ?/2
.c106	4a		               lsr       ; ?/4
.c107	4a		               lsr       ; ?/8 a=Y/8
.c108	8d 11 c1	               sta  bmphrrow
.c10b	48		               pha
.c10c	98		               tya
.c10d	20 82 c2	               jsr  pop
.c110	60		               rts
.c111			vicbmpfill
>c111	00		bmphrrow       .byte     $00
>c112	00		bmphrcol       .byte     $00
>c113	00		bmphrmask      .byte     $00

;******  Return to file: libtest00.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: libtest00.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.c114			scrmaninit
.c114	20 b5 c2	               jsr  pushreg        ; Sauvegarde tous les registres
.c117	20 08 c0	               jsr  screendis      ; Disable screen
.c11a	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.c11c	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.c11f	a9 05		               lda  #vvert         ; vert pour la couleur
.c121	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.c124	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.c126	8d 86 02	               sta  bascol         ; texte.
.c129	20 34 c1	               jsr  cls            ; Efface l'écran.
.c12c	20 15 c0	               jsr  screenena      ; enable screen
.c12f	20 e4 c2	               jsr  popreg         ; Récupère tous les registres.
.c132	60		               rts
>c133	8e		characterset   .byte b_uppercase
.c134			cls
.c134	08		               php                 ; Sauvegarde les registres
.c135	48		               pha                 ;   modifiés.
.c136	a9 93		               lda  #$93           ; Affiche le code basic de
.c138	20 4b c1	               jsr  putch          ;   d'effacement d'écran.
.c13b	68		               pla                 ; Récupère les registres
.c13c	28		               plp                 ;   modifiés.
.c13d	60		               rts
.c13e			putnch
.c13e	20 b5 c2	               jsr  pushreg        ; Sauvegarde tous les registres.
.c141	20 d2 ff	again          jsr  $ffd2          ; On affiche A.
.c144	ca		               dex                 ; Un de moins à faire.
.c145	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.c147	20 e4 c2	out            jsr  popreg         ; Récupère tous les registres.
.c14a	60		               rts
.c14b			putch
.c14b	08		               php                 ; Sauvegarde le registre de status.
.c14c	20 d2 ff	               jsr  $ffd2          ; Affiche le caractère de Acc.
.c14f	28		               plp                 ; Récupère le registre de status.
.c150	60		               rts
.c151			puts
.c151	20 47 c2	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.c154	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.c156	84 fc		               sty  zpage1+1       ;   dans ZP1.
.c158	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.c15a	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.c15c	f0 09		               beq  exit           ; Si $00 on sort.
.c15e	20 4b c1	               jsr  putch          ; Affiche le caractères.
.c161	20 70 c4	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c164	4c 5a c1	               jmp  next           ; Saute chercher le prochain carac.
.c167	20 82 c2	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.c16a	60		               rts
.c16b			gotoxy
.c16b	08		               php                 ; Sauvegarde le registre de
.c16c	48		               pha                 ;   status et le registre a.
.c16d	18		               clc                 ; Carry = 1 pour que kplot
.c16e	8a		               txa                 ;   positionne le curseur.
.c16f	48		               pha                 ; On inverse X et Y pcq kplot
.c170	98		               tya                 ;
.c171	aa		               tax                 ;   prend X comme la ligne
.c172	68		               pla                 ;
.c173	a8		               tay                 ;   et Y comme la colonne.
.c174	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.c177	68		               pla                 ; Récupère le registre a et
.c178	28		               plp                 ;   le registre de status.
.c179	60		               rts
.c17a			cursor
=$0286			bascol    =    $0286               ; debugme
.c17a	20 b5 c2	               jsr  pushreg        ; Sauvegarde tous les registres.
.c17d	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.c17f	20 f0 ff	               jsr  kplot          ; On récupère la position du
.c182	8c a4 c1	               sty  cx             ;   curseur et on la sauvegarde
.c185	8e a5 c1	               stx  cy             ;   dans les vars locales.
.c188	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.c18b	8d a6 c1	               sta  bcol           ; BASIC du texte.
.c18e	4c a0 c1	               jmp  out            ; c'est fini on sort.
.c191	ae a5 c1	restore        ldx  cy             ; Comme C=1, On charge x avec
.c194	ac a4 c1	               ldy  cx             ;   la ligne, y ace  la col.
.c197	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.c19a	ad a6 c1	               lda  bcol           ; On replace la couleur par basic
.c19d	8d 86 02	               sta  bascol         ;   sauvegardé.
.c1a0	20 e4 c2	out            jsr  popreg         ; Récupère tous les registres.
.c1a3	60		               rts
>c1a4	00		cx   .byte     $00
>c1a5	00		cy   .byte     $00
>c1a6	00		bcol .byte     $00
.c1a7			cursave
.c1a7	08		               php
.c1a8	38		               sec
.c1a9	20 7a c1	               jsr  cursor         ; Voir cette fonction plus haut.
.c1ac	28		               plp
.c1ad	60		               rts
.c1ae			curput
.c1ae	08		               php
.c1af	18		               clc
.c1b0	20 7a c1	               jsr  cursor         ; Voir cette fonction plus haut.
.c1b3	28		               plp
.c1b4	60		               rts
.c1b5			putsxy
.c1b5	20 47 c2	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.c1b8	86 fb		               stx  zpage1         ; On place la position de la
.c1ba	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.c1bc	a0 00		               ldy  #$00           ; On charge l'index à 0.
.c1be	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.c1c0	aa		               tax                 ;   dans X.
.c1c1	20 70 c4	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c1c4	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.c1c6	a8		               tay                 ; dans Y.
.c1c7	20 6b c1	               jsr  gotoxy         ; on positionne le curseur.
.c1ca	20 70 c4	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c1cd	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.c1cf	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.c1d1	20 51 c1	               jsr  puts           ;   l'affiche.
.c1d4	20 82 c2	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.c1d7	60		               rts
>c1d8	00 00		straddr   .word     $00
>c1da	00		px        .byte     $00
>c1db	00		py        .byte     $00
>c1dc	00 00		zp1       .word     $00
.c1de			putscxy
.c1de	20 47 c2	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.c1e1	86 fb		               stx  zpage1         ; On place la position de la
.c1e3	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.c1e5	a0 00		               ldy  #$00           ; On charge l'index à 0.
.c1e7	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.c1ea	48		               pha                 ;   actuelle de basic.
.c1eb	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.c1ed	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.c1f0	20 70 c4	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c1f3	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.c1f5	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.c1f7	20 b5 c1	               jsr  putsxy         ;   l'affiche.
.c1fa	68		               pla                 ; On replace la couleur basic
.c1fb	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.c1fe	20 82 c2	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.c201	60		               rts
.c202			putrahex
.c202	20 b5 c2	               jsr  pushreg        ; Sauvegarde tous les registres.
.c205	20 a3 c5	               jsr  atohex         ; Conversion de a chaîne hexa.
.c208	a2 42		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.c20a	a0 c5		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.c20c	20 51 c1	               jsr  puts           ; Affiche la chaîne.
.c20f	20 e4 c2	               jsr  popreg         ; Récupère tous les registres.
.c212	60		               rts
.c213			kputrahexxy
.c213			bputrahexxy
.c213			putrahexxy
.c213	08		               php                 ; Sauvegarde le registre de
.c214	48		               pha                 ;   status et le registre a.
.c215	20 a3 c5	               jsr  atohex         ; Convertion de a en hexadécimal.
.c218	a2 3f		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.c21a	a0 c5		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.c21c	20 b5 c1	               jsr  putsxy         ; Positionne et affiche la chaîne.
.c21f	68		               pla                 ; Récupère le registre a et
.c220	28		               plp                 ;   le registre de status.
.c221	60		               rts
.c222			putrahexcxy
.c222	20 b5 c2	               jsr  pushreg        ; Sauvegarde tous les registres.
.c225	20 a3 c5	               jsr  atohex         ; Convertion de a en hexadécimal.
.c228	a2 3f		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.c22a	a0 c5		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.c22c	20 b5 c1	               jsr  putsxy         ; Colore, positionne et affiche la
.c22f	20 e4 c2	               jsr  popreg         ; Récupère tous les registres.
.c232	60		               rts
.c233			setinverse
.c233	48		               pha
.c234	a9 12		               lda  #$12
.c236	20 d2 ff	               jsr  $ffd2
.c239	68		               pla
.c23a	60		               rts
.c23b			clrinverse
.c23b	48		               pha
.c23c	a9 92		               lda  #$92
.c23e	20 d2 ff	               jsr  $ffd2
.c241	68		               pla
.c242	60		               rts

;******  Return to file: libtest00.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>c243	00		rp        .byte     0
>c244	00		ra        .byte     0
>c245	00 00		pc        .word     0
.c247			pushall
.c247			push
.c247	08		          php            ; stack : flg, pcl, pch
.c248	78		          sei
.c249	8d 44 c2	          sta  ra        ; save a
.c24c	68		          pla            ; stack : pcl, pch
.c24d	8d 43 c2	          sta  rp        ; save rp
.c250	68		          pla            ; stack : pch
.c251	8d 45 c2	          sta  pc        ; save pcl
.c254	68		          pla            ; stack : -
.c255	8d 46 c2	          sta  pc+1      ; save pch
.c258	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c25a	48		          pha            ; stack : zp1l
.c25b	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c25d	48		          pha            ; stack : zp1h, zp1l
.c25e	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c260	48		          pha            ; stack : zp2l, zp1h, zp1l
.c261	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c263	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c264	ad 43 c2	          lda  rp        ; get rp
.c267	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c268	ad 44 c2	          lda  ra        ; get a
.c26b	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c26c	8a		          txa            ; get x
.c26d	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c26e	98		          tya            ; get y
.c26f	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c270	ad 46 c2	          lda  pc+1      ; get pch
.c273	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c274	ad 45 c2	          lda  pc        ; get pcl
.c277	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c278	ad 43 c2	          lda  rp        ; get rp
.c27b	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c27c	ad 44 c2	          lda  ra        ; get a
.c27f	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c280	58		          cli
.c281	60		          rts
.c282			pullall
.c282			pull
.c282			popall
.c282			pop
.c282	78		          sei
.c283	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c284	8d 45 c2	          sta  pc        ; save pcl
.c287	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c288	8d 46 c2	          sta  pc+1      ; save pch
.c28b	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c28c	a8		          tay            ; set y
.c28d	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c28e	aa		          tax            ; set x
.c28f	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c290	8d 44 c2	          sta  ra        ; save a
.c293	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c294	8d 43 c2	          sta  rp        ; save rp
.c297	68		          pla            ; stack : zp2l, zp1h, zp1l
.c298	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c29a	68		          pla            ; stack : zp1h, zp1l
.c29b	85 fd		          sta  zpage2    ; get zpage2 High byte
.c29d	68		          pla            ; stack : zp1l
.c29e	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c2a0	68		          pla            ; stack :
.c2a1	85 fb		          sta  zpage1    ; get zpage1 High byte
.c2a3	ad 46 c2	          lda  pc+1      ; get pch
.c2a6	48		          pha            ; stack : pch
.c2a7	ad 45 c2	          lda  pc
.c2aa	48		          pha            ; stack : pcl, pch
.c2ab	ad 43 c2	          lda  rp        ; get rp
.c2ae	48		          pha            ; stack : rp, pcl, pch
.c2af	ad 44 c2	          lda  ra        ; set ra
.c2b2	58		          cli
.c2b3	28		          plp            ; stack : pcl, pch
.c2b4	60		          rts
.c2b5			pushreg
.c2b5	08		          php            ; stack : flg, pcl, pch
.c2b6	78		          sei
.c2b7	8d 44 c2	          sta  ra        ; save a
.c2ba	68		          pla            ; stack : pcl, pch
.c2bb	8d 43 c2	          sta  rp        ; save rp
.c2be	68		          pla            ; stack : pch
.c2bf	8d 45 c2	          sta  pc        ; save pcl
.c2c2	68		          pla            ; stack : -
.c2c3	8d 46 c2	          sta  pc+1      ; save pch
.c2c6	ad 43 c2	          lda  rp        ; get rp
.c2c9	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c2ca	ad 44 c2	          lda  ra        ; get a
.c2cd	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c2ce	8a		          txa            ; get x
.c2cf	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2d0	98		          tya            ; get y
.c2d1	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2d2	ad 46 c2	          lda  pc+1      ; get pch
.c2d5	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2d6	ad 45 c2	          lda  pc        ; get pcl
.c2d9	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2da	ad 43 c2	          lda  rp        ; get rp
.c2dd	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2de	ad 44 c2	          lda  ra        ; get a
.c2e1	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2e2	58		          cli
.c2e3	60		          rts
.c2e4			pullreg
.c2e4			popreg
.c2e4	78		          sei
.c2e5	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2e6	8d 45 c2	          sta  pc        ; save pcl
.c2e9	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2ea	8d 46 c2	          sta  pc+1      ; save pch
.c2ed	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2ee	a8		          tay            ; set y
.c2ef	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c2f0	aa		          tax            ; set x
.c2f1	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c2f2	8d 44 c2	          sta  ra        ; save a
.c2f5	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c2f6	8d 43 c2	          sta  rp        ; save rp
.c2f9	ad 46 c2	          lda  pc+1      ; get pch
.c2fc	48		          pha            ; stack : pch
.c2fd	ad 45 c2	          lda  pc
.c300	48		          pha            ; stack : pcl, pch
.c301	ad 43 c2	          lda  rp        ; get rp
.c304	48		          pha            ; stack : rp, pcl, pch
.c305	ad 44 c2	          lda  ra        ; set ra
.c308	58		          cli
.c309	28		          plp            ; stack : pcl, pch
.c30a	60		          rts

;******  Return to file: libtest00.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-binmath.asm

>c30b	00 00		bmnum0         .word     $0000
>c30d	00 00		bmnum1         .word     $0000
>c30f	00 00		bmnum2         .word     $0000
>c311	00		bmovfl         .byte     $00
.c312			bmaddacc
.c312	08		               php
.c313	48		               pha
.c314	a9 00		               lda  #$00
.c316	8d 11 c3	               sta  bmovfl
.c319	68		               pla
.c31a	48		               pha
.c31b	18		               clc
.c31c	6d 0b c3	               adc  bmnum0
.c31f	8d 0b c3	               sta  bmnum0
.c322	90 03		               bcc  norep
.c324	ee 0c c3	               inc  bmnum0+1
.c327	90 05		norep          bcc  norep2
.c329	a9 01		               lda  #$01
.c32b	8d 11 c3	               sta  bmovfl
.c32e	68		norep2         pla
.c32f	28		               plp
.c330	60		               rts
.c331			bmtester
.c331	20 b5 c2	               jsr  pushreg
.c334	a9 01		               lda  #1
.c336	20 12 c3	               jsr  bmaddacc
.c339	ac 0b c3	               ldy  bmnum0
.c33c	ae 0c c3	               ldx  bmnum0+1
.c33f	ad 11 c3	               lda  bmovfl
.c342	20 1b c8	               jsr  showregs
.c345	20 e4 c2	               jsr  popreg
.c348	60		               rts
.c349			add2word
.c349	20 47 c2	               jsr  pushall
.c34c	84 fc		               sty  zpage1+1
.c34e	86 fb		               stx  zpage1
.c350	20 82 c2	               jsr  popall
.c353	60		               rts
.c354			add2word2
.c354	20 b5 c2	               jsr  pushreg
.c357	8c 7b c3	               sty adddo+1     ; LSB
.c35a	8c 7e c3	               sty adddo2+1    ; LSB
.c35d	8c 83 c3	               sty addrep+1    ; LSB
.c360	8e 7c c3	               stx adddo+2     ; MSB
.c363	8e 7f c3	               stx adddo2+2    ; MSB
.c366	8e 84 c3	               stx addrep+2    ; MSB
.c369	48		               pha             ; Sauve
.c36a	18		               clc
.c36b	a9 01		               lda #$01
.c36d	6d 83 c3	               adc addrep+1    ; LSB+1
.c370	8d 83 c3	               sta addrep+1
.c373	90 03		               bcc addsamepage
.c375	ee 84 c3	               inc addrep+2    ; MSB+1
.c378			addsamepage
.c378	68		               pla
.c379	18		               clc
.c37a	6d ff ff	adddo          adc $ffff
.c37d	8d ff ff	adddo2         sta $ffff
.c380	90 03		               bcc addnorep
.c382	ee ff ff	addrep         inc $ffff
.c385	20 82 c2	addnorep       jsr pop
.c388	60		               rts
.c389			sub2word2
.c389	20 b5 c2	               jsr pushreg
.c38c	8c c2 c3	               sty subdo+1     ; LSB
.c38f	8c c7 c3	               sty subdo2+1    ; LSB
.c392	8c cc c3	               sty subrep+1    ; LSB
.c395	8c d1 c3	               sty subrep2+1   ; LSB
.c398	8e c3 c3	               stx subdo+2     ; MSB
.c39b	8e c8 c3	               stx subdo2+2    ; MSB
.c39e	8e cd c3	               stx subrep+2    ; MSB
.c3a1	8e d2 c3	               stx subrep2+2   ; MSB
.c3a4	8d c5 c3	               sta subdo+4     ; Sauve
.c3a7	18		               clc
.c3a8	a9 01		               lda #$01
.c3aa	6d cc c3	               adc subrep+1    ; LSB+1
.c3ad	8d cc c3	               sta subrep+1
.c3b0	8d d1 c3	               sta subrep2+1
.c3b3	90 09		               bcc subsamepage
.c3b5	ee cd c3	               inc subrep+2    ; MSB+1
.c3b8	ad cd c3	               lda subrep+2
.c3bb	8d d2 c3	               sta subrep2+2
.c3be	00		subsamepage    brk
.c3bf	68		               pla
.c3c0	38		               sec
.c3c1	ad ff ff	subdo          lda $ffff       ; LSB-1
.c3c4	e9 ff		               sbc #$ff
.c3c6	8d ff ff	subdo2         sta $ffff
.c3c9	90 08		               bcc subnorep
.c3cb	ad ff ff	subrep         lda $ffff
.c3ce	e9 00		               sbc #$00        ; MSB-1
.c3d0	8d ff ff	subrep2        sta $ffff
.c3d3	ae de c3	subnorep       ldx memcount+1
.c3d6	ac dd c3	               ldy memcount
.c3d9	20 e4 c2	               jsr popreg
.c3dc	60		               rts
>c3dd	00 00		memcount       .word $00

;******  Return to file: libtest00.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c3df			blkfill
.c3df	20 47 c2	bf0            jsr  push
.c3e2	20 a6 c4	               jsr  savezp1
.c3e5	84 fc		               sty  zpage1+1
.c3e7	a0 00		               ldy  #$00
.c3e9	84 fb		               sty  zpage1
.c3eb	91 fb		bf1            sta  (zpage1),y
.c3ed	c8		               iny
.c3ee	d0 fb		               bne  bf1
.c3f0	20 b5 c4	               jsr  restzp1
.c3f3	20 82 c2	               jsr  pop
.c3f6	60		               rts
.c3f7			memfill
.c3f7	20 47 c2	               jsr  push
.c3fa	20 df c3	mf1            jsr  blkfill
.c3fd	c8		               iny
.c3fe	ca		               dex
.c3ff	d0 f9		               bne  mf1
.c401	20 82 c2	               jsr  pop
.c404	60		               rts
.c405			memmove
.c405	20 47 c2	               jsr  push
.c408	ba		               tsx            ; On se crée un pointeur ...
.c409	8a		               txa
.c40a	18		               clc
.c40b	69 0b		               adc  #11
.c40d	a8		               tay
.c40e	a2 06		               ldx  #$06
.c410	b9 00 01	nextbyte       lda  $0100,y
.c413	99 5f c4	               sta  words,y
.c416	c8		               iny
.c417	ca		               dex
.c418	d0 f6		               bne  nextbyte
.c41a	ad 5f c4	               lda  s
.c41d	8d 36 c4	               sta  source+1
.c420	ad 60 c4	               lda  s+1
.c423	8d 37 c4	               sta  source+2
.c426	ad 61 c4	               lda  d
.c429	8d 33 c4	               sta  destin+1
.c42c	ad 62 c4	               lda  d+1
.c42f	8d 34 c4	               sta  destin+2
.c432	ad ff ff	destin         lda  $ffff
.c435	8d ff ff	source         sta  $ffff
.c438	ee 33 c4	               inc  destin+1
.c43b	d0 03		               bne  src
.c43d	ee 34 c4	               inc  destin+2
.c440	ee 36 c4	src            inc  source+1
.c443	d0 03		               bne  cnt
.c445	ee 37 c4	               inc  source+2
.c448	ad 63 c4	cnt            lda  compte
.c44b	d0 08		               bne  decit
.c44d	ad 64 c4	               lda  compte+1
.c450	f0 09		               beq  fini
.c452	ce 64 c4	               dec  compte+1
.c455	ce 63 c4	decit          dec  compte
.c458	4c 32 c4	               jmp  destin
.c45b	20 82 c2	fini           jsr  pop
.c45e	60		               rts
.c45f			words
>c45f	00 00		s         .word     $0000
>c461	00 00		d         .word     $0000
>c463	00 00		compte    .word     $0000
.c465			decword
.c465	20 47 c2	               jsr  push
.c468	86 fd		               stx  zpage2
.c46a	84 fe		               sty  zpage2+1
.c46c	20 82 c2	               jsr  pop
.c46f	60		               rts
.c470			inczpage1
.c470			inczp1
.c470	08		               php
.c471	48		               pha
.c472	e6 fb		               inc  zpage1
.c474	a5 fb		               lda  zpage1
.c476	d0 02		               bne  nopage
.c478	e6 fc		               inc  zpage1+1
.c47a	68		nopage         pla
.c47b	28		               plp
.c47c	60		               rts
.c47d			deczpage1
.c47d			deczp1
.c47d	08		                php
.c47e	48		                pha
.c47f	c6 fb		                dec  zpage1
.c481	b0 02		                bcs  report
.c483	d0 02		                bne  nopage
.c485	c6 fc		report          dec  zpage1+1
.c487	68		nopage          pla
.c488	28		                plp
.c489	60		                rts
.c48a			inczpage2
.c48a			inczp2
.c48a	08		               php
.c48b	48		               pha
.c48c	e6 fd		               inc  zpage2
.c48e	a5 fd		               lda  zpage2
.c490	d0 02		               bne  nopage
.c492	e6 fe		               inc  zpage2+1
.c494	68		nopage         pla
.c495	28		               plp
.c496	60		               rts
.c497			deczpage2
.c497			deczp2
.c497	08		               php
.c498	c6 fd		               dec  zpage2
.c49a	a5 fd		               lda  zpage2
.c49c	c9 ff		               cmp  #$ff
.c49e	f0 02		               beq  report
.c4a0	d0 02		               bne  nopage
.c4a2	c6 fe		report         dec  zpage2+1
.c4a4	28		nopage         plp
.c4a5	60		               rts
.c4a6			savezp1
.c4a6	08		               php
.c4a7	48		               pha
.c4a8	a5 fb		               lda  zpage1
.c4aa	8d 37 c5	               sta  zp1
.c4ad	a5 fc		               lda  zpage1+1
.c4af	8d 38 c5	               sta  zp1+1
.c4b2	68		               pla
.c4b3	28		               plp
.c4b4	60		               rts
.c4b5			restzp1
.c4b5	08		               php
.c4b6	48		               pha
.c4b7	ad 37 c5	               lda zp1
.c4ba	85 fb		               sta zpage1
.c4bc	ad 38 c5	               lda zp1+1
.c4bf	85 fc		               sta zpage1+1
.c4c1	68		               pla
.c4c2	28		               plp
.c4c3	60		               rts
.c4c4			savezp2
.c4c4	08		         php
.c4c5	48		         pha
.c4c6	a5 fd		         lda zpage2
.c4c8	8d 39 c5	         sta zp2
.c4cb	a5 fe		         lda zpage2+1
.c4cd	8d 3a c5	         sta zp2+1
.c4d0	68		         pla
.c4d1	28		         plp
.c4d2	60		         rts
.c4d3			restzp2
.c4d3	08		                php
.c4d4	48		                pha
.c4d5	ad 39 c5	                lda  zp2
.c4d8	85 fd		                sta  zpage2
.c4da	ad 3a c5	                lda  zp2+1
.c4dd	85 fe		                sta  zpage2+1
.c4df	68		                pla
.c4e0	28		                plp
.c4e1	60		                rts
.c4e2			xy2addr
.c4e2	08		                php
.c4e3	48		                pha
.c4e4	8a		                txa
.c4e5	48		                pha
.c4e6	98		                tya
.c4e7	48		                pha
.c4e8	ad 32 c5	                lda     addr1+1
.c4eb	8d 34 c5	                sta     addr2+1
.c4ee	ad 31 c5	                lda     addr1
.c4f1	8d 33 c5	                sta     addr2
.c4f4	c0 00		                cpy     #$00
.c4f6	f0 0f		                beq     addx
.c4f8	18		moreline        clc
.c4f9	6d 30 c5	                adc     ymult
.c4fc	90 03		                bcc     norepy
.c4fe	ee 34 c5	                inc     addr2+1
.c501	8d 33 c5	norepy          sta     addr2
.c504	88		                dey
.c505	d0 f1		                bne     moreline
.c507	8a		addx            txa
.c508	18		                clc
.c509	6d 33 c5	                adc     addr2
.c50c	90 03		                bcc     thatsit
.c50e	ee 34 c5	                inc     addr2+1
.c511	8d 33 c5	thatsit         sta     addr2
.c514	68		                pla
.c515	a8		                tay
.c516	68		                pla
.c517	aa		                tax
.c518	68		                pla
.c519	28		                plp
.c51a	60		                rts
.c51b			loop
.c51b	ce 3b c5	               dec  loopcount
.c51e	d0 03		               bne  norep
.c520	ce 3c c5	               dec  loopcount+1
.c523	ad 3b c5	norep          lda  loopcount
.c526	c9 00		               cmp  #$00
.c528	d0 05		               bne  out
.c52a	4d 3c c5	               eor  loopcount+1
.c52d	c9 ff		               cmp  #$ff
.c52f	60		out            rts
>c530	28		ymult          .byte     40
>c531	00 00		addr1          .word     $0000
>c533	00 00		addr2          .word     $0000
>c535	00 00		bytecnt        .word     $0000
>c537	00 00		zp1            .word   $0000
>c539	00 00		zp2            .word   $0000
>c53b	00 00		loopcount      .word     $0000

;******  Return to file: libtest00.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c53d	01		a2hexcol       .byte     1              ; pour aputscxy
>c53e	00		a2hexbkcol     .byte     %00000000
.c53f			a2hexpos
>c53f	00		a2hexpx        .byte     0              ; pour aputsxy
>c540	00		a2hexpy        .byte     0
>c541	24		a2hexprefix    .byte     "$"            ; pour aputs
>c542	00 00		a2hexstr       .word     $00
>c544	00 00		               .word     $00
>c546	00		               .byte     0              ; 0 end string
>c547	30 30 30 30	abin           .null     "00000000"
>c54b	30 30 30 30 00
>c550	20 20 20 00	adec           .null     "   "
.c554			putahexfmtxy
.c554	20 47 c2	               jsr  push
.c557	20 a3 c5	               jsr  atohex
.c55a	ae 3f c5	               ldx  a2hexpx
.c55d	ac 40 c5	               ldy  a2hexpy
.c560	20 6b c1	               jsr  gotoxy
.c563	a2 41		               ldx  #<a2hexprefix
.c565	a0 c5		               ldy  #>a2hexprefix
.c567	20 51 c1	               jsr  puts
.c56a	20 82 c2	               jsr  pop
.c56d	60		               rts
.c56e			putahexfmt
.c56e	20 47 c2	               jsr  push
.c571	20 a3 c5	               jsr  atohex
.c574	a2 41		               ldx  #<a2hexprefix
.c576	a0 c5		               ldy  #>a2hexprefix
.c578	20 51 c1	               jsr  puts
.c57b	20 82 c2	               jsr  pop
.c57e	60		               rts
.c57f			putahex
.c57f	20 47 c2	               jsr  push
.c582	20 a3 c5	               jsr  atohex
.c585	a2 42		               ldx  #<a2hexstr
.c587	a0 c5		               ldy  #>a2hexstr
.c589	20 51 c1	               jsr  puts
.c58c	20 82 c2	               jsr  pop
.c58f	60		               rts
.c590			nibtohex
.c590	08		               php
.c591	29 0f		               and  #$0f
.c593	f8		               sed
.c594	18		               clc
.c595	69 90		               adc  #$90
.c597	69 40		               adc  #$40
.c599	d8		               cld
.c59a	28		               plp
.c59b	60		               rts
.c59c			lsra4bits
.c59c	08		               php
.c59d	4a		               lsr
.c59e	4a		               lsr
.c59f	4a		               lsr
.c5a0	4a		               lsr
.c5a1	28		               plp
.c5a2	60		               rts
.c5a3			atohex
.c5a3	08		               php
.c5a4	48		               pha
.c5a5	48		               pha
.c5a6	20 9c c5	               jsr  lsra4bits
.c5a9	20 90 c5	               jsr  nibtohex
.c5ac	8d 42 c5	               sta  a2hexstr
.c5af	68		               pla
.c5b0	20 90 c5	               jsr  nibtohex
.c5b3	8d 43 c5	               sta  a2hexstr+1
.c5b6	a9 00		               lda  #$00                ; set end of string
.c5b8	8d 44 c5	               sta  a2hexstr+2
.c5bb	68		               pla
.c5bc	28		               plp
.c5bd	60		               rts
.c5be			xy2hex
.c5be	20 47 c2	               jsr  push
.c5c1	20 a3 c5	               jsr  atohex
.c5c4	8a		               txa
.c5c5	48		               pha
.c5c6	20 9c c5	               jsr  lsra4bits
.c5c9	20 90 c5	               jsr  nibtohex
.c5cc	8d 42 c5	               sta  a2hexstr
.c5cf	68		               pla
.c5d0	20 90 c5	               jsr  nibtohex
.c5d3	8d 43 c5	               sta  a2hexstr+1
.c5d6	98		               tya
.c5d7	48		               pha
.c5d8	20 9c c5	               jsr  lsra4bits
.c5db	20 90 c5	               jsr  nibtohex
.c5de	8d 44 c5	               sta  a2hexstr+2
.c5e1	68		               pla
.c5e2	20 90 c5	               jsr  nibtohex
.c5e5	8d 45 c5	               sta  a2hexstr+3
.c5e8	a9 00		               lda  #$00                ; 0 ended string
.c5ea	8d 46 c5	               sta  a2hexstr+4
.c5ed	20 82 c2	               jsr  pop
.c5f0			atobin
.c5f0	20 47 c2	               jsr  push
.c5f3	a2 08		               ldx  #8
.c5f5	a0 00		               ldy  #0
.c5f7	18		               clc
.c5f8	2a		nextbit        rol
.c5f9	48		               pha
.c5fa	69 00		               adc  #$00
.c5fc	29 01		               and  #$01
.c5fe	20 90 c5	               jsr  nibtohex
.c601	99 47 c5	               sta  abin,y
.c604	68		               pla
.c605	c8		               iny
.c606	ca		               dex
.c607	d0 ef		               bne  nextbit
.c609	a9 00		               lda  #0
.c60b	99 47 c5	               sta  abin,y
.c60e	20 82 c2	               jsr  pull
.c611	60		               rts
.c612			putabin
.c612	20 f0 c5	               jsr     atobin
.c615	20 47 c2	               jsr     push
.c618	a2 47		               ldx     #<abin
.c61a	a0 c5		               ldy     #>abin
.c61c	20 51 c1	               jsr     puts
.c61f	20 82 c2	               jsr     pop
.c622	60		               rts
.c623			printabin
.c623	20 47 c2	               jsr     push
.c626	a2 47		               ldx     #<abin
.c628	a0 c5		               ldy     #>abin
.c62a	20 51 c1	               jsr     puts
.c62d	20 82 c2	               jsr     pop
.c630	60		               rts
.c631			putabinfmt
.c631	08		               php
.c632	48		               pha
.c633	a9 25		               lda     #"%"
.c635	20 4b c1	               jsr     putch
.c638	68		               pla
.c639	20 12 c6	               jsr     putabin
.c63c	28		               plp
.c63d	60		               rts
.c63e			putabinxy
.c63e	20 6b c1	               jsr     gotoxy
.c641	20 12 c6	               jsr     putabin
.c644	60		               rts
.c645			putabinfmtxy
.c645	20 6b c1	               jsr     gotoxy
.c648	20 31 c6	               jsr     putabinfmt
.c64b	60		               rts
.c64c			atodec
.c64c	20 47 c2	               jsr  push
.c64f	f8		               sed            ; On se place en mode décimal.
.c650	aa		               tax            ; On déplace a dans x.
.c651	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.c653	a9 00		               lda  #$00      ; 0 dans A.
.c655	18		nextbit        clc            ; Bit carry a 0.
.c656	69 01		               adc  #$01      ; Ajoute 1 a A.
.c658	90 01		               bcc  decx      ; Pas de carry, pas de report.
.c65a	c8		               iny            ; On incrémente Y
.c65b	ca		decx           dex            ; X=X-1
.c65c	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.c65e	48		               pha            ; A sur le stack.
.c65f	98		               tya            ; Y dans A (MSB)
.c660	20 90 c5	               jsr  nibtohex  ; a hex petsci ...
.c663	8d 50 c5	               sta  adec      ; ... dans tampon.
.c666	68		               pla            ; Récupere A
.c667	48		               pha            ;
.c668	20 90 c5	               jsr  nibtohex
.c66b	8d 52 c5	               sta  adec+2
.c66e	68		               pla
.c66f	6a		               ror
.c670	6a		               ror
.c671	6a		               ror
.c672	6a		               ror
.c673	20 90 c5	               jsr  nibtohex
.c676	8d 51 c5	               sta  adec+1
.c679	d8		               cld            ; On revient en mode binaire.
.c67a	20 82 c2	               jsr  pull
.c67d	60		               rts
.c67e			putadec
.c67e	20 47 c2	               jsr  push
.c681	20 4c c6	               jsr  atodec
.c684	a2 50		               ldx  #<adec
.c686	a0 c5		               ldy  #>adec+1
.c688	20 51 c1	               jsr  puts
.c68b	20 82 c2	               jsr  pop
.c68e	60		               rts

;******  Return to file: libtest00.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>c68f	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>c693	00 00 00 00 00 00 00 00 00 0d 00 00
>c69f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>c6a3	00 00 00 00 00 00 00 00 00 00 00 00
>c6af	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>c6b3	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>c6bf	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>c6c3	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>c6cf	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>c6d3	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>c6df	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>c6e3	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>c6ef	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>c6f3	00 00 00 00 00 00 00 00 00 00 00 00
>c6ff	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>c703	00 00 00 00 00 00 00 00 00 00 00 00
>c70f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>c713	00 00 00 00 00 00 00 00 00 00 00 00
>c71f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>c723	00 00 00 00 00 00 00 00 00 00 00 00
>c72f	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>c733	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>c73f	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>c743	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>c74f	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>c753	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>c75f	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>c763	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>c76f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>c773	00 00 00 00 00 00 00 00 00 00 00 00
>c77f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>c783	00 00 00 00 00 00 00 00 00 00 00 00
.c78f			waitstop
.c78f	20 47 c2	               jsr  push
.c792	20 ed f6	wait           jsr  k_stop
.c795	d0 fb		               bne  wait
.c797	20 82 c2	               jsr  pop
.c79a	60		               rts
.c79b			anykey
.c79b	08		               php
.c79c	48		               pha
.c79d	a5 cb		nokey          lda 203
.c79f	c9 40		               cmp #64
.c7a1	f0 fa		               beq nokey
.c7a3	20 a9 c7	               jsr releasekey
.c7a6	68		               pla
.c7a7	28		               plp
.c7a8	60		               rts
.c7a9			releasekey
.c7a9	08		               php
.c7aa	48		               pha
.c7ab	a5 cb		keypressed     lda 203
.c7ad	c9 40		               cmp #64
.c7af	d0 fa		               bne keypressed
.c7b1	68		               pla
.c7b2	28		               plp
.c7b3	60		               rts
.c7b4			getkey
.c7b4	20 e4 ff	gkagain        jsr  getin
.c7b7	c9 00		               cmp  #0
.c7b9	f0 f9		               beq  gkagain
.c7bb	60		               rts
.c7bc			kbflushbuff
.c7bc	08		               php
.c7bd	48		               pha
.c7be	20 e4 ff	again          jsr  getin
.c7c1	c9 00		               cmp  #0
.c7c3	d0 f9		               bne  again
.c7c5	68		               pla
.c7c6	28		               plp
.c7c7	60		               rts
.c7c8			waitkey
.c7c8	20 47 c2	               jsr  push
.c7cb	8d 19 c8	               sta  thekey
.c7ce	20 e4 ff	nope           jsr  getin
.c7d1	20 d2 ff	               jsr  chrout
.c7d4	cd 19 c8	               cmp  thekey
.c7d7	d0 f5		               bne  nope
.c7d9	20 d2 ff	               jsr  chrout
.c7dc	20 82 c2	               jsr  pop
.c7df	60		               rts
.c7e0			waitspace
.c7e0	20 47 c2	               jsr  push
.c7e3	a9 7f		wait           lda  #$7f  ;%01111111
.c7e5	8d 00 dc	               sta  $dc00
.c7e8	ad 01 dc	               lda  $dc01
.c7eb	29 10		               and  #$10  ;mask %00010000
.c7ed	d0 f4		               bne  wait
.c7ef	20 82 c2	               jsr  pop
.c7f2			waitsstop
.c7f2	20 47 c2	               jsr  push
.c7f5	20 ed f6	wait           jsr  k_stop  ;%01111111
.c7f8	d0 fb		               bne  wait
.c7fa	20 82 c2	               jsr  pop
.c7fd			waitreturn
.c7fd	20 47 c2	               jsr  push
.c800	ad 1a c8	               lda  thecount
.c803	8d 00 04	               sta  scrnram
.c806	a9 02		               lda  #$02
.c808	8d 00 d8	               sta  colorram
.c80b	20 e4 ff	nope           jsr  getin
.c80e	c9 0d		nohex          cmp  #$0d
.c810	d0 f9		               bne  nope
.c812	ee 1a c8	               inc  thecount
.c815	20 82 c2	               jsr  pop
.c818	60		               rts
>c819	00		thekey         .byte   0
>c81a	01		thecount       .byte   $01

;******  Return to file: libtest00.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.c81b			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.c81b	08		               php                 ; Sauvegarde le registre de status sur stack.
.c81c	8d 16 ca	               sta  rega           ; Sauvegarde Acc en mémoire.
.c81f	68		               pla                 ; Récupère le registre de status du stack.
.c820	8d 19 ca	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.c823	8e 17 ca	               stx  regx           ; Sauvegarde le registre X en mémoire.
.c826	8c 18 ca	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.c829	ba		               tsx                 ; Copie le registre S dans X.
.c82a	8e 1a ca	               stx  regs           ; Sauvegarde le registre S en mémoire.
.c82d	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.c82e	8d 1c ca	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.c831	8d 1e ca	               sta  regpcl2        ; ... une seconde fois.
.c834	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.c835	8d 1b ca	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.c838	8d 1d ca	               sta  regpch2        ; ... une seconde fois.
.c83b	ad 16 ca	               lda  rega           ; On commence par le registre Acc.
.c83e	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c83f	20 90 c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c842	8d b3 c9	               sta  vala+1         ; ... et le place dans la chaine.
.c845	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c846	20 9c c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c849	20 90 c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c84c	8d b2 c9	               sta  vala           ; ... et le place dans la chaine.
.c84f	ad 18 ca	               lda  regy           ; Ensuite, le registre Y.
.c852	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c853	20 90 c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c856	8d ca c9	               sta  valy+1         ; ... et le place dans la chaine.
.c859	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c85a	20 9c c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c85d	20 90 c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c860	8d c9 c9	               sta  valy           ; ... et le place dans la chaine.
.c863	ad 17 ca	               lda  regx           ; Ensuite, le registre X.
.c866	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c867	20 90 c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c86a	8d be c9	               sta  valx+1         ; ... et le place dans la chaine.
.c86d	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c86e	20 9c c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c871	20 90 c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c874	8d bd c9	               sta  valx           ; ... et le place dans la chaine.
.c877	ad 19 ca	               lda  regp           ; Ensuite, le registre de status.
.c87a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c87b	20 90 c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c87e	8d d5 c9	               sta  valp+1         ; ... et le place dans la chaine.
.c881	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c882	20 9c c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c885	20 90 c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c888	8d d4 c9	               sta  valp           ; ... et le place dans la chaine.
.c88b	ad 1a ca	               lda  regs           ; Ensuite, le pointeur de stack.
.c88e	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c88f	20 90 c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c892	8d e0 c9	               sta  vals+1         ; ... et le place dans la chaine.
.c895	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c896	20 9c c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c899	20 90 c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c89c	8d df c9	               sta  vals           ; ... et le place dans la chaine.
.c89f	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.c8a0	ad 1e ca	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.c8a3	69 00		               adc  #$00           ; On y ajoute 1.
.c8a5	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.c8a7	ee 1d ca	               inc  regpch2        ; ... en incrémentant le MSB.
.c8aa	8d 1e ca	noreport       sta  regpcl2        ; On le sauvegarde.
.c8ad	ad 1e ca	               lda  regpcl2        ; On récupère la partie basse du compteur.
.c8b0	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c8b1	20 90 c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c8b4	8d f0 c9	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.c8b7	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c8b8	20 9c c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c8bb	20 90 c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c8be	8d ef c9	               sta  valpcl         ; ... et lace le code à la position "--X-".
.c8c1	ad 1d ca	               lda regpch2         ; On récupère la partie haute du compteur.
.c8c4	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c8c5	20 90 c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c8c8	8d ee c9	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.c8cb	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c8cc	20 9c c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c8cf	20 90 c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c8d2	8d ed c9	               sta  valpch         ; ... et lace le code à la position "X---".
.c8d5	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.c8d7	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c8d8	20 90 c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c8db	8d 01 ca	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.c8de	68		               pla
.c8df	20 9c c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c8e2	20 90 c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c8e5	8d 00 ca	               sta  valz1l         ; ... et lace le code à la position "--X-".
.c8e8	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.c8ea	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c8eb	20 90 c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c8ee	8d ff c9	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.c8f1	68		               pla
.c8f2	20 9c c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c8f5	20 90 c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c8f8	8d fe c9	               sta  valz1h         ; ... et lace le code à la position "X---".
.c8fb	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.c8fd	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c8fe	20 90 c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c901	8d 12 ca	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.c904	68		               pla
.c905	20 9c c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c908	20 90 c5	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c90b	8d 11 ca	               sta  valz2l         ; ... et lace le code à la position "--X-".
.c90e	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.c910	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c911	20 90 c5	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c914	8d 10 ca	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.c917	68		               pla
.c918	20 9c c5	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c91b	20 90 c5	               jsr  nibtohex
.c91e	8d 0f ca	               sta  valz2h         ; ... et lace le code à la position "X---".
.c921	20 33 c2	               jsr  setinverse     ; On se place en mode inverse vidéo.
.c924	20 b5 c2	               jsr  pushreg
.c927	a2 aa		               ldx  #<srega
.c929	a0 c9		               ldy  #>srega
.c92b	20 de c1	               jsr  putscxy
.c92e	20 e4 c2	               jsr  popreg
.c931	20 b5 c2	               jsr  pushreg
.c934	a2 b6		               ldx  #<sregx
.c936	a0 c9		               ldy  #>sregx
.c938	20 de c1	               jsr  putscxy
.c93b	20 e4 c2	               jsr  popreg
.c93e	20 b5 c2	               jsr  pushreg
.c941	a2 c1		               ldx  #<sregy
.c943	a0 c9		               ldy  #>sregy
.c945	20 de c1	               jsr  putscxy
.c948	20 e4 c2	               jsr  popreg
.c94b	20 b5 c2	               jsr  pushreg
.c94e	a2 cd		               ldx  #<sregp
.c950	a0 c9		               ldy  #>sregp
.c952	20 de c1	               jsr  putscxy
.c955	20 e4 c2	               jsr  popreg
.c958	20 b5 c2	               jsr  pushreg
.c95b	a2 d8		               ldx  #<sregs
.c95d	a0 c9		               ldy  #>sregs
.c95f	20 de c1	               jsr  putscxy
.c962	20 e4 c2	               jsr  popreg
.c965	20 b5 c2	               jsr  pushreg
.c968	a2 e4		               ldx  #<sregpc
.c96a	a0 c9		               ldy  #>sregpc
.c96c	20 de c1	               jsr  putscxy
.c96f	20 e4 c2	               jsr  popreg
.c972	20 b5 c2	               jsr  pushreg
.c975	a2 f4		               ldx  #<sregz1
.c977	a0 c9		               ldy  #>sregz1
.c979	20 de c1	               jsr  putscxy
.c97c	20 e4 c2	               jsr  popreg
.c97f	20 b5 c2	               jsr  pushreg
.c982	a2 05		               ldx  #<sregz2
.c984	a0 ca		               ldy  #>sregz2
.c986	20 de c1	               jsr  putscxy
.c989	20 e4 c2	               jsr  popreg
.c98c	20 3b c2	               jsr  clrinverse     ; On quitte le mode inverse vidéo.
.c98f	ad 1b ca	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.c992	48		               pha                 ; ... à la bonne position sur la pile.
.c993	ad 1c ca	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.c996	48		               pha                 ; ... à la bonne position sur la pile.
.c997	ae 1a ca	               ldx  regs           ; On replace tous les registre à leurs ...
.c99a	9a		               txs                 ; ...
.c99b	ac 18 ca	               ldy  regy           ; ...
.c99e	ae 17 ca	               ldx  regx           ; ...
.c9a1	ad 19 ca	               lda  regp           ; ...
.c9a4	48		               pha                 ; ...
.c9a5	ad 16 ca	               lda  rega           ; ...
.c9a8	28		               plp                 ; ... valeurs initiales
.c9a9	60		               rts
>c9aa	07 01 17	srega   .byte   cyellow,coln+1,line
>c9ad	20 20 41 3a	        .text   '  a:$' ;4,24
>c9b1	24
>c9b2	00 00 20 00	vala    .byte   0,0,32,0
>c9b6	03 09 17	sregx   .byte   ccyan,coln+9,line
>c9b9	20 58 3a 24	        .text   ' x:$' ;4,24
>c9bd	00 00 20 00	valx    .byte   0,0,32,0
>c9c1	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>c9c4	20 59 3a 20	        .text   ' y: $' ;4,24
>c9c8	24
>c9c9	00 00 20 00	valy    .byte   0,0,32,0
>c9cd	08 18 17	sregp   .byte   corange,coln+24,line
>c9d0	20 50 3a 24	        .text   ' p:$' ;4,24
>c9d4	00 00 20 00	valp    .byte   0,0,32,0
>c9d8	0a 1f 17	sregs   .byte   clightred,coln+31,line
>c9db	20 53 3a 24	        .text   ' s:$' ;4,24
>c9df	00 00 20 20	vals    .byte   0,0,32,32,0
>c9e3	00
>c9e4	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>c9e8	20 50 43 3a	        .text   ' pc:$' ;4,24
>c9ec	24
>c9ed	00 00		valpch  .byte   0,0
>c9ef	00 00 20 20	valpcl  .byte   0,0,32,32,0
>c9f3	00
>c9f4	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>c9f8	20 5a 50 31	        .text   ' zp1:$' ;4,24
>c9fc	3a 24
>c9fe	00 00		valz1h  .byte   0,0
>ca00	00 00 20 20	valz1l  .byte   0,0,32,32,0
>ca04	00
>ca05	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>ca09	20 5a 50 32	        .text   ' zp2:$' ;4,24
>ca0d	3a 24
>ca0f	00 00		valz2h  .byte   0,0
>ca11	00 00 20 20	valz2l  .byte   0,0,32,32,0
>ca15	00
>ca16	00		rega    .byte   0
>ca17	00		regx    .byte   0
>ca18	00		regy    .byte   0
>ca19	00		regp    .byte   0
>ca1a	00		regs    .byte   0
>ca1b	00		regpch  .byte   0
>ca1c	00		regpcl  .byte   0
>ca1d	00		regpch2 .byte   0
>ca1e	00		regpcl2 .byte   0
>ca1f	00		vzp1h   .byte   0
>ca20	00		vzp1l   .byte   0
>ca21	00		vzp2h   .byte   0
>ca22	00		vzp2l   .byte   0

;******  Return to file: libtest00.asm


;******  End of listing

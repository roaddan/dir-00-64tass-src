
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L essai01.txt -o essai01.prg essai01.asm
; Sun Apr  6 01:08:47 2025

;Offset	;Hex		;Source

;******  Processing input file: essai01.asm

="20250405-231555 a"	                Version = "20250405-231555 a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 07 09	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macro-c64-ultimateii.asm


;******  Return to file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm

=$df1c			uiictrlreg	=	$df1c	;(Write)
=$df1c			uiistatreg	=	$df1c	;(Read)	default $00
=$df1d			uiicmddata	=	$df1d	;(Write)
=$df1d			uiiidenreg	=	$df1d	;(Read)	default $c9
=$df1e			uiirspdata	=	$df1e	;(Read only)
=$df1f			uiistadata	=	$df1f	;(Read only)
=$00			uiiidle		=	$00
=$01			uiicmdbusy	=	$01
=$02			uiidatalast	=	$02
=$03			uiidatamore	=	$03
=$01			uii_identify	=	$01	; $01 $01 -> Read Id String as "ULTIMATE-II DOS V1.0"
=$02			uii_file_open	=	$02	; Open file for ...
=$01			uii_fa_read	=	$01	; $01 $02 $01 <filename> -> ... reading.
=$02			uii_fa_write	=	$02	; $01 $02 $02 <filename> -> ... writing.
=$04			uii_fa_new	=	$04	; $01 $02 $04 <filename> -> ... creating/writing.
=$08			uii_fa_ovwri	=	$08	; $01 $02 $08 <filename> -> ... overwriting.
=$03			uii_file_close	=	$03	; $01 $03 -> close opened file.
=$04			uii_read_data	= 	$04  ; $01 $04 [len_lo] [len_hi]
=$05			uii_writ_data	=	$05	; $01 $05 [dummy] [dummy] [data...]
=$06			uii_file_seek	=	$06	; $01 $06 [posl] [posml] [posmh] [posh].
=$07			uii_file_info 	=	$07	; $01 $07 -> returns current open file info.
=$08			uii_file_stat  = 	$08	; $01 $08 <filename> -> returns file info.
=$09			uii_file_del	=	$09	; $01 $09 <filename> -> delete/scratch file.
=$0a			uii_file_ren	=	$0a	; $01 $0a <filename> $00 <newname>
=$0b			uii_file_copy	=	$0b	; $01 $0b <source> $00 <destination>
=$11			uii_dir_change = 	$11	; $01 $11 <directory name>
=$12			uii_dir_pwd	=	$12	; $01 $12
=$13			uii_dir_open	=	$13	; $01 $13
=$14			uii_dir_read	=	$14  ; $01 $14
=$15			uii_dir_cp_ui	=	$15	; $01 $15 -> makes UI current path as API current path.
=$16			uii_dir_mkdir	=	$16	; $01 $16 <dirname> -> Create directory under current.
=$17			uii_dir_home	=	$17	; $01 $17 -> makes UI home path as API current path.
=$21			uii_reu_load	=	$21
=$22			uii_reu_save	=	$22
=$23			uii_dsk_mount	=	$23	; $01 $23 <id> <filename>
=$24			uii_dsk_umount = 	$24	; $01 $24 <id>
=$25			uii_dsk_swap 	= 	$25	; $01 $25 <id>
=$26			uii_time_get	=	$26	; $01 $26 [id] -> returns current RTC time/date.
=$27			uii_time_set	=	$27	; $01 $27 <Y> <M> <D> <H> <M> <S>
=$f0			uii_dos_echo	= 	$f0	; $01 $f0
.0854			isuiibusy
.0854	48					pha	; Bit 0
.0855	18					clc
.0856	ad 1c df				lda	uiistatreg
.0859	29 01					and	#%00000001
.085b	c9 01					cmp	#%00000001
.085d	d0 01					bne  out
.085f	38					sec
.0860	68		out			pla
.0861	60					rts
.0862			isuiidataacc
.0862	48					pha ; Bit 1
.0863	18					clc
.0864	ad 1c df				lda	uiistatreg
.0867	29 04					and	#%00000100
.0869	c9 04					cmp	#%00000100
.086b	d0 01					bne	out
.086d	38					sec
.086e	68		out			pla
.086f	60					rts
.0870			isuiiabort
.0870	48					pha ; Bit 2
.0871	18					clc
.0872	ad 1c df				lda	uiistatreg
.0875	29 04					and	#%00000100
.0877	c9 04					cmp	#%00000100
.0879	d0 01					bne	out
.087b	38					sec
.087c	68		out			pla
.087d	60					rts
.087e			isuiierror
.087e	48					pha ; Bit 3
.087f	18					clc
.0880	ad 1c df				lda	uiistatreg
.0883	29 08					and	#%00001000
.0885	c9 08					cmp	#%00001000
.0887	d0 01					bne	out
.0889	38					sec
.088a	68		out			pla
.088b	60					rts
.088c			getuiistate
.088c	08					php	; Bits 5,4
.088d	ad 1c df				lda	uiistatreg
.0890	4a					lsr
.0891	4a					lsr
.0892	4a					lsr
.0893	4a					lsr
.0894	29 03					and	#%00000011
.0896	28					plp
.0897	60					rts
.0898			isuiidataavail
.0898	48					pha			;tourlou
.0899	18					clc
.089a	ad 1f df				lda	uiistadata
.089d	29 80					and	#%10000000
.089f	c9 80					cmp	#%10000000
.08a1	d0 01					bne	out
.08a3	38					sec
.08a4	68		out			pla
.08a5	60					rts
.08a6			waituiiidle
.08a6	08					php
.08a7	48					pha
.08a8	20 8c 08	notyet		jsr	getuiistate
.08ab	c9 00					cmp  #$00
.08ad	d0 f9					bne	notyet
.08af	68					pla
.08b0	28					plp
.08b1	60					rts
.08b2			isuiimoredata
.08b2	08					php
.08b3	48					pha
.08b4	20 8c 08	notyet		jsr	getuiistate
.08b7	c9 00					cmp  #$00
.08b9	d0 f9					bne	notyet
.08bb	68					pla
.08bc	28					plp
.08bd	60					rts
.08be			waituiinotbusy
.08be	08					php
.08bf	20 54 08	wait			jsr	isuiibusy
.08c2	b0 fb					bcs	wait
.08c4	28					plp
.08c5	60					rts
.08c6			uiiputcmdbyte
.08c6	20 be 08				jsr 	waituiinotbusy
.08c9	8d 1d df				sta	uiicmddata
.08cc	60					rts
.08cd			uiisndcmd
.08cd	20 b0 0e				jsr	push
.08d0	86 fb					stx	zpage1
.08d2	84 fc					sty	zpage1+1
.08d4	a0 00					ldy	#$00
.08d6	b1 fb		next			lda	(zpage1),y
.08d8	f0 07					beq	finish
.08da	20 c6 08				jsr	uiiputcmdbyte
.08dd	c8					iny
.08de	4c d6 08				jmp	next
.08e1	a9 01		finish		lda	#$01
.08e3	8d 1c df				sta	uiictrlreg
.08e6	20 ef 0e				jsr	pop
.08e9	60					rts
.08ea			uiireaddata
.08ea	08					php
.08eb	20 be 08				jsr	waituiinotbusy
.08ee	20 98 08				jsr	isuiidataavail
.08f1	b0 06					bcs	nodata
.08f3	ad 1e df				lda	uiirspdata
.08f6	4c fb 08				jmp	outdata
.08f9	a9 00		nodata		lda	#$00
.08fb	28		outdata		plp
.08fc	60					rts
.08fd			uiisendack
.08fd	08					php
.08fe	48					pha
.08ff	a9 02					lda	#%00000010
.0901	8d 1c df				sta 	uiictrlreg
.0904	68					pla
.0905	28					plp
.0906	60					rts
.0907			uiigettime

;******  Return to file: essai01.asm

.0907			main
.0907	20 82 0d	               jsr scrmaninit
.090a	08		               php
.090b	48		               pha
.090c	a9 0e		               lda  #14
.090e	8d a1 0d	               sta  characterset
.0911	20 d2 ff	               jsr  $ffd2
.0914	68		               pla
.0915	28		               plp
.0916	08		               php
.0917	48		               pha
.0918	a9 08		               lda  #$08
.091a	20 d2 ff	               jsr  $ffd2
.091d	68		               pla
.091e	28		               plp
.091f	20 b0 0e	               jsr  push
.0922	48		               pha
.0923	a9 05		               lda  #cvert
.0925	8d 20 d0	               sta  $d020
.0928	68		               pla
.0929	48		               pha
.092a	a9 06		               lda  #cbleu
.092c	8d 21 d0	               sta  $d021
.092f	68		               pla
.0930	48		               pha
.0931	a9 01		               lda  #cblanc
.0933	8d 86 02	               sta  bascol
.0936	68		               pla
.0937	20 ef 0e	               jsr  pull
.093a	20 e8 09	               jsr essai01
.093d	08		               php
.093e	48		               pha
.093f	a9 09		               lda  #$09
.0941	20 d2 ff	               jsr  $ffd2
.0944	68		               pla
.0945	28		               plp
.0946	08		               php
.0947	48		               pha
.0948	a9 8e		               lda  #b_uppercase
.094a	8d a1 0d	               sta  characterset
.094d	20 d2 ff	               jsr  $ffd2
.0950	68		               pla
.0951	28		               plp
.0952	20 a2 0d	               jsr  cls
.0955	20 b0 0e	               jsr  push
.0958	48		               pha
.0959	a9 05		               lda  #cvert
.095b	8d 20 d0	               sta  $d020
.095e	68		               pla
.095f	48		               pha
.0960	a9 06		               lda  #cbleu
.0962	8d 21 d0	               sta  $d021
.0965	68		               pla
.0966	48		               pha
.0967	a9 01		               lda  #cblanc
.0969	8d 86 02	               sta  bascol
.096c	68		               pla
.096d	20 ef 0e	               jsr  pull
.0970			aide
.0970	08		               php
.0971	48		               pha
.0972	a9 0e		               lda  #14
.0974	8d a1 0d	               sta  characterset
.0977	20 d2 ff	               jsr  $ffd2
.097a	68		               pla
.097b	28		               plp
.097c	20 a2 0d	               jsr cls
.097f	20 b0 0e	               jsr  push
.0982	a2 79		               ldx  #<line
.0984	a0 0c		               ldy  #>line
.0986	20 bf 0d	               jsr  puts
.0989	20 ef 0e	               jsr  pull
.098c	20 b0 0e	               jsr  push
.098f	a2 e1		               ldx  #<headera
.0991	a0 0a		               ldy  #>headera
.0993	20 bf 0d	               jsr  puts
.0996	20 ef 0e	               jsr  pull
.0999	20 b0 0e	               jsr  push
.099c	a2 54		               ldx  #<headerb
.099e	a0 0b		               ldy  #>headerb
.09a0	20 bf 0d	               jsr  puts
.09a3	20 ef 0e	               jsr  pull
.09a6	20 b0 0e	               jsr  push
.09a9	a2 79		               ldx  #<line
.09ab	a0 0c		               ldy  #>line
.09ad	20 bf 0d	               jsr  puts
.09b0	20 ef 0e	               jsr  pull
.09b3	20 b0 0e	               jsr  push
.09b6	a2 79		               ldx  #<line
.09b8	a0 0c		               ldy  #>line
.09ba	20 bf 0d	               jsr  puts
.09bd	20 ef 0e	               jsr  pull
.09c0	20 b0 0e	               jsr  push
.09c3	a2 af		               ldx  #<shortcuts
.09c5	a0 0b		               ldy  #>shortcuts
.09c7	20 bf 0d	               jsr  puts
.09ca	20 ef 0e	               jsr  pull
.09cd	20 b0 0e	               jsr  push
.09d0	a2 29		               ldx  #<aidetext
.09d2	a0 0c		               ldy  #>aidetext
.09d4	20 bf 0d	               jsr  puts
.09d7	20 ef 0e	               jsr  pull
.09da	20 b0 0e	               jsr  push
.09dd	a2 79		               ldx  #<line
.09df	a0 0c		               ldy  #>line
.09e1	20 bf 0d	               jsr  puts
.09e4	20 ef 0e	               jsr  pull
.09e7	60		               rts
.09e8			essai01
.09e8	08		               php
.09e9	48		               pha
.09ea	20 a2 0d	               jsr  cls
.09ed	20 39 0a	               jsr  printstatic
.09f0	20 b0 0e	               jsr  push
.09f3	a2 cb		               ldx  #<lbluiiidenreg
.09f5	a0 0c		               ldy  #>lbluiiidenreg
.09f7	20 48 0e	               jsr  putscxy
.09fa	20 ef 0e	               jsr  pull
.09fd	ad 1d df	               lda  uiiidenreg
.0a00	20 98 10	               jsr  putahexfmt
.0a03			sendcommand
.0a03	20 b0 0e	               jsr  push
.0a06	a2 77		               ldx  #<uiiidcmd
.0a08	a0 0d		               ldy  #>uiiidcmd
.0a0a	20 cd 08	               jsr  uiisndcmd
.0a0d	20 ef 0e	               jsr  pull
.0a10	20 b0 0e	               jsr  push
.0a13	a2 73		               ldx  #<txtrespponse
.0a15	a0 0d		               ldy  #>txtrespponse
.0a17	20 48 0e	               jsr  putscxy
.0a1a	20 ef 0e	               jsr  pull
.0a1d	20 ea 08	moredata       jsr  uiireaddata
.0a20	c9 00		               cmp  #$00
.0a22	f0 06		               beq  nodata
.0a24	20 b9 0d	               jsr  putch
.0a27	4c 1d 0a	               jmp  moredata
.0a2a	20 fd 08	nodata         jsr  uiisendack
.0a2d	20 9b 0a	               jsr  updatestatus
.0a30	20 48 13	               jsr  showregs
.0a33	20 c8 12	               jsr  anykey
.0a36	68		               pla
.0a37	28		               plp
.0a38	60		               rts
.0a39			printstatic
.0a39	20 b0 0e	               jsr  push
.0a3c	20 b0 0e	               jsr  push
.0a3f	a2 b1		               ldx  #<lbluiititle
.0a41	a0 0c		               ldy  #>lbluiititle
.0a43	20 48 0e	               jsr  putscxy
.0a46	20 ef 0e	               jsr  pull
.0a49	20 b0 0e	               jsr  push
.0a4c	a2 cb		               ldx  #<lbluiiidenreg
.0a4e	a0 0c		               ldy  #>lbluiiidenreg
.0a50	20 48 0e	               jsr  putscxy
.0a53	20 ef 0e	               jsr  pull
.0a56	20 b0 0e	               jsr  push
.0a59	a2 eb		               ldx  #<lbluiistatreg
.0a5b	a0 0c		               ldy  #>lbluiistatreg
.0a5d	20 48 0e	               jsr  putscxy
.0a60	20 ef 0e	               jsr  pull
.0a63	20 b0 0e	               jsr  push
.0a66	a2 4f		               ldx  #<defuiistatreg
.0a68	a0 0d		               ldy  #>defuiistatreg
.0a6a	20 48 0e	               jsr  putscxy
.0a6d	20 ef 0e	               jsr  pull
.0a70	20 b0 0e	               jsr  push
.0a73	a2 2b		               ldx  #<lbluiirspdata
.0a75	a0 0d		               ldy  #>lbluiirspdata
.0a77	20 48 0e	               jsr  putscxy
.0a7a	20 ef 0e	               jsr  pull
.0a7d	20 b0 0e	               jsr  push
.0a80	a2 0b		               ldx  #<lbluiistadata
.0a82	a0 0d		               ldy  #>lbluiistadata
.0a84	20 48 0e	               jsr  putscxy
.0a87	20 ef 0e	               jsr  pull
.0a8a	20 b0 0e	               jsr  push
.0a8d	a2 63		               ldx  #<defuiistadata
.0a8f	a0 0d		               ldy  #>defuiistadata
.0a91	20 48 0e	               jsr  putscxy
.0a94	20 ef 0e	               jsr  pull
.0a97	20 ef 0e	               jsr  pop
.0a9a	60		               rts
.0a9b			updatestatus
.0a9b	20 b0 0e	               jsr  push
.0a9e	a9 03		               lda  #$03
.0aa0	8d 67 10	               sta  a2hexcol
.0aa3	20 b0 0e	               jsr  push
.0aa6	a2 5b		               ldx  #<txtuiistatreg
.0aa8	a0 0d		               ldy  #>txtuiistatreg
.0aaa	20 48 0e	               jsr  putscxy
.0aad	20 ef 0e	               jsr  pull
.0ab0	ad 1c df	               lda  uiistatreg
.0ab3	20 5b 11	               jsr  putabinfmt
.0ab6	20 b0 0e	               jsr  push
.0ab9	a2 5f		               ldx  #<txtuiirspdata
.0abb	a0 0d		               ldy  #>txtuiirspdata
.0abd	20 48 0e	               jsr  putscxy
.0ac0	20 ef 0e	               jsr  pull
.0ac3	ad 1e df	               lda  uiirspdata
.0ac6	20 5b 11	               jsr  putabinfmt
.0ac9	20 b0 0e	               jsr  push
.0acc	a2 6f		               ldx  #<txtuiistadata
.0ace	a0 0d		               ldy  #>txtuiistadata
.0ad0	20 48 0e	               jsr  putscxy
.0ad3	20 ef 0e	               jsr  pull
.0ad6	ad 1f df	               lda  uiistadata
.0ad9	20 5b 11	               jsr  putabinfmt
.0adc	20 ef 0e	               jsr  pop
.0adf	60		               rts
>0ae0	00		byte           .byte 0

;******  Processing file: ./strings_fr.asm

.0ae1			headera
>0ae1	20 20 20 31	               .text          "   1541 Ultimate II + Premiers essais "
>0ae5	35 34 31 20 d5 4c 54 49 4d 41 54 45 20 c9 c9 20
>0af5	2b 20 d0 52 45 4d 49 45 52 53 20 45 53 53 41 49
>0b05	53 20
>0b07	0d		               .byte     $0d
>0b08	20 c3 41 52	               .text          " Cartouche et API par Gideon Zweijtzer."
>0b0c	54 4f 55 43 48 45 20 45 54 20 c1 d0 c9 20 50 41
>0b1c	52 20 c7 49 44 45 4f 4e 20 da 57 45 49 4a 54 5a
>0b2c	45 52 2e
>0b2f	0d		               .byte     $0d
>0b30	20 20 20 20	               .text          "     API Version 1.0, 1er Feb 2013"
>0b34	20 c1 d0 c9 20 d6 45 52 53 49 4f 4e 20 31 2e 30
>0b44	2c 20 31 45 52 20 c6 45 42 20 32 30 31 33
>0b52	0d 00		               .byte     $0d,0
>0b54	20 20 20 20	headerb        .text          "               essai01 "
>0b58	20 20 20 20 20 20 20 20 20 20 20 45 53 53 41 49
>0b68	30 31 20
>0b6b	0d		               .byte     $0d
>0b6c	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0b70	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>0b80	45 4c 20 cc 41 46 52 41 4e 43 45
>0b8b	0d		               .byte     $0d
>0b8c	20 20 20 20	               .text   format("       Version: %s",Version)
>0b90	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>0ba0	30 34 30 35 2d 32 33 31 35 35 35 20 41
>0bad	0d 00		               .byte     $0d,0
>0baf	0d		shortcuts      .byte     $0d
>0bb0	91 91		               .byte     ucurkey,ucurkey
>0bb2	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>0bb6	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>0bba	1d
>0bbb	20 d2 20 c1	               .text          " R A C C O U R C I S "
>0bbf	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>0bcf	20
>0bd0	0d		               .byte     $0d
>0bd1	20 45 53 53	               .text   format(" essai01..: SYS%05d ($%04X)",main, main)
>0bd5	41 49 30 31 2e 2e 3a 20 d3 d9 d3 30 32 33 31 31
>0be5	20 28 24 30 39 30 37 29
>0bed	0d		               .byte     $0d
>0bee	20 41 49 44	               .text   format(" aide.....: SYS%05d ($%04X)",aide, aide)
>0bf2	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 34 31 36
>0c02	20 28 24 30 39 37 30 29
>0c0a	0d		               .byte     $0d
>0c0b	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0c0f	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 33 34 39 30
>0c1f	20 28 24 30 c4 c1 32 29
>0c27	0d 00		               .byte     $0d,0
>0c29	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d ($%04X)",essai01, essai01)
>0c2d	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 35 33 36
>0c3d	20 28 24 30 39 c5 38 29
>0c45	0d 0d		               .byte     $0d, $0d
>0c47	20 20 20 20	               .text   format("    ex.: SYS%05d",essai01)
>0c4b	45 58 2e 3a 20 d3 d9 d3 30 32 35 33 36
>0c58	0d		               .byte     $0d
>0c59	20 20 20 20	               .text   format("    for i=0to100:SYS%05d:next",essai01)
>0c5d	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0c6d	30 32 35 33 36 3a 4e 45 58 54
>0c77	0d 00		               .byte     $0d,0
>0c79	20 c0 c0 c0	line           .byte     $20,192,192,192,192,192,192,192,192,192
>0c7d	c0 c0 c0 c0 c0 c0
>0c83	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0c87	c0 c0 c0 c0 c0 c0
>0c8d	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0c91	c0 c0 c0 c0 c0 c0
>0c97	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192
>0c9b	c0 c0 c0 c0 c0
>0ca0	0d 00		               .byte     $0d,0
>0ca2	50 52 45 53	uiiconnected   .null     "present"
>0ca6	45 4e 54 00
>0caa	41 42 53 45	uiiunconnected .null     "absent"
>0cae	4e 54 00

;******  Return to file: essai01.asm

=1			uiiy           =    1
=1			uiix           =    1
>0cb1	01 0a 01 12	lbluiititle    .byte     1,uiix+9,uiiy,18
>0cb5	20 31 35 34	               .text     " 1541 Ultimate II + "
>0cb9	31 20 d5 4c 54 49 4d 41 54 45 20 c9 c9 20 2b 20
>0cc9	92 00		               .byte     146,0
>0ccb	01 01 03	lbluiiidenreg  .byte     1,uiix ,uiiy+2
>0cce	c9 44 20 52	               .null     format("Id register ------ $%04X -> ", uiiidenreg)
>0cd2	45 47 49 53 54 45 52 20 2d 2d 2d 2d 2d 2d 20 24
>0ce2	c4 c6 31 c4 20 2d 3e 20 00
>0ceb	01 01 05	lbluiistatreg  .byte     1,uiix ,uiiy+4
>0cee	c3 4d 44 20	               .null     format("Cmd status reg. -- $%04X -> ", uiistatreg)
>0cf2	53 54 41 54 55 53 20 52 45 47 2e 20 2d 2d 20 24
>0d02	c4 c6 31 c3 20 2d 3e 20 00
>0d0b	01 01 07	lbluiistadata  .byte     1,uiix ,uiiy+6
>0d0e	d2 45 53 50	               .null     format("Response data reg. $%04X -> ", uiirspdata)
>0d12	4f 4e 53 45 20 44 41 54 41 20 52 45 47 2e 20 24
>0d22	c4 c6 31 c5 20 2d 3e 20 00
>0d2b	01 01 09	lbluiirspdata  .byte     1,uiix ,uiiy+8.
>0d2e	c4 41 54 41	               .null     format("Data status reg. - $%04X -> ", uiistadata)
>0d32	20 53 54 41 54 55 53 20 52 45 47 2e 20 2d 20 24
>0d42	c4 c6 31 c6 20 2d 3e 20 00
>0d4b	03 1d 03 00	txtuiiidenreg  .byte     3,uiix+28,uiiy+2,0
>0d4f	03 1e 04	defuiistatreg  .byte     3,uiix+29,uiiy+3
>0d52	c1 c1 d3 d3	               .null     "AASSEPCB"
>0d56	c5 d0 c3 c2 00
>0d5b	03 1d 05 00	txtuiistatreg  .byte     3,uiix+28,uiiy+4,0
>0d5f	03 1d 07 00	txtuiirspdata  .byte     3,uiix+28,uiiy+6,0
>0d63	03 1e 08	defuiistadata  .byte     3,uiix+29,uiiy+7
>0d66	c1 c1 d3 d3	               .null     "AASSEPCB"
>0d6a	c5 d0 c3 c2 00
>0d6f	03 1d 09 00	txtuiistadata  .byte     3,uiix+28,uiiy+8,0
>0d73	03 0a 02 00	txtrespponse   .byte     3,uiix+9,uiiy+1,0
>0d77	01 01 00	uiiidcmd       .byte     $01,$01,$00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0d7a	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0d7e	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0d82			libtart

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0d82			scrmaninit
.0d82	20 b0 0e	               jsr  push
.0d85	a9 06		               lda  #vbleu
.0d87	8d 21 d0	               sta  vicbackcol
.0d8a	a9 05		               lda  #vvert
.0d8c	8d 20 d0	               sta  vicbordcol
.0d8f	a9 01		               lda  #vblanc
.0d91	8d 86 02	               sta  bascol
.0d94	ad 00 04	               lda  scrnram
.0d97	8d 00 04	               sta  scrnram
.0d9a	20 a2 0d	               jsr  cls
.0d9d	20 ef 0e	               jsr  pop
.0da0	60		               rts
>0da1	8e		characterset   .byte b_uppercase
.0da2			cls
.0da2	08		               php
.0da3	48		               pha
.0da4	a9 93		               lda  #$93
.0da6	20 b9 0d	               jsr  putch
.0da9	68		               pla
.0daa	28		               plp
.0dab	60		               rts
.0dac			putnch
.0dac	08		               php
.0dad	e0 00		               cpx  #$00
.0daf	f0 06		               beq  out
.0db1	20 d2 ff	again          jsr  $ffd2
.0db4	ca		               dex
.0db5	d0 fa		               bne  again
.0db7	28		out            plp
.0db8	60		               rts
.0db9			putch
.0db9	08		               php
.0dba	20 d2 ff	               jsr  $ffd2
.0dbd	28		               plp
.0dbe	60		               rts
.0dbf			puts
.0dbf	20 b0 0e	               jsr  push
.0dc2	86 fb		               stx  zpage1
.0dc4	84 fc		               sty  zpage1+1
.0dc6	a0 00		               ldy  #0
.0dc8	b1 fb		next           lda  (zpage1),y
.0dca	f0 09		               beq  exit
.0dcc	20 b9 0d	               jsr  putch
.0dcf	20 b7 0f	               jsr  inczp1
.0dd2	4c c8 0d	               jmp  next
.0dd5	20 ef 0e	exit           jsr  pop
.0dd8	60		               rts
.0dd9			gotoxy
.0dd9	08		               php
.0dda	18		               clc
.0ddb	8a		               txa
.0ddc	48		               pha
.0ddd	98		               tya
.0dde	aa		               tax
.0ddf	68		               pla
.0de0	a8		               tay
.0de1	20 f0 ff	               jsr  kplot
.0de4	28		               plp
.0de5	60		               rts
.0de6			cursor
=$0286			bascol    =    $0286
.0de6	08		               php            ;tourlou
.0de7	48		               pha
.0de8	90 12		               bcc  restore
.0dea	20 f0 ff	               jsr  kplot
.0ded	8c 0e 0e	               sty  cx
.0df0	8e 0f 0e	               stx  cy
.0df3	ad 86 02	               lda  bascol
.0df6	8d 10 0e	               sta  bcol
.0df9	4c 0b 0e	               jmp  out
.0dfc	ae 0f 0e	restore        ldx  cy
.0dff	ac 0e 0e	               ldy  cx
.0e02	20 f0 ff	               jsr  kplot
.0e05	ad 10 0e	               lda  bcol
.0e08	8d 86 02	               sta  bascol
.0e0b	68		out            pla
.0e0c	28		               plp
.0e0d	60		               rts
>0e0e	00		cx   .byte     $00
>0e0f	00		cy   .byte     $00
>0e10	00		bcol .byte     $00
.0e11			cursave
.0e11	08		               php
.0e12	38		               sec
.0e13	20 e6 0d	               jsr  cursor
.0e16	28		               plp
.0e17	60		               rts
.0e18			curput
.0e18	08		               php
.0e19	18		               clc
.0e1a	20 e6 0d	               jsr  cursor
.0e1d	28		               plp
.0e1e	60		               rts
.0e1f			putsxy
.0e1f	20 b0 0e	               jsr  push
.0e22	86 fb		               stx  zpage1
.0e24	84 fc		               sty  zpage1+1
.0e26	a0 00		               ldy  #$00
.0e28	b1 fb		               lda  (zpage1),y
.0e2a	aa		               tax
.0e2b	20 b7 0f	               jsr  inczp1
.0e2e	b1 fb		               lda  (zpage1),y
.0e30	a8		               tay
.0e31	20 d9 0d	               jsr  gotoxy
.0e34	20 b7 0f	               jsr  inczp1
.0e37	a6 fb		               ldx  zpage1
.0e39	a4 fc		               ldy  zpage1+1
.0e3b	20 bf 0d	               jsr  puts
.0e3e	20 ef 0e	               jsr  pop
.0e41	60		               rts
>0e42	00 00		straddr   .word     $00
>0e44	00		px        .byte     $00
>0e45	00		py        .byte     $00
>0e46	00 00		zp1       .word     $00
.0e48			putscxy
.0e48	20 b0 0e	               jsr  push
.0e4b	84 fc		               sty  zpage1+1
.0e4d	86 fb		               stx  zpage1
.0e4f	ad 86 02	               lda  bascol
.0e52	8d 72 0e	               sta  bc
.0e55	a0 00		               ldy #$00
.0e57	b1 fb		               lda  (zpage1),y
.0e59	8d 86 02	               sta  bascol
.0e5c	20 b7 0f	               jsr  inczp1
.0e5f	a6 fb		               ldx  zpage1
.0e61	a4 fc		               ldy  zpage1+1
.0e63	20 1f 0e	               jsr  putsxy
.0e66	ad 72 0e	               lda  bc
.0e69	8d 86 02	               sta  bascol
.0e6c	20 ef 0e	               jsr  pop
.0e6f	60		               rts
>0e70	00 00		straddr  .word      $00
>0e72	00		bc       .byte      $00
>0e73	00 00		zp1      .word      $00
.0e75			putrahex
.0e75	08		               php
.0e76	48		               pha
.0e77	20 cd 10	               jsr  atohex
.0e7a	a9 6c		               lda  #<a2hexstr
.0e7c	a0 10		               ldy  #>a2hexstr
.0e7e	20 bf 0d	               jsr  puts
.0e81	68		               pla
.0e82	28		               plp
.0e83	60		               rts
.0e84			kputrahexxy
.0e84			bputrahexxy
.0e84			putrahexxy
.0e84	08		               php
.0e85	20 cd 10	               jsr  atohex
.0e88	a9 69		               lda  #<a2hexpos
.0e8a	a0 10		               ldy  #>a2hexpos
.0e8c	20 1f 0e	               jsr  putsxy
.0e8f	68		               pla
.0e90	28		               plp
.0e91	60		               rts
.0e92			putrahexcxy
.0e92	08		               php
.0e93	20 cd 10	               jsr  atohex
.0e96	a9 69		               lda  #<a2hexpos
.0e98	a0 10		               ldy  #>a2hexpos
.0e9a	20 48 0e	               jsr  putscxy
.0e9d	68		               pla
.0e9e	28		               plp
.0e9f	60		               rts
.0ea0			setinverse
.0ea0	48		               pha
.0ea1	a9 12		               lda  #$12
.0ea3	20 d2 ff	               jsr  $ffd2
.0ea6	68		               pla
.0ea7	60		               rts
.0ea8			clrinverse
.0ea8	48		               pha
.0ea9	a9 92		               lda  #$92
.0eab	20 d2 ff	               jsr  $ffd2
.0eae	68		               pla
.0eaf	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0eb0			push
.0eb0	08		          php            ; stack : flg, pcl, pch
.0eb1	78		          sei
.0eb2	8d ec 0e	          sta  ra        ; save a
.0eb5	68		          pla            ; stack : pcl, pch
.0eb6	8d eb 0e	          sta  rp        ; save rp
.0eb9	68		          pla            ; stack : pch
.0eba	8d ed 0e	          sta  pc        ; save pcl
.0ebd	68		          pla            ; stack : -
.0ebe	8d ee 0e	          sta  pc+1      ; save pch
.0ec1	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0ec3	48		          pha            ; stack : zp1l
.0ec4	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0ec6	48		          pha            ; stack : zp1h, zp1l
.0ec7	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0ec9	48		          pha            ; stack : zp2l, zp1h, zp1l
.0eca	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0ecc	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0ecd	ad eb 0e	          lda  rp        ; get rp
.0ed0	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0ed1	ad ec 0e	          lda  ra        ; get a
.0ed4	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ed5	8a		          txa            ; get x
.0ed6	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed7	98		          tya            ; get y
.0ed8	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed9	ad ee 0e	          lda  pc+1      ; get pch
.0edc	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0edd	ad ed 0e	          lda  pc        ; get pcl
.0ee0	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ee1	ad eb 0e	          lda  rp        ; get rp
.0ee4	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ee5	ad ec 0e	          lda  ra        ; get a
.0ee8	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ee9	58		          cli
.0eea	60		          rts
>0eeb	00		rp        .byte     0
>0eec	00		ra        .byte     0
>0eed	00 00		pc        .word     0
.0eef			pull
.0eef			pop
.0eef	78		          sei
.0ef0	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef1	8d 24 0f	          sta  pc        ; save pcl
.0ef4	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef5	8d 25 0f	          sta  pc+1      ; save pch
.0ef8	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef9	a8		          tay            ; set y
.0efa	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0efb	aa		          tax            ; set x
.0efc	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0efd	8d 23 0f	          sta  ra        ; save a
.0f00	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0f01	8d 22 0f	          sta  rp        ; save rp
.0f04	68		          pla            ; stack : zp2l, zp1h, zp1l
.0f05	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0f07	68		          pla            ; stack : zp1h, zp1l
.0f08	85 fd		          sta  zpage2    ; get zpage2 High byte
.0f0a	68		          pla            ; stack : zp1l
.0f0b	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0f0d	68		          pla            ; stack :
.0f0e	85 fb		          sta  zpage1    ; get zpage1 High byte
.0f10	ad 25 0f	          lda  pc+1      ; get pch
.0f13	48		          pha            ; stack : pch
.0f14	ad 24 0f	          lda  pc
.0f17	48		          pha            ; stack : pcl, pch
.0f18	ad 22 0f	          lda  rp        ; get rp
.0f1b	48		          pha            ; stack : rp, pcl, pch
.0f1c	ad 23 0f	          lda  ra        ; set ra
.0f1f	58		          cli
.0f20	28		          plp            ; stack : pcl, pch
.0f21	60		          rts
>0f22	00		rp        .byte     0
>0f23	00		ra        .byte     0
>0f24	00 00		pc        .word     0

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0f26			blkfill
.0f26	20 b0 0e	bf0            jsr  push
.0f29	20 e7 0f	               jsr  savezp1
.0f2c	84 fc		               sty  zpage1+1
.0f2e	a0 00		               ldy  #$00
.0f30	84 fb		               sty  zpage1
.0f32	91 fb		bf1            sta  (zpage1),y
.0f34	c8		               iny
.0f35	d0 fb		               bne  bf1
.0f37	20 f6 0f	               jsr  restzp1
.0f3a	20 ef 0e	               jsr  pop
.0f3d	60		               rts
.0f3e			memfill
.0f3e	20 b0 0e	               jsr  push
.0f41	20 26 0f	mf1            jsr  blkfill
.0f44	c8		               iny
.0f45	ca		               dex
.0f46	d0 f9		               bne  mf1
.0f48	20 ef 0e	               jsr  pop
.0f4b	60		               rts
.0f4c			memmove
.0f4c	20 b0 0e	               jsr  push
.0f4f	ba		               tsx            ; On se crée un pointeur ...
.0f50	8a		               txa
.0f51	18		               clc
.0f52	69 0b		               adc  #11
.0f54	a8		               tay
.0f55	a2 06		               ldx  #$06
.0f57	b9 00 01	nextbyte       lda  $0100,y
.0f5a	99 a6 0f	               sta  words,y
.0f5d	c8		               iny
.0f5e	ca		               dex
.0f5f	d0 f6		               bne  nextbyte
.0f61	ad a6 0f	               lda  s
.0f64	8d 7d 0f	               sta  source+1
.0f67	ad a7 0f	               lda  s+1
.0f6a	8d 7e 0f	               sta  source+2
.0f6d	ad a8 0f	               lda  d
.0f70	8d 7a 0f	               sta  destin+1
.0f73	ad a9 0f	               lda  d+1
.0f76	8d 7b 0f	               sta  destin+2
.0f79	ad ff ff	destin         lda  $ffff
.0f7c	8d ff ff	source         sta  $ffff
.0f7f	ee 7a 0f	               inc  destin+1
.0f82	d0 03		               bne  src
.0f84	ee 7b 0f	               inc  destin+2
.0f87	ee 7d 0f	src            inc  source+1
.0f8a	d0 03		               bne  cnt
.0f8c	ee 7e 0f	               inc  source+2
.0f8f	ad aa 0f	cnt            lda  compte
.0f92	d0 08		               bne  decit
.0f94	ad ab 0f	               lda  compte+1
.0f97	f0 09		               beq  fini
.0f99	ce ab 0f	               dec  compte+1
.0f9c	ce aa 0f	decit          dec  compte
.0f9f	4c 79 0f	               jmp  destin
.0fa2	20 ef 0e	fini           jsr  pop
.0fa5	60		               rts
.0fa6			words
>0fa6	00 00		s         .word     $0000
>0fa8	00 00		d         .word     $0000
>0faa	00 00		compte    .word     $0000
.0fac			decword
.0fac	20 b0 0e	               jsr  push
.0faf	86 fd		               stx  zpage2
.0fb1	84 fe		               sty  zpage2+1
.0fb3	20 ef 0e	               jsr  pop
.0fb6	60		               rts
.0fb7			inczp1
.0fb7	08		               php
.0fb8	48		               pha
.0fb9	e6 fb		               inc  zpage1
.0fbb	a5 fb		               lda  zpage1
.0fbd	d0 02		               bne  nopage
.0fbf	e6 fc		               inc  zpage1+1
.0fc1	68		nopage         pla
.0fc2	28		               plp
.0fc3	60		               rts
.0fc4			deczp1
.0fc4	08		                php
.0fc5	48		                pha
.0fc6	c6 fb		                dec  zpage1
.0fc8	d0 02		                bne  nopage
.0fca	c6 fc		                dec  zpage1+1
.0fcc	68		nopage          pla
.0fcd	28		                plp
.0fce	60		                rts
.0fcf			inczp2
.0fcf	08		               php
.0fd0	48		               pha
.0fd1	e6 fd		               inc  zpage2
.0fd3	a5 fd		               lda  zpage2
.0fd5	d0 02		               bne  nopage
.0fd7	e6 fe		               inc  zpage2+1
.0fd9	68		nopage         pla
.0fda	28		               plp
.0fdb	60		               rts
.0fdc			deczp2
.0fdc	08		               php
.0fdd	48		               pha
.0fde	a5 fd		               lda  zpage2
.0fe0	d0 02		               bne  nopage
.0fe2	c6 fe		               dec  zpage2+1
.0fe4	68		nopage         pla
.0fe5	28		               plp
.0fe6	60		               rts
.0fe7			savezp1
.0fe7	08		               php
.0fe8	48		               pha
.0fe9	a5 fb		               lda  zpage1
.0feb	8d 63 10	               sta  zp1
.0fee	a5 fc		               lda  zpage1+1
.0ff0	8d 64 10	               sta  zp1+1
.0ff3	68		               pla
.0ff4	28		               plp
.0ff5	60		               rts
.0ff6			restzp1
.0ff6	08		               php
.0ff7	48		               pha
.0ff8	ad 63 10	               lda zp1
.0ffb	85 fb		               sta zpage1
.0ffd	ad 64 10	               lda zp1+1
.1000	85 fc		               sta zpage1+1
.1002	68		               pla
.1003	28		               plp
.1004	60		               rts
.1005			savezp2
.1005	08		         php
.1006	48		         pha
.1007	a5 fd		         lda zpage2
.1009	8d 65 10	         sta zp2
.100c	a5 fe		         lda zpage2+1
.100e	8d 66 10	         sta zp2+1
.1011	68		         pla
.1012	28		         plp
.1013	60		         rts
.1014			restzp2
.1014	08		                php
.1015	48		                pha
.1016	ad 65 10	                lda  zp2
.1019	85 fd		                sta  zpage2
.101b	ad 66 10	                lda  zp2+1
.101e	85 fe		                sta  zpage2+1
.1020	68		                pla
.1021	28		                plp
.1022	60		                rts
.1023			xy2addr
.1023	08		                php
.1024	48		                pha
.1025	8a		                txa
.1026	48		                pha
.1027	98		                tya
.1028	48		                pha
.1029	ad 5e 10	                lda     addr1+1
.102c	8d 60 10	                sta     addr2+1
.102f	ad 5d 10	                lda     addr1
.1032	8d 5f 10	                sta     addr2
.1035	c0 00		                cpy     #$00
.1037	f0 0f		                beq     addx
.1039	18		moreline        clc
.103a	6d 5c 10	                adc     ymult
.103d	90 03		                bcc     norepy
.103f	ee 60 10	                inc     addr2+1
.1042	8d 5f 10	norepy          sta     addr2
.1045	88		                dey
.1046	d0 f1		                bne     moreline
.1048	8a		addx            txa
.1049	18		                clc
.104a	6d 5f 10	                adc     addr2
.104d	90 03		                bcc     thatsit
.104f	ee 60 10	                inc     addr2+1
.1052	8d 5f 10	thatsit         sta     addr2
.1055	68		                pla
.1056	a8		                tay
.1057	68		                pla
.1058	aa		                tax
.1059	68		                pla
.105a	28		                plp
.105b	60		                rts
>105c	28		ymult          .byte     40
>105d	00 00		addr1          .word     $0000
>105f	00 00		addr2          .word     $0000
>1061	00 00		bytecnt        .word     $0000
>1063	00 00		zp1        .word   $0000
>1065	00 00		zp2        .word   $0000

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1067	01		a2hexcol       .byte     1              ; pour aputscxy
>1068	00		a2hexbkcol     .byte     %00000000
.1069			a2hexpos
>1069	00		a2hexpx        .byte     0              ; pour aputsxy
>106a	00		a2hexpy        .byte     0
>106b	24		a2hexprefix    .byte     "$"            ; pour aputs
>106c	00 00		a2hexstr       .word     $00
>106e	00 00		               .word     $00
>1070	00		               .byte     0              ; 0 end string
>1071	30 30 30 30	abin           .null     "00000000"
>1075	30 30 30 30 00
>107a	20 20 20 00	adec           .null     "   "
.107e			putahexfmtxy
.107e	20 b0 0e	               jsr  push
.1081	20 cd 10	               jsr  atohex
.1084	ae 69 10	               ldx  a2hexpx
.1087	ac 6a 10	               ldy  a2hexpy
.108a	20 d9 0d	               jsr  gotoxy
.108d	a2 6b		               ldx  #<a2hexprefix
.108f	a0 10		               ldy  #>a2hexprefix
.1091	20 bf 0d	               jsr  puts
.1094	20 ef 0e	               jsr  pop
.1097	60		               rts
.1098			putahexfmt
.1098	20 b0 0e	               jsr  push
.109b	20 cd 10	               jsr  atohex
.109e	a2 6b		               ldx  #<a2hexprefix
.10a0	a0 10		               ldy  #>a2hexprefix
.10a2	20 bf 0d	               jsr  puts
.10a5	20 ef 0e	               jsr  pop
.10a8	60		               rts
.10a9			putahex
.10a9	20 b0 0e	               jsr  push
.10ac	20 cd 10	               jsr  atohex
.10af	a2 6c		               ldx  #<a2hexstr
.10b1	a0 10		               ldy  #>a2hexstr
.10b3	20 bf 0d	               jsr  puts
.10b6	20 ef 0e	               jsr  pop
.10b9	60		               rts
.10ba			nibtohex
.10ba	08		               php
.10bb	29 0f		               and  #$0f
.10bd	f8		               sed
.10be	18		               clc
.10bf	69 90		               adc  #$90
.10c1	69 40		               adc  #$40
.10c3	d8		               cld
.10c4	28		               plp
.10c5	60		               rts
.10c6			lsra4bits
.10c6	08		               php
.10c7	4a		               lsr
.10c8	4a		               lsr
.10c9	4a		               lsr
.10ca	4a		               lsr
.10cb	28		               plp
.10cc	60		               rts
.10cd			atohex
.10cd	08		               php
.10ce	48		               pha
.10cf	48		               pha
.10d0	20 c6 10	               jsr  lsra4bits
.10d3	20 ba 10	               jsr  nibtohex
.10d6	8d 6c 10	               sta  a2hexstr
.10d9	68		               pla
.10da	20 ba 10	               jsr  nibtohex
.10dd	8d 6d 10	               sta  a2hexstr+1
.10e0	a9 00		               lda  #$00                ; set end of string
.10e2	8d 6e 10	               sta  a2hexstr+2
.10e5	68		               pla
.10e6	28		               plp
.10e7	60		               rts
.10e8			xy2hex
.10e8	20 b0 0e	               jsr  push
.10eb	20 cd 10	               jsr  atohex
.10ee	8a		               txa
.10ef	48		               pha
.10f0	20 c6 10	               jsr  lsra4bits
.10f3	20 ba 10	               jsr  nibtohex
.10f6	8d 6c 10	               sta  a2hexstr
.10f9	68		               pla
.10fa	20 ba 10	               jsr  nibtohex
.10fd	8d 6d 10	               sta  a2hexstr+1
.1100	98		               tya
.1101	48		               pha
.1102	20 c6 10	               jsr  lsra4bits
.1105	20 ba 10	               jsr  nibtohex
.1108	8d 6e 10	               sta  a2hexstr+2
.110b	68		               pla
.110c	20 ba 10	               jsr  nibtohex
.110f	8d 6f 10	               sta  a2hexstr+3
.1112	a9 00		               lda  #$00                ; 0 ended string
.1114	8d 70 10	               sta  a2hexstr+4
.1117	20 ef 0e	               jsr  pop
.111a			atobin
.111a	20 b0 0e	               jsr  push
.111d	a2 08		               ldx  #8
.111f	a0 00		               ldy  #0
.1121	18		               clc
.1122	2a		nextbit        rol
.1123	48		               pha
.1124	69 00		               adc  #$00
.1126	29 01		               and  #$01
.1128	20 ba 10	               jsr  nibtohex
.112b	99 71 10	               sta  abin,y
.112e	68		               pla
.112f	c8		               iny
.1130	ca		               dex
.1131	d0 ef		               bne  nextbit
.1133	a9 00		               lda  #0
.1135	99 71 10	               sta  abin,y
.1138	20 ef 0e	               jsr  pull
.113b	60		               rts
.113c			putabin
.113c	20 1a 11	               jsr     atobin
.113f	20 b0 0e	               jsr     push
.1142	a2 71		               ldx     #<abin
.1144	a0 10		               ldy     #>abin
.1146	20 bf 0d	               jsr     puts
.1149	20 ef 0e	               jsr     pop
.114c	60		               rts
.114d			printabin
.114d	20 b0 0e	               jsr     push
.1150	a2 71		               ldx     #<abin
.1152	a0 10		               ldy     #>abin
.1154	20 bf 0d	               jsr     puts
.1157	20 ef 0e	               jsr     pop
.115a	60		               rts
.115b			putabinfmt
.115b	08		               php
.115c	48		               pha
.115d	a9 25		               lda     #"%"
.115f	20 b9 0d	               jsr     putch
.1162	68		               pla
.1163	20 3c 11	               jsr     putabin
.1166	28		               plp
.1167	60		               rts
.1168			putabinxy
.1168	20 d9 0d	               jsr     gotoxy
.116b	20 3c 11	               jsr     putabin
.116e	60		               rts
.116f			putabinfmtxy
.116f	20 d9 0d	               jsr     gotoxy
.1172	20 5b 11	               jsr     putabinfmt
.1175	60		               rts
.1176			atodec
.1176	20 b0 0e	               jsr  push
.1179	f8		               sed
.117a	aa		               tax
.117b	a0 00		               ldy  #$00
.117d	a9 00		               lda  #$00
.117f	18		nextbit        clc
.1180	69 01		               adc  #$01
.1182	90 01		               bcc  decx
.1184	c8		               iny
.1185	ca		decx           dex
.1186	d0 f7		               bne  nextbit
.1188	48		               pha
.1189	98		               tya
.118a	20 ba 10	               jsr  nibtohex
.118d	8d 7a 10	               sta  adec
.1190	68		               pla
.1191	48		               pha
.1192	20 ba 10	               jsr  nibtohex
.1195	8d 7c 10	               sta  adec+2
.1198	68		               pla
.1199	6a		               ror
.119a	6a		               ror
.119b	6a		               ror
.119c	6a		               ror
.119d	20 ba 10	               jsr  nibtohex
.11a0	8d 7b 10	               sta  adec+1
.11a3	d8		               cld
.11a4	20 ef 0e	               jsr  pull
.11a7	60		               rts
>11a8	00 00 00	buffer         .byte     0,0,0
.11ab			putadec
.11ab	20 b0 0e	               jsr  push
.11ae	20 76 11	               jsr  atodec
.11b1	a2 7a		               ldx  #<adec
.11b3	a0 10		               ldy  #>adec+1
.11b5	20 bf 0d	               jsr  puts
.11b8	20 ef 0e	               jsr  pop
.11bb	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>11bc	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>11c0	00 00 00 00 00 00 00 00 00 0d 00 00
>11cc	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>11d0	00 00 00 00 00 00 00 00 00 00 00 00
>11dc	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>11e0	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>11ec	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>11f0	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>11fc	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1200	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>120c	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1210	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>121c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1220	00 00 00 00 00 00 00 00 00 00 00 00
>122c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1230	00 00 00 00 00 00 00 00 00 00 00 00
>123c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1240	00 00 00 00 00 00 00 00 00 00 00 00
>124c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1250	00 00 00 00 00 00 00 00 00 00 00 00
>125c	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1260	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>126c	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1270	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>127c	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1280	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>128c	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1290	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>129c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>12a0	00 00 00 00 00 00 00 00 00 00 00 00
>12ac	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>12b0	00 00 00 00 00 00 00 00 00 00 00 00
.12bc			waitstop
.12bc	20 b0 0e	               jsr  push
.12bf	20 ed f6	wait           jsr  k_stop
.12c2	d0 fb		               bne  wait
.12c4	20 ef 0e	               jsr  pop
.12c7	60		               rts
.12c8			anykey
.12c8	08		               php
.12c9	48		               pha
.12ca	a5 cb		nokey          lda 203
.12cc	c9 40		               cmp #64
.12ce	f0 fa		               beq nokey
.12d0	20 d6 12	               jsr releasekey
.12d3	68		               pla
.12d4	28		               plp
.12d5	60		               rts
.12d6			releasekey
.12d6	08		               php
.12d7	48		               pha
.12d8	a5 cb		keypressed     lda 203
.12da	c9 40		               cmp #64
.12dc	d0 fa		               bne keypressed
.12de	68		               pla
.12df	28		               plp
.12e0	60		               rts
.12e1			getkey
.12e1	20 e4 ff	again          jsr  getin
.12e4	c9 00		               cmp  #0
.12e6	f0 f9		               beq  again
.12e8	60		               rts
.12e9			kbflushbuff
.12e9	08		               php
.12ea	48		               pha
.12eb	20 e4 ff	again          jsr  getin
.12ee	c9 00		               cmp  #0
.12f0	d0 f9		               bne  again
.12f2	68		               pla
.12f3	28		               plp
.12f4	60		               rts
.12f5			waitkey
.12f5	20 b0 0e	               jsr  push
.12f8	8d 46 13	               sta  thekey
.12fb	20 e4 ff	nope           jsr  getin
.12fe	20 d2 ff	               jsr  chrout
.1301	cd 46 13	               cmp  thekey
.1304	d0 f5		               bne  nope
.1306	20 d2 ff	               jsr  chrout
.1309	20 ef 0e	               jsr  pop
.130c	60		               rts
.130d			waitspace
.130d	20 b0 0e	               jsr  push
.1310	a9 7f		wait           lda  #$7f  ;%01111111
.1312	8d 00 dc	               sta  $dc00
.1315	ad 01 dc	               lda  $dc01
.1318	29 10		               and  #$10  ;mask %00010000
.131a	d0 f4		               bne  wait
.131c	20 ef 0e	               jsr  pop
.131f			waitsstop
.131f	20 b0 0e	               jsr  push
.1322	20 ed f6	wait           jsr  k_stop  ;%01111111
.1325	d0 fb		               bne  wait
.1327	20 ef 0e	               jsr  pop
.132a			waitreturn
.132a	20 b0 0e	               jsr  push
.132d	ad 47 13	               lda  thecount
.1330	8d 00 04	               sta  scrnram
.1333	a9 02		               lda  #$02
.1335	8d 00 d8	               sta  colorram
.1338	20 e4 ff	nope           jsr  getin
.133b	c9 0d		nohex          cmp  #$0d
.133d	d0 f9		               bne  nope
.133f	ee 47 13	               inc  thecount
.1342	20 ef 0e	               jsr  pop
.1345	60		               rts
>1346	00		thekey         .byte   0
>1347	01		thecount       .byte   $01

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.1348			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.1348	08		                php
.1349	8d 06 15	                sta  rega
.134c	68		                pla
.134d	8d 09 15	                sta  regp
.1350	8e 07 15	                stx  regx
.1353	8c 08 15	                sty  regy
.1356	ba		                tsx
.1357	8e 0a 15	                stx  regs
.135a	68		                pla
.135b	8d 0d 15	                sta  regpcl
.135e	8d 0e 15	                sta  regpcl2
.1361	68		                pla
.1362	8d 0b 15	                sta  regpch
.1365	8d 0c 15	                sta  regpch2
.1368	ad 06 15	                lda  rega
.136b	48		                pha
.136c	20 ba 10	                jsr  nibtohex
.136f	8d b0 14	                sta  vala+1
.1372	68		                pla
.1373	20 c6 10	                jsr  lsra4bits
.1376	20 ba 10	                jsr  nibtohex
.1379	8d af 14	                sta  vala
.137c	ad 08 15	                lda  regy
.137f	48		                pha
.1380	20 ba 10	                jsr  nibtohex
.1383	8d c4 14	                sta  valy+1
.1386	68		                pla
.1387	20 c6 10	                jsr  lsra4bits
.138a	20 ba 10	                jsr  nibtohex
.138d	8d c3 14	                sta  valy
.1390	ad 07 15	                lda  regx
.1393	48		                pha
.1394	20 ba 10	                jsr  nibtohex
.1397	8d ba 14	                sta  valx+1
.139a	68		                pla
.139b	20 c6 10	                jsr  lsra4bits
.139e	20 ba 10	                jsr  nibtohex
.13a1	8d b9 14	                sta  valx
.13a4	ad 09 15	                lda  regp
.13a7	48		                pha
.13a8	20 ba 10	                jsr  nibtohex
.13ab	8d ce 14	                sta  valp+1
.13ae	68		                pla
.13af	20 c6 10	                jsr  lsra4bits
.13b2	20 ba 10	                jsr  nibtohex
.13b5	8d cd 14	                sta  valp
.13b8	ad 0a 15	                lda  regs
.13bb	48		                pha
.13bc	20 ba 10	                jsr  nibtohex
.13bf	8d d8 14	                sta  vals+1
.13c2	68		                pla
.13c3	20 c6 10	                jsr  lsra4bits
.13c6	20 ba 10	                jsr  nibtohex
.13c9	8d d7 14	                sta  vals
.13cc	18		                clc
.13cd	ad 0e 15	                lda regpcl2
.13d0	69 01		                adc #$01
.13d2	8d 0e 15	                sta regpcl2
.13d5	ad 0e 15	                lda regpcl2
.13d8	d0 03		                bne noreport
.13da	ee 0c 15	                inc regpch2
.13dd	ad 0c 15	    noreport    lda regpch2
.13e0	48		                pha
.13e1	20 ba 10	                jsr  nibtohex
.13e4	8d e3 14	                sta  valpch+1
.13e7	68		                pla
.13e8	20 c6 10	                jsr  lsra4bits
.13eb	20 ba 10	                jsr  nibtohex
.13ee	8d e2 14	                sta  valpch
.13f1	ad 0e 15	                lda  regpcl2
.13f4	48		                pha
.13f5	20 ba 10	                jsr  nibtohex
.13f8	8d e5 14	                sta  valpcl+1
.13fb	68		                pla
.13fc	20 c6 10	                jsr  lsra4bits
.13ff	20 ba 10	                jsr  nibtohex
.1402	8d e4 14	                sta  valpcl
.1405	a5 fb		                lda  zpage1
.1407	48		                pha
.1408	20 ba 10	                jsr  nibtohex
.140b	8d f3 14	                sta  valz1l
.140e	68		                pla
.140f	20 c6 10	                jsr  lsra4bits
.1412	20 ba 10	                jsr  nibtohex
.1415	8d f4 14	                sta  valz1l+1
.1418	a5 fc		                lda  zpage1+1
.141a	48		                pha
.141b	20 ba 10	                jsr  nibtohex
.141e	8d f1 14	                sta  valz1h
.1421	68		                pla
.1422	20 c6 10	                jsr  lsra4bits
.1425	20 ba 10	                jsr  nibtohex
.1428	8d f2 14	                sta  valz1h+1
.142b	a5 fd		                lda  zpage2
.142d	48		                pha
.142e	20 ba 10	                jsr  nibtohex
.1431	8d 02 15	                sta  valz2l
.1434	68		                pla
.1435	20 c6 10	                jsr  lsra4bits
.1438	20 ba 10	                jsr  nibtohex
.143b	8d 03 15	                sta  valz2l+1
.143e	a5 fe		                lda  zpage2+1
.1440	48		                pha
.1441	20 ba 10	                jsr  nibtohex
.1444	8d 00 15	                sta  valz2h
.1447	68		                pla
.1448	20 c6 10	                jsr  lsra4bits
.144b	20 ba 10	                jsr  nibtohex
.144e	8d 01 15	                sta  valz2h+1
.1451	20 a0 0e	                jsr  setinverse
.1454	78		                sei
.1455	a2 a8		                ldx  #<srega
.1457	a0 14		                ldy  #>srega+1
.1459	20 48 0e	                jsr  putscxy
.145c	a2 b2		                ldx  #<sregx
.145e	a0 14		                ldy  #>sregx+1
.1460	20 48 0e	                jsr  putscxy
.1463	a2 bc		                ldx  #<sregy
.1465	a0 14		                ldy  #>sregy+1
.1467	20 48 0e	                jsr  putscxy
.146a	a2 c6		                ldx  #<sregp
.146c	a0 14		                ldy  #>sregp+1
.146e	20 48 0e	                jsr  putscxy
.1471	a2 d0		                ldx  #<sregs
.1473	a0 14		                ldy  #>sregs+1
.1475	20 48 0e	                jsr  putscxy
.1478	a2 da		                ldx  #<sregpc
.147a	a0 14		                ldy  #>sregpc+1
.147c	20 48 0e	                jsr  putscxy
.147f	a2 e8		                ldx  #<sregz1
.1481	a0 14		                ldy  #>sregz1+1
.1483	20 48 0e	                jsr  putscxy
.1486	a2 f7		                ldx  #<sregz2
.1488	a0 14		                ldy  #>sregz2+1
.148a	20 48 0e	                jsr  putscxy
.148d	58		                cli
.148e	20 a8 0e	                jsr  clrinverse
.1491	ad 0b 15	                lda  regpch
.1494	48		                pha
.1495	ad 0d 15	                lda  regpcl
.1498	48		                pha
.1499	ac 08 15	                ldy  regy
.149c	ae 07 15	                ldx  regx
.149f	ad 09 15	                lda  regp
.14a2	48		                pha
.14a3	ad 06 15	                lda  rega
.14a6	28		                plp
.14a7	60		                rts
>14a8	01 00 17	srega   .byte   colr,coln,line
>14ab	20 41 3a 24	        .text   ' a:$' ;4,24
>14af	00 00 00	vala    .byte   0,0,0
>14b2	01 06 17	sregx   .byte   colr,coln+6,line
>14b5	20 58 3a 24	        .text   ' x:$' ;4,24
>14b9	00 00 00	valx    .byte   0,0,0
>14bc	01 0c 17	sregy   .byte   colr,coln+12,line
>14bf	20 59 3a 24	        .text   ' y:$' ;4,24
>14c3	00 00 00	valy    .byte   0,0,0
>14c6	01 12 17	sregp   .byte   colr,coln+18,line
>14c9	20 50 3a 24	        .text   ' p:$' ;4,24
>14cd	00 00 00	valp    .byte   0,0,0
>14d0	01 18 17	sregs   .byte   colr,coln+24,line
>14d3	20 53 3a 24	        .text   ' s:$' ;4,24
>14d7	00 00 00	vals    .byte   0,0,0
>14da	01 1e 17	sregpc  .byte   colr,coln+30,line
>14dd	20 50 43 3a	        .text   ' pc:$' ;4,24
>14e1	24
>14e2	00 00		valpch  .byte   0,0
>14e4	00 00 20 00	valpcl  .byte   0,0,32,0
>14e8	01 03 18	sregz1  .byte   colr,coln+3,line+1
>14eb	20 5a 50 31	        .text   ' zp1:$' ;4,24
>14ef	3a 24
>14f1	00 00		valz1h  .byte   0,0
>14f3	00 00 20 00	valz1l  .byte   0,0,32,0
>14f7	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>14fa	20 5a 50 32	        .text   ' zp2:$' ;4,24
>14fe	3a 24
>1500	00 00		valz2h  .byte   0,0
>1502	00 00 20 00	valz2l  .byte   0,0,32,0
>1506	00		rega    .byte   0
>1507	00		regx    .byte   0
>1508	00		regy    .byte   0
>1509	00		regp    .byte   0
>150a	00		regs    .byte   0
>150b	00		regpch  .byte   0
>150c	00		regpch2 .byte   0
>150d	00		regpcl  .byte   0
>150e	00		regpcl2 .byte   0
>150f	00		vzp1h   .byte   0
>1510	00		vzp1l   .byte   0
>1511	00		vzp2h   .byte   0
>1512	00		vzp2l   .byte   0

;******  Return to file: essai01.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L essai01.txt -o essai01.prg essai01.asm
; Mon Apr  7 21:55:14 2025

;Offset	;Hex		;Source

;******  Processing input file: essai01.asm

="20250405-231555 a"	                Version = "20250405-231555 a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 46 0b	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macro-c64-ultimateii.asm


;******  Return to file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm

=$df1c			uiictrlreg	=	$df1c	;(Write)				* CONTROL REGISTER *
=$00								uiiidle		=	$00
=$01								uiicmdbusy	=	$01
=$02								uiidatalast	=	$02
=$03								uiidatamore	=	$03
=$df1c			uiicmdstat	=	$df1c	;(Read)	default $00	* CMD STATUS REGISTER *
=$df1d			uiicmddata	=	$df1d	;(Write)				* COMMAND DATA REGISTER *
=$df1d			uiiidenreg	=	$df1d	;(Read)	default $c9	* API ID REGISTER *
=$df1e			uiirxdata		=	$df1e	;(Read only)			* DATA REGISTER *
=$df1f			uiidatastat	=	$df1f	;(Read only)			* DATA STATUS REGISTER *
=$01			uii_identify	=	$01	; $01 $01 -> Read Id String as "ULTIMATE-II DOS V1.0"
=$02			uii_file_open	=	$02	; Open file for ...
=$01			uii_fa_read	=	$01	; $01 $02 $01 <filename> -> ... reading.
=$02			uii_fa_write	=	$02	; $01 $02 $02 <filename> -> ... writing.
=$04			uii_fa_new	=	$04	; $01 $02 $04 <filename> -> ... creating/writing.
=$08			uii_fa_ovwri	=	$08	; $01 $02 $08 <filename> -> ... overwriting.
=$03			uii_file_close	=	$03	; $01 $03 -> close opened file.
=$04			uii_read_data	= 	$04  ; $01 $04 [len_lo] [len_hi]
=$05			uii_writ_data	=	$05	; $01 $05 [dummy] [dummy] [data...]
=$06			uii_file_seek	=	$06	; $01 $06 [posl] [posml] [posmh] [posh].
=$07			uii_file_info 	=	$07	; $01 $07 -> returns current open file info.
=$08			uii_file_stat  = 	$08	; $01 $08 <filename> -> returns file info.
=$09			uii_file_del	=	$09	; $01 $09 <filename> -> delete/scratch file.
=$0a			uii_file_ren	=	$0a	; $01 $0a <filename> $00 <newname>
=$0b			uii_file_copy	=	$0b	; $01 $0b <source> $00 <destination>
=$11			uii_dir_change = 	$11	; $01 $11 <directory name>
=$12			uii_dir_pwd	=	$12	; $01 $12
=$13			uii_dir_open	=	$13	; $01 $13
=$14			uii_dir_read	=	$14  ; $01 $14
=$15			uii_dir_cp_ui	=	$15	; $01 $15 -> makes UI current path as API current path.
=$16			uii_dir_mkdir	=	$16	; $01 $16 <dirname> -> Create directory under current.
=$17			uii_dir_home	=	$17	; $01 $17 -> makes UI home path as API current path.
=$21			uii_reu_load	=	$21
=$22			uii_reu_save	=	$22
=$23			uii_dsk_mount	=	$23	; $01 $23 <id> <filename>
=$24			uii_dsk_umount = 	$24	; $01 $24 <id>
=$25			uii_dsk_swap 	= 	$25	; $01 $25 <id>
=$26			uii_time_get	=	$26	; $01 $26 [id] -> returns current RTC time/date.
=$27			uii_time_set	=	$27	; $01 $27 <Y> <M> <D> <H> <M> <S>
=$f0			uii_dos_echo	= 	$f0	; $01 $f0
>0854	01 01 00	uiicmdgetid       	.byte     $01,$01,$00
>0857	01 26 00	uiicmdgettime		.byte	$01,$26,$00
>085a			rxbuffer         .fill     256
>095a	00		rxbstart         .byte     0
>095b	00		rxbend           .byte     0
>095c	00		rxbflag          .byte     0
>095d			txbuffer         .fill     256
>0a5d	00		txbstart         .byte     0
>0a5e	00		txbend           .byte     0
>0a5f	00		txbflag          .byte     0
.0a60			uiifisbusy
.0a60	48					pha
.0a61	ad 1c df				lda	uiicmdstat
.0a64	29 01					and	#%00000001	; Mask bit 0 of the command status register.
.0a66	49 01					eor	#%00000001	; Reverse Logic  BEQ if Busy, BNE if free.
.0a68	68					pla
.0a69	60					rts
.0a6a			uiifbusywait
.0a6a	08					php
.0a6b	20 60 0a	wait			jsr	uiifisbusy
.0a6e	f0 fb					beq	wait			; Waiting for Busy to disappear.
.0a70	28					plp
.0a71	60					rts
.0a72			uiifisdataacc
.0a72	48					pha
.0a73	ad 1f df				lda	uiidatastat
.0a76	29 02					and	#%00000010	; Mask bit 1 of the command status register.
.0a78	49 02					eor	#%00000010	; Reverse Logic  BEQ if Dacc, BNE if /Dacc.
.0a7a	68		out			pla
.0a7b	60					rts
.0a7c			uiifdaccwait
.0a7c	08					php
.0a7d	20 72 0a	wait			jsr 	uiifisdataacc
.0a80	d0 fb					bne	wait			; Waiting for Dacc to appears.
.0a82	28					plp
.0a83	60					rts
.0a84			uiifisabortp
.0a84	48					pha ; Bit 2
.0a85	ad 1c df				lda	uiicmdstat
.0a88	29 04					and	#%00000100	; Mask bit 2 of the command status register.
.0a8a	49 04					eor	#%00000100	; Rev. Logic   BEQ if Abort pending
.0a8c	68					pla
.0a8d	60					rts
.0a8e			uiifabortpwait
.0a8e	08					php
.0a8f	20 84 0a	wait			jsr 	uiifisabortp
.0a92	d0 fb					bne	wait			; Waiting for Dacc to appears.
.0a94	28					plp
.0a95	60					rts
.0a96			uiifiscerror
.0a96	48					pha ; Bit 3
.0a97	ad 1c df				lda	uiicmdstat
.0a9a	29 08					and	#%00001000	; Mask bit 3 of the command status register.
.0a9c	49 08					eor	#%00001000	; Rev. Logic   BEQ if ERROR
.0a9e	68					pla
.0a9f	60					rts
.0aa0			uiifgetcmdstat
.0aa0	08					php	; Bits 5,4
.0aa1	ad 1c df				lda	uiicmdstat
.0aa4	4a					lsr				; Shifting bits 4 position to the right.
.0aa5	4a					lsr				; Bits 5 and 4 are now in bits 1 and 0
.0aa6	4a					lsr
.0aa7	4a					lsr
.0aa8	29 03					and	#%00000011
.0aaa	28					plp
.0aab	60					rts
.0aac			uiifisrdataavail
.0aac	48					pha
.0aad	20 a0 0a	notyet		jsr	uiifgetcmdstat
.0ab0	29 02					and	#%00000010	; Mask bit 3 of the command status register.
.0ab2	49 02					eor	#%00000010	; Rev. Logic   BEQ if ERROR
.0ab4	68					pla
.0ab5	60					rts
.0ab6			uiifisstatdata
.0ab6	48					pha ; Bit 6
.0ab7	ad 1c df				lda	uiicmdstat
.0aba	29 40					and	#%01000000	; Mask bit 6 of the command status register.
.0abc	49 40					eor	#%01000000	; Rev. Logic   BEQ if stat data avail.
.0abe	68					pla
.0abf	60					rts
.0ac0			uiifisrespdata
.0ac0	48					pha ; Bit 7
.0ac1	ad 1c df				lda	uiicmdstat
.0ac4	29 80					and	#%10000000	; Mask bit 6 of the command status register.
.0ac6	49 80					eor	#%10000000	; Rev. Logic   BEQ if stat data avail.
.0ac8	68					pla
.0ac9	60					rts
.0aca			uiifsendpushcmd
.0aca	08					php
.0acb	48					pha
.0acc	a9 01					lda	#%00000001
.0ace	8d 1c df				sta	uiictrlreg
.0ad1	68					pla
.0ad2	28					plp
.0ad3	60					rts
.0ad4			uiifsenddataacc
.0ad4	08					php
.0ad5	48					pha
.0ad6	a9 02					lda	#%00000010
.0ad8	8d 1c df				sta	uiictrlreg
.0adb	68					pla
.0adc	28					plp
.0add	60					rts
.0ade			uiifsendabort
.0ade	08					php
.0adf	48					pha
.0ae0	a9 04					lda	#%00000100
.0ae2	8d 1c df				sta	uiictrlreg
.0ae5	68					pla
.0ae6	28					plp
.0ae7	60					rts
.0ae8			uiifwaitidle
.0ae8	08					php
.0ae9	20 a0 0a	notyet		jsr	uiifgetcmdstat
.0aec	c9 00					cmp	#$00
.0aee	d0 f9					bne	notyet
.0af0	28					plp
.0af1	60					rts
.0af2			uiifismoredata
.0af2	48					pha
.0af3	20 a0 0a				jsr	uiifgetcmdstat
.0af6	29 02					and	#%00000010
.0af8	49 02					eor	#%00000010
.0afa	68					pla
.0afb	60					rts
.0afc			uiifputcmdbyte
.0afc	20 6a 0a				jsr 	uiifbusywait
.0aff	8d 1d df				sta	uiicmddata
.0b02	60					rts
.0b03			uiifsndcmd
.0b03	20 f5 10				jsr	push
.0b06	86 fb					stx	zpage1
.0b08	84 fc					sty	zpage1+1
.0b0a	a0 00					ldy	#$00
.0b0c	b1 fb		next			lda	(zpage1),y
.0b0e	f0 07					beq	finish
.0b10	20 fc 0a				jsr	uiifputcmdbyte
.0b13	c8					iny
.0b14	4c 0c 0b				jmp	next
.0b17	a9 01		finish		lda	#$01
.0b19	8d 1c df				sta	uiictrlreg
.0b1c	20 34 11				jsr	pop
.0b1f	60					rts
.0b20			uiifreadrxdata
.0b20	08					php
.0b21	20 6a 0a				jsr	uiifbusywait
.0b24	20 ac 0a				jsr	uiifisrdataavail
.0b27	f0 06					beq	nodata
.0b29	ad 1e df				lda	uiirxdata
.0b2c	4c 31 0b				jmp	outdata
.0b2f	a9 00		nodata		lda	#$00
.0b31	28		outdata		plp
.0b32	60					rts
.0b33			uiifreadsdata
.0b33	08					php
.0b34	20 6a 0a				jsr	uiifbusywait
.0b37	20 b6 0a				jsr	uiifisstatdata
.0b3a	f0 06					beq	nodata
.0b3c	ad 1f df				lda	uiidatastat
.0b3f	4c 44 0b				jmp	outdata
.0b42	a9 00		nodata		lda	#$00
.0b44	28		outdata		plp
.0b45	60					rts

;******  Return to file: essai01.asm

.0b46			main
.0b46	20 c7 0f	               jsr scrmaninit
.0b49	08		               php
.0b4a	48		               pha
.0b4b	a9 0e		               lda  #14
.0b4d	8d e6 0f	               sta  characterset
.0b50	20 d2 ff	               jsr  $ffd2
.0b53	68		               pla
.0b54	28		               plp
.0b55	08		               php
.0b56	48		               pha
.0b57	a9 08		               lda  #$08
.0b59	20 d2 ff	               jsr  $ffd2
.0b5c	68		               pla
.0b5d	28		               plp
.0b5e	20 f5 10	               jsr  push
.0b61	48		               pha
.0b62	a9 05		               lda  #cvert
.0b64	8d 20 d0	               sta  $d020
.0b67	68		               pla
.0b68	48		               pha
.0b69	a9 06		               lda  #cbleu
.0b6b	8d 21 d0	               sta  $d021
.0b6e	68		               pla
.0b6f	48		               pha
.0b70	a9 01		               lda  #cblanc
.0b72	8d 86 02	               sta  bascol
.0b75	68		               pla
.0b76	20 34 11	               jsr  pull
.0b79	20 27 0c	               jsr essai01
.0b7c	08		               php
.0b7d	48		               pha
.0b7e	a9 09		               lda  #$09
.0b80	20 d2 ff	               jsr  $ffd2
.0b83	68		               pla
.0b84	28		               plp
.0b85	08		               php
.0b86	48		               pha
.0b87	a9 8e		               lda  #b_uppercase
.0b89	8d e6 0f	               sta  characterset
.0b8c	20 d2 ff	               jsr  $ffd2
.0b8f	68		               pla
.0b90	28		               plp
.0b91	20 e7 0f	               jsr  cls
.0b94	20 f5 10	               jsr  push
.0b97	48		               pha
.0b98	a9 05		               lda  #cvert
.0b9a	8d 20 d0	               sta  $d020
.0b9d	68		               pla
.0b9e	48		               pha
.0b9f	a9 06		               lda  #cbleu
.0ba1	8d 21 d0	               sta  $d021
.0ba4	68		               pla
.0ba5	48		               pha
.0ba6	a9 01		               lda  #cblanc
.0ba8	8d 86 02	               sta  bascol
.0bab	68		               pla
.0bac	20 34 11	               jsr  pull
.0baf			aide
.0baf	08		               php
.0bb0	48		               pha
.0bb1	a9 0e		               lda  #14
.0bb3	8d e6 0f	               sta  characterset
.0bb6	20 d2 ff	               jsr  $ffd2
.0bb9	68		               pla
.0bba	28		               plp
.0bbb	20 e7 0f	               jsr cls
.0bbe	20 f5 10	               jsr  push
.0bc1	a2 c1		               ldx  #<line
.0bc3	a0 0e		               ldy  #>line
.0bc5	20 04 10	               jsr  puts
.0bc8	20 34 11	               jsr  pull
.0bcb	20 f5 10	               jsr  push
.0bce	a2 29		               ldx  #<headera
.0bd0	a0 0d		               ldy  #>headera
.0bd2	20 04 10	               jsr  puts
.0bd5	20 34 11	               jsr  pull
.0bd8	20 f5 10	               jsr  push
.0bdb	a2 9c		               ldx  #<headerb
.0bdd	a0 0d		               ldy  #>headerb
.0bdf	20 04 10	               jsr  puts
.0be2	20 34 11	               jsr  pull
.0be5	20 f5 10	               jsr  push
.0be8	a2 c1		               ldx  #<line
.0bea	a0 0e		               ldy  #>line
.0bec	20 04 10	               jsr  puts
.0bef	20 34 11	               jsr  pull
.0bf2	20 f5 10	               jsr  push
.0bf5	a2 c1		               ldx  #<line
.0bf7	a0 0e		               ldy  #>line
.0bf9	20 04 10	               jsr  puts
.0bfc	20 34 11	               jsr  pull
.0bff	20 f5 10	               jsr  push
.0c02	a2 f7		               ldx  #<shortcuts
.0c04	a0 0d		               ldy  #>shortcuts
.0c06	20 04 10	               jsr  puts
.0c09	20 34 11	               jsr  pull
.0c0c	20 f5 10	               jsr  push
.0c0f	a2 71		               ldx  #<aidetext
.0c11	a0 0e		               ldy  #>aidetext
.0c13	20 04 10	               jsr  puts
.0c16	20 34 11	               jsr  pull
.0c19	20 f5 10	               jsr  push
.0c1c	a2 c1		               ldx  #<line
.0c1e	a0 0e		               ldy  #>line
.0c20	20 04 10	               jsr  puts
.0c23	20 34 11	               jsr  pull
.0c26	60		               rts
.0c27			essai01
.0c27	08		               php
.0c28	48		               pha
.0c29	20 e7 0f	               jsr  cls
.0c2c	20 82 0c	               jsr  printstatic
.0c2f	20 f5 10	               jsr  push
.0c32	a2 13		               ldx  #<lbluiiidenreg
.0c34	a0 0f		               ldy  #>lbluiiidenreg
.0c36	20 8d 10	               jsr  putscxy
.0c39	20 34 11	               jsr  pull
.0c3c	ad 1d df	               lda  uiiidenreg
.0c3f	20 dd 12	               jsr  putahexfmt
.0c42	20 f5 10	               jsr  push
.0c45	a2 54		               ldx  #<uiicmdgetid
.0c47	a0 08		               ldy  #>uiicmdgetid
.0c49	20 03 0b	               jsr  uiifsndcmd
.0c4c	20 34 11	               jsr  pull
.0c4f	20 f5 10	               jsr  push
.0c52	a2 bb		               ldx  #<txtrespponse
.0c54	a0 0f		               ldy  #>txtrespponse
.0c56	20 8d 10	               jsr  putscxy
.0c59	20 34 11	               jsr  pull
.0c5c	20 20 0b	moredata       jsr  uiifreadrxdata
.0c5f	c9 00		               cmp  #$00
.0c61	f0 10		               beq  nodata
.0c63	c9 00		               cmp  #$00
.0c65	f0 06		               beq  putit
.0c67	c9 27		               cmp  #$27
.0c69	90 02		               bcc  putit
.0c6b	09 20		               ora  #%00100000
.0c6d	20 fe 0f	putit          jsr  putch
.0c70	4c 5c 0c	               jmp  moredata
.0c73	20 d4 0a	nodata         jsr  uiifsenddataacc
.0c76	20 e4 0c	               jsr  updatestatus
.0c79	20 8d 15	               jsr  showregs
.0c7c	20 0d 15	               jsr  anykey
.0c7f	68		               pla
.0c80	28		               plp
.0c81	60		               rts
.0c82			printstatic
.0c82	20 f5 10	               jsr  push
.0c85	20 f5 10	               jsr  push
.0c88	a2 f9		               ldx  #<lbluiititle
.0c8a	a0 0e		               ldy  #>lbluiititle
.0c8c	20 8d 10	               jsr  putscxy
.0c8f	20 34 11	               jsr  pull
.0c92	20 f5 10	               jsr  push
.0c95	a2 13		               ldx  #<lbluiiidenreg
.0c97	a0 0f		               ldy  #>lbluiiidenreg
.0c99	20 8d 10	               jsr  putscxy
.0c9c	20 34 11	               jsr  pull
.0c9f	20 f5 10	               jsr  push
.0ca2	a2 33		               ldx  #<lbluiistatreg
.0ca4	a0 0f		               ldy  #>lbluiistatreg
.0ca6	20 8d 10	               jsr  putscxy
.0ca9	20 34 11	               jsr  pull
.0cac	20 f5 10	               jsr  push
.0caf	a2 97		               ldx  #<defuiistatreg
.0cb1	a0 0f		               ldy  #>defuiistatreg
.0cb3	20 8d 10	               jsr  putscxy
.0cb6	20 34 11	               jsr  pull
.0cb9	20 f5 10	               jsr  push
.0cbc	a2 73		               ldx  #<lbluiirspdata
.0cbe	a0 0f		               ldy  #>lbluiirspdata
.0cc0	20 8d 10	               jsr  putscxy
.0cc3	20 34 11	               jsr  pull
.0cc6	20 f5 10	               jsr  push
.0cc9	a2 53		               ldx  #<lbluiistadata
.0ccb	a0 0f		               ldy  #>lbluiistadata
.0ccd	20 8d 10	               jsr  putscxy
.0cd0	20 34 11	               jsr  pull
.0cd3	20 f5 10	               jsr  push
.0cd6	a2 ab		               ldx  #<defuiistadata
.0cd8	a0 0f		               ldy  #>defuiistadata
.0cda	20 8d 10	               jsr  putscxy
.0cdd	20 34 11	               jsr  pull
.0ce0	20 34 11	               jsr  pop
.0ce3	60		               rts
.0ce4			updatestatus
.0ce4	20 f5 10	               jsr  push
.0ce7	a9 03		               lda  #$03
.0ce9	8d ac 12	               sta  a2hexcol
.0cec	20 f5 10	               jsr  push
.0cef	a2 a3		               ldx  #<txtuiistatreg
.0cf1	a0 0f		               ldy  #>txtuiistatreg
.0cf3	20 8d 10	               jsr  putscxy
.0cf6	20 34 11	               jsr  pull
.0cf9	ad 1c df	               lda  uiicmdstat
.0cfc	20 a0 13	               jsr  putabinfmt
.0cff	20 f5 10	               jsr  push
.0d02	a2 a7		               ldx  #<txtuiirspdata
.0d04	a0 0f		               ldy  #>txtuiirspdata
.0d06	20 8d 10	               jsr  putscxy
.0d09	20 34 11	               jsr  pull
.0d0c	ad 1e df	               lda  uiirxdata
.0d0f	20 a0 13	               jsr  putabinfmt
.0d12	20 f5 10	               jsr  push
.0d15	a2 b7		               ldx  #<txtuiistadata
.0d17	a0 0f		               ldy  #>txtuiistadata
.0d19	20 8d 10	               jsr  putscxy
.0d1c	20 34 11	               jsr  pull
.0d1f	ad 1f df	               lda  uiidatastat
.0d22	20 a0 13	               jsr  putabinfmt
.0d25	20 34 11	               jsr  pop
.0d28	60		               rts

;******  Processing file: ./strings_fr.asm

.0d29			headera
>0d29	20 20 20 31	               .text          "   1541 Ultimate II + Premiers essais "
>0d2d	35 34 31 20 d5 4c 54 49 4d 41 54 45 20 c9 c9 20
>0d3d	2b 20 d0 52 45 4d 49 45 52 53 20 45 53 53 41 49
>0d4d	53 20
>0d4f	0d		               .byte     $0d
>0d50	20 c3 41 52	               .text          " Cartouche et API par Gideon Zweijtzer."
>0d54	54 4f 55 43 48 45 20 45 54 20 c1 d0 c9 20 50 41
>0d64	52 20 c7 49 44 45 4f 4e 20 da 57 45 49 4a 54 5a
>0d74	45 52 2e
>0d77	0d		               .byte     $0d
>0d78	20 20 20 20	               .text          "     API Version 1.0, 1er Feb 2013"
>0d7c	20 c1 d0 c9 20 d6 45 52 53 49 4f 4e 20 31 2e 30
>0d8c	2c 20 31 45 52 20 c6 45 42 20 32 30 31 33
>0d9a	0d 00		               .byte     $0d,0
>0d9c	20 20 20 20	headerb        .text          "               essai01 "
>0da0	20 20 20 20 20 20 20 20 20 20 20 45 53 53 41 49
>0db0	30 31 20
>0db3	0d		               .byte     $0d
>0db4	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0db8	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>0dc8	45 4c 20 cc 41 46 52 41 4e 43 45
>0dd3	0d		               .byte     $0d
>0dd4	20 20 20 20	               .text   format("       Version: %s",Version)
>0dd8	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>0de8	30 34 30 35 2d 32 33 31 35 35 35 20 41
>0df5	0d 00		               .byte     $0d,0
>0df7	0d		shortcuts      .byte     $0d
>0df8	91 91		               .byte     ucurkey,ucurkey
>0dfa	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>0dfe	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>0e02	1d
>0e03	20 d2 20 c1	               .text          " R A C C O U R C I S "
>0e07	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>0e17	20
>0e18	0d		               .byte     $0d
>0e19	20 45 53 53	               .text   format(" essai01..: SYS%05d ($%04X)",main, main)
>0e1d	41 49 30 31 2e 2e 3a 20 d3 d9 d3 30 32 38 38 36
>0e2d	20 28 24 30 c2 34 36 29
>0e35	0d		               .byte     $0d
>0e36	20 41 49 44	               .text   format(" aide.....: SYS%05d ($%04X)",aide, aide)
>0e3a	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 39 39 31
>0e4a	20 28 24 30 c2 c1 c6 29
>0e52	0d		               .byte     $0d
>0e53	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0e57	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 34 30 37 31
>0e67	20 28 24 30 c6 c5 37 29
>0e6f	0d 00		               .byte     $0d,0
>0e71	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d ($%04X)",essai01, essai01)
>0e75	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 33 31 31 31
>0e85	20 28 24 30 c3 32 37 29
>0e8d	0d 0d		               .byte     $0d, $0d
>0e8f	20 20 20 20	               .text   format("    ex.: SYS%05d",essai01)
>0e93	45 58 2e 3a 20 d3 d9 d3 30 33 31 31 31
>0ea0	0d		               .byte     $0d
>0ea1	20 20 20 20	               .text   format("    for i=0to100:SYS%05d:next",essai01)
>0ea5	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0eb5	30 33 31 31 31 3a 4e 45 58 54
>0ebf	0d 00		               .byte     $0d,0
>0ec1	20 c0 c0 c0	line           .byte     $20,192,192,192,192,192,192,192,192,192
>0ec5	c0 c0 c0 c0 c0 c0
>0ecb	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0ecf	c0 c0 c0 c0 c0 c0
>0ed5	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0ed9	c0 c0 c0 c0 c0 c0
>0edf	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192
>0ee3	c0 c0 c0 c0 c0
>0ee8	0d 00		               .byte     $0d,0
>0eea	50 52 45 53	uiiconnected   .null     "present"
>0eee	45 4e 54 00
>0ef2	41 42 53 45	uiiunconnected .null     "absent"
>0ef6	4e 54 00
=1			uiiy           =    1
=1			uiix           =    1
>0ef9	01 0a 01 12	lbluiititle    .byte     1,uiix+9,uiiy,18
>0efd	20 31 35 34	               .text     " 1541 Ultimate II + "
>0f01	31 20 d5 4c 54 49 4d 41 54 45 20 c9 c9 20 2b 20
>0f11	92 00		               .byte     146,0
>0f13	01 01 03	lbluiiidenreg  .byte     1,uiix ,uiiy+2
>0f16	c9 44 20 52	               .null     format("Id register ------ $%04X -> ", uiiidenreg)
>0f1a	45 47 49 53 54 45 52 20 2d 2d 2d 2d 2d 2d 20 24
>0f2a	c4 c6 31 c4 20 2d 3e 20 00
>0f33	01 01 05	lbluiistatreg  .byte     1,uiix ,uiiy+4
>0f36	c3 4d 44 20	               .null     format("Cmd status reg. -- $%04X -> ", uiicmdstat)
>0f3a	53 54 41 54 55 53 20 52 45 47 2e 20 2d 2d 20 24
>0f4a	c4 c6 31 c3 20 2d 3e 20 00
>0f53	01 01 07	lbluiistadata  .byte     1,uiix ,uiiy+6
>0f56	d2 45 53 50	               .null     format("Response data reg. $%04X -> ", uiirxdata)
>0f5a	4f 4e 53 45 20 44 41 54 41 20 52 45 47 2e 20 24
>0f6a	c4 c6 31 c5 20 2d 3e 20 00
>0f73	01 01 09	lbluiirspdata  .byte     1,uiix ,uiiy+8.
>0f76	c4 41 54 41	               .null     format("Data status reg. - $%04X -> ", uiidatastat)
>0f7a	20 53 54 41 54 55 53 20 52 45 47 2e 20 2d 20 24
>0f8a	c4 c6 31 c6 20 2d 3e 20 00
>0f93	03 1d 03 00	txtuiiidenreg  .byte     3,uiix+28,uiiy+2,0
>0f97	03 1e 04	defuiistatreg  .byte     3,uiix+29,uiiy+3
>0f9a	c1 c1 d3 d3	               .null     "AASSEPCB"
>0f9e	c5 d0 c3 c2 00
>0fa3	03 1d 05 00	txtuiistatreg  .byte     3,uiix+28,uiiy+4,0
>0fa7	03 1d 07 00	txtuiirspdata  .byte     3,uiix+28,uiiy+6,0
>0fab	03 1e 08	defuiistadata  .byte     3,uiix+29,uiiy+7
>0fae	c1 c1 d3 d3	               .null     "AASSEPCB"
>0fb2	c5 d0 c3 c2 00
>0fb7	03 1d 09 00	txtuiistadata  .byte     3,uiix+28,uiiy+8,0
>0fbb	03 0a 02 00	txtrespponse   .byte     3,uiix+9,uiiy+1,0

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0fbf	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0fc3	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0fc7			libtart

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0fc7			scrmaninit
.0fc7	20 f5 10	               jsr  push
.0fca	a9 06		               lda  #vbleu
.0fcc	8d 21 d0	               sta  vicbackcol
.0fcf	a9 05		               lda  #vvert
.0fd1	8d 20 d0	               sta  vicbordcol
.0fd4	a9 01		               lda  #vblanc
.0fd6	8d 86 02	               sta  bascol
.0fd9	ad 00 04	               lda  scrnram
.0fdc	8d 00 04	               sta  scrnram
.0fdf	20 e7 0f	               jsr  cls
.0fe2	20 34 11	               jsr  pop
.0fe5	60		               rts
>0fe6	8e		characterset   .byte b_uppercase
.0fe7			cls
.0fe7	08		               php
.0fe8	48		               pha
.0fe9	a9 93		               lda  #$93
.0feb	20 fe 0f	               jsr  putch
.0fee	68		               pla
.0fef	28		               plp
.0ff0	60		               rts
.0ff1			putnch
.0ff1	08		               php
.0ff2	e0 00		               cpx  #$00
.0ff4	f0 06		               beq  out
.0ff6	20 d2 ff	again          jsr  $ffd2
.0ff9	ca		               dex
.0ffa	d0 fa		               bne  again
.0ffc	28		out            plp
.0ffd	60		               rts
.0ffe			putch
.0ffe	08		               php
.0fff	20 d2 ff	               jsr  $ffd2
.1002	28		               plp
.1003	60		               rts
.1004			puts
.1004	20 f5 10	               jsr  push
.1007	86 fb		               stx  zpage1
.1009	84 fc		               sty  zpage1+1
.100b	a0 00		               ldy  #0
.100d	b1 fb		next           lda  (zpage1),y
.100f	f0 09		               beq  exit
.1011	20 fe 0f	               jsr  putch
.1014	20 fc 11	               jsr  inczp1
.1017	4c 0d 10	               jmp  next
.101a	20 34 11	exit           jsr  pop
.101d	60		               rts
.101e			gotoxy
.101e	08		               php
.101f	18		               clc
.1020	8a		               txa
.1021	48		               pha
.1022	98		               tya
.1023	aa		               tax
.1024	68		               pla
.1025	a8		               tay
.1026	20 f0 ff	               jsr  kplot
.1029	28		               plp
.102a	60		               rts
.102b			cursor
=$0286			bascol    =    $0286
.102b	08		               php            ;tourlou
.102c	48		               pha
.102d	90 12		               bcc  restore
.102f	20 f0 ff	               jsr  kplot
.1032	8c 53 10	               sty  cx
.1035	8e 54 10	               stx  cy
.1038	ad 86 02	               lda  bascol
.103b	8d 55 10	               sta  bcol
.103e	4c 50 10	               jmp  out
.1041	ae 54 10	restore        ldx  cy
.1044	ac 53 10	               ldy  cx
.1047	20 f0 ff	               jsr  kplot
.104a	ad 55 10	               lda  bcol
.104d	8d 86 02	               sta  bascol
.1050	68		out            pla
.1051	28		               plp
.1052	60		               rts
>1053	00		cx   .byte     $00
>1054	00		cy   .byte     $00
>1055	00		bcol .byte     $00
.1056			cursave
.1056	08		               php
.1057	38		               sec
.1058	20 2b 10	               jsr  cursor
.105b	28		               plp
.105c	60		               rts
.105d			curput
.105d	08		               php
.105e	18		               clc
.105f	20 2b 10	               jsr  cursor
.1062	28		               plp
.1063	60		               rts
.1064			putsxy
.1064	20 f5 10	               jsr  push
.1067	86 fb		               stx  zpage1
.1069	84 fc		               sty  zpage1+1
.106b	a0 00		               ldy  #$00
.106d	b1 fb		               lda  (zpage1),y
.106f	aa		               tax
.1070	20 fc 11	               jsr  inczp1
.1073	b1 fb		               lda  (zpage1),y
.1075	a8		               tay
.1076	20 1e 10	               jsr  gotoxy
.1079	20 fc 11	               jsr  inczp1
.107c	a6 fb		               ldx  zpage1
.107e	a4 fc		               ldy  zpage1+1
.1080	20 04 10	               jsr  puts
.1083	20 34 11	               jsr  pop
.1086	60		               rts
>1087	00 00		straddr   .word     $00
>1089	00		px        .byte     $00
>108a	00		py        .byte     $00
>108b	00 00		zp1       .word     $00
.108d			putscxy
.108d	20 f5 10	               jsr  push
.1090	84 fc		               sty  zpage1+1
.1092	86 fb		               stx  zpage1
.1094	ad 86 02	               lda  bascol
.1097	8d b7 10	               sta  bc
.109a	a0 00		               ldy #$00
.109c	b1 fb		               lda  (zpage1),y
.109e	8d 86 02	               sta  bascol
.10a1	20 fc 11	               jsr  inczp1
.10a4	a6 fb		               ldx  zpage1
.10a6	a4 fc		               ldy  zpage1+1
.10a8	20 64 10	               jsr  putsxy
.10ab	ad b7 10	               lda  bc
.10ae	8d 86 02	               sta  bascol
.10b1	20 34 11	               jsr  pop
.10b4	60		               rts
>10b5	00 00		straddr  .word      $00
>10b7	00		bc       .byte      $00
>10b8	00 00		zp1      .word      $00
.10ba			putrahex
.10ba	08		               php
.10bb	48		               pha
.10bc	20 12 13	               jsr  atohex
.10bf	a9 b1		               lda  #<a2hexstr
.10c1	a0 12		               ldy  #>a2hexstr
.10c3	20 04 10	               jsr  puts
.10c6	68		               pla
.10c7	28		               plp
.10c8	60		               rts
.10c9			kputrahexxy
.10c9			bputrahexxy
.10c9			putrahexxy
.10c9	08		               php
.10ca	20 12 13	               jsr  atohex
.10cd	a9 ae		               lda  #<a2hexpos
.10cf	a0 12		               ldy  #>a2hexpos
.10d1	20 64 10	               jsr  putsxy
.10d4	68		               pla
.10d5	28		               plp
.10d6	60		               rts
.10d7			putrahexcxy
.10d7	08		               php
.10d8	20 12 13	               jsr  atohex
.10db	a9 ae		               lda  #<a2hexpos
.10dd	a0 12		               ldy  #>a2hexpos
.10df	20 8d 10	               jsr  putscxy
.10e2	68		               pla
.10e3	28		               plp
.10e4	60		               rts
.10e5			setinverse
.10e5	48		               pha
.10e6	a9 12		               lda  #$12
.10e8	20 d2 ff	               jsr  $ffd2
.10eb	68		               pla
.10ec	60		               rts
.10ed			clrinverse
.10ed	48		               pha
.10ee	a9 92		               lda  #$92
.10f0	20 d2 ff	               jsr  $ffd2
.10f3	68		               pla
.10f4	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.10f5			push
.10f5	08		          php            ; stack : flg, pcl, pch
.10f6	78		          sei
.10f7	8d 31 11	          sta  ra        ; save a
.10fa	68		          pla            ; stack : pcl, pch
.10fb	8d 30 11	          sta  rp        ; save rp
.10fe	68		          pla            ; stack : pch
.10ff	8d 32 11	          sta  pc        ; save pcl
.1102	68		          pla            ; stack : -
.1103	8d 33 11	          sta  pc+1      ; save pch
.1106	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1108	48		          pha            ; stack : zp1l
.1109	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.110b	48		          pha            ; stack : zp1h, zp1l
.110c	a5 fd		          lda  zpage2    ; get zpage2 low byte
.110e	48		          pha            ; stack : zp2l, zp1h, zp1l
.110f	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1111	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1112	ad 30 11	          lda  rp        ; get rp
.1115	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1116	ad 31 11	          lda  ra        ; get a
.1119	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.111a	8a		          txa            ; get x
.111b	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.111c	98		          tya            ; get y
.111d	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.111e	ad 33 11	          lda  pc+1      ; get pch
.1121	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1122	ad 32 11	          lda  pc        ; get pcl
.1125	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1126	ad 30 11	          lda  rp        ; get rp
.1129	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.112a	ad 31 11	          lda  ra        ; get a
.112d	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.112e	58		          cli
.112f	60		          rts
>1130	00		rp        .byte     0
>1131	00		ra        .byte     0
>1132	00 00		pc        .word     0
.1134			pull
.1134			pop
.1134	78		          sei
.1135	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1136	8d 69 11	          sta  pc        ; save pcl
.1139	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.113a	8d 6a 11	          sta  pc+1      ; save pch
.113d	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.113e	a8		          tay            ; set y
.113f	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1140	aa		          tax            ; set x
.1141	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1142	8d 68 11	          sta  ra        ; save a
.1145	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1146	8d 67 11	          sta  rp        ; save rp
.1149	68		          pla            ; stack : zp2l, zp1h, zp1l
.114a	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.114c	68		          pla            ; stack : zp1h, zp1l
.114d	85 fd		          sta  zpage2    ; get zpage2 High byte
.114f	68		          pla            ; stack : zp1l
.1150	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1152	68		          pla            ; stack :
.1153	85 fb		          sta  zpage1    ; get zpage1 High byte
.1155	ad 6a 11	          lda  pc+1      ; get pch
.1158	48		          pha            ; stack : pch
.1159	ad 69 11	          lda  pc
.115c	48		          pha            ; stack : pcl, pch
.115d	ad 67 11	          lda  rp        ; get rp
.1160	48		          pha            ; stack : rp, pcl, pch
.1161	ad 68 11	          lda  ra        ; set ra
.1164	58		          cli
.1165	28		          plp            ; stack : pcl, pch
.1166	60		          rts
>1167	00		rp        .byte     0
>1168	00		ra        .byte     0
>1169	00 00		pc        .word     0

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.116b			blkfill
.116b	20 f5 10	bf0            jsr  push
.116e	20 2c 12	               jsr  savezp1
.1171	84 fc		               sty  zpage1+1
.1173	a0 00		               ldy  #$00
.1175	84 fb		               sty  zpage1
.1177	91 fb		bf1            sta  (zpage1),y
.1179	c8		               iny
.117a	d0 fb		               bne  bf1
.117c	20 3b 12	               jsr  restzp1
.117f	20 34 11	               jsr  pop
.1182	60		               rts
.1183			memfill
.1183	20 f5 10	               jsr  push
.1186	20 6b 11	mf1            jsr  blkfill
.1189	c8		               iny
.118a	ca		               dex
.118b	d0 f9		               bne  mf1
.118d	20 34 11	               jsr  pop
.1190	60		               rts
.1191			memmove
.1191	20 f5 10	               jsr  push
.1194	ba		               tsx            ; On se crée un pointeur ...
.1195	8a		               txa
.1196	18		               clc
.1197	69 0b		               adc  #11
.1199	a8		               tay
.119a	a2 06		               ldx  #$06
.119c	b9 00 01	nextbyte       lda  $0100,y
.119f	99 eb 11	               sta  words,y
.11a2	c8		               iny
.11a3	ca		               dex
.11a4	d0 f6		               bne  nextbyte
.11a6	ad eb 11	               lda  s
.11a9	8d c2 11	               sta  source+1
.11ac	ad ec 11	               lda  s+1
.11af	8d c3 11	               sta  source+2
.11b2	ad ed 11	               lda  d
.11b5	8d bf 11	               sta  destin+1
.11b8	ad ee 11	               lda  d+1
.11bb	8d c0 11	               sta  destin+2
.11be	ad ff ff	destin         lda  $ffff
.11c1	8d ff ff	source         sta  $ffff
.11c4	ee bf 11	               inc  destin+1
.11c7	d0 03		               bne  src
.11c9	ee c0 11	               inc  destin+2
.11cc	ee c2 11	src            inc  source+1
.11cf	d0 03		               bne  cnt
.11d1	ee c3 11	               inc  source+2
.11d4	ad ef 11	cnt            lda  compte
.11d7	d0 08		               bne  decit
.11d9	ad f0 11	               lda  compte+1
.11dc	f0 09		               beq  fini
.11de	ce f0 11	               dec  compte+1
.11e1	ce ef 11	decit          dec  compte
.11e4	4c be 11	               jmp  destin
.11e7	20 34 11	fini           jsr  pop
.11ea	60		               rts
.11eb			words
>11eb	00 00		s         .word     $0000
>11ed	00 00		d         .word     $0000
>11ef	00 00		compte    .word     $0000
.11f1			decword
.11f1	20 f5 10	               jsr  push
.11f4	86 fd		               stx  zpage2
.11f6	84 fe		               sty  zpage2+1
.11f8	20 34 11	               jsr  pop
.11fb	60		               rts
.11fc			inczp1
.11fc	08		               php
.11fd	48		               pha
.11fe	e6 fb		               inc  zpage1
.1200	a5 fb		               lda  zpage1
.1202	d0 02		               bne  nopage
.1204	e6 fc		               inc  zpage1+1
.1206	68		nopage         pla
.1207	28		               plp
.1208	60		               rts
.1209			deczp1
.1209	08		                php
.120a	48		                pha
.120b	c6 fb		                dec  zpage1
.120d	d0 02		                bne  nopage
.120f	c6 fc		                dec  zpage1+1
.1211	68		nopage          pla
.1212	28		                plp
.1213	60		                rts
.1214			inczp2
.1214	08		               php
.1215	48		               pha
.1216	e6 fd		               inc  zpage2
.1218	a5 fd		               lda  zpage2
.121a	d0 02		               bne  nopage
.121c	e6 fe		               inc  zpage2+1
.121e	68		nopage         pla
.121f	28		               plp
.1220	60		               rts
.1221			deczp2
.1221	08		               php
.1222	48		               pha
.1223	a5 fd		               lda  zpage2
.1225	d0 02		               bne  nopage
.1227	c6 fe		               dec  zpage2+1
.1229	68		nopage         pla
.122a	28		               plp
.122b	60		               rts
.122c			savezp1
.122c	08		               php
.122d	48		               pha
.122e	a5 fb		               lda  zpage1
.1230	8d a8 12	               sta  zp1
.1233	a5 fc		               lda  zpage1+1
.1235	8d a9 12	               sta  zp1+1
.1238	68		               pla
.1239	28		               plp
.123a	60		               rts
.123b			restzp1
.123b	08		               php
.123c	48		               pha
.123d	ad a8 12	               lda zp1
.1240	85 fb		               sta zpage1
.1242	ad a9 12	               lda zp1+1
.1245	85 fc		               sta zpage1+1
.1247	68		               pla
.1248	28		               plp
.1249	60		               rts
.124a			savezp2
.124a	08		         php
.124b	48		         pha
.124c	a5 fd		         lda zpage2
.124e	8d aa 12	         sta zp2
.1251	a5 fe		         lda zpage2+1
.1253	8d ab 12	         sta zp2+1
.1256	68		         pla
.1257	28		         plp
.1258	60		         rts
.1259			restzp2
.1259	08		                php
.125a	48		                pha
.125b	ad aa 12	                lda  zp2
.125e	85 fd		                sta  zpage2
.1260	ad ab 12	                lda  zp2+1
.1263	85 fe		                sta  zpage2+1
.1265	68		                pla
.1266	28		                plp
.1267	60		                rts
.1268			xy2addr
.1268	08		                php
.1269	48		                pha
.126a	8a		                txa
.126b	48		                pha
.126c	98		                tya
.126d	48		                pha
.126e	ad a3 12	                lda     addr1+1
.1271	8d a5 12	                sta     addr2+1
.1274	ad a2 12	                lda     addr1
.1277	8d a4 12	                sta     addr2
.127a	c0 00		                cpy     #$00
.127c	f0 0f		                beq     addx
.127e	18		moreline        clc
.127f	6d a1 12	                adc     ymult
.1282	90 03		                bcc     norepy
.1284	ee a5 12	                inc     addr2+1
.1287	8d a4 12	norepy          sta     addr2
.128a	88		                dey
.128b	d0 f1		                bne     moreline
.128d	8a		addx            txa
.128e	18		                clc
.128f	6d a4 12	                adc     addr2
.1292	90 03		                bcc     thatsit
.1294	ee a5 12	                inc     addr2+1
.1297	8d a4 12	thatsit         sta     addr2
.129a	68		                pla
.129b	a8		                tay
.129c	68		                pla
.129d	aa		                tax
.129e	68		                pla
.129f	28		                plp
.12a0	60		                rts
>12a1	28		ymult          .byte     40
>12a2	00 00		addr1          .word     $0000
>12a4	00 00		addr2          .word     $0000
>12a6	00 00		bytecnt        .word     $0000
>12a8	00 00		zp1        .word   $0000
>12aa	00 00		zp2        .word   $0000

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>12ac	01		a2hexcol       .byte     1              ; pour aputscxy
>12ad	00		a2hexbkcol     .byte     %00000000
.12ae			a2hexpos
>12ae	00		a2hexpx        .byte     0              ; pour aputsxy
>12af	00		a2hexpy        .byte     0
>12b0	24		a2hexprefix    .byte     "$"            ; pour aputs
>12b1	00 00		a2hexstr       .word     $00
>12b3	00 00		               .word     $00
>12b5	00		               .byte     0              ; 0 end string
>12b6	30 30 30 30	abin           .null     "00000000"
>12ba	30 30 30 30 00
>12bf	20 20 20 00	adec           .null     "   "
.12c3			putahexfmtxy
.12c3	20 f5 10	               jsr  push
.12c6	20 12 13	               jsr  atohex
.12c9	ae ae 12	               ldx  a2hexpx
.12cc	ac af 12	               ldy  a2hexpy
.12cf	20 1e 10	               jsr  gotoxy
.12d2	a2 b0		               ldx  #<a2hexprefix
.12d4	a0 12		               ldy  #>a2hexprefix
.12d6	20 04 10	               jsr  puts
.12d9	20 34 11	               jsr  pop
.12dc	60		               rts
.12dd			putahexfmt
.12dd	20 f5 10	               jsr  push
.12e0	20 12 13	               jsr  atohex
.12e3	a2 b0		               ldx  #<a2hexprefix
.12e5	a0 12		               ldy  #>a2hexprefix
.12e7	20 04 10	               jsr  puts
.12ea	20 34 11	               jsr  pop
.12ed	60		               rts
.12ee			putahex
.12ee	20 f5 10	               jsr  push
.12f1	20 12 13	               jsr  atohex
.12f4	a2 b1		               ldx  #<a2hexstr
.12f6	a0 12		               ldy  #>a2hexstr
.12f8	20 04 10	               jsr  puts
.12fb	20 34 11	               jsr  pop
.12fe	60		               rts
.12ff			nibtohex
.12ff	08		               php
.1300	29 0f		               and  #$0f
.1302	f8		               sed
.1303	18		               clc
.1304	69 90		               adc  #$90
.1306	69 40		               adc  #$40
.1308	d8		               cld
.1309	28		               plp
.130a	60		               rts
.130b			lsra4bits
.130b	08		               php
.130c	4a		               lsr
.130d	4a		               lsr
.130e	4a		               lsr
.130f	4a		               lsr
.1310	28		               plp
.1311	60		               rts
.1312			atohex
.1312	08		               php
.1313	48		               pha
.1314	48		               pha
.1315	20 0b 13	               jsr  lsra4bits
.1318	20 ff 12	               jsr  nibtohex
.131b	8d b1 12	               sta  a2hexstr
.131e	68		               pla
.131f	20 ff 12	               jsr  nibtohex
.1322	8d b2 12	               sta  a2hexstr+1
.1325	a9 00		               lda  #$00                ; set end of string
.1327	8d b3 12	               sta  a2hexstr+2
.132a	68		               pla
.132b	28		               plp
.132c	60		               rts
.132d			xy2hex
.132d	20 f5 10	               jsr  push
.1330	20 12 13	               jsr  atohex
.1333	8a		               txa
.1334	48		               pha
.1335	20 0b 13	               jsr  lsra4bits
.1338	20 ff 12	               jsr  nibtohex
.133b	8d b1 12	               sta  a2hexstr
.133e	68		               pla
.133f	20 ff 12	               jsr  nibtohex
.1342	8d b2 12	               sta  a2hexstr+1
.1345	98		               tya
.1346	48		               pha
.1347	20 0b 13	               jsr  lsra4bits
.134a	20 ff 12	               jsr  nibtohex
.134d	8d b3 12	               sta  a2hexstr+2
.1350	68		               pla
.1351	20 ff 12	               jsr  nibtohex
.1354	8d b4 12	               sta  a2hexstr+3
.1357	a9 00		               lda  #$00                ; 0 ended string
.1359	8d b5 12	               sta  a2hexstr+4
.135c	20 34 11	               jsr  pop
.135f			atobin
.135f	20 f5 10	               jsr  push
.1362	a2 08		               ldx  #8
.1364	a0 00		               ldy  #0
.1366	18		               clc
.1367	2a		nextbit        rol
.1368	48		               pha
.1369	69 00		               adc  #$00
.136b	29 01		               and  #$01
.136d	20 ff 12	               jsr  nibtohex
.1370	99 b6 12	               sta  abin,y
.1373	68		               pla
.1374	c8		               iny
.1375	ca		               dex
.1376	d0 ef		               bne  nextbit
.1378	a9 00		               lda  #0
.137a	99 b6 12	               sta  abin,y
.137d	20 34 11	               jsr  pull
.1380	60		               rts
.1381			putabin
.1381	20 5f 13	               jsr     atobin
.1384	20 f5 10	               jsr     push
.1387	a2 b6		               ldx     #<abin
.1389	a0 12		               ldy     #>abin
.138b	20 04 10	               jsr     puts
.138e	20 34 11	               jsr     pop
.1391	60		               rts
.1392			printabin
.1392	20 f5 10	               jsr     push
.1395	a2 b6		               ldx     #<abin
.1397	a0 12		               ldy     #>abin
.1399	20 04 10	               jsr     puts
.139c	20 34 11	               jsr     pop
.139f	60		               rts
.13a0			putabinfmt
.13a0	08		               php
.13a1	48		               pha
.13a2	a9 25		               lda     #"%"
.13a4	20 fe 0f	               jsr     putch
.13a7	68		               pla
.13a8	20 81 13	               jsr     putabin
.13ab	28		               plp
.13ac	60		               rts
.13ad			putabinxy
.13ad	20 1e 10	               jsr     gotoxy
.13b0	20 81 13	               jsr     putabin
.13b3	60		               rts
.13b4			putabinfmtxy
.13b4	20 1e 10	               jsr     gotoxy
.13b7	20 a0 13	               jsr     putabinfmt
.13ba	60		               rts
.13bb			atodec
.13bb	20 f5 10	               jsr  push
.13be	f8		               sed
.13bf	aa		               tax
.13c0	a0 00		               ldy  #$00
.13c2	a9 00		               lda  #$00
.13c4	18		nextbit        clc
.13c5	69 01		               adc  #$01
.13c7	90 01		               bcc  decx
.13c9	c8		               iny
.13ca	ca		decx           dex
.13cb	d0 f7		               bne  nextbit
.13cd	48		               pha
.13ce	98		               tya
.13cf	20 ff 12	               jsr  nibtohex
.13d2	8d bf 12	               sta  adec
.13d5	68		               pla
.13d6	48		               pha
.13d7	20 ff 12	               jsr  nibtohex
.13da	8d c1 12	               sta  adec+2
.13dd	68		               pla
.13de	6a		               ror
.13df	6a		               ror
.13e0	6a		               ror
.13e1	6a		               ror
.13e2	20 ff 12	               jsr  nibtohex
.13e5	8d c0 12	               sta  adec+1
.13e8	d8		               cld
.13e9	20 34 11	               jsr  pull
.13ec	60		               rts
>13ed	00 00 00	buffer         .byte     0,0,0
.13f0			putadec
.13f0	20 f5 10	               jsr  push
.13f3	20 bb 13	               jsr  atodec
.13f6	a2 bf		               ldx  #<adec
.13f8	a0 12		               ldy  #>adec+1
.13fa	20 04 10	               jsr  puts
.13fd	20 34 11	               jsr  pop
.1400	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1401	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1405	00 00 00 00 00 00 00 00 00 0d 00 00
>1411	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1415	00 00 00 00 00 00 00 00 00 00 00 00
>1421	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1425	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1431	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1435	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1441	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1445	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1451	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1455	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1461	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1465	00 00 00 00 00 00 00 00 00 00 00 00
>1471	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1475	00 00 00 00 00 00 00 00 00 00 00 00
>1481	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1485	00 00 00 00 00 00 00 00 00 00 00 00
>1491	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1495	00 00 00 00 00 00 00 00 00 00 00 00
>14a1	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>14a5	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>14b1	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>14b5	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>14c1	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>14c5	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>14d1	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>14d5	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>14e1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>14e5	00 00 00 00 00 00 00 00 00 00 00 00
>14f1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>14f5	00 00 00 00 00 00 00 00 00 00 00 00
.1501			waitstop
.1501	20 f5 10	               jsr  push
.1504	20 ed f6	wait           jsr  k_stop
.1507	d0 fb		               bne  wait
.1509	20 34 11	               jsr  pop
.150c	60		               rts
.150d			anykey
.150d	08		               php
.150e	48		               pha
.150f	a5 cb		nokey          lda 203
.1511	c9 40		               cmp #64
.1513	f0 fa		               beq nokey
.1515	20 1b 15	               jsr releasekey
.1518	68		               pla
.1519	28		               plp
.151a	60		               rts
.151b			releasekey
.151b	08		               php
.151c	48		               pha
.151d	a5 cb		keypressed     lda 203
.151f	c9 40		               cmp #64
.1521	d0 fa		               bne keypressed
.1523	68		               pla
.1524	28		               plp
.1525	60		               rts
.1526			getkey
.1526	20 e4 ff	again          jsr  getin
.1529	c9 00		               cmp  #0
.152b	f0 f9		               beq  again
.152d	60		               rts
.152e			kbflushbuff
.152e	08		               php
.152f	48		               pha
.1530	20 e4 ff	again          jsr  getin
.1533	c9 00		               cmp  #0
.1535	d0 f9		               bne  again
.1537	68		               pla
.1538	28		               plp
.1539	60		               rts
.153a			waitkey
.153a	20 f5 10	               jsr  push
.153d	8d 8b 15	               sta  thekey
.1540	20 e4 ff	nope           jsr  getin
.1543	20 d2 ff	               jsr  chrout
.1546	cd 8b 15	               cmp  thekey
.1549	d0 f5		               bne  nope
.154b	20 d2 ff	               jsr  chrout
.154e	20 34 11	               jsr  pop
.1551	60		               rts
.1552			waitspace
.1552	20 f5 10	               jsr  push
.1555	a9 7f		wait           lda  #$7f  ;%01111111
.1557	8d 00 dc	               sta  $dc00
.155a	ad 01 dc	               lda  $dc01
.155d	29 10		               and  #$10  ;mask %00010000
.155f	d0 f4		               bne  wait
.1561	20 34 11	               jsr  pop
.1564			waitsstop
.1564	20 f5 10	               jsr  push
.1567	20 ed f6	wait           jsr  k_stop  ;%01111111
.156a	d0 fb		               bne  wait
.156c	20 34 11	               jsr  pop
.156f			waitreturn
.156f	20 f5 10	               jsr  push
.1572	ad 8c 15	               lda  thecount
.1575	8d 00 04	               sta  scrnram
.1578	a9 02		               lda  #$02
.157a	8d 00 d8	               sta  colorram
.157d	20 e4 ff	nope           jsr  getin
.1580	c9 0d		nohex          cmp  #$0d
.1582	d0 f9		               bne  nope
.1584	ee 8c 15	               inc  thecount
.1587	20 34 11	               jsr  pop
.158a	60		               rts
>158b	00		thekey         .byte   0
>158c	01		thecount       .byte   $01

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.158d			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.158d	08		                php
.158e	8d 4b 17	                sta  rega
.1591	68		                pla
.1592	8d 4e 17	                sta  regp
.1595	8e 4c 17	                stx  regx
.1598	8c 4d 17	                sty  regy
.159b	ba		                tsx
.159c	8e 4f 17	                stx  regs
.159f	68		                pla
.15a0	8d 52 17	                sta  regpcl
.15a3	8d 53 17	                sta  regpcl2
.15a6	68		                pla
.15a7	8d 50 17	                sta  regpch
.15aa	8d 51 17	                sta  regpch2
.15ad	ad 4b 17	                lda  rega
.15b0	48		                pha
.15b1	20 ff 12	                jsr  nibtohex
.15b4	8d f5 16	                sta  vala+1
.15b7	68		                pla
.15b8	20 0b 13	                jsr  lsra4bits
.15bb	20 ff 12	                jsr  nibtohex
.15be	8d f4 16	                sta  vala
.15c1	ad 4d 17	                lda  regy
.15c4	48		                pha
.15c5	20 ff 12	                jsr  nibtohex
.15c8	8d 09 17	                sta  valy+1
.15cb	68		                pla
.15cc	20 0b 13	                jsr  lsra4bits
.15cf	20 ff 12	                jsr  nibtohex
.15d2	8d 08 17	                sta  valy
.15d5	ad 4c 17	                lda  regx
.15d8	48		                pha
.15d9	20 ff 12	                jsr  nibtohex
.15dc	8d ff 16	                sta  valx+1
.15df	68		                pla
.15e0	20 0b 13	                jsr  lsra4bits
.15e3	20 ff 12	                jsr  nibtohex
.15e6	8d fe 16	                sta  valx
.15e9	ad 4e 17	                lda  regp
.15ec	48		                pha
.15ed	20 ff 12	                jsr  nibtohex
.15f0	8d 13 17	                sta  valp+1
.15f3	68		                pla
.15f4	20 0b 13	                jsr  lsra4bits
.15f7	20 ff 12	                jsr  nibtohex
.15fa	8d 12 17	                sta  valp
.15fd	ad 4f 17	                lda  regs
.1600	48		                pha
.1601	20 ff 12	                jsr  nibtohex
.1604	8d 1d 17	                sta  vals+1
.1607	68		                pla
.1608	20 0b 13	                jsr  lsra4bits
.160b	20 ff 12	                jsr  nibtohex
.160e	8d 1c 17	                sta  vals
.1611	18		                clc
.1612	ad 53 17	                lda regpcl2
.1615	69 01		                adc #$01
.1617	8d 53 17	                sta regpcl2
.161a	ad 53 17	                lda regpcl2
.161d	d0 03		                bne noreport
.161f	ee 51 17	                inc regpch2
.1622	ad 51 17	    noreport    lda regpch2
.1625	48		                pha
.1626	20 ff 12	                jsr  nibtohex
.1629	8d 28 17	                sta  valpch+1
.162c	68		                pla
.162d	20 0b 13	                jsr  lsra4bits
.1630	20 ff 12	                jsr  nibtohex
.1633	8d 27 17	                sta  valpch
.1636	ad 53 17	                lda  regpcl2
.1639	48		                pha
.163a	20 ff 12	                jsr  nibtohex
.163d	8d 2a 17	                sta  valpcl+1
.1640	68		                pla
.1641	20 0b 13	                jsr  lsra4bits
.1644	20 ff 12	                jsr  nibtohex
.1647	8d 29 17	                sta  valpcl
.164a	a5 fb		                lda  zpage1
.164c	48		                pha
.164d	20 ff 12	                jsr  nibtohex
.1650	8d 38 17	                sta  valz1l
.1653	68		                pla
.1654	20 0b 13	                jsr  lsra4bits
.1657	20 ff 12	                jsr  nibtohex
.165a	8d 39 17	                sta  valz1l+1
.165d	a5 fc		                lda  zpage1+1
.165f	48		                pha
.1660	20 ff 12	                jsr  nibtohex
.1663	8d 36 17	                sta  valz1h
.1666	68		                pla
.1667	20 0b 13	                jsr  lsra4bits
.166a	20 ff 12	                jsr  nibtohex
.166d	8d 37 17	                sta  valz1h+1
.1670	a5 fd		                lda  zpage2
.1672	48		                pha
.1673	20 ff 12	                jsr  nibtohex
.1676	8d 47 17	                sta  valz2l
.1679	68		                pla
.167a	20 0b 13	                jsr  lsra4bits
.167d	20 ff 12	                jsr  nibtohex
.1680	8d 48 17	                sta  valz2l+1
.1683	a5 fe		                lda  zpage2+1
.1685	48		                pha
.1686	20 ff 12	                jsr  nibtohex
.1689	8d 45 17	                sta  valz2h
.168c	68		                pla
.168d	20 0b 13	                jsr  lsra4bits
.1690	20 ff 12	                jsr  nibtohex
.1693	8d 46 17	                sta  valz2h+1
.1696	20 e5 10	                jsr  setinverse
.1699	78		                sei
.169a	a2 ed		                ldx  #<srega
.169c	a0 16		                ldy  #>srega+1
.169e	20 8d 10	                jsr  putscxy
.16a1	a2 f7		                ldx  #<sregx
.16a3	a0 16		                ldy  #>sregx+1
.16a5	20 8d 10	                jsr  putscxy
.16a8	a2 01		                ldx  #<sregy
.16aa	a0 17		                ldy  #>sregy+1
.16ac	20 8d 10	                jsr  putscxy
.16af	a2 0b		                ldx  #<sregp
.16b1	a0 17		                ldy  #>sregp+1
.16b3	20 8d 10	                jsr  putscxy
.16b6	a2 15		                ldx  #<sregs
.16b8	a0 17		                ldy  #>sregs+1
.16ba	20 8d 10	                jsr  putscxy
.16bd	a2 1f		                ldx  #<sregpc
.16bf	a0 17		                ldy  #>sregpc+1
.16c1	20 8d 10	                jsr  putscxy
.16c4	a2 2d		                ldx  #<sregz1
.16c6	a0 17		                ldy  #>sregz1+1
.16c8	20 8d 10	                jsr  putscxy
.16cb	a2 3c		                ldx  #<sregz2
.16cd	a0 17		                ldy  #>sregz2+1
.16cf	20 8d 10	                jsr  putscxy
.16d2	58		                cli
.16d3	20 ed 10	                jsr  clrinverse
.16d6	ad 50 17	                lda  regpch
.16d9	48		                pha
.16da	ad 52 17	                lda  regpcl
.16dd	48		                pha
.16de	ac 4d 17	                ldy  regy
.16e1	ae 4c 17	                ldx  regx
.16e4	ad 4e 17	                lda  regp
.16e7	48		                pha
.16e8	ad 4b 17	                lda  rega
.16eb	28		                plp
.16ec	60		                rts
>16ed	01 00 17	srega   .byte   colr,coln,line
>16f0	20 41 3a 24	        .text   ' a:$' ;4,24
>16f4	00 00 00	vala    .byte   0,0,0
>16f7	01 06 17	sregx   .byte   colr,coln+6,line
>16fa	20 58 3a 24	        .text   ' x:$' ;4,24
>16fe	00 00 00	valx    .byte   0,0,0
>1701	01 0c 17	sregy   .byte   colr,coln+12,line
>1704	20 59 3a 24	        .text   ' y:$' ;4,24
>1708	00 00 00	valy    .byte   0,0,0
>170b	01 12 17	sregp   .byte   colr,coln+18,line
>170e	20 50 3a 24	        .text   ' p:$' ;4,24
>1712	00 00 00	valp    .byte   0,0,0
>1715	01 18 17	sregs   .byte   colr,coln+24,line
>1718	20 53 3a 24	        .text   ' s:$' ;4,24
>171c	00 00 00	vals    .byte   0,0,0
>171f	01 1e 17	sregpc  .byte   colr,coln+30,line
>1722	20 50 43 3a	        .text   ' pc:$' ;4,24
>1726	24
>1727	00 00		valpch  .byte   0,0
>1729	00 00 20 00	valpcl  .byte   0,0,32,0
>172d	01 03 18	sregz1  .byte   colr,coln+3,line+1
>1730	20 5a 50 31	        .text   ' zp1:$' ;4,24
>1734	3a 24
>1736	00 00		valz1h  .byte   0,0
>1738	00 00 20 00	valz1l  .byte   0,0,32,0
>173c	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>173f	20 5a 50 32	        .text   ' zp2:$' ;4,24
>1743	3a 24
>1745	00 00		valz2h  .byte   0,0
>1747	00 00 20 00	valz2l  .byte   0,0,32,0
>174b	00		rega    .byte   0
>174c	00		regx    .byte   0
>174d	00		regy    .byte   0
>174e	00		regp    .byte   0
>174f	00		regs    .byte   0
>1750	00		regpch  .byte   0
>1751	00		regpch2 .byte   0
>1752	00		regpcl  .byte   0
>1753	00		regpcl2 .byte   0
>1754	00		vzp1h   .byte   0
>1755	00		vzp1l   .byte   0
>1756	00		vzp2h   .byte   0
>1757	00		vzp2l   .byte   0

;******  Return to file: essai01.asm


;******  End of listing

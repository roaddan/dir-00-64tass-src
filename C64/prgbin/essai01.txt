
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L essai01.txt -o essai01.prg essai01.asm
; Tue Apr  8 10:25:01 2025

;Offset	;Hex		;Source

;******  Processing input file: essai01.asm

="20250405-231555"	                Version = "20250405-231555"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c ee 0d	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macro-c64-ultimateii.asm


;******  Return to file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm

=$df1c			uiictrlreg	=	$df1c	;(Write)				* CONTROL REGISTER *
=$00								uiiidle		=	$00
=$01								uiicmdbusy	=	$01
=$02								uiidatalast	=	$02
=$03								uiidatamore	=	$03
=$df1c			uiicmdstat	=	$df1c	;(Read)	default $00	* CMD STATUS REGISTER *
=$df1d			uiicmddata	=	$df1d	;(Write)				* COMMAND DATA REGISTER *
=$df1d			uiiidenreg	=	$df1d	;(Read)	default $c9	* API ID REGISTER *
=$df1e			uiirxdata		=	$df1e	;(Read only)			* DATA REGISTER *
=$df1f			uiidatastat	=	$df1f	;(Read only)			* DATA STATUS REGISTER *
=$01			uii_identify	=	$01	; $01 $01 -> Read Id String as "ULTIMATE-II DOS V1.0"
=$02			uii_file_open	=	$02	; Open file for ...
=$01			uii_fa_read	=	$01	; $01 $02 $01 <filename> -> ... reading.
=$02			uii_fa_write	=	$02	; $01 $02 $02 <filename> -> ... writing.
=$04			uii_fa_new	=	$04	; $01 $02 $04 <filename> -> ... creating/writing.
=$08			uii_fa_ovwri	=	$08	; $01 $02 $08 <filename> -> ... overwriting.
=$03			uii_file_close	=	$03	; $01 $03 -> close opened file.
=$04			uii_read_data	= 	$04  ; $01 $04 [len_lo] [len_hi]
=$05			uii_writ_data	=	$05	; $01 $05 [dummy] [dummy] [data...]
=$06			uii_file_seek	=	$06	; $01 $06 [posl] [posml] [posmh] [posh].
=$07			uii_file_info 	=	$07	; $01 $07 -> returns current open file info.
=$08			uii_file_stat  = 	$08	; $01 $08 <filename> -> returns file info.
=$09			uii_file_del	=	$09	; $01 $09 <filename> -> delete/scratch file.
=$0a			uii_file_ren	=	$0a	; $01 $0a <filename> $00 <newname>
=$0b			uii_file_copy	=	$0b	; $01 $0b <source> $00 <destination>
=$11			uii_dir_change = 	$11	; $01 $11 <directory name>
=$12			uii_dir_pwd	=	$12	; $01 $12
=$13			uii_dir_open	=	$13	; $01 $13
=$14			uii_dir_read	=	$14  ; $01 $14
=$15			uii_dir_cp_ui	=	$15	; $01 $15 -> makes UI current path as API current path.
=$16			uii_dir_mkdir	=	$16	; $01 $16 <dirname> -> Create directory under current.
=$17			uii_dir_home	=	$17	; $01 $17 -> makes UI home path as API current path.
=$21			uii_reu_load	=	$21
=$22			uii_reu_save	=	$22
=$23			uii_dsk_mount	=	$23	; $01 $23 <id> <filename>
=$24			uii_dsk_umount = 	$24	; $01 $24 <id>
=$25			uii_dsk_swap 	= 	$25	; $01 $25 <id>
=$26			uii_time_get	=	$26	; $01 $26 [id] -> returns current RTC time/date.
=$27			uii_time_set	=	$27	; $01 $27 <Y> <M> <D> <H> <M> <S>
=$f0			uii_dos_echo	= 	$f0	; $01 $f0
>0854	01 01 00	uiicmdgetid       	.byte     $01,$01,$00
>0857	01 26 00	uiicmdgettime		.byte	$01,$26,$00
>085a			rxbuffer         .fill     256
>095a	00		rxbstart         .byte     0
>095b	00		rxbend           .byte     0
>095c	00		rxbflag          .byte     0
>095d			txbuffer         .fill     256
>0a5d	00		txbstart         .byte     0
>0a5e	00		txbend           .byte     0
>0a5f	00		txbflag          .byte     0
.0a60			uiifisbusy
.0a60	48					pha
.0a61	ad 1c df				lda	uiicmdstat
.0a64	29 01					and	#%00000001	; Mask bit 0 of the command status register.
.0a66	49 01					eor	#%00000001	; Reverse Logic  BEQ if Busy, BNE if free.
.0a68	68					pla
.0a69	60					rts
.0a6a			uiifbusywait
.0a6a	08					php
.0a6b	20 60 0a	wait			jsr	uiifisbusy
.0a6e	f0 fb					beq	wait			; Waiting for Busy to disappear.
.0a70	28					plp
.0a71	60					rts
.0a72			uiifisdataacc
.0a72	48					pha
.0a73	ad 1f df				lda	uiidatastat
.0a76	29 02					and	#%00000010	; Mask bit 1 of the command status register.
.0a78	49 02					eor	#%00000010	; Reverse Logic  BEQ if Dacc, BNE if /Dacc.
.0a7a	68		out			pla
.0a7b	60					rts
.0a7c			uiifdaccwait
.0a7c	08					php
.0a7d	20 72 0a	wait			jsr 	uiifisdataacc
.0a80	d0 fb					bne	wait			; Waiting for Dacc to appears.
.0a82	28					plp
.0a83	60					rts
.0a84			uiifisabortp
.0a84	48					pha ; Bit 2
.0a85	ad 1c df				lda	uiicmdstat
.0a88	29 04					and	#%00000100	; Mask bit 2 of the command status register.
.0a8a	49 04					eor	#%00000100	; Rev. Logic   BEQ if Abort pending
.0a8c	68					pla
.0a8d	60					rts
.0a8e			uiifabortpwait
.0a8e	08					php
.0a8f	20 84 0a	wait			jsr 	uiifisabortp
.0a92	d0 fb					bne	wait			; Waiting for Dacc to appears.
.0a94	28					plp
.0a95	60					rts
.0a96			uiifiscerror
.0a96	48					pha ; Bit 3
.0a97	ad 1c df				lda	uiicmdstat
.0a9a	29 08					and	#%00001000	; Mask bit 3 of the command status register.
.0a9c	49 08					eor	#%00001000	; Rev. Logic   BEQ if ERROR
.0a9e	68					pla
.0a9f	60					rts
.0aa0			uiifgetcmdstat
.0aa0	08					php	; Bits 5,4
.0aa1	ad 1c df				lda	uiicmdstat
.0aa4	4a					lsr				; Shifting bits 4 position to the right.
.0aa5	4a					lsr				; Bits 5 and 4 are now in bits 1 and 0
.0aa6	4a					lsr
.0aa7	4a					lsr
.0aa8	29 03					and	#%00000011
.0aaa	28					plp
.0aab	60					rts
.0aac			uiifisrdataavail
.0aac	48					pha
.0aad	20 a0 0a	notyet		jsr	uiifgetcmdstat
.0ab0	29 02					and	#%00000010	; Mask bit 3 of the command status register.
.0ab2	49 02					eor	#%00000010	; Rev. Logic   BEQ if ERROR
.0ab4	68					pla
.0ab5	60					rts
.0ab6			uiifisstatdata
.0ab6	48					pha ; Bit 6
.0ab7	ad 1c df				lda	uiicmdstat
.0aba	29 40					and	#%01000000	; Mask bit 6 of the command status register.
.0abc	49 40					eor	#%01000000	; Rev. Logic   BEQ if stat data avail.
.0abe	68					pla
.0abf	60					rts
.0ac0			uiifisrespdata
.0ac0	48					pha ; Bit 7
.0ac1	ad 1c df				lda	uiicmdstat
.0ac4	29 80					and	#%10000000	; Mask bit 6 of the command status register.
.0ac6	49 80					eor	#%10000000	; Rev. Logic   BEQ if stat data avail.
.0ac8	68					pla
.0ac9	60					rts
.0aca			uiifsendpushcmd
.0aca	08					php
.0acb	48					pha
.0acc	a9 01					lda	#%00000001
.0ace	8d 1c df				sta	uiictrlreg
.0ad1	68					pla
.0ad2	28					plp
.0ad3	60					rts
.0ad4			uiifsenddataacc
.0ad4	08					php
.0ad5	48					pha
.0ad6	a9 02					lda	#%00000010
.0ad8	8d 1c df				sta	uiictrlreg
.0adb	68					pla
.0adc	28					plp
.0add	60					rts
.0ade			uiifsendabort
.0ade	08					php
.0adf	48					pha
.0ae0	a9 04					lda	#%00000100
.0ae2	8d 1c df				sta	uiictrlreg
.0ae5	68					pla
.0ae6	28					plp
.0ae7	60					rts
.0ae8			uiifwaitidle
.0ae8	08					php
.0ae9	20 a0 0a	notyet		jsr	uiifgetcmdstat
.0aec	c9 00					cmp	#$00
.0aee	d0 f9					bne	notyet
.0af0	28					plp
.0af1	60					rts
.0af2			uiifismoredata
.0af2	48					pha
.0af3	20 a0 0a				jsr	uiifgetcmdstat
.0af6	29 02					and	#%00000010
.0af8	49 02					eor	#%00000010
.0afa	68					pla
.0afb	60					rts
.0afc			uiifputcmdbyte
.0afc	20 6a 0a				jsr 	uiifbusywait
.0aff	8d 1d df				sta	uiicmddata
.0b02	60					rts
.0b03			uiifsndcmd
.0b03	20 e7 10				jsr	push
.0b06	86 fb					stx	zpage1
.0b08	84 fc					sty	zpage1+1
.0b0a	a0 00					ldy	#$00
.0b0c	b1 fb		next			lda	(zpage1),y
.0b0e	f0 07					beq	finish
.0b10	20 fc 0a				jsr	uiifputcmdbyte
.0b13	c8					iny
.0b14	4c 0c 0b				jmp	next
.0b17	a9 01		finish		lda	#$01
.0b19	8d 1c df				sta	uiictrlreg
.0b1c	20 26 11				jsr	pop
.0b1f	60					rts
.0b20			uiifreadrxdata
.0b20	08					php
.0b21	20 6a 0a				jsr	uiifbusywait
.0b24	20 ac 0a				jsr	uiifisrdataavail
.0b27	f0 06					beq	nodata
.0b29	ad 1e df				lda	uiirxdata
.0b2c	4c 31 0b				jmp	outdata
.0b2f	a9 00		nodata		lda	#$00
.0b31	28		outdata		plp
.0b32	60					rts
.0b33			uiifreadsdata
.0b33	08					php
.0b34	20 6a 0a				jsr	uiifbusywait
.0b37	20 b6 0a				jsr	uiifisstatdata
.0b3a	f0 06					beq	nodata
.0b3c	ad 1f df				lda	uiidatastat
.0b3f	4c 44 0b				jmp	outdata
.0b42	a9 00		nodata		lda	#$00
.0b44	28		outdata		plp
.0b45	60					rts

;******  Return to file: essai01.asm


;******  Processing file: ./strings_en.asm

.0b46			headera
>0b46	20 20 20 20	               .text          "     1541 Ultimate II + First Try "
>0b4a	20 31 35 34 31 20 d5 4c 54 49 4d 41 54 45 20 c9
>0b5a	c9 20 2b 20 c6 49 52 53 54 20 d4 52 59 20
>0b68	0d		               .byte     $0d
>0b69	20 c3 41 52	               .text          " Cartridge and API by Gideon Zweijtzer."
>0b6d	54 52 49 44 47 45 20 41 4e 44 20 c1 d0 c9 20 42
>0b7d	59 20 c7 49 44 45 4f 4e 20 da 57 45 49 4a 54 5a
>0b8d	45 52 2e
>0b90	0d		               .byte     $0d
>0b91	20 20 20 20	               .text          "    API Version 1.0, Feb. 1st 2013"
>0b95	c1 d0 c9 20 d6 45 52 53 49 4f 4e 20 31 2e 30 2c
>0ba5	20 c6 45 42 2e 20 31 53 54 20 32 30 31 33
>0bb3	0d 00		               .byte     $0d,0
>0bb5	20 20 20 20	headerb        .text          "             essai01.prg "
>0bb9	20 20 20 20 20 20 20 20 20 45 53 53 41 49 30 31
>0bc9	2e 50 52 47 20
>0bce	0d		               .byte     $0d
>0bcf	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0bd3	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>0be3	45 4c 20 cc 41 46 52 41 4e 43 45
>0bee	0d		               .byte     $0d
>0bef	20 20 20 20	               .text   format("       Version: %s",Version)
>0bf3	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>0c03	30 34 30 35 2d 32 33 31 35 35 35
>0c0e	0d 00		               .byte     $0d,0
>0c10	0d		shortcuts      .byte     $0d
>0c11	91 91		               .byte     ucurkey,ucurkey
>0c13	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>0c17	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>0c1b	1d
>0c1c	20 d2 20 c1	               .text          " R A C C O U R C I S "
>0c20	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>0c30	20
>0c31	20 20 d3 20	               .text          "  S H O R T C U T S  "
>0c35	c8 20 cf 20 d2 20 d4 20 c3 20 d5 20 d4 20 d3 20
>0c45	20
>0c46	0d		               .byte     $0d
>0c47	20 45 53 53	               .text   format(" essai01..: SYS%05d ($%04X)",main, main)
>0c4b	41 49 30 31 2e 2e 3a 20 d3 d9 d3 30 33 35 36 36
>0c5b	20 28 24 30 c4 c5 c5 29
>0c63	0d		               .byte     $0d
>0c64	20 48 45 4c	               .text   format(" help.....: SYS%05d ($%04X)",aide, aide)
>0c68	50 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 33 36 37 31
>0c78	20 28 24 30 c5 35 37 29
>0c80	0d		               .byte     $0d
>0c81	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0c85	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 34 30 35 37
>0c95	20 28 24 30 c6 c4 39 29
>0c9d	0d 00		               .byte     $0d,0
>0c9f	20 c5 58 45	aidetext       .text   format(" Execute: SYS%05d ($%04X)",essai01, essai01)
>0ca3	43 55 54 45 3a 20 d3 d9 d3 30 33 37 39 31 20 28
>0cb3	24 30 c5 c3 c6 29
>0cb9	0d 0d		               .byte     $0d, $0d
>0cbb	20 20 20 20	               .text   format("    ex.: SYS%05d",essai01)
>0cbf	45 58 2e 3a 20 d3 d9 d3 30 33 37 39 31
>0ccc	0d		               .byte     $0d
>0ccd	20 20 20 20	               .text   format("    for i=0to100:SYS%05d:next",essai01)
>0cd1	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0ce1	30 33 37 39 31 3a 4e 45 58 54
>0ceb	0d 00		               .byte     $0d,0
>0ced	20 c0 c0 c0	line           .byte     $20,192,192,192,192,192,192,192,192,192
>0cf1	c0 c0 c0 c0 c0 c0
>0cf7	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0cfb	c0 c0 c0 c0 c0 c0
>0d01	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0d05	c0 c0 c0 c0 c0 c0
>0d0b	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192
>0d0f	c0 c0 c0 c0 c0
>0d14	0d 00		               .byte     $0d,0
>0d16	c9 4e 53 54	uiiconnected   .null     "Installed"
>0d1a	41 4c 4c 45 44 00
>0d20	d5 4e 49 4e	uiiunconnected .null     "Uninstalled"
>0d24	53 54 41 4c 4c 45 44 00
=1			uiiy           =    1
=1			uiix           =    1
>0d2c	01 0a 01 12	lbluiititle    .byte     1,uiix+9,uiiy,18
>0d30	20 31 35 34	               .text     " 1541 Ultimate II + "
>0d34	31 20 d5 4c 54 49 4d 41 54 45 20 c9 c9 20 2b 20
>0d44	92 00		               .byte     146,0
>0d46	01 01 04	lbluiiidenreg  .byte     1,uiix ,uiiy+3
>0d49	c9 44 45 4e	               .null     format("Identification..($%04X) -> ", uiiidenreg)
>0d4d	54 49 46 49 43 41 54 49 4f 4e 2e 2e 28 24 c4 c6
>0d5d	31 c4 29 20 2d 3e 20 00
>0d65	01 01 06	lbluiistatreg  .byte     1,uiix ,uiiy+5
>0d68	c3 4f 4d 4d	               .null     format("Commande Status.($%04X) -> ", uiicmdstat)
>0d6c	41 4e 44 45 20 d3 54 41 54 55 53 2e 28 24 c4 c6
>0d7c	31 c3 29 20 2d 3e 20 00
>0d84	01 01 08	lbluiistadata  .byte     1,uiix ,uiiy+7
>0d87	c4 41 54 41	               .null     format("Data Response...($%04X) -> ", uiirxdata)
>0d8b	20 d2 45 53 50 4f 4e 53 45 2e 2e 2e 28 24 c4 c6
>0d9b	31 c5 29 20 2d 3e 20 00
>0da3	01 01 0a	lbluiirspdata  .byte     1,uiix ,uiiy+9.
>0da6	c4 41 54 41	               .null     format("Data Status.....($%04X) -> ", uiidatastat)
>0daa	20 d3 54 41 54 55 53 2e 2e 2e 2e 2e 28 24 c4 c6
>0dba	31 c6 29 20 2d 3e 20 00
>0dc2	03 1d 04 00	txtuiiidenreg  .byte     3,uiix+28,uiiy+3,0
>0dc6	03 1c 06 00	txtuiistatreg  .byte     3,uiix+27,uiiy+5,0
>0dca	03 1c 08 00	txtuiistadata  .byte     3,uiix+27,uiiy+7,0
>0dce	03 1c 0a 00	txtuiirspdata  .byte     3,uiix+27,uiiy+9,0
>0dd2	03 1d 05	defuiistatreg  .byte     3,uiix+28,uiiy+4
>0dd5	c1 c1 d3 d3	               .null     "AASSEPCB"
>0dd9	c5 d0 c3 c2 00
>0dde	03 1d 07	defuiistadata  .byte     3,uiix+28,uiiy+6
>0de1	c1 c1 d3 d3	               .null     "AASSEPCB"
>0de5	c5 d0 c3 c2 00
>0dea	03 0a 02 00	txtrespponse   .byte     3,uiix+9,uiiy+1,0

;******  Return to file: essai01.asm

.0dee			main
.0dee	20 b9 0f	               jsr scrmaninit
.0df1	08		               php
.0df2	48		               pha
.0df3	a9 0e		               lda  #14
.0df5	8d d8 0f	               sta  characterset
.0df8	20 d2 ff	               jsr  $ffd2
.0dfb	68		               pla
.0dfc	28		               plp
.0dfd	08		               php
.0dfe	48		               pha
.0dff	a9 08		               lda  #$08
.0e01	20 d2 ff	               jsr  $ffd2
.0e04	68		               pla
.0e05	28		               plp
.0e06	20 e7 10	               jsr  push
.0e09	48		               pha
.0e0a	a9 05		               lda  #cvert
.0e0c	8d 20 d0	               sta  $d020
.0e0f	68		               pla
.0e10	48		               pha
.0e11	a9 06		               lda  #cbleu
.0e13	8d 21 d0	               sta  $d021
.0e16	68		               pla
.0e17	48		               pha
.0e18	a9 01		               lda  #cblanc
.0e1a	8d 86 02	               sta  bascol
.0e1d	68		               pla
.0e1e	20 26 11	               jsr  pull
.0e21	20 cf 0e	               jsr essai01
.0e24	08		               php
.0e25	48		               pha
.0e26	a9 09		               lda  #$09
.0e28	20 d2 ff	               jsr  $ffd2
.0e2b	68		               pla
.0e2c	28		               plp
.0e2d	08		               php
.0e2e	48		               pha
.0e2f	a9 8e		               lda  #b_uppercase
.0e31	8d d8 0f	               sta  characterset
.0e34	20 d2 ff	               jsr  $ffd2
.0e37	68		               pla
.0e38	28		               plp
.0e39	20 d9 0f	               jsr  cls
.0e3c	20 e7 10	               jsr  push
.0e3f	48		               pha
.0e40	a9 05		               lda  #cvert
.0e42	8d 20 d0	               sta  $d020
.0e45	68		               pla
.0e46	48		               pha
.0e47	a9 06		               lda  #cbleu
.0e49	8d 21 d0	               sta  $d021
.0e4c	68		               pla
.0e4d	48		               pha
.0e4e	a9 01		               lda  #cblanc
.0e50	8d 86 02	               sta  bascol
.0e53	68		               pla
.0e54	20 26 11	               jsr  pull
.0e57			aide
.0e57	08		               php
.0e58	48		               pha
.0e59	a9 0e		               lda  #14
.0e5b	8d d8 0f	               sta  characterset
.0e5e	20 d2 ff	               jsr  $ffd2
.0e61	68		               pla
.0e62	28		               plp
.0e63	20 d9 0f	               jsr cls
.0e66	20 e7 10	               jsr  push
.0e69	a2 ed		               ldx  #<line
.0e6b	a0 0c		               ldy  #>line
.0e6d	20 f6 0f	               jsr  puts
.0e70	20 26 11	               jsr  pull
.0e73	20 e7 10	               jsr  push
.0e76	a2 46		               ldx  #<headera
.0e78	a0 0b		               ldy  #>headera
.0e7a	20 f6 0f	               jsr  puts
.0e7d	20 26 11	               jsr  pull
.0e80	20 e7 10	               jsr  push
.0e83	a2 b5		               ldx  #<headerb
.0e85	a0 0b		               ldy  #>headerb
.0e87	20 f6 0f	               jsr  puts
.0e8a	20 26 11	               jsr  pull
.0e8d	20 e7 10	               jsr  push
.0e90	a2 ed		               ldx  #<line
.0e92	a0 0c		               ldy  #>line
.0e94	20 f6 0f	               jsr  puts
.0e97	20 26 11	               jsr  pull
.0e9a	20 e7 10	               jsr  push
.0e9d	a2 ed		               ldx  #<line
.0e9f	a0 0c		               ldy  #>line
.0ea1	20 f6 0f	               jsr  puts
.0ea4	20 26 11	               jsr  pull
.0ea7	20 e7 10	               jsr  push
.0eaa	a2 10		               ldx  #<shortcuts
.0eac	a0 0c		               ldy  #>shortcuts
.0eae	20 f6 0f	               jsr  puts
.0eb1	20 26 11	               jsr  pull
.0eb4	20 e7 10	               jsr  push
.0eb7	a2 9f		               ldx  #<aidetext
.0eb9	a0 0c		               ldy  #>aidetext
.0ebb	20 f6 0f	               jsr  puts
.0ebe	20 26 11	               jsr  pull
.0ec1	20 e7 10	               jsr  push
.0ec4	a2 ed		               ldx  #<line
.0ec6	a0 0c		               ldy  #>line
.0ec8	20 f6 0f	               jsr  puts
.0ecb	20 26 11	               jsr  pull
.0ece	60		               rts
.0ecf			essai01
.0ecf	08		               php
.0ed0	48		               pha
.0ed1	20 d9 0f	               jsr  cls
.0ed4	20 2a 0f	               jsr  printstatic
.0ed7	20 e7 10	               jsr  push
.0eda	a2 46		               ldx  #<lbluiiidenreg
.0edc	a0 0d		               ldy  #>lbluiiidenreg
.0ede	20 7f 10	               jsr  putscxy
.0ee1	20 26 11	               jsr  pull
.0ee4	ad 1d df	               lda  uiiidenreg
.0ee7	20 cf 12	               jsr  putahexfmt
.0eea	20 e7 10	               jsr  push
.0eed	a2 54		               ldx  #<uiicmdgetid
.0eef	a0 08		               ldy  #>uiicmdgetid
.0ef1	20 03 0b	               jsr  uiifsndcmd
.0ef4	20 26 11	               jsr  pull
.0ef7	20 e7 10	               jsr  push
.0efa	a2 ea		               ldx  #<txtrespponse
.0efc	a0 0d		               ldy  #>txtrespponse
.0efe	20 7f 10	               jsr  putscxy
.0f01	20 26 11	               jsr  pull
.0f04	20 20 0b	moredata       jsr  uiifreadrxdata
.0f07	c9 00		               cmp  #$00
.0f09	f0 10		               beq  nodata
.0f0b	c9 00		               cmp  #$00
.0f0d	f0 06		               beq  putit
.0f0f	c9 27		               cmp  #$27
.0f11	90 02		               bcc  putit
.0f13	09 20		               ora  #%00100000
.0f15	20 f0 0f	putit          jsr  putch
.0f18	4c 04 0f	               jmp  moredata
.0f1b	20 d4 0a	nodata         jsr  uiifsenddataacc
.0f1e	20 7f 0f	               jsr  updatestatus
.0f21	20 7f 15	               jsr  showregs
.0f24	20 ff 14	               jsr  anykey
.0f27	68		               pla
.0f28	28		               plp
.0f29	60		               rts
.0f2a			printstatic
.0f2a	20 e7 10	               jsr  push
.0f2d	20 e7 10	               jsr  push
.0f30	a2 2c		               ldx  #<lbluiititle
.0f32	a0 0d		               ldy  #>lbluiititle
.0f34	20 7f 10	               jsr  putscxy
.0f37	20 26 11	               jsr  pull
.0f3a	20 e7 10	               jsr  push
.0f3d	a2 46		               ldx  #<lbluiiidenreg
.0f3f	a0 0d		               ldy  #>lbluiiidenreg
.0f41	20 7f 10	               jsr  putscxy
.0f44	20 26 11	               jsr  pull
.0f47	20 e7 10	               jsr  push
.0f4a	a2 65		               ldx  #<lbluiistatreg
.0f4c	a0 0d		               ldy  #>lbluiistatreg
.0f4e	20 7f 10	               jsr  putscxy
.0f51	20 26 11	               jsr  pull
.0f54	20 e7 10	               jsr  push
.0f57	a2 d2		               ldx  #<defuiistatreg
.0f59	a0 0d		               ldy  #>defuiistatreg
.0f5b	20 7f 10	               jsr  putscxy
.0f5e	20 26 11	               jsr  pull
.0f61	20 e7 10	               jsr  push
.0f64	a2 84		               ldx  #<lbluiistadata
.0f66	a0 0d		               ldy  #>lbluiistadata
.0f68	20 7f 10	               jsr  putscxy
.0f6b	20 26 11	               jsr  pull
.0f6e	20 e7 10	               jsr  push
.0f71	a2 de		               ldx  #<defuiistadata
.0f73	a0 0d		               ldy  #>defuiistadata
.0f75	20 7f 10	               jsr  putscxy
.0f78	20 26 11	               jsr  pull
.0f7b	20 26 11	               jsr  pop
.0f7e	60		               rts
.0f7f			updatestatus
.0f7f	20 e7 10	               jsr  push
.0f82	a9 03		               lda  #$03
.0f84	8d 9e 12	               sta  a2hexcol
.0f87	20 e7 10	               jsr  push
.0f8a	a2 c6		               ldx  #<txtuiistatreg
.0f8c	a0 0d		               ldy  #>txtuiistatreg
.0f8e	20 7f 10	               jsr  putscxy
.0f91	20 26 11	               jsr  pull
.0f94	ad 1c df	               lda  uiicmdstat
.0f97	20 92 13	               jsr  putabinfmt
.0f9a	20 e7 10	               jsr  push
.0f9d	a2 ca		               ldx  #<txtuiistadata
.0f9f	a0 0d		               ldy  #>txtuiistadata
.0fa1	20 7f 10	               jsr  putscxy
.0fa4	20 26 11	               jsr  pull
.0fa7	ad 1f df	               lda  uiidatastat
.0faa	20 92 13	               jsr  putabinfmt
.0fad	20 26 11	               jsr  pop
.0fb0	60		               rts

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0fb1	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0fb5	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0fb9			libtart

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0fb9			scrmaninit
.0fb9	20 e7 10	               jsr  push
.0fbc	a9 06		               lda  #vbleu
.0fbe	8d 21 d0	               sta  vicbackcol
.0fc1	a9 05		               lda  #vvert
.0fc3	8d 20 d0	               sta  vicbordcol
.0fc6	a9 01		               lda  #vblanc
.0fc8	8d 86 02	               sta  bascol
.0fcb	ad 00 04	               lda  scrnram
.0fce	8d 00 04	               sta  scrnram
.0fd1	20 d9 0f	               jsr  cls
.0fd4	20 26 11	               jsr  pop
.0fd7	60		               rts
>0fd8	8e		characterset   .byte b_uppercase
.0fd9			cls
.0fd9	08		               php
.0fda	48		               pha
.0fdb	a9 93		               lda  #$93
.0fdd	20 f0 0f	               jsr  putch
.0fe0	68		               pla
.0fe1	28		               plp
.0fe2	60		               rts
.0fe3			putnch
.0fe3	08		               php
.0fe4	e0 00		               cpx  #$00
.0fe6	f0 06		               beq  out
.0fe8	20 d2 ff	again          jsr  $ffd2
.0feb	ca		               dex
.0fec	d0 fa		               bne  again
.0fee	28		out            plp
.0fef	60		               rts
.0ff0			putch
.0ff0	08		               php
.0ff1	20 d2 ff	               jsr  $ffd2
.0ff4	28		               plp
.0ff5	60		               rts
.0ff6			puts
.0ff6	20 e7 10	               jsr  push
.0ff9	86 fb		               stx  zpage1
.0ffb	84 fc		               sty  zpage1+1
.0ffd	a0 00		               ldy  #0
.0fff	b1 fb		next           lda  (zpage1),y
.1001	f0 09		               beq  exit
.1003	20 f0 0f	               jsr  putch
.1006	20 ee 11	               jsr  inczp1
.1009	4c ff 0f	               jmp  next
.100c	20 26 11	exit           jsr  pop
.100f	60		               rts
.1010			gotoxy
.1010	08		               php
.1011	18		               clc
.1012	8a		               txa
.1013	48		               pha
.1014	98		               tya
.1015	aa		               tax
.1016	68		               pla
.1017	a8		               tay
.1018	20 f0 ff	               jsr  kplot
.101b	28		               plp
.101c	60		               rts
.101d			cursor
=$0286			bascol    =    $0286
.101d	08		               php            ;tourlou
.101e	48		               pha
.101f	90 12		               bcc  restore
.1021	20 f0 ff	               jsr  kplot
.1024	8c 45 10	               sty  cx
.1027	8e 46 10	               stx  cy
.102a	ad 86 02	               lda  bascol
.102d	8d 47 10	               sta  bcol
.1030	4c 42 10	               jmp  out
.1033	ae 46 10	restore        ldx  cy
.1036	ac 45 10	               ldy  cx
.1039	20 f0 ff	               jsr  kplot
.103c	ad 47 10	               lda  bcol
.103f	8d 86 02	               sta  bascol
.1042	68		out            pla
.1043	28		               plp
.1044	60		               rts
>1045	00		cx   .byte     $00
>1046	00		cy   .byte     $00
>1047	00		bcol .byte     $00
.1048			cursave
.1048	08		               php
.1049	38		               sec
.104a	20 1d 10	               jsr  cursor
.104d	28		               plp
.104e	60		               rts
.104f			curput
.104f	08		               php
.1050	18		               clc
.1051	20 1d 10	               jsr  cursor
.1054	28		               plp
.1055	60		               rts
.1056			putsxy
.1056	20 e7 10	               jsr  push
.1059	86 fb		               stx  zpage1
.105b	84 fc		               sty  zpage1+1
.105d	a0 00		               ldy  #$00
.105f	b1 fb		               lda  (zpage1),y
.1061	aa		               tax
.1062	20 ee 11	               jsr  inczp1
.1065	b1 fb		               lda  (zpage1),y
.1067	a8		               tay
.1068	20 10 10	               jsr  gotoxy
.106b	20 ee 11	               jsr  inczp1
.106e	a6 fb		               ldx  zpage1
.1070	a4 fc		               ldy  zpage1+1
.1072	20 f6 0f	               jsr  puts
.1075	20 26 11	               jsr  pop
.1078	60		               rts
>1079	00 00		straddr   .word     $00
>107b	00		px        .byte     $00
>107c	00		py        .byte     $00
>107d	00 00		zp1       .word     $00
.107f			putscxy
.107f	20 e7 10	               jsr  push
.1082	84 fc		               sty  zpage1+1
.1084	86 fb		               stx  zpage1
.1086	ad 86 02	               lda  bascol
.1089	8d a9 10	               sta  bc
.108c	a0 00		               ldy #$00
.108e	b1 fb		               lda  (zpage1),y
.1090	8d 86 02	               sta  bascol
.1093	20 ee 11	               jsr  inczp1
.1096	a6 fb		               ldx  zpage1
.1098	a4 fc		               ldy  zpage1+1
.109a	20 56 10	               jsr  putsxy
.109d	ad a9 10	               lda  bc
.10a0	8d 86 02	               sta  bascol
.10a3	20 26 11	               jsr  pop
.10a6	60		               rts
>10a7	00 00		straddr  .word      $00
>10a9	00		bc       .byte      $00
>10aa	00 00		zp1      .word      $00
.10ac			putrahex
.10ac	08		               php
.10ad	48		               pha
.10ae	20 04 13	               jsr  atohex
.10b1	a9 a3		               lda  #<a2hexstr
.10b3	a0 12		               ldy  #>a2hexstr
.10b5	20 f6 0f	               jsr  puts
.10b8	68		               pla
.10b9	28		               plp
.10ba	60		               rts
.10bb			kputrahexxy
.10bb			bputrahexxy
.10bb			putrahexxy
.10bb	08		               php
.10bc	20 04 13	               jsr  atohex
.10bf	a9 a0		               lda  #<a2hexpos
.10c1	a0 12		               ldy  #>a2hexpos
.10c3	20 56 10	               jsr  putsxy
.10c6	68		               pla
.10c7	28		               plp
.10c8	60		               rts
.10c9			putrahexcxy
.10c9	08		               php
.10ca	20 04 13	               jsr  atohex
.10cd	a9 a0		               lda  #<a2hexpos
.10cf	a0 12		               ldy  #>a2hexpos
.10d1	20 7f 10	               jsr  putscxy
.10d4	68		               pla
.10d5	28		               plp
.10d6	60		               rts
.10d7			setinverse
.10d7	48		               pha
.10d8	a9 12		               lda  #$12
.10da	20 d2 ff	               jsr  $ffd2
.10dd	68		               pla
.10de	60		               rts
.10df			clrinverse
.10df	48		               pha
.10e0	a9 92		               lda  #$92
.10e2	20 d2 ff	               jsr  $ffd2
.10e5	68		               pla
.10e6	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.10e7			push
.10e7	08		          php            ; stack : flg, pcl, pch
.10e8	78		          sei
.10e9	8d 23 11	          sta  ra        ; save a
.10ec	68		          pla            ; stack : pcl, pch
.10ed	8d 22 11	          sta  rp        ; save rp
.10f0	68		          pla            ; stack : pch
.10f1	8d 24 11	          sta  pc        ; save pcl
.10f4	68		          pla            ; stack : -
.10f5	8d 25 11	          sta  pc+1      ; save pch
.10f8	a5 fb		          lda  zpage1    ; get zpage1 low byte
.10fa	48		          pha            ; stack : zp1l
.10fb	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.10fd	48		          pha            ; stack : zp1h, zp1l
.10fe	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1100	48		          pha            ; stack : zp2l, zp1h, zp1l
.1101	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1103	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1104	ad 22 11	          lda  rp        ; get rp
.1107	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1108	ad 23 11	          lda  ra        ; get a
.110b	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.110c	8a		          txa            ; get x
.110d	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.110e	98		          tya            ; get y
.110f	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1110	ad 25 11	          lda  pc+1      ; get pch
.1113	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1114	ad 24 11	          lda  pc        ; get pcl
.1117	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1118	ad 22 11	          lda  rp        ; get rp
.111b	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.111c	ad 23 11	          lda  ra        ; get a
.111f	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1120	58		          cli
.1121	60		          rts
>1122	00		rp        .byte     0
>1123	00		ra        .byte     0
>1124	00 00		pc        .word     0
.1126			pull
.1126			pop
.1126	78		          sei
.1127	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1128	8d 5b 11	          sta  pc        ; save pcl
.112b	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.112c	8d 5c 11	          sta  pc+1      ; save pch
.112f	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1130	a8		          tay            ; set y
.1131	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1132	aa		          tax            ; set x
.1133	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1134	8d 5a 11	          sta  ra        ; save a
.1137	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1138	8d 59 11	          sta  rp        ; save rp
.113b	68		          pla            ; stack : zp2l, zp1h, zp1l
.113c	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.113e	68		          pla            ; stack : zp1h, zp1l
.113f	85 fd		          sta  zpage2    ; get zpage2 High byte
.1141	68		          pla            ; stack : zp1l
.1142	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1144	68		          pla            ; stack :
.1145	85 fb		          sta  zpage1    ; get zpage1 High byte
.1147	ad 5c 11	          lda  pc+1      ; get pch
.114a	48		          pha            ; stack : pch
.114b	ad 5b 11	          lda  pc
.114e	48		          pha            ; stack : pcl, pch
.114f	ad 59 11	          lda  rp        ; get rp
.1152	48		          pha            ; stack : rp, pcl, pch
.1153	ad 5a 11	          lda  ra        ; set ra
.1156	58		          cli
.1157	28		          plp            ; stack : pcl, pch
.1158	60		          rts
>1159	00		rp        .byte     0
>115a	00		ra        .byte     0
>115b	00 00		pc        .word     0

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.115d			blkfill
.115d	20 e7 10	bf0            jsr  push
.1160	20 1e 12	               jsr  savezp1
.1163	84 fc		               sty  zpage1+1
.1165	a0 00		               ldy  #$00
.1167	84 fb		               sty  zpage1
.1169	91 fb		bf1            sta  (zpage1),y
.116b	c8		               iny
.116c	d0 fb		               bne  bf1
.116e	20 2d 12	               jsr  restzp1
.1171	20 26 11	               jsr  pop
.1174	60		               rts
.1175			memfill
.1175	20 e7 10	               jsr  push
.1178	20 5d 11	mf1            jsr  blkfill
.117b	c8		               iny
.117c	ca		               dex
.117d	d0 f9		               bne  mf1
.117f	20 26 11	               jsr  pop
.1182	60		               rts
.1183			memmove
.1183	20 e7 10	               jsr  push
.1186	ba		               tsx            ; On se crée un pointeur ...
.1187	8a		               txa
.1188	18		               clc
.1189	69 0b		               adc  #11
.118b	a8		               tay
.118c	a2 06		               ldx  #$06
.118e	b9 00 01	nextbyte       lda  $0100,y
.1191	99 dd 11	               sta  words,y
.1194	c8		               iny
.1195	ca		               dex
.1196	d0 f6		               bne  nextbyte
.1198	ad dd 11	               lda  s
.119b	8d b4 11	               sta  source+1
.119e	ad de 11	               lda  s+1
.11a1	8d b5 11	               sta  source+2
.11a4	ad df 11	               lda  d
.11a7	8d b1 11	               sta  destin+1
.11aa	ad e0 11	               lda  d+1
.11ad	8d b2 11	               sta  destin+2
.11b0	ad ff ff	destin         lda  $ffff
.11b3	8d ff ff	source         sta  $ffff
.11b6	ee b1 11	               inc  destin+1
.11b9	d0 03		               bne  src
.11bb	ee b2 11	               inc  destin+2
.11be	ee b4 11	src            inc  source+1
.11c1	d0 03		               bne  cnt
.11c3	ee b5 11	               inc  source+2
.11c6	ad e1 11	cnt            lda  compte
.11c9	d0 08		               bne  decit
.11cb	ad e2 11	               lda  compte+1
.11ce	f0 09		               beq  fini
.11d0	ce e2 11	               dec  compte+1
.11d3	ce e1 11	decit          dec  compte
.11d6	4c b0 11	               jmp  destin
.11d9	20 26 11	fini           jsr  pop
.11dc	60		               rts
.11dd			words
>11dd	00 00		s         .word     $0000
>11df	00 00		d         .word     $0000
>11e1	00 00		compte    .word     $0000
.11e3			decword
.11e3	20 e7 10	               jsr  push
.11e6	86 fd		               stx  zpage2
.11e8	84 fe		               sty  zpage2+1
.11ea	20 26 11	               jsr  pop
.11ed	60		               rts
.11ee			inczp1
.11ee	08		               php
.11ef	48		               pha
.11f0	e6 fb		               inc  zpage1
.11f2	a5 fb		               lda  zpage1
.11f4	d0 02		               bne  nopage
.11f6	e6 fc		               inc  zpage1+1
.11f8	68		nopage         pla
.11f9	28		               plp
.11fa	60		               rts
.11fb			deczp1
.11fb	08		                php
.11fc	48		                pha
.11fd	c6 fb		                dec  zpage1
.11ff	d0 02		                bne  nopage
.1201	c6 fc		                dec  zpage1+1
.1203	68		nopage          pla
.1204	28		                plp
.1205	60		                rts
.1206			inczp2
.1206	08		               php
.1207	48		               pha
.1208	e6 fd		               inc  zpage2
.120a	a5 fd		               lda  zpage2
.120c	d0 02		               bne  nopage
.120e	e6 fe		               inc  zpage2+1
.1210	68		nopage         pla
.1211	28		               plp
.1212	60		               rts
.1213			deczp2
.1213	08		               php
.1214	48		               pha
.1215	a5 fd		               lda  zpage2
.1217	d0 02		               bne  nopage
.1219	c6 fe		               dec  zpage2+1
.121b	68		nopage         pla
.121c	28		               plp
.121d	60		               rts
.121e			savezp1
.121e	08		               php
.121f	48		               pha
.1220	a5 fb		               lda  zpage1
.1222	8d 9a 12	               sta  zp1
.1225	a5 fc		               lda  zpage1+1
.1227	8d 9b 12	               sta  zp1+1
.122a	68		               pla
.122b	28		               plp
.122c	60		               rts
.122d			restzp1
.122d	08		               php
.122e	48		               pha
.122f	ad 9a 12	               lda zp1
.1232	85 fb		               sta zpage1
.1234	ad 9b 12	               lda zp1+1
.1237	85 fc		               sta zpage1+1
.1239	68		               pla
.123a	28		               plp
.123b	60		               rts
.123c			savezp2
.123c	08		         php
.123d	48		         pha
.123e	a5 fd		         lda zpage2
.1240	8d 9c 12	         sta zp2
.1243	a5 fe		         lda zpage2+1
.1245	8d 9d 12	         sta zp2+1
.1248	68		         pla
.1249	28		         plp
.124a	60		         rts
.124b			restzp2
.124b	08		                php
.124c	48		                pha
.124d	ad 9c 12	                lda  zp2
.1250	85 fd		                sta  zpage2
.1252	ad 9d 12	                lda  zp2+1
.1255	85 fe		                sta  zpage2+1
.1257	68		                pla
.1258	28		                plp
.1259	60		                rts
.125a			xy2addr
.125a	08		                php
.125b	48		                pha
.125c	8a		                txa
.125d	48		                pha
.125e	98		                tya
.125f	48		                pha
.1260	ad 95 12	                lda     addr1+1
.1263	8d 97 12	                sta     addr2+1
.1266	ad 94 12	                lda     addr1
.1269	8d 96 12	                sta     addr2
.126c	c0 00		                cpy     #$00
.126e	f0 0f		                beq     addx
.1270	18		moreline        clc
.1271	6d 93 12	                adc     ymult
.1274	90 03		                bcc     norepy
.1276	ee 97 12	                inc     addr2+1
.1279	8d 96 12	norepy          sta     addr2
.127c	88		                dey
.127d	d0 f1		                bne     moreline
.127f	8a		addx            txa
.1280	18		                clc
.1281	6d 96 12	                adc     addr2
.1284	90 03		                bcc     thatsit
.1286	ee 97 12	                inc     addr2+1
.1289	8d 96 12	thatsit         sta     addr2
.128c	68		                pla
.128d	a8		                tay
.128e	68		                pla
.128f	aa		                tax
.1290	68		                pla
.1291	28		                plp
.1292	60		                rts
>1293	28		ymult          .byte     40
>1294	00 00		addr1          .word     $0000
>1296	00 00		addr2          .word     $0000
>1298	00 00		bytecnt        .word     $0000
>129a	00 00		zp1        .word   $0000
>129c	00 00		zp2        .word   $0000

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>129e	01		a2hexcol       .byte     1              ; pour aputscxy
>129f	00		a2hexbkcol     .byte     %00000000
.12a0			a2hexpos
>12a0	00		a2hexpx        .byte     0              ; pour aputsxy
>12a1	00		a2hexpy        .byte     0
>12a2	24		a2hexprefix    .byte     "$"            ; pour aputs
>12a3	00 00		a2hexstr       .word     $00
>12a5	00 00		               .word     $00
>12a7	00		               .byte     0              ; 0 end string
>12a8	30 30 30 30	abin           .null     "00000000"
>12ac	30 30 30 30 00
>12b1	20 20 20 00	adec           .null     "   "
.12b5			putahexfmtxy
.12b5	20 e7 10	               jsr  push
.12b8	20 04 13	               jsr  atohex
.12bb	ae a0 12	               ldx  a2hexpx
.12be	ac a1 12	               ldy  a2hexpy
.12c1	20 10 10	               jsr  gotoxy
.12c4	a2 a2		               ldx  #<a2hexprefix
.12c6	a0 12		               ldy  #>a2hexprefix
.12c8	20 f6 0f	               jsr  puts
.12cb	20 26 11	               jsr  pop
.12ce	60		               rts
.12cf			putahexfmt
.12cf	20 e7 10	               jsr  push
.12d2	20 04 13	               jsr  atohex
.12d5	a2 a2		               ldx  #<a2hexprefix
.12d7	a0 12		               ldy  #>a2hexprefix
.12d9	20 f6 0f	               jsr  puts
.12dc	20 26 11	               jsr  pop
.12df	60		               rts
.12e0			putahex
.12e0	20 e7 10	               jsr  push
.12e3	20 04 13	               jsr  atohex
.12e6	a2 a3		               ldx  #<a2hexstr
.12e8	a0 12		               ldy  #>a2hexstr
.12ea	20 f6 0f	               jsr  puts
.12ed	20 26 11	               jsr  pop
.12f0	60		               rts
.12f1			nibtohex
.12f1	08		               php
.12f2	29 0f		               and  #$0f
.12f4	f8		               sed
.12f5	18		               clc
.12f6	69 90		               adc  #$90
.12f8	69 40		               adc  #$40
.12fa	d8		               cld
.12fb	28		               plp
.12fc	60		               rts
.12fd			lsra4bits
.12fd	08		               php
.12fe	4a		               lsr
.12ff	4a		               lsr
.1300	4a		               lsr
.1301	4a		               lsr
.1302	28		               plp
.1303	60		               rts
.1304			atohex
.1304	08		               php
.1305	48		               pha
.1306	48		               pha
.1307	20 fd 12	               jsr  lsra4bits
.130a	20 f1 12	               jsr  nibtohex
.130d	8d a3 12	               sta  a2hexstr
.1310	68		               pla
.1311	20 f1 12	               jsr  nibtohex
.1314	8d a4 12	               sta  a2hexstr+1
.1317	a9 00		               lda  #$00                ; set end of string
.1319	8d a5 12	               sta  a2hexstr+2
.131c	68		               pla
.131d	28		               plp
.131e	60		               rts
.131f			xy2hex
.131f	20 e7 10	               jsr  push
.1322	20 04 13	               jsr  atohex
.1325	8a		               txa
.1326	48		               pha
.1327	20 fd 12	               jsr  lsra4bits
.132a	20 f1 12	               jsr  nibtohex
.132d	8d a3 12	               sta  a2hexstr
.1330	68		               pla
.1331	20 f1 12	               jsr  nibtohex
.1334	8d a4 12	               sta  a2hexstr+1
.1337	98		               tya
.1338	48		               pha
.1339	20 fd 12	               jsr  lsra4bits
.133c	20 f1 12	               jsr  nibtohex
.133f	8d a5 12	               sta  a2hexstr+2
.1342	68		               pla
.1343	20 f1 12	               jsr  nibtohex
.1346	8d a6 12	               sta  a2hexstr+3
.1349	a9 00		               lda  #$00                ; 0 ended string
.134b	8d a7 12	               sta  a2hexstr+4
.134e	20 26 11	               jsr  pop
.1351			atobin
.1351	20 e7 10	               jsr  push
.1354	a2 08		               ldx  #8
.1356	a0 00		               ldy  #0
.1358	18		               clc
.1359	2a		nextbit        rol
.135a	48		               pha
.135b	69 00		               adc  #$00
.135d	29 01		               and  #$01
.135f	20 f1 12	               jsr  nibtohex
.1362	99 a8 12	               sta  abin,y
.1365	68		               pla
.1366	c8		               iny
.1367	ca		               dex
.1368	d0 ef		               bne  nextbit
.136a	a9 00		               lda  #0
.136c	99 a8 12	               sta  abin,y
.136f	20 26 11	               jsr  pull
.1372	60		               rts
.1373			putabin
.1373	20 51 13	               jsr     atobin
.1376	20 e7 10	               jsr     push
.1379	a2 a8		               ldx     #<abin
.137b	a0 12		               ldy     #>abin
.137d	20 f6 0f	               jsr     puts
.1380	20 26 11	               jsr     pop
.1383	60		               rts
.1384			printabin
.1384	20 e7 10	               jsr     push
.1387	a2 a8		               ldx     #<abin
.1389	a0 12		               ldy     #>abin
.138b	20 f6 0f	               jsr     puts
.138e	20 26 11	               jsr     pop
.1391	60		               rts
.1392			putabinfmt
.1392	08		               php
.1393	48		               pha
.1394	a9 25		               lda     #"%"
.1396	20 f0 0f	               jsr     putch
.1399	68		               pla
.139a	20 73 13	               jsr     putabin
.139d	28		               plp
.139e	60		               rts
.139f			putabinxy
.139f	20 10 10	               jsr     gotoxy
.13a2	20 73 13	               jsr     putabin
.13a5	60		               rts
.13a6			putabinfmtxy
.13a6	20 10 10	               jsr     gotoxy
.13a9	20 92 13	               jsr     putabinfmt
.13ac	60		               rts
.13ad			atodec
.13ad	20 e7 10	               jsr  push
.13b0	f8		               sed
.13b1	aa		               tax
.13b2	a0 00		               ldy  #$00
.13b4	a9 00		               lda  #$00
.13b6	18		nextbit        clc
.13b7	69 01		               adc  #$01
.13b9	90 01		               bcc  decx
.13bb	c8		               iny
.13bc	ca		decx           dex
.13bd	d0 f7		               bne  nextbit
.13bf	48		               pha
.13c0	98		               tya
.13c1	20 f1 12	               jsr  nibtohex
.13c4	8d b1 12	               sta  adec
.13c7	68		               pla
.13c8	48		               pha
.13c9	20 f1 12	               jsr  nibtohex
.13cc	8d b3 12	               sta  adec+2
.13cf	68		               pla
.13d0	6a		               ror
.13d1	6a		               ror
.13d2	6a		               ror
.13d3	6a		               ror
.13d4	20 f1 12	               jsr  nibtohex
.13d7	8d b2 12	               sta  adec+1
.13da	d8		               cld
.13db	20 26 11	               jsr  pull
.13de	60		               rts
>13df	00 00 00	buffer         .byte     0,0,0
.13e2			putadec
.13e2	20 e7 10	               jsr  push
.13e5	20 ad 13	               jsr  atodec
.13e8	a2 b1		               ldx  #<adec
.13ea	a0 12		               ldy  #>adec+1
.13ec	20 f6 0f	               jsr  puts
.13ef	20 26 11	               jsr  pop
.13f2	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>13f3	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>13f7	00 00 00 00 00 00 00 00 00 0d 00 00
>1403	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1407	00 00 00 00 00 00 00 00 00 00 00 00
>1413	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1417	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1423	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1427	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1433	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1437	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1443	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1447	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1453	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1457	00 00 00 00 00 00 00 00 00 00 00 00
>1463	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1467	00 00 00 00 00 00 00 00 00 00 00 00
>1473	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1477	00 00 00 00 00 00 00 00 00 00 00 00
>1483	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1487	00 00 00 00 00 00 00 00 00 00 00 00
>1493	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1497	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>14a3	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>14a7	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>14b3	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>14b7	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>14c3	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>14c7	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>14d3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>14d7	00 00 00 00 00 00 00 00 00 00 00 00
>14e3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>14e7	00 00 00 00 00 00 00 00 00 00 00 00
.14f3			waitstop
.14f3	20 e7 10	               jsr  push
.14f6	20 ed f6	wait           jsr  k_stop
.14f9	d0 fb		               bne  wait
.14fb	20 26 11	               jsr  pop
.14fe	60		               rts
.14ff			anykey
.14ff	08		               php
.1500	48		               pha
.1501	a5 cb		nokey          lda 203
.1503	c9 40		               cmp #64
.1505	f0 fa		               beq nokey
.1507	20 0d 15	               jsr releasekey
.150a	68		               pla
.150b	28		               plp
.150c	60		               rts
.150d			releasekey
.150d	08		               php
.150e	48		               pha
.150f	a5 cb		keypressed     lda 203
.1511	c9 40		               cmp #64
.1513	d0 fa		               bne keypressed
.1515	68		               pla
.1516	28		               plp
.1517	60		               rts
.1518			getkey
.1518	20 e4 ff	again          jsr  getin
.151b	c9 00		               cmp  #0
.151d	f0 f9		               beq  again
.151f	60		               rts
.1520			kbflushbuff
.1520	08		               php
.1521	48		               pha
.1522	20 e4 ff	again          jsr  getin
.1525	c9 00		               cmp  #0
.1527	d0 f9		               bne  again
.1529	68		               pla
.152a	28		               plp
.152b	60		               rts
.152c			waitkey
.152c	20 e7 10	               jsr  push
.152f	8d 7d 15	               sta  thekey
.1532	20 e4 ff	nope           jsr  getin
.1535	20 d2 ff	               jsr  chrout
.1538	cd 7d 15	               cmp  thekey
.153b	d0 f5		               bne  nope
.153d	20 d2 ff	               jsr  chrout
.1540	20 26 11	               jsr  pop
.1543	60		               rts
.1544			waitspace
.1544	20 e7 10	               jsr  push
.1547	a9 7f		wait           lda  #$7f  ;%01111111
.1549	8d 00 dc	               sta  $dc00
.154c	ad 01 dc	               lda  $dc01
.154f	29 10		               and  #$10  ;mask %00010000
.1551	d0 f4		               bne  wait
.1553	20 26 11	               jsr  pop
.1556			waitsstop
.1556	20 e7 10	               jsr  push
.1559	20 ed f6	wait           jsr  k_stop  ;%01111111
.155c	d0 fb		               bne  wait
.155e	20 26 11	               jsr  pop
.1561			waitreturn
.1561	20 e7 10	               jsr  push
.1564	ad 7e 15	               lda  thecount
.1567	8d 00 04	               sta  scrnram
.156a	a9 02		               lda  #$02
.156c	8d 00 d8	               sta  colorram
.156f	20 e4 ff	nope           jsr  getin
.1572	c9 0d		nohex          cmp  #$0d
.1574	d0 f9		               bne  nope
.1576	ee 7e 15	               inc  thecount
.1579	20 26 11	               jsr  pop
.157c	60		               rts
>157d	00		thekey         .byte   0
>157e	01		thecount       .byte   $01

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.157f			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.157f	08		                php
.1580	8d 3d 17	                sta  rega
.1583	68		                pla
.1584	8d 40 17	                sta  regp
.1587	8e 3e 17	                stx  regx
.158a	8c 3f 17	                sty  regy
.158d	ba		                tsx
.158e	8e 41 17	                stx  regs
.1591	68		                pla
.1592	8d 44 17	                sta  regpcl
.1595	8d 45 17	                sta  regpcl2
.1598	68		                pla
.1599	8d 42 17	                sta  regpch
.159c	8d 43 17	                sta  regpch2
.159f	ad 3d 17	                lda  rega
.15a2	48		                pha
.15a3	20 f1 12	                jsr  nibtohex
.15a6	8d e7 16	                sta  vala+1
.15a9	68		                pla
.15aa	20 fd 12	                jsr  lsra4bits
.15ad	20 f1 12	                jsr  nibtohex
.15b0	8d e6 16	                sta  vala
.15b3	ad 3f 17	                lda  regy
.15b6	48		                pha
.15b7	20 f1 12	                jsr  nibtohex
.15ba	8d fb 16	                sta  valy+1
.15bd	68		                pla
.15be	20 fd 12	                jsr  lsra4bits
.15c1	20 f1 12	                jsr  nibtohex
.15c4	8d fa 16	                sta  valy
.15c7	ad 3e 17	                lda  regx
.15ca	48		                pha
.15cb	20 f1 12	                jsr  nibtohex
.15ce	8d f1 16	                sta  valx+1
.15d1	68		                pla
.15d2	20 fd 12	                jsr  lsra4bits
.15d5	20 f1 12	                jsr  nibtohex
.15d8	8d f0 16	                sta  valx
.15db	ad 40 17	                lda  regp
.15de	48		                pha
.15df	20 f1 12	                jsr  nibtohex
.15e2	8d 05 17	                sta  valp+1
.15e5	68		                pla
.15e6	20 fd 12	                jsr  lsra4bits
.15e9	20 f1 12	                jsr  nibtohex
.15ec	8d 04 17	                sta  valp
.15ef	ad 41 17	                lda  regs
.15f2	48		                pha
.15f3	20 f1 12	                jsr  nibtohex
.15f6	8d 0f 17	                sta  vals+1
.15f9	68		                pla
.15fa	20 fd 12	                jsr  lsra4bits
.15fd	20 f1 12	                jsr  nibtohex
.1600	8d 0e 17	                sta  vals
.1603	18		                clc
.1604	ad 45 17	                lda regpcl2
.1607	69 01		                adc #$01
.1609	8d 45 17	                sta regpcl2
.160c	ad 45 17	                lda regpcl2
.160f	d0 03		                bne noreport
.1611	ee 43 17	                inc regpch2
.1614	ad 43 17	    noreport    lda regpch2
.1617	48		                pha
.1618	20 f1 12	                jsr  nibtohex
.161b	8d 1a 17	                sta  valpch+1
.161e	68		                pla
.161f	20 fd 12	                jsr  lsra4bits
.1622	20 f1 12	                jsr  nibtohex
.1625	8d 19 17	                sta  valpch
.1628	ad 45 17	                lda  regpcl2
.162b	48		                pha
.162c	20 f1 12	                jsr  nibtohex
.162f	8d 1c 17	                sta  valpcl+1
.1632	68		                pla
.1633	20 fd 12	                jsr  lsra4bits
.1636	20 f1 12	                jsr  nibtohex
.1639	8d 1b 17	                sta  valpcl
.163c	a5 fb		                lda  zpage1
.163e	48		                pha
.163f	20 f1 12	                jsr  nibtohex
.1642	8d 2a 17	                sta  valz1l
.1645	68		                pla
.1646	20 fd 12	                jsr  lsra4bits
.1649	20 f1 12	                jsr  nibtohex
.164c	8d 2b 17	                sta  valz1l+1
.164f	a5 fc		                lda  zpage1+1
.1651	48		                pha
.1652	20 f1 12	                jsr  nibtohex
.1655	8d 28 17	                sta  valz1h
.1658	68		                pla
.1659	20 fd 12	                jsr  lsra4bits
.165c	20 f1 12	                jsr  nibtohex
.165f	8d 29 17	                sta  valz1h+1
.1662	a5 fd		                lda  zpage2
.1664	48		                pha
.1665	20 f1 12	                jsr  nibtohex
.1668	8d 39 17	                sta  valz2l
.166b	68		                pla
.166c	20 fd 12	                jsr  lsra4bits
.166f	20 f1 12	                jsr  nibtohex
.1672	8d 3a 17	                sta  valz2l+1
.1675	a5 fe		                lda  zpage2+1
.1677	48		                pha
.1678	20 f1 12	                jsr  nibtohex
.167b	8d 37 17	                sta  valz2h
.167e	68		                pla
.167f	20 fd 12	                jsr  lsra4bits
.1682	20 f1 12	                jsr  nibtohex
.1685	8d 38 17	                sta  valz2h+1
.1688	20 d7 10	                jsr  setinverse
.168b	78		                sei
.168c	a2 df		                ldx  #<srega
.168e	a0 16		                ldy  #>srega+1
.1690	20 7f 10	                jsr  putscxy
.1693	a2 e9		                ldx  #<sregx
.1695	a0 16		                ldy  #>sregx+1
.1697	20 7f 10	                jsr  putscxy
.169a	a2 f3		                ldx  #<sregy
.169c	a0 16		                ldy  #>sregy+1
.169e	20 7f 10	                jsr  putscxy
.16a1	a2 fd		                ldx  #<sregp
.16a3	a0 16		                ldy  #>sregp+1
.16a5	20 7f 10	                jsr  putscxy
.16a8	a2 07		                ldx  #<sregs
.16aa	a0 17		                ldy  #>sregs+1
.16ac	20 7f 10	                jsr  putscxy
.16af	a2 11		                ldx  #<sregpc
.16b1	a0 17		                ldy  #>sregpc+1
.16b3	20 7f 10	                jsr  putscxy
.16b6	a2 1f		                ldx  #<sregz1
.16b8	a0 17		                ldy  #>sregz1+1
.16ba	20 7f 10	                jsr  putscxy
.16bd	a2 2e		                ldx  #<sregz2
.16bf	a0 17		                ldy  #>sregz2+1
.16c1	20 7f 10	                jsr  putscxy
.16c4	58		                cli
.16c5	20 df 10	                jsr  clrinverse
.16c8	ad 42 17	                lda  regpch
.16cb	48		                pha
.16cc	ad 44 17	                lda  regpcl
.16cf	48		                pha
.16d0	ac 3f 17	                ldy  regy
.16d3	ae 3e 17	                ldx  regx
.16d6	ad 40 17	                lda  regp
.16d9	48		                pha
.16da	ad 3d 17	                lda  rega
.16dd	28		                plp
.16de	60		                rts
>16df	01 00 17	srega   .byte   colr,coln,line
>16e2	20 41 3a 24	        .text   ' a:$' ;4,24
>16e6	00 00 00	vala    .byte   0,0,0
>16e9	01 06 17	sregx   .byte   colr,coln+6,line
>16ec	20 58 3a 24	        .text   ' x:$' ;4,24
>16f0	00 00 00	valx    .byte   0,0,0
>16f3	01 0c 17	sregy   .byte   colr,coln+12,line
>16f6	20 59 3a 24	        .text   ' y:$' ;4,24
>16fa	00 00 00	valy    .byte   0,0,0
>16fd	01 12 17	sregp   .byte   colr,coln+18,line
>1700	20 50 3a 24	        .text   ' p:$' ;4,24
>1704	00 00 00	valp    .byte   0,0,0
>1707	01 18 17	sregs   .byte   colr,coln+24,line
>170a	20 53 3a 24	        .text   ' s:$' ;4,24
>170e	00 00 00	vals    .byte   0,0,0
>1711	01 1e 17	sregpc  .byte   colr,coln+30,line
>1714	20 50 43 3a	        .text   ' pc:$' ;4,24
>1718	24
>1719	00 00		valpch  .byte   0,0
>171b	00 00 20 00	valpcl  .byte   0,0,32,0
>171f	01 03 18	sregz1  .byte   colr,coln+3,line+1
>1722	20 5a 50 31	        .text   ' zp1:$' ;4,24
>1726	3a 24
>1728	00 00		valz1h  .byte   0,0
>172a	00 00 20 00	valz1l  .byte   0,0,32,0
>172e	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>1731	20 5a 50 32	        .text   ' zp2:$' ;4,24
>1735	3a 24
>1737	00 00		valz2h  .byte   0,0
>1739	00 00 20 00	valz2l  .byte   0,0,32,0
>173d	00		rega    .byte   0
>173e	00		regx    .byte   0
>173f	00		regy    .byte   0
>1740	00		regp    .byte   0
>1741	00		regs    .byte   0
>1742	00		regpch  .byte   0
>1743	00		regpch2 .byte   0
>1744	00		regpcl  .byte   0
>1745	00		regpcl2 .byte   0
>1746	00		vzp1h   .byte   0
>1747	00		vzp1l   .byte   0
>1748	00		vzp2h   .byte   0
>1749	00		vzp2l   .byte   0

;******  Return to file: essai01.asm


;******  End of listing

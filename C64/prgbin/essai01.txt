
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L essai01.txt -o essai01.prg essai01.asm
; Thu Apr  3 18:30:55 2025

;Offset	;Hex		;Source

;******  Processing input file: essai01.asm

="20250403-233301 t1"	                Version = "20250403-233301 t1"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c f9 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm

=$df1c			uiictrlreg	=	$df1c
=$df1c			uiistatreg	=	$df1c
=$df1d			uiicmddata	=	$df1d
=$df1d			uiiidenreg	=	$df1d
=$df1e			uiirspdtaa	=	$df1e
=$df1e			uiistatdta	=	$df1e
=$00			uiiidle		=	$00
=$01			uiicmdbusy	=	$01
=$02			uiidatalast	=	$02
=$03			uiidatamore	=	$03
=$01			uii_identify	=	$01	; $01 $01 -> Read Id String as "ULTIMATE-II DOS V1.0"
=$02			uii_file_open	=	$02	; Open file for ...
=$01			uii_fa_read	=	$01	; $01 $02 $01 <filename> -> ... reading.
=$02			uii_fa_write	=	$02	; $01 $02 $02 <filename> -> ... writing.
=$04			uii_fa_new	=	$04	; $01 $02 $04 <filename> -> ... creating/writing.
=$08			uii_fa_ovwri	=	$08	; $01 $02 $08 <filename> -> ... overwriting.
=$03			uii_file_close	=	$03	; $01 $03 -> close opened file.
=$04			uii_read_data	= 	$04  ; $01 $04 [len_lo] [len_hi]
=$05			uii_writ_data	=	$05	; $01 $05 [dummy] [dummy] [data...]
=$06			uii_file_seek	=	$06	; $01 $06 [posl] [posml] [posmh] [posh].
=$07			uii_file_info 	=	$07	; $01 $07 -> returns current open file info.
=$08			uii_file_stat  = 	$08	; $01 $08 <filename> -> returns file info.
=$09			uii_file_del	=	$09	; $01 $09 <filename> -> delete/scratch file.
=$0a			uii_file_ren	=	$0a	; $01 $0a <filename> $00 <newname>
=$0b			uii_file_copy	=	$0b	; $01 $0b <source> $00 <destination>
=$11			uii_dir_change = 	$11	; $01 $11 <directory name>
=$12			uii_dir_pwd	=	$12	; $01 $12
=$13			uii_dir_open	=	$13	; $01 $13
=$14			uii_dir_read	=	$14  ; $01 $14
=$15			uii_dir_cp_ui	=	$15	; $01 $15 -> makes UI current path as API current path.
=$16			uii_dir_mkdir	=	$16	; $01 $16 <dirname> -> Create directory under current.
=$17			uii_dir_home	=	$17	; $01 $17 -> makes UI home path as API current path.
=$21			uii_reu_load	=	$21
=$22			uii_reu_save	=	$22
=$23			uii_dsk_mount	=	$23	; $01 $23 <id> <filename>
=$24			uii_dsk_umount = 	$24	; $01 $24 <id>
=$25			uii_dsk_swap 	= 	$25	; $01 $25 <id>
=$26			uii_time_get	=	$26	; $01 $26 [id] -> returns current RTC time/date.
=$27			uii_time_set	=	$27	; $01 $27 <Y> <M> <D> <H> <M> <S>
=$f0			uii_dos_echo	= 	$f0	; $01 $f0
.0854			isuiibusy
.0854	48					pha	; Bit 0
.0855	18					clc
.0856	ad 1c df				lda	uiistatreg
.0859	29 01					and	#%00000001
.085b	c9 01					cmp	#%00000001
.085d	d0 01					bne  out
.085f	38					sec
.0860	68		out			pla
.0861	60					rts
.0862			isuiidataacc
.0862	48					pha ; Bit 1
.0863	18					clc
.0864	ad 1c df				lda	uiistatreg
.0867	29 04					and	#%00000100
.0869	c9 04					cmp	#%00000100
.086b	d0 01					bne	out
.086d	38					sec
.086e	68		out			pla
.086f	60					rts
.0870			isuiiabort
.0870	48					pha ; Bit 2
.0871	18					clc
.0872	ad 1c df				lda	uiistatreg
.0875	29 04					and	#%00000100
.0877	c9 04					cmp	#%00000100
.0879	d0 01					bne	out
.087b	38					sec
.087c	68		out			pla
.087d	60					rts
.087e			isuiierror
.087e	48					pha ; Bit 3
.087f	18					clc
.0880	ad 1c df				lda	uiistatreg
.0883	29 08					and	#%00001000
.0885	c9 08					cmp	#%00001000
.0887	d0 01					bne	out
.0889	38					sec
.088a	68		out			pla
.088b	60					rts
.088c			getuiistate
.088c	08					php	; Bits 5,4
.088d	ad 1c df				lda	uiistatreg
.0890	4a					lsr
.0891	4a					lsr
.0892	4a					lsr
.0893	4a					lsr
.0894	29 03					and	#%00000011
.0896	28					plp
.0897	60					rts
.0898			isuiidataavail
.0898	48					pha
.0899	18					clc
.089a	ad 1c df				lda	uiistatreg
.089d	29 80					and	#%10000000
.089f	c9 80					cmp	#%10000000
.08a1	d0 01					bne	out
.08a3	38					sec
.08a4	68		out			pla
.08a5						rta
.08a5			waituiiidle
.08a5	08					php
.08a6	48					pha
.08a7	20 8c 08	notyet		jsr	getuiistate
.08aa	c9 00					cmp  #$00
.08ac	d0 f9					bne	notyet
.08ae	68					pla
.08af	28					plp
.08b0	60					rts
.08b1			isuiimoredata
.08b1	08					php
.08b2	48					pha
.08b3	20 8c 08	notyet		jsr	getuiistate
.08b6	c9 00					cmp  #$00
.08b8	d0 f9					bne	notyet
.08ba	68					pla
.08bb	28					plp
.08bc	60					rts
.08bd			waituiinotbusy
.08bd	08					php
.08be	20 54 08	wait			jsr	isuiibusy
.08c1	b0 fb					bcs	wait
.08c3	28					plp
.08c4	60					rts
.08c5			uiiputcmdbyte
.08c5	20 bd 08				jsr 	waituiinotbusy
.08c8	8d 1d df				sta	uiicmddata
.08cb	60					rts
.08cc			uiisndcmd
.08cc	20 6b 0d				jsr	push
.08cf	86 fb					stx	zpage1
.08d1	84 fc					sty	zpage1+1
.08d3	a0 00					ldy	#$00
.08d5	b1 fb		next			lda	(zpage1),y
.08d7	f0 07					beq	finish
.08d9	20 c5 08				jsr	uiiputcmdbyte
.08dc	c8					iny
.08dd	4c d5 08				jmp	next
.08e0	a9 01		finish		lda	#$01
.08e2	8d 1c df				sta	uiictrlreg
.08e5	20 aa 0d				jsr	pop
.08e8	60					rts
.08e9			uiireaddata
.08e9	08					php
.08ea	20 98 08				jsr	isuiidataavail
.08ed	b0 06					bcs	nodata
.08ef	ad 1e df				lda	uiirspdtaa
.08f2	4c f7 08				jmp	outdata
.08f5	a9 00		nodata		lda	#$00
.08f7	28		outdata		plp
.08f8	60					rts
.08f9			uiigettime

;******  Return to file: essai01.asm

.08f9			main
.08f9	20 3d 0c	               jsr scrmaninit
.08fc	08		               php
.08fd	48		               pha
.08fe	a9 0e		               lda  #14
.0900	8d 5c 0c	               sta  characterset
.0903	20 d2 ff	               jsr  $ffd2
.0906	68		               pla
.0907	28		               plp
.0908	08		               php
.0909	48		               pha
.090a	a9 08		               lda  #$08
.090c	20 d2 ff	               jsr  $ffd2
.090f	68		               pla
.0910	28		               plp
.0911	20 bf 09	               jsr essai01
.0914	08		               php
.0915	48		               pha
.0916	a9 09		               lda  #$09
.0918	20 d2 ff	               jsr  $ffd2
.091b	68		               pla
.091c	28		               plp
.091d	08		               php
.091e	48		               pha
.091f	a9 8e		               lda  #b_uppercase
.0921	8d 5c 0c	               sta  characterset
.0924	20 d2 ff	               jsr  $ffd2
.0927	68		               pla
.0928	28		               plp
.0929	20 5d 0c	               jsr  cls
.092c	20 6b 0d	               jsr  push
.092f	48		               pha
.0930	a9 0c		               lda  #cgrismoyen
.0932	8d 20 d0	               sta  $d020
.0935	68		               pla
.0936	48		               pha
.0937	a9 0b		               lda  #cgrisfonce
.0939	8d 21 d0	               sta  $d021
.093c	68		               pla
.093d	48		               pha
.093e	a9 0f		               lda  #cgrispale
.0940	8d 86 02	               sta  bascol
.0943	68		               pla
.0944	20 aa 0d	               jsr  pull
.0947			aide
.0947	08		               php
.0948	48		               pha
.0949	a9 0e		               lda  #14
.094b	8d 5c 0c	               sta  characterset
.094e	20 d2 ff	               jsr  $ffd2
.0951	68		               pla
.0952	28		               plp
.0953	20 5d 0c	               jsr cls
.0956	20 6b 0d	               jsr  push
.0959	a2 be		               ldx  #<line
.095b	a0 0b		               ldy  #>line
.095d	20 7a 0c	               jsr  puts
.0960	20 aa 0d	               jsr  pull
.0963	20 6b 0d	               jsr  push
.0966	a2 24		               ldx  #<headera
.0968	a0 0a		               ldy  #>headera
.096a	20 7a 0c	               jsr  puts
.096d	20 aa 0d	               jsr  pull
.0970	20 6b 0d	               jsr  push
.0973	a2 98		               ldx  #<headerb
.0975	a0 0a		               ldy  #>headerb
.0977	20 7a 0c	               jsr  puts
.097a	20 aa 0d	               jsr  pull
.097d	20 6b 0d	               jsr  push
.0980	a2 be		               ldx  #<line
.0982	a0 0b		               ldy  #>line
.0984	20 7a 0c	               jsr  puts
.0987	20 aa 0d	               jsr  pull
.098a	20 6b 0d	               jsr  push
.098d	a2 be		               ldx  #<line
.098f	a0 0b		               ldy  #>line
.0991	20 7a 0c	               jsr  puts
.0994	20 aa 0d	               jsr  pull
.0997	20 6b 0d	               jsr  push
.099a	a2 f4		               ldx  #<shortcuts
.099c	a0 0a		               ldy  #>shortcuts
.099e	20 7a 0c	               jsr  puts
.09a1	20 aa 0d	               jsr  pull
.09a4	20 6b 0d	               jsr  push
.09a7	a2 6e		               ldx  #<aidetext
.09a9	a0 0b		               ldy  #>aidetext
.09ab	20 7a 0c	               jsr  puts
.09ae	20 aa 0d	               jsr  pull
.09b1	20 6b 0d	               jsr  push
.09b4	a2 be		               ldx  #<line
.09b6	a0 0b		               ldy  #>line
.09b8	20 7a 0c	               jsr  puts
.09bb	20 aa 0d	               jsr  pull
.09be	60		               rts
.09bf			essai01
.09bf	48		               pha
.09c0	20 5d 0c	               jsr  cls
.09c3	20 6b 0d	               jsr  push
.09c6	a2 f6		               ldx  #<uiiidenttxt
.09c8	a0 0b		               ldy  #>uiiidenttxt
.09ca	20 03 0d	               jsr  putscxy
.09cd	20 aa 0d	               jsr  pull
.09d0	20 bd 08	               jsr  waituiinotbusy
.09d3	ad 1d df	               lda  uiiidenreg
.09d6	20 53 0f	               jsr  putahexfmt
.09d9	20 6b 0d	               jsr  push
.09dc	a2 10		               ldx  #<uiistatustxt
.09de	a0 0c		               ldy  #>uiistatustxt
.09e0	20 03 0d	               jsr  putscxy
.09e3	20 aa 0d	               jsr  pull
.09e6	a0 0c		               ldy  #>uiiidcmd
.09e8	a2 32		               ldx  #<uiiidcmd
.09ea	20 cc 08	               jsr  uiisndcmd
.09ed			showstatus
.09ed	20 6b 0d	               jsr  push
.09f0	a2 2a		               ldx  #<uiistatusval
.09f2	a0 0c		               ldy  #>uiistatusval
.09f4	20 03 0d	               jsr  putscxy
.09f7	20 aa 0d	               jsr  pull
.09fa	ad 1c df	               lda  uiistatreg
.09fd	20 16 10	               jsr  putabinfmt
.0a00	20 6b 0d	               jsr  push
.0a03	a2 2e		               ldx  #<uiiresponse
.0a05	a0 0c		               ldy  #>uiiresponse
.0a07	20 03 0d	               jsr  putscxy
.0a0a	20 aa 0d	               jsr  pull
.0a0d	20 98 08	moredata       jsr  isuiidataavail
.0a10	90 09		               bcc  nodata
.0a12	20 e9 08	               jsr  uiireaddata
.0a15	20 74 0c	               jsr  putch
.0a18	4c 0d 0a	               jmp  moredata
.0a1b	4c ed 09	nodata         jmp  showstatus
.0a1e	20 83 11	               jsr  anykey
.0a21	68		               pla
.0a22	60		               rts
>0a23	00		byte           .byte 0

;******  Processing file: ./strings_fr.asm

.0a24			headera
>0a24	20 31 35 34	               .text          " 1541 Ultimate II + Gestion de fichiers"
>0a28	31 20 d5 4c 54 49 4d 41 54 45 20 c9 c9 20 2b 20
>0a38	c7 45 53 54 49 4f 4e 20 44 45 20 46 49 43 48 49
>0a48	45 52 53
>0a4b	0d		               .byte     $0d
>0a4c	20 c3 41 52	               .text          " Cartouche et API par Gideon Zweijtzer."
>0a50	54 4f 55 43 48 45 20 45 54 20 c1 d0 c9 20 50 41
>0a60	52 20 c7 49 44 45 4f 4e 20 da 57 45 49 4a 54 5a
>0a70	45 52 2e
>0a73	0d		               .byte     $0d
>0a74	20 20 20 20	               .text          "     API Version 1.0, 1er Feb 2013"
>0a78	20 c1 d0 c9 20 d6 45 52 53 49 4f 4e 20 31 2e 30
>0a88	2c 20 31 45 52 20 c6 45 42 20 32 30 31 33
>0a96	0d 00		               .byte     $0d,0
>0a98	20 20 20 20	headerb        .text          "               essai01 "
>0a9c	20 20 20 20 20 20 20 20 20 20 20 45 53 53 41 49
>0aac	30 31 20
>0aaf	0d		               .byte     $0d
>0ab0	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0ab4	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>0ac4	45 4c 20 cc 41 46 52 41 4e 43 45
>0acf	0d		               .byte     $0d
>0ad0	20 20 20 20	               .text   format("       Version: %s",Version)
>0ad4	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>0ae4	30 34 30 33 2d 32 33 33 33 30 31 20 54 31
>0af2	0d 00		               .byte     $0d,0
>0af4	0d		shortcuts      .byte     $0d
>0af5	91 91		               .byte     ucurkey,ucurkey
>0af7	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>0afb	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>0aff	1d
>0b00	20 d2 20 c1	               .text          " R A C C O U R C I S "
>0b04	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>0b14	20
>0b15	0d		               .byte     $0d
>0b16	20 45 53 53	               .text   format(" essai01..: SYS%05d ($%04X)",main, main)
>0b1a	41 49 30 31 2e 2e 3a 20 d3 d9 d3 30 32 32 39 37
>0b2a	20 28 24 30 38 c6 39 29
>0b32	0d		               .byte     $0d
>0b33	20 41 49 44	               .text   format(" aide.....: SYS%05d ($%04X)",aide, aide)
>0b37	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 33 37 35
>0b47	20 28 24 30 39 34 37 29
>0b4f	0d		               .byte     $0d
>0b50	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0b54	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 33 31 36 35
>0b64	20 28 24 30 c3 35 c4 29
>0b6c	0d 00		               .byte     $0d,0
>0b6e	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d ($%04X)",essai01, essai01)
>0b72	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 34 39 35
>0b82	20 28 24 30 39 c2 c6 29
>0b8a	0d 0d		               .byte     $0d, $0d
>0b8c	20 20 20 20	               .text   format("    ex.: SYS%05d",essai01)
>0b90	45 58 2e 3a 20 d3 d9 d3 30 32 34 39 35
>0b9d	0d		               .byte     $0d
>0b9e	20 20 20 20	               .text   format("    for i=0to100:SYS%05d:next",essai01)
>0ba2	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0bb2	30 32 34 39 35 3a 4e 45 58 54
>0bbc	0d 00		               .byte     $0d,0
>0bbe	20 c0 c0 c0	line           .byte     $20,192,192,192,192,192,192,192,192,192
>0bc2	c0 c0 c0 c0 c0 c0
>0bc8	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0bcc	c0 c0 c0 c0 c0 c0
>0bd2	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0bd6	c0 c0 c0 c0 c0 c0
>0bdc	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192
>0be0	c0 c0 c0 c0 c0
>0be5	0d 00		               .byte     $0d,0
>0be7	50 52 45 53	uiiconnected   .null     "present"
>0beb	45 4e 54 00
>0bef	41 42 53 45	uiiunconnected .null     "absent"
>0bf3	4e 54 00

;******  Return to file: essai01.asm

=0			uiiy           =    0
=1			uiix           =    1
>0bf6	01 01 00	uiiidenttxt    .byte     1,uiix,uiiy
>0bf9	d5 4c 54 49	               .null     "Ultimate II + id....: "
>0bfd	4d 41 54 45 20 c9 c9 20 2b 20 49 44 2e 2e 2e 2e
>0c0d	3a 20 00
>0c10	01 01 01	uiistatustxt   .byte     1,uiix,uiiy+1
>0c13	d5 4c 54 49	               .null     "Ultimate II + status: "
>0c17	4d 41 54 45 20 c9 c9 20 2b 20 53 54 41 54 55 53
>0c27	3a 20 00
>0c2a	03 17 01 00	uiistatusval   .byte     3,uiix+22,uiiy+1,0
>0c2e	03 17 03 00	uiiresponse    .byte     3,uiix+22,uiiy+3,0
>0c32	01 01 00	uiiidcmd       .byte     $01,$01,$00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0c35	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0c39	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0c3d			libtart

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0c3d			scrmaninit
.0c3d	20 6b 0d	               jsr  push
.0c40	a9 06		               lda  #vbleu
.0c42	8d 21 d0	               sta  vicbackcol
.0c45	a9 05		               lda  #vvert
.0c47	8d 20 d0	               sta  vicbordcol
.0c4a	a9 01		               lda  #vblanc
.0c4c	8d 86 02	               sta  bascol
.0c4f	ad 00 04	               lda  scrnram
.0c52	8d 00 04	               sta  scrnram
.0c55	20 5d 0c	               jsr  cls
.0c58	20 aa 0d	               jsr  pop
.0c5b	60		               rts
>0c5c	8e		characterset   .byte b_uppercase
.0c5d			cls
.0c5d	08		               php
.0c5e	48		               pha
.0c5f	a9 93		               lda  #$93
.0c61	20 74 0c	               jsr  putch
.0c64	68		               pla
.0c65	28		               plp
.0c66	60		               rts
.0c67			putnch
.0c67	08		               php
.0c68	e0 00		               cpx  #$00
.0c6a	f0 06		               beq  out
.0c6c	20 d2 ff	again          jsr  $ffd2
.0c6f	ca		               dex
.0c70	d0 fa		               bne  again
.0c72	28		out            plp
.0c73	60		               rts
.0c74			putch
.0c74	08		               php
.0c75	20 d2 ff	               jsr  $ffd2
.0c78	28		               plp
.0c79	60		               rts
.0c7a			puts
.0c7a	20 6b 0d	               jsr  push
.0c7d	86 fb		               stx  zpage1
.0c7f	84 fc		               sty  zpage1+1
.0c81	a0 00		               ldy  #0
.0c83	b1 fb		next           lda  (zpage1),y
.0c85	f0 09		               beq  exit
.0c87	20 74 0c	               jsr  putch
.0c8a	20 72 0e	               jsr  inczp1
.0c8d	4c 83 0c	               jmp  next
.0c90	20 aa 0d	exit           jsr  pop
.0c93	60		               rts
.0c94			gotoxy
.0c94	08		               php
.0c95	18		               clc
.0c96	8a		               txa
.0c97	48		               pha
.0c98	98		               tya
.0c99	aa		               tax
.0c9a	68		               pla
.0c9b	a8		               tay
.0c9c	20 f0 ff	               jsr  kplot
.0c9f	28		               plp
.0ca0	60		               rts
.0ca1			cursor
=$0286			bascol    =    $0286
.0ca1	08		               php
.0ca2	48		               pha
.0ca3	90 12		               bcc  restore
.0ca5	20 f0 ff	               jsr  kplot
.0ca8	8c c9 0c	               sty  cx
.0cab	8e ca 0c	               stx  cy
.0cae	ad 86 02	               lda  bascol
.0cb1	8d cb 0c	               sta  bcol
.0cb4	4c c6 0c	               jmp  out
.0cb7	ae ca 0c	restore        ldx  cy
.0cba	ac c9 0c	               ldy  cx
.0cbd	20 f0 ff	               jsr  kplot
.0cc0	ad cb 0c	               lda  bcol
.0cc3	8d 86 02	               sta  bascol
.0cc6	68		out            pla
.0cc7	28		               plp
.0cc8	60		               rts
>0cc9	00		cx   .byte     $00
>0cca	00		cy   .byte     $00
>0ccb	00		bcol .byte     $00
.0ccc			cursave
.0ccc	08		               php
.0ccd	38		               sec
.0cce	20 a1 0c	               jsr  cursor
.0cd1	28		               plp
.0cd2	60		               rts
.0cd3			curput
.0cd3	08		               php
.0cd4	18		               clc
.0cd5	20 a1 0c	               jsr  cursor
.0cd8	28		               plp
.0cd9	60		               rts
.0cda			putsxy
.0cda	20 6b 0d	               jsr  push
.0cdd	86 fb		               stx  zpage1
.0cdf	84 fc		               sty  zpage1+1
.0ce1	a0 00		               ldy  #$00
.0ce3	b1 fb		               lda  (zpage1),y
.0ce5	aa		               tax
.0ce6	20 72 0e	               jsr  inczp1
.0ce9	b1 fb		               lda  (zpage1),y
.0ceb	a8		               tay
.0cec	20 94 0c	               jsr  gotoxy
.0cef	20 72 0e	               jsr  inczp1
.0cf2	a6 fb		               ldx  zpage1
.0cf4	a4 fc		               ldy  zpage1+1
.0cf6	20 7a 0c	               jsr  puts
.0cf9	20 aa 0d	               jsr  pop
.0cfc	60		               rts
>0cfd	00 00		straddr   .word     $00
>0cff	00		px        .byte     $00
>0d00	00		py        .byte     $00
>0d01	00 00		zp1       .word     $00
.0d03			putscxy
.0d03	20 6b 0d	               jsr  push
.0d06	84 fc		               sty  zpage1+1
.0d08	86 fb		               stx  zpage1
.0d0a	ad 86 02	               lda  bascol
.0d0d	8d 2d 0d	               sta  bc
.0d10	a0 00		               ldy #$00
.0d12	b1 fb		               lda  (zpage1),y
.0d14	8d 86 02	               sta  bascol
.0d17	20 72 0e	               jsr  inczp1
.0d1a	a6 fb		               ldx  zpage1
.0d1c	a4 fc		               ldy  zpage1+1
.0d1e	20 da 0c	               jsr  putsxy
.0d21	ad 2d 0d	               lda  bc
.0d24	8d 86 02	               sta  bascol
.0d27	20 aa 0d	               jsr  pop
.0d2a	60		               rts
>0d2b	00 00		straddr  .word      $00
>0d2d	00		bc       .byte      $00
>0d2e	00 00		zp1      .word      $00
.0d30			putrahex
.0d30	08		               php
.0d31	48		               pha
.0d32	20 88 0f	               jsr  atohex
.0d35	a9 27		               lda  #<a2hexstr
.0d37	a0 0f		               ldy  #>a2hexstr
.0d39	20 7a 0c	               jsr  puts
.0d3c	68		               pla
.0d3d	28		               plp
.0d3e	60		               rts
.0d3f			kputrahexxy
.0d3f			bputrahexxy
.0d3f			putrahexxy
.0d3f	08		               php
.0d40	20 88 0f	               jsr  atohex
.0d43	a9 24		               lda  #<a2hexpos
.0d45	a0 0f		               ldy  #>a2hexpos
.0d47	20 da 0c	               jsr  putsxy
.0d4a	68		               pla
.0d4b	28		               plp
.0d4c	60		               rts
.0d4d			putrahexcxy
.0d4d	08		               php
.0d4e	20 88 0f	               jsr  atohex
.0d51	a9 24		               lda  #<a2hexpos
.0d53	a0 0f		               ldy  #>a2hexpos
.0d55	20 03 0d	               jsr  putscxy
.0d58	68		               pla
.0d59	28		               plp
.0d5a	60		               rts
.0d5b			setinverse
.0d5b	48		               pha
.0d5c	a9 12		               lda  #$12
.0d5e	20 d2 ff	               jsr  $ffd2
.0d61	68		               pla
.0d62	60		               rts
.0d63			clrinverse
.0d63	48		               pha
.0d64	a9 92		               lda  #$92
.0d66	20 d2 ff	               jsr  $ffd2
.0d69	68		               pla
.0d6a	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0d6b			push
.0d6b	08		          php            ; stack : flg, pcl, pch
.0d6c	78		          sei
.0d6d	8d a7 0d	          sta  ra        ; save a
.0d70	68		          pla            ; stack : pcl, pch
.0d71	8d a6 0d	          sta  rp        ; save rp
.0d74	68		          pla            ; stack : pch
.0d75	8d a8 0d	          sta  pc        ; save pcl
.0d78	68		          pla            ; stack : -
.0d79	8d a9 0d	          sta  pc+1      ; save pch
.0d7c	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0d7e	48		          pha            ; stack : zp1l
.0d7f	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0d81	48		          pha            ; stack : zp1h, zp1l
.0d82	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0d84	48		          pha            ; stack : zp2l, zp1h, zp1l
.0d85	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0d87	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0d88	ad a6 0d	          lda  rp        ; get rp
.0d8b	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0d8c	ad a7 0d	          lda  ra        ; get a
.0d8f	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0d90	8a		          txa            ; get x
.0d91	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d92	98		          tya            ; get y
.0d93	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d94	ad a9 0d	          lda  pc+1      ; get pch
.0d97	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d98	ad a8 0d	          lda  pc        ; get pcl
.0d9b	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d9c	ad a6 0d	          lda  rp        ; get rp
.0d9f	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0da0	ad a7 0d	          lda  ra        ; get a
.0da3	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0da4	58		          cli
.0da5	60		          rts
>0da6	00		rp        .byte     0
>0da7	00		ra        .byte     0
>0da8	00 00		pc        .word     0
.0daa			pull
.0daa			pop
.0daa	78		          sei
.0dab	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0dac	8d df 0d	          sta  pc        ; save pcl
.0daf	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0db0	8d e0 0d	          sta  pc+1      ; save pch
.0db3	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0db4	a8		          tay            ; set y
.0db5	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0db6	aa		          tax            ; set x
.0db7	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0db8	8d de 0d	          sta  ra        ; save a
.0dbb	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0dbc	8d dd 0d	          sta  rp        ; save rp
.0dbf	68		          pla            ; stack : zp2l, zp1h, zp1l
.0dc0	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0dc2	68		          pla            ; stack : zp1h, zp1l
.0dc3	85 fd		          sta  zpage2    ; get zpage2 High byte
.0dc5	68		          pla            ; stack : zp1l
.0dc6	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0dc8	68		          pla            ; stack :
.0dc9	85 fb		          sta  zpage1    ; get zpage1 High byte
.0dcb	ad e0 0d	          lda  pc+1      ; get pch
.0dce	48		          pha            ; stack : pch
.0dcf	ad df 0d	          lda  pc
.0dd2	48		          pha            ; stack : pcl, pch
.0dd3	ad dd 0d	          lda  rp        ; get rp
.0dd6	48		          pha            ; stack : rp, pcl, pch
.0dd7	ad de 0d	          lda  ra        ; set ra
.0dda	58		          cli
.0ddb	28		          plp            ; stack : pcl, pch
.0ddc	60		          rts
>0ddd	00		rp        .byte     0
>0dde	00		ra        .byte     0
>0ddf	00 00		pc        .word     0

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0de1			blkfill
.0de1	20 6b 0d	bf0            jsr  push
.0de4	20 a2 0e	               jsr  savezp1
.0de7	84 fc		               sty  zpage1+1
.0de9	a0 00		               ldy  #$00
.0deb	84 fb		               sty  zpage1
.0ded	91 fb		bf1            sta  (zpage1),y
.0def	c8		               iny
.0df0	d0 fb		               bne  bf1
.0df2	20 b1 0e	               jsr  restzp1
.0df5	20 aa 0d	               jsr  pop
.0df8	60		               rts
.0df9			memfill
.0df9	20 6b 0d	               jsr  push
.0dfc	20 e1 0d	mf1            jsr  blkfill
.0dff	c8		               iny
.0e00	ca		               dex
.0e01	d0 f9		               bne  mf1
.0e03	20 aa 0d	               jsr  pop
.0e06	60		               rts
.0e07			memmove
.0e07	20 6b 0d	               jsr  push
.0e0a	ba		               tsx            ; On se crée un pointeur ...
.0e0b	8a		               txa
.0e0c	18		               clc
.0e0d	69 0b		               adc  #11
.0e0f	a8		               tay
.0e10	a2 06		               ldx  #$06
.0e12	b9 00 01	nextbyte       lda  $0100,y
.0e15	99 61 0e	               sta  words,y
.0e18	c8		               iny
.0e19	ca		               dex
.0e1a	d0 f6		               bne  nextbyte
.0e1c	ad 61 0e	               lda  s
.0e1f	8d 38 0e	               sta  source+1
.0e22	ad 62 0e	               lda  s+1
.0e25	8d 39 0e	               sta  source+2
.0e28	ad 63 0e	               lda  d
.0e2b	8d 35 0e	               sta  destin+1
.0e2e	ad 64 0e	               lda  d+1
.0e31	8d 36 0e	               sta  destin+2
.0e34	ad ff ff	destin         lda  $ffff
.0e37	8d ff ff	source         sta  $ffff
.0e3a	ee 35 0e	               inc  destin+1
.0e3d	d0 03		               bne  src
.0e3f	ee 36 0e	               inc  destin+2
.0e42	ee 38 0e	src            inc  source+1
.0e45	d0 03		               bne  cnt
.0e47	ee 39 0e	               inc  source+2
.0e4a	ad 65 0e	cnt            lda  compte
.0e4d	d0 08		               bne  decit
.0e4f	ad 66 0e	               lda  compte+1
.0e52	f0 09		               beq  fini
.0e54	ce 66 0e	               dec  compte+1
.0e57	ce 65 0e	decit          dec  compte
.0e5a	4c 34 0e	               jmp  destin
.0e5d	20 aa 0d	fini           jsr  pop
.0e60	60		               rts
.0e61			words
>0e61	00 00		s         .word     $0000
>0e63	00 00		d         .word     $0000
>0e65	00 00		compte    .word     $0000
.0e67			decword
.0e67	20 6b 0d	               jsr  push
.0e6a	86 fd		               stx  zpage2
.0e6c	84 fe		               sty  zpage2+1
.0e6e	20 aa 0d	               jsr  pop
.0e71	60		               rts
.0e72			inczp1
.0e72	08		               php
.0e73	48		               pha
.0e74	e6 fb		               inc  zpage1
.0e76	a5 fb		               lda  zpage1
.0e78	d0 02		               bne  nopage
.0e7a	e6 fc		               inc  zpage1+1
.0e7c	68		nopage         pla
.0e7d	28		               plp
.0e7e	60		               rts
.0e7f			deczp1
.0e7f	08		                php
.0e80	48		                pha
.0e81	c6 fb		                dec  zpage1
.0e83	d0 02		                bne  nopage
.0e85	c6 fc		                dec  zpage1+1
.0e87	68		nopage          pla
.0e88	28		                plp
.0e89	60		                rts
.0e8a			inczp2
.0e8a	08		               php
.0e8b	48		               pha
.0e8c	e6 fd		               inc  zpage2
.0e8e	a5 fd		               lda  zpage2
.0e90	d0 02		               bne  nopage
.0e92	e6 fe		               inc  zpage2+1
.0e94	68		nopage         pla
.0e95	28		               plp
.0e96	60		               rts
.0e97			deczp2
.0e97	08		               php
.0e98	48		               pha
.0e99	a5 fd		               lda  zpage2
.0e9b	d0 02		               bne  nopage
.0e9d	c6 fe		               dec  zpage2+1
.0e9f	68		nopage         pla
.0ea0	28		               plp
.0ea1	60		               rts
.0ea2			savezp1
.0ea2	08		               php
.0ea3	48		               pha
.0ea4	a5 fb		               lda  zpage1
.0ea6	8d 1e 0f	               sta  zp1
.0ea9	a5 fc		               lda  zpage1+1
.0eab	8d 1f 0f	               sta  zp1+1
.0eae	68		               pla
.0eaf	28		               plp
.0eb0	60		               rts
.0eb1			restzp1
.0eb1	08		               php
.0eb2	48		               pha
.0eb3	ad 1e 0f	               lda zp1
.0eb6	85 fb		               sta zpage1
.0eb8	ad 1f 0f	               lda zp1+1
.0ebb	85 fc		               sta zpage1+1
.0ebd	68		               pla
.0ebe	28		               plp
.0ebf	60		               rts
.0ec0			savezp2
.0ec0	08		         php
.0ec1	48		         pha
.0ec2	a5 fd		         lda zpage2
.0ec4	8d 20 0f	         sta zp2
.0ec7	a5 fe		         lda zpage2+1
.0ec9	8d 21 0f	         sta zp2+1
.0ecc	68		         pla
.0ecd	28		         plp
.0ece	60		         rts
.0ecf			restzp2
.0ecf	08		                php
.0ed0	48		                pha
.0ed1	ad 20 0f	                lda  zp2
.0ed4	85 fd		                sta  zpage2
.0ed6	ad 21 0f	                lda  zp2+1
.0ed9	85 fe		                sta  zpage2+1
.0edb	68		                pla
.0edc	28		                plp
.0edd	60		                rts
.0ede			xy2addr
.0ede	08		                php
.0edf	48		                pha
.0ee0	8a		                txa
.0ee1	48		                pha
.0ee2	98		                tya
.0ee3	48		                pha
.0ee4	ad 19 0f	                lda     addr1+1
.0ee7	8d 1b 0f	                sta     addr2+1
.0eea	ad 18 0f	                lda     addr1
.0eed	8d 1a 0f	                sta     addr2
.0ef0	c0 00		                cpy     #$00
.0ef2	f0 0f		                beq     addx
.0ef4	18		moreline        clc
.0ef5	6d 17 0f	                adc     ymult
.0ef8	90 03		                bcc     norepy
.0efa	ee 1b 0f	                inc     addr2+1
.0efd	8d 1a 0f	norepy          sta     addr2
.0f00	88		                dey
.0f01	d0 f1		                bne     moreline
.0f03	8a		addx            txa
.0f04	18		                clc
.0f05	6d 1a 0f	                adc     addr2
.0f08	90 03		                bcc     thatsit
.0f0a	ee 1b 0f	                inc     addr2+1
.0f0d	8d 1a 0f	thatsit         sta     addr2
.0f10	68		                pla
.0f11	a8		                tay
.0f12	68		                pla
.0f13	aa		                tax
.0f14	68		                pla
.0f15	28		                plp
.0f16	60		                rts
>0f17	28		ymult          .byte     40
>0f18	00 00		addr1          .word     $0000
>0f1a	00 00		addr2          .word     $0000
>0f1c	00 00		bytecnt        .word     $0000
>0f1e	00 00		zp1        .word   $0000
>0f20	00 00		zp2        .word   $0000

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0f22	01		a2hexcol       .byte     1              ; pour aputscxy
>0f23	00		a2hexbkcol     .byte     %00000000
.0f24			a2hexpos
>0f24	00		a2hexpx        .byte     0              ; pour aputsxy
>0f25	00		a2hexpy        .byte     0
>0f26	24		a2hexprefix    .byte     "$"            ; pour aputs
>0f27	00 00		a2hexstr       .word     $00
>0f29	00 00		               .word     $00
>0f2b	00		               .byte     0              ; 0 end string
>0f2c	30 30 30 30	abin           .null     "00000000"
>0f30	30 30 30 30 00
>0f35	20 20 20 00	adec           .null     "   "
.0f39			putahexfmtxy
.0f39	20 6b 0d	               jsr  push
.0f3c	20 88 0f	               jsr  atohex
.0f3f	ae 24 0f	               ldx  a2hexpx
.0f42	ac 25 0f	               ldy  a2hexpy
.0f45	20 94 0c	               jsr  gotoxy
.0f48	a2 26		               ldx  #<a2hexprefix
.0f4a	a0 0f		               ldy  #>a2hexprefix
.0f4c	20 7a 0c	               jsr  puts
.0f4f	20 aa 0d	               jsr  pop
.0f52	60		               rts
.0f53			putahexfmt
.0f53	20 6b 0d	               jsr  push
.0f56	20 88 0f	               jsr  atohex
.0f59	a2 26		               ldx  #<a2hexprefix
.0f5b	a0 0f		               ldy  #>a2hexprefix
.0f5d	20 7a 0c	               jsr  puts
.0f60	20 aa 0d	               jsr  pop
.0f63	60		               rts
.0f64			putahex
.0f64	20 6b 0d	               jsr  push
.0f67	20 88 0f	               jsr  atohex
.0f6a	a2 27		               ldx  #<a2hexstr
.0f6c	a0 0f		               ldy  #>a2hexstr
.0f6e	20 7a 0c	               jsr  puts
.0f71	20 aa 0d	               jsr  pop
.0f74	60		               rts
.0f75			nibtohex
.0f75	08		               php
.0f76	29 0f		               and  #$0f
.0f78	f8		               sed
.0f79	18		               clc
.0f7a	69 90		               adc  #$90
.0f7c	69 40		               adc  #$40
.0f7e	d8		               cld
.0f7f	28		               plp
.0f80	60		               rts
.0f81			lsra4bits
.0f81	08		               php
.0f82	4a		               lsr
.0f83	4a		               lsr
.0f84	4a		               lsr
.0f85	4a		               lsr
.0f86	28		               plp
.0f87	60		               rts
.0f88			atohex
.0f88	08		               php
.0f89	48		               pha
.0f8a	48		               pha
.0f8b	20 81 0f	               jsr  lsra4bits
.0f8e	20 75 0f	               jsr  nibtohex
.0f91	8d 27 0f	               sta  a2hexstr
.0f94	68		               pla
.0f95	20 75 0f	               jsr  nibtohex
.0f98	8d 28 0f	               sta  a2hexstr+1
.0f9b	a9 00		               lda  #$00                ; set end of string
.0f9d	8d 29 0f	               sta  a2hexstr+2
.0fa0	68		               pla
.0fa1	28		               plp
.0fa2	60		               rts
.0fa3			xy2hex
.0fa3	20 6b 0d	               jsr  push
.0fa6	20 88 0f	               jsr  atohex
.0fa9	8a		               txa
.0faa	48		               pha
.0fab	20 81 0f	               jsr  lsra4bits
.0fae	20 75 0f	               jsr  nibtohex
.0fb1	8d 27 0f	               sta  a2hexstr
.0fb4	68		               pla
.0fb5	20 75 0f	               jsr  nibtohex
.0fb8	8d 28 0f	               sta  a2hexstr+1
.0fbb	98		               tya
.0fbc	48		               pha
.0fbd	20 81 0f	               jsr  lsra4bits
.0fc0	20 75 0f	               jsr  nibtohex
.0fc3	8d 29 0f	               sta  a2hexstr+2
.0fc6	68		               pla
.0fc7	20 75 0f	               jsr  nibtohex
.0fca	8d 2a 0f	               sta  a2hexstr+3
.0fcd	a9 00		               lda  #$00                ; 0 ended string
.0fcf	8d 2b 0f	               sta  a2hexstr+4
.0fd2	20 aa 0d	               jsr  pop
.0fd5			atobin
.0fd5	20 6b 0d	               jsr  push
.0fd8	a2 08		               ldx  #8
.0fda	a0 00		               ldy  #0
.0fdc	18		               clc
.0fdd	2a		nextbit        rol
.0fde	48		               pha
.0fdf	69 00		               adc  #$00
.0fe1	29 01		               and  #$01
.0fe3	20 75 0f	               jsr  nibtohex
.0fe6	99 2c 0f	               sta  abin,y
.0fe9	68		               pla
.0fea	c8		               iny
.0feb	ca		               dex
.0fec	d0 ef		               bne  nextbit
.0fee	a9 00		               lda  #0
.0ff0	99 2c 0f	               sta  abin,y
.0ff3	20 aa 0d	               jsr  pull
.0ff6	60		               rts
.0ff7			putabin
.0ff7	20 d5 0f	               jsr     atobin
.0ffa	20 6b 0d	               jsr     push
.0ffd	a2 2c		               ldx     #<abin
.0fff	a0 0f		               ldy     #>abin
.1001	20 7a 0c	               jsr     puts
.1004	20 aa 0d	               jsr     pop
.1007	60		               rts
.1008			printabin
.1008	20 6b 0d	               jsr     push
.100b	a2 2c		               ldx     #<abin
.100d	a0 0f		               ldy     #>abin
.100f	20 7a 0c	               jsr     puts
.1012	20 aa 0d	               jsr     pop
.1015	60		               rts
.1016			putabinfmt
.1016	08		               php
.1017	48		               pha
.1018	a9 25		               lda     #"%"
.101a	20 74 0c	               jsr     putch
.101d	68		               pla
.101e	20 f7 0f	               jsr     putabin
.1021	28		               plp
.1022	60		               rts
.1023			putabinxy
.1023	20 94 0c	               jsr     gotoxy
.1026	20 f7 0f	               jsr     putabin
.1029	60		               rts
.102a			putabinfmtxy
.102a	20 94 0c	               jsr     gotoxy
.102d	20 16 10	               jsr     putabinfmt
.1030	60		               rts
.1031			atodec
.1031	20 6b 0d	               jsr  push
.1034	f8		               sed
.1035	aa		               tax
.1036	a0 00		               ldy  #$00
.1038	a9 00		               lda  #$00
.103a	18		nextbit        clc
.103b	69 01		               adc  #$01
.103d	90 01		               bcc  decx
.103f	c8		               iny
.1040	ca		decx           dex
.1041	d0 f7		               bne  nextbit
.1043	48		               pha
.1044	98		               tya
.1045	20 75 0f	               jsr  nibtohex
.1048	8d 35 0f	               sta  adec
.104b	68		               pla
.104c	48		               pha
.104d	20 75 0f	               jsr  nibtohex
.1050	8d 37 0f	               sta  adec+2
.1053	68		               pla
.1054	6a		               ror
.1055	6a		               ror
.1056	6a		               ror
.1057	6a		               ror
.1058	20 75 0f	               jsr  nibtohex
.105b	8d 36 0f	               sta  adec+1
.105e	d8		               cld
.105f	20 aa 0d	               jsr  pull
.1062	60		               rts
>1063	00 00 00	buffer         .byte     0,0,0
.1066			putadec
.1066	20 6b 0d	               jsr  push
.1069	20 31 10	               jsr  atodec
.106c	a2 35		               ldx  #<adec
.106e	a0 0f		               ldy  #>adec+1
.1070	20 7a 0c	               jsr  puts
.1073	20 aa 0d	               jsr  pop
.1076	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1077	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>107b	00 00 00 00 00 00 00 00 00 0d 00 00
>1087	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>108b	00 00 00 00 00 00 00 00 00 00 00 00
>1097	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>109b	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>10a7	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>10ab	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>10b7	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>10bb	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>10c7	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>10cb	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>10d7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>10db	00 00 00 00 00 00 00 00 00 00 00 00
>10e7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>10eb	00 00 00 00 00 00 00 00 00 00 00 00
>10f7	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>10fb	00 00 00 00 00 00 00 00 00 00 00 00
>1107	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>110b	00 00 00 00 00 00 00 00 00 00 00 00
>1117	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>111b	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1127	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>112b	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1137	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>113b	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1147	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>114b	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1157	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>115b	00 00 00 00 00 00 00 00 00 00 00 00
>1167	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>116b	00 00 00 00 00 00 00 00 00 00 00 00
.1177			waitstop
.1177	20 6b 0d	               jsr  push
.117a	20 ed f6	wait           jsr  k_stop
.117d	d0 fb		               bne  wait
.117f	20 aa 0d	               jsr  pop
.1182	60		               rts
.1183			anykey
.1183	08		               php
.1184	48		               pha
.1185	a5 cb		nokey          lda 203
.1187	c9 40		               cmp #64
.1189	f0 fa		               beq nokey
.118b	20 91 11	               jsr releasekey
.118e	68		               pla
.118f	28		               plp
.1190	60		               rts
.1191			releasekey
.1191	08		               php
.1192	48		               pha
.1193	a5 cb		keypressed     lda 203
.1195	c9 40		               cmp #64
.1197	d0 fa		               bne keypressed
.1199	68		               pla
.119a	28		               plp
.119b	60		               rts
.119c			getkey
.119c	20 e4 ff	again          jsr  getin
.119f	c9 00		               cmp  #0
.11a1	f0 f9		               beq  again
.11a3	60		               rts
.11a4			kbflushbuff
.11a4	08		               php
.11a5	48		               pha
.11a6	20 e4 ff	again          jsr  getin
.11a9	c9 00		               cmp  #0
.11ab	d0 f9		               bne  again
.11ad	68		               pla
.11ae	28		               plp
.11af	60		               rts
.11b0			waitkey
.11b0	20 6b 0d	               jsr  push
.11b3	8d 01 12	               sta  thekey
.11b6	20 e4 ff	nope           jsr  getin
.11b9	20 d2 ff	               jsr  chrout
.11bc	cd 01 12	               cmp  thekey
.11bf	d0 f5		               bne  nope
.11c1	20 d2 ff	               jsr  chrout
.11c4	20 aa 0d	               jsr  pop
.11c7	60		               rts
.11c8			waitspace
.11c8	20 6b 0d	               jsr  push
.11cb	a9 7f		wait           lda  #$7f  ;%01111111
.11cd	8d 00 dc	               sta  $dc00
.11d0	ad 01 dc	               lda  $dc01
.11d3	29 10		               and  #$10  ;mask %00010000
.11d5	d0 f4		               bne  wait
.11d7	20 aa 0d	               jsr  pop
.11da			waitsstop
.11da	20 6b 0d	               jsr  push
.11dd	20 ed f6	wait           jsr  k_stop  ;%01111111
.11e0	d0 fb		               bne  wait
.11e2	20 aa 0d	               jsr  pop
.11e5			waitreturn
.11e5	20 6b 0d	               jsr  push
.11e8	ad 02 12	               lda  thecount
.11eb	8d 00 04	               sta  scrnram
.11ee	a9 02		               lda  #$02
.11f0	8d 00 d8	               sta  colorram
.11f3	20 e4 ff	nope           jsr  getin
.11f6	c9 0d		nohex          cmp  #$0d
.11f8	d0 f9		               bne  nope
.11fa	ee 02 12	               inc  thecount
.11fd	20 aa 0d	               jsr  pop
.1200	60		               rts
>1201	00		thekey         .byte   0
>1202	01		thecount       .byte   $01

;******  Return to file: essai01.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L wos2024.txt -o wos2024.prg wos2024.asm
; Thu Nov 21 13:30:07 2024

;Offset	;Hex		;Source

;******  Processing input file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 00 c0	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: wos2024.asm

="20241118-223038"	     version = "20241118-223038"
=$a474			     ready     =    $a474
.c000			main
.c000	20 69 c3	               jsr  scrmaninit     ; Initialisation de l'é
.c003	20 c3 c0	               jsr  greetings
.c006	20 0a c0	               jsr  wedgeos
.c009	60		over           rts
.c00a			wedgeos
.c00a	a9 4c		initwos        lda  #$4c           ; On remplace l’instruction cmp
.c00c	85 7c		               sta  $7c            ; ... avec « : » par jmp à
.c00e	a9 19		               lda  #<wos          ; ... l’adresse de notre
.c010	85 7d		               sta  $7d            ; ... fonction à la place de
.c012	a9 c0		               lda  #>wos          ; ... celle du basic du c64
.c014	85 7e		               sta  $7e            ; ... pour s’insérer.
.c016	4c 74 a4	               jmp  ready          ; Affiche "Ready" et lance basic warm-start.
.c019	c9 40		wos            cmp  #$40           ; Est-ce un "@" (ASCII).
.c01b	d0 44		               bne  lnormcmd       ; Laisse Basic interpreter sa commande.
.c01d	a5 9d		               lda  $9d            ; Le Z de MSGFLG indique si en mode pgm.
.c01f	f0 28		               beq  lmodepgm       ; Oui - branche a lmodepgm.
.c021	ad 00 02	               lda  $0200          ; Non - lecture du tampon clavier.
.c024	c9 40		               cmp  #$40           ; Est-ce un "@" (ASCII).
.c026	d0 1c		               bne  lflushpfx      ; Non, stdcmd, branche a $1c (+28) bytes
.c028	20 76 c0	               jsr  lfindxcmd      ; Oui, cherchons parmis nos commandes.
.c02b	a0 00		l290           ldy  #$00           ; Initialise l'index à $00.
.c02d	b1 7a		lgetbuffb      lda  ($7a),y        ; Prend un octet du tampon clavier.
.c02f	c9 20		               cmp  #$20           ; Est-ce un espace?
.c031	f0 09		               beq  lnoxcmd        ; Oui, On ignore le "@".
.c033	e6 7a		               inc  $7a            ; On incremente le LSB du pointeur.
.c035	d0 f6		               bne  lgetbuffb      ; Pas de report, On lit le prochain octet.
.c037	e6 7b		               inc  $7b            ; On fait un repport au MSB du pointeur.
.c039	38		               sec                 ; On force un branchement par BCS.
.c03a	b0 f1		               bcs  lgetbuffb      ; On lit le prochain octet.
.c03c	20 74 a4	lnoxcmd        jsr  b_warmstart    ; On retourne à l'interpréteur Basic.
.c03f	a9 00		               lda  #$00           ; On place $00 dans Acc.
.c041	38		               sec                 ; On force le C pour BCS et ...
.c042	b0 1d		l410           bcs  lnormcmd       ; ... brancher à lnormcmd.
.c044	a9 40		lflushpfx      lda  #$40           ; Charge "@" dans Acc.
.c046	38		               sec                 ; On force le C pour BCS et ...
.c047	b0 18		               bcs  lnormcmd       ; ... brancher à lnormcmd.
.c049	20 76 c0	lmodepgm           jsr  lfindxcmd      ; modepgm - 3 On trouve et exécute notre commande
.c04c	a0 00		               ldy  #$00      ; 460 - 2 On initialise l'indexe
.c04e	b1 7a		l470           lda  ($7a),y   ; 470 - 2 On lit un octet du programme
.c050	c9 00		               cmp  #$00      ; 480 - 2 Si 0, fin de ligne
.c052	f0 0d		               beq  lnormcmd      ; 490 - 2 branche à $0d (+13) bytes
.c054	c9 3a		               cmp  #$3a      ; 500 - 2 Est-ce un :
.c056	f0 09		               beq  lnormcmd      ; 510 - 2 branche à $09 ( +9) bytes
.c058	e6 7a		               inc  $7a       ; 520 - 2 Incrémente lsB du PTR
.c05a	d0 f2		               bne  l470      ; 530 - 2 branche à $f2 (-14) bytes
.c05c	e6 7b		               inc  $7b       ; 540 - 2 On fait le repport
.c05e	38		               sec            ; 550 - 1 On force le branchement
.c05f	b0 ed		               bcs  l470      ; 560 - 2 branche à $ed  (-20) bytes
.c061	c9 3a		lnormcmd           cmp  #$3a      ; normcmd - 2 est-ce un délimiteur :
.c063	b0 0a		               bcs  l650      ; 580 - 2 branche si >= à $0a (+10) bytes
.c065	c9 20		               cmp  #$20      ; 590 - 2 est-ce un " "
.c067	f0 0a		               beq  l660      ; 600 - 2 branche à $07 ( +7) bytes
.c069	38		               sec            ; 610 - 1 set Carry
.c06a	e9 30		               sbc  #$30      ; 620 - 2 Soustrait la base de l'ascii
.c06c	38		               sec            ; 630 - 1 set Carry
.c06d	e9 d0		               sbc  #$d0      ; 640 - 2 soustrait ascii et set bit
.c06f	60		l650           rts            ; 650 - 1 Retourne à Basic
.c070	4c 74 a4	               jmp  ready
.c073	4c 73 00	l660           jmp  $0073     ; 660 - 3 lance CHARGET
.c076			lfindxcmd
.c076	a9 67		               lda  #<cmdtbl  ;$00      ; 670 - 2
.c078	85 7f		               sta  $7f       ;           680 - 2
.c07a	a9 c1		               lda  #>cmdtbl  ;$c1      ; 690 - 2
.c07c	85 80		               sta  $80       ;           700 - 2
.c07e	e6 7a		               inc  $7a       ; 710 - 2 Incrémente ptr ...
.c080	d0 02		               bne  l740      ; 720 - 2 branche à $02 (+02) bytes
.c082	e6 7b		               inc  $7b       ; 730 - 2 ... avec report
.c084	a0 00		l740           ldy  #$00      ; 740 - 2 initialise x et y
.c086	a2 00		               ldx  #$00      ; 750 - 2
.c088	b1 7f		l760           lda  ($7f),y   ; 760 - 2 Lit un car de la table
.c08a	f0 24		               beq  l1010     ; 770 - 2 brabche à $24 (+36) bytes
.c08c	d1 7a		               cmp  ($7a),y   ; 780 - 2
.c08e	d0 04		               bne  l830      ; 790 - 2 branche à $02 (+02) bytes
.c090	c8		               iny            ; 800 - 1
.c091	38		               sec            ; 810 - 1
.c092	b0 f4		l820           bcs  l760      ; 820 - 2 branche à $f4 (-12) bytes
.c094	b1 7f		l830           lda  ($7f),y   ; 830 - 2
.c096	f0 04		               beq  l880      ; 840 - 2 branche à $04 (+04) bytes
.c098	c8		               iny            ; 850 - 1
.c099	38		               sec            ; 860 - 1
.c09a	b0 f8		               bcs  l830      ; 870 - 2 branche à $f8 (-06) bytes
.c09c	c8		l880           iny            ; 880 - 1
.c09d	98		               tya            ; 890 - 1
.c09e	18		               clc            ; 900 - 1
.c09f	65 7f		               adc  $7f       ; 910 - 2
.c0a1	85 7f		               sta  $7f       ; 920 - 2
.c0a3	a9 00		               lda  #$00      ; 930 - 2
.c0a5	65 80		               adc  $80       ; 940 - 2
.c0a7	85 80		               sta  $80       ; 950 - 2
.c0a9	a0 00		               ldy  #$00      ; 960 - 2 Initialise l'index
.c0ab	e8		               inx            ; 970 - 1 ajoute 2 à x
.c0ac	e8		               inx            ; 980 - 1
.c0ad	38		               sec            ; 990 - 1 force le branchement
.c0ae	b0 d8		               bcs  l760      ;1000 - 2 branche à $d8 (-40) bytes
.c0b0	bd fb c1	l1010          lda  cmdvect,x ;1010 - 3 $c050,x   ;1010 - 3
.c0b3	85 80		               sta  $80       ;1020 - 2
.c0b5	e8		               inx            ;1030 - 1
.c0b6	bd fb c1	               lda  cmdvect,x ;$c050,x   ;1040 - 3
.c0b9	85 81		               sta  $81       ;1050 - 2
.c0bb	6c 80 00	               jmp  ($0080)   ;1060 - 3 Exécute le code de notre commande
.c0be	a2 0b		illegal        ldx  #$0b      ;1070 - 2
.c0c0	6c 00 03	               jmp  ($300)    ;1080 - 3 vct -> $e38b Table $a193
.c0c3			greetings
.c0c3	20 97 c4	               jsr  push
.c0c6	a9 06		               lda  #vbleu
.c0c8	8d 21 d0	               sta  vicbackcol
.c0cb	a9 03		               lda  #vcyan
.c0cd	8d 20 d0	               sta  vicbordcol
.c0d0	20 89 c3	               jsr  cls
.c0d3	a9 01		               lda  #vblanc
.c0d5	8d 86 02	               sta  bascol
.c0d8	20 97 c4	               jsr  push
.c0db	a2 bb		               ldx  #<msg0
.c0dd	a0 c2		               ldy  #>msg0
.c0df	20 a6 c3	               jsr  puts
.c0e2	20 d6 c4	               jsr  pull
.c0e5	20 97 c4	               jsr  push
.c0e8	a2 be		               ldx  #<msg1
.c0ea	a0 c2		               ldy  #>msg1
.c0ec	20 a6 c3	               jsr  puts
.c0ef	20 d6 c4	               jsr  pull
.c0f2	20 97 c4	               jsr  push
.c0f5	a2 e6		               ldx  #<msg2
.c0f7	a0 c2		               ldy  #>msg2
.c0f9	20 a6 c3	               jsr  puts
.c0fc	20 d6 c4	               jsr  pull
.c0ff	20 97 c4	               jsr  push
.c102	a2 0f		               ldx  #<msg3
.c104	a0 c3		               ldy  #>msg3
.c106	20 a6 c3	               jsr  puts
.c109	20 d6 c4	               jsr  pull
.c10c	20 97 c4	               jsr  push
.c10f	a2 38		               ldx  #<msg4
.c111	a0 c3		               ldy  #>msg4
.c113	20 a6 c3	               jsr  puts
.c116	20 d6 c4	               jsr  pull
.c119	a9 0d		               lda  #$0d
.c11b	20 a0 c3	               jsr  putch
.c11e	20 97 c4	               jsr  push
.c121	a2 be		               ldx  #<msg1
.c123	a0 c2		               ldy  #>msg1
.c125	20 a6 c3	               jsr  puts
.c128	20 d6 c4	               jsr  pull
.c12b	a9 0d		               lda  #$0d
.c12d	20 a0 c3	               jsr  putch
.c130	20 d6 c4	               jsr  pop
.c133	60		               rts
.c134			ascii2bintxt
.c134	20 97 c4	               jsr  push      ;p21
.c137	c9 30		               cmp  #$30      ;120
.c139	90 12		               bcc  L250      ;130
.c13b	c9 3a		               cmp  #$3a      ;140
.c13d	90 08		               bcc  L210      ;150
.c13f	e9 07		               sbc  #$07      ;160
.c141	90 0a		               bcc  L250      ;170
.c143	c9 40		               cmp  #$40      ;180
.c145	b0 02		               bcs  L220      ;190
.c147	29 0f		L210           and  #$0f      ;210
.c149	20 d6 c4	L220           jsr  pop       ;220 return
.c14c	60		               rts            ;230
.c14d	38		L250           sec            ;250
.c14e	20 d6 c4	               jsr  pop
.c151	60		               rts
.c152			p2tester
.c152	20 97 c4	               jsr  push
.c155	20 e4 ff	Lnoxcmd           jsr  getin     ;noxcmd
.c158	f0 fb		               beq  Lnoxcmd      ;390
.c15a	20 01 c7	               jsr  atobin    ;aschex2bin;400
.c15d	90 02		               bcc  out       ;410
.c15f	a9 ff		               lda  #$FF      ;flushpfx
.c161	85 fb		out            sta  $fb       ;430
.c163	20 d6 c4	               jsr  pop
.c166	60		               rts            ;modepgm
.c167			cmdtbl
>c167	c3 cc d3 00	               .text     "CLS",0,"LOW",0,"UP",0
>c16b	cc cf d7 00 d5 d0 00
>c172	d4 c5 d3 d4	               .text     "TEST",0
>c176	00
>c177	c1 c2 cf d5	               .text     "ABOUT",0,"?",0
>c17b	d4 00 3f 00
>c17f	d3 2b 00 d3	               .text     "S+",0,"S-",0,"B+",0,"B-",0,"F+",0,"F-",0
>c183	2d 00 c2 2b 00 c2 2d 00 c6 2b 00 c6 2d 00
>c191	c4 c9 d2 00	               .text     "DIR",0,"8DIR",0,"9DIR",0,"10DIR",0,"11DIR",0,"12DIR",0
>c195	38 c4 c9 d2 00 39 c4 c9 d2 00 31 30 c4 c9 d2 00
>c1a5	31 31 c4 c9 d2 00 31 32 c4 c9 d2 00
>c1b1	43 4c 53 00	               .text     "cls",0,"low",0,"up",0
>c1b5	4c 4f 57 00 55 50 00
>c1bc	54 45 53 54	               .text     "test",0
>c1c0	00
>c1c1	41 42 4f 55	               .text     "about",0,"?",0
>c1c5	54 00 3f 00
>c1c9	53 2b 00 53	               .text     "s+",0,"s-",0,"b+",0,"b-",0,"f+",0,"f-",0
>c1cd	2d 00 42 2b 00 42 2d 00 46 2b 00 46 2d 00
>c1db	44 49 52 00	               .text     "dir",0,"8dir",0,"9dir",0,"10dir",0,"11dir",0,"12dir",0
>c1df	38 44 49 52 00 39 44 49 52 00 31 30 44 49 52 00
>c1ef	31 31 44 49 52 00 31 32 44 49 52 00
.c1fb			cmdvect
>c1fb	43 c2 48 c2	               .word     woscls, woslow, wosup
>c1ff	4d c2
>c201	52 c2		               .word     wostest
>c203	55 c2 7b c2	               .word     wosabout, woshelp
>c207	7e c2 84 c2	               .word     wosincbrd, wosdecbrd, wosincback, wosdecback
>c20b	8a c2 90 c2
>c20f	96 c2 9c c2	               .word     wosincfont, wosdecfont
>c213	74 c2 58 c2	               .word     dir, dir8, dir9, dir10, dir11, dir12
>c217	5d c2 62 c2 67 c2 6c c2
>c21f	43 c2 48 c2	               .word     woscls, woslow, wosup
>c223	4d c2
>c225	52 c2		               .word     wostest
>c227	55 c2 7b c2	               .word     wosabout, woshelp
>c22b	7e c2 84 c2	               .word     wosincbrd, wosdecbrd, wosincback, wosdecback
>c22f	8a c2 90 c2
>c233	96 c2 9c c2	               .word     wosincfont, wosdecfont
>c237	74 c2 58 c2	               .word     dir, dir8, dir9, dir10, dir11, dir12
>c23b	5d c2 62 c2 67 c2 6c c2
.c243			cmdcode
.c243	a9 93		woscls         lda  #$93        ; code 147 clear+home
.c245	4c d2 ff	               jmp  chrout     ;
.c248	a9 0e		woslow         lda  #$0e
.c24a	4c d2 ff	               jmp  chrout
.c24d	a9 8e		wosup          lda  #$8e
.c24f	4c d2 ff	               jmp  chrout
.c252	4c 34 c1	wostest        jmp  ascii2bintxt
.c255	4c c3 c0	wosabout       jmp  greetings
.c258	a9 08		dir8           lda  #$08
.c25a	4c 71 c2	               jmp  dirn
.c25d	a9 09		dir9           lda  #$09
.c25f	4c 71 c2	               jmp  dirn
.c262	a9 0a		dir10          lda  #$0a
.c264	4c 71 c2	               jmp  dirn
.c267	a9 0b		dir11          lda  #$0b
.c269	4c 71 c2	               jmp  dirn
.c26c	a9 0c		dir12          lda  #$0c
.c26e	4c 71 c2	               jmp  dirn
.c271	8d d4 c8	dirn           sta  dsk_dev
.c274	20 c6 c7	dir            jsr  diskdir
.c277	20 a3 c7	               jsr  diskerror
.c27a	60		               rts
.c27b	4c c3 c0	woshelp        jmp  greetings
.c27e	ee 20 d0	wosincbrd      inc  vicbordcol
.c281	4c a2 c2	               jmp  woscleancol
.c284	ce 20 d0	wosdecbrd      dec  vicbordcol
.c287	4c a2 c2	               jmp  woscleancol
.c28a	ee 21 d0	wosincback     inc  vicbackcol
.c28d	4c a2 c2	               jmp  woscleancol
.c290	ce 21 d0	wosdecback     dec  vicbackcol
.c293	4c a2 c2	               jmp  woscleancol
.c296	ee 86 02	wosincfont     inc  bascol
.c299	4c a2 c2	               jmp  woscleancol
.c29c	ce 86 02	wosdecfont     dec  bascol
.c29f	4c a2 c2	               jmp  woscleancol
.c2a2	ad 21 d0	woscleancol    lda  vicbackcol
.c2a5	29 0f		               and  #$0f
.c2a7	8d 21 d0	               sta  vicbackcol
.c2aa	ad 20 d0	               lda  vicbordcol
.c2ad	29 0f		               and  #$0f
.c2af	8d 20 d0	               sta  vicbordcol
.c2b2	ad 86 02	               lda  bascol
.c2b5	29 0f		               and  #$0f
.c2b7	8d 86 02	               sta  bascol
.c2ba	60		               rts
>c2bb	93 0e 00	msg0 .byte 147,14,0
>c2be	20 2a 2a 2a	msg1 .null " **************************************"
>c2c2	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a
>c2d2	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a
>c2e2	2a 2a 2a 00
>c2e6	0d		msg2 .byte 13
>c2e7	20 2a 20 20	     .null " *      c64 WOS commande etendue      *"
>c2eb	20 20 20 20 43 36 34 20 d7 cf d3 20 43 4f 4d 4d
>c2fb	41 4e 44 45 20 45 54 45 4e 44 55 45 20 20 20 20
>c30b	20 20 2a 00
>c30f	0d		msg3 .byte 13
>c310	20 2a 20 20	     .null " *         par Daniel Lafrance        *"
>c314	20 20 20 20 20 20 20 50 41 52 20 c4 41 4e 49 45
>c324	4c 20 cc 41 46 52 41 4e 43 45 20 20 20 20 20 20
>c334	20 20 2a 00
>c338	0d		msg4 .byte 13
>c339	20 2a 20 20	     .null format(   " *    Version.....: %s   *",version)
>c33d	20 20 d6 45 52 53 49 4f 4e 2e 2e 2e 2e 2e 3a 20
>c34d	32 30 32 34 31 31 31 38 2d 32 32 33 30 33 38 20
>c35d	20 20 2a 00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>c361	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>c365	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.c369			libtart

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.c369			scrmaninit
.c369	20 97 c4	               jsr  push
.c36c	a9 06		               lda  #vbleu
.c36e	8d 21 d0	               sta  vicbackcol
.c371	a9 05		               lda  #vvert
.c373	8d 20 d0	               sta  vicbordcol
.c376	a9 01		               lda  #vblanc
.c378	8d 86 02	               sta  bascol
.c37b	ad 00 04	               lda  scrnram
.c37e	8d 00 04	               sta  scrnram
.c381	20 89 c3	               jsr  cls
.c384	20 d6 c4	               jsr  pop
.c387	60		               rts
>c388	8e		characterset   .byte b_uppercase
.c389			cls
.c389	08		               php
.c38a	48		               pha
.c38b	a9 93		               lda  #$93
.c38d	20 a0 c3	               jsr  putch
.c390	68		               pla
.c391	28		               plp
.c392	60		               rts
.c393			putnch
.c393	08		               php
.c394	e0 00		               cpx  #$00
.c396	f0 06		               beq  out
.c398	20 d2 ff	again          jsr  $ffd2
.c39b	ca		               dex
.c39c	d0 fa		               bne  again
.c39e	28		out            plp
.c39f	60		               rts
.c3a0			putch
.c3a0	08		               php
.c3a1	20 d2 ff	               jsr  $ffd2
.c3a4	28		               plp
.c3a5	60		               rts
.c3a6			puts
.c3a6	20 97 c4	               jsr  push
.c3a9	86 fb		               stx  zpage1
.c3ab	84 fc		               sty  zpage1+1
.c3ad	a0 00		               ldy  #0
.c3af	b1 fb		next           lda  (zpage1),y
.c3b1	f0 09		               beq  exit
.c3b3	20 a0 c3	               jsr  putch
.c3b6	20 9e c5	               jsr  inczp1
.c3b9	4c af c3	               jmp  next
.c3bc	20 d6 c4	exit           jsr  pop
.c3bf	60		               rts
.c3c0			gotoxy
.c3c0	08		               php
.c3c1	18		               clc
.c3c2	8a		               txa
.c3c3	48		               pha
.c3c4	98		               tya
.c3c5	aa		               tax
.c3c6	68		               pla
.c3c7	a8		               tay
.c3c8	20 f0 ff	               jsr  kplot
.c3cb	28		               plp
.c3cc	60		               rts
.c3cd			cursor
=$0286			bascol    =    $0286
.c3cd	08		               php
.c3ce	48		               pha
.c3cf	90 12		               bcc  restore
.c3d1	20 f0 ff	               jsr  kplot
.c3d4	8c f5 c3	               sty  cx
.c3d7	8e f6 c3	               stx  cy
.c3da	ad 86 02	               lda  bascol
.c3dd	8d f7 c3	               sta  bcol
.c3e0	4c f2 c3	               jmp  out
.c3e3	ae f6 c3	restore        ldx  cy
.c3e6	ac f5 c3	               ldy  cx
.c3e9	20 f0 ff	               jsr  kplot
.c3ec	ad f7 c3	               lda  bcol
.c3ef	8d 86 02	               sta  bascol
.c3f2	68		out            pla
.c3f3	28		               plp
.c3f4	60		               rts
>c3f5	00		cx   .byte     $00
>c3f6	00		cy   .byte     $00
>c3f7	00		bcol .byte     $00
.c3f8			cursave
.c3f8	08		               php
.c3f9	38		               sec
.c3fa	20 cd c3	               jsr  cursor
.c3fd	28		               plp
.c3fe	60		               rts
.c3ff			curput
.c3ff	08		               php
.c400	18		               clc
.c401	20 cd c3	               jsr  cursor
.c404	28		               plp
.c405	60		               rts
.c406			putsxy
.c406	20 97 c4	               jsr  push
.c409	86 fb		               stx  zpage1
.c40b	84 fc		               sty  zpage1+1
.c40d	a0 00		               ldy  #$00
.c40f	b1 fb		               lda  (zpage1),y
.c411	aa		               tax
.c412	20 9e c5	               jsr  inczp1
.c415	b1 fb		               lda  (zpage1),y
.c417	a8		               tay
.c418	20 c0 c3	               jsr  gotoxy
.c41b	20 9e c5	               jsr  inczp1
.c41e	a6 fb		               ldx  zpage1
.c420	a4 fc		               ldy  zpage1+1
.c422	20 a6 c3	               jsr  puts
.c425	20 d6 c4	               jsr  pop
.c428	60		               rts
>c429	00 00		straddr   .word     $00
>c42b	00		px        .byte     $00
>c42c	00		py        .byte     $00
>c42d	00 00		zp1       .word     $00
.c42f			putscxy
.c42f	20 97 c4	               jsr  push
.c432	84 fc		               sty  zpage1+1
.c434	86 fb		               stx  zpage1
.c436	ad 86 02	               lda  bascol
.c439	8d 59 c4	               sta  bc
.c43c	a0 00		               ldy #$00
.c43e	b1 fb		               lda  (zpage1),y
.c440	8d 86 02	               sta  bascol
.c443	20 9e c5	               jsr  inczp1
.c446	a6 fb		               ldx  zpage1
.c448	a4 fc		               ldy  zpage1+1
.c44a	20 06 c4	               jsr  putsxy
.c44d	ad 59 c4	               lda  bc
.c450	8d 86 02	               sta  bascol
.c453	20 d6 c4	               jsr  pop
.c456	60		               rts
>c457	00 00		straddr  .word      $00
>c459	00		bc       .byte      $00
>c45a	00 00		zp1      .word      $00
.c45c			putrahex
.c45c	08		               php
.c45d	48		               pha
.c45e	20 b4 c6	               jsr  a2hex
.c461	a9 53		               lda  #<a2hexstr
.c463	a0 c6		               ldy  #>a2hexstr
.c465	20 a6 c3	               jsr  puts
.c468	68		               pla
.c469	28		               plp
.c46a	60		               rts
.c46b			kputrahexxy
.c46b			bputrahexxy
.c46b			putrahexxy
.c46b	08		               php
.c46c	20 b4 c6	               jsr  a2hex
.c46f	a9 50		               lda  #<a2hexpos
.c471	a0 c6		               ldy  #>a2hexpos
.c473	20 06 c4	               jsr  putsxy
.c476	68		               pla
.c477	28		               plp
.c478	60		               rts
.c479			putrahexcxy
.c479	08		               php
.c47a	20 b4 c6	               jsr  a2hex
.c47d	a9 50		               lda  #<a2hexpos
.c47f	a0 c6		               ldy  #>a2hexpos
.c481	20 2f c4	               jsr  putscxy
.c484	68		               pla
.c485	28		               plp
.c486	60		               rts
.c487			setinverse
.c487	48		               pha
.c488	a9 12		               lda  #$12
.c48a	20 d2 ff	               jsr  $ffd2
.c48d	68		               pla
.c48e	60		               rts
.c48f			clrinverse
.c48f	48		               pha
.c490	a9 92		               lda  #$92
.c492	20 d2 ff	               jsr  $ffd2
.c495	68		               pla
.c496	60		               rts

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.c497			push
.c497	08		          php            ; stack : flg, pcl, pch
.c498	78		          sei
.c499	8d d3 c4	          sta  ra        ; save a
.c49c	68		          pla            ; stack : pcl, pch
.c49d	8d d2 c4	          sta  rp        ; save rp
.c4a0	68		          pla            ; stack : pch
.c4a1	8d d4 c4	          sta  pc        ; save pcl
.c4a4	68		          pla            ; stack : -
.c4a5	8d d5 c4	          sta  pc+1      ; save pch
.c4a8	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c4aa	48		          pha            ; stack : zp1l
.c4ab	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c4ad	48		          pha            ; stack : zp1h, zp1l
.c4ae	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c4b0	48		          pha            ; stack : zp2l, zp1h, zp1l
.c4b1	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c4b3	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c4b4	ad d2 c4	          lda  rp        ; get rp
.c4b7	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c4b8	ad d3 c4	          lda  ra        ; get a
.c4bb	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c4bc	8a		          txa            ; get x
.c4bd	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4be	98		          tya            ; get y
.c4bf	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4c0	ad d5 c4	          lda  pc+1      ; get pch
.c4c3	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4c4	ad d4 c4	          lda  pc        ; get pcl
.c4c7	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4c8	ad d2 c4	          lda  rp        ; get rp
.c4cb	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4cc	ad d3 c4	          lda  ra        ; get a
.c4cf	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4d0	58		          cli
.c4d1	60		          rts
>c4d2	00		rp        .byte     0
>c4d3	00		ra        .byte     0
>c4d4	00 00		pc        .word     0
.c4d6			pull
.c4d6			pop
.c4d6	78		          sei
.c4d7	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4d8	8d 0b c5	          sta  pc        ; save pcl
.c4db	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4dc	8d 0c c5	          sta  pc+1      ; save pch
.c4df	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4e0	a8		          tay            ; set y
.c4e1	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c4e2	aa		          tax            ; set x
.c4e3	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c4e4	8d 0a c5	          sta  ra        ; save a
.c4e7	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c4e8	8d 09 c5	          sta  rp        ; save rp
.c4eb	68		          pla            ; stack : zp2l, zp1h, zp1l
.c4ec	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c4ee	68		          pla            ; stack : zp1h, zp1l
.c4ef	85 fd		          sta  zpage2    ; get zpage2 High byte
.c4f1	68		          pla            ; stack : zp1l
.c4f2	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c4f4	68		          pla            ; stack :
.c4f5	85 fb		          sta  zpage1    ; get zpage1 High byte
.c4f7	ad 0c c5	          lda  pc+1      ; get pch
.c4fa	48		          pha            ; stack : pch
.c4fb	ad 0b c5	          lda  pc
.c4fe	48		          pha            ; stack : pcl, pch
.c4ff	ad 09 c5	          lda  rp        ; get rp
.c502	48		          pha            ; stack : rp, pcl, pch
.c503	ad 0a c5	          lda  ra        ; set ra
.c506	58		          cli
.c507	28		          plp            ; stack : pcl, pch
.c508	60		          rts
>c509	00		rp        .byte     0
>c50a	00		ra        .byte     0
>c50b	00 00		pc        .word     0

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c50d			blkfill
.c50d	20 97 c4	bf0            jsr  push
.c510	20 ce c5	               jsr  savezp1
.c513	84 fc		               sty  zpage1+1
.c515	a0 00		               ldy  #$00
.c517	84 fb		               sty  zpage1
.c519	91 fb		bf1            sta  (zpage1),y
.c51b	c8		               iny
.c51c	d0 fb		               bne  bf1
.c51e	20 dd c5	               jsr  restzp1
.c521	20 d6 c4	               jsr  pop
.c524	60		               rts
.c525			memfill
.c525	20 97 c4	               jsr  push
.c528	20 0d c5	mf1            jsr  blkfill
.c52b	c8		               iny
.c52c	ca		               dex
.c52d	d0 f9		               bne  mf1
.c52f	20 d6 c4	               jsr  pop
.c532	60		               rts
.c533			memmove
.c533	20 97 c4	               jsr  push
.c536	ba		               tsx            ; On se crée un pointeur ...
.c537	8a		               txa
.c538	18		               clc
.c539	69 0b		               adc  #11
.c53b	a8		               tay
.c53c	a2 06		               ldx  #$06
.c53e	b9 00 01	nextbyte       lda  $0100,y
.c541	99 8d c5	               sta  words,y
.c544	c8		               iny
.c545	ca		               dex
.c546	d0 f6		               bne  nextbyte
.c548	ad 8d c5	               lda  s
.c54b	8d 64 c5	               sta  source+1
.c54e	ad 8e c5	               lda  s+1
.c551	8d 65 c5	               sta  source+2
.c554	ad 8f c5	               lda  d
.c557	8d 61 c5	               sta  destin+1
.c55a	ad 90 c5	               lda  d+1
.c55d	8d 62 c5	               sta  destin+2
.c560	ad ff ff	destin         lda  $ffff
.c563	8d ff ff	source         sta  $ffff
.c566	ee 61 c5	               inc  destin+1
.c569	d0 03		               bne  src
.c56b	ee 62 c5	               inc  destin+2
.c56e	ee 64 c5	src            inc  source+1
.c571	d0 03		               bne  cnt
.c573	ee 65 c5	               inc  source+2
.c576	ad 91 c5	cnt            lda  compte
.c579	d0 08		               bne  decit
.c57b	ad 92 c5	               lda  compte+1
.c57e	f0 09		               beq  fini
.c580	ce 92 c5	               dec  compte+1
.c583	ce 91 c5	decit          dec  compte
.c586	4c 60 c5	               jmp  destin
.c589	20 d6 c4	fini           jsr  pop
.c58c	60		               rts
.c58d			words
>c58d	00 00		s         .word     $0000
>c58f	00 00		d         .word     $0000
>c591	00 00		compte    .word     $0000
.c593			decword
.c593	20 97 c4	               jsr  push
.c596	86 fd		               stx  zpage2
.c598	84 fe		               sty  zpage2+1
.c59a	20 d6 c4	               jsr  pop
.c59d	60		               rts
.c59e			inczp1
.c59e	08		               php
.c59f	48		               pha
.c5a0	e6 fb		               inc  zpage1
.c5a2	a5 fb		               lda  zpage1
.c5a4	d0 02		               bne  nopage
.c5a6	e6 fc		               inc  zpage1+1
.c5a8	68		nopage         pla
.c5a9	28		               plp
.c5aa	60		               rts
.c5ab			deczp1
.c5ab	08		                php
.c5ac	48		                pha
.c5ad	c6 fb		                dec  zpage1
.c5af	d0 02		                bne  nopage
.c5b1	c6 fc		                dec  zpage1+1
.c5b3	68		nopage          pla
.c5b4	28		                plp
.c5b5	60		                rts
.c5b6			inczp2
.c5b6	08		               php
.c5b7	48		               pha
.c5b8	e6 fd		               inc  zpage2
.c5ba	a5 fd		               lda  zpage2
.c5bc	d0 02		               bne  nopage
.c5be	e6 fe		               inc  zpage2+1
.c5c0	68		nopage         pla
.c5c1	28		               plp
.c5c2	60		               rts
.c5c3			deczp2
.c5c3	08		               php
.c5c4	48		               pha
.c5c5	a5 fd		               lda  zpage2
.c5c7	d0 02		               bne  nopage
.c5c9	c6 fe		               dec  zpage2+1
.c5cb	68		nopage         pla
.c5cc	28		               plp
.c5cd	60		               rts
.c5ce			savezp1
.c5ce	08		               php
.c5cf	48		               pha
.c5d0	a5 fb		               lda  zpage1
.c5d2	8d 4a c6	               sta  zp1
.c5d5	a5 fc		               lda  zpage1+1
.c5d7	8d 4b c6	               sta  zp1+1
.c5da	68		               pla
.c5db	28		               plp
.c5dc	60		               rts
.c5dd			restzp1
.c5dd	08		               php
.c5de	48		               pha
.c5df	ad 4a c6	               lda zp1
.c5e2	85 fb		               sta zpage1
.c5e4	ad 4b c6	               lda zp1+1
.c5e7	85 fc		               sta zpage1+1
.c5e9	68		               pla
.c5ea	28		               plp
.c5eb	60		               rts
.c5ec			savezp2
.c5ec	08		         php
.c5ed	48		         pha
.c5ee	a5 fd		         lda zpage2
.c5f0	8d 4c c6	         sta zp2
.c5f3	a5 fe		         lda zpage2+1
.c5f5	8d 4d c6	         sta zp2+1
.c5f8	68		         pla
.c5f9	28		         plp
.c5fa	60		         rts
.c5fb			restzp2
.c5fb	08		                php
.c5fc	48		                pha
.c5fd	ad 4c c6	                lda  zp2
.c600	85 fd		                sta  zpage2
.c602	ad 4d c6	                lda  zp2+1
.c605	85 fe		                sta  zpage2+1
.c607	68		                pla
.c608	28		                plp
.c609	60		                rts
.c60a			xy2addr
.c60a	08		                php
.c60b	48		                pha
.c60c	8a		                txa
.c60d	48		                pha
.c60e	98		                tya
.c60f	48		                pha
.c610	ad 45 c6	                lda     addr1+1
.c613	8d 47 c6	                sta     addr2+1
.c616	ad 44 c6	                lda     addr1
.c619	8d 46 c6	                sta     addr2
.c61c	c0 00		                cpy     #$00
.c61e	f0 0f		                beq     addx
.c620	18		moreline        clc
.c621	6d 43 c6	                adc     ymult
.c624	90 03		                bcc     norepy
.c626	ee 47 c6	                inc     addr2+1
.c629	8d 46 c6	norepy          sta     addr2
.c62c	88		                dey
.c62d	d0 f1		                bne     moreline
.c62f	8a		addx            txa
.c630	18		                clc
.c631	6d 46 c6	                adc     addr2
.c634	90 03		                bcc     thatsit
.c636	ee 47 c6	                inc     addr2+1
.c639	8d 46 c6	thatsit         sta     addr2
.c63c	68		                pla
.c63d	a8		                tay
.c63e	68		                pla
.c63f	aa		                tax
.c640	68		                pla
.c641	28		                plp
.c642	60		                rts
>c643	28		ymult          .byte     40
>c644	00 00		addr1          .word     $0000
>c646	00 00		addr2          .word     $0000
>c648	00 00		bytecnt        .word     $0000
>c64a	00 00		zp1        .word   $0000
>c64c	00 00		zp2        .word   $0000

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c64e	01		a2hexcol       .byte     1              ; pour aputscxy
>c64f	00		a2hexbkcol     .byte     %00000000
.c650			a2hexpos
>c650	00		a2hexpx        .byte     0              ; pour aputsxy
>c651	00		a2hexpy        .byte     0
>c652	24		a2hexprefix    .byte     "$"            ; pour aputs
>c653	00 00		a2hexstr       .word     $00
>c655	00 00		               .word     $00
>c657	00		               .byte     0              ; 0 end string
>c658	30 30 30 30	abin           .null     "00000000"
>c65c	30 30 30 30 00
>c661	20 20 20 00	adec           .null     "   "
.c665			putahexfmtxy
.c665	20 97 c4	               jsr  push
.c668	20 b4 c6	               jsr  a2hex
.c66b	ae 50 c6	               ldx  a2hexpx
.c66e	ac 51 c6	               ldy  a2hexpy
.c671	20 c0 c3	               jsr  gotoxy
.c674	a2 52		               ldx  #<a2hexprefix
.c676	a0 c6		               ldy  #>a2hexprefix
.c678	20 a6 c3	               jsr  puts
.c67b	20 d6 c4	               jsr  pop
.c67e	60		               rts
.c67f			putahexfmt
.c67f	20 97 c4	               jsr  push
.c682	20 b4 c6	               jsr  a2hex
.c685	a2 52		               ldx  #<a2hexprefix
.c687	a0 c6		               ldy  #>a2hexprefix
.c689	20 a6 c3	               jsr  puts
.c68c	20 d6 c4	               jsr  pop
.c68f	60		               rts
.c690			putahex
.c690	20 97 c4	               jsr  push
.c693	20 b4 c6	               jsr  a2hex
.c696	a2 53		               ldx  #<a2hexstr
.c698	a0 c6		               ldy  #>a2hexstr
.c69a	20 a6 c3	               jsr  puts
.c69d	20 d6 c4	               jsr  pop
.c6a0	60		               rts
.c6a1			nib2hex
.c6a1	08		               php
.c6a2	29 0f		               and  #$0f
.c6a4	f8		               sed
.c6a5	18		               clc
.c6a6	69 90		               adc  #$90
.c6a8	69 40		               adc  #$40
.c6aa	d8		               cld
.c6ab	28		               plp
.c6ac	60		               rts
.c6ad			lsra4bits
.c6ad	08		               php
.c6ae	4a		               lsr
.c6af	4a		               lsr
.c6b0	4a		               lsr
.c6b1	4a		               lsr
.c6b2	28		               plp
.c6b3	60		               rts
.c6b4			a2hex
.c6b4	08		               php
.c6b5	48		               pha
.c6b6	48		               pha
.c6b7	20 ad c6	               jsr  lsra4bits
.c6ba	20 a1 c6	               jsr  nib2hex
.c6bd	8d 53 c6	               sta  a2hexstr
.c6c0	68		               pla
.c6c1	20 a1 c6	               jsr  nib2hex
.c6c4	8d 54 c6	               sta  a2hexstr+1
.c6c7	a9 00		               lda  #$00                ; set end of string
.c6c9	8d 55 c6	               sta  a2hexstr+2
.c6cc	68		               pla
.c6cd	28		               plp
.c6ce	60		               rts
.c6cf			xy2hex
.c6cf	20 97 c4	               jsr  push
.c6d2	20 b4 c6	               jsr  a2hex
.c6d5	8a		               txa
.c6d6	48		               pha
.c6d7	20 ad c6	               jsr  lsra4bits
.c6da	20 a1 c6	               jsr  nib2hex
.c6dd	8d 53 c6	               sta  a2hexstr
.c6e0	68		               pla
.c6e1	20 a1 c6	               jsr  nib2hex
.c6e4	8d 54 c6	               sta  a2hexstr+1
.c6e7	98		               tya
.c6e8	48		               pha
.c6e9	20 ad c6	               jsr  lsra4bits
.c6ec	20 a1 c6	               jsr  nib2hex
.c6ef	8d 55 c6	               sta  a2hexstr+2
.c6f2	68		               pla
.c6f3	20 a1 c6	               jsr  nib2hex
.c6f6	8d 56 c6	               sta  a2hexstr+3
.c6f9	a9 00		               lda  #$00                ; 0 ended string
.c6fb	8d 57 c6	               sta  a2hexstr+4
.c6fe	20 d6 c4	               jsr  pop
.c701			atobin
.c701	20 97 c4	               jsr  push
.c704	a2 08		               ldx  #8
.c706	a0 00		               ldy  #0
.c708	18		               clc
.c709	2a		nextbit        rol
.c70a	48		               pha
.c70b	69 00		               adc  #$00
.c70d	29 01		               and  #$01
.c70f	20 a1 c6	               jsr  nib2hex
.c712	99 58 c6	               sta  abin,y
.c715	68		               pla
.c716	c8		               iny
.c717	ca		               dex
.c718	d0 ef		               bne  nextbit
.c71a	a9 00		               lda  #0
.c71c	99 58 c6	               sta  abin,y
.c71f	20 d6 c4	               jsr  pull
.c722	60		               rts
.c723			putabin
.c723	20 01 c7	               jsr     atobin
.c726	20 97 c4	               jsr     push
.c729	a2 58		               ldx     #<abin
.c72b	a0 c6		               ldy     #>abin
.c72d	20 a6 c3	               jsr     puts
.c730	20 d6 c4	               jsr     pop
.c733	60		               rts
.c734			printabin
.c734	20 97 c4	               jsr     push
.c737	a2 58		               ldx     #<abin
.c739	a0 c6		               ldy     #>abin
.c73b	20 a6 c3	               jsr     puts
.c73e	20 d6 c4	               jsr     pop
.c741	60		               rts
.c742			putabinfmt
.c742	08		               php
.c743	48		               pha
.c744	a9 25		               lda     #"%"
.c746	20 a0 c3	               jsr     putch
.c749	68		               pla
.c74a	20 23 c7	               jsr     putabin
.c74d	28		               plp
.c74e	60		               rts
.c74f			putabinxy
.c74f	20 c0 c3	               jsr     gotoxy
.c752	20 23 c7	               jsr     putabin
.c755	60		               rts
.c756			putabinfmtxy
.c756	20 c0 c3	               jsr     gotoxy
.c759	20 42 c7	               jsr     putabinfmt
.c75c	60		               rts
.c75d			atodec
.c75d	20 97 c4	               jsr  push
.c760	f8		               sed
.c761	aa		               tax
.c762	a0 00		               ldy  #$00
.c764	a9 00		               lda  #$00
.c766	18		nextbit        clc
.c767	69 01		               adc  #$01
.c769	90 01		               bcc  decx
.c76b	c8		               iny
.c76c	ca		decx           dex
.c76d	d0 f7		               bne  nextbit
.c76f	48		               pha
.c770	98		               tya
.c771	20 a1 c6	               jsr  nib2hex
.c774	8d 61 c6	               sta  adec
.c777	68		               pla
.c778	48		               pha
.c779	20 a1 c6	               jsr  nib2hex
.c77c	8d 63 c6	               sta  adec+2
.c77f	68		               pla
.c780	6a		               ror
.c781	6a		               ror
.c782	6a		               ror
.c783	6a		               ror
.c784	20 a1 c6	               jsr  nib2hex
.c787	8d 62 c6	               sta  adec+1
.c78a	d8		               cld
.c78b	20 d6 c4	               jsr  pull
.c78e	60		               rts
>c78f	00 00 00	buffer         .byte     0,0,0
.c792			putadec
.c792	20 97 c4	               jsr  push
.c795	20 5d c7	               jsr  atodec
.c798	a2 61		               ldx  #<adec
.c79a	a0 c6		               ldy  #>adec+1
.c79c	20 a6 c3	               jsr  puts
.c79f	20 d6 c4	               jsr  pop
.c7a2	60		               rts

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-disk.asm

.c7a3			diskerror
.c7a3	20 97 c4	               jsr  push
.c7a6	ad d4 c8	               lda  dsk_dev   ; Select device 8
.c7a9	85 ba		               sta  $ba       ;
.c7ab	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.c7ae	a9 6f		               lda  #$6f
.c7b0	85 b9		               sta  $b9       ;
.c7b2	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.c7b5	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.c7b8	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.c7bb	c9 0d		               cmp  #$0d      ; Is it CR ?
.c7bd	d0 f6		               bne  nextchar  ; No, get next char
.c7bf	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.c7c2	20 d6 c4	               jsr  pop
.c7c5	60		               rts
.c7c6			diskdir
.c7c6	20 97 c4	               jsr  push
.c7c9	a9 24		               lda  #$24      ; L012C - Filename is "$"
.c7cb	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.c7cd	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.c7cf	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.c7d1	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.c7d3	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.c7d5	a9 01		               lda  #$01      ; L0138 - set ...
.c7d7	85 b7		               sta  $b7       ; L013A - ... length of current filename
.c7d9	ad d4 c8	               lda  dsk_dev   ; L013C - set 8 as ...
.c7dc	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.c7de	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.c7e0	85 b9		               sta  $b9       ; L0142 - ... secondary address
.c7e2	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.c7e5	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.c7e7	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.c7ea	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.c7ec	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.c7ef	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.c7f1	85 90		               sta  $90       ; L0153 - ... kernal status word.
.c7f3	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.c7f5	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.c7f7	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.c7fa	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.c7fc	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.c7fe	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.c800	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.c803	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.c805	d0 28		               bne  exit      ; L0167
.c807	a4 fb		               ldy  $fb       ; L0169
.c809	88		               dey            ; L016b
.c80a	d0 e9		               bne  loop1     ; L016C - If not last, loop
.c80c	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.c80e	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.c811	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.c813	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.c816	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.c819	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.c81b	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.c81d	aa		               tax            ; L017F - tfr a in x
.c81e	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.c820	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.c823	4c 16 c8	               jmp  loop3     ; L0185 - get another byte
.c826	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.c828	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.c82b	a0 02		               ldy  #$02      ; L018D - set Y to 2
.c82d	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.c82f	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.c832	20 d6 c4	               jsr  pop
.c835	60		               rts            ; L0194
.c836			directory
.c836	20 c6 c7	               jsr  diskdir
.c839	20 a3 c7	               jsr  diskerror
.c83c	60		               rts
.c83d			memtofile
.c83d	20 ae c8	               jsr  dsk_putmesg
.c840	20 97 c4	               jsr  push
.c843	ad d8 c8	               lda  dsk_fnlen
.c846	ae d6 c8	               ldx  dsk_fnptr      ; load fname addr. lbyte
.c849	ac d7 c8	               ldy  dsk_fnptr+1
.c84c	20 bd ff	               jsr  setnam         ; call setnam
.c84f	ad d5 c8	               lda  dsk_lfsno
.c852	ae d4 c8	               ldx  dsk_dev        ; specified device
.c855	a0 00		skip           ldy  #$00
.c857	20 ba ff	               jsr  setlfs         ; call setlfs
.c85a	ad d0 c8	               lda  dsk_data_s     ; put data start lbyte in stal
.c85d	85 c1		               sta  stal
.c85f	ad d1 c8	               lda  dsk_data_s+1   ; put data start hbyte in stal
.c862	85 c2		               sta  stal+1
.c864	ae d2 c8	               ldx  dsk_data_e     ; put data end lbyte in x
.c867	ac d3 c8	               ldy  dsk_data_e+1   ; put data end hbyte in y
.c86a	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.c86c	20 d8 ff	               jsr  save           ; call save
.c86f	90 00		               bcc  noerror        ; if carry set, a load error has happened
.c871	20 d6 c4	noerror        jsr  pop
.c874	60		               rts
.c875			filetomem
.c875	20 97 c4	               jsr push
.c878	ad d8 c8	               lda dsk_fnlen
.c87b	ae d6 c8	               ldx dsk_fnptr
.c87e	ac d7 c8	               ldy dsk_fnptr+1
.c881	20 bd ff	               jsr setnam     ; call setnam
.c884	ad d5 c8	               lda dsk_lfsno
.c887	ae d4 c8	               ldx dsk_dev    ; default to device 8
.c88a	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.c88c	20 ba ff	               jsr setlfs     ; call setlfs
.c88f	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.c891	20 d5 ff	               jsr load       ; call load
.c894	90 03		               bcc noerror      ; if carry set, a load error has happened
.c896	20 9d c8	               jsr  error
.c899	20 d6 c4	noerror        jsr pop
.c89c	60		               rts
.c89d			error
.c89d	60		               rts
.c89e	a2 e9		error1         ldx  #<dsk_emsg1
.c8a0	a0 c8		               ldy  #>dsk_emsg1
.c8a2	20 a6 c3	               jsr  puts
.c8a5	60		               rts
.c8a6	a2 fd		error2         ldx #<dsk_emsg2
.c8a8	a0 c8		               ldy #>dsk_emsg2
.c8aa	20 a6 c3	               jsr puts
.c8ad	60		               rts
.c8ae			dsk_putmesg
.c8ae	20 97 c4	               jsr push
.c8b1	a2 d9		               ldx #<dsk_msg0
.c8b3	a0 c8		               ldy #>dsk_msg0
.c8b5	20 a6 c3	               jsr puts
.c8b8	a9 20		               lda #$20
.c8ba	20 a0 c3	               jsr putch
.c8bd	ae d6 c8	               ldx dsk_fnptr
.c8c0	ac d7 c8	               ldy dsk_fnptr+1
.c8c3	20 a6 c3	               jsr puts
.c8c6	ad d5 c8	               lda dsk_lfsno
.c8c9	20 c3 ff	               jsr close
.c8cc	20 d6 c4	               jsr pop
.c8cf	60		               rts
>c8d0	00 00		dsk_data_s     .word     $0000    ; example addresses
>c8d2	00 20		dsk_data_e     .word     $2000
>c8d4	08		dsk_dev        .byte     $08
>c8d5	00		dsk_lfsno      .byte     $00
>c8d6	00 00		dsk_fnptr      .word     $00
>c8d8	00		dsk_fnlen      .byte     0
>c8d9	8d		dsk_msg0       .byte     141
>c8da	53 41 56 49	               .null     "saving"
>c8de	4e 47 00
>c8e1	8d		dsk_msg1       .byte     141
>c8e2	53 55 43 43	               .null     "succes"
>c8e6	45 53 00
>c8e9	8d		dsk_emsg1      .byte     141
>c8ea	46 49 43 48	               .null     "fichier non ouvert"
>c8ee	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>c8fd	11		dsk_emsg2      .byte     17
>c8fe	45 52 52 45	               .null     "erreur d'ecriture"
>c902	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: wos2024.asm


;******  End of listing

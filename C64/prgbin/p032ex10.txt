
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p032ex10.txt -o p032ex10.prg p032ex10.asm
; Tue Oct 29 11:02:47 2024

;Offset	;Hex		;Source

;******  Processing input file: p032ex10.asm

="20241029-220400"	           Version = "20241029-220400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	2a 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 52			.text " *programmation assembleur sue c64*"
>080a	4f 47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45
>081a	4d 42 4c 45 55 52 20 53 55 45 20 43 36 34 2a
>0829	00				.byte $00		;Un zéro pour indiquer la fin de cette
>082a	46 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082c	02 00				.word 2   	;Numero de la ligne Basic.
>082e	8f				.byte $8F		;Le token de la commande REM du Basic
>082f	20 2a 50 41			.text " *par daniel lafrance*"
>0833	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>0843	45 2a
>0845	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0846	51 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0848	03 00				.word 3   	;Numero de la ligne Basic.
>084a	9e				.byte $9e		;Le token de la commande PRINT du Basic
>084b	30 32 31 33			.text format("%05d",hpgmstart)
>084f	31
>0850	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0851	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0853	4c 87 09	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p032ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p032ex10.asm

.0856			p032ex10
.0856	20 45 0f	          jsr  push           ; Sauvegarde le statut complet.
.0859	48		               pha
.085a	a9 03		               lda  #ccyan
.085c	8d 20 d0	               sta  $d020
.085f	68		               pla
.0860	48		               pha
.0861	a9 01		               lda  #cblanc
.0863	8d 21 d0	               sta  $d021
.0866	68		               pla
.0867	48		               pha
.0868	a9 06		               lda  #cbleu
.086a	8d 86 02	               sta  bascol
.086d	68		               pla
.086e	20 79 0c	          jsr  cls            ; On efface l'écran.
.0871	20 45 0f	               jsr  push
.0874	a2 b2		isx            ldx  #<ttext
.0876	a0 08		isy            ldy  #>ttext
.0878	20 96 0c	               jsr  puts
.087b	20 84 0f	               jsr  pull
.087e	20 45 0f	               jsr  push
.0881	a2 dd		isx            ldx  #<ptext1
.0883	a0 08		isy            ldy  #>ptext1
.0885	20 96 0c	               jsr  puts
.0888	20 84 0f	               jsr  pull
.088b	20 34 09	          jsr  insub          ; Lit le premier nombre.
.088e	20 0c bc	          jsr  b_f1tf2
.0891	a5 61		          lda  $61
.0893	20 2b ba	          jsr  b_f1xf2
.0896	20 dd bd	noneg     jsr  b_facasc       ; Converti le résultat en ascii à $0100.
.0899	20 45 0f	               jsr  push
.089c	a2 f9		isx            ldx  #<restxt
.089e	a0 08		isy            ldy  #>restxt
.08a0	20 96 0c	               jsr  puts
.08a3	20 84 0f	               jsr  pull
.08a6	20 16 09	          jsr  outsub         ; Affiche la valeur finale.
.08a9	a9 0d		          lda  #$0d
.08ab	20 d2 ff	          jsr  $ffd2
.08ae	20 84 0f	          jsr  pop            ; Récupère le statut complet.
.08b1	60		          rts
>08b2	1f 20 12	ttext     .byte     b_blue,b_space,b_rvs_on
>08b5	20 20 20 20	          .text     "      POINT FLOTTANT - AU CARREE     "
>08b9	20 20 d0 cf c9 ce d4 20 c6 cc cf d4 d4 c1 ce d4
>08c9	20 2d 20 c1 d5 20 c3 c1 d2 d2 c5 c5 20 20 20 20
>08d9	20
>08da	92 0d 00	          .byte     b_rvs_off,b_crlf,b_eot
>08dd	0d 9c 20	ptext1    .byte     b_crlf, b_purple, b_space
>08e0	c5 4e 54 45	          .text     "Entez un nombre ......."
>08e4	5a 20 55 4e 20 4e 4f 4d 42 52 45 20 2e 2e 2e 2e
>08f4	2e 2e 2e
>08f7	90 00		          .byte     b_black,b_eot
>08f9	1e 0d		restxt    .byte     b_green,b_crlf
>08fb	20 d6 4f 49	          .text    " Voici le resultat......:"
>08ff	43 49 20 4c 45 20 52 45 53 55 4c 54 41 54 2e 2e
>090f	2e 2e 2e 2e 3a
>0914	90 00		          .byte     b_black,b_eot
.0916			outsub
.0916	20 45 0f	          jsr  push           ; Sauvegarde le statut complet.
.0919	a0 ff		          ldy  #$ff           ; On détermine
.091b	c8		nxtchr    iny                 ;  le nombre de caractères
.091c	b9 00 01	          lda  $0100,y        ;  qu'il y a dans la chaine à afficher.
.091f	d0 fa		          bne  nxtchr
.0921	c8		          iny                 ; On ajoute 1 au nombre trouvé pour compenser
.0922	98		          tya                 ;  l'adresse a y=0.
.0923	48		          pha                 ; Sauvegarde ce nombre.
.0924	a9 00		          lda  #$00           ; On prépare le pointeur $22-$23
.0926	85 22		          sta  $22            ;  en le peuplant avec
.0928	a9 01		          lda  #$01           ;  l'adresse ou se trouve la chaine
.092a	85 23		          sta  $23            ;  à afficher.
.092c	68		          pla                 ; On ramène le nombre de caractères.
.092d	20 24 ab	          jsr  b_strout       ; On affiche.
.0930	20 84 0f	          jsr  pop            ; Récupère le statut complet.
.0933	60		          rts
.0934			insub
.0934	20 45 0f	          jsr  push           ; Sauvegarde le statut complet.
.0937	20 7e 13	          jsr  kbflushbuff
.093a	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.093d	a9 00		          lda  #$00           ; On efface le basic input buffer
.093f	a0 59		          ldy  #$59           ;  situé à $200 long de 89 bytes ($59)
.0941	99 00 02	clear     sta  b_inpbuff,y    ;  en plaçant des $00 partout
.0944	88		          dey                 ;  et ce jusqu'au
.0945	d0 fa		          bne  clear          ;  dernier.
.0947	20 f9 ab	          jsr  b_prompt       ; Affiche un "?" et attend une entrée.
.094a	86 7a		          stx  $7a            ; X et Y pointe sur $01ff au retour.
.094c	84 7b		          sty  $7b
.094e	20 73 00	          jsr  b_chrget       ; Lecture du buffer.
.0951	20 f3 bc	          jsr  b_ascflt       ; Conversion la chaine ascii en 200 en float.
.0954	20 84 0f	          jsr  pop            ; Récupère le statut complet.
.0957	60		          rts
.0958			akey
.0958	a9 69		          lda  #<kmsg
.095a	85 22		          sta  $22
.095c	a9 09		          lda  #>kmsg
.095e	85 23		          sta  $23
.0960	a9 1e		          lda  #kmsgend-kmsg
.0962	20 24 ab	          jsr  b_strout
.0965	20 5d 13	          jsr  anykey
.0968	60		          rts
>0969	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>096d	d5 4e 45 20	          .text               "Une clef pour continuer!"
>0971	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0981	55 45 52 21
>0985	90 00		          .byte b_black,b_eot
.0987			kmsgend
.0987			main
.0987	20 59 0c	          jsr       scrmaninit
.098a	08		               php
.098b	48		               pha
.098c	a9 08		               lda  #$08
.098e	20 d2 ff	               jsr  $ffd2
.0991	68		               pla
.0992	28		               plp
.0993	48		               pha
.0994	a9 03		               lda  #ccyan
.0996	8d 20 d0	               sta  $d020
.0999	68		               pla
.099a	48		               pha
.099b	a9 01		               lda  #cblanc
.099d	8d 21 d0	               sta  $d021
.09a0	68		               pla
.09a1	48		               pha
.09a2	a9 06		               lda  #cbleu
.09a4	8d 86 02	               sta  bascol
.09a7	68		               pla
.09a8	20 c9 09	          jsr       bookinfo
.09ab	20 58 09	          jsr       akey
.09ae	20 79 0c	          jsr       cls
.09b1	20 13 0a	          jsr       help
.09b4	20 58 09	          jsr       akey
.09b7	a9 0d		          lda       #b_crlf
.09b9	20 d2 ff	          jsr       $ffd2
.09bc	20 56 08	          jsr       p032ex10
.09bf	08		               php
.09c0	48		               pha
.09c1	a9 09		               lda  #$09
.09c3	20 d2 ff	               jsr  $ffd2
.09c6	68		               pla
.09c7	28		               plp
.09c8	60		          rts
.09c9			bookinfo
.09c9	20 45 0f	          jsr  push           ; Sauvegarde le statut complet.
.09cc	08		               php
.09cd	48		               pha
.09ce	a9 0e		               lda  #14
.09d0	8d 78 0c	               sta  characterset
.09d3	20 d2 ff	               jsr  $ffd2
.09d6	68		               pla
.09d7	28		               plp
.09d8	20 79 0c	          jsr       cls
.09db	20 45 0f	               jsr  push
.09de	a2 28		isx            ldx  #<line
.09e0	a0 0c		isy            ldy  #>line
.09e2	20 96 0c	               jsr  puts
.09e5	20 84 0f	               jsr  pull
.09e8	20 45 0f	               jsr  push
.09eb	a2 50		isx            ldx  #<headera
.09ed	a0 0a		isy            ldy  #>headera
.09ef	20 96 0c	               jsr  puts
.09f2	20 84 0f	               jsr  pull
.09f5	20 45 0f	               jsr  push
.09f8	a2 f0		isx            ldx  #<headerb
.09fa	a0 0a		isy            ldy  #>headerb
.09fc	20 96 0c	               jsr  puts
.09ff	20 84 0f	               jsr  pull
.0a02	20 45 0f	               jsr  push
.0a05	a2 28		isx            ldx  #<line
.0a07	a0 0c		isy            ldy  #>line
.0a09	20 96 0c	               jsr  puts
.0a0c	20 84 0f	               jsr  pull
.0a0f	20 84 0f	          jsr  pop            ; Récupère le statut complet.
.0a12	60		          rts
.0a13			help
.0a13	20 45 0f	          jsr  push           ; Sauvegarde le statut complet.
.0a16	08		               php
.0a17	48		               pha
.0a18	a9 0e		               lda  #14
.0a1a	8d 78 0c	               sta  characterset
.0a1d	20 d2 ff	               jsr  $ffd2
.0a20	68		               pla
.0a21	28		               plp
.0a22	20 79 0c	          jsr       cls
.0a25	20 45 0f	               jsr  push
.0a28	a2 93		isx            ldx  #<shortcuts
.0a2a	a0 0b		isy            ldy  #>shortcuts
.0a2c	20 96 0c	               jsr  puts
.0a2f	20 84 0f	               jsr  pull
.0a32	20 45 0f	               jsr  push
.0a35	a2 14		isx            ldx  #<helptext
.0a37	a0 0c		isy            ldy  #>helptext
.0a39	20 96 0c	               jsr  puts
.0a3c	20 84 0f	               jsr  pull
.0a3f	20 45 0f	               jsr  push
.0a42	a2 28		isx            ldx  #<line
.0a44	a0 0c		isy            ldy  #>line
.0a46	20 96 0c	               jsr  puts
.0a49	20 84 0f	               jsr  pull
.0a4c	20 84 0f	          jsr  pop            ; Récupère le statut complet.
.0a4f	60		          rts
.0a50			headera
>0a50	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>0a54	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>0a64	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>0a74	20 20 2a
>0a77	0d		          .byte     b_crlf
>0a78	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>0a7c	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>0a8c	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>0a9c	20 20 2a
>0a9f	0d		          .byte     b_crlf
>0aa0	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>0aa4	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>0ab4	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>0ac4	20 20 2a
>0ac7	0d		          .byte     b_crlf
>0ac8	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>0acc	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>0adc	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>0aec	20 20 2a 00
>0af0	0d		headerb   .byte     $0d
>0af1	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>0af5	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>0b05	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>0b15	20 20 2a
>0b18	0d		          .byte     $0d
>0b19	20 2a 20 20	          .text               " *        page 32, exemple #10        *"
>0b1d	20 20 20 20 20 20 50 41 47 45 20 33 32 2c 20 45
>0b2d	58 45 4d 50 4c 45 20 23 31 30 20 20 20 20 20 20
>0b3d	20 20 2a
>0b40	0d		          .byte     $0d
>0b41	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0b45	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0b55	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0b65	20 20 2a
>0b68	0d		          .byte     $0d
>0b69	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0b6d	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0b7d	34 31 30 32 39 2d 32 32 30 34 30 30 2e 20 20 20
>0b8d	20 20 2a 20
>0b91	90 00		          .byte     b_black,b_eot
>0b93	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0b96	20 20 20 20	          .text               "       RACCOURCIS DE L'EXEMPLE        "
>0b9a	20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4 c5
>0baa	20 cc 27 c5 d8 c5 cd d0 cc c5 20 20 20 20 20 20
>0bba	20 20
>0bbc	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0bbf	20 50 30 33	          .text     format(   " p032ex10: SYS %d ($%04X)",p032ex10, p032ex10)
>0bc3	32 45 58 31 30 3a 20 d3 d9 d3 20 32 31 33 34 20
>0bd3	28 24 30 38 35 36 29
>0bda	0d		          .byte     b_crlf
>0bdb	20 41 49 44	          .text     format(   " aide....: SYS %d ($%04X)",help, help)
>0bdf	45 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 35 37 39 20
>0bef	28 24 30 c1 31 33 29
>0bf6	0d		          .byte     b_crlf
>0bf7	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04X)",cls, cls)
>0bfb	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 31 39 33 20
>0c0b	28 24 30 c3 37 39 29
>0c12	0d 00		          .byte     b_crlf,b_eot
>0c14	0d 20 1c	helptext  .byte     b_crlf,b_space,b_red
>0c17	20 45 58 2e	          .text     format(   " ex.: SYS %d",p032ex10)
>0c1b	3a 20 d3 d9 d3 20 32 31 33 34
>0c25	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0c28	20 2d 2d 2d	line      .text               " --------------------------------------"
>0c2c	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0c3c	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0c4c	2d 2d 2d
>0c4f	0d 00		          .byte     b_crlf,b_eot

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0c51	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0c55	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0c59			libtart

;******  Return to file: p032ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p032ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p032ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0c59			scrmaninit
.0c59	20 45 0f	               jsr  push
.0c5c	a9 06		               lda  #vbleu
.0c5e	8d 21 d0	               sta  vicbackcol
.0c61	a9 05		               lda  #vvert
.0c63	8d 20 d0	               sta  vicbordcol
.0c66	a9 01		               lda  #vblanc
.0c68	8d 86 02	               sta  bascol
.0c6b	ad 00 04	               lda  scrnram
.0c6e	8d 00 04	               sta  scrnram
.0c71	20 79 0c	               jsr  cls
.0c74	20 84 0f	               jsr  pop
.0c77	60		               rts
>0c78	8e		characterset   .byte b_uppercase
.0c79			cls
.0c79	08		               php
.0c7a	48		               pha
.0c7b	a9 93		               lda  #$93
.0c7d	20 90 0c	               jsr  putch
.0c80	68		               pla
.0c81	28		               plp
.0c82	60		               rts
.0c83			putnch
.0c83	08		               php
.0c84	e0 00		               cpx  #$00
.0c86	f0 06		               beq  out
.0c88	20 d2 ff	again          jsr  $ffd2
.0c8b	ca		               dex
.0c8c	d0 fa		               bne  again
.0c8e	28		out            plp
.0c8f	60		               rts
.0c90			putch
.0c90	08		               php
.0c91	20 d2 ff	               jsr  $ffd2
.0c94	28		               plp
.0c95	60		               rts
.0c96			puts
.0c96	20 45 0f	               jsr  push
.0c99	86 fb		               stx  zpage1
.0c9b	84 fc		               sty  zpage1+1
.0c9d	a0 00		               ldy  #0
.0c9f	b1 fb		next           lda  (zpage1),y
.0ca1	f0 09		               beq  exit
.0ca3	20 90 0c	               jsr  putch
.0ca6	20 4c 10	               jsr  inczp1
.0ca9	4c 9f 0c	               jmp  next
.0cac	20 84 0f	exit           jsr  pop
.0caf	60		               rts
.0cb0			gotoxy
.0cb0	08		               php
.0cb1	18		               clc
.0cb2	8a		               txa
.0cb3	48		               pha
.0cb4	98		               tya
.0cb5	aa		               tax
.0cb6	68		               pla
.0cb7	a8		               tay
.0cb8	20 f0 ff	               jsr  kplot
.0cbb	28		               plp
.0cbc	60		               rts
.0cbd			cursor
=$0286			bascol    =    $0286
.0cbd	08		               php
.0cbe	48		               pha
.0cbf	90 12		               bcc  restore
.0cc1	20 f0 ff	               jsr  kplot
.0cc4	8c e5 0c	               sty  cx
.0cc7	8e e6 0c	               stx  cy
.0cca	ad 86 02	               lda  bascol
.0ccd	8d e7 0c	               sta  bcol
.0cd0	4c e2 0c	               jmp  out
.0cd3	ae e6 0c	restore        ldx  cy
.0cd6	ac e5 0c	               ldy  cx
.0cd9	20 f0 ff	               jsr  kplot
.0cdc	ad e7 0c	               lda  bcol
.0cdf	8d 86 02	               sta  bascol
.0ce2	68		out            pla
.0ce3	28		               plp
.0ce4	60		               rts
>0ce5	00		cx   .byte     $00
>0ce6	00		cy   .byte     $00
>0ce7	00		bcol .byte     $00
.0ce8			cursave
.0ce8	08		               php
.0ce9	38		               sec
.0cea	20 bd 0c	               jsr  cursor
.0ced	28		               plp
.0cee	60		               rts
.0cef			curput
.0cef	08		               php
.0cf0	18		               clc
.0cf1	20 bd 0c	               jsr  cursor
.0cf4	28		               plp
.0cf5	60		               rts
.0cf6			putsxy
.0cf6	20 45 0f	               jsr  push
.0cf9	86 fb		               stx  zpage1
.0cfb	84 fc		               sty  zpage1+1
.0cfd	a0 00		               ldy  #$00
.0cff	b1 fb		               lda  (zpage1),y
.0d01	aa		               tax
.0d02	20 4c 10	               jsr  inczp1
.0d05	b1 fb		               lda  (zpage1),y
.0d07	a8		               tay
.0d08	20 b0 0c	               jsr  gotoxy
.0d0b	20 4c 10	               jsr  inczp1
.0d0e	a6 fb		               ldx  zpage1
.0d10	a4 fc		               ldy  zpage1+1
.0d12	20 96 0c	               jsr  puts
.0d15	20 84 0f	               jsr  pop
.0d18	60		               rts
>0d19	00 00		straddr   .word     $00
>0d1b	00		px        .byte     $00
>0d1c	00		py        .byte     $00
>0d1d	00 00		zp1       .word     $00
.0d1f			putscxy
.0d1f	20 45 0f	               jsr  push
.0d22	84 fc		               sty  zpage1+1
.0d24	86 fb		               stx  zpage1
.0d26	ad 86 02	               lda  bascol
.0d29	8d 49 0d	               sta  bc
.0d2c	a0 00		               ldy #$00
.0d2e	b1 fb		               lda  (zpage1),y
.0d30	8d 86 02	               sta  bascol
.0d33	20 4c 10	               jsr  inczp1
.0d36	a6 fb		               ldx  zpage1
.0d38	a4 fc		               ldy  zpage1+1
.0d3a	20 f6 0c	               jsr  putsxy
.0d3d	ad 49 0d	               lda  bc
.0d40	8d 86 02	               sta  bascol
.0d43	20 84 0f	               jsr  pop
.0d46	60		               rts
>0d47	00 00		straddr  .word      $00
>0d49	00		bc       .byte      $00
>0d4a	00 00		zp1      .word      $00
.0d4c			putrahex
.0d4c	08		               php
.0d4d	48		               pha
.0d4e	20 62 11	               jsr  a2hex
.0d51	a9 01		               lda  #<a2hexstr
.0d53	a0 11		               ldy  #>a2hexstr
.0d55	20 96 0c	               jsr  puts
.0d58	68		               pla
.0d59	28		               plp
.0d5a	60		               rts
.0d5b			kputrahexxy
.0d5b			bputrahexxy
.0d5b			putrahexxy
.0d5b	08		               php
.0d5c	20 62 11	               jsr  a2hex
.0d5f	a9 fe		               lda  #<a2hexpos
.0d61	a0 10		               ldy  #>a2hexpos
.0d63	20 f6 0c	               jsr  putsxy
.0d66	68		               pla
.0d67	28		               plp
.0d68	60		               rts
.0d69			putrahexcxy
.0d69	08		               php
.0d6a	20 62 11	               jsr  a2hex
.0d6d	a9 fe		               lda  #<a2hexpos
.0d6f	a0 10		               ldy  #>a2hexpos
.0d71	20 1f 0d	               jsr  putscxy
.0d74	68		               pla
.0d75	28		               plp
.0d76	60		               rts
.0d77			setinverse
.0d77	48		               pha
.0d78	a9 12		               lda  #$12
.0d7a	20 d2 ff	               jsr  $ffd2
.0d7d	68		               pla
.0d7e	60		               rts
.0d7f			clrinverse
.0d7f	48		               pha
.0d80	a9 92		               lda  #$92
.0d82	20 d2 ff	               jsr  $ffd2
.0d85	68		               pla
.0d86	60		               rts

;******  Return to file: p032ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.0d87			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.0d87	08		                php
.0d88	8d 39 0f	                sta  rega
.0d8b	68		                pla
.0d8c	8d 3c 0f	                sta  regp
.0d8f	8e 3a 0f	                stx  regx
.0d92	8c 3b 0f	                sty  regy
.0d95	ba		                tsx
.0d96	8e 3d 0f	                stx  regs
.0d99	68		                pla
.0d9a	8d 3f 0f	                sta  regpcl
.0d9d	8d 40 0f	                sta  regpcl2
.0da0	68		                pla
.0da1	8d 3e 0f	                sta  regpch
.0da4	ad 39 0f	                lda  rega
.0da7	48		                pha
.0da8	20 4f 11	                jsr  nib2hex
.0dab	8d dc 0e	                sta  vala+1
.0dae	68		                pla
.0daf	20 5b 11	                jsr  lsra4bits
.0db2	20 4f 11	                jsr  nib2hex
.0db5	8d db 0e	                sta  vala
.0db8	ad 3b 0f	                lda  regy
.0dbb	48		                pha
.0dbc	20 4f 11	                jsr  nib2hex
.0dbf	8d f2 0e	                sta  valy+1
.0dc2	68		                pla
.0dc3	20 5b 11	                jsr  lsra4bits
.0dc6	20 4f 11	                jsr  nib2hex
.0dc9	8d f1 0e	                sta  valy
.0dcc	ad 3a 0f	                lda  regx
.0dcf	48		                pha
.0dd0	20 4f 11	                jsr  nib2hex
.0dd3	8d e7 0e	                sta  valx+1
.0dd6	68		                pla
.0dd7	20 5b 11	                jsr  lsra4bits
.0dda	20 4f 11	                jsr  nib2hex
.0ddd	8d e6 0e	                sta  valx
.0de0	ad 3c 0f	                lda  regp
.0de3	48		                pha
.0de4	20 4f 11	                jsr  nib2hex
.0de7	8d fd 0e	                sta  valp+1
.0dea	68		                pla
.0deb	20 5b 11	                jsr  lsra4bits
.0dee	20 4f 11	                jsr  nib2hex
.0df1	8d fc 0e	                sta  valp
.0df4	ad 3d 0f	                lda  regs
.0df7	48		                pha
.0df8	20 4f 11	                jsr  nib2hex
.0dfb	8d 08 0f	                sta  vals+1
.0dfe	68		                pla
.0dff	20 5b 11	                jsr  lsra4bits
.0e02	20 4f 11	                jsr  nib2hex
.0e05	8d 07 0f	                sta  vals
.0e08	ad 3e 0f	                lda  regpch
.0e0b	48		                pha
.0e0c	20 4f 11	                jsr  nib2hex
.0e0f	8d 14 0f	                sta  valpch+1
.0e12	68		                pla
.0e13	20 5b 11	                jsr  lsra4bits
.0e16	20 4f 11	                jsr  nib2hex
.0e19	8d 13 0f	                sta  valpch
.0e1c	ad 3f 0f	                lda  regpcl
.0e1f	48		                pha
.0e20	20 4f 11	                jsr  nib2hex
.0e23	8d 16 0f	                sta  valpcl+1
.0e26	68		                pla
.0e27	20 5b 11	                jsr  lsra4bits
.0e2a	20 4f 11	                jsr  nib2hex
.0e2d	8d 15 0f	                sta  valpcl
.0e30	a5 fb		                lda  zpage1
.0e32	48		                pha
.0e33	20 4f 11	                jsr  nib2hex
.0e36	8d 25 0f	                sta  valz1l
.0e39	68		                pla
.0e3a	20 5b 11	                jsr  lsra4bits
.0e3d	20 4f 11	                jsr  nib2hex
.0e40	8d 26 0f	                sta  valz1l+1
.0e43	a5 fc		                lda  zpage1+1
.0e45	48		                pha
.0e46	20 4f 11	                jsr  nib2hex
.0e49	8d 23 0f	                sta  valz1h
.0e4c	68		                pla
.0e4d	20 5b 11	                jsr  lsra4bits
.0e50	20 4f 11	                jsr  nib2hex
.0e53	8d 24 0f	                sta  valz1h+1
.0e56	a5 fd		                lda  zpage2
.0e58	48		                pha
.0e59	20 4f 11	                jsr  nib2hex
.0e5c	8d 35 0f	                sta  valz2l
.0e5f	68		                pla
.0e60	20 5b 11	                jsr  lsra4bits
.0e63	20 4f 11	                jsr  nib2hex
.0e66	8d 36 0f	                sta  valz2l+1
.0e69	a5 fe		                lda  zpage2+1
.0e6b	48		                pha
.0e6c	20 4f 11	                jsr  nib2hex
.0e6f	8d 33 0f	                sta  valz2h
.0e72	68		                pla
.0e73	20 5b 11	                jsr  lsra4bits
.0e76	20 4f 11	                jsr  nib2hex
.0e79	8d 34 0f	                sta  valz2h+1
.0e7c	20 77 0d	                jsr  setinverse
.0e7f	78		                sei
.0e80	a2 d3		                ldx  #<srega
.0e82	a0 0e		                ldy  #>srega+1
.0e84	20 1f 0d	                jsr  putscxy
.0e87	a2 de		                ldx  #<sregx
.0e89	a0 0e		                ldy  #>sregx+1
.0e8b	20 1f 0d	                jsr  putscxy
.0e8e	a2 e9		                ldx  #<sregy
.0e90	a0 0e		                ldy  #>sregy+1
.0e92	20 1f 0d	                jsr  putscxy
.0e95	a2 f4		                ldx  #<sregp
.0e97	a0 0e		                ldy  #>sregp+1
.0e99	20 1f 0d	                jsr  putscxy
.0e9c	a2 ff		                ldx  #<sregs
.0e9e	a0 0f		                ldy  #>sregs+1
.0ea0	20 1f 0d	                jsr  putscxy
.0ea3	a2 0a		                ldx  #<sregpc
.0ea5	a0 0f		                ldy  #>sregpc+1
.0ea7	20 1f 0d	                jsr  putscxy
.0eaa	a2 19		                ldx  #<sregz1
.0eac	a0 0f		                ldy  #>sregz1+1
.0eae	20 1f 0d	                jsr  putscxy
.0eb1	a2 29		                ldx  #<sregz2
.0eb3	a0 0f		                ldy  #>sregz2+1
.0eb5	20 1f 0d	                jsr  putscxy
.0eb8	58		                cli
.0eb9	20 7f 0d	                jsr  clrinverse
.0ebc	ad 3e 0f	                lda  regpch
.0ebf	48		                pha
.0ec0	ad 3f 0f	                lda  regpcl
.0ec3	48		                pha
.0ec4	ac 3b 0f	                ldy  regy
.0ec7	ae 3a 0f	                ldx  regx
.0eca	ad 3c 0f	                lda  regp
.0ecd	48		                pha
.0ece	ad 39 0f	                lda  rega
.0ed1	28		                plp
.0ed2	60		                rts
>0ed3	01 00 00 17	srega   .byte   colr,bkcol,coln,line
>0ed7	20 41 3a 24	        .text   ' a:$' ;4,24
>0edb	00 00 00	vala    .byte   0,0,0
>0ede	01 00 06 17	sregx   .byte   colr,bkcol,coln+6,line
>0ee2	20 58 3a 24	        .text   ' x:$' ;4,24
>0ee6	00 00 00	valx    .byte   0,0,0
>0ee9	01 00 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>0eed	20 59 3a 24	        .text   ' y:$' ;4,24
>0ef1	00 00 00	valy    .byte   0,0,0
>0ef4	01 00 12 17	sregp   .byte   colr,bkcol,coln+18,line
>0ef8	20 50 3a 24	        .text   ' p:$' ;4,24
>0efc	00 00 00	valp    .byte   0,0,0
>0eff	01 00 18 17	sregs   .byte   colr,bkcol,coln+24,line
>0f03	20 53 3a 24	        .text   ' s:$' ;4,24
>0f07	00 00 00	vals    .byte   0,0,0
>0f0a	01 00 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>0f0e	20 50 43 3a	        .text   ' pc:$' ;4,24
>0f12	24
>0f13	00 00		valpch  .byte   0,0
>0f15	00 00 20 00	valpcl  .byte   0,0,32,0
>0f19	01 00 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>0f1d	20 5a 50 31	        .text   ' zp1:$' ;4,24
>0f21	3a 24
>0f23	00 00		valz1h  .byte   0,0
>0f25	00 00 20 00	valz1l  .byte   0,0,32,0
>0f29	01 00 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>0f2d	20 5a 50 32	        .text   ' zp2:$' ;4,24
>0f31	3a 24
>0f33	00 00		valz2h  .byte   0,0
>0f35	00 00 20 00	valz2l  .byte   0,0,32,0
>0f39	00		rega    .byte   0
>0f3a	00		regx    .byte   0
>0f3b	00		regy    .byte   0
>0f3c	00		regp    .byte   0
>0f3d	00		regs    .byte   0
>0f3e	00		regpch  .byte   0
>0f3f	00		regpcl  .byte   0
>0f40	00		regpcl2 .byte   0
>0f41	00		vzp1h   .byte   0
>0f42	00		vzp1l   .byte   0
>0f43	00		vzp2h   .byte   0
>0f44	00		vzp2l   .byte   0

;******  Return to file: p032ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0f45			push
.0f45	08		          php            ; stack : flg, pcl, pch
.0f46	78		          sei
.0f47	8d 81 0f	          sta  ra        ; save a
.0f4a	68		          pla            ; stack : pcl, pch
.0f4b	8d 80 0f	          sta  rp        ; save rp
.0f4e	68		          pla            ; stack : pch
.0f4f	8d 82 0f	          sta  pc        ; save pcl
.0f52	68		          pla            ; stack : -
.0f53	8d 83 0f	          sta  pc+1      ; save pch
.0f56	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0f58	48		          pha            ; stack : zp1l
.0f59	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0f5b	48		          pha            ; stack : zp1h, zp1l
.0f5c	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0f5e	48		          pha            ; stack : zp2l, zp1h, zp1l
.0f5f	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0f61	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0f62	ad 80 0f	          lda  rp        ; get rp
.0f65	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0f66	ad 81 0f	          lda  ra        ; get a
.0f69	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f6a	8a		          txa            ; get x
.0f6b	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f6c	98		          tya            ; get y
.0f6d	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f6e	ad 83 0f	          lda  pc+1      ; get pch
.0f71	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f72	ad 82 0f	          lda  pc        ; get pcl
.0f75	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f76	ad 80 0f	          lda  rp        ; get rp
.0f79	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f7a	ad 81 0f	          lda  ra        ; get a
.0f7d	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f7e	58		          cli
.0f7f	60		          rts
>0f80	00		rp        .byte     0
>0f81	00		ra        .byte     0
>0f82	00 00		pc        .word     0
.0f84			pull
.0f84			pop
.0f84	78		          sei
.0f85	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f86	8d b9 0f	          sta  pc        ; save pcl
.0f89	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f8a	8d ba 0f	          sta  pc+1      ; save pch
.0f8d	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f8e	a8		          tay            ; set y
.0f8f	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f90	aa		          tax            ; set x
.0f91	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0f92	8d b8 0f	          sta  ra        ; save a
.0f95	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0f96	8d b7 0f	          sta  rp        ; save rp
.0f99	68		          pla            ; stack : zp2l, zp1h, zp1l
.0f9a	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0f9c	68		          pla            ; stack : zp1h, zp1l
.0f9d	85 fd		          sta  zpage2    ; get zpage2 High byte
.0f9f	68		          pla            ; stack : zp1l
.0fa0	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0fa2	68		          pla            ; stack :
.0fa3	85 fb		          sta  zpage1    ; get zpage1 High byte
.0fa5	ad ba 0f	          lda  pc+1      ; get pch
.0fa8	48		          pha            ; stack : pch
.0fa9	ad b9 0f	          lda  pc
.0fac	48		          pha            ; stack : pcl, pch
.0fad	ad b7 0f	          lda  rp        ; get rp
.0fb0	48		          pha            ; stack : rp, pcl, pch
.0fb1	ad b8 0f	          lda  ra        ; set ra
.0fb4	58		          cli
.0fb5	28		          plp            ; stack : pcl, pch
.0fb6	60		          rts
>0fb7	00		rp        .byte     0
>0fb8	00		ra        .byte     0
>0fb9	00 00		pc        .word     0

;******  Return to file: p032ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0fbb			blkfill
.0fbb	20 45 0f	bf0            jsr  push
.0fbe	20 7c 10	               jsr  savezp1
.0fc1	84 fc		               sty  zpage1+1
.0fc3	a0 00		               ldy  #$00
.0fc5	84 fb		               sty  zpage1
.0fc7	91 fb		bf1            sta  (zpage1),y
.0fc9	c8		               iny
.0fca	d0 fb		               bne  bf1
.0fcc	20 8b 10	               jsr  restzp1
.0fcf	20 84 0f	               jsr  pop
.0fd2	60		               rts
.0fd3			memfill
.0fd3	20 45 0f	               jsr  push
.0fd6	20 bb 0f	mf1            jsr  blkfill
.0fd9	c8		               iny
.0fda	ca		               dex
.0fdb	d0 f9		               bne  mf1
.0fdd	20 84 0f	               jsr  pop
.0fe0	60		               rts
.0fe1			memmove
.0fe1	20 45 0f	               jsr  push
.0fe4	ba		               tsx            ; On se crée un pointeur ...
.0fe5	8a		               txa
.0fe6	18		               clc
.0fe7	69 0b		               adc  #11
.0fe9	a8		               tay
.0fea	a2 06		               ldx  #$06
.0fec	b9 00 01	nextbyte       lda  $0100,y
.0fef	99 3b 10	               sta  words,y
.0ff2	c8		               iny
.0ff3	ca		               dex
.0ff4	d0 f6		               bne  nextbyte
.0ff6	ad 3b 10	               lda  s
.0ff9	8d 12 10	               sta  source+1
.0ffc	ad 3c 10	               lda  s+1
.0fff	8d 13 10	               sta  source+2
.1002	ad 3d 10	               lda  d
.1005	8d 0f 10	               sta  destin+1
.1008	ad 3e 10	               lda  d+1
.100b	8d 10 10	               sta  destin+2
.100e	ad ff ff	destin         lda  $ffff
.1011	8d ff ff	source         sta  $ffff
.1014	ee 0f 10	               inc  destin+1
.1017	d0 03		               bne  src
.1019	ee 10 10	               inc  destin+2
.101c	ee 12 10	src            inc  source+1
.101f	d0 03		               bne  cnt
.1021	ee 13 10	               inc  source+2
.1024	ad 3f 10	cnt            lda  compte
.1027	d0 08		               bne  decit
.1029	ad 40 10	               lda  compte+1
.102c	f0 09		               beq  fini
.102e	ce 40 10	               dec  compte+1
.1031	ce 3f 10	decit          dec  compte
.1034	4c 0e 10	               jmp  destin
.1037	20 84 0f	fini           jsr  pop
.103a	60		               rts
.103b			words
>103b	00 00		s         .word     $0000
>103d	00 00		d         .word     $0000
>103f	00 00		compte    .word     $0000
.1041			decword
.1041	20 45 0f	               jsr  push
.1044	86 fd		               stx  zpage2
.1046	84 fe		               sty  zpage2+1
.1048	20 84 0f	               jsr  pop
.104b	60		               rts
.104c			inczp1
.104c	08		               php
.104d	48		               pha
.104e	e6 fb		               inc  zpage1
.1050	a5 fb		               lda  zpage1
.1052	d0 02		               bne  nopage
.1054	e6 fc		               inc  zpage1+1
.1056	68		nopage         pla
.1057	28		               plp
.1058	60		               rts
.1059			deczp1
.1059	08		                php
.105a	48		                pha
.105b	c6 fb		                dec  zpage1
.105d	d0 02		                bne  nopage
.105f	c6 fc		                dec  zpage1+1
.1061	68		nopage          pla
.1062	28		                plp
.1063	60		                rts
.1064			inczp2
.1064	08		               php
.1065	48		               pha
.1066	e6 fd		               inc  zpage2
.1068	a5 fd		               lda  zpage2
.106a	d0 02		               bne  nopage
.106c	e6 fe		               inc  zpage2+1
.106e	68		nopage         pla
.106f	28		               plp
.1070	60		               rts
.1071			deczp2
.1071	08		               php
.1072	48		               pha
.1073	a5 fd		               lda  zpage2
.1075	d0 02		               bne  nopage
.1077	c6 fe		               dec  zpage2+1
.1079	68		nopage         pla
.107a	28		               plp
.107b	60		               rts
.107c			savezp1
.107c	08		               php
.107d	48		               pha
.107e	a5 fb		               lda  zpage1
.1080	8d f8 10	               sta  zp1
.1083	a5 fc		               lda  zpage1+1
.1085	8d f9 10	               sta  zp1+1
.1088	68		               pla
.1089	28		               plp
.108a	60		               rts
.108b			restzp1
.108b	08		               php
.108c	48		               pha
.108d	ad f8 10	               lda zp1
.1090	85 fb		               sta zpage1
.1092	ad f9 10	               lda zp1+1
.1095	85 fc		               sta zpage1+1
.1097	68		               pla
.1098	28		               plp
.1099	60		               rts
.109a			savezp2
.109a	08		         php
.109b	48		         pha
.109c	a5 fd		         lda zpage2
.109e	8d fa 10	         sta zp2
.10a1	a5 fe		         lda zpage2+1
.10a3	8d fb 10	         sta zp2+1
.10a6	68		         pla
.10a7	28		         plp
.10a8	60		         rts
.10a9			restzp2
.10a9	08		                php
.10aa	48		                pha
.10ab	ad fa 10	                lda  zp2
.10ae	85 fd		                sta  zpage2
.10b0	ad fb 10	                lda  zp2+1
.10b3	85 fe		                sta  zpage2+1
.10b5	68		                pla
.10b6	28		                plp
.10b7	60		                rts
.10b8			xy2addr
.10b8	08		                php
.10b9	48		                pha
.10ba	8a		                txa
.10bb	48		                pha
.10bc	98		                tya
.10bd	48		                pha
.10be	ad f3 10	                lda     addr1+1
.10c1	8d f5 10	                sta     addr2+1
.10c4	ad f2 10	                lda     addr1
.10c7	8d f4 10	                sta     addr2
.10ca	c0 00		                cpy     #$00
.10cc	f0 0f		                beq     addx
.10ce	18		moreline        clc
.10cf	6d f1 10	                adc     ymult
.10d2	90 03		                bcc     norepy
.10d4	ee f5 10	                inc     addr2+1
.10d7	8d f4 10	norepy          sta     addr2
.10da	88		                dey
.10db	d0 f1		                bne     moreline
.10dd	8a		addx            txa
.10de	18		                clc
.10df	6d f4 10	                adc     addr2
.10e2	90 03		                bcc     thatsit
.10e4	ee f5 10	                inc     addr2+1
.10e7	8d f4 10	thatsit         sta     addr2
.10ea	68		                pla
.10eb	a8		                tay
.10ec	68		                pla
.10ed	aa		                tax
.10ee	68		                pla
.10ef	28		                plp
.10f0	60		                rts
>10f1	28		ymult          .byte     40
>10f2	00 00		addr1          .word     $0000
>10f4	00 00		addr2          .word     $0000
>10f6	00 00		bytecnt        .word     $0000
>10f8	00 00		zp1        .word   $0000
>10fa	00 00		zp2        .word   $0000

;******  Return to file: p032ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>10fc	01		a2hexcol       .byte     1              ; pour aputscxy
>10fd	00		a2hexbkcol     .byte     %00000000
.10fe			a2hexpos
>10fe	00		a2hexpx        .byte     0              ; pour aputsxy
>10ff	00		a2hexpy        .byte     0
>1100	24		a2hexprefix    .byte     "$"            ; pour aputs
>1101	00 00		a2hexstr       .word     $00
>1103	00 00		               .word     $00
>1105	00		               .byte     0              ; 0 end string
>1106	30 30 30 30	abin           .null     "00000000"
>110a	30 30 30 30 00
>110f	20 20 20 00	adec           .null     "   "
.1113			putahexfmtxy
.1113	20 45 0f	               jsr  push
.1116	20 62 11	               jsr  a2hex
.1119	ae fe 10	               ldx  a2hexpx
.111c	ac ff 10	               ldy  a2hexpy
.111f	20 b0 0c	               jsr  gotoxy
.1122	a2 00		               ldx  #<a2hexprefix
.1124	a0 11		               ldy  #>a2hexprefix
.1126	20 96 0c	               jsr  puts
.1129	20 84 0f	               jsr  pop
.112c	60		               rts
.112d			putahexfmt
.112d	20 45 0f	               jsr  push
.1130	20 62 11	               jsr  a2hex
.1133	a2 00		               ldx  #<a2hexprefix
.1135	a0 11		               ldy  #>a2hexprefix
.1137	20 96 0c	               jsr  puts
.113a	20 84 0f	               jsr  pop
.113d	60		               rts
.113e			putahex
.113e	20 45 0f	               jsr  push
.1141	20 62 11	               jsr  a2hex
.1144	a2 01		               ldx  #<a2hexstr
.1146	a0 11		               ldy  #>a2hexstr
.1148	20 96 0c	               jsr  puts
.114b	20 84 0f	               jsr  pop
.114e	60		               rts
.114f			nib2hex
.114f	08		               php
.1150	29 0f		               and  #$0f
.1152	f8		               sed
.1153	18		               clc
.1154	69 90		               adc  #$90
.1156	69 40		               adc  #$40
.1158	d8		               cld
.1159	28		               plp
.115a	60		               rts
.115b			lsra4bits
.115b	08		               php
.115c	4a		               lsr
.115d	4a		               lsr
.115e	4a		               lsr
.115f	4a		               lsr
.1160	28		               plp
.1161	60		               rts
.1162			a2hex
.1162	08		               php
.1163	48		               pha
.1164	48		               pha
.1165	20 5b 11	               jsr  lsra4bits
.1168	20 4f 11	               jsr  nib2hex
.116b	8d 01 11	               sta  a2hexstr
.116e	68		               pla
.116f	20 4f 11	               jsr  nib2hex
.1172	8d 02 11	               sta  a2hexstr+1
.1175	a9 00		               lda  #$00                ; set end of string
.1177	8d 03 11	               sta  a2hexstr+2
.117a	68		               pla
.117b	28		               plp
.117c	60		               rts
.117d			xy2hex
.117d	20 45 0f	               jsr  push
.1180	20 62 11	               jsr  a2hex
.1183	8a		               txa
.1184	48		               pha
.1185	20 5b 11	               jsr  lsra4bits
.1188	20 4f 11	               jsr  nib2hex
.118b	8d 01 11	               sta  a2hexstr
.118e	68		               pla
.118f	20 4f 11	               jsr  nib2hex
.1192	8d 02 11	               sta  a2hexstr+1
.1195	98		               tya
.1196	48		               pha
.1197	20 5b 11	               jsr  lsra4bits
.119a	20 4f 11	               jsr  nib2hex
.119d	8d 03 11	               sta  a2hexstr+2
.11a0	68		               pla
.11a1	20 4f 11	               jsr  nib2hex
.11a4	8d 04 11	               sta  a2hexstr+3
.11a7	a9 00		               lda  #$00                ; 0 ended string
.11a9	8d 05 11	               sta  a2hexstr+4
.11ac	20 84 0f	               jsr  pop
.11af			atobin
.11af	20 45 0f	               jsr  push
.11b2	a2 08		               ldx  #8
.11b4	a0 00		               ldy  #0
.11b6	18		               clc
.11b7	2a		nextbit        rol
.11b8	48		               pha
.11b9	69 00		               adc  #$00
.11bb	29 01		               and  #$01
.11bd	20 4f 11	               jsr  nib2hex
.11c0	99 06 11	               sta  abin,y
.11c3	68		               pla
.11c4	c8		               iny
.11c5	ca		               dex
.11c6	d0 ef		               bne  nextbit
.11c8	a9 00		               lda  #0
.11ca	99 06 11	               sta  abin,y
.11cd	20 84 0f	               jsr  pull
.11d0	60		               rts
.11d1			putabin
.11d1	20 af 11	               jsr     atobin
.11d4	20 45 0f	               jsr     push
.11d7	a2 06		               ldx     #<abin
.11d9	a0 11		               ldy     #>abin
.11db	20 96 0c	               jsr     puts
.11de	20 84 0f	               jsr     pop
.11e1	60		               rts
.11e2			printabin
.11e2	20 45 0f	               jsr     push
.11e5	a2 06		               ldx     #<abin
.11e7	a0 11		               ldy     #>abin
.11e9	20 96 0c	               jsr     puts
.11ec	20 84 0f	               jsr     pop
.11ef	60		               rts
.11f0			putabinfmt
.11f0	08		               php
.11f1	48		               pha
.11f2	a9 25		               lda     #"%"
.11f4	20 90 0c	               jsr     putch
.11f7	68		               pla
.11f8	20 d1 11	               jsr     putabin
.11fb	28		               plp
.11fc	60		               rts
.11fd			putabinxy
.11fd	20 b0 0c	               jsr     gotoxy
.1200	20 d1 11	               jsr     putabin
.1203	60		               rts
.1204			putabinfmtxy
.1204	20 b0 0c	               jsr     gotoxy
.1207	20 f0 11	               jsr     putabinfmt
.120a	60		               rts
.120b			atodec
.120b	20 45 0f	               jsr  push
.120e	f8		               sed
.120f	aa		               tax
.1210	a0 00		               ldy  #$00
.1212	a9 00		               lda  #$00
.1214	18		nextbit        clc
.1215	69 01		               adc  #$01
.1217	90 01		               bcc  decx
.1219	c8		               iny
.121a	ca		decx           dex
.121b	d0 f7		               bne  nextbit
.121d	48		               pha
.121e	98		               tya
.121f	20 4f 11	               jsr  nib2hex
.1222	8d 0f 11	               sta  adec
.1225	68		               pla
.1226	48		               pha
.1227	20 4f 11	               jsr  nib2hex
.122a	8d 11 11	               sta  adec+2
.122d	68		               pla
.122e	6a		               ror
.122f	6a		               ror
.1230	6a		               ror
.1231	6a		               ror
.1232	20 4f 11	               jsr  nib2hex
.1235	8d 10 11	               sta  adec+1
.1238	d8		               cld
.1239	20 84 0f	               jsr  pull
.123c	60		               rts
>123d	00 00 00	buffer         .byte     0,0,0
.1240			putadec
.1240	20 45 0f	               jsr  push
.1243	20 0b 12	               jsr  atodec
.1246	a2 0f		               ldx  #<adec
.1248	a0 11		               ldy  #>adec+1
.124a	20 96 0c	               jsr  puts
.124d	20 84 0f	               jsr  pop
.1250	60		               rts

;******  Return to file: p032ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1251	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1255	00 00 00 00 00 00 00 00 00 0d 00 00
>1261	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1265	00 00 00 00 00 00 00 00 00 00 00 00
>1271	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1275	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1281	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1285	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1291	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1295	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>12a1	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>12a5	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>12b1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>12b5	00 00 00 00 00 00 00 00 00 00 00 00
>12c1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>12c5	00 00 00 00 00 00 00 00 00 00 00 00
>12d1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>12d5	00 00 00 00 00 00 00 00 00 00 00 00
>12e1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>12e5	00 00 00 00 00 00 00 00 00 00 00 00
>12f1	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>12f5	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1301	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1305	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1311	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1315	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1321	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1325	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1331	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1335	00 00 00 00 00 00 00 00 00 00 00 00
>1341	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1345	00 00 00 00 00 00 00 00 00 00 00 00
.1351			waitstop
.1351	20 45 0f	               jsr  push
.1354	20 ed f6	wait           jsr  k_stop
.1357	d0 fb		               bne  wait
.1359	20 84 0f	               jsr  pop
.135c	60		               rts
.135d			anykey
.135d	08		               php
.135e	48		               pha
.135f	a5 cb		nokey          lda 203
.1361	c9 40		               cmp #64
.1363	f0 fa		               beq nokey
.1365	20 6b 13	               jsr releasekey
.1368	68		               pla
.1369	28		               plp
.136a	60		               rts
.136b			releasekey
.136b	08		               php
.136c	48		               pha
.136d	a5 cb		keypressed     lda 203
.136f	c9 40		               cmp #64
.1371	d0 fa		               bne keypressed
.1373	68		               pla
.1374	28		               plp
.1375	60		               rts
.1376			getkey
.1376	20 e4 ff	again          jsr  getin
.1379	c9 00		               cmp  #0
.137b	f0 f9		               beq  again
.137d	60		               rts
.137e			kbflushbuff
.137e	08		               php
.137f	48		               pha
.1380	20 e4 ff	again          jsr  getin
.1383	c9 00		               cmp  #0
.1385	d0 f9		               bne  again
.1387	68		               pla
.1388	28		               plp
.1389	60		               rts
.138a			waitkey
.138a	20 45 0f	               jsr  push
.138d	8d db 13	               sta  thekey
.1390	20 e4 ff	nope           jsr  getin
.1393	20 d2 ff	               jsr  chrout
.1396	cd db 13	               cmp  thekey
.1399	d0 f5		               bne  nope
.139b	20 d2 ff	               jsr  chrout
.139e	20 84 0f	               jsr  pop
.13a1	60		               rts
.13a2			waitspace
.13a2	20 45 0f	               jsr  push
.13a5	a9 7f		wait           lda  #$7f  ;%01111111
.13a7	8d 00 dc	               sta  $dc00
.13aa	ad 01 dc	               lda  $dc01
.13ad	29 10		               and  #$10  ;mask %00010000
.13af	d0 f4		               bne  wait
.13b1	20 84 0f	               jsr  pop
.13b4			waitsstop
.13b4	20 45 0f	               jsr  push
.13b7	20 ed f6	wait           jsr  k_stop  ;%01111111
.13ba	d0 fb		               bne  wait
.13bc	20 84 0f	               jsr  pop
.13bf			waitreturn
.13bf	20 45 0f	               jsr  push
.13c2	ad dc 13	               lda  thecount
.13c5	8d 00 04	               sta  scrnram
.13c8	a9 02		               lda  #$02
.13ca	8d 00 d8	               sta  colorram
.13cd	20 e4 ff	nope           jsr  getin
.13d0	c9 0d		nohex          cmp  #$0d
.13d2	d0 f9		               bne  nope
.13d4	ee dc 13	               inc  thecount
.13d7	20 84 0f	               jsr  pop
.13da	60		               rts
>13db	00		thekey         .byte   0
>13dc	01		thecount       .byte   $01

;******  Return to file: p032ex10.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L slbug64.lst -o slbug64.prg slbug64.asm
; Thu Dec  5 16:38:32 2024

;Offset	;Hex		;Source

;******  Processing input file: slbug64.asm

="20230327-214534-a"	                Version = "20230327-214534-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: slbug64.asm

.0854			main
.0854	20 7c 0a	               jsr scrmaninit
.0857	a9 05		               lda  #5
.0859	20 7d 0b	               jsr  putch
.085c	a9 00		               lda  #cnoir
.085e	8d 21 d0	               sta vicbackcol0
.0861	a9 06		               lda  #cbleu
.0863	8d 22 d0	               sta vicbackcol1
.0866	a9 05		               lda  #cvert
.0868	8d 23 d0	               sta vicbackcol2
.086b	a9 02		               lda  #crouge
.086d	8d 24 d0	               sta vicbackcol3
.0870	60		               rts
.0871			help
.0871	20 0c 0b	               jsr cls
.0874	20 2e 0d	               jsr  push
.0877	a2 e9		               ldx  #<line
.0879	a0 09		               ldy  #>line
.087b	20 c3 0b	               jsr  puts
.087e	20 6d 0d	               jsr  pull
.0881	20 2e 0d	               jsr  push
.0884	a2 c3		               ldx  #<headera
.0886	a0 08		               ldy  #>headera
.0888	20 c3 0b	               jsr  puts
.088b	20 6d 0d	               jsr  pull
.088e	20 2e 0d	               jsr  push
.0891	a2 37		               ldx  #<headerb
.0893	a0 09		               ldy  #>headerb
.0895	20 c3 0b	               jsr  puts
.0898	20 6d 0d	               jsr  pull
.089b	20 2e 0d	               jsr  push
.089e	a2 95		               ldx  #<shortcuts
.08a0	a0 09		               ldy  #>shortcuts
.08a2	20 c3 0b	               jsr  puts
.08a5	20 6d 0d	               jsr  pull
.08a8	20 2e 0d	               jsr  push
.08ab	a2 12		               ldx  #<helptext
.08ad	a0 0a		               ldy  #>helptext
.08af	20 c3 0b	               jsr  puts
.08b2	20 6d 0d	               jsr  pull
.08b5	20 2e 0d	               jsr  push
.08b8	a2 e9		               ldx  #<line
.08ba	a0 09		               ldy  #>line
.08bc	20 c3 0b	               jsr  puts
.08bf	20 6d 0d	               jsr  pull
.08c2	60		               rts
.08c3			headera
>08c3	3d 3d 20 d3	               .text          format("== SL-BUG 64%c",98)
>08c7	cc 2d c2 d5 c7 20 36 34 42
>08d0	0d		               .byte   $0d
>08d1	20 20 20 20	               .text          "          POUR LE COMMODORE 64"
>08d5	20 20 20 20 20 20 d0 cf d5 d2 20 cc c5 20 c3 cf
>08e5	cd cd cf c4 cf d2 c5 20 36 34
>08ef	0d		               .byte   $0d
>08f0	20 20 20 20	               .text          "    IDEE ORIGINALE DE SERGE LEBLANC"
>08f4	c9 c4 c5 c5 20 cf d2 c9 c7 c9 ce c1 cc c5 20 c4
>0904	c5 20 d3 c5 d2 c7 c5 20 cc c5 c2 cc c1 ce c3
>0913	0d		               .byte   $0d
>0914	20 20 20 20	               .text          "     PORT C64 PAR DANIEL LAFRANCE"
>0918	20 d0 cf d2 d4 20 c3 36 34 20 d0 c1 d2 20 c4 c1
>0928	ce c9 c5 cc 20 cc c1 c6 d2 c1 ce c3 c5
>0935	0d 00		               .byte   $0d,0
>0937	20 20 20 20	headerb        .text          "             SLBUG64 (pxx)"
>093b	20 20 20 20 20 20 20 20 20 d3 cc c2 d5 c7 36 34
>094b	20 28 50 58 58 29
>0951	0d		               .byte   $0d
>0952	20 20 20 20	               .text          "         (c) 2024 D. LAFRANCE"
>0956	20 20 20 20 20 28 43 29 20 32 30 32 34 20 c4 2e
>0966	20 cc c1 c6 d2 c1 ce c3 c5
>096f	0d		               .byte   $0d
>0970	20 20 20 20	               .text   format("        Version: %s.",Version)
>0974	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0984	33 30 33 32 37 2d 32 31 34 35 33 34 2d 41 2e
>0993	0d 00		               .byte   $0d,0
>0995	20 2d 2d 2d	shortcuts      .text          " -------- S H O R T - C U T S ---------"
>0999	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>09a9	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>09b9	2d 2d 2d
>09bc	0d		               .byte   $0d
>09bd	20 52 55 4e	               .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>09c1	3d d3 d9 d3 20 32 31 33 32 2c 20 48 45 4c 50 3d
>09d1	d3 d9 d3 20 32 31 36 31
>09d9	0d		               .byte   $0d
>09da	20 43 4c 53	               .text   format(" cls=SYS%5d",cls)
>09de	3d d3 d9 d3 20 32 38 32 38
>09e7	0d 00		               .byte   $0d,0
>09e9	20 2d 2d 2d	line           .text          " --------------------------------------"
>09ed	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09fd	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0a0d	2d 2d 2d
>0a10	0d 00		               .byte   $0d,0
>0a12	20 cc 41 4e	helptext       .text   format(" Lancement de slbug64  : SYS%5d",slbug64)
>0a16	43 45 4d 45 4e 54 20 44 45 20 53 4c 42 55 47 36
>0a26	34 20 20 3a 20 d3 d9 d3 20 32 36 32 38
>0a33	0d		               .byte   $0d
>0a34	20 45 58 2e	                .text   format(" ex.: SYS%5d",slbug64)
>0a38	3a 20 d3 d9 d3 20 32 36 32 38
>0a42	0d 00		               .byte   $0d,0
.0a44			slbug64
.0a44	48		                pha
.0a45	ad 20 d0	                lda vicbordcol
.0a48	8d 5b 0a	                sta byte
.0a4b	a9 10		                lda #$10
.0a4d	8d 20 d0	                sta vicbordcol
.0a50	20 46 11	                jsr anykey
.0a53	ad 5b 0a	                lda byte
.0a56	8d 20 d0	                sta vicbordcol
.0a59	68		                pla
.0a5a	60		                rts
>0a5b	00		byte            .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0a5c	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0a60	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0a64			libtart

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-text-mc.asm

>0a64	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>0a66	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>0a68	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>0a69	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>0a6a	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>0a6b	02		vicbkcol1      .byte     vrouge ;$0b    ; 1,
>0a6c	05		vicbkcol2      .byte     vvert  ;$0b    ; 2,
>0a6d	06		vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
>0a6e	00		inverse        .byte     $00
>0a6f	00 00 00 00	scraddr        .byte     0,0,0,0,0
>0a73	00
>0a74	00 00 00 00	coladdr        .byte     0,0,0,0,0
>0a78	00
>0a79	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>0a7a	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.0a7c			scrmaninit
.0a7c	08		               php            ; On sauvegarde les registres
.0a7d	48		               pha
.0a7e	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.0a80	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.0a83	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.0a86	09 10		               ora  #%00010000; modifier que le bit 4.
.0a88	29 ef		               and  #%11101111
.0a8a	8d 16 d0	               sta  $d016 ; 53270
.0a8d	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.0a90	09 40		               ora  #%01000000; selectionner le md. couleur de
.0a92	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.0a95	ad 6a 0a	               lda  vicbkcol0
.0a98	8d 21 d0	               sta  $d021     ; 53281
.0a9b	ad 6b 0a	               lda  vicbkcol1
.0a9e	8d 22 d0	               sta  $d022     ; 53282
.0aa1	ad 6c 0a	               lda  vicbkcol2
.0aa4	8d 23 d0	               sta  $d023     ; 53283
.0aa7	ad 6d 0a	               lda  vicbkcol3
.0aaa	8d 24 d0	               sta  $d024     ; 54284
.0aad	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.0aaf	8d 79 0a	               sta  bkcol     ; ... fond par defaut des caracteres.
.0ab2	20 0c 0b	               jsr  cls       ; Finalement on efface l'ecran
.0ab5	68		               pla
.0ab6	28		               plp
.0ab7	60		               rts
.0ab8			curshome
.0ab8	08		               php                      ; Sauvegarde flags ...
.0ab9	48		               pha                      ; ... et accumulateur
.0aba	ad 7a 0a	               lda  virtaddr            ; In replace le pointeur ...
.0abd	8d 64 0a	               sta  scrptr              ; ... d'écran virtuel à sa ...
.0ac0	ad 7b 0a	               lda  virtaddr+1          ; ... position initiale.
.0ac3	8d 65 0a	               sta  scrptr+1
.0ac6	20 f7 0a	               jsr  synccolptr          ; On synchronise le ptr couleur.
.0ac9	ad 6a 0a	               lda  vicbkcol0
.0acc	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.0acf	ad 6b 0a	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.0ad2	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.0ad5	ad 6c 0a	               lda  vicbkcol2           ; ... les variables globales.
.0ad8	8d 23 d0	               sta  $d023
.0adb	ad 6d 0a	               lda  vicbkcol3
.0ade	8d 24 d0	               sta  $d024
.0ae1	68		               pla                      ; Récupère l'accumulateur ...
.0ae2	28		               plp                      ; ... et les flags
.0ae3	60		               rts
.0ae4			incscrptr
.0ae4	08		               php                      ; Sauvegarde flags ...
.0ae5	48		               pha                      ; ... et accumulateur
.0ae6	ee 64 0a	               inc  scrptr              ; Incremente le pointeur
.0ae9	ad 64 0a	               lda  scrptr              ; Regarde si on doit faire un ...
.0aec	d0 03		               bne  pasdereport         ; ... report dans le MSB
.0aee	ee 65 0a	               inc  scrptr+1            ; Si oui on fait le repport
.0af1	20 f7 0a	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.0af4	68		               pla                      ; Récupère l'accumulateur ...
.0af5	28		               plp                      ; ... et les flags
.0af6	60		               rts
.0af7			synccolptr
.0af7	08		               php                      ; Sauvegarde flags ...
.0af8	48		               pha                      ; ... et accumulateur
.0af9	ad 64 0a	               lda  scrptr              ; Récupère le LSB du scrptr ...
.0afc	8d 66 0a	               sta  colptr              ; ... pour le placer dans le colptr.
.0aff	ad 65 0a	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.0b02	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.0b04	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.0b06	8d 67 0a	               sta  colptr+1            ; ... et le sauvegarde.
.0b09	68		               pla                      ; Récupère l'accumulateur ...
.0b0a	28		               plp                      ; ... et les flags
.0b0b	60		               rts
.0b0c			cls
.0b0c	20 2e 0d	               jsr  push                ; On sauvegarde les registres
.0b0f	ad 7a 0a	               lda  virtaddr            ; On replace le curseur d'ecran à
.0b12	8d 64 0a	               sta  scrptr
.0b15	ad 7b 0a	               lda  virtaddr+1          ; sa position initiale, ($0400).
.0b18	8d 65 0a	               sta  scrptr+1
.0b1b	20 f7 0a	               jsr  synccolptr          ; On synchronise la couleur.
.0b1e	20 c5 0c	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.0b21	ad 69 0a	               lda  brdcol              ; On place la couleur ...
.0b24	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.0b27	ad 79 0a	               lda  bkcol               ; Associer couleur pour ...
.0b2a	8d 21 d0	               sta  vicbackcol          ; ... remplir l'ecran ...
.0b2d	a9 20		               lda  #$20                ; ... de caracteres espace.
.0b2f	a2 04		               ldx  #4                  ; Quatre blocs de ...
.0b31	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.0b33			nextcar
.0b33	91 fb		               sta  (zpage1),y          ;
.0b35	a5 fc		               lda  zpage1+1
.0b37	48		               pha
.0b38	29 03		               and  #%00000011
.0b3a	09 d8		               ora  #%11011000
.0b3c	85 fc		               sta  zpage1+1
.0b3e	a9 00		               lda  #0
.0b40	91 fb		               sta  (zpage1),y
.0b42	68		               pla
.0b43	85 fc		               sta  zpage1+1
.0b45	a9 20		               lda  #$20
.0b47	88		               dey
.0b48	d0 e9		               bne  nextcar
.0b4a	e6 fc		               inc  zpage1+1
.0b4c	ca		               dex
.0b4d	d0 e4		               bne  nextcar
.0b4f	a9 00		               lda  #$00
.0b51	8d 64 0a	               sta  scrptr
.0b54	a9 04		               lda  #$04
.0b56	8d 65 0a	               sta  scrptr+1
.0b59	20 f7 0a	               jsr  synccolptr
.0b5c	20 6d 0d	               jsr  pop
.0b5f	60		               rts
.0b60			setborder
.0b60	08		               php
.0b61	8d 69 0a	               sta  brdcol
.0b64	8d 20 d0	               sta  vicbordcol
.0b67	28		               plp
.0b68	60		               rts
.0b69			setinverse
.0b69	08		               php
.0b6a	48		               pha
.0b6b	a9 80		               lda  #%10000000
.0b6d	8d 6e 0a	               sta  inverse
.0b70	68		               pla
.0b71	28		               plp
.0b72	60		               rts
.0b73			clrinverse
.0b73	08		               php
.0b74	48		               pha
.0b75	a9 00		               lda  #%00000000
.0b77	8d 6e 0a	               sta  inverse
.0b7a	68		               pla
.0b7b	28		               plp
.0b7c	60		               rts
.0b7d			putch
.0b7d	20 2e 0d	               jsr  push           ; On sauvegarde les registres
.0b80	48		               pha
.0b81	20 c5 0c	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.0b84	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.0b86	0d 79 0a	               ora  bkcol          ; On y ajoute la couleur du fond.
.0b89	a0 00		               ldy  #0             ; Met Y à 0
.0b8b	68		               pla
.0b8c	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.0b8e	ae 67 0a	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.0b91	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.0b93	ad 68 0a	               lda  curcol         ; Charge la couleur voulu dans.
.0b96	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.0b98	20 e4 0a	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.0b9b	20 6d 0d	               jsr  pop            ; Replace tous les registres
.0b9e	60		               rts
.0b9f			z2putch
.0b9f	20 2e 0d	               jsr  push           ; On sauvegarde les registres
.0ba2	a0 00		               ldy  #$0            ; Met Y à 0
.0ba4	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.0ba6	20 7d 0b	               jsr  putch          ; Appel pour affichage
.0ba9	20 6d 0d	               jsr  pop            ; Replace tous les registres
.0bac	60		               rts
.0bad			z2puts
.0bad	20 2e 0d	               jsr  push           ; On sauvegarde les registres
.0bb0	a0 00		               ldy  #$0            ; Met Y à 0
.0bb2	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.0bb4	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.0bb6	20 9f 0b	               jsr  z2putch        ; Appel pour affichage
.0bb9	20 4d 0e	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.0bbc	4c b2 0b	               jmp  nextcar        ; On passe au prochain
.0bbf	20 6d 0d	endstr         jsr  pop            ; Replace tous les registres
.0bc2	60		               rts
.0bc3			puts
.0bc3	20 2e 0d	               jsr  push           ; On sauvegarde les registres
.0bc6	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.0bc8	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.0bca	20 ad 0b	               jsr  z2puts         ; Appel pour affichage
.0bcd	20 6d 0d	               jsr  pop            ; Replace tous les registres
.0bd0	60		               rts
.0bd1			gotoxy
.0bd1	20 2e 0d	               jsr  push           ; On sauvegarde les registres
.0bd4	20 b8 0a	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.0bd7	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.0bd9	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.0bdb	a9 28		               lda  #40            ; Si oui on ajoute 40
.0bdd	20 62 0c	               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
.0be0	88		               dey                 ;  de fois qu'il est spécifié dans y.
.0be1	4c d7 0b	               jmp  yagain         ; On passe au prochain y.
.0be4	8a		setx           txa                 ; On ajoute la valeur de X
.0be5	20 62 0c	               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
.0be8	20 f7 0a	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.0beb	20 6d 0d	               jsr  pop            ; Replace tous les registres
.0bee	60		               rts
.0bef			putsxy
.0bef	20 2e 0d	               jsr  push           ; On sauvegarde les registres et le zp2
.0bf2	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.0bf4	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0bf6	a0 00		               ldy  #0             ; On place le compteur
.0bf8	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0bfa	aa		               tax                 ; de A à X
.0bfb	20 4d 0e	               jsr  inczp2         ; On deplace le pointeur
.0bfe	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0c00	a8		               tay                 ; de A à Y
.0c01	20 d1 0b	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.0c04	20 4d 0e	               jsr  inczp2         ; On deplace le pointeur
.0c07	20 ad 0b	               jsr  z2puts         ; On imprime la chaine
.0c0a	20 6d 0d	               jsr  pop            ; Replace tous les registres
.0c0d	60		               rts
.0c0e			putscxy
.0c0e	20 2e 0d	               jsr  push           ; On Sauvegarde registres et zp2
.0c11	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.0c13	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0c15	a0 00		               ldy  #0             ; Place le compteur
.0c17	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.0c19	8d 68 0a	               sta  curcol         ; ... et on la definie
.0c1c	20 4d 0e	               jsr  inczp2         ; Pointe le prochain byte
.0c1f	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.0c21	8d 79 0a	               sta  bkcol          ; ... l'index de couleur de fond
.0c24	20 4d 0e	               jsr  inczp2         ; Deplace le pointeur
.0c27	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0c29	aa		               tax                 ; ... de A à X
.0c2a	20 4d 0e	               jsr  inczp2         ; Deplace le pointeur
.0c2d	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0c2f	a8		               tay                 ; de A à Y
.0c30	20 d1 0b	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.0c33	20 4d 0e	               jsr  inczp2         ; Place le ptr en début de chaine
.0c36	20 ad 0b	               jsr  z2puts         ; On imprime la chaine
.0c39	20 6d 0d	               jsr  pop
.0c3c	60		               rts
.0c3d			setcurcol
.0c3d	08		               php
.0c3e	8d 68 0a	               sta  curcol
.0c41	28		               plp
.0c42	60		               rts
.0c43			setvicbkcol
.0c43	08		               php
.0c44	48		               pha
.0c45	8a		               txa
.0c46	29 03		               and  #$03
.0c48	aa		               tax
.0c49	68		               pla
.0c4a	9d 6a 0a	               sta  vicbkcol0,x
.0c4d	9d 21 d0	               sta  $d021,x
.0c50	28		               plp
.0c51	60		               rts
.0c52			setbkcol
.0c52	08		               php
.0c53	48		               pha
.0c54	0a		               asl
.0c55	0a		               asl
.0c56	0a		               asl
.0c57	0a		               asl
.0c58	0a		               asl
.0c59	0a		               asl
.0c5a	29 c0		               and  #$c0
.0c5c	8d 79 0a	               sta  bkcol
.0c5f	68		               pla
.0c60	28		               plp
.0c61	60		               rts
.0c62			saddscrptr
.0c62	08		               php
.0c63	48		               pha
.0c64	18		               clc
.0c65	6d 64 0a	               adc  scrptr
.0c68	8d 64 0a	               sta  scrptr
.0c6b	90 03		               bcc  norep
.0c6d	ee 65 0a	               inc  scrptr+1
.0c70	68		norep          pla
.0c71	28		               plp
.0c72	60		               rts
.0c73			scrptr2str
.0c73	20 2e 0d	               jsr  push
.0c76	ad 65 0a	               lda  scrptr+1
.0c79	48		               pha
.0c7a	20 44 0f	               jsr  lsra4bits
.0c7d	20 38 0f	               jsr  nibtohex
.0c80	8d 6f 0a	               sta  scraddr
.0c83	68		               pla
.0c84	20 44 0f	               jsr  lsra4bits
.0c87	20 38 0f	               jsr  nibtohex
.0c8a	8d 70 0a	               sta  scraddr+1
.0c8d	ad 65 0a	               lda  scrptr+1
.0c90	48		               pha
.0c91	20 44 0f	               jsr  lsra4bits
.0c94	20 38 0f	               jsr  nibtohex
.0c97	8d 6f 0a	               sta  scraddr
.0c9a	68		               pla
.0c9b	20 44 0f	               jsr  lsra4bits
.0c9e	20 38 0f	               jsr  nibtohex
.0ca1	8d 70 0a	               sta  scraddr+1
.0ca4	ad 64 0a	               lda  scrptr
.0ca7	48		               pha
.0ca8	20 44 0f	               jsr  lsra4bits
.0cab	20 38 0f	               jsr  nibtohex
.0cae	8d 71 0a	               sta  scraddr+2
.0cb1	8d 76 0a	               sta  coladdr+2
.0cb4	68		               pla
.0cb5	20 44 0f	               jsr  lsra4bits
.0cb8	20 38 0f	               jsr  nibtohex
.0cbb	8d 72 0a	               sta  scraddr+3
.0cbe	8d 77 0a	               sta  coladdr+3
.0cc1	20 6d 0d	               jsr  pop
.0cc4	60		               rts
.0cc5			scrptr2zp1
.0cc5	08		               php
.0cc6	48		               pha
.0cc7	ad 64 0a	               lda  scrptr
.0cca	85 fb		               sta  zpage1
.0ccc	ad 65 0a	               lda  scrptr+1
.0ccf	85 fc		               sta  zpage1+1
.0cd1	68		               pla
.0cd2	28		               plp
.0cd3	60		               rts
.0cd4			colptr2zp1
.0cd4	08		               php
.0cd5	48		               pha
.0cd6	ad 66 0a	               lda  colptr
.0cd9	85 fb		               sta  zpage1
.0cdb	ad 67 0a	               lda  colptr+1
.0cde	85 fc		               sta  zpage1+1
.0ce0	68		               pla
.0ce1	28		               plp
.0ce2	60		               rts
.0ce3			scrptr2zp2
.0ce3	08		               php
.0ce4	48		               pha
.0ce5	ad 64 0a	               lda  scrptr
.0ce8	85 fd		               sta  zpage2
.0cea	ad 65 0a	               lda  scrptr+1
.0ced	85 fe		               sta  zpage2+1
.0cef	68		               pla
.0cf0	28		               plp
.0cf1	60		               rts
.0cf2			colptr2zp2
.0cf2	08		               php
.0cf3	48		               pha
.0cf4	ad 66 0a	               lda  colptr
.0cf7	85 fd		               sta  zpage2
.0cf9	ad 67 0a	               lda  colptr+1
.0cfc	85 fe		               sta  zpage2+1
.0cfe	68		               pla
.0cff	28		               plp
.0d00	60		               rts
.0d01			putrahex
.0d01	08		               php
.0d02	48		               pha
.0d03	20 4b 0f	               jsr     atohex
.0d06	a2 e5		               ldx     #<a2hexcol
.0d08	a0 0e		               ldy     #>a2hexcol
.0d0a	20 c3 0b	               jsr     puts
.0d0d	68		               pla
.0d0e	28		               plp
.0d0f	60		               rts
.0d10			putrahexxy
.0d10	08		               php
.0d11	48		               pha
.0d12	20 4b 0f	               jsr  atohex
.0d15	a9 e7		               lda  #<a2hexpos
.0d17	a0 0e		               ldy  #>a2hexpos
.0d19	20 ef 0b	               jsr  putsxy
.0d1c	68		               pla
.0d1d	28		               plp
.0d1e	60		               rts
.0d1f			putrahexcxy
.0d1f	08		               php
.0d20	68		               pla
.0d21	20 4b 0f	               jsr  atohex
.0d24	a9 e7		               lda  #<a2hexpos
.0d26	a0 0e		               ldy  #>a2hexpos
.0d28	20 0e 0c	               jsr  putscxy
.0d2b	68		               pla
.0d2c	28		               plp
.0d2d	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0d2e			push
.0d2e	08		          php            ; stack : flg, pcl, pch
.0d2f	78		          sei
.0d30	8d 6a 0d	          sta  ra        ; save a
.0d33	68		          pla            ; stack : pcl, pch
.0d34	8d 69 0d	          sta  rp        ; save rp
.0d37	68		          pla            ; stack : pch
.0d38	8d 6b 0d	          sta  pc        ; save pcl
.0d3b	68		          pla            ; stack : -
.0d3c	8d 6c 0d	          sta  pc+1      ; save pch
.0d3f	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0d41	48		          pha            ; stack : zp1l
.0d42	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0d44	48		          pha            ; stack : zp1h, zp1l
.0d45	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0d47	48		          pha            ; stack : zp2l, zp1h, zp1l
.0d48	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0d4a	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0d4b	ad 69 0d	          lda  rp        ; get rp
.0d4e	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0d4f	ad 6a 0d	          lda  ra        ; get a
.0d52	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0d53	8a		          txa            ; get x
.0d54	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d55	98		          tya            ; get y
.0d56	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d57	ad 6c 0d	          lda  pc+1      ; get pch
.0d5a	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d5b	ad 6b 0d	          lda  pc        ; get pcl
.0d5e	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d5f	ad 69 0d	          lda  rp        ; get rp
.0d62	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d63	ad 6a 0d	          lda  ra        ; get a
.0d66	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d67	58		          cli
.0d68	60		          rts
>0d69	00		rp        .byte     0
>0d6a	00		ra        .byte     0
>0d6b	00 00		pc        .word     0
.0d6d			pull
.0d6d			pop
.0d6d	78		          sei
.0d6e	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d6f	8d a2 0d	          sta  pc        ; save pcl
.0d72	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d73	8d a3 0d	          sta  pc+1      ; save pch
.0d76	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d77	a8		          tay            ; set y
.0d78	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0d79	aa		          tax            ; set x
.0d7a	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0d7b	8d a1 0d	          sta  ra        ; save a
.0d7e	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0d7f	8d a0 0d	          sta  rp        ; save rp
.0d82	68		          pla            ; stack : zp2l, zp1h, zp1l
.0d83	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0d85	68		          pla            ; stack : zp1h, zp1l
.0d86	85 fd		          sta  zpage2    ; get zpage2 High byte
.0d88	68		          pla            ; stack : zp1l
.0d89	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0d8b	68		          pla            ; stack :
.0d8c	85 fb		          sta  zpage1    ; get zpage1 High byte
.0d8e	ad a3 0d	          lda  pc+1      ; get pch
.0d91	48		          pha            ; stack : pch
.0d92	ad a2 0d	          lda  pc
.0d95	48		          pha            ; stack : pcl, pch
.0d96	ad a0 0d	          lda  rp        ; get rp
.0d99	48		          pha            ; stack : rp, pcl, pch
.0d9a	ad a1 0d	          lda  ra        ; set ra
.0d9d	58		          cli
.0d9e	28		          plp            ; stack : pcl, pch
.0d9f	60		          rts
>0da0	00		rp        .byte     0
>0da1	00		ra        .byte     0
>0da2	00 00		pc        .word     0

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0da4			blkfill
.0da4	20 2e 0d	bf0            jsr  push
.0da7	20 65 0e	               jsr  savezp1
.0daa	84 fc		               sty  zpage1+1
.0dac	a0 00		               ldy  #$00
.0dae	84 fb		               sty  zpage1
.0db0	91 fb		bf1            sta  (zpage1),y
.0db2	c8		               iny
.0db3	d0 fb		               bne  bf1
.0db5	20 74 0e	               jsr  restzp1
.0db8	20 6d 0d	               jsr  pop
.0dbb	60		               rts
.0dbc			memfill
.0dbc	20 2e 0d	               jsr  push
.0dbf	20 a4 0d	mf1            jsr  blkfill
.0dc2	c8		               iny
.0dc3	ca		               dex
.0dc4	d0 f9		               bne  mf1
.0dc6	20 6d 0d	               jsr  pop
.0dc9	60		               rts
.0dca			memmove
.0dca	20 2e 0d	               jsr  push
.0dcd	ba		               tsx            ; On se crée un pointeur ...
.0dce	8a		               txa
.0dcf	18		               clc
.0dd0	69 0b		               adc  #11
.0dd2	a8		               tay
.0dd3	a2 06		               ldx  #$06
.0dd5	b9 00 01	nextbyte       lda  $0100,y
.0dd8	99 24 0e	               sta  words,y
.0ddb	c8		               iny
.0ddc	ca		               dex
.0ddd	d0 f6		               bne  nextbyte
.0ddf	ad 24 0e	               lda  s
.0de2	8d fb 0d	               sta  source+1
.0de5	ad 25 0e	               lda  s+1
.0de8	8d fc 0d	               sta  source+2
.0deb	ad 26 0e	               lda  d
.0dee	8d f8 0d	               sta  destin+1
.0df1	ad 27 0e	               lda  d+1
.0df4	8d f9 0d	               sta  destin+2
.0df7	ad ff ff	destin         lda  $ffff
.0dfa	8d ff ff	source         sta  $ffff
.0dfd	ee f8 0d	               inc  destin+1
.0e00	d0 03		               bne  src
.0e02	ee f9 0d	               inc  destin+2
.0e05	ee fb 0d	src            inc  source+1
.0e08	d0 03		               bne  cnt
.0e0a	ee fc 0d	               inc  source+2
.0e0d	ad 28 0e	cnt            lda  compte
.0e10	d0 08		               bne  decit
.0e12	ad 29 0e	               lda  compte+1
.0e15	f0 09		               beq  fini
.0e17	ce 29 0e	               dec  compte+1
.0e1a	ce 28 0e	decit          dec  compte
.0e1d	4c f7 0d	               jmp  destin
.0e20	20 6d 0d	fini           jsr  pop
.0e23	60		               rts
.0e24			words
>0e24	00 00		s         .word     $0000
>0e26	00 00		d         .word     $0000
>0e28	00 00		compte    .word     $0000
.0e2a			decword
.0e2a	20 2e 0d	               jsr  push
.0e2d	86 fd		               stx  zpage2
.0e2f	84 fe		               sty  zpage2+1
.0e31	20 6d 0d	               jsr  pop
.0e34	60		               rts
.0e35			inczp1
.0e35	08		               php
.0e36	48		               pha
.0e37	e6 fb		               inc  zpage1
.0e39	a5 fb		               lda  zpage1
.0e3b	d0 02		               bne  nopage
.0e3d	e6 fc		               inc  zpage1+1
.0e3f	68		nopage         pla
.0e40	28		               plp
.0e41	60		               rts
.0e42			deczp1
.0e42	08		                php
.0e43	48		                pha
.0e44	c6 fb		                dec  zpage1
.0e46	d0 02		                bne  nopage
.0e48	c6 fc		                dec  zpage1+1
.0e4a	68		nopage          pla
.0e4b	28		                plp
.0e4c	60		                rts
.0e4d			inczp2
.0e4d	08		               php
.0e4e	48		               pha
.0e4f	e6 fd		               inc  zpage2
.0e51	a5 fd		               lda  zpage2
.0e53	d0 02		               bne  nopage
.0e55	e6 fe		               inc  zpage2+1
.0e57	68		nopage         pla
.0e58	28		               plp
.0e59	60		               rts
.0e5a			deczp2
.0e5a	08		               php
.0e5b	48		               pha
.0e5c	a5 fd		               lda  zpage2
.0e5e	d0 02		               bne  nopage
.0e60	c6 fe		               dec  zpage2+1
.0e62	68		nopage         pla
.0e63	28		               plp
.0e64	60		               rts
.0e65			savezp1
.0e65	08		               php
.0e66	48		               pha
.0e67	a5 fb		               lda  zpage1
.0e69	8d e1 0e	               sta  zp1
.0e6c	a5 fc		               lda  zpage1+1
.0e6e	8d e2 0e	               sta  zp1+1
.0e71	68		               pla
.0e72	28		               plp
.0e73	60		               rts
.0e74			restzp1
.0e74	08		               php
.0e75	48		               pha
.0e76	ad e1 0e	               lda zp1
.0e79	85 fb		               sta zpage1
.0e7b	ad e2 0e	               lda zp1+1
.0e7e	85 fc		               sta zpage1+1
.0e80	68		               pla
.0e81	28		               plp
.0e82	60		               rts
.0e83			savezp2
.0e83	08		         php
.0e84	48		         pha
.0e85	a5 fd		         lda zpage2
.0e87	8d e3 0e	         sta zp2
.0e8a	a5 fe		         lda zpage2+1
.0e8c	8d e4 0e	         sta zp2+1
.0e8f	68		         pla
.0e90	28		         plp
.0e91	60		         rts
.0e92			restzp2
.0e92	08		                php
.0e93	48		                pha
.0e94	ad e3 0e	                lda  zp2
.0e97	85 fd		                sta  zpage2
.0e99	ad e4 0e	                lda  zp2+1
.0e9c	85 fe		                sta  zpage2+1
.0e9e	68		                pla
.0e9f	28		                plp
.0ea0	60		                rts
.0ea1			xy2addr
.0ea1	08		                php
.0ea2	48		                pha
.0ea3	8a		                txa
.0ea4	48		                pha
.0ea5	98		                tya
.0ea6	48		                pha
.0ea7	ad dc 0e	                lda     addr1+1
.0eaa	8d de 0e	                sta     addr2+1
.0ead	ad db 0e	                lda     addr1
.0eb0	8d dd 0e	                sta     addr2
.0eb3	c0 00		                cpy     #$00
.0eb5	f0 0f		                beq     addx
.0eb7	18		moreline        clc
.0eb8	6d da 0e	                adc     ymult
.0ebb	90 03		                bcc     norepy
.0ebd	ee de 0e	                inc     addr2+1
.0ec0	8d dd 0e	norepy          sta     addr2
.0ec3	88		                dey
.0ec4	d0 f1		                bne     moreline
.0ec6	8a		addx            txa
.0ec7	18		                clc
.0ec8	6d dd 0e	                adc     addr2
.0ecb	90 03		                bcc     thatsit
.0ecd	ee de 0e	                inc     addr2+1
.0ed0	8d dd 0e	thatsit         sta     addr2
.0ed3	68		                pla
.0ed4	a8		                tay
.0ed5	68		                pla
.0ed6	aa		                tax
.0ed7	68		                pla
.0ed8	28		                plp
.0ed9	60		                rts
>0eda	28		ymult          .byte     40
>0edb	00 00		addr1          .word     $0000
>0edd	00 00		addr2          .word     $0000
>0edf	00 00		bytecnt        .word     $0000
>0ee1	00 00		zp1        .word   $0000
>0ee3	00 00		zp2        .word   $0000

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0ee5	01		a2hexcol       .byte     1              ; pour aputscxy
>0ee6	00		a2hexbkcol     .byte     %00000000
.0ee7			a2hexpos
>0ee7	00		a2hexpx        .byte     0              ; pour aputsxy
>0ee8	00		a2hexpy        .byte     0
>0ee9	24		a2hexprefix    .byte     "$"            ; pour aputs
>0eea	00 00		a2hexstr       .word     $00
>0eec	00 00		               .word     $00
>0eee	00		               .byte     0              ; 0 end string
>0eef	30 30 30 30	abin           .null     "00000000"
>0ef3	30 30 30 30 00
>0ef8	20 20 20 00	adec           .null     "   "
.0efc			putahexfmtxy
.0efc	20 2e 0d	               jsr  push
.0eff	20 4b 0f	               jsr  atohex
.0f02	ae e7 0e	               ldx  a2hexpx
.0f05	ac e8 0e	               ldy  a2hexpy
.0f08	20 d1 0b	               jsr  gotoxy
.0f0b	a2 e9		               ldx  #<a2hexprefix
.0f0d	a0 0e		               ldy  #>a2hexprefix
.0f0f	20 c3 0b	               jsr  puts
.0f12	20 6d 0d	               jsr  pop
.0f15	60		               rts
.0f16			putahexfmt
.0f16	20 2e 0d	               jsr  push
.0f19	20 4b 0f	               jsr  atohex
.0f1c	a2 e9		               ldx  #<a2hexprefix
.0f1e	a0 0e		               ldy  #>a2hexprefix
.0f20	20 c3 0b	               jsr  puts
.0f23	20 6d 0d	               jsr  pop
.0f26	60		               rts
.0f27			putahex
.0f27	20 2e 0d	               jsr  push
.0f2a	20 4b 0f	               jsr  atohex
.0f2d	a2 ea		               ldx  #<a2hexstr
.0f2f	a0 0e		               ldy  #>a2hexstr
.0f31	20 c3 0b	               jsr  puts
.0f34	20 6d 0d	               jsr  pop
.0f37	60		               rts
.0f38			nibtohex
.0f38	08		               php
.0f39	29 0f		               and  #$0f
.0f3b	f8		               sed
.0f3c	18		               clc
.0f3d	69 90		               adc  #$90
.0f3f	69 40		               adc  #$40
.0f41	d8		               cld
.0f42	28		               plp
.0f43	60		               rts
.0f44			lsra4bits
.0f44	08		               php
.0f45	4a		               lsr
.0f46	4a		               lsr
.0f47	4a		               lsr
.0f48	4a		               lsr
.0f49	28		               plp
.0f4a	60		               rts
.0f4b			atohex
.0f4b	08		               php
.0f4c	48		               pha
.0f4d	48		               pha
.0f4e	20 44 0f	               jsr  lsra4bits
.0f51	20 38 0f	               jsr  nibtohex
.0f54	8d ea 0e	               sta  a2hexstr
.0f57	68		               pla
.0f58	20 38 0f	               jsr  nibtohex
.0f5b	8d eb 0e	               sta  a2hexstr+1
.0f5e	a9 00		               lda  #$00                ; set end of string
.0f60	8d ec 0e	               sta  a2hexstr+2
.0f63	68		               pla
.0f64	28		               plp
.0f65	60		               rts
.0f66			xy2hex
.0f66	20 2e 0d	               jsr  push
.0f69	20 4b 0f	               jsr  atohex
.0f6c	8a		               txa
.0f6d	48		               pha
.0f6e	20 44 0f	               jsr  lsra4bits
.0f71	20 38 0f	               jsr  nibtohex
.0f74	8d ea 0e	               sta  a2hexstr
.0f77	68		               pla
.0f78	20 38 0f	               jsr  nibtohex
.0f7b	8d eb 0e	               sta  a2hexstr+1
.0f7e	98		               tya
.0f7f	48		               pha
.0f80	20 44 0f	               jsr  lsra4bits
.0f83	20 38 0f	               jsr  nibtohex
.0f86	8d ec 0e	               sta  a2hexstr+2
.0f89	68		               pla
.0f8a	20 38 0f	               jsr  nibtohex
.0f8d	8d ed 0e	               sta  a2hexstr+3
.0f90	a9 00		               lda  #$00                ; 0 ended string
.0f92	8d ee 0e	               sta  a2hexstr+4
.0f95	20 6d 0d	               jsr  pop
.0f98			atobin
.0f98	20 2e 0d	               jsr  push
.0f9b	a2 08		               ldx  #8
.0f9d	a0 00		               ldy  #0
.0f9f	18		               clc
.0fa0	2a		nextbit        rol
.0fa1	48		               pha
.0fa2	69 00		               adc  #$00
.0fa4	29 01		               and  #$01
.0fa6	20 38 0f	               jsr  nibtohex
.0fa9	99 ef 0e	               sta  abin,y
.0fac	68		               pla
.0fad	c8		               iny
.0fae	ca		               dex
.0faf	d0 ef		               bne  nextbit
.0fb1	a9 00		               lda  #0
.0fb3	99 ef 0e	               sta  abin,y
.0fb6	20 6d 0d	               jsr  pull
.0fb9	60		               rts
.0fba			putabin
.0fba	20 98 0f	               jsr     atobin
.0fbd	20 2e 0d	               jsr     push
.0fc0	a2 ef		               ldx     #<abin
.0fc2	a0 0e		               ldy     #>abin
.0fc4	20 c3 0b	               jsr     puts
.0fc7	20 6d 0d	               jsr     pop
.0fca	60		               rts
.0fcb			printabin
.0fcb	20 2e 0d	               jsr     push
.0fce	a2 ef		               ldx     #<abin
.0fd0	a0 0e		               ldy     #>abin
.0fd2	20 c3 0b	               jsr     puts
.0fd5	20 6d 0d	               jsr     pop
.0fd8	60		               rts
.0fd9			putabinfmt
.0fd9	08		               php
.0fda	48		               pha
.0fdb	a9 25		               lda     #"%"
.0fdd	20 7d 0b	               jsr     putch
.0fe0	68		               pla
.0fe1	20 ba 0f	               jsr     putabin
.0fe4	28		               plp
.0fe5	60		               rts
.0fe6			putabinxy
.0fe6	20 d1 0b	               jsr     gotoxy
.0fe9	20 ba 0f	               jsr     putabin
.0fec	60		               rts
.0fed			putabinfmtxy
.0fed	20 d1 0b	               jsr     gotoxy
.0ff0	20 d9 0f	               jsr     putabinfmt
.0ff3	60		               rts
.0ff4			atodec
.0ff4	20 2e 0d	               jsr  push
.0ff7	f8		               sed
.0ff8	aa		               tax
.0ff9	a0 00		               ldy  #$00
.0ffb	a9 00		               lda  #$00
.0ffd	18		nextbit        clc
.0ffe	69 01		               adc  #$01
.1000	90 01		               bcc  decx
.1002	c8		               iny
.1003	ca		decx           dex
.1004	d0 f7		               bne  nextbit
.1006	48		               pha
.1007	98		               tya
.1008	20 38 0f	               jsr  nibtohex
.100b	8d f8 0e	               sta  adec
.100e	68		               pla
.100f	48		               pha
.1010	20 38 0f	               jsr  nibtohex
.1013	8d fa 0e	               sta  adec+2
.1016	68		               pla
.1017	6a		               ror
.1018	6a		               ror
.1019	6a		               ror
.101a	6a		               ror
.101b	20 38 0f	               jsr  nibtohex
.101e	8d f9 0e	               sta  adec+1
.1021	d8		               cld
.1022	20 6d 0d	               jsr  pull
.1025	60		               rts
>1026	00 00 00	buffer         .byte     0,0,0
.1029			putadec
.1029	20 2e 0d	               jsr  push
.102c	20 f4 0f	               jsr  atodec
.102f	a2 f8		               ldx  #<adec
.1031	a0 0e		               ldy  #>adec+1
.1033	20 c3 0b	               jsr  puts
.1036	20 6d 0d	               jsr  pop
.1039	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>103a	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>103e	00 00 00 00 00 00 00 00 00 0d 00 00
>104a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>104e	00 00 00 00 00 00 00 00 00 00 00 00
>105a	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>105e	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>106a	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>106e	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>107a	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>107e	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>108a	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>108e	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>109a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>109e	00 00 00 00 00 00 00 00 00 00 00 00
>10aa	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>10ae	00 00 00 00 00 00 00 00 00 00 00 00
>10ba	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>10be	00 00 00 00 00 00 00 00 00 00 00 00
>10ca	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>10ce	00 00 00 00 00 00 00 00 00 00 00 00
>10da	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>10de	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>10ea	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>10ee	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>10fa	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>10fe	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>110a	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>110e	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>111a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>111e	00 00 00 00 00 00 00 00 00 00 00 00
>112a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>112e	00 00 00 00 00 00 00 00 00 00 00 00
.113a			waitstop
.113a	20 2e 0d	               jsr  push
.113d	20 ed f6	wait           jsr  k_stop
.1140	d0 fb		               bne  wait
.1142	20 6d 0d	               jsr  pop
.1145	60		               rts
.1146			anykey
.1146	08		               php
.1147	48		               pha
.1148	a5 cb		nokey          lda 203
.114a	c9 40		               cmp #64
.114c	f0 fa		               beq nokey
.114e	20 54 11	               jsr releasekey
.1151	68		               pla
.1152	28		               plp
.1153	60		               rts
.1154			releasekey
.1154	08		               php
.1155	48		               pha
.1156	a5 cb		keypressed     lda 203
.1158	c9 40		               cmp #64
.115a	d0 fa		               bne keypressed
.115c	68		               pla
.115d	28		               plp
.115e	60		               rts
.115f			getkey
.115f	20 e4 ff	again          jsr  getin
.1162	c9 00		               cmp  #0
.1164	f0 f9		               beq  again
.1166	60		               rts
.1167			kbflushbuff
.1167	08		               php
.1168	48		               pha
.1169	20 e4 ff	again          jsr  getin
.116c	c9 00		               cmp  #0
.116e	d0 f9		               bne  again
.1170	68		               pla
.1171	28		               plp
.1172	60		               rts
.1173			waitkey
.1173	20 2e 0d	               jsr  push
.1176	8d c4 11	               sta  thekey
.1179	20 e4 ff	nope           jsr  getin
.117c	20 d2 ff	               jsr  chrout
.117f	cd c4 11	               cmp  thekey
.1182	d0 f5		               bne  nope
.1184	20 d2 ff	               jsr  chrout
.1187	20 6d 0d	               jsr  pop
.118a	60		               rts
.118b			waitspace
.118b	20 2e 0d	               jsr  push
.118e	a9 7f		wait           lda  #$7f  ;%01111111
.1190	8d 00 dc	               sta  $dc00
.1193	ad 01 dc	               lda  $dc01
.1196	29 10		               and  #$10  ;mask %00010000
.1198	d0 f4		               bne  wait
.119a	20 6d 0d	               jsr  pop
.119d			waitsstop
.119d	20 2e 0d	               jsr  push
.11a0	20 ed f6	wait           jsr  k_stop  ;%01111111
.11a3	d0 fb		               bne  wait
.11a5	20 6d 0d	               jsr  pop
.11a8			waitreturn
.11a8	20 2e 0d	               jsr  push
.11ab	ad c5 11	               lda  thecount
.11ae	8d 00 04	               sta  scrnram
.11b1	a9 02		               lda  #$02
.11b3	8d 00 d8	               sta  colorram
.11b6	20 e4 ff	nope           jsr  getin
.11b9	c9 0d		nohex          cmp  #$0d
.11bb	d0 f9		               bne  nope
.11bd	ee c5 11	               inc  thecount
.11c0	20 6d 0d	               jsr  pop
.11c3	60		               rts
>11c4	00		thekey         .byte   0
>11c5	01		thecount       .byte   $01

;******  Return to file: slbug64.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L libtest02.txt -o libtest02.prg libtest02.asm
; Sat Apr 12 15:37:17 2025

;Offset	;Hex		;Source

;******  Processing input file: libtest02.asm

="20250405-231555"	                Version = "20250405-231555"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 00 c0	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: libtest02.asm


;******  Processing file: strings_fr.asm

.0854			headera
>0854	20 20 20 20	               .text          "     Commodore 64 test de librarie "
>0858	20 c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 54 45
>0868	53 54 20 44 45 20 4c 49 42 52 41 52 49 45 20
>0877	0d 00		               .byte     $0d,0
>0879	20 20 20 20	headerb        .text          "               libtest01 "
>087d	20 20 20 20 20 20 20 20 20 20 20 4c 49 42 54 45
>088d	53 54 30 31 20
>0892	0d		               .byte     $0d
>0893	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0897	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>08a7	45 4c 20 cc 41 46 52 41 4e 43 45
>08b2	0d		               .byte     $0d
>08b3	20 20 20 20	               .text   format("       Version: %s",Version)
>08b7	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>08c7	30 34 30 35 2d 32 33 31 35 35 35
>08d2	0d 00		               .byte     $0d,0
>08d4	0d		shortcuts      .byte     $0d
>08d5	91 91		               .byte     ucurkey,ucurkey
>08d7	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>08db	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>08df	1d
>08e0	20 d2 20 c1	               .text          " R A C C O U R C I S "
>08e4	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>08f4	20
>08f5	0d		               .byte     $0d
>08f6	20 4c 49 42	               .text   format(" libtest01: SYS%05d ($%04X)",main, main)
>08fa	54 45 53 54 30 31 3a 20 d3 d9 d3 34 39 31 35 32
>090a	20 28 24 c3 30 30 30 29
>0912	0d		               .byte     $0d
>0913	20 41 49 44	               .text   format(" aide.....: SYS%05d ($%04X)",aide, aide)
>0917	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34 39 32 35 39
>0927	20 28 24 c3 30 36 c2 29
>092f	0d		               .byte     $0d
>0930	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0934	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34 39 37 30 31
>0944	20 28 24 c3 32 32 35 29
>094c	0d 00		               .byte     $0d,0
>094e	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d ($%04X)",libtest01, libtest01)
>0952	43 45 4d 45 4e 54 3a 20 d3 d9 d3 34 39 33 38 38
>0962	20 28 24 c3 30 c5 c3 29
>096a	0d 0d		               .byte     $0d, $0d
>096c	20 20 20 20	                .text   format("    ex.: SYS%05d",libtest01)
>0970	45 58 2e 3a 20 d3 d9 d3 34 39 33 38 38
>097d	0d		                .byte     $0d
>097e	20 20 20 20	                .text   format("    for i=0to100:SYS%05d:next",libtest01)
>0982	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0992	34 39 33 38 38 3a 4e 45 58 54
>099c	0d 00		                .byte     $0d,0
>099e	20 c0 c0 c0	line            .byte     $20,192,192,192,192,192,192,192,192,192
>09a2	c0 c0 c0 c0 c0 c0
>09a8	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09ac	c0 c0 c0 c0 c0 c0
>09b2	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09b6	c0 c0 c0 c0 c0 c0
>09bc	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192
>09c0	c0 c0 c0 c0 c0
>09c5	0d 00		                .byte     $0d,0
>09c7	01 00 00 00	dataloc         .byte       1,0,0,0

;******  Return to file: libtest02.asm

.c000			main
.c000	20 05 c2	               jsr scrmaninit
.c003	08		               php
.c004	48		               pha
.c005	a9 8e		               lda  #b_uppercase
.c007	8d 24 c2	               sta  characterset
.c00a	20 d2 ff	               jsr  $ffd2
.c00d	68		               pla
.c00e	28		               plp
.c00f	08		               php
.c010	48		               pha
.c011	a9 8e		               lda  #b_uppercase
.c013	20 d2 ff	               jsr  $ffd2
.c016	68		               pla
.c017	28		               plp
.c018	08		               php
.c019	48		               pha
.c01a	a9 08		               lda  #$08
.c01c	20 d2 ff	               jsr  $ffd2
.c01f	68		               pla
.c020	28		               plp
.c021	20 6b c0	               jsr aide
.c024	20 33 c3	               jsr  push
.c027	48		               pha
.c028	a9 05		               lda  #cvert
.c02a	8d 20 d0	               sta  $d020
.c02d	68		               pla
.c02e	48		               pha
.c02f	a9 06		               lda  #cbleu
.c031	8d 21 d0	               sta  $d021
.c034	68		               pla
.c035	48		               pha
.c036	a9 01		               lda  #cblanc
.c038	8d 86 02	               sta  bascol
.c03b	68		               pla
.c03c	20 72 c3	               jsr  pull
.c03f	20 ec c0	               jsr libtest01
.c042	08		               php
.c043	48		               pha
.c044	a9 09		               lda  #$09
.c046	20 d2 ff	               jsr  $ffd2
.c049	68		               pla
.c04a	28		               plp
.c04b	08		               php
.c04c	48		               pha
.c04d	a9 8e		               lda  #b_uppercase
.c04f	8d 24 c2	               sta  characterset
.c052	20 d2 ff	               jsr  $ffd2
.c055	68		               pla
.c056	28		               plp
.c057	20 33 c3	               jsr  push
.c05a	a2 00		               ldx  #0
.c05c	a0 00		               ldy  #0
.c05e	20 5c c2	               jsr  gotoxy
.c061	20 72 c3	               jsr  pop
.c064	20 5d c7	               jsr  anykey
.c067	4c 74 a4	               jmp b_warmstart
.c06a	60		               rts
.c06b			aide
.c06b	20 33 c3	               jsr  push
.c06e	08		               php
.c06f	48		               pha
.c070	a9 0e		               lda  #14
.c072	8d 24 c2	               sta  characterset
.c075	20 d2 ff	               jsr  $ffd2
.c078	68		               pla
.c079	28		               plp
.c07a	20 25 c2	               jsr  cls
.c07d	20 33 c3	               jsr  push
.c080	a2 9e		               ldx  #<line
.c082	a0 09		               ldy  #>line
.c084	20 42 c2	               jsr  puts
.c087	20 72 c3	               jsr  pull
.c08a	20 33 c3	               jsr  push
.c08d	a2 54		               ldx  #<headera
.c08f	a0 08		               ldy  #>headera
.c091	20 42 c2	               jsr  puts
.c094	20 72 c3	               jsr  pull
.c097	20 33 c3	               jsr  push
.c09a	a2 79		               ldx  #<headerb
.c09c	a0 08		               ldy  #>headerb
.c09e	20 42 c2	               jsr  puts
.c0a1	20 72 c3	               jsr  pull
.c0a4	20 33 c3	               jsr  push
.c0a7	a2 9e		               ldx  #<line
.c0a9	a0 09		               ldy  #>line
.c0ab	20 42 c2	               jsr  puts
.c0ae	20 72 c3	               jsr  pull
.c0b1	20 33 c3	               jsr  push
.c0b4	a2 9e		               ldx  #<line
.c0b6	a0 09		               ldy  #>line
.c0b8	20 42 c2	               jsr  puts
.c0bb	20 72 c3	               jsr  pull
.c0be	20 33 c3	               jsr  push
.c0c1	a2 d4		               ldx  #<shortcuts
.c0c3	a0 08		               ldy  #>shortcuts
.c0c5	20 42 c2	               jsr  puts
.c0c8	20 72 c3	               jsr  pull
.c0cb	20 33 c3	               jsr  push
.c0ce	a2 4e		               ldx  #<aidetext
.c0d0	a0 09		               ldy  #>aidetext
.c0d2	20 42 c2	               jsr  puts
.c0d5	20 72 c3	               jsr  pull
.c0d8	20 33 c3	               jsr  push
.c0db	a2 9e		               ldx  #<line
.c0dd	a0 09		               ldy  #>line
.c0df	20 42 c2	               jsr  puts
.c0e2	20 72 c3	               jsr  pull
.c0e5	20 5d c7	               jsr  anykey
.c0e8	20 72 c3	               jsr  pop
.c0eb	60		               rts
.c0ec			libtest01
.c0ec	08		               php
.c0ed	48		               pha
.c0ee	20 25 c2	               jsr  cls
.c0f1	a9 a6		               lda  #166
.c0f3	20 33 c3	               jsr  push
.c0f6	a2 c7		               ldx  #<dataloc
.c0f8	a0 09		               ldy  #>dataloc
.c0fa	20 cb c2	               jsr  putscxy
.c0fd	20 72 c3	               jsr  pull
.c100	48		               pha
.c101	a9 03		               lda  #ccyan
.c103	8d 86 02	               sta  bascol
.c106	68		               pla
.c107	20 dd c7	               jsr  showregs
.c10a	20 5d c7	               jsr  anykey
.c10d	20 67 c1	               jsr  victohighres
.c110	20 5d c7	               jsr  anykey
.c113	20 a4 c1	               jsr  vicbmpclear
.c116	a0 0f		               ldy  #$0f
.c118	98		nextc          tya
.c119	20 d2 c1	               jsr  setvicbmpbkcol
.c11c	88		               dey
.c11d	c0 00		               cpy  #$00
.c11f	10 f7		               bpl  nextc
.c121	20 5d c7	               jsr  anykey
.c124	20 84 c1	               jsr  victonormal
.c127	48		               pha
.c128	a9 98		               lda  #<$0000+(40*23)
.c12a	8d fd c4	               sta  loopcount
.c12d	a9 03		               lda  #>$0000+(40*23)
.c12f	8d fe c4	               sta  loopcount+1
.c132	68		               pla
.c133	ad 44 c1	roll           lda  car
.c136	20 3c c2	               jsr  putch
.c139	20 dd c4	               jsr  loop
.c13c	d0 f5		               bne  roll
.c13e	20 dd c7	               jsr  showregs
.c141	68		out            pla
.c142	28		               plp
.c143	60		               rts
>c144	20		car            .byte     32

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>c145	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>c149	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.c14d			libtart

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.c14d			screendis
.c14d	08		               php
.c14e	48		               pha
.c14f	ad 11 d0	               lda  $d011
.c152	29 ef		               and  #%11101111
.c154	8d 11 d0	               sta  $d011
.c157	68		               pla
.c158	28		               plp
.c159	60		               rts
.c15a			screenena
.c15a	08		               php
.c15b	48		               pha
.c15c	ad 11 d0	               lda  $d011
.c15f	09 10		               ora  #%00010000
.c161	8d 11 d0	               sta  $d011
.c164	68		               pla
.c165	28		               plp
.c166	60		               rts
=8192			bmpram = 8192
.c167			victohighres
.c167	08		               php
.c168	48		               pha
.c169	ad 11 d0	               lda  vicmiscfnc
.c16c	09 20		               ora  #%00100000     ; 32
.c16e	8d 11 d0	               sta  vicmiscfnc
.c171	ad 18 d0	               lda  vicmemptr
.c174	09 08		               ora  #%00001000     ; $08
.c176	8d 18 d0	               sta  vicmemptr
.c179	a9 ff		               lda  #$ff           ; 255
.c17b	85 37		               sta  $0037
.c17d	a9 1f		               lda  #$1f           ; 31
.c17f	85 38		               sta  $0038
.c181	68		               pla
.c182	28		               plp
.c183	60		               rts
.c184			victonormal
.c184	08		               php
.c185	48		               pha
.c186	ad 11 d0	               lda  vicmiscfnc
.c189	29 df		               and  #%11011111     ; 233
.c18b	8d 11 d0	               sta  vicmiscfnc
.c18e	ad 18 d0	               lda  vicmemptr
.c191	29 f7		               and  #%11110111     ; $08
.c193	8d 18 d0	               sta  vicmemptr
.c196	a9 00		               lda  #$00
.c198	85 37		               sta  $0037
.c19a	a9 a0		               lda  #$a0
.c19c	85 38		               sta  $0038
.c19e	20 25 c2	               jsr  cls
.c1a1	68		               pla
.c1a2	28		               plp
.c1a3	60		               rts
.c1a4			vicbmpclear
.c1a4	20 33 c3	               jsr  push
.c1a7	a9 04		               lda  #cmauve
.c1a9	20 d2 c1	               jsr  setvicbmpbkcol
.c1ac	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.c1ae	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.c1b0	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.c1b2	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.c1b4	48		               pha
.c1b5	a9 ff		               lda  #<$0000+(8191)
.c1b7	8d fd c4	               sta  loopcount
.c1ba	a9 1f		               lda  #>$0000+(8191)
.c1bc	8d fe c4	               sta  loopcount+1
.c1bf	68		               pla
.c1c0	a0 00		               ldy  #$00
.c1c2	a9 00		next           lda  #$00
.c1c4	91 fb		               sta  (zpage1),y
.c1c6	20 3a c4	               jsr  inczpage1
.c1c9	20 dd c4	               jsr  loop
.c1cc	d0 f4		               bne  next
.c1ce	20 72 c3	               jsr  pop
.c1d1	60		               rts
.c1d2			setvicbmpbkcol
.c1d2	20 33 c3	               jsr  push
.c1d5	29 0f		               and  #$0f
.c1d7	8d 05 c2	               sta  vicbmpbkcol
.c1da	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.c1dc	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.c1de	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.c1e0	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.c1e2	48		               pha
.c1e3	a9 00		               lda  #<$0000+(1024)
.c1e5	8d fd c4	               sta  loopcount
.c1e8	a9 04		               lda  #>$0000+(1024)
.c1ea	8d fe c4	               sta  loopcount+1
.c1ed	68		               pla
.c1ee	a0 00		               ldy  #$00
.c1f0	b1 fb		next           lda  (zpage1),y
.c1f2	29 f0		               and  #$f0
.c1f4	0d 05 c2	               ora  vicbmpbkcol
.c1f7	91 fb		               sta  (zpage1),y
.c1f9	20 3a c4	               jsr  inczpage1
.c1fc	20 dd c4	               jsr  loop
.c1ff	d0 ef		               bne  next
.c201	20 72 c3	               jsr  pop
.c204	60		               rts
.c205			vicbmpbkcol

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.c205			scrmaninit
.c205	20 33 c3	               jsr  push
.c208	a9 06		               lda  #vbleu
.c20a	8d 21 d0	               sta  vicbackcol
.c20d	a9 05		               lda  #vvert
.c20f	8d 20 d0	               sta  vicbordcol
.c212	a9 01		               lda  #vblanc
.c214	8d 86 02	               sta  bascol
.c217	ad 00 04	               lda  scrnram
.c21a	8d 00 04	               sta  scrnram
.c21d	20 25 c2	               jsr  cls
.c220	20 72 c3	               jsr  pop
.c223	60		               rts
>c224	8e		characterset   .byte b_uppercase
.c225			cls
.c225	08		               php
.c226	48		               pha
.c227	a9 93		               lda  #$93
.c229	20 3c c2	               jsr  putch
.c22c	68		               pla
.c22d	28		               plp
.c22e	60		               rts
.c22f			putnch
.c22f	08		               php
.c230	e0 00		               cpx  #$00
.c232	f0 06		               beq  out
.c234	20 d2 ff	again          jsr  $ffd2
.c237	ca		               dex
.c238	d0 fa		               bne  again
.c23a	28		out            plp
.c23b	60		               rts
.c23c			putch
.c23c	08		               php
.c23d	20 d2 ff	               jsr  $ffd2
.c240	28		               plp
.c241	60		               rts
.c242			puts
.c242	20 33 c3	               jsr  push
.c245	86 fb		               stx  zpage1
.c247	84 fc		               sty  zpage1+1
.c249	a0 00		               ldy  #0
.c24b	b1 fb		next           lda  (zpage1),y
.c24d	f0 09		               beq  exit
.c24f	20 3c c2	               jsr  putch
.c252	20 3a c4	               jsr  inczp1
.c255	4c 4b c2	               jmp  next
.c258	20 72 c3	exit           jsr  pop
.c25b	60		               rts
.c25c			gotoxy
.c25c	08		               php
.c25d	18		               clc
.c25e	8a		               txa
.c25f	48		               pha
.c260	98		               tya
.c261	aa		               tax
.c262	68		               pla
.c263	a8		               tay
.c264	20 f0 ff	               jsr  kplot
.c267	28		               plp
.c268	60		               rts
.c269			cursor
=$0286			bascol    =    $0286
.c269	08		               php            ;tourlou
.c26a	48		               pha
.c26b	90 12		               bcc  restore
.c26d	20 f0 ff	               jsr  kplot
.c270	8c 91 c2	               sty  cx
.c273	8e 92 c2	               stx  cy
.c276	ad 86 02	               lda  bascol
.c279	8d 93 c2	               sta  bcol
.c27c	4c 8e c2	               jmp  out
.c27f	ae 92 c2	restore        ldx  cy
.c282	ac 91 c2	               ldy  cx
.c285	20 f0 ff	               jsr  kplot
.c288	ad 93 c2	               lda  bcol
.c28b	8d 86 02	               sta  bascol
.c28e	68		out            pla
.c28f	28		               plp
.c290	60		               rts
>c291	00		cx   .byte     $00
>c292	00		cy   .byte     $00
>c293	00		bcol .byte     $00
.c294			cursave
.c294	08		               php
.c295	38		               sec
.c296	20 69 c2	               jsr  cursor
.c299	28		               plp
.c29a	60		               rts
.c29b			curput
.c29b	08		               php
.c29c	18		               clc
.c29d	20 69 c2	               jsr  cursor
.c2a0	28		               plp
.c2a1	60		               rts
.c2a2			putsxy
.c2a2	20 33 c3	               jsr  push
.c2a5	86 fb		               stx  zpage1
.c2a7	84 fc		               sty  zpage1+1
.c2a9	a0 00		               ldy  #$00
.c2ab	b1 fb		               lda  (zpage1),y
.c2ad	aa		               tax
.c2ae	20 3a c4	               jsr  inczp1
.c2b1	b1 fb		               lda  (zpage1),y
.c2b3	a8		               tay
.c2b4	20 5c c2	               jsr  gotoxy
.c2b7	20 3a c4	               jsr  inczp1
.c2ba	a6 fb		               ldx  zpage1
.c2bc	a4 fc		               ldy  zpage1+1
.c2be	20 42 c2	               jsr  puts
.c2c1	20 72 c3	               jsr  pop
.c2c4	60		               rts
>c2c5	00 00		straddr   .word     $00
>c2c7	00		px        .byte     $00
>c2c8	00		py        .byte     $00
>c2c9	00 00		zp1       .word     $00
.c2cb			putscxy
.c2cb	20 33 c3	               jsr  push
.c2ce	84 fc		               sty  zpage1+1
.c2d0	86 fb		               stx  zpage1
.c2d2	ad 86 02	               lda  bascol
.c2d5	8d f5 c2	               sta  bc
.c2d8	a0 00		               ldy #$00
.c2da	b1 fb		               lda  (zpage1),y
.c2dc	8d 86 02	               sta  bascol
.c2df	20 3a c4	               jsr  inczp1
.c2e2	a6 fb		               ldx  zpage1
.c2e4	a4 fc		               ldy  zpage1+1
.c2e6	20 a2 c2	               jsr  putsxy
.c2e9	ad f5 c2	               lda  bc
.c2ec	8d 86 02	               sta  bascol
.c2ef	20 72 c3	               jsr  pop
.c2f2	60		               rts
>c2f3	00 00		straddr  .word      $00
>c2f5	00		bc       .byte      $00
>c2f6	00 00		zp1      .word      $00
.c2f8			putrahex
.c2f8	08		               php
.c2f9	48		               pha
.c2fa	20 65 c5	               jsr  atohex
.c2fd	a9 04		               lda  #<a2hexstr
.c2ff	a0 c5		               ldy  #>a2hexstr
.c301	20 42 c2	               jsr  puts
.c304	68		               pla
.c305	28		               plp
.c306	60		               rts
.c307			kputrahexxy
.c307			bputrahexxy
.c307			putrahexxy
.c307	08		               php
.c308	20 65 c5	               jsr  atohex
.c30b	a9 01		               lda  #<a2hexpos
.c30d	a0 c5		               ldy  #>a2hexpos
.c30f	20 a2 c2	               jsr  putsxy
.c312	68		               pla
.c313	28		               plp
.c314	60		               rts
.c315			putrahexcxy
.c315	08		               php
.c316	20 65 c5	               jsr  atohex
.c319	a9 01		               lda  #<a2hexpos
.c31b	a0 c5		               ldy  #>a2hexpos
.c31d	20 cb c2	               jsr  putscxy
.c320	68		               pla
.c321	28		               plp
.c322	60		               rts
.c323			setinverse
.c323	48		               pha
.c324	a9 12		               lda  #$12
.c326	20 d2 ff	               jsr  $ffd2
.c329	68		               pla
.c32a	60		               rts
.c32b			clrinverse
.c32b	48		               pha
.c32c	a9 92		               lda  #$92
.c32e	20 d2 ff	               jsr  $ffd2
.c331	68		               pla
.c332	60		               rts

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.c333			push
.c333	08		          php            ; stack : flg, pcl, pch
.c334	78		          sei
.c335	8d 6f c3	          sta  ra        ; save a
.c338	68		          pla            ; stack : pcl, pch
.c339	8d 6e c3	          sta  rp        ; save rp
.c33c	68		          pla            ; stack : pch
.c33d	8d 70 c3	          sta  pc        ; save pcl
.c340	68		          pla            ; stack : -
.c341	8d 71 c3	          sta  pc+1      ; save pch
.c344	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c346	48		          pha            ; stack : zp1l
.c347	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c349	48		          pha            ; stack : zp1h, zp1l
.c34a	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c34c	48		          pha            ; stack : zp2l, zp1h, zp1l
.c34d	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c34f	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c350	ad 6e c3	          lda  rp        ; get rp
.c353	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c354	ad 6f c3	          lda  ra        ; get a
.c357	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c358	8a		          txa            ; get x
.c359	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c35a	98		          tya            ; get y
.c35b	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c35c	ad 71 c3	          lda  pc+1      ; get pch
.c35f	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c360	ad 70 c3	          lda  pc        ; get pcl
.c363	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c364	ad 6e c3	          lda  rp        ; get rp
.c367	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c368	ad 6f c3	          lda  ra        ; get a
.c36b	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c36c	58		          cli
.c36d	60		          rts
>c36e	00		rp        .byte     0
>c36f	00		ra        .byte     0
>c370	00 00		pc        .word     0
.c372			pull
.c372			pop
.c372	78		          sei
.c373	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c374	8d a7 c3	          sta  pc        ; save pcl
.c377	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c378	8d a8 c3	          sta  pc+1      ; save pch
.c37b	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c37c	a8		          tay            ; set y
.c37d	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c37e	aa		          tax            ; set x
.c37f	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c380	8d a6 c3	          sta  ra        ; save a
.c383	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c384	8d a5 c3	          sta  rp        ; save rp
.c387	68		          pla            ; stack : zp2l, zp1h, zp1l
.c388	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c38a	68		          pla            ; stack : zp1h, zp1l
.c38b	85 fd		          sta  zpage2    ; get zpage2 High byte
.c38d	68		          pla            ; stack : zp1l
.c38e	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c390	68		          pla            ; stack :
.c391	85 fb		          sta  zpage1    ; get zpage1 High byte
.c393	ad a8 c3	          lda  pc+1      ; get pch
.c396	48		          pha            ; stack : pch
.c397	ad a7 c3	          lda  pc
.c39a	48		          pha            ; stack : pcl, pch
.c39b	ad a5 c3	          lda  rp        ; get rp
.c39e	48		          pha            ; stack : rp, pcl, pch
.c39f	ad a6 c3	          lda  ra        ; set ra
.c3a2	58		          cli
.c3a3	28		          plp            ; stack : pcl, pch
.c3a4	60		          rts
>c3a5	00		rp        .byte     0
>c3a6	00		ra        .byte     0
>c3a7	00 00		pc        .word     0

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c3a9			blkfill
.c3a9	20 33 c3	bf0            jsr  push
.c3ac	20 68 c4	               jsr  savezp1
.c3af	84 fc		               sty  zpage1+1
.c3b1	a0 00		               ldy  #$00
.c3b3	84 fb		               sty  zpage1
.c3b5	91 fb		bf1            sta  (zpage1),y
.c3b7	c8		               iny
.c3b8	d0 fb		               bne  bf1
.c3ba	20 77 c4	               jsr  restzp1
.c3bd	20 72 c3	               jsr  pop
.c3c0	60		               rts
.c3c1			memfill
.c3c1	20 33 c3	               jsr  push
.c3c4	20 a9 c3	mf1            jsr  blkfill
.c3c7	c8		               iny
.c3c8	ca		               dex
.c3c9	d0 f9		               bne  mf1
.c3cb	20 72 c3	               jsr  pop
.c3ce	60		               rts
.c3cf			memmove
.c3cf	20 33 c3	               jsr  push
.c3d2	ba		               tsx            ; On se crée un pointeur ...
.c3d3	8a		               txa
.c3d4	18		               clc
.c3d5	69 0b		               adc  #11
.c3d7	a8		               tay
.c3d8	a2 06		               ldx  #$06
.c3da	b9 00 01	nextbyte       lda  $0100,y
.c3dd	99 29 c4	               sta  words,y
.c3e0	c8		               iny
.c3e1	ca		               dex
.c3e2	d0 f6		               bne  nextbyte
.c3e4	ad 29 c4	               lda  s
.c3e7	8d 00 c4	               sta  source+1
.c3ea	ad 2a c4	               lda  s+1
.c3ed	8d 01 c4	               sta  source+2
.c3f0	ad 2b c4	               lda  d
.c3f3	8d fd c3	               sta  destin+1
.c3f6	ad 2c c4	               lda  d+1
.c3f9	8d fe c3	               sta  destin+2
.c3fc	ad ff ff	destin         lda  $ffff
.c3ff	8d ff ff	source         sta  $ffff
.c402	ee fd c3	               inc  destin+1
.c405	d0 03		               bne  src
.c407	ee fe c3	               inc  destin+2
.c40a	ee 00 c4	src            inc  source+1
.c40d	d0 03		               bne  cnt
.c40f	ee 01 c4	               inc  source+2
.c412	ad 2d c4	cnt            lda  compte
.c415	d0 08		               bne  decit
.c417	ad 2e c4	               lda  compte+1
.c41a	f0 09		               beq  fini
.c41c	ce 2e c4	               dec  compte+1
.c41f	ce 2d c4	decit          dec  compte
.c422	4c fc c3	               jmp  destin
.c425	20 72 c3	fini           jsr  pop
.c428	60		               rts
.c429			words
>c429	00 00		s         .word     $0000
>c42b	00 00		d         .word     $0000
>c42d	00 00		compte    .word     $0000
.c42f			decword
.c42f	20 33 c3	               jsr  push
.c432	86 fd		               stx  zpage2
.c434	84 fe		               sty  zpage2+1
.c436	20 72 c3	               jsr  pop
.c439	60		               rts
.c43a			inczpage1
.c43a			inczp1
.c43a	08		               php
.c43b	48		               pha
.c43c	e6 fb		               inc  zpage1
.c43e	a5 fb		               lda  zpage1
.c440	d0 02		               bne  nopage
.c442	e6 fc		               inc  zpage1+1
.c444	68		nopage         pla
.c445	28		               plp
.c446	60		               rts
.c447			deczpage1
.c447			deczp1
.c447	08		                php
.c448	48		                pha
.c449	c6 fb		                dec  zpage1
.c44b	d0 02		                bne  nopage
.c44d	c6 fc		                dec  zpage1+1
.c44f	68		nopage          pla
.c450	28		                plp
.c451	60		                rts
.c452			inczpage2
.c452			inczp2
.c452	08		               php
.c453	48		               pha
.c454	e6 fd		               inc  zpage2
.c456	a5 fd		               lda  zpage2
.c458	d0 02		               bne  nopage
.c45a	e6 fe		               inc  zpage2+1
.c45c	68		nopage         pla
.c45d	28		               plp
.c45e	60		               rts
.c45f			deczpage2
.c45f			deczp2
.c45f	08		               php
.c460	c6 fd		               dec  zpage2
.c462	d0 02		               bne  nopage
.c464	c6 fe		               dec  zpage2+1
.c466	28		nopage         plp
.c467	60		               rts
.c468			savezp1
.c468	08		               php
.c469	48		               pha
.c46a	a5 fb		               lda  zpage1
.c46c	8d f9 c4	               sta  zp1
.c46f	a5 fc		               lda  zpage1+1
.c471	8d fa c4	               sta  zp1+1
.c474	68		               pla
.c475	28		               plp
.c476	60		               rts
.c477			restzp1
.c477	08		               php
.c478	48		               pha
.c479	ad f9 c4	               lda zp1
.c47c	85 fb		               sta zpage1
.c47e	ad fa c4	               lda zp1+1
.c481	85 fc		               sta zpage1+1
.c483	68		               pla
.c484	28		               plp
.c485	60		               rts
.c486			savezp2
.c486	08		         php
.c487	48		         pha
.c488	a5 fd		         lda zpage2
.c48a	8d fb c4	         sta zp2
.c48d	a5 fe		         lda zpage2+1
.c48f	8d fc c4	         sta zp2+1
.c492	68		         pla
.c493	28		         plp
.c494	60		         rts
.c495			restzp2
.c495	08		                php
.c496	48		                pha
.c497	ad fb c4	                lda  zp2
.c49a	85 fd		                sta  zpage2
.c49c	ad fc c4	                lda  zp2+1
.c49f	85 fe		                sta  zpage2+1
.c4a1	68		                pla
.c4a2	28		                plp
.c4a3	60		                rts
.c4a4			xy2addr
.c4a4	08		                php
.c4a5	48		                pha
.c4a6	8a		                txa
.c4a7	48		                pha
.c4a8	98		                tya
.c4a9	48		                pha
.c4aa	ad f4 c4	                lda     addr1+1
.c4ad	8d f6 c4	                sta     addr2+1
.c4b0	ad f3 c4	                lda     addr1
.c4b3	8d f5 c4	                sta     addr2
.c4b6	c0 00		                cpy     #$00
.c4b8	f0 0f		                beq     addx
.c4ba	18		moreline        clc
.c4bb	6d f2 c4	                adc     ymult
.c4be	90 03		                bcc     norepy
.c4c0	ee f6 c4	                inc     addr2+1
.c4c3	8d f5 c4	norepy          sta     addr2
.c4c6	88		                dey
.c4c7	d0 f1		                bne     moreline
.c4c9	8a		addx            txa
.c4ca	18		                clc
.c4cb	6d f5 c4	                adc     addr2
.c4ce	90 03		                bcc     thatsit
.c4d0	ee f6 c4	                inc     addr2+1
.c4d3	8d f5 c4	thatsit         sta     addr2
.c4d6	68		                pla
.c4d7	a8		                tay
.c4d8	68		                pla
.c4d9	aa		                tax
.c4da	68		                pla
.c4db	28		                plp
.c4dc	60		                rts
.c4dd			loop
.c4dd	ce fd c4	               dec  loopcount
.c4e0	d0 03		               bne  norep
.c4e2	ce fe c4	               dec  loopcount+1
.c4e5	ad fd c4	norep          lda  loopcount
.c4e8	c9 00		               cmp  #$00
.c4ea	d0 05		               bne  out
.c4ec	4d fe c4	               eor  loopcount+1
.c4ef	c9 ff		               cmp  #$ff
.c4f1	60		out            rts
>c4f2	28		ymult          .byte     40
>c4f3	00 00		addr1          .word     $0000
>c4f5	00 00		addr2          .word     $0000
>c4f7	00 00		bytecnt        .word     $0000
>c4f9	00 00		zp1            .word   $0000
>c4fb	00 00		zp2            .word   $0000
>c4fd	00 00		loopcount      .word     $0000

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c4ff	01		a2hexcol       .byte     1              ; pour aputscxy
>c500	00		a2hexbkcol     .byte     %00000000
.c501			a2hexpos
>c501	00		a2hexpx        .byte     0              ; pour aputsxy
>c502	00		a2hexpy        .byte     0
>c503	24		a2hexprefix    .byte     "$"            ; pour aputs
>c504	00 00		a2hexstr       .word     $00
>c506	00 00		               .word     $00
>c508	00		               .byte     0              ; 0 end string
>c509	30 30 30 30	abin           .null     "00000000"
>c50d	30 30 30 30 00
>c512	20 20 20 00	adec           .null     "   "
.c516			putahexfmtxy
.c516	20 33 c3	               jsr  push
.c519	20 65 c5	               jsr  atohex
.c51c	ae 01 c5	               ldx  a2hexpx
.c51f	ac 02 c5	               ldy  a2hexpy
.c522	20 5c c2	               jsr  gotoxy
.c525	a2 03		               ldx  #<a2hexprefix
.c527	a0 c5		               ldy  #>a2hexprefix
.c529	20 42 c2	               jsr  puts
.c52c	20 72 c3	               jsr  pop
.c52f	60		               rts
.c530			putahexfmt
.c530	20 33 c3	               jsr  push
.c533	20 65 c5	               jsr  atohex
.c536	a2 03		               ldx  #<a2hexprefix
.c538	a0 c5		               ldy  #>a2hexprefix
.c53a	20 42 c2	               jsr  puts
.c53d	20 72 c3	               jsr  pop
.c540	60		               rts
.c541			putahex
.c541	20 33 c3	               jsr  push
.c544	20 65 c5	               jsr  atohex
.c547	a2 04		               ldx  #<a2hexstr
.c549	a0 c5		               ldy  #>a2hexstr
.c54b	20 42 c2	               jsr  puts
.c54e	20 72 c3	               jsr  pop
.c551	60		               rts
.c552			nibtohex
.c552	08		               php
.c553	29 0f		               and  #$0f
.c555	f8		               sed
.c556	18		               clc
.c557	69 90		               adc  #$90
.c559	69 40		               adc  #$40
.c55b	d8		               cld
.c55c	28		               plp
.c55d	60		               rts
.c55e			lsra4bits
.c55e	08		               php
.c55f	4a		               lsr
.c560	4a		               lsr
.c561	4a		               lsr
.c562	4a		               lsr
.c563	28		               plp
.c564	60		               rts
.c565			atohex
.c565	08		               php
.c566	48		               pha
.c567	48		               pha
.c568	20 5e c5	               jsr  lsra4bits
.c56b	20 52 c5	               jsr  nibtohex
.c56e	8d 04 c5	               sta  a2hexstr
.c571	68		               pla
.c572	20 52 c5	               jsr  nibtohex
.c575	8d 05 c5	               sta  a2hexstr+1
.c578	a9 00		               lda  #$00                ; set end of string
.c57a	8d 06 c5	               sta  a2hexstr+2
.c57d	68		               pla
.c57e	28		               plp
.c57f	60		               rts
.c580			xy2hex
.c580	20 33 c3	               jsr  push
.c583	20 65 c5	               jsr  atohex
.c586	8a		               txa
.c587	48		               pha
.c588	20 5e c5	               jsr  lsra4bits
.c58b	20 52 c5	               jsr  nibtohex
.c58e	8d 04 c5	               sta  a2hexstr
.c591	68		               pla
.c592	20 52 c5	               jsr  nibtohex
.c595	8d 05 c5	               sta  a2hexstr+1
.c598	98		               tya
.c599	48		               pha
.c59a	20 5e c5	               jsr  lsra4bits
.c59d	20 52 c5	               jsr  nibtohex
.c5a0	8d 06 c5	               sta  a2hexstr+2
.c5a3	68		               pla
.c5a4	20 52 c5	               jsr  nibtohex
.c5a7	8d 07 c5	               sta  a2hexstr+3
.c5aa	a9 00		               lda  #$00                ; 0 ended string
.c5ac	8d 08 c5	               sta  a2hexstr+4
.c5af	20 72 c3	               jsr  pop
.c5b2			atobin
.c5b2	20 33 c3	               jsr  push
.c5b5	a2 08		               ldx  #8
.c5b7	a0 00		               ldy  #0
.c5b9	18		               clc
.c5ba	2a		nextbit        rol
.c5bb	48		               pha
.c5bc	69 00		               adc  #$00
.c5be	29 01		               and  #$01
.c5c0	20 52 c5	               jsr  nibtohex
.c5c3	99 09 c5	               sta  abin,y
.c5c6	68		               pla
.c5c7	c8		               iny
.c5c8	ca		               dex
.c5c9	d0 ef		               bne  nextbit
.c5cb	a9 00		               lda  #0
.c5cd	99 09 c5	               sta  abin,y
.c5d0	20 72 c3	               jsr  pull
.c5d3	60		               rts
.c5d4			putabin
.c5d4	20 b2 c5	               jsr     atobin
.c5d7	20 33 c3	               jsr     push
.c5da	a2 09		               ldx     #<abin
.c5dc	a0 c5		               ldy     #>abin
.c5de	20 42 c2	               jsr     puts
.c5e1	20 72 c3	               jsr     pop
.c5e4	60		               rts
.c5e5			printabin
.c5e5	20 33 c3	               jsr     push
.c5e8	a2 09		               ldx     #<abin
.c5ea	a0 c5		               ldy     #>abin
.c5ec	20 42 c2	               jsr     puts
.c5ef	20 72 c3	               jsr     pop
.c5f2	60		               rts
.c5f3			putabinfmt
.c5f3	08		               php
.c5f4	48		               pha
.c5f5	a9 25		               lda     #"%"
.c5f7	20 3c c2	               jsr     putch
.c5fa	68		               pla
.c5fb	20 d4 c5	               jsr     putabin
.c5fe	28		               plp
.c5ff	60		               rts
.c600			putabinxy
.c600	20 5c c2	               jsr     gotoxy
.c603	20 d4 c5	               jsr     putabin
.c606	60		               rts
.c607			putabinfmtxy
.c607	20 5c c2	               jsr     gotoxy
.c60a	20 f3 c5	               jsr     putabinfmt
.c60d	60		               rts
.c60e			atodec
.c60e	20 33 c3	               jsr  push
.c611	f8		               sed            ; On se place en mode décimal.
.c612	aa		               tax            ; On déplace a dans x.
.c613	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.c615	a9 00		               lda  #$00      ; 0 dans A.
.c617	18		nextbit        clc            ; Bit carry a 0.
.c618	69 01		               adc  #$01      ; Ajoute 1 a A.
.c61a	90 01		               bcc  decx      ; Pas de carry, pas de report.
.c61c	c8		               iny            ; On incrémente Y
.c61d	ca		decx           dex            ; X=X-1
.c61e	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.c620	48		               pha            ; A sur le stack.
.c621	98		               tya            ; Y dans A (MSB)
.c622	20 52 c5	               jsr  nibtohex  ; a hex petsci ...
.c625	8d 12 c5	               sta  adec      ; ... dans tampon.
.c628	68		               pla            ; Récupere A
.c629	48		               pha            ;
.c62a	20 52 c5	               jsr  nibtohex
.c62d	8d 14 c5	               sta  adec+2
.c630	68		               pla
.c631	6a		               ror
.c632	6a		               ror
.c633	6a		               ror
.c634	6a		               ror
.c635	20 52 c5	               jsr  nibtohex
.c638	8d 13 c5	               sta  adec+1
.c63b	d8		               cld            ; On revient en mode binaire.
.c63c	20 72 c3	               jsr  pull
.c63f	60		               rts
.c640			putadec
.c640	20 33 c3	               jsr  push
.c643	20 0e c6	               jsr  atodec
.c646	a2 12		               ldx  #<adec
.c648	a0 c5		               ldy  #>adec+1
.c64a	20 42 c2	               jsr  puts
.c64d	20 72 c3	               jsr  pop
.c650	60		               rts

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>c651	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>c655	00 00 00 00 00 00 00 00 00 0d 00 00
>c661	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>c665	00 00 00 00 00 00 00 00 00 00 00 00
>c671	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>c675	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>c681	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>c685	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>c691	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>c695	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>c6a1	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>c6a5	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>c6b1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>c6b5	00 00 00 00 00 00 00 00 00 00 00 00
>c6c1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>c6c5	00 00 00 00 00 00 00 00 00 00 00 00
>c6d1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>c6d5	00 00 00 00 00 00 00 00 00 00 00 00
>c6e1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>c6e5	00 00 00 00 00 00 00 00 00 00 00 00
>c6f1	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>c6f5	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>c701	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>c705	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>c711	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>c715	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>c721	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>c725	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>c731	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>c735	00 00 00 00 00 00 00 00 00 00 00 00
>c741	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>c745	00 00 00 00 00 00 00 00 00 00 00 00
.c751			waitstop
.c751	20 33 c3	               jsr  push
.c754	20 ed f6	wait           jsr  k_stop
.c757	d0 fb		               bne  wait
.c759	20 72 c3	               jsr  pop
.c75c	60		               rts
.c75d			anykey
.c75d	08		               php
.c75e	48		               pha
.c75f	a5 cb		nokey          lda 203
.c761	c9 40		               cmp #64
.c763	f0 fa		               beq nokey
.c765	20 6b c7	               jsr releasekey
.c768	68		               pla
.c769	28		               plp
.c76a	60		               rts
.c76b			releasekey
.c76b	08		               php
.c76c	48		               pha
.c76d	a5 cb		keypressed     lda 203
.c76f	c9 40		               cmp #64
.c771	d0 fa		               bne keypressed
.c773	68		               pla
.c774	28		               plp
.c775	60		               rts
.c776			getkey
.c776	20 e4 ff	again          jsr  getin
.c779	c9 00		               cmp  #0
.c77b	f0 f9		               beq  again
.c77d	60		               rts
.c77e			kbflushbuff
.c77e	08		               php
.c77f	48		               pha
.c780	20 e4 ff	again          jsr  getin
.c783	c9 00		               cmp  #0
.c785	d0 f9		               bne  again
.c787	68		               pla
.c788	28		               plp
.c789	60		               rts
.c78a			waitkey
.c78a	20 33 c3	               jsr  push
.c78d	8d db c7	               sta  thekey
.c790	20 e4 ff	nope           jsr  getin
.c793	20 d2 ff	               jsr  chrout
.c796	cd db c7	               cmp  thekey
.c799	d0 f5		               bne  nope
.c79b	20 d2 ff	               jsr  chrout
.c79e	20 72 c3	               jsr  pop
.c7a1	60		               rts
.c7a2			waitspace
.c7a2	20 33 c3	               jsr  push
.c7a5	a9 7f		wait           lda  #$7f  ;%01111111
.c7a7	8d 00 dc	               sta  $dc00
.c7aa	ad 01 dc	               lda  $dc01
.c7ad	29 10		               and  #$10  ;mask %00010000
.c7af	d0 f4		               bne  wait
.c7b1	20 72 c3	               jsr  pop
.c7b4			waitsstop
.c7b4	20 33 c3	               jsr  push
.c7b7	20 ed f6	wait           jsr  k_stop  ;%01111111
.c7ba	d0 fb		               bne  wait
.c7bc	20 72 c3	               jsr  pop
.c7bf			waitreturn
.c7bf	20 33 c3	               jsr  push
.c7c2	ad dc c7	               lda  thecount
.c7c5	8d 00 04	               sta  scrnram
.c7c8	a9 02		               lda  #$02
.c7ca	8d 00 d8	               sta  colorram
.c7cd	20 e4 ff	nope           jsr  getin
.c7d0	c9 0d		nohex          cmp  #$0d
.c7d2	d0 f9		               bne  nope
.c7d4	ee dc c7	               inc  thecount
.c7d7	20 72 c3	               jsr  pop
.c7da	60		               rts
>c7db	00		thekey         .byte   0
>c7dc	01		thecount       .byte   $01

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.c7dd			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.c7dd	20 33 c3	                jsr push
.c7e0	08		                php
.c7e1	8d a1 c9	                sta  rega
.c7e4	68		                pla
.c7e5	8d a4 c9	                sta  regp
.c7e8	8e a2 c9	                stx  regx
.c7eb	8c a3 c9	                sty  regy
.c7ee	ba		                tsx
.c7ef	8e a5 c9	                stx  regs
.c7f2	68		                pla
.c7f3	8d a8 c9	                sta  regpcl
.c7f6	8d a9 c9	                sta  regpcl2
.c7f9	68		                pla
.c7fa	8d a6 c9	                sta  regpch
.c7fd	8d a7 c9	                sta  regpch2
.c800	ad a1 c9	                lda  rega
.c803	48		                pha
.c804	20 52 c5	                jsr  nibtohex
.c807	8d 4b c9	                sta  vala+1
.c80a	68		                pla
.c80b	20 5e c5	                jsr  lsra4bits
.c80e	20 52 c5	                jsr  nibtohex
.c811	8d 4a c9	                sta  vala
.c814	ad a3 c9	                lda  regy
.c817	48		                pha
.c818	20 52 c5	                jsr  nibtohex
.c81b	8d 5f c9	                sta  valy+1
.c81e	68		                pla
.c81f	20 5e c5	                jsr  lsra4bits
.c822	20 52 c5	                jsr  nibtohex
.c825	8d 5e c9	                sta  valy
.c828	ad a2 c9	                lda  regx
.c82b	48		                pha
.c82c	20 52 c5	                jsr  nibtohex
.c82f	8d 55 c9	                sta  valx+1
.c832	68		                pla
.c833	20 5e c5	                jsr  lsra4bits
.c836	20 52 c5	                jsr  nibtohex
.c839	8d 54 c9	                sta  valx
.c83c	ad a4 c9	                lda  regp
.c83f	48		                pha
.c840	20 52 c5	                jsr  nibtohex
.c843	8d 69 c9	                sta  valp+1
.c846	68		                pla
.c847	20 5e c5	                jsr  lsra4bits
.c84a	20 52 c5	                jsr  nibtohex
.c84d	8d 68 c9	                sta  valp
.c850	ad a5 c9	                lda  regs
.c853	48		                pha
.c854	20 52 c5	                jsr  nibtohex
.c857	8d 73 c9	                sta  vals+1
.c85a	68		                pla
.c85b	20 5e c5	                jsr  lsra4bits
.c85e	20 52 c5	                jsr  nibtohex
.c861	8d 72 c9	                sta  vals
.c864	18		                clc
.c865	ad a9 c9	                lda regpcl2
.c868	69 01		                adc #$01
.c86a	8d a9 c9	                sta regpcl2
.c86d	ad a9 c9	                lda regpcl2
.c870	d0 03		                bne noreport
.c872	ee a7 c9	                inc regpch2
.c875	ad a7 c9	    noreport    lda regpch2
.c878	48		                pha
.c879	20 52 c5	                jsr  nibtohex
.c87c	8d 7e c9	                sta  valpch+1
.c87f	68		                pla
.c880	20 5e c5	                jsr  lsra4bits
.c883	20 52 c5	                jsr  nibtohex
.c886	8d 7d c9	                sta  valpch
.c889	ad a9 c9	                lda  regpcl2
.c88c	48		                pha
.c88d	20 52 c5	                jsr  nibtohex
.c890	8d 80 c9	                sta  valpcl+1
.c893	68		                pla
.c894	20 5e c5	                jsr  lsra4bits
.c897	20 52 c5	                jsr  nibtohex
.c89a	8d 7f c9	                sta  valpcl
.c89d	a5 fb		                lda  zpage1
.c89f	48		                pha
.c8a0	20 52 c5	                jsr  nibtohex
.c8a3	8d 8e c9	                sta  valz1l
.c8a6	68		                pla
.c8a7	20 5e c5	                jsr  lsra4bits
.c8aa	20 52 c5	                jsr  nibtohex
.c8ad	8d 8f c9	                sta  valz1l+1
.c8b0	a5 fc		                lda  zpage1+1
.c8b2	48		                pha
.c8b3	20 52 c5	                jsr  nibtohex
.c8b6	8d 8c c9	                sta  valz1h
.c8b9	68		                pla
.c8ba	20 5e c5	                jsr  lsra4bits
.c8bd	20 52 c5	                jsr  nibtohex
.c8c0	8d 8d c9	                sta  valz1h+1
.c8c3	a5 fd		                lda  zpage2
.c8c5	48		                pha
.c8c6	20 52 c5	                jsr  nibtohex
.c8c9	8d 9d c9	                sta  valz2l
.c8cc	68		                pla
.c8cd	20 5e c5	                jsr  lsra4bits
.c8d0	20 52 c5	                jsr  nibtohex
.c8d3	8d 9e c9	                sta  valz2l+1
.c8d6	a5 fe		                lda  zpage2+1
.c8d8	48		                pha
.c8d9	20 52 c5	                jsr  nibtohex
.c8dc	8d 9b c9	                sta  valz2h
.c8df	68		                pla
.c8e0	20 5e c5	                jsr  lsra4bits
.c8e3	20 52 c5	                jsr  nibtohex
.c8e6	8d 9c c9	                sta  valz2h+1
.c8e9	20 23 c3	                jsr  setinverse
.c8ec	78		                sei
.c8ed	a2 43		                ldx  #<srega
.c8ef	a0 c9		                ldy  #>srega+1
.c8f1	20 cb c2	                jsr  putscxy
.c8f4	a2 4d		                ldx  #<sregx
.c8f6	a0 c9		                ldy  #>sregx+1
.c8f8	20 cb c2	                jsr  putscxy
.c8fb	a2 57		                ldx  #<sregy
.c8fd	a0 c9		                ldy  #>sregy+1
.c8ff	20 cb c2	                jsr  putscxy
.c902	a2 61		                ldx  #<sregp
.c904	a0 c9		                ldy  #>sregp+1
.c906	20 cb c2	                jsr  putscxy
.c909	a2 6b		                ldx  #<sregs
.c90b	a0 c9		                ldy  #>sregs+1
.c90d	20 cb c2	                jsr  putscxy
.c910	a2 75		                ldx  #<sregpc
.c912	a0 c9		                ldy  #>sregpc+1
.c914	20 cb c2	                jsr  putscxy
.c917	a2 83		                ldx  #<sregz1
.c919	a0 c9		                ldy  #>sregz1+1
.c91b	20 cb c2	                jsr  putscxy
.c91e	a2 92		                ldx  #<sregz2
.c920	a0 c9		                ldy  #>sregz2+1
.c922	20 cb c2	                jsr  putscxy
.c925	58		                cli
.c926	20 2b c3	                jsr  clrinverse
.c929	ad a6 c9	                lda  regpch
.c92c	48		                pha
.c92d	ad a8 c9	                lda  regpcl
.c930	48		                pha
.c931	ac a3 c9	                ldy  regy
.c934	ae a2 c9	                ldx  regx
.c937	ad a4 c9	                lda  regp
.c93a	48		                pha
.c93b	ad a1 c9	                lda  rega
.c93e	28		                plp
.c93f	20 72 c3	                jsr pop
.c942	60		                rts
>c943	01 00 17	srega   .byte   colr,coln,line
>c946	20 41 3a 24	        .text   ' a:$' ;4,24
>c94a	00 00 00	vala    .byte   0,0,0
>c94d	01 06 17	sregx   .byte   colr,coln+6,line
>c950	20 58 3a 24	        .text   ' x:$' ;4,24
>c954	00 00 00	valx    .byte   0,0,0
>c957	01 0c 17	sregy   .byte   colr,coln+12,line
>c95a	20 59 3a 24	        .text   ' y:$' ;4,24
>c95e	00 00 00	valy    .byte   0,0,0
>c961	01 12 17	sregp   .byte   colr,coln+18,line
>c964	20 50 3a 24	        .text   ' p:$' ;4,24
>c968	00 00 00	valp    .byte   0,0,0
>c96b	01 18 17	sregs   .byte   colr,coln+24,line
>c96e	20 53 3a 24	        .text   ' s:$' ;4,24
>c972	00 00 00	vals    .byte   0,0,0
>c975	01 1e 17	sregpc  .byte   colr,coln+30,line
>c978	20 50 43 3a	        .text   ' pc:$' ;4,24
>c97c	24
>c97d	00 00		valpch  .byte   0,0
>c97f	00 00 20 00	valpcl  .byte   0,0,32,0
>c983	01 03 18	sregz1  .byte   colr,coln+3,line+1
>c986	20 5a 50 31	        .text   ' zp1:$' ;4,24
>c98a	3a 24
>c98c	00 00		valz1h  .byte   0,0
>c98e	00 00 20 00	valz1l  .byte   0,0,32,0
>c992	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>c995	20 5a 50 32	        .text   ' zp2:$' ;4,24
>c999	3a 24
>c99b	00 00		valz2h  .byte   0,0
>c99d	00 00 20 00	valz2l  .byte   0,0,32,0
>c9a1	00		rega    .byte   0
>c9a2	00		regx    .byte   0
>c9a3	00		regy    .byte   0
>c9a4	00		regp    .byte   0
>c9a5	00		regs    .byte   0
>c9a6	00		regpch  .byte   0
>c9a7	00		regpch2 .byte   0
>c9a8	00		regpcl  .byte   0
>c9a9	00		regpcl2 .byte   0
>c9aa	00		vzp1h   .byte   0
>c9ab	00		vzp1l   .byte   0
>c9ac	00		vzp2h   .byte   0
>c9ad	00		vzp2l   .byte   0

;******  Return to file: libtest02.asm


;******  End of listing

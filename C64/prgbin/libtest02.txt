
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L libtest02.txt -o libtest02.prg libtest02.asm
; Tue Apr 15 17:48:11 2025

;Offset	;Hex		;Source

;******  Processing input file: libtest02.asm

="20250414-224259"	                Version = "20250414-224259"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 00 c0	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: libtest02.asm


;******  Processing file: strings_fr.asm

.0854			headera
>0854	13 1d 1d 1d	               .byte     b_home,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right
>0858	1d
>0859	20 c3 4f 4d	               .text              " Commodore 64 test de libraries "
>085d	4d 4f 44 4f 52 45 20 36 34 20 54 45 53 54 20 44
>086d	45 20 4c 49 42 52 41 52 49 45 53 20
>0879	0d 00		               .byte     $0d,0
>087b	20 20 20 20	headerb        .text          "               libtest02 "
>087f	20 20 20 20 20 20 20 20 20 20 20 4c 49 42 54 45
>088f	53 54 30 32 20
>0894	0d		               .byte     $0d
>0895	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0899	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>08a9	45 4c 20 cc 41 46 52 41 4e 43 45
>08b4	0d		               .byte     $0d
>08b5	20 20 20 20	               .text   format("       Version: %s",Version)
>08b9	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>08c9	30 34 31 34 2d 32 32 34 32 35 39
>08d4	0d 00		               .byte     $0d,0
>08d6	0d		shortcuts      .byte     $0d
>08d7	91 91		               .byte     ucurkey,ucurkey
>08d9	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>08dd	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>08e1	1d
>08e2	20 d2 20 c1	               .text          " R A C C O U R C I S "
>08e6	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>08f6	20
>08f7	0d		               .byte     $0d
>08f8	20 4c 49 42	               .text   format(" libtest02: SYS%05d (jsr $%04X)",main, main)
>08fc	54 45 53 54 30 32 3a 20 d3 d9 d3 34 39 31 35 32
>090c	20 28 4a 53 52 20 24 c3 30 30 30 29
>0918	0d		               .byte     $0d
>0919	20 41 49 44	               .text   format(" aide.....: SYS%05d (jsr $%04X)",aide, aide)
>091d	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34 39 32 35 39
>092d	20 28 4a 53 52 20 24 c3 30 36 c2 29
>0939	0d		               .byte     $0d
>093a	20 43 4c 53	               .text   format(" cls......: SYS%05d (jsr $%04X)",cls, cls)
>093e	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34 39 37 33 34
>094e	20 28 4a 53 52 20 24 c3 32 34 36 29
>095a	0d 00		               .byte     $0d,0
>095c	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d (jsr $%04X)",libtest02, libtest02)
>0960	43 45 4d 45 4e 54 3a 20 d3 d9 d3 34 39 33 39 33
>0970	20 28 4a 53 52 20 24 c3 30 c6 31 29
>097c	0d 0d		               .byte     $0d, $0d
>097e	20 20 20 20	                .text   format("    ex.: SYS%05d",libtest02)
>0982	45 58 2e 3a 20 d3 d9 d3 34 39 33 39 33
>098f	0d		                .byte     $0d
>0990	20 20 20 20	                .text   format("    for i=0to100:SYS%05d:next",libtest02)
>0994	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>09a4	34 39 33 39 33 3a 4e 45 58 54
>09ae	0d 00		                .byte     $0d,0
>09b0	20 c0 c0 c0	line            .byte     $20,192,192,192,192,192,192,192,192,192
>09b4	c0 c0 c0 c0 c0 c0
>09ba	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09be	c0 c0 c0 c0 c0 c0
>09c4	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09c8	c0 c0 c0 c0 c0 c0
>09ce	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192
>09d2	c0 c0 c0 c0 c0
>09d7	0d 00		                .byte     $0d,0
>09d9	01 00 00 00	dataloc         .byte       1,0,0,0

;******  Return to file: libtest02.asm

.c000			main
.c000	20 26 c2	               jsr scrmaninit
.c003	08		               php
.c004	48		               pha
.c005	a9 8e		               lda  #b_uppercase
.c007	8d 45 c2	               sta  characterset
.c00a	20 d2 ff	               jsr  $ffd2
.c00d	68		               pla
.c00e	28		               plp
.c00f	08		               php
.c010	48		               pha
.c011	a9 8e		               lda  #b_uppercase
.c013	20 d2 ff	               jsr  $ffd2
.c016	68		               pla
.c017	28		               plp
.c018	08		               php
.c019	48		               pha
.c01a	a9 08		               lda  #$08
.c01c	20 d2 ff	               jsr  $ffd2
.c01f	68		               pla
.c020	28		               plp
.c021	20 6b c0	               jsr aide
.c024	20 54 c3	               jsr  push
.c027	48		               pha
.c028	a9 05		               lda  #cvert
.c02a	8d 20 d0	               sta  $d020
.c02d	68		               pla
.c02e	48		               pha
.c02f	a9 06		               lda  #cbleu
.c031	8d 21 d0	               sta  $d021
.c034	68		               pla
.c035	48		               pha
.c036	a9 01		               lda  #cblanc
.c038	8d 86 02	               sta  bascol
.c03b	68		               pla
.c03c	20 93 c3	               jsr  pull
.c03f	20 f1 c0	               jsr libtest02
.c042	08		               php
.c043	48		               pha
.c044	a9 09		               lda  #$09
.c046	20 d2 ff	               jsr  $ffd2
.c049	68		               pla
.c04a	28		               plp
.c04b	08		               php
.c04c	48		               pha
.c04d	a9 8e		               lda  #b_uppercase
.c04f	8d 45 c2	               sta  characterset
.c052	20 d2 ff	               jsr  $ffd2
.c055	68		               pla
.c056	28		               plp
.c057	20 54 c3	               jsr  push
.c05a	a2 00		               ldx  #0
.c05c	a0 00		               ldy  #0
.c05e	20 7d c2	               jsr  gotoxy
.c061	20 93 c3	               jsr  pop
.c064	20 7e c7	               jsr  anykey
.c067	4c 66 fe	               jmp  k_warmstart
.c06a	60		               rts
.c06b			aide
.c06b	20 54 c3	               jsr  push
.c06e	08		               php
.c06f	48		               pha
.c070	a9 0e		               lda  #14
.c072	8d 45 c2	               sta  characterset
.c075	20 d2 ff	               jsr  $ffd2
.c078	68		               pla
.c079	28		               plp
.c07a	20 46 c2	               jsr  cls
.c07d	20 54 c3	               jsr  push
.c080	a2 b0		               ldx  #<line
.c082	a0 09		               ldy  #>line
.c084	20 63 c2	               jsr  puts
.c087	20 93 c3	               jsr  pull
.c08a	20 54 c3	               jsr  push
.c08d	a2 54		               ldx  #<headera
.c08f	a0 08		               ldy  #>headera
.c091	20 63 c2	               jsr  puts
.c094	20 93 c3	               jsr  pull
.c097	20 54 c3	               jsr  push
.c09a	a2 7b		               ldx  #<headerb
.c09c	a0 08		               ldy  #>headerb
.c09e	20 63 c2	               jsr  puts
.c0a1	20 93 c3	               jsr  pull
.c0a4	20 54 c3	               jsr  push
.c0a7	a2 b0		               ldx  #<line
.c0a9	a0 09		               ldy  #>line
.c0ab	20 63 c2	               jsr  puts
.c0ae	20 93 c3	               jsr  pull
.c0b1	a9 0d		               lda  #$0d
.c0b3	20 5d c2	               jsr  putch
.c0b6	20 54 c3	               jsr  push
.c0b9	a2 b0		               ldx  #<line
.c0bb	a0 09		               ldy  #>line
.c0bd	20 63 c2	               jsr  puts
.c0c0	20 93 c3	               jsr  pull
.c0c3	20 54 c3	               jsr  push
.c0c6	a2 d6		               ldx  #<shortcuts
.c0c8	a0 08		               ldy  #>shortcuts
.c0ca	20 63 c2	               jsr  puts
.c0cd	20 93 c3	               jsr  pull
.c0d0	20 54 c3	               jsr  push
.c0d3	a2 5c		               ldx  #<aidetext
.c0d5	a0 09		               ldy  #>aidetext
.c0d7	20 63 c2	               jsr  puts
.c0da	20 93 c3	               jsr  pull
.c0dd	20 54 c3	               jsr  push
.c0e0	a2 b0		               ldx  #<line
.c0e2	a0 09		               ldy  #>line
.c0e4	20 63 c2	               jsr  puts
.c0e7	20 93 c3	               jsr  pull
.c0ea	20 7e c7	               jsr  anykey
.c0ed	20 93 c3	               jsr  pop
.c0f0	60		               rts
.c0f1			libtest02
.c0f1	08		               php
.c0f2	48		               pha
.c0f3	20 46 c2	               jsr  cls
.c0f6	a9 a6		               lda  #166
.c0f8	20 54 c3	               jsr  push
.c0fb	a2 d9		               ldx  #<dataloc
.c0fd	a0 09		               ldy  #>dataloc
.c0ff	20 ec c2	               jsr  putscxy
.c102	20 93 c3	               jsr  pull
.c105	48		               pha
.c106	a9 03		               lda  #ccyan
.c108	8d 86 02	               sta  bascol
.c10b	68		               pla
.c10c	20 fe c7	               jsr  showregs
.c10f	20 7e c7	               jsr  anykey
.c112	20 6c c1	               jsr  victohighres
.c115	20 7e c7	               jsr  anykey
.c118	20 a9 c1	               jsr  vicbmpclear
.c11b	a0 0f		               ldy  #$0f
.c11d	98		nextc          tya
.c11e	20 d7 c1	               jsr  setvicbmpbkcol
.c121	88		               dey
.c122	c0 00		               cpy  #$00
.c124	10 f7		               bpl  nextc
.c126	20 7e c7	               jsr  anykey
.c129	20 89 c1	               jsr  victonormal
.c12c	48		               pha
.c12d	a9 98		               lda  #<$0000+(40*23)
.c12f	8d 1e c5	               sta  loopcount
.c132	a9 03		               lda  #>$0000+(40*23)
.c134	8d 1f c5	               sta  loopcount+1
.c137	68		               pla
.c138	ad 49 c1	roll           lda  car
.c13b	20 5d c2	               jsr  putch
.c13e	20 fe c4	               jsr  loop
.c141	d0 f5		               bne  roll
.c143	20 fe c7	               jsr  showregs
.c146	68		out            pla
.c147	28		               plp
.c148	60		               rts
>c149	20		car            .byte     32

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>c14a	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>c14e	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.c152			libtart

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.c152			screendis
.c152	08		               php
.c153	48		               pha
.c154	ad 11 d0	               lda  $d011
.c157	29 ef		               and  #%11101111
.c159	8d 11 d0	               sta  $d011
.c15c	68		               pla
.c15d	28		               plp
.c15e	60		               rts
.c15f			screenena
.c15f	08		               php
.c160	48		               pha
.c161	ad 11 d0	               lda  $d011
.c164	09 10		               ora  #%00010000
.c166	8d 11 d0	               sta  $d011
.c169	68		               pla
.c16a	28		               plp
.c16b	60		               rts
=8192			bmpram = 8192
.c16c			victohighres
.c16c	08		               php
.c16d	48		               pha
.c16e	ad 11 d0	               lda  vicmiscfnc
.c171	09 20		               ora  #%00100000     ; 32
.c173	8d 11 d0	               sta  vicmiscfnc
.c176	ad 18 d0	               lda  vicmemptr
.c179	09 08		               ora  #%00001000     ; $08
.c17b	8d 18 d0	               sta  vicmemptr
.c17e	a9 ff		               lda  #$ff           ; 255
.c180	85 37		               sta  $0037
.c182	a9 1f		               lda  #$1f           ; 31
.c184	85 38		               sta  $0038
.c186	68		               pla
.c187	28		               plp
.c188	60		               rts
.c189			victonormal
.c189	08		               php
.c18a	48		               pha
.c18b	ad 11 d0	               lda  vicmiscfnc
.c18e	29 df		               and  #%11011111     ; 233
.c190	8d 11 d0	               sta  vicmiscfnc
.c193	ad 18 d0	               lda  vicmemptr
.c196	29 f7		               and  #%11110111     ; $08
.c198	8d 18 d0	               sta  vicmemptr
.c19b	a9 00		               lda  #$00
.c19d	85 37		               sta  $0037
.c19f	a9 a0		               lda  #$a0
.c1a1	85 38		               sta  $0038
.c1a3	20 46 c2	               jsr  cls
.c1a6	68		               pla
.c1a7	28		               plp
.c1a8	60		               rts
.c1a9			vicbmpclear
.c1a9	20 54 c3	               jsr  push
.c1ac	a9 04		               lda  #cmauve
.c1ae	20 d7 c1	               jsr  setvicbmpbkcol
.c1b1	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.c1b3	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.c1b5	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.c1b7	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.c1b9	48		               pha
.c1ba	a9 ff		               lda  #<$0000+(8191)
.c1bc	8d 1e c5	               sta  loopcount
.c1bf	a9 1f		               lda  #>$0000+(8191)
.c1c1	8d 1f c5	               sta  loopcount+1
.c1c4	68		               pla
.c1c5	a0 00		               ldy  #$00
.c1c7	a9 00		next           lda  #$00
.c1c9	91 fb		               sta  (zpage1),y
.c1cb	20 5b c4	               jsr  inczpage1
.c1ce	20 fe c4	               jsr  loop
.c1d1	d0 f4		               bne  next
.c1d3	20 93 c3	               jsr  pop
.c1d6	60		               rts
.c1d7			setvicbmpbkcol
.c1d7	20 54 c3	               jsr  push
.c1da	29 0f		               and  #$0f
.c1dc	8d 0a c2	               sta  vicbmpbkcol
.c1df	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.c1e1	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.c1e3	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.c1e5	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.c1e7	48		               pha
.c1e8	a9 00		               lda  #<$0000+(1024)
.c1ea	8d 1e c5	               sta  loopcount
.c1ed	a9 04		               lda  #>$0000+(1024)
.c1ef	8d 1f c5	               sta  loopcount+1
.c1f2	68		               pla
.c1f3	a0 00		               ldy  #$00
.c1f5	b1 fb		next           lda  (zpage1),y
.c1f7	29 f0		               and  #$f0
.c1f9	0d 0a c2	               ora  vicbmpbkcol
.c1fc	91 fb		               sta  (zpage1),y
.c1fe	20 5b c4	               jsr  inczpage1
.c201	20 fe c4	               jsr  loop
.c204	d0 ef		               bne  next
.c206	20 93 c3	               jsr  pop
.c209	60		               rts
>c20a	00		vicbmpbkcol    .byte     $00
.c20b			bmphrcalccoords
.c20b	20 54 c3	               jsr  push
.c20e	18		               clc       ; On met Carry à 0
.c20f	6a		               ror       ; le bit 0 de a dans carry  ?/2
.c210	8a		               txa       ; x dans a
.c211	4a		               lsr       ; ?/4
.c212	4a		               lsr       ; ?/8 a = (ax)/8
.c213	8d 24 c2	               sta  bmphrcol
.c216	98		               tya       ; Y dans a
.c217	4a		               lsr       ; ?/2
.c218	4a		               lsr       ; ?/4
.c219	4a		               lsr       ; ?/8 a=Y/8
.c21a	8d 23 c2	               sta  bmphrrow
.c21d	48		               pha
.c21e	98		               tya
.c21f	20 93 c3	               jsr  pop
.c222	60		               rts
>c223	00		bmphrrow       .byte     $00
>c224	00		bmphrcol       .byte     $00
>c225	00		bmphrmask      .byte     $00

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.c226			scrmaninit
.c226	20 54 c3	               jsr  push
.c229	a9 06		               lda  #vbleu
.c22b	8d 21 d0	               sta  vicbackcol
.c22e	a9 05		               lda  #vvert
.c230	8d 20 d0	               sta  vicbordcol
.c233	a9 01		               lda  #vblanc
.c235	8d 86 02	               sta  bascol
.c238	ad 00 04	               lda  scrnram
.c23b	8d 00 04	               sta  scrnram
.c23e	20 46 c2	               jsr  cls
.c241	20 93 c3	               jsr  pop
.c244	60		               rts
>c245	8e		characterset   .byte b_uppercase
.c246			cls
.c246	08		               php
.c247	48		               pha
.c248	a9 93		               lda  #$93
.c24a	20 5d c2	               jsr  putch
.c24d	68		               pla
.c24e	28		               plp
.c24f	60		               rts
.c250			putnch
.c250	08		               php
.c251	e0 00		               cpx  #$00
.c253	f0 06		               beq  out
.c255	20 d2 ff	again          jsr  $ffd2
.c258	ca		               dex
.c259	d0 fa		               bne  again
.c25b	28		out            plp
.c25c	60		               rts
.c25d			putch
.c25d	08		               php
.c25e	20 d2 ff	               jsr  $ffd2
.c261	28		               plp
.c262	60		               rts
.c263			puts
.c263	20 54 c3	               jsr  push
.c266	86 fb		               stx  zpage1
.c268	84 fc		               sty  zpage1+1
.c26a	a0 00		               ldy  #0
.c26c	b1 fb		next           lda  (zpage1),y
.c26e	f0 09		               beq  exit
.c270	20 5d c2	               jsr  putch
.c273	20 5b c4	               jsr  inczp1
.c276	4c 6c c2	               jmp  next
.c279	20 93 c3	exit           jsr  pop
.c27c	60		               rts
.c27d			gotoxy
.c27d	08		               php
.c27e	18		               clc
.c27f	8a		               txa
.c280	48		               pha
.c281	98		               tya
.c282	aa		               tax
.c283	68		               pla
.c284	a8		               tay
.c285	20 f0 ff	               jsr  kplot
.c288	28		               plp
.c289	60		               rts
.c28a			cursor
=$0286			bascol    =    $0286
.c28a	08		               php            ;tourlou
.c28b	48		               pha
.c28c	90 12		               bcc  restore
.c28e	20 f0 ff	               jsr  kplot
.c291	8c b2 c2	               sty  cx
.c294	8e b3 c2	               stx  cy
.c297	ad 86 02	               lda  bascol
.c29a	8d b4 c2	               sta  bcol
.c29d	4c af c2	               jmp  out
.c2a0	ae b3 c2	restore        ldx  cy
.c2a3	ac b2 c2	               ldy  cx
.c2a6	20 f0 ff	               jsr  kplot
.c2a9	ad b4 c2	               lda  bcol
.c2ac	8d 86 02	               sta  bascol
.c2af	68		out            pla
.c2b0	28		               plp
.c2b1	60		               rts
>c2b2	00		cx   .byte     $00
>c2b3	00		cy   .byte     $00
>c2b4	00		bcol .byte     $00
.c2b5			cursave
.c2b5	08		               php
.c2b6	38		               sec
.c2b7	20 8a c2	               jsr  cursor
.c2ba	28		               plp
.c2bb	60		               rts
.c2bc			curput
.c2bc	08		               php
.c2bd	18		               clc
.c2be	20 8a c2	               jsr  cursor
.c2c1	28		               plp
.c2c2	60		               rts
.c2c3			putsxy
.c2c3	20 54 c3	               jsr  push
.c2c6	86 fb		               stx  zpage1
.c2c8	84 fc		               sty  zpage1+1
.c2ca	a0 00		               ldy  #$00
.c2cc	b1 fb		               lda  (zpage1),y
.c2ce	aa		               tax
.c2cf	20 5b c4	               jsr  inczp1
.c2d2	b1 fb		               lda  (zpage1),y
.c2d4	a8		               tay
.c2d5	20 7d c2	               jsr  gotoxy
.c2d8	20 5b c4	               jsr  inczp1
.c2db	a6 fb		               ldx  zpage1
.c2dd	a4 fc		               ldy  zpage1+1
.c2df	20 63 c2	               jsr  puts
.c2e2	20 93 c3	               jsr  pop
.c2e5	60		               rts
>c2e6	00 00		straddr   .word     $00
>c2e8	00		px        .byte     $00
>c2e9	00		py        .byte     $00
>c2ea	00 00		zp1       .word     $00
.c2ec			putscxy
.c2ec	20 54 c3	               jsr  push
.c2ef	84 fc		               sty  zpage1+1
.c2f1	86 fb		               stx  zpage1
.c2f3	ad 86 02	               lda  bascol
.c2f6	8d 16 c3	               sta  bc
.c2f9	a0 00		               ldy #$00
.c2fb	b1 fb		               lda  (zpage1),y
.c2fd	8d 86 02	               sta  bascol
.c300	20 5b c4	               jsr  inczp1
.c303	a6 fb		               ldx  zpage1
.c305	a4 fc		               ldy  zpage1+1
.c307	20 c3 c2	               jsr  putsxy
.c30a	ad 16 c3	               lda  bc
.c30d	8d 86 02	               sta  bascol
.c310	20 93 c3	               jsr  pop
.c313	60		               rts
>c314	00 00		straddr  .word      $00
>c316	00		bc       .byte      $00
>c317	00 00		zp1      .word      $00
.c319			putrahex
.c319	08		               php
.c31a	48		               pha
.c31b	20 86 c5	               jsr  atohex
.c31e	a9 25		               lda  #<a2hexstr
.c320	a0 c5		               ldy  #>a2hexstr
.c322	20 63 c2	               jsr  puts
.c325	68		               pla
.c326	28		               plp
.c327	60		               rts
.c328			kputrahexxy
.c328			bputrahexxy
.c328			putrahexxy
.c328	08		               php
.c329	20 86 c5	               jsr  atohex
.c32c	a9 22		               lda  #<a2hexpos
.c32e	a0 c5		               ldy  #>a2hexpos
.c330	20 c3 c2	               jsr  putsxy
.c333	68		               pla
.c334	28		               plp
.c335	60		               rts
.c336			putrahexcxy
.c336	08		               php
.c337	20 86 c5	               jsr  atohex
.c33a	a9 22		               lda  #<a2hexpos
.c33c	a0 c5		               ldy  #>a2hexpos
.c33e	20 ec c2	               jsr  putscxy
.c341	68		               pla
.c342	28		               plp
.c343	60		               rts
.c344			setinverse
.c344	48		               pha
.c345	a9 12		               lda  #$12
.c347	20 d2 ff	               jsr  $ffd2
.c34a	68		               pla
.c34b	60		               rts
.c34c			clrinverse
.c34c	48		               pha
.c34d	a9 92		               lda  #$92
.c34f	20 d2 ff	               jsr  $ffd2
.c352	68		               pla
.c353	60		               rts

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.c354			push
.c354	08		          php            ; stack : flg, pcl, pch
.c355	78		          sei
.c356	8d 90 c3	          sta  ra        ; save a
.c359	68		          pla            ; stack : pcl, pch
.c35a	8d 8f c3	          sta  rp        ; save rp
.c35d	68		          pla            ; stack : pch
.c35e	8d 91 c3	          sta  pc        ; save pcl
.c361	68		          pla            ; stack : -
.c362	8d 92 c3	          sta  pc+1      ; save pch
.c365	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c367	48		          pha            ; stack : zp1l
.c368	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c36a	48		          pha            ; stack : zp1h, zp1l
.c36b	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c36d	48		          pha            ; stack : zp2l, zp1h, zp1l
.c36e	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c370	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c371	ad 8f c3	          lda  rp        ; get rp
.c374	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c375	ad 90 c3	          lda  ra        ; get a
.c378	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c379	8a		          txa            ; get x
.c37a	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c37b	98		          tya            ; get y
.c37c	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c37d	ad 92 c3	          lda  pc+1      ; get pch
.c380	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c381	ad 91 c3	          lda  pc        ; get pcl
.c384	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c385	ad 8f c3	          lda  rp        ; get rp
.c388	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c389	ad 90 c3	          lda  ra        ; get a
.c38c	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c38d	58		          cli
.c38e	60		          rts
>c38f	00		rp        .byte     0
>c390	00		ra        .byte     0
>c391	00 00		pc        .word     0
.c393			pull
.c393			pop
.c393	78		          sei
.c394	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c395	8d c8 c3	          sta  pc        ; save pcl
.c398	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c399	8d c9 c3	          sta  pc+1      ; save pch
.c39c	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c39d	a8		          tay            ; set y
.c39e	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c39f	aa		          tax            ; set x
.c3a0	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c3a1	8d c7 c3	          sta  ra        ; save a
.c3a4	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c3a5	8d c6 c3	          sta  rp        ; save rp
.c3a8	68		          pla            ; stack : zp2l, zp1h, zp1l
.c3a9	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c3ab	68		          pla            ; stack : zp1h, zp1l
.c3ac	85 fd		          sta  zpage2    ; get zpage2 High byte
.c3ae	68		          pla            ; stack : zp1l
.c3af	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c3b1	68		          pla            ; stack :
.c3b2	85 fb		          sta  zpage1    ; get zpage1 High byte
.c3b4	ad c9 c3	          lda  pc+1      ; get pch
.c3b7	48		          pha            ; stack : pch
.c3b8	ad c8 c3	          lda  pc
.c3bb	48		          pha            ; stack : pcl, pch
.c3bc	ad c6 c3	          lda  rp        ; get rp
.c3bf	48		          pha            ; stack : rp, pcl, pch
.c3c0	ad c7 c3	          lda  ra        ; set ra
.c3c3	58		          cli
.c3c4	28		          plp            ; stack : pcl, pch
.c3c5	60		          rts
>c3c6	00		rp        .byte     0
>c3c7	00		ra        .byte     0
>c3c8	00 00		pc        .word     0

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c3ca			blkfill
.c3ca	20 54 c3	bf0            jsr  push
.c3cd	20 89 c4	               jsr  savezp1
.c3d0	84 fc		               sty  zpage1+1
.c3d2	a0 00		               ldy  #$00
.c3d4	84 fb		               sty  zpage1
.c3d6	91 fb		bf1            sta  (zpage1),y
.c3d8	c8		               iny
.c3d9	d0 fb		               bne  bf1
.c3db	20 98 c4	               jsr  restzp1
.c3de	20 93 c3	               jsr  pop
.c3e1	60		               rts
.c3e2			memfill
.c3e2	20 54 c3	               jsr  push
.c3e5	20 ca c3	mf1            jsr  blkfill
.c3e8	c8		               iny
.c3e9	ca		               dex
.c3ea	d0 f9		               bne  mf1
.c3ec	20 93 c3	               jsr  pop
.c3ef	60		               rts
.c3f0			memmove
.c3f0	20 54 c3	               jsr  push
.c3f3	ba		               tsx            ; On se crée un pointeur ...
.c3f4	8a		               txa
.c3f5	18		               clc
.c3f6	69 0b		               adc  #11
.c3f8	a8		               tay
.c3f9	a2 06		               ldx  #$06
.c3fb	b9 00 01	nextbyte       lda  $0100,y
.c3fe	99 4a c4	               sta  words,y
.c401	c8		               iny
.c402	ca		               dex
.c403	d0 f6		               bne  nextbyte
.c405	ad 4a c4	               lda  s
.c408	8d 21 c4	               sta  source+1
.c40b	ad 4b c4	               lda  s+1
.c40e	8d 22 c4	               sta  source+2
.c411	ad 4c c4	               lda  d
.c414	8d 1e c4	               sta  destin+1
.c417	ad 4d c4	               lda  d+1
.c41a	8d 1f c4	               sta  destin+2
.c41d	ad ff ff	destin         lda  $ffff
.c420	8d ff ff	source         sta  $ffff
.c423	ee 1e c4	               inc  destin+1
.c426	d0 03		               bne  src
.c428	ee 1f c4	               inc  destin+2
.c42b	ee 21 c4	src            inc  source+1
.c42e	d0 03		               bne  cnt
.c430	ee 22 c4	               inc  source+2
.c433	ad 4e c4	cnt            lda  compte
.c436	d0 08		               bne  decit
.c438	ad 4f c4	               lda  compte+1
.c43b	f0 09		               beq  fini
.c43d	ce 4f c4	               dec  compte+1
.c440	ce 4e c4	decit          dec  compte
.c443	4c 1d c4	               jmp  destin
.c446	20 93 c3	fini           jsr  pop
.c449	60		               rts
.c44a			words
>c44a	00 00		s         .word     $0000
>c44c	00 00		d         .word     $0000
>c44e	00 00		compte    .word     $0000
.c450			decword
.c450	20 54 c3	               jsr  push
.c453	86 fd		               stx  zpage2
.c455	84 fe		               sty  zpage2+1
.c457	20 93 c3	               jsr  pop
.c45a	60		               rts
.c45b			inczpage1
.c45b			inczp1
.c45b	08		               php
.c45c	48		               pha
.c45d	e6 fb		               inc  zpage1
.c45f	a5 fb		               lda  zpage1
.c461	d0 02		               bne  nopage
.c463	e6 fc		               inc  zpage1+1
.c465	68		nopage         pla
.c466	28		               plp
.c467	60		               rts
.c468			deczpage1
.c468			deczp1
.c468	08		                php
.c469	48		                pha
.c46a	c6 fb		                dec  zpage1
.c46c	d0 02		                bne  nopage
.c46e	c6 fc		                dec  zpage1+1
.c470	68		nopage          pla
.c471	28		                plp
.c472	60		                rts
.c473			inczpage2
.c473			inczp2
.c473	08		               php
.c474	48		               pha
.c475	e6 fd		               inc  zpage2
.c477	a5 fd		               lda  zpage2
.c479	d0 02		               bne  nopage
.c47b	e6 fe		               inc  zpage2+1
.c47d	68		nopage         pla
.c47e	28		               plp
.c47f	60		               rts
.c480			deczpage2
.c480			deczp2
.c480	08		               php
.c481	c6 fd		               dec  zpage2
.c483	d0 02		               bne  nopage
.c485	c6 fe		               dec  zpage2+1
.c487	28		nopage         plp
.c488	60		               rts
.c489			savezp1
.c489	08		               php
.c48a	48		               pha
.c48b	a5 fb		               lda  zpage1
.c48d	8d 1a c5	               sta  zp1
.c490	a5 fc		               lda  zpage1+1
.c492	8d 1b c5	               sta  zp1+1
.c495	68		               pla
.c496	28		               plp
.c497	60		               rts
.c498			restzp1
.c498	08		               php
.c499	48		               pha
.c49a	ad 1a c5	               lda zp1
.c49d	85 fb		               sta zpage1
.c49f	ad 1b c5	               lda zp1+1
.c4a2	85 fc		               sta zpage1+1
.c4a4	68		               pla
.c4a5	28		               plp
.c4a6	60		               rts
.c4a7			savezp2
.c4a7	08		         php
.c4a8	48		         pha
.c4a9	a5 fd		         lda zpage2
.c4ab	8d 1c c5	         sta zp2
.c4ae	a5 fe		         lda zpage2+1
.c4b0	8d 1d c5	         sta zp2+1
.c4b3	68		         pla
.c4b4	28		         plp
.c4b5	60		         rts
.c4b6			restzp2
.c4b6	08		                php
.c4b7	48		                pha
.c4b8	ad 1c c5	                lda  zp2
.c4bb	85 fd		                sta  zpage2
.c4bd	ad 1d c5	                lda  zp2+1
.c4c0	85 fe		                sta  zpage2+1
.c4c2	68		                pla
.c4c3	28		                plp
.c4c4	60		                rts
.c4c5			xy2addr
.c4c5	08		                php
.c4c6	48		                pha
.c4c7	8a		                txa
.c4c8	48		                pha
.c4c9	98		                tya
.c4ca	48		                pha
.c4cb	ad 15 c5	                lda     addr1+1
.c4ce	8d 17 c5	                sta     addr2+1
.c4d1	ad 14 c5	                lda     addr1
.c4d4	8d 16 c5	                sta     addr2
.c4d7	c0 00		                cpy     #$00
.c4d9	f0 0f		                beq     addx
.c4db	18		moreline        clc
.c4dc	6d 13 c5	                adc     ymult
.c4df	90 03		                bcc     norepy
.c4e1	ee 17 c5	                inc     addr2+1
.c4e4	8d 16 c5	norepy          sta     addr2
.c4e7	88		                dey
.c4e8	d0 f1		                bne     moreline
.c4ea	8a		addx            txa
.c4eb	18		                clc
.c4ec	6d 16 c5	                adc     addr2
.c4ef	90 03		                bcc     thatsit
.c4f1	ee 17 c5	                inc     addr2+1
.c4f4	8d 16 c5	thatsit         sta     addr2
.c4f7	68		                pla
.c4f8	a8		                tay
.c4f9	68		                pla
.c4fa	aa		                tax
.c4fb	68		                pla
.c4fc	28		                plp
.c4fd	60		                rts
.c4fe			loop
.c4fe	ce 1e c5	               dec  loopcount
.c501	d0 03		               bne  norep
.c503	ce 1f c5	               dec  loopcount+1
.c506	ad 1e c5	norep          lda  loopcount
.c509	c9 00		               cmp  #$00
.c50b	d0 05		               bne  out
.c50d	4d 1f c5	               eor  loopcount+1
.c510	c9 ff		               cmp  #$ff
.c512	60		out            rts
>c513	28		ymult          .byte     40
>c514	00 00		addr1          .word     $0000
>c516	00 00		addr2          .word     $0000
>c518	00 00		bytecnt        .word     $0000
>c51a	00 00		zp1            .word   $0000
>c51c	00 00		zp2            .word   $0000
>c51e	00 00		loopcount      .word     $0000

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c520	01		a2hexcol       .byte     1              ; pour aputscxy
>c521	00		a2hexbkcol     .byte     %00000000
.c522			a2hexpos
>c522	00		a2hexpx        .byte     0              ; pour aputsxy
>c523	00		a2hexpy        .byte     0
>c524	24		a2hexprefix    .byte     "$"            ; pour aputs
>c525	00 00		a2hexstr       .word     $00
>c527	00 00		               .word     $00
>c529	00		               .byte     0              ; 0 end string
>c52a	30 30 30 30	abin           .null     "00000000"
>c52e	30 30 30 30 00
>c533	20 20 20 00	adec           .null     "   "
.c537			putahexfmtxy
.c537	20 54 c3	               jsr  push
.c53a	20 86 c5	               jsr  atohex
.c53d	ae 22 c5	               ldx  a2hexpx
.c540	ac 23 c5	               ldy  a2hexpy
.c543	20 7d c2	               jsr  gotoxy
.c546	a2 24		               ldx  #<a2hexprefix
.c548	a0 c5		               ldy  #>a2hexprefix
.c54a	20 63 c2	               jsr  puts
.c54d	20 93 c3	               jsr  pop
.c550	60		               rts
.c551			putahexfmt
.c551	20 54 c3	               jsr  push
.c554	20 86 c5	               jsr  atohex
.c557	a2 24		               ldx  #<a2hexprefix
.c559	a0 c5		               ldy  #>a2hexprefix
.c55b	20 63 c2	               jsr  puts
.c55e	20 93 c3	               jsr  pop
.c561	60		               rts
.c562			putahex
.c562	20 54 c3	               jsr  push
.c565	20 86 c5	               jsr  atohex
.c568	a2 25		               ldx  #<a2hexstr
.c56a	a0 c5		               ldy  #>a2hexstr
.c56c	20 63 c2	               jsr  puts
.c56f	20 93 c3	               jsr  pop
.c572	60		               rts
.c573			nibtohex
.c573	08		               php
.c574	29 0f		               and  #$0f
.c576	f8		               sed
.c577	18		               clc
.c578	69 90		               adc  #$90
.c57a	69 40		               adc  #$40
.c57c	d8		               cld
.c57d	28		               plp
.c57e	60		               rts
.c57f			lsra4bits
.c57f	08		               php
.c580	4a		               lsr
.c581	4a		               lsr
.c582	4a		               lsr
.c583	4a		               lsr
.c584	28		               plp
.c585	60		               rts
.c586			atohex
.c586	08		               php
.c587	48		               pha
.c588	48		               pha
.c589	20 7f c5	               jsr  lsra4bits
.c58c	20 73 c5	               jsr  nibtohex
.c58f	8d 25 c5	               sta  a2hexstr
.c592	68		               pla
.c593	20 73 c5	               jsr  nibtohex
.c596	8d 26 c5	               sta  a2hexstr+1
.c599	a9 00		               lda  #$00                ; set end of string
.c59b	8d 27 c5	               sta  a2hexstr+2
.c59e	68		               pla
.c59f	28		               plp
.c5a0	60		               rts
.c5a1			xy2hex
.c5a1	20 54 c3	               jsr  push
.c5a4	20 86 c5	               jsr  atohex
.c5a7	8a		               txa
.c5a8	48		               pha
.c5a9	20 7f c5	               jsr  lsra4bits
.c5ac	20 73 c5	               jsr  nibtohex
.c5af	8d 25 c5	               sta  a2hexstr
.c5b2	68		               pla
.c5b3	20 73 c5	               jsr  nibtohex
.c5b6	8d 26 c5	               sta  a2hexstr+1
.c5b9	98		               tya
.c5ba	48		               pha
.c5bb	20 7f c5	               jsr  lsra4bits
.c5be	20 73 c5	               jsr  nibtohex
.c5c1	8d 27 c5	               sta  a2hexstr+2
.c5c4	68		               pla
.c5c5	20 73 c5	               jsr  nibtohex
.c5c8	8d 28 c5	               sta  a2hexstr+3
.c5cb	a9 00		               lda  #$00                ; 0 ended string
.c5cd	8d 29 c5	               sta  a2hexstr+4
.c5d0	20 93 c3	               jsr  pop
.c5d3			atobin
.c5d3	20 54 c3	               jsr  push
.c5d6	a2 08		               ldx  #8
.c5d8	a0 00		               ldy  #0
.c5da	18		               clc
.c5db	2a		nextbit        rol
.c5dc	48		               pha
.c5dd	69 00		               adc  #$00
.c5df	29 01		               and  #$01
.c5e1	20 73 c5	               jsr  nibtohex
.c5e4	99 2a c5	               sta  abin,y
.c5e7	68		               pla
.c5e8	c8		               iny
.c5e9	ca		               dex
.c5ea	d0 ef		               bne  nextbit
.c5ec	a9 00		               lda  #0
.c5ee	99 2a c5	               sta  abin,y
.c5f1	20 93 c3	               jsr  pull
.c5f4	60		               rts
.c5f5			putabin
.c5f5	20 d3 c5	               jsr     atobin
.c5f8	20 54 c3	               jsr     push
.c5fb	a2 2a		               ldx     #<abin
.c5fd	a0 c5		               ldy     #>abin
.c5ff	20 63 c2	               jsr     puts
.c602	20 93 c3	               jsr     pop
.c605	60		               rts
.c606			printabin
.c606	20 54 c3	               jsr     push
.c609	a2 2a		               ldx     #<abin
.c60b	a0 c5		               ldy     #>abin
.c60d	20 63 c2	               jsr     puts
.c610	20 93 c3	               jsr     pop
.c613	60		               rts
.c614			putabinfmt
.c614	08		               php
.c615	48		               pha
.c616	a9 25		               lda     #"%"
.c618	20 5d c2	               jsr     putch
.c61b	68		               pla
.c61c	20 f5 c5	               jsr     putabin
.c61f	28		               plp
.c620	60		               rts
.c621			putabinxy
.c621	20 7d c2	               jsr     gotoxy
.c624	20 f5 c5	               jsr     putabin
.c627	60		               rts
.c628			putabinfmtxy
.c628	20 7d c2	               jsr     gotoxy
.c62b	20 14 c6	               jsr     putabinfmt
.c62e	60		               rts
.c62f			atodec
.c62f	20 54 c3	               jsr  push
.c632	f8		               sed            ; On se place en mode décimal.
.c633	aa		               tax            ; On déplace a dans x.
.c634	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.c636	a9 00		               lda  #$00      ; 0 dans A.
.c638	18		nextbit        clc            ; Bit carry a 0.
.c639	69 01		               adc  #$01      ; Ajoute 1 a A.
.c63b	90 01		               bcc  decx      ; Pas de carry, pas de report.
.c63d	c8		               iny            ; On incrémente Y
.c63e	ca		decx           dex            ; X=X-1
.c63f	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.c641	48		               pha            ; A sur le stack.
.c642	98		               tya            ; Y dans A (MSB)
.c643	20 73 c5	               jsr  nibtohex  ; a hex petsci ...
.c646	8d 33 c5	               sta  adec      ; ... dans tampon.
.c649	68		               pla            ; Récupere A
.c64a	48		               pha            ;
.c64b	20 73 c5	               jsr  nibtohex
.c64e	8d 35 c5	               sta  adec+2
.c651	68		               pla
.c652	6a		               ror
.c653	6a		               ror
.c654	6a		               ror
.c655	6a		               ror
.c656	20 73 c5	               jsr  nibtohex
.c659	8d 34 c5	               sta  adec+1
.c65c	d8		               cld            ; On revient en mode binaire.
.c65d	20 93 c3	               jsr  pull
.c660	60		               rts
.c661			putadec
.c661	20 54 c3	               jsr  push
.c664	20 2f c6	               jsr  atodec
.c667	a2 33		               ldx  #<adec
.c669	a0 c5		               ldy  #>adec+1
.c66b	20 63 c2	               jsr  puts
.c66e	20 93 c3	               jsr  pop
.c671	60		               rts

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>c672	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>c676	00 00 00 00 00 00 00 00 00 0d 00 00
>c682	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>c686	00 00 00 00 00 00 00 00 00 00 00 00
>c692	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>c696	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>c6a2	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>c6a6	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>c6b2	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>c6b6	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>c6c2	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>c6c6	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>c6d2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>c6d6	00 00 00 00 00 00 00 00 00 00 00 00
>c6e2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>c6e6	00 00 00 00 00 00 00 00 00 00 00 00
>c6f2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>c6f6	00 00 00 00 00 00 00 00 00 00 00 00
>c702	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>c706	00 00 00 00 00 00 00 00 00 00 00 00
>c712	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>c716	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>c722	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>c726	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>c732	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>c736	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>c742	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>c746	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>c752	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>c756	00 00 00 00 00 00 00 00 00 00 00 00
>c762	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>c766	00 00 00 00 00 00 00 00 00 00 00 00
.c772			waitstop
.c772	20 54 c3	               jsr  push
.c775	20 ed f6	wait           jsr  k_stop
.c778	d0 fb		               bne  wait
.c77a	20 93 c3	               jsr  pop
.c77d	60		               rts
.c77e			anykey
.c77e	08		               php
.c77f	48		               pha
.c780	a5 cb		nokey          lda 203
.c782	c9 40		               cmp #64
.c784	f0 fa		               beq nokey
.c786	20 8c c7	               jsr releasekey
.c789	68		               pla
.c78a	28		               plp
.c78b	60		               rts
.c78c			releasekey
.c78c	08		               php
.c78d	48		               pha
.c78e	a5 cb		keypressed     lda 203
.c790	c9 40		               cmp #64
.c792	d0 fa		               bne keypressed
.c794	68		               pla
.c795	28		               plp
.c796	60		               rts
.c797			getkey
.c797	20 e4 ff	again          jsr  getin
.c79a	c9 00		               cmp  #0
.c79c	f0 f9		               beq  again
.c79e	60		               rts
.c79f			kbflushbuff
.c79f	08		               php
.c7a0	48		               pha
.c7a1	20 e4 ff	again          jsr  getin
.c7a4	c9 00		               cmp  #0
.c7a6	d0 f9		               bne  again
.c7a8	68		               pla
.c7a9	28		               plp
.c7aa	60		               rts
.c7ab			waitkey
.c7ab	20 54 c3	               jsr  push
.c7ae	8d fc c7	               sta  thekey
.c7b1	20 e4 ff	nope           jsr  getin
.c7b4	20 d2 ff	               jsr  chrout
.c7b7	cd fc c7	               cmp  thekey
.c7ba	d0 f5		               bne  nope
.c7bc	20 d2 ff	               jsr  chrout
.c7bf	20 93 c3	               jsr  pop
.c7c2	60		               rts
.c7c3			waitspace
.c7c3	20 54 c3	               jsr  push
.c7c6	a9 7f		wait           lda  #$7f  ;%01111111
.c7c8	8d 00 dc	               sta  $dc00
.c7cb	ad 01 dc	               lda  $dc01
.c7ce	29 10		               and  #$10  ;mask %00010000
.c7d0	d0 f4		               bne  wait
.c7d2	20 93 c3	               jsr  pop
.c7d5			waitsstop
.c7d5	20 54 c3	               jsr  push
.c7d8	20 ed f6	wait           jsr  k_stop  ;%01111111
.c7db	d0 fb		               bne  wait
.c7dd	20 93 c3	               jsr  pop
.c7e0			waitreturn
.c7e0	20 54 c3	               jsr  push
.c7e3	ad fd c7	               lda  thecount
.c7e6	8d 00 04	               sta  scrnram
.c7e9	a9 02		               lda  #$02
.c7eb	8d 00 d8	               sta  colorram
.c7ee	20 e4 ff	nope           jsr  getin
.c7f1	c9 0d		nohex          cmp  #$0d
.c7f3	d0 f9		               bne  nope
.c7f5	ee fd c7	               inc  thecount
.c7f8	20 93 c3	               jsr  pop
.c7fb	60		               rts
>c7fc	00		thekey         .byte   0
>c7fd	01		thecount       .byte   $01

;******  Return to file: libtest02.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.c7fe			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.c7fe	20 54 c3	                jsr push
.c801	08		                php
.c802	8d c2 c9	                sta  rega
.c805	68		                pla
.c806	8d c5 c9	                sta  regp
.c809	8e c3 c9	                stx  regx
.c80c	8c c4 c9	                sty  regy
.c80f	ba		                tsx
.c810	8e c6 c9	                stx  regs
.c813	68		                pla
.c814	8d c9 c9	                sta  regpcl
.c817	8d ca c9	                sta  regpcl2
.c81a	68		                pla
.c81b	8d c7 c9	                sta  regpch
.c81e	8d c8 c9	                sta  regpch2
.c821	ad c2 c9	                lda  rega
.c824	48		                pha
.c825	20 73 c5	                jsr  nibtohex
.c828	8d 6c c9	                sta  vala+1
.c82b	68		                pla
.c82c	20 7f c5	                jsr  lsra4bits
.c82f	20 73 c5	                jsr  nibtohex
.c832	8d 6b c9	                sta  vala
.c835	ad c4 c9	                lda  regy
.c838	48		                pha
.c839	20 73 c5	                jsr  nibtohex
.c83c	8d 80 c9	                sta  valy+1
.c83f	68		                pla
.c840	20 7f c5	                jsr  lsra4bits
.c843	20 73 c5	                jsr  nibtohex
.c846	8d 7f c9	                sta  valy
.c849	ad c3 c9	                lda  regx
.c84c	48		                pha
.c84d	20 73 c5	                jsr  nibtohex
.c850	8d 76 c9	                sta  valx+1
.c853	68		                pla
.c854	20 7f c5	                jsr  lsra4bits
.c857	20 73 c5	                jsr  nibtohex
.c85a	8d 75 c9	                sta  valx
.c85d	ad c5 c9	                lda  regp
.c860	48		                pha
.c861	20 73 c5	                jsr  nibtohex
.c864	8d 8a c9	                sta  valp+1
.c867	68		                pla
.c868	20 7f c5	                jsr  lsra4bits
.c86b	20 73 c5	                jsr  nibtohex
.c86e	8d 89 c9	                sta  valp
.c871	ad c6 c9	                lda  regs
.c874	48		                pha
.c875	20 73 c5	                jsr  nibtohex
.c878	8d 94 c9	                sta  vals+1
.c87b	68		                pla
.c87c	20 7f c5	                jsr  lsra4bits
.c87f	20 73 c5	                jsr  nibtohex
.c882	8d 93 c9	                sta  vals
.c885	18		                clc
.c886	ad ca c9	                lda regpcl2
.c889	69 01		                adc #$01
.c88b	8d ca c9	                sta regpcl2
.c88e	ad ca c9	                lda regpcl2
.c891	d0 03		                bne noreport
.c893	ee c8 c9	                inc regpch2
.c896	ad c8 c9	    noreport    lda regpch2
.c899	48		                pha
.c89a	20 73 c5	                jsr  nibtohex
.c89d	8d 9f c9	                sta  valpch+1
.c8a0	68		                pla
.c8a1	20 7f c5	                jsr  lsra4bits
.c8a4	20 73 c5	                jsr  nibtohex
.c8a7	8d 9e c9	                sta  valpch
.c8aa	ad ca c9	                lda  regpcl2
.c8ad	48		                pha
.c8ae	20 73 c5	                jsr  nibtohex
.c8b1	8d a1 c9	                sta  valpcl+1
.c8b4	68		                pla
.c8b5	20 7f c5	                jsr  lsra4bits
.c8b8	20 73 c5	                jsr  nibtohex
.c8bb	8d a0 c9	                sta  valpcl
.c8be	a5 fb		                lda  zpage1
.c8c0	48		                pha
.c8c1	20 73 c5	                jsr  nibtohex
.c8c4	8d af c9	                sta  valz1l
.c8c7	68		                pla
.c8c8	20 7f c5	                jsr  lsra4bits
.c8cb	20 73 c5	                jsr  nibtohex
.c8ce	8d b0 c9	                sta  valz1l+1
.c8d1	a5 fc		                lda  zpage1+1
.c8d3	48		                pha
.c8d4	20 73 c5	                jsr  nibtohex
.c8d7	8d ad c9	                sta  valz1h
.c8da	68		                pla
.c8db	20 7f c5	                jsr  lsra4bits
.c8de	20 73 c5	                jsr  nibtohex
.c8e1	8d ae c9	                sta  valz1h+1
.c8e4	a5 fd		                lda  zpage2
.c8e6	48		                pha
.c8e7	20 73 c5	                jsr  nibtohex
.c8ea	8d be c9	                sta  valz2l
.c8ed	68		                pla
.c8ee	20 7f c5	                jsr  lsra4bits
.c8f1	20 73 c5	                jsr  nibtohex
.c8f4	8d bf c9	                sta  valz2l+1
.c8f7	a5 fe		                lda  zpage2+1
.c8f9	48		                pha
.c8fa	20 73 c5	                jsr  nibtohex
.c8fd	8d bc c9	                sta  valz2h
.c900	68		                pla
.c901	20 7f c5	                jsr  lsra4bits
.c904	20 73 c5	                jsr  nibtohex
.c907	8d bd c9	                sta  valz2h+1
.c90a	20 44 c3	                jsr  setinverse
.c90d	78		                sei
.c90e	a2 64		                ldx  #<srega
.c910	a0 c9		                ldy  #>srega+1
.c912	20 ec c2	                jsr  putscxy
.c915	a2 6e		                ldx  #<sregx
.c917	a0 c9		                ldy  #>sregx+1
.c919	20 ec c2	                jsr  putscxy
.c91c	a2 78		                ldx  #<sregy
.c91e	a0 c9		                ldy  #>sregy+1
.c920	20 ec c2	                jsr  putscxy
.c923	a2 82		                ldx  #<sregp
.c925	a0 c9		                ldy  #>sregp+1
.c927	20 ec c2	                jsr  putscxy
.c92a	a2 8c		                ldx  #<sregs
.c92c	a0 c9		                ldy  #>sregs+1
.c92e	20 ec c2	                jsr  putscxy
.c931	a2 96		                ldx  #<sregpc
.c933	a0 c9		                ldy  #>sregpc+1
.c935	20 ec c2	                jsr  putscxy
.c938	a2 a4		                ldx  #<sregz1
.c93a	a0 c9		                ldy  #>sregz1+1
.c93c	20 ec c2	                jsr  putscxy
.c93f	a2 b3		                ldx  #<sregz2
.c941	a0 c9		                ldy  #>sregz2+1
.c943	20 ec c2	                jsr  putscxy
.c946	58		                cli
.c947	20 4c c3	                jsr  clrinverse
.c94a	ad c7 c9	                lda  regpch
.c94d	48		                pha
.c94e	ad c9 c9	                lda  regpcl
.c951	48		                pha
.c952	ac c4 c9	                ldy  regy
.c955	ae c3 c9	                ldx  regx
.c958	ad c5 c9	                lda  regp
.c95b	48		                pha
.c95c	ad c2 c9	                lda  rega
.c95f	28		                plp
.c960	20 93 c3	                jsr pop
.c963	60		                rts
>c964	01 00 17	srega   .byte   colr,coln,line
>c967	20 41 3a 24	        .text   ' a:$' ;4,24
>c96b	00 00 00	vala    .byte   0,0,0
>c96e	01 06 17	sregx   .byte   colr,coln+6,line
>c971	20 58 3a 24	        .text   ' x:$' ;4,24
>c975	00 00 00	valx    .byte   0,0,0
>c978	01 0c 17	sregy   .byte   colr,coln+12,line
>c97b	20 59 3a 24	        .text   ' y:$' ;4,24
>c97f	00 00 00	valy    .byte   0,0,0
>c982	01 12 17	sregp   .byte   colr,coln+18,line
>c985	20 50 3a 24	        .text   ' p:$' ;4,24
>c989	00 00 00	valp    .byte   0,0,0
>c98c	01 18 17	sregs   .byte   colr,coln+24,line
>c98f	20 53 3a 24	        .text   ' s:$' ;4,24
>c993	00 00 00	vals    .byte   0,0,0
>c996	01 1e 17	sregpc  .byte   colr,coln+30,line
>c999	20 50 43 3a	        .text   ' pc:$' ;4,24
>c99d	24
>c99e	00 00		valpch  .byte   0,0
>c9a0	00 00 20 00	valpcl  .byte   0,0,32,0
>c9a4	01 03 18	sregz1  .byte   colr,coln+3,line+1
>c9a7	20 5a 50 31	        .text   ' zp1:$' ;4,24
>c9ab	3a 24
>c9ad	00 00		valz1h  .byte   0,0
>c9af	00 00 20 00	valz1l  .byte   0,0,32,0
>c9b3	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>c9b6	20 5a 50 32	        .text   ' zp2:$' ;4,24
>c9ba	3a 24
>c9bc	00 00		valz2h  .byte   0,0
>c9be	00 00 20 00	valz2l  .byte   0,0,32,0
>c9c2	00		rega    .byte   0
>c9c3	00		regx    .byte   0
>c9c4	00		regy    .byte   0
>c9c5	00		regp    .byte   0
>c9c6	00		regs    .byte   0
>c9c7	00		regpch  .byte   0
>c9c8	00		regpch2 .byte   0
>c9c9	00		regpcl  .byte   0
>c9ca	00		regpcl2 .byte   0
>c9cb	00		vzp1h   .byte   0
>c9cc	00		vzp1l   .byte   0
>c9cd	00		vzp2h   .byte   0
>c9ce	00		vzp2l   .byte   0

;******  Return to file: libtest02.asm


;******  End of listing

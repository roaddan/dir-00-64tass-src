
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L libtest03.txt -o libtest03.prg libtest03.asm
; Mon Apr 21 23:29:16 2025

;Offset	;Hex		;Source

;******  Processing input file: libtest03.asm

="20250421-232831"	                Version = "20250421-232831"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c dd 09	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: libtest03.asm


;******  Processing file: strings_fr.asm

.0854			headera
>0854	13 1d 1d 1d	               .byte     b_home,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right
>0858	1d
>0859	20 c3 4f 4d	               .text              " Commodore 64 test de libraries "
>085d	4d 4f 44 4f 52 45 20 36 34 20 54 45 53 54 20 44
>086d	45 20 4c 49 42 52 41 52 49 45 53 20
>0879	0d 00		               .byte     $0d,0
>087b	20 20 20 20	headerb        .text          "               libtest03 "
>087f	20 20 20 20 20 20 20 20 20 20 20 4c 49 42 54 45
>088f	53 54 30 33 20
>0894	0d		               .byte     $0d
>0895	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0899	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>08a9	45 4c 20 cc 41 46 52 41 4e 43 45
>08b4	0d		               .byte     $0d
>08b5	20 20 20 20	               .text   format("       Version: %s",Version)
>08b9	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>08c9	30 34 32 31 2d 32 33 32 38 33 31
>08d4	0d 00		               .byte     $0d,0
>08d6	0d		shortcuts      .byte     $0d
>08d7	91 91		               .byte     ucurkey,ucurkey
>08d9	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>08dd	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>08e1	1d
>08e2	20 d2 20 c1	               .text          " R A C C O U R C I S "
>08e6	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>08f6	20
>08f7	0d		               .byte     $0d
>08f8	20 4c 49 42	               .text   format(" libtest03: SYS%05d (jsr $%04X)",main, main)
>08fc	54 45 53 54 30 33 3a 20 d3 d9 d3 30 32 35 32 35
>090c	20 28 4a 53 52 20 24 30 39 c4 c4 29
>0918	0d		               .byte     $0d
>0919	20 41 49 44	               .text   format(" aide.....: SYS%05d (jsr $%04X)",aide, aide)
>091d	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 36 34 30
>092d	20 28 4a 53 52 20 24 30 c1 35 30 29
>0939	0d		               .byte     $0d
>093a	20 43 4c 53	               .text   format(" cls......: SYS%05d (jsr $%04X)",cls, cls)
>093e	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 31 36 34 37 36
>094e	20 28 4a 53 52 20 24 34 30 35 c3 29
>095a	0d 00		               .byte     $0d,0
>095c	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d (jsr $%04X)",libtest03, libtest03)
>0960	43 45 4d 45 4e 54 3a 20 d3 d9 d3 31 36 33 38 35
>0970	20 28 4a 53 52 20 24 34 30 30 31 29
>097c	0d 0d		               .byte     $0d, $0d
>097e	20 20 20 20	                .text   format("    ex.: SYS%05d",libtest03)
>0982	45 58 2e 3a 20 d3 d9 d3 31 36 33 38 35
>098f	0d		                .byte     $0d
>0990	20 20 20 20	                .text   format("    for i=0to100:SYS%05d:next",libtest03)
>0994	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>09a4	31 36 33 38 35 3a 4e 45 58 54
>09ae	0d 00		                .byte     $0d,0
>09b0	20 c0 c0 c0	line            .byte     $20,192,192,192,192,192,192,192,192,192
>09b4	c0 c0 c0 c0 c0 c0
>09ba	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09be	c0 c0 c0 c0 c0 c0
>09c4	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09c8	c0 c0 c0 c0 c0 c0
>09ce	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192
>09d2	c0 c0 c0 c0 c0
>09d7	0d 00		                .byte     $0d,0
>09d9	01 00 00 00	dataloc         .byte       1,0,0,0

;******  Return to file: libtest03.asm

.09dd			main
.09dd	20 3c 40	               jsr scrmaninit
.09e0	08		               php
.09e1	48		               pha
.09e2	a9 8e		               lda  #b_uppercase
.09e4	8d 5b 40	               sta  characterset
.09e7	20 d2 ff	               jsr  $ffd2
.09ea	68		               pla
.09eb	28		               plp
.09ec	08		               php
.09ed	48		               pha
.09ee	a9 8e		               lda  #b_uppercase
.09f0	20 d2 ff	               jsr  $ffd2
.09f3	68		               pla
.09f4	28		               plp
.09f5	08		               php
.09f6	48		               pha
.09f7	a9 08		               lda  #$08
.09f9	20 d2 ff	               jsr  $ffd2
.09fc	68		               pla
.09fd	28		               plp
.09fe	20 77 43	               jsr  push
.0a01	48		               pha
.0a02	a9 05		               lda  #cvert
.0a04	8d 20 d0	               sta  $d020
.0a07	68		               pla
.0a08	48		               pha
.0a09	a9 06		               lda  #cbleu
.0a0b	8d 21 d0	               sta  $d021
.0a0e	68		               pla
.0a0f	48		               pha
.0a10	a9 01		               lda  #cblanc
.0a12	8d 86 02	               sta  bascol
.0a15	68		               pla
.0a16	20 b6 43	               jsr  pull
.0a19	20 01 40	               jsr  libtest03
.0a1c	20 a1 47	               jsr  anykey
.0a1f	08		               php
.0a20	48		               pha
.0a21	a9 09		               lda  #$09
.0a23	20 d2 ff	               jsr  $ffd2
.0a26	68		               pla
.0a27	28		               plp
.0a28	08		               php
.0a29	48		               pha
.0a2a	a9 8e		               lda  #b_uppercase
.0a2c	8d 5b 40	               sta  characterset
.0a2f	20 d2 ff	               jsr  $ffd2
.0a32	68		               pla
.0a33	28		               plp
.0a34	20 77 43	               jsr  push
.0a37	48		               pha
.0a38	a9 05		               lda  #cvert
.0a3a	8d 20 d0	               sta  $d020
.0a3d	68		               pla
.0a3e	48		               pha
.0a3f	a9 06		               lda  #cbleu
.0a41	8d 21 d0	               sta  $d021
.0a44	68		               pla
.0a45	48		               pha
.0a46	a9 01		               lda  #cblanc
.0a48	8d 86 02	               sta  bascol
.0a4b	68		               pla
.0a4c	20 b6 43	               jsr  pull
.0a4f	60		               rts
.0a50			aide
.0a50	08		               php
.0a51	48		               pha
.0a52	a9 0e		               lda  #14
.0a54	8d 5b 40	               sta  characterset
.0a57	20 d2 ff	               jsr  $ffd2
.0a5a	68		               pla
.0a5b	28		               plp
.0a5c	20 5c 40	               jsr cls
.0a5f	20 77 43	               jsr  push
.0a62	a2 b0		               ldx  #<line
.0a64	a0 09		               ldy  #>line
.0a66	20 79 40	               jsr  puts
.0a69	20 b6 43	               jsr  pull
.0a6c	20 77 43	               jsr  push
.0a6f	a2 54		               ldx  #<headera
.0a71	a0 08		               ldy  #>headera
.0a73	20 79 40	               jsr  puts
.0a76	20 b6 43	               jsr  pull
.0a79	20 77 43	               jsr  push
.0a7c	a2 7b		               ldx  #<headerb
.0a7e	a0 08		               ldy  #>headerb
.0a80	20 79 40	               jsr  puts
.0a83	20 b6 43	               jsr  pull
.0a86	20 77 43	               jsr  push
.0a89	a2 b0		               ldx  #<line
.0a8b	a0 09		               ldy  #>line
.0a8d	20 79 40	               jsr  puts
.0a90	20 b6 43	               jsr  pull
.0a93	20 77 43	               jsr  push
.0a96	a2 b0		               ldx  #<line
.0a98	a0 09		               ldy  #>line
.0a9a	20 79 40	               jsr  puts
.0a9d	20 b6 43	               jsr  pull
.0aa0	20 77 43	               jsr  push
.0aa3	a2 d6		               ldx  #<shortcuts
.0aa5	a0 08		               ldy  #>shortcuts
.0aa7	20 79 40	               jsr  puts
.0aaa	20 b6 43	               jsr  pull
.0aad	20 77 43	               jsr  push
.0ab0	a2 5c		               ldx  #<aidetext
.0ab2	a0 09		               ldy  #>aidetext
.0ab4	20 79 40	               jsr  puts
.0ab7	20 b6 43	               jsr  pull
.0aba	20 77 43	               jsr  push
.0abd	a2 b0		               ldx  #<line
.0abf	a0 09		               ldy  #>line
.0ac1	20 79 40	               jsr  puts
.0ac4	20 b6 43	               jsr  pull
.0ac7	20 a1 47	               jsr  anykey
.0aca	20 5c 40	               jsr  cls
.0acd	60		               rts
.4001			libtest03
.4001	08		               php
.4002	48		               pha
.4003			nexta
.4003	20 77 43	               jsr  push
.4006	a2 d9		               ldx  #<dataloc
.4008	a0 09		               ldy  #>dataloc
.400a	20 02 41	               jsr  putscxy
.400d	20 b6 43	               jsr  pull
.4010	48		               pha
.4011	a9 03		               lda  #ccyan
.4013	8d 86 02	               sta  bascol
.4016	68		               pla
.4017			again
.4017	a9 00		               lda  #$00
.4019	a2 10		               ldx  #$10
.401b	20 21 48	               jsr  showregs
.401e	20 77 43	               jsr  push
.4021	a2 00		               ldx  #0
.4023	a0 00		               ldy  #0
.4025	20 93 40	               jsr  gotoxy
.4028	20 b6 43	               jsr  pop
.402b	20 78 41	               jsr  b_praxstr
.402e	68		out            pla
.402f	28		               plp
.4030	60		               rts
>4031	a6		car            .byte     166
>4032	3a 30		valeur         .word     12346

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>4034	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>4038	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.403c			libtart

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.403c			scrmaninit
.403c	20 77 43	               jsr  push
.403f	a9 06		               lda  #vbleu
.4041	8d 21 d0	               sta  vicbackcol
.4044	a9 05		               lda  #vvert
.4046	8d 20 d0	               sta  vicbordcol
.4049	a9 01		               lda  #vblanc
.404b	8d 86 02	               sta  bascol
.404e	ad 00 04	               lda  scrnram
.4051	8d 00 04	               sta  scrnram
.4054	20 5c 40	               jsr  cls
.4057	20 b6 43	               jsr  pop
.405a	60		               rts
>405b	8e		characterset   .byte b_uppercase
.405c			cls
.405c	08		               php
.405d	48		               pha
.405e	a9 93		               lda  #$93
.4060	20 73 40	               jsr  putch
.4063	68		               pla
.4064	28		               plp
.4065	60		               rts
.4066			putnch
.4066	08		               php
.4067	e0 00		               cpx  #$00
.4069	f0 06		               beq  out
.406b	20 d2 ff	again          jsr  $ffd2
.406e	ca		               dex
.406f	d0 fa		               bne  again
.4071	28		out            plp
.4072	60		               rts
.4073			putch
.4073	08		               php
.4074	20 d2 ff	               jsr  $ffd2
.4077	28		               plp
.4078	60		               rts
.4079			puts
.4079	20 77 43	               jsr  push
.407c	86 fb		               stx  zpage1
.407e	84 fc		               sty  zpage1+1
.4080	a0 00		               ldy  #0
.4082	b1 fb		next           lda  (zpage1),y
.4084	f0 09		               beq  exit
.4086	20 73 40	               jsr  putch
.4089	20 7e 44	               jsr  inczp1
.408c	4c 82 40	               jmp  next
.408f	20 b6 43	exit           jsr  pop
.4092	60		               rts
.4093			gotoxy
.4093	08		               php
.4094	18		               clc
.4095	8a		               txa
.4096	48		               pha
.4097	98		               tya
.4098	aa		               tax
.4099	68		               pla
.409a	a8		               tay
.409b	20 f0 ff	               jsr  kplot
.409e	28		               plp
.409f	60		               rts
.40a0			cursor
=$0286			bascol    =    $0286
.40a0	08		               php            ;tourlou
.40a1	48		               pha
.40a2	90 12		               bcc  restore
.40a4	20 f0 ff	               jsr  kplot
.40a7	8c c8 40	               sty  cx
.40aa	8e c9 40	               stx  cy
.40ad	ad 86 02	               lda  bascol
.40b0	8d ca 40	               sta  bcol
.40b3	4c c5 40	               jmp  out
.40b6	ae c9 40	restore        ldx  cy
.40b9	ac c8 40	               ldy  cx
.40bc	20 f0 ff	               jsr  kplot
.40bf	ad ca 40	               lda  bcol
.40c2	8d 86 02	               sta  bascol
.40c5	68		out            pla
.40c6	28		               plp
.40c7	60		               rts
>40c8	00		cx   .byte     $00
>40c9	00		cy   .byte     $00
>40ca	00		bcol .byte     $00
.40cb			cursave
.40cb	08		               php
.40cc	38		               sec
.40cd	20 a0 40	               jsr  cursor
.40d0	28		               plp
.40d1	60		               rts
.40d2			curput
.40d2	08		               php
.40d3	18		               clc
.40d4	20 a0 40	               jsr  cursor
.40d7	28		               plp
.40d8	60		               rts
.40d9			putsxy
.40d9	20 77 43	               jsr  push
.40dc	86 fb		               stx  zpage1
.40de	84 fc		               sty  zpage1+1
.40e0	a0 00		               ldy  #$00
.40e2	b1 fb		               lda  (zpage1),y
.40e4	aa		               tax
.40e5	20 7e 44	               jsr  inczp1
.40e8	b1 fb		               lda  (zpage1),y
.40ea	a8		               tay
.40eb	20 93 40	               jsr  gotoxy
.40ee	20 7e 44	               jsr  inczp1
.40f1	a6 fb		               ldx  zpage1
.40f3	a4 fc		               ldy  zpage1+1
.40f5	20 79 40	               jsr  puts
.40f8	20 b6 43	               jsr  pop
.40fb	60		               rts
>40fc	00 00		straddr   .word     $00
>40fe	00		px        .byte     $00
>40ff	00		py        .byte     $00
>4100	00 00		zp1       .word     $00
.4102			putscxy
.4102	20 77 43	               jsr  push
.4105	84 fc		               sty  zpage1+1
.4107	86 fb		               stx  zpage1
.4109	ad 86 02	               lda  bascol
.410c	8d 2c 41	               sta  bc
.410f	a0 00		               ldy #$00
.4111	b1 fb		               lda  (zpage1),y
.4113	8d 86 02	               sta  bascol
.4116	20 7e 44	               jsr  inczp1
.4119	a6 fb		               ldx  zpage1
.411b	a4 fc		               ldy  zpage1+1
.411d	20 d9 40	               jsr  putsxy
.4120	ad 2c 41	               lda  bc
.4123	8d 86 02	               sta  bascol
.4126	20 b6 43	               jsr  pop
.4129	60		               rts
>412a	00 00		straddr  .word      $00
>412c	00		bc       .byte      $00
>412d	00 00		zp1      .word      $00
.412f			putrahex
.412f	08		               php
.4130	48		               pha
.4131	20 a9 45	               jsr  atohex
.4134	a9 48		               lda  #<a2hexstr
.4136	a0 45		               ldy  #>a2hexstr
.4138	20 79 40	               jsr  puts
.413b	68		               pla
.413c	28		               plp
.413d	60		               rts
.413e			kputrahexxy
.413e			bputrahexxy
.413e			putrahexxy
.413e	08		               php
.413f	20 a9 45	               jsr  atohex
.4142	a9 45		               lda  #<a2hexpos
.4144	a0 45		               ldy  #>a2hexpos
.4146	20 d9 40	               jsr  putsxy
.4149	68		               pla
.414a	28		               plp
.414b	60		               rts
.414c			putrahexcxy
.414c	08		               php
.414d	20 a9 45	               jsr  atohex
.4150	a9 45		               lda  #<a2hexpos
.4152	a0 45		               ldy  #>a2hexpos
.4154	20 02 41	               jsr  putscxy
.4157	68		               pla
.4158	28		               plp
.4159	60		               rts
.415a			setinverse
.415a	48		               pha
.415b	a9 12		               lda  #$12
.415d	20 d2 ff	               jsr  $ffd2
.4160	68		               pla
.4161	60		               rts
.4162			clrinverse
.4162	48		               pha
.4163	a9 92		               lda  #$92
.4165	20 d2 ff	               jsr  $ffd2
.4168	68		               pla
.4169	60		               rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2-math.asm

.416a			b_math_template
.416a	20 77 43				jsr	push
.416d	20 b6 43				jsr	pop
.4170	60					rts
>4171	00		b_bufflenght	.byte	$00
>4172	00 00 00 00	b_multresult	.word 	$0000,$0000,$0000
>4176	00 00
.4178			b_praxstr
.4178	20 77 43				jsr	push
.417b	20 cd bd				jsr	b_axout
.417e	20 b6 43				jsr	pop
.4181	60					rts
.4182			b_getascnum
.4182	20 77 43				jsr	push
.4185	20 bf e3				jsr	b_intcgt		; Initialyse charget
.4188	20 a2 41				jsr	b_clearbuff	; Clear basic input buffer
.418b	20 f9 ab				jsr	b_prompt		; Prompt for ? and fill buffer by reading...
.418e	86 7a					stx	$7a			; X and Y points to $01ff on return.
.4190	84 7b					sty	$7b
.4192	20 73 00				jsr	b_chrget
.4195	20 f3 bc				jsr	b_ascflt		; Convert ASCII string at 0200 to FAC1 FP.
.4198	20 dd bd				jsr	b_facasc		; Converts FAC1 to ASCII string at 100.
.419b	20 38 42				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.419e	20 b6 43				jsr	pop
.41a1	60					rts
.41a2			b_clearbuff
.41a2	20 77 43				jsr	push
.41a5	a9 00					lda	#$00
.41a7	a0 59					ldy	#$59
.41a9	99 00 02	clear		sta	$0200,y		; Clear Basic input buffer
.41ac	88					dey
.41ad	d0 fa					bne	clear		; 60 bytes.
.41af	20 b6 43				jsr	pop
.41b2	60					rts
.41b3			b_printbuff
.41b3	20 77 43				jsr	push
.41b6	a9 00					lda	#$00			; Set $22 to point to string at 100
.41b8	85 22					sta	$22
.41ba	a9 01					lda	#$01
.41bc	85 23					sta	$23
.41be	ad 71 41				lda	b_bufflenght
.41c1	20 24 ab				jsr	b_strout
.41c4	20 b6 43				jsr	pop
.41c7	60					rts
.41c8			b_insub
.41c8	20 77 43				jsr	push
.41cb	20 bf e3				jsr	b_intcgt	; Initialize CHRGET.
.41ce	20 a2 41				jsr	b_clearbuff
.41d1	20 f9 ab				jsr	b_prompt
.41d4	86 7a					stx	$7a
.41d6	84 7b					sty	$7b
.41d8	20 73 00				jsr	b_chrget
.41db	20 f3 bc				jsr	b_ascflt	; Convert ascii string to floating point in FAC1.
.41de	20 b6 43				jsr	pop
.41e1	60					rts
.41e2			b_readmemfloat
.41e2	20 77 43				jsr	push
.41e5	20 bf e3				jsr	b_intcgt	; Initialize CHRGET.
.41e8	a2 83					ldx	#$83		; Set pointer to fvar as location for var minus 1
.41ea	a0 c5					ldy	#$c5
.41ec	86 7a					stx	$7a
.41ee	84 7b					sty	$7b
.41f0	20 73 00				jsr	b_chrget
.41f3	20 f3 bc				jsr	b_ascflt	; Convert ascii string to floating point in FAC1.
.41f6	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.41f9	20 38 42				jsr	b_getbufflen
.41fc	20 b6 43				jsr	pop
.41ff	60					rts
.4200			b_mul2fptomem
.4200	20 77 43				jsr	push
.4203	20 c8 41				jsr	b_insub		; Input first number.
.4206	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057.
.4209	20 c8 41				jsr	b_insub		; Input second number.
.420c	a9 57					lda	#$57
.420e	a0 00					ldy	#$00			; Point to 1st number.
.4210	20 28 ba				jsr	b_f1xfv		; FAC1 = FAC1 X FVAR.
.4213	a2 72					ldx	#<b_multresult	; Set pointer to area to copy result to.
.4215	a0 41					ldy	#>b_multresult
.4217	20 d4 bb				jsr	b_f1tmem		; Copy FAC1 to memory.
.421a	20 b6 43				jsr	pop
.421d	60					rts
.421e			b_mul2fptoasc
.421e	20 77 43				jsr	push
.4221	20 c8 41				jsr	b_insub		; Get first number.
.4224	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057.
.4227	20 c8 41				jsr	b_insub	;	 Get second number.
.422a	a9 57					lda	#$57
.422c	a0 00					ldy	#$00			; Set pointer to FVAR.
.422e	20 28 ba				jsr	b_f1xfv		; FAC1 = FAC1 x FVAR.
.4231	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.4234	20 b6 43				jsr	pop
.4237	60					rts
.4238			b_getbufflen
.4238	20 77 43				jsr	push
.423b	a0 ff					ldy	#$ff
.423d	c8		nxtchar		iny				; Determine lenght of string by ...
.423e	b9 00 01				lda	$0100,y		; ... searching for $00 EOS byte.
.4241	d0 fa					bne	nxtchar
.4243	c8					iny
.4244	8c 71 41				sty	b_bufflenght	; Store buffer lenght in common variable.
.4247	20 b6 43				jsr	pop
.424a	60					rts
.424b			b_outsub
.424b	20 77 43				jsr	push
.424e	20 38 42				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.4251	20 b3 41				jsr	b_printbuff	; Print buffer content on output device.
.4254	20 38 42				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.4257	20 b6 43				jsr	pop
.425a	60					rts
.425b			b_fac1x10
.425b	20 77 43				jsr	push
.425e	20 c8 41				jsr	b_insub
.4261	20 e2 ba				jsr	b_f1x10	; FAC1 = FAC1 X 10
.4264	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.4267	20 b6 43				jsr	pop
.426a	60					rts
.426b			b_fac1d10
.426b	20 77 43				jsr	push
.426e	20 c8 41				jsr	b_insub		; Get first number.
.4271	20 2b bc				jsr	b_sgnf1
.4274	48					pha
.4275	20 fe ba				jsr	b_f1d10		; FAC1 = FAC1 / 10
.4278	68					pla
.4279	aa					tax
.427a	e8					inx
.427b	d0 04					bne	notneg
.427d	a9 80					lda	#$80		; On force le bit de signe ...
.427f	85 66					sta	$66		; de FAC1 a 1 (neg)
.4281	20 dd bd	notneg		jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.4284	20 b6 43				jsr	pop
.4287	60					rts
.4288			b_fac1square
.4288	20 77 43				jsr	push
.428b	20 c8 41				jsr	b_insub		; Get first number.
.428e	20 0c bc				jsr	b_f1tf2		; Copy FAC1 to FAC2.
.4291	a5 61					lda	$61			; get exponent of FAC1
.4293	20 2b ba				jsr	b_f1xf2		; FAC1 = FAC1 X FAC2
.4296	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.4299	20 b6 43				jsr	pop
.429c	60					rts
.429d			b_fvardfac1
.429d	20 77 43				jsr	push
.42a0	20 c8 41				jsr	b_insub		; Get first number.
.42a3	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.42a6	20 c8 41				jsr	b_insub		; Get second number.
.42a9	a9 57					lda	#$57
.42ab	a0 00					ldy	#$00
.42ad	20 0f bb				jsr	b_fvdf1		; FAC1 = FVAR / FAC1
.42b0	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.42b3	20 b6 43				jsr	pop
.42b6	60					rts
.42b7			b_fac2dfac1
.42b7	20 77 43				jsr	push
.42ba	20 c8 41				jsr	b_insub		; Get first number.
.42bd	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.42c0	20 c8 41				jsr	b_insub		; Get second number.
.42c3	a9 57					lda	#$57
.42c5	a0 00					ldy	#$00
.42c7	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.42ca	a5 61					lda	$61			; get exponent of FAC1
.42cc	20 12 bb				jsr	b_f2df1		; FAC1 = FAC2 / FAC1
.42cf	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.42d2	20 b6 43				jsr	pop
.42d5	60					rts
.42d6			b_fac1pfvar
.42d6	20 77 43				jsr	push
.42d9	20 c8 41				jsr	b_insub		; Get first number.
.42dc	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.42df	20 c8 41				jsr	b_insub		; Get second number.
.42e2	a9 57					lda	#$57
.42e4	a0 00					ldy	#$00
.42e6	20 67 b8				jsr	b_f1pfv		; FAC1 = FAC1 + FVAR
.42e9	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.42ec	20 b6 43				jsr	pop
.42ef	60					rts
.42f0			b_fac2sfac1
.42f0	20 77 43				jsr	push
.42f3	20 c8 41				jsr	b_insub		; Get first number.
.42f6	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.42f9	20 c8 41				jsr	b_insub		; Get second number.
.42fc	a9 57					lda	#$57
.42fe	a0 00					ldy	#$00
.4300	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.4303	20 53 b8				jsr	b_f2sf1		; FAC1 = FAC2 + FAC1
.4306	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.4309	20 b6 43				jsr	pop
.430c	60					rts
.430d			b_fvarsfac1
.430d	20 77 43				jsr	push
.4310	20 c8 41				jsr	b_insub		; Get first number.
.4313	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.4316	20 c8 41				jsr	b_insub		; Get second number.
.4319	a9 57					lda	#$57
.431b	a0 00					ldy	#$00
.431d	20 50 b8				jsr	b_fvsf1		; FAC1 = FVAR + FAC1
.4320	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.4323	20 b6 43				jsr	pop
.4326	60					rts
.4327			b_accpfac1
.4327	20 77 43				jsr	push
.432a	48					pha
.432b	20 c8 41				jsr	b_insub		; Get first number.
.432e	68					pla
.432f	20 7e bd				jsr	b_f1pacc
.4332	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.4335	20 b6 43				jsr	pop
.4338	60					rts
.4339			b_fac2pfac1
.4339	20 77 43				jsr	push
.433c	20 c8 41				jsr	b_insub		; Get first number.
.433f	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.4342	20 c8 41				jsr	b_insub		; Get second number.
.4345	a9 57					lda	#$57
.4347	a0 00					ldy	#$00
.4349	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.434c	a5 61					lda	$61			; get exponent of FAC1
.434e	20 6a b8				jsr	b_f1pf2
.4351	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.4354	20 b6 43				jsr	pop
.4357	60					rts
.4358			b_fac1powfac2
.4358	20 77 43				jsr	push
.435b	20 c8 41				jsr	b_insub		; Get first number.
.435e	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.4361	20 c8 41				jsr	b_insub		; Get second number.
.4364	a9 57					lda	#$57
.4366	a0 00					ldy	#$00
.4368	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.436b	a5 61					lda	$61			; get exponent of FAC1
.436d	20 7b bf				jsr	b_expon
.4370	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.4373	20 b6 43				jsr	pop
.4376	60					rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.4377			push
.4377	08		          php            ; stack : flg, pcl, pch
.4378	78		          sei
.4379	8d b3 43	          sta  ra        ; save a
.437c	68		          pla            ; stack : pcl, pch
.437d	8d b2 43	          sta  rp        ; save rp
.4380	68		          pla            ; stack : pch
.4381	8d b4 43	          sta  pc        ; save pcl
.4384	68		          pla            ; stack : -
.4385	8d b5 43	          sta  pc+1      ; save pch
.4388	a5 fb		          lda  zpage1    ; get zpage1 low byte
.438a	48		          pha            ; stack : zp1l
.438b	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.438d	48		          pha            ; stack : zp1h, zp1l
.438e	a5 fd		          lda  zpage2    ; get zpage2 low byte
.4390	48		          pha            ; stack : zp2l, zp1h, zp1l
.4391	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.4393	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.4394	ad b2 43	          lda  rp        ; get rp
.4397	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.4398	ad b3 43	          lda  ra        ; get a
.439b	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.439c	8a		          txa            ; get x
.439d	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.439e	98		          tya            ; get y
.439f	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.43a0	ad b5 43	          lda  pc+1      ; get pch
.43a3	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.43a4	ad b4 43	          lda  pc        ; get pcl
.43a7	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.43a8	ad b2 43	          lda  rp        ; get rp
.43ab	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.43ac	ad b3 43	          lda  ra        ; get a
.43af	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.43b0	58		          cli
.43b1	60		          rts
>43b2	00		rp        .byte     0
>43b3	00		ra        .byte     0
>43b4	00 00		pc        .word     0
.43b6			pull
.43b6			pop
.43b6	78		          sei
.43b7	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.43b8	8d eb 43	          sta  pc        ; save pcl
.43bb	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.43bc	8d ec 43	          sta  pc+1      ; save pch
.43bf	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.43c0	a8		          tay            ; set y
.43c1	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.43c2	aa		          tax            ; set x
.43c3	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.43c4	8d ea 43	          sta  ra        ; save a
.43c7	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.43c8	8d e9 43	          sta  rp        ; save rp
.43cb	68		          pla            ; stack : zp2l, zp1h, zp1l
.43cc	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.43ce	68		          pla            ; stack : zp1h, zp1l
.43cf	85 fd		          sta  zpage2    ; get zpage2 High byte
.43d1	68		          pla            ; stack : zp1l
.43d2	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.43d4	68		          pla            ; stack :
.43d5	85 fb		          sta  zpage1    ; get zpage1 High byte
.43d7	ad ec 43	          lda  pc+1      ; get pch
.43da	48		          pha            ; stack : pch
.43db	ad eb 43	          lda  pc
.43de	48		          pha            ; stack : pcl, pch
.43df	ad e9 43	          lda  rp        ; get rp
.43e2	48		          pha            ; stack : rp, pcl, pch
.43e3	ad ea 43	          lda  ra        ; set ra
.43e6	58		          cli
.43e7	28		          plp            ; stack : pcl, pch
.43e8	60		          rts
>43e9	00		rp        .byte     0
>43ea	00		ra        .byte     0
>43eb	00 00		pc        .word     0

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.43ed			blkfill
.43ed	20 77 43	bf0            jsr  push
.43f0	20 ac 44	               jsr  savezp1
.43f3	84 fc		               sty  zpage1+1
.43f5	a0 00		               ldy  #$00
.43f7	84 fb		               sty  zpage1
.43f9	91 fb		bf1            sta  (zpage1),y
.43fb	c8		               iny
.43fc	d0 fb		               bne  bf1
.43fe	20 bb 44	               jsr  restzp1
.4401	20 b6 43	               jsr  pop
.4404	60		               rts
.4405			memfill
.4405	20 77 43	               jsr  push
.4408	20 ed 43	mf1            jsr  blkfill
.440b	c8		               iny
.440c	ca		               dex
.440d	d0 f9		               bne  mf1
.440f	20 b6 43	               jsr  pop
.4412	60		               rts
.4413			memmove
.4413	20 77 43	               jsr  push
.4416	ba		               tsx            ; On se crée un pointeur ...
.4417	8a		               txa
.4418	18		               clc
.4419	69 0b		               adc  #11
.441b	a8		               tay
.441c	a2 06		               ldx  #$06
.441e	b9 00 01	nextbyte       lda  $0100,y
.4421	99 6d 44	               sta  words,y
.4424	c8		               iny
.4425	ca		               dex
.4426	d0 f6		               bne  nextbyte
.4428	ad 6d 44	               lda  s
.442b	8d 44 44	               sta  source+1
.442e	ad 6e 44	               lda  s+1
.4431	8d 45 44	               sta  source+2
.4434	ad 6f 44	               lda  d
.4437	8d 41 44	               sta  destin+1
.443a	ad 70 44	               lda  d+1
.443d	8d 42 44	               sta  destin+2
.4440	ad ff ff	destin         lda  $ffff
.4443	8d ff ff	source         sta  $ffff
.4446	ee 41 44	               inc  destin+1
.4449	d0 03		               bne  src
.444b	ee 42 44	               inc  destin+2
.444e	ee 44 44	src            inc  source+1
.4451	d0 03		               bne  cnt
.4453	ee 45 44	               inc  source+2
.4456	ad 71 44	cnt            lda  compte
.4459	d0 08		               bne  decit
.445b	ad 72 44	               lda  compte+1
.445e	f0 09		               beq  fini
.4460	ce 72 44	               dec  compte+1
.4463	ce 71 44	decit          dec  compte
.4466	4c 40 44	               jmp  destin
.4469	20 b6 43	fini           jsr  pop
.446c	60		               rts
.446d			words
>446d	00 00		s         .word     $0000
>446f	00 00		d         .word     $0000
>4471	00 00		compte    .word     $0000
.4473			decword
.4473	20 77 43	               jsr  push
.4476	86 fd		               stx  zpage2
.4478	84 fe		               sty  zpage2+1
.447a	20 b6 43	               jsr  pop
.447d	60		               rts
.447e			inczpage1
.447e			inczp1
.447e	08		               php
.447f	48		               pha
.4480	e6 fb		               inc  zpage1
.4482	a5 fb		               lda  zpage1
.4484	d0 02		               bne  nopage
.4486	e6 fc		               inc  zpage1+1
.4488	68		nopage         pla
.4489	28		               plp
.448a	60		               rts
.448b			deczpage1
.448b			deczp1
.448b	08		                php
.448c	48		                pha
.448d	c6 fb		                dec  zpage1
.448f	d0 02		                bne  nopage
.4491	c6 fc		                dec  zpage1+1
.4493	68		nopage          pla
.4494	28		                plp
.4495	60		                rts
.4496			inczpage2
.4496			inczp2
.4496	08		               php
.4497	48		               pha
.4498	e6 fd		               inc  zpage2
.449a	a5 fd		               lda  zpage2
.449c	d0 02		               bne  nopage
.449e	e6 fe		               inc  zpage2+1
.44a0	68		nopage         pla
.44a1	28		               plp
.44a2	60		               rts
.44a3			deczpage2
.44a3			deczp2
.44a3	08		               php
.44a4	c6 fd		               dec  zpage2
.44a6	d0 02		               bne  nopage
.44a8	c6 fe		               dec  zpage2+1
.44aa	28		nopage         plp
.44ab	60		               rts
.44ac			savezp1
.44ac	08		               php
.44ad	48		               pha
.44ae	a5 fb		               lda  zpage1
.44b0	8d 3d 45	               sta  zp1
.44b3	a5 fc		               lda  zpage1+1
.44b5	8d 3e 45	               sta  zp1+1
.44b8	68		               pla
.44b9	28		               plp
.44ba	60		               rts
.44bb			restzp1
.44bb	08		               php
.44bc	48		               pha
.44bd	ad 3d 45	               lda zp1
.44c0	85 fb		               sta zpage1
.44c2	ad 3e 45	               lda zp1+1
.44c5	85 fc		               sta zpage1+1
.44c7	68		               pla
.44c8	28		               plp
.44c9	60		               rts
.44ca			savezp2
.44ca	08		         php
.44cb	48		         pha
.44cc	a5 fd		         lda zpage2
.44ce	8d 3f 45	         sta zp2
.44d1	a5 fe		         lda zpage2+1
.44d3	8d 40 45	         sta zp2+1
.44d6	68		         pla
.44d7	28		         plp
.44d8	60		         rts
.44d9			restzp2
.44d9	08		                php
.44da	48		                pha
.44db	ad 3f 45	                lda  zp2
.44de	85 fd		                sta  zpage2
.44e0	ad 40 45	                lda  zp2+1
.44e3	85 fe		                sta  zpage2+1
.44e5	68		                pla
.44e6	28		                plp
.44e7	60		                rts
.44e8			xy2addr
.44e8	08		                php
.44e9	48		                pha
.44ea	8a		                txa
.44eb	48		                pha
.44ec	98		                tya
.44ed	48		                pha
.44ee	ad 38 45	                lda     addr1+1
.44f1	8d 3a 45	                sta     addr2+1
.44f4	ad 37 45	                lda     addr1
.44f7	8d 39 45	                sta     addr2
.44fa	c0 00		                cpy     #$00
.44fc	f0 0f		                beq     addx
.44fe	18		moreline        clc
.44ff	6d 36 45	                adc     ymult
.4502	90 03		                bcc     norepy
.4504	ee 3a 45	                inc     addr2+1
.4507	8d 39 45	norepy          sta     addr2
.450a	88		                dey
.450b	d0 f1		                bne     moreline
.450d	8a		addx            txa
.450e	18		                clc
.450f	6d 39 45	                adc     addr2
.4512	90 03		                bcc     thatsit
.4514	ee 3a 45	                inc     addr2+1
.4517	8d 39 45	thatsit         sta     addr2
.451a	68		                pla
.451b	a8		                tay
.451c	68		                pla
.451d	aa		                tax
.451e	68		                pla
.451f	28		                plp
.4520	60		                rts
.4521			loop
.4521	ce 41 45	               dec  loopcount
.4524	d0 03		               bne  norep
.4526	ce 42 45	               dec  loopcount+1
.4529	ad 41 45	norep          lda  loopcount
.452c	c9 00		               cmp  #$00
.452e	d0 05		               bne  out
.4530	4d 42 45	               eor  loopcount+1
.4533	c9 ff		               cmp  #$ff
.4535	60		out            rts
>4536	28		ymult          .byte     40
>4537	00 00		addr1          .word     $0000
>4539	00 00		addr2          .word     $0000
>453b	00 00		bytecnt        .word     $0000
>453d	00 00		zp1            .word   $0000
>453f	00 00		zp2            .word   $0000
>4541	00 00		loopcount      .word     $0000

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>4543	01		a2hexcol       .byte     1              ; pour aputscxy
>4544	00		a2hexbkcol     .byte     %00000000
.4545			a2hexpos
>4545	00		a2hexpx        .byte     0              ; pour aputsxy
>4546	00		a2hexpy        .byte     0
>4547	24		a2hexprefix    .byte     "$"            ; pour aputs
>4548	00 00		a2hexstr       .word     $00
>454a	00 00		               .word     $00
>454c	00		               .byte     0              ; 0 end string
>454d	30 30 30 30	abin           .null     "00000000"
>4551	30 30 30 30 00
>4556	20 20 20 00	adec           .null     "   "
.455a			putahexfmtxy
.455a	20 77 43	               jsr  push
.455d	20 a9 45	               jsr  atohex
.4560	ae 45 45	               ldx  a2hexpx
.4563	ac 46 45	               ldy  a2hexpy
.4566	20 93 40	               jsr  gotoxy
.4569	a2 47		               ldx  #<a2hexprefix
.456b	a0 45		               ldy  #>a2hexprefix
.456d	20 79 40	               jsr  puts
.4570	20 b6 43	               jsr  pop
.4573	60		               rts
.4574			putahexfmt
.4574	20 77 43	               jsr  push
.4577	20 a9 45	               jsr  atohex
.457a	a2 47		               ldx  #<a2hexprefix
.457c	a0 45		               ldy  #>a2hexprefix
.457e	20 79 40	               jsr  puts
.4581	20 b6 43	               jsr  pop
.4584	60		               rts
.4585			putahex
.4585	20 77 43	               jsr  push
.4588	20 a9 45	               jsr  atohex
.458b	a2 48		               ldx  #<a2hexstr
.458d	a0 45		               ldy  #>a2hexstr
.458f	20 79 40	               jsr  puts
.4592	20 b6 43	               jsr  pop
.4595	60		               rts
.4596			nibtohex
.4596	08		               php
.4597	29 0f		               and  #$0f
.4599	f8		               sed
.459a	18		               clc
.459b	69 90		               adc  #$90
.459d	69 40		               adc  #$40
.459f	d8		               cld
.45a0	28		               plp
.45a1	60		               rts
.45a2			lsra4bits
.45a2	08		               php
.45a3	4a		               lsr
.45a4	4a		               lsr
.45a5	4a		               lsr
.45a6	4a		               lsr
.45a7	28		               plp
.45a8	60		               rts
.45a9			atohex
.45a9	08		               php
.45aa	48		               pha
.45ab	48		               pha
.45ac	20 a2 45	               jsr  lsra4bits
.45af	20 96 45	               jsr  nibtohex
.45b2	8d 48 45	               sta  a2hexstr
.45b5	68		               pla
.45b6	20 96 45	               jsr  nibtohex
.45b9	8d 49 45	               sta  a2hexstr+1
.45bc	a9 00		               lda  #$00                ; set end of string
.45be	8d 4a 45	               sta  a2hexstr+2
.45c1	68		               pla
.45c2	28		               plp
.45c3	60		               rts
.45c4			xy2hex
.45c4	20 77 43	               jsr  push
.45c7	20 a9 45	               jsr  atohex
.45ca	8a		               txa
.45cb	48		               pha
.45cc	20 a2 45	               jsr  lsra4bits
.45cf	20 96 45	               jsr  nibtohex
.45d2	8d 48 45	               sta  a2hexstr
.45d5	68		               pla
.45d6	20 96 45	               jsr  nibtohex
.45d9	8d 49 45	               sta  a2hexstr+1
.45dc	98		               tya
.45dd	48		               pha
.45de	20 a2 45	               jsr  lsra4bits
.45e1	20 96 45	               jsr  nibtohex
.45e4	8d 4a 45	               sta  a2hexstr+2
.45e7	68		               pla
.45e8	20 96 45	               jsr  nibtohex
.45eb	8d 4b 45	               sta  a2hexstr+3
.45ee	a9 00		               lda  #$00                ; 0 ended string
.45f0	8d 4c 45	               sta  a2hexstr+4
.45f3	20 b6 43	               jsr  pop
.45f6			atobin
.45f6	20 77 43	               jsr  push
.45f9	a2 08		               ldx  #8
.45fb	a0 00		               ldy  #0
.45fd	18		               clc
.45fe	2a		nextbit        rol
.45ff	48		               pha
.4600	69 00		               adc  #$00
.4602	29 01		               and  #$01
.4604	20 96 45	               jsr  nibtohex
.4607	99 4d 45	               sta  abin,y
.460a	68		               pla
.460b	c8		               iny
.460c	ca		               dex
.460d	d0 ef		               bne  nextbit
.460f	a9 00		               lda  #0
.4611	99 4d 45	               sta  abin,y
.4614	20 b6 43	               jsr  pull
.4617	60		               rts
.4618			putabin
.4618	20 f6 45	               jsr     atobin
.461b	20 77 43	               jsr     push
.461e	a2 4d		               ldx     #<abin
.4620	a0 45		               ldy     #>abin
.4622	20 79 40	               jsr     puts
.4625	20 b6 43	               jsr     pop
.4628	60		               rts
.4629			printabin
.4629	20 77 43	               jsr     push
.462c	a2 4d		               ldx     #<abin
.462e	a0 45		               ldy     #>abin
.4630	20 79 40	               jsr     puts
.4633	20 b6 43	               jsr     pop
.4636	60		               rts
.4637			putabinfmt
.4637	08		               php
.4638	48		               pha
.4639	a9 25		               lda     #"%"
.463b	20 73 40	               jsr     putch
.463e	68		               pla
.463f	20 18 46	               jsr     putabin
.4642	28		               plp
.4643	60		               rts
.4644			putabinxy
.4644	20 93 40	               jsr     gotoxy
.4647	20 18 46	               jsr     putabin
.464a	60		               rts
.464b			putabinfmtxy
.464b	20 93 40	               jsr     gotoxy
.464e	20 37 46	               jsr     putabinfmt
.4651	60		               rts
.4652			atodec
.4652	20 77 43	               jsr  push
.4655	f8		               sed            ; On se place en mode décimal.
.4656	aa		               tax            ; On déplace a dans x.
.4657	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.4659	a9 00		               lda  #$00      ; 0 dans A.
.465b	18		nextbit        clc            ; Bit carry a 0.
.465c	69 01		               adc  #$01      ; Ajoute 1 a A.
.465e	90 01		               bcc  decx      ; Pas de carry, pas de report.
.4660	c8		               iny            ; On incrémente Y
.4661	ca		decx           dex            ; X=X-1
.4662	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.4664	48		               pha            ; A sur le stack.
.4665	98		               tya            ; Y dans A (MSB)
.4666	20 96 45	               jsr  nibtohex  ; a hex petsci ...
.4669	8d 56 45	               sta  adec      ; ... dans tampon.
.466c	68		               pla            ; Récupere A
.466d	48		               pha            ;
.466e	20 96 45	               jsr  nibtohex
.4671	8d 58 45	               sta  adec+2
.4674	68		               pla
.4675	6a		               ror
.4676	6a		               ror
.4677	6a		               ror
.4678	6a		               ror
.4679	20 96 45	               jsr  nibtohex
.467c	8d 57 45	               sta  adec+1
.467f	d8		               cld            ; On revient en mode binaire.
.4680	20 b6 43	               jsr  pull
.4683	60		               rts
.4684			putadec
.4684	20 77 43	               jsr  push
.4687	20 52 46	               jsr  atodec
.468a	a2 56		               ldx  #<adec
.468c	a0 45		               ldy  #>adec+1
.468e	20 79 40	               jsr  puts
.4691	20 b6 43	               jsr  pop
.4694	60		               rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>4695	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>4699	00 00 00 00 00 00 00 00 00 0d 00 00
>46a5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>46a9	00 00 00 00 00 00 00 00 00 00 00 00
>46b5	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>46b9	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>46c5	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>46c9	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>46d5	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>46d9	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>46e5	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>46e9	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>46f5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>46f9	00 00 00 00 00 00 00 00 00 00 00 00
>4705	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>4709	00 00 00 00 00 00 00 00 00 00 00 00
>4715	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>4719	00 00 00 00 00 00 00 00 00 00 00 00
>4725	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>4729	00 00 00 00 00 00 00 00 00 00 00 00
>4735	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>4739	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>4745	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>4749	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>4755	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>4759	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>4765	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>4769	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>4775	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>4779	00 00 00 00 00 00 00 00 00 00 00 00
>4785	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>4789	00 00 00 00 00 00 00 00 00 00 00 00
.4795			waitstop
.4795	20 77 43	               jsr  push
.4798	20 ed f6	wait           jsr  k_stop
.479b	d0 fb		               bne  wait
.479d	20 b6 43	               jsr  pop
.47a0	60		               rts
.47a1			anykey
.47a1	08		               php
.47a2	48		               pha
.47a3	a5 cb		nokey          lda 203
.47a5	c9 40		               cmp #64
.47a7	f0 fa		               beq nokey
.47a9	20 af 47	               jsr releasekey
.47ac	68		               pla
.47ad	28		               plp
.47ae	60		               rts
.47af			releasekey
.47af	08		               php
.47b0	48		               pha
.47b1	a5 cb		keypressed     lda 203
.47b3	c9 40		               cmp #64
.47b5	d0 fa		               bne keypressed
.47b7	68		               pla
.47b8	28		               plp
.47b9	60		               rts
.47ba			getkey
.47ba	20 e4 ff	again          jsr  getin
.47bd	c9 00		               cmp  #0
.47bf	f0 f9		               beq  again
.47c1	60		               rts
.47c2			kbflushbuff
.47c2	08		               php
.47c3	48		               pha
.47c4	20 e4 ff	again          jsr  getin
.47c7	c9 00		               cmp  #0
.47c9	d0 f9		               bne  again
.47cb	68		               pla
.47cc	28		               plp
.47cd	60		               rts
.47ce			waitkey
.47ce	20 77 43	               jsr  push
.47d1	8d 1f 48	               sta  thekey
.47d4	20 e4 ff	nope           jsr  getin
.47d7	20 d2 ff	               jsr  chrout
.47da	cd 1f 48	               cmp  thekey
.47dd	d0 f5		               bne  nope
.47df	20 d2 ff	               jsr  chrout
.47e2	20 b6 43	               jsr  pop
.47e5	60		               rts
.47e6			waitspace
.47e6	20 77 43	               jsr  push
.47e9	a9 7f		wait           lda  #$7f  ;%01111111
.47eb	8d 00 dc	               sta  $dc00
.47ee	ad 01 dc	               lda  $dc01
.47f1	29 10		               and  #$10  ;mask %00010000
.47f3	d0 f4		               bne  wait
.47f5	20 b6 43	               jsr  pop
.47f8			waitsstop
.47f8	20 77 43	               jsr  push
.47fb	20 ed f6	wait           jsr  k_stop  ;%01111111
.47fe	d0 fb		               bne  wait
.4800	20 b6 43	               jsr  pop
.4803			waitreturn
.4803	20 77 43	               jsr  push
.4806	ad 20 48	               lda  thecount
.4809	8d 00 04	               sta  scrnram
.480c	a9 02		               lda  #$02
.480e	8d 00 d8	               sta  colorram
.4811	20 e4 ff	nope           jsr  getin
.4814	c9 0d		nohex          cmp  #$0d
.4816	d0 f9		               bne  nope
.4818	ee 20 48	               inc  thecount
.481b	20 b6 43	               jsr  pop
.481e	60		               rts
>481f	00		thekey         .byte   0
>4820	01		thecount       .byte   $01

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.4821			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.4821	20 77 43	                jsr push
.4824	08		                php
.4825	8d e5 49	                sta  rega
.4828	68		                pla
.4829	8d e8 49	                sta  regp
.482c	8e e6 49	                stx  regx
.482f	8c e7 49	                sty  regy
.4832	ba		                tsx
.4833	8e e9 49	                stx  regs
.4836	68		                pla
.4837	8d ec 49	                sta  regpcl
.483a	8d ed 49	                sta  regpcl2
.483d	68		                pla
.483e	8d ea 49	                sta  regpch
.4841	8d eb 49	                sta  regpch2
.4844	ad e5 49	                lda  rega
.4847	48		                pha
.4848	20 96 45	                jsr  nibtohex
.484b	8d 8f 49	                sta  vala+1
.484e	68		                pla
.484f	20 a2 45	                jsr  lsra4bits
.4852	20 96 45	                jsr  nibtohex
.4855	8d 8e 49	                sta  vala
.4858	ad e7 49	                lda  regy
.485b	48		                pha
.485c	20 96 45	                jsr  nibtohex
.485f	8d a3 49	                sta  valy+1
.4862	68		                pla
.4863	20 a2 45	                jsr  lsra4bits
.4866	20 96 45	                jsr  nibtohex
.4869	8d a2 49	                sta  valy
.486c	ad e6 49	                lda  regx
.486f	48		                pha
.4870	20 96 45	                jsr  nibtohex
.4873	8d 99 49	                sta  valx+1
.4876	68		                pla
.4877	20 a2 45	                jsr  lsra4bits
.487a	20 96 45	                jsr  nibtohex
.487d	8d 98 49	                sta  valx
.4880	ad e8 49	                lda  regp
.4883	48		                pha
.4884	20 96 45	                jsr  nibtohex
.4887	8d ad 49	                sta  valp+1
.488a	68		                pla
.488b	20 a2 45	                jsr  lsra4bits
.488e	20 96 45	                jsr  nibtohex
.4891	8d ac 49	                sta  valp
.4894	ad e9 49	                lda  regs
.4897	48		                pha
.4898	20 96 45	                jsr  nibtohex
.489b	8d b7 49	                sta  vals+1
.489e	68		                pla
.489f	20 a2 45	                jsr  lsra4bits
.48a2	20 96 45	                jsr  nibtohex
.48a5	8d b6 49	                sta  vals
.48a8	18		                clc
.48a9	ad ed 49	                lda regpcl2
.48ac	69 01		                adc #$01
.48ae	8d ed 49	                sta regpcl2
.48b1	ad ed 49	                lda regpcl2
.48b4	d0 03		                bne noreport
.48b6	ee eb 49	                inc regpch2
.48b9	ad eb 49	    noreport    lda regpch2
.48bc	48		                pha
.48bd	20 96 45	                jsr  nibtohex
.48c0	8d c2 49	                sta  valpch+1
.48c3	68		                pla
.48c4	20 a2 45	                jsr  lsra4bits
.48c7	20 96 45	                jsr  nibtohex
.48ca	8d c1 49	                sta  valpch
.48cd	ad ed 49	                lda  regpcl2
.48d0	48		                pha
.48d1	20 96 45	                jsr  nibtohex
.48d4	8d c4 49	                sta  valpcl+1
.48d7	68		                pla
.48d8	20 a2 45	                jsr  lsra4bits
.48db	20 96 45	                jsr  nibtohex
.48de	8d c3 49	                sta  valpcl
.48e1	a5 fb		                lda  zpage1
.48e3	48		                pha
.48e4	20 96 45	                jsr  nibtohex
.48e7	8d d2 49	                sta  valz1l
.48ea	68		                pla
.48eb	20 a2 45	                jsr  lsra4bits
.48ee	20 96 45	                jsr  nibtohex
.48f1	8d d3 49	                sta  valz1l+1
.48f4	a5 fc		                lda  zpage1+1
.48f6	48		                pha
.48f7	20 96 45	                jsr  nibtohex
.48fa	8d d0 49	                sta  valz1h
.48fd	68		                pla
.48fe	20 a2 45	                jsr  lsra4bits
.4901	20 96 45	                jsr  nibtohex
.4904	8d d1 49	                sta  valz1h+1
.4907	a5 fd		                lda  zpage2
.4909	48		                pha
.490a	20 96 45	                jsr  nibtohex
.490d	8d e1 49	                sta  valz2l
.4910	68		                pla
.4911	20 a2 45	                jsr  lsra4bits
.4914	20 96 45	                jsr  nibtohex
.4917	8d e2 49	                sta  valz2l+1
.491a	a5 fe		                lda  zpage2+1
.491c	48		                pha
.491d	20 96 45	                jsr  nibtohex
.4920	8d df 49	                sta  valz2h
.4923	68		                pla
.4924	20 a2 45	                jsr  lsra4bits
.4927	20 96 45	                jsr  nibtohex
.492a	8d e0 49	                sta  valz2h+1
.492d	20 5a 41	                jsr  setinverse
.4930	78		                sei
.4931	a2 87		                ldx  #<srega
.4933	a0 49		                ldy  #>srega+1
.4935	20 02 41	                jsr  putscxy
.4938	a2 91		                ldx  #<sregx
.493a	a0 49		                ldy  #>sregx+1
.493c	20 02 41	                jsr  putscxy
.493f	a2 9b		                ldx  #<sregy
.4941	a0 49		                ldy  #>sregy+1
.4943	20 02 41	                jsr  putscxy
.4946	a2 a5		                ldx  #<sregp
.4948	a0 49		                ldy  #>sregp+1
.494a	20 02 41	                jsr  putscxy
.494d	a2 af		                ldx  #<sregs
.494f	a0 49		                ldy  #>sregs+1
.4951	20 02 41	                jsr  putscxy
.4954	a2 b9		                ldx  #<sregpc
.4956	a0 49		                ldy  #>sregpc+1
.4958	20 02 41	                jsr  putscxy
.495b	a2 c7		                ldx  #<sregz1
.495d	a0 49		                ldy  #>sregz1+1
.495f	20 02 41	                jsr  putscxy
.4962	a2 d6		                ldx  #<sregz2
.4964	a0 49		                ldy  #>sregz2+1
.4966	20 02 41	                jsr  putscxy
.4969	58		                cli
.496a	20 62 41	                jsr  clrinverse
.496d	ad ea 49	                lda  regpch
.4970	48		                pha
.4971	ad ec 49	                lda  regpcl
.4974	48		                pha
.4975	ac e7 49	                ldy  regy
.4978	ae e6 49	                ldx  regx
.497b	ad e8 49	                lda  regp
.497e	48		                pha
.497f	ad e5 49	                lda  rega
.4982	28		                plp
.4983	20 b6 43	                jsr pop
.4986	60		                rts
>4987	01 00 17	srega   .byte   colr,coln,line
>498a	20 41 3a 24	        .text   ' a:$' ;4,24
>498e	00 00 00	vala    .byte   0,0,0
>4991	01 06 17	sregx   .byte   colr,coln+6,line
>4994	20 58 3a 24	        .text   ' x:$' ;4,24
>4998	00 00 00	valx    .byte   0,0,0
>499b	01 0c 17	sregy   .byte   colr,coln+12,line
>499e	20 59 3a 24	        .text   ' y:$' ;4,24
>49a2	00 00 00	valy    .byte   0,0,0
>49a5	01 12 17	sregp   .byte   colr,coln+18,line
>49a8	20 50 3a 24	        .text   ' p:$' ;4,24
>49ac	00 00 00	valp    .byte   0,0,0
>49af	01 18 17	sregs   .byte   colr,coln+24,line
>49b2	20 53 3a 24	        .text   ' s:$' ;4,24
>49b6	00 00 00	vals    .byte   0,0,0
>49b9	01 1e 17	sregpc  .byte   colr,coln+30,line
>49bc	20 50 43 3a	        .text   ' pc:$' ;4,24
>49c0	24
>49c1	00 00		valpch  .byte   0,0
>49c3	00 00 20 00	valpcl  .byte   0,0,32,0
>49c7	01 03 18	sregz1  .byte   colr,coln+3,line+1
>49ca	20 5a 50 31	        .text   ' zp1:$' ;4,24
>49ce	3a 24
>49d0	00 00		valz1h  .byte   0,0
>49d2	00 00 20 00	valz1l  .byte   0,0,32,0
>49d6	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>49d9	20 5a 50 32	        .text   ' zp2:$' ;4,24
>49dd	3a 24
>49df	00 00		valz2h  .byte   0,0
>49e1	00 00 20 00	valz2l  .byte   0,0,32,0
>49e5	00		rega    .byte   0
>49e6	00		regx    .byte   0
>49e7	00		regy    .byte   0
>49e8	00		regp    .byte   0
>49e9	00		regs    .byte   0
>49ea	00		regpch  .byte   0
>49eb	00		regpch2 .byte   0
>49ec	00		regpcl  .byte   0
>49ed	00		regpcl2 .byte   0
>49ee	00		vzp1h   .byte   0
>49ef	00		vzp1l   .byte   0
>49f0	00		vzp2h   .byte   0
>49f1	00		vzp2l   .byte   0

;******  Return to file: libtest03.asm


;******  End of listing

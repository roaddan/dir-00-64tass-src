
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L libtest03.txt -o libtest03.prg libtest03.asm
; Sun Apr 20 20:11:14 2025

;Offset	;Hex		;Source

;******  Processing input file: libtest03.asm

="20250405-231555 "	                Version = "20250405-231555 "

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c de 09	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: libtest03.asm


;******  Processing file: strings_fr.asm

.0854			headera
>0854	13 1d 1d 1d	               .byte     b_home,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right
>0858	1d
>0859	20 c3 4f 4d	               .text              " Commodore 64 test de libraries "
>085d	4d 4f 44 4f 52 45 20 36 34 20 54 45 53 54 20 44
>086d	45 20 4c 49 42 52 41 52 49 45 53 20
>0879	0d 00		               .byte     $0d,0
>087b	20 20 20 20	headerb        .text          "               libtest03 "
>087f	20 20 20 20 20 20 20 20 20 20 20 4c 49 42 54 45
>088f	53 54 30 33 20
>0894	0d		               .byte     $0d
>0895	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0899	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>08a9	45 4c 20 cc 41 46 52 41 4e 43 45
>08b4	0d		               .byte     $0d
>08b5	20 20 20 20	               .text   format("       Version: %s",Version)
>08b9	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>08c9	30 34 30 35 2d 32 33 31 35 35 35 20
>08d5	0d 00		               .byte     $0d,0
>08d7	0d		shortcuts      .byte     $0d
>08d8	91 91		               .byte     ucurkey,ucurkey
>08da	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>08de	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>08e2	1d
>08e3	20 d2 20 c1	               .text          " R A C C O U R C I S "
>08e7	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>08f7	20
>08f8	0d		               .byte     $0d
>08f9	20 4c 49 42	               .text   format(" libtest03: SYS%05d (jsr $%04X)",main, main)
>08fd	54 45 53 54 30 33 3a 20 d3 d9 d3 30 32 35 32 36
>090d	20 28 4a 53 52 20 24 30 39 c4 c5 29
>0919	0d		               .byte     $0d
>091a	20 41 49 44	               .text   format(" aide.....: SYS%05d (jsr $%04X)",aide, aide)
>091e	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 36 34 33
>092e	20 28 4a 53 52 20 24 30 c1 35 33 29
>093a	0d		               .byte     $0d
>093b	20 43 4c 53	               .text   format(" cls......: SYS%05d (jsr $%04X)",cls, cls)
>093f	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 38 39 37
>094f	20 28 4a 53 52 20 24 30 c2 35 31 29
>095b	0d 00		               .byte     $0d,0
>095d	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d (jsr $%04X)",libtest03, libtest03)
>0961	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 37 36 33
>0971	20 28 4a 53 52 20 24 30 c1 c3 c2 29
>097d	0d 0d		               .byte     $0d, $0d
>097f	20 20 20 20	                .text   format("    ex.: SYS%05d",libtest03)
>0983	45 58 2e 3a 20 d3 d9 d3 30 32 37 36 33
>0990	0d		                .byte     $0d
>0991	20 20 20 20	                .text   format("    for i=0to100:SYS%05d:next",libtest03)
>0995	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>09a5	30 32 37 36 33 3a 4e 45 58 54
>09af	0d 00		                .byte     $0d,0
>09b1	20 c0 c0 c0	line            .byte     $20,192,192,192,192,192,192,192,192,192
>09b5	c0 c0 c0 c0 c0 c0
>09bb	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09bf	c0 c0 c0 c0 c0 c0
>09c5	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>09c9	c0 c0 c0 c0 c0 c0
>09cf	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192
>09d3	c0 c0 c0 c0 c0
>09d8	0d 00		                .byte     $0d,0
>09da	01 00 00 00	dataloc         .byte       1,0,0,0

;******  Return to file: libtest03.asm

.09de			main
.09de	20 31 0b	               jsr scrmaninit
.09e1	08		               php
.09e2	48		               pha
.09e3	a9 8e		               lda  #b_uppercase
.09e5	8d 50 0b	               sta  characterset
.09e8	20 d2 ff	               jsr  $ffd2
.09eb	68		               pla
.09ec	28		               plp
.09ed	08		               php
.09ee	48		               pha
.09ef	a9 8e		               lda  #b_uppercase
.09f1	20 d2 ff	               jsr  $ffd2
.09f4	68		               pla
.09f5	28		               plp
.09f6	08		               php
.09f7	48		               pha
.09f8	a9 08		               lda  #$08
.09fa	20 d2 ff	               jsr  $ffd2
.09fd	68		               pla
.09fe	28		               plp
.09ff	20 53 0a	               jsr aide
.0a02	20 b0 0d	               jsr  push
.0a05	48		               pha
.0a06	a9 05		               lda  #cvert
.0a08	8d 20 d0	               sta  $d020
.0a0b	68		               pla
.0a0c	48		               pha
.0a0d	a9 06		               lda  #cbleu
.0a0f	8d 21 d0	               sta  $d021
.0a12	68		               pla
.0a13	48		               pha
.0a14	a9 01		               lda  #cblanc
.0a16	8d 86 02	               sta  bascol
.0a19	68		               pla
.0a1a	20 ef 0d	               jsr  pull
.0a1d	20 cb 0a	               jsr libtest03
.0a20	08		               php
.0a21	48		               pha
.0a22	a9 09		               lda  #$09
.0a24	20 d2 ff	               jsr  $ffd2
.0a27	68		               pla
.0a28	28		               plp
.0a29	08		               php
.0a2a	48		               pha
.0a2b	a9 8e		               lda  #b_uppercase
.0a2d	8d 50 0b	               sta  characterset
.0a30	20 d2 ff	               jsr  $ffd2
.0a33	68		               pla
.0a34	28		               plp
.0a35	20 51 0b	               jsr  cls
.0a38	20 b0 0d	               jsr  push
.0a3b	48		               pha
.0a3c	a9 05		               lda  #cvert
.0a3e	8d 20 d0	               sta  $d020
.0a41	68		               pla
.0a42	48		               pha
.0a43	a9 06		               lda  #cbleu
.0a45	8d 21 d0	               sta  $d021
.0a48	68		               pla
.0a49	48		               pha
.0a4a	a9 01		               lda  #cblanc
.0a4c	8d 86 02	               sta  bascol
.0a4f	68		               pla
.0a50	20 ef 0d	               jsr  pull
.0a53			aide
.0a53	08		               php
.0a54	48		               pha
.0a55	a9 0e		               lda  #14
.0a57	8d 50 0b	               sta  characterset
.0a5a	20 d2 ff	               jsr  $ffd2
.0a5d	68		               pla
.0a5e	28		               plp
.0a5f	20 51 0b	               jsr cls
.0a62	20 b0 0d	               jsr  push
.0a65	a2 b1		               ldx  #<line
.0a67	a0 09		               ldy  #>line
.0a69	20 6e 0b	               jsr  puts
.0a6c	20 ef 0d	               jsr  pull
.0a6f	20 b0 0d	               jsr  push
.0a72	a2 54		               ldx  #<headera
.0a74	a0 08		               ldy  #>headera
.0a76	20 6e 0b	               jsr  puts
.0a79	20 ef 0d	               jsr  pull
.0a7c	20 b0 0d	               jsr  push
.0a7f	a2 7b		               ldx  #<headerb
.0a81	a0 08		               ldy  #>headerb
.0a83	20 6e 0b	               jsr  puts
.0a86	20 ef 0d	               jsr  pull
.0a89	20 b0 0d	               jsr  push
.0a8c	a2 b1		               ldx  #<line
.0a8e	a0 09		               ldy  #>line
.0a90	20 6e 0b	               jsr  puts
.0a93	20 ef 0d	               jsr  pull
.0a96	20 b0 0d	               jsr  push
.0a99	a2 b1		               ldx  #<line
.0a9b	a0 09		               ldy  #>line
.0a9d	20 6e 0b	               jsr  puts
.0aa0	20 ef 0d	               jsr  pull
.0aa3	20 b0 0d	               jsr  push
.0aa6	a2 d7		               ldx  #<shortcuts
.0aa8	a0 08		               ldy  #>shortcuts
.0aaa	20 6e 0b	               jsr  puts
.0aad	20 ef 0d	               jsr  pull
.0ab0	20 b0 0d	               jsr  push
.0ab3	a2 5d		               ldx  #<aidetext
.0ab5	a0 09		               ldy  #>aidetext
.0ab7	20 6e 0b	               jsr  puts
.0aba	20 ef 0d	               jsr  pull
.0abd	20 b0 0d	               jsr  push
.0ac0	a2 b1		               ldx  #<line
.0ac2	a0 09		               ldy  #>line
.0ac4	20 6e 0b	               jsr  puts
.0ac7	20 ef 0d	               jsr  pull
.0aca	60		               rts
.0acb			libtest03
.0acb	08		               php
.0acc	48		               pha
.0acd	20 51 0b	               jsr  cls
.0ad0	a9 a6		               lda  #166
.0ad2	48		nexta          pha
.0ad3	20 b0 0d	               jsr  push
.0ad6	a2 da		               ldx  #<dataloc
.0ad8	a0 09		               ldy  #>dataloc
.0ada	20 f7 0b	               jsr  putscxy
.0add	20 ef 0d	               jsr  pull
.0ae0	48		               pha
.0ae1	a9 03		               lda  #ccyan
.0ae3	8d 86 02	               sta  bascol
.0ae6	68		               pla
.0ae7	08		               php
.0ae8	ae 27 0b	               ldx  valeur
.0aeb	ad 28 0b	               lda  valeur+1
.0aee	28		               plp
.0aef	20 66 0c	               jsr  b_pr_ax_str
.0af2			again
.0af2	20 b0 0d	               jsr  push
.0af5	a2 00		               ldx  #0
.0af7	a0 08		               ldy  #8
.0af9	20 88 0b	               jsr  gotoxy
.0afc	20 ef 0d	               jsr  pop
.0aff	20 70 0c	               jsr  b_getascnum
.0b02	20 b0 0d	               jsr  push
.0b05	a2 01		               ldx  #1
.0b07	a0 0a		               ldy  #10
.0b09	20 88 0b	               jsr  gotoxy
.0b0c	20 ef 0d	               jsr  pop
.0b0f	a0 55		               ldy  #$55
.0b11	20 02 0d	               jsr  b_printbuff
.0b14	20 5a 12	               jsr  showregs
.0b17	20 73 0d	               jsr  b_floattomem
.0b1a	20 a3 0d	               jsr  b_outsub
.0b1d	4c f2 0a	               jmp  again
.0b20	20 da 11	               jsr  anykey
.0b23	68		out            pla
.0b24	28		               plp
.0b25	60		               rts
>0b26	a6		car            .byte     166
>0b27	3a 30		valeur         .word     12346

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0b29	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0b2d	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0b31			libtart

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0b31			scrmaninit
.0b31	20 b0 0d	               jsr  push
.0b34	a9 06		               lda  #vbleu
.0b36	8d 21 d0	               sta  vicbackcol
.0b39	a9 05		               lda  #vvert
.0b3b	8d 20 d0	               sta  vicbordcol
.0b3e	a9 01		               lda  #vblanc
.0b40	8d 86 02	               sta  bascol
.0b43	ad 00 04	               lda  scrnram
.0b46	8d 00 04	               sta  scrnram
.0b49	20 51 0b	               jsr  cls
.0b4c	20 ef 0d	               jsr  pop
.0b4f	60		               rts
>0b50	8e		characterset   .byte b_uppercase
.0b51			cls
.0b51	08		               php
.0b52	48		               pha
.0b53	a9 93		               lda  #$93
.0b55	20 68 0b	               jsr  putch
.0b58	68		               pla
.0b59	28		               plp
.0b5a	60		               rts
.0b5b			putnch
.0b5b	08		               php
.0b5c	e0 00		               cpx  #$00
.0b5e	f0 06		               beq  out
.0b60	20 d2 ff	again          jsr  $ffd2
.0b63	ca		               dex
.0b64	d0 fa		               bne  again
.0b66	28		out            plp
.0b67	60		               rts
.0b68			putch
.0b68	08		               php
.0b69	20 d2 ff	               jsr  $ffd2
.0b6c	28		               plp
.0b6d	60		               rts
.0b6e			puts
.0b6e	20 b0 0d	               jsr  push
.0b71	86 fb		               stx  zpage1
.0b73	84 fc		               sty  zpage1+1
.0b75	a0 00		               ldy  #0
.0b77	b1 fb		next           lda  (zpage1),y
.0b79	f0 09		               beq  exit
.0b7b	20 68 0b	               jsr  putch
.0b7e	20 b7 0e	               jsr  inczp1
.0b81	4c 77 0b	               jmp  next
.0b84	20 ef 0d	exit           jsr  pop
.0b87	60		               rts
.0b88			gotoxy
.0b88	08		               php
.0b89	18		               clc
.0b8a	8a		               txa
.0b8b	48		               pha
.0b8c	98		               tya
.0b8d	aa		               tax
.0b8e	68		               pla
.0b8f	a8		               tay
.0b90	20 f0 ff	               jsr  kplot
.0b93	28		               plp
.0b94	60		               rts
.0b95			cursor
=$0286			bascol    =    $0286
.0b95	08		               php            ;tourlou
.0b96	48		               pha
.0b97	90 12		               bcc  restore
.0b99	20 f0 ff	               jsr  kplot
.0b9c	8c bd 0b	               sty  cx
.0b9f	8e be 0b	               stx  cy
.0ba2	ad 86 02	               lda  bascol
.0ba5	8d bf 0b	               sta  bcol
.0ba8	4c ba 0b	               jmp  out
.0bab	ae be 0b	restore        ldx  cy
.0bae	ac bd 0b	               ldy  cx
.0bb1	20 f0 ff	               jsr  kplot
.0bb4	ad bf 0b	               lda  bcol
.0bb7	8d 86 02	               sta  bascol
.0bba	68		out            pla
.0bbb	28		               plp
.0bbc	60		               rts
>0bbd	00		cx   .byte     $00
>0bbe	00		cy   .byte     $00
>0bbf	00		bcol .byte     $00
.0bc0			cursave
.0bc0	08		               php
.0bc1	38		               sec
.0bc2	20 95 0b	               jsr  cursor
.0bc5	28		               plp
.0bc6	60		               rts
.0bc7			curput
.0bc7	08		               php
.0bc8	18		               clc
.0bc9	20 95 0b	               jsr  cursor
.0bcc	28		               plp
.0bcd	60		               rts
.0bce			putsxy
.0bce	20 b0 0d	               jsr  push
.0bd1	86 fb		               stx  zpage1
.0bd3	84 fc		               sty  zpage1+1
.0bd5	a0 00		               ldy  #$00
.0bd7	b1 fb		               lda  (zpage1),y
.0bd9	aa		               tax
.0bda	20 b7 0e	               jsr  inczp1
.0bdd	b1 fb		               lda  (zpage1),y
.0bdf	a8		               tay
.0be0	20 88 0b	               jsr  gotoxy
.0be3	20 b7 0e	               jsr  inczp1
.0be6	a6 fb		               ldx  zpage1
.0be8	a4 fc		               ldy  zpage1+1
.0bea	20 6e 0b	               jsr  puts
.0bed	20 ef 0d	               jsr  pop
.0bf0	60		               rts
>0bf1	00 00		straddr   .word     $00
>0bf3	00		px        .byte     $00
>0bf4	00		py        .byte     $00
>0bf5	00 00		zp1       .word     $00
.0bf7			putscxy
.0bf7	20 b0 0d	               jsr  push
.0bfa	84 fc		               sty  zpage1+1
.0bfc	86 fb		               stx  zpage1
.0bfe	ad 86 02	               lda  bascol
.0c01	8d 21 0c	               sta  bc
.0c04	a0 00		               ldy #$00
.0c06	b1 fb		               lda  (zpage1),y
.0c08	8d 86 02	               sta  bascol
.0c0b	20 b7 0e	               jsr  inczp1
.0c0e	a6 fb		               ldx  zpage1
.0c10	a4 fc		               ldy  zpage1+1
.0c12	20 ce 0b	               jsr  putsxy
.0c15	ad 21 0c	               lda  bc
.0c18	8d 86 02	               sta  bascol
.0c1b	20 ef 0d	               jsr  pop
.0c1e	60		               rts
>0c1f	00 00		straddr  .word      $00
>0c21	00		bc       .byte      $00
>0c22	00 00		zp1      .word      $00
.0c24			putrahex
.0c24	08		               php
.0c25	48		               pha
.0c26	20 e2 0f	               jsr  atohex
.0c29	a9 81		               lda  #<a2hexstr
.0c2b	a0 0f		               ldy  #>a2hexstr
.0c2d	20 6e 0b	               jsr  puts
.0c30	68		               pla
.0c31	28		               plp
.0c32	60		               rts
.0c33			kputrahexxy
.0c33			bputrahexxy
.0c33			putrahexxy
.0c33	08		               php
.0c34	20 e2 0f	               jsr  atohex
.0c37	a9 7e		               lda  #<a2hexpos
.0c39	a0 0f		               ldy  #>a2hexpos
.0c3b	20 ce 0b	               jsr  putsxy
.0c3e	68		               pla
.0c3f	28		               plp
.0c40	60		               rts
.0c41			putrahexcxy
.0c41	08		               php
.0c42	20 e2 0f	               jsr  atohex
.0c45	a9 7e		               lda  #<a2hexpos
.0c47	a0 0f		               ldy  #>a2hexpos
.0c49	20 f7 0b	               jsr  putscxy
.0c4c	68		               pla
.0c4d	28		               plp
.0c4e	60		               rts
.0c4f			setinverse
.0c4f	48		               pha
.0c50	a9 12		               lda  #$12
.0c52	20 d2 ff	               jsr  $ffd2
.0c55	68		               pla
.0c56	60		               rts
.0c57			clrinverse
.0c57	48		               pha
.0c58	a9 92		               lda  #$92
.0c5a	20 d2 ff	               jsr  $ffd2
.0c5d	68		               pla
.0c5e	60		               rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2-math.asm

.0c5f			b_math_template
.0c5f	20 b0 0d				jsr	push
.0c62	20 ef 0d				jsr	pop
.0c65	60					rts
.0c66			b_pr_ax_str
.0c66	20 b0 0d				jsr	push
.0c69	20 cd bd				jsr	b_axout
.0c6c	20 ef 0d				jsr	pop
.0c6f	60					rts
.0c70			b_getascnum
.0c70	20 b0 0d				jsr	push
.0c73	20 bf e3				jsr	b_intcgt		; Initialyse charget
.0c76	20 f1 0c				jsr	b_clearbuff	; Clear basic input buffer
.0c79	20 f9 ab				jsr	b_prompt		; Prompt for ? and fill buffer by reading...
.0c7c	86 7a					stx	$7a			; X and Y points to $01ff on return.
.0c7e	84 7b					sty	$7b
.0c80	20 73 00				jsr	b_chrget
.0c83	20 f3 bc				jsr	b_ascflt		; Convert ASCII string at 0200 to FAC1 FP.
.0c86	20 dd bd				jsr	b_facasc		; Converts FAC1 to ASCII string at 100.
.0c89	20 90 0d				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.0c8c	20 ef 0d				jsr	pop
.0c8f	60					rts
>0c90			b_asc_buffer	.fill	$60
>0cf0	00		b_bufflenght	.byte	$00
.0cf1			b_clearbuff
.0cf1	20 b0 0d				jsr	push
.0cf4	a9 00					lda	#$00
.0cf6	a0 59					ldy	#$59
.0cf8	99 00 02	clear		sta	$0200,y		; Clear Basic input buffer
.0cfb	88					dey
.0cfc	d0 fa					bne	clear		; 60 bytes.
.0cfe	20 ef 0d				jsr	pop
.0d01	60					rts
.0d02			b_printbuff
.0d02	20 b0 0d				jsr	push
.0d05	a9 00					lda	#$00			; Set $22 to point to string at 100
.0d07	85 22					sta	$22
.0d09	a9 01					lda	#$01
.0d0b	85 23					sta	$23
.0d0d	ad f0 0c				lda	b_bufflenght
.0d10	20 24 ab				jsr	b_strout
.0d13	20 ef 0d				jsr	pop
.0d16	60					rts
.0d17			b_insub
.0d17	20 b0 0d				jsr	push
.0d1a	20 bf e3				jsr	b_intcgt	; Initialize CHRGET.
.0d1d	20 f1 0c				jsr	b_clearbuff
.0d20	20 f9 ab				jsr	b_prompt
.0d23	86 7a					stx	$7a
.0d25	84 7b					sty	$7b
.0d27	20 73 00				jsr	b_chrget
.0d2a	20 f3 bc				jsr	b_ascflt	; Convert ascii string to floating point in FAC1.
.0d2d	20 ef 0d				jsr	pop
.0d30	60					rts
.0d31			b_readmemfloat
.0d31	20 b0 0d				jsr	push
.0d34	20 bf e3				jsr	b_intcgt	; Initialize CHRGET.
.0d37	a2 83					ldx	#$83		; Set pointer to fvar as location for var minus 1
.0d39	a0 c5					ldy	#$c5
.0d3b	86 7a					stx	$7a
.0d3d	84 7b					sty	$7b
.0d3f	20 73 00				jsr	b_chrget
.0d42	20 f3 bc				jsr	b_ascflt	; Convert ascii string to floating point in FAC1.
.0d45	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0d48	20 90 0d				jsr	b_getbufflen
.0d4b	20 ef 0d				jsr	pop
.0d4e	60					rts
.0d4f			b_fac1tomem
.0d4f	20 b0 0d				jsr	push
.0d52	20 17 0d				jsr	b_insub		; Input first number.
.0d55	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057.
.0d58	20 17 0d				jsr	b_insub		; Input second number.
.0d5b	a9 57					lda	#$57
.0d5d	a0 00					ldy	#$00			; Point to 1st number.
.0d5f	20 28 ba				jsr	b_f1xfv		; FAC1 = FAC1 X FVAR.
.0d62	a2 6d					ldx	#<b_multresult	; Set pointer to area to copy result to.
.0d64	a0 0d					ldy	#>b_multresult
.0d66	20 d4 bb				jsr	b_f1tmem		; Copy FAC1 to memory.
.0d69	20 ef 0d				jsr	pop
.0d6c	60					rts
>0d6d	00 00 00 00	b_multresult	.byte 0,0,0,0,0,0
>0d71	00 00
.0d73			b_floattomem
.0d73	20 b0 0d				jsr	push
.0d76	20 17 0d				jsr	b_insub		; Get first number.
.0d79	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057.
.0d7c	20 17 0d				jsr	b_insub	;	 Get second number.
.0d7f	a9 57					lda	#$57
.0d81	a0 00					ldy	#$00			; Set pointer to FVAR.
.0d83	20 28 ba				jsr	b_f1xfv		; FAC1 = FAC1 x FVAR.
.0d86	20 dd bd				jsr	b_facasc		; Convert FAC1 to ascii string at $0100.
.0d89	20 90 0d				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.0d8c	20 ef 0d				jsr	pop
.0d8f	60					rts
.0d90			b_getbufflen
.0d90	20 b0 0d				jsr	push
.0d93	a0 ff					ldy	#$ff
.0d95	c8		nxtchar		iny				; Determine lenght of string by ...
.0d96	b9 00 01				lda	$0100,y		; ... searching for $00 EOS byte.
.0d99	d0 fa					bne	nxtchar
.0d9b	c8					iny
.0d9c	8c f0 0c				sty	b_bufflenght	; Store buffer lenght in common variable.
.0d9f	20 ef 0d				jsr	pop
.0da2	60					rts
.0da3			b_outsub
.0da3	20 b0 0d				jsr	push
.0da6	20 90 0d				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.0da9	20 02 0d				jsr	b_printbuff	; Print buffer content on output device.
.0dac	20 ef 0d				jsr	pop
.0daf	60					rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0db0			push
.0db0	08		          php            ; stack : flg, pcl, pch
.0db1	78		          sei
.0db2	8d ec 0d	          sta  ra        ; save a
.0db5	68		          pla            ; stack : pcl, pch
.0db6	8d eb 0d	          sta  rp        ; save rp
.0db9	68		          pla            ; stack : pch
.0dba	8d ed 0d	          sta  pc        ; save pcl
.0dbd	68		          pla            ; stack : -
.0dbe	8d ee 0d	          sta  pc+1      ; save pch
.0dc1	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0dc3	48		          pha            ; stack : zp1l
.0dc4	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0dc6	48		          pha            ; stack : zp1h, zp1l
.0dc7	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0dc9	48		          pha            ; stack : zp2l, zp1h, zp1l
.0dca	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0dcc	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0dcd	ad eb 0d	          lda  rp        ; get rp
.0dd0	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0dd1	ad ec 0d	          lda  ra        ; get a
.0dd4	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0dd5	8a		          txa            ; get x
.0dd6	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0dd7	98		          tya            ; get y
.0dd8	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0dd9	ad ee 0d	          lda  pc+1      ; get pch
.0ddc	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ddd	ad ed 0d	          lda  pc        ; get pcl
.0de0	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0de1	ad eb 0d	          lda  rp        ; get rp
.0de4	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0de5	ad ec 0d	          lda  ra        ; get a
.0de8	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0de9	58		          cli
.0dea	60		          rts
>0deb	00		rp        .byte     0
>0dec	00		ra        .byte     0
>0ded	00 00		pc        .word     0
.0def			pull
.0def			pop
.0def	78		          sei
.0df0	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0df1	8d 24 0e	          sta  pc        ; save pcl
.0df4	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0df5	8d 25 0e	          sta  pc+1      ; save pch
.0df8	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0df9	a8		          tay            ; set y
.0dfa	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0dfb	aa		          tax            ; set x
.0dfc	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0dfd	8d 23 0e	          sta  ra        ; save a
.0e00	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0e01	8d 22 0e	          sta  rp        ; save rp
.0e04	68		          pla            ; stack : zp2l, zp1h, zp1l
.0e05	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0e07	68		          pla            ; stack : zp1h, zp1l
.0e08	85 fd		          sta  zpage2    ; get zpage2 High byte
.0e0a	68		          pla            ; stack : zp1l
.0e0b	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0e0d	68		          pla            ; stack :
.0e0e	85 fb		          sta  zpage1    ; get zpage1 High byte
.0e10	ad 25 0e	          lda  pc+1      ; get pch
.0e13	48		          pha            ; stack : pch
.0e14	ad 24 0e	          lda  pc
.0e17	48		          pha            ; stack : pcl, pch
.0e18	ad 22 0e	          lda  rp        ; get rp
.0e1b	48		          pha            ; stack : rp, pcl, pch
.0e1c	ad 23 0e	          lda  ra        ; set ra
.0e1f	58		          cli
.0e20	28		          plp            ; stack : pcl, pch
.0e21	60		          rts
>0e22	00		rp        .byte     0
>0e23	00		ra        .byte     0
>0e24	00 00		pc        .word     0

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0e26			blkfill
.0e26	20 b0 0d	bf0            jsr  push
.0e29	20 e5 0e	               jsr  savezp1
.0e2c	84 fc		               sty  zpage1+1
.0e2e	a0 00		               ldy  #$00
.0e30	84 fb		               sty  zpage1
.0e32	91 fb		bf1            sta  (zpage1),y
.0e34	c8		               iny
.0e35	d0 fb		               bne  bf1
.0e37	20 f4 0e	               jsr  restzp1
.0e3a	20 ef 0d	               jsr  pop
.0e3d	60		               rts
.0e3e			memfill
.0e3e	20 b0 0d	               jsr  push
.0e41	20 26 0e	mf1            jsr  blkfill
.0e44	c8		               iny
.0e45	ca		               dex
.0e46	d0 f9		               bne  mf1
.0e48	20 ef 0d	               jsr  pop
.0e4b	60		               rts
.0e4c			memmove
.0e4c	20 b0 0d	               jsr  push
.0e4f	ba		               tsx            ; On se crée un pointeur ...
.0e50	8a		               txa
.0e51	18		               clc
.0e52	69 0b		               adc  #11
.0e54	a8		               tay
.0e55	a2 06		               ldx  #$06
.0e57	b9 00 01	nextbyte       lda  $0100,y
.0e5a	99 a6 0e	               sta  words,y
.0e5d	c8		               iny
.0e5e	ca		               dex
.0e5f	d0 f6		               bne  nextbyte
.0e61	ad a6 0e	               lda  s
.0e64	8d 7d 0e	               sta  source+1
.0e67	ad a7 0e	               lda  s+1
.0e6a	8d 7e 0e	               sta  source+2
.0e6d	ad a8 0e	               lda  d
.0e70	8d 7a 0e	               sta  destin+1
.0e73	ad a9 0e	               lda  d+1
.0e76	8d 7b 0e	               sta  destin+2
.0e79	ad ff ff	destin         lda  $ffff
.0e7c	8d ff ff	source         sta  $ffff
.0e7f	ee 7a 0e	               inc  destin+1
.0e82	d0 03		               bne  src
.0e84	ee 7b 0e	               inc  destin+2
.0e87	ee 7d 0e	src            inc  source+1
.0e8a	d0 03		               bne  cnt
.0e8c	ee 7e 0e	               inc  source+2
.0e8f	ad aa 0e	cnt            lda  compte
.0e92	d0 08		               bne  decit
.0e94	ad ab 0e	               lda  compte+1
.0e97	f0 09		               beq  fini
.0e99	ce ab 0e	               dec  compte+1
.0e9c	ce aa 0e	decit          dec  compte
.0e9f	4c 79 0e	               jmp  destin
.0ea2	20 ef 0d	fini           jsr  pop
.0ea5	60		               rts
.0ea6			words
>0ea6	00 00		s         .word     $0000
>0ea8	00 00		d         .word     $0000
>0eaa	00 00		compte    .word     $0000
.0eac			decword
.0eac	20 b0 0d	               jsr  push
.0eaf	86 fd		               stx  zpage2
.0eb1	84 fe		               sty  zpage2+1
.0eb3	20 ef 0d	               jsr  pop
.0eb6	60		               rts
.0eb7			inczpage1
.0eb7			inczp1
.0eb7	08		               php
.0eb8	48		               pha
.0eb9	e6 fb		               inc  zpage1
.0ebb	a5 fb		               lda  zpage1
.0ebd	d0 02		               bne  nopage
.0ebf	e6 fc		               inc  zpage1+1
.0ec1	68		nopage         pla
.0ec2	28		               plp
.0ec3	60		               rts
.0ec4			deczpage1
.0ec4			deczp1
.0ec4	08		                php
.0ec5	48		                pha
.0ec6	c6 fb		                dec  zpage1
.0ec8	d0 02		                bne  nopage
.0eca	c6 fc		                dec  zpage1+1
.0ecc	68		nopage          pla
.0ecd	28		                plp
.0ece	60		                rts
.0ecf			inczpage2
.0ecf			inczp2
.0ecf	08		               php
.0ed0	48		               pha
.0ed1	e6 fd		               inc  zpage2
.0ed3	a5 fd		               lda  zpage2
.0ed5	d0 02		               bne  nopage
.0ed7	e6 fe		               inc  zpage2+1
.0ed9	68		nopage         pla
.0eda	28		               plp
.0edb	60		               rts
.0edc			deczpage2
.0edc			deczp2
.0edc	08		               php
.0edd	c6 fd		               dec  zpage2
.0edf	d0 02		               bne  nopage
.0ee1	c6 fe		               dec  zpage2+1
.0ee3	28		nopage         plp
.0ee4	60		               rts
.0ee5			savezp1
.0ee5	08		               php
.0ee6	48		               pha
.0ee7	a5 fb		               lda  zpage1
.0ee9	8d 76 0f	               sta  zp1
.0eec	a5 fc		               lda  zpage1+1
.0eee	8d 77 0f	               sta  zp1+1
.0ef1	68		               pla
.0ef2	28		               plp
.0ef3	60		               rts
.0ef4			restzp1
.0ef4	08		               php
.0ef5	48		               pha
.0ef6	ad 76 0f	               lda zp1
.0ef9	85 fb		               sta zpage1
.0efb	ad 77 0f	               lda zp1+1
.0efe	85 fc		               sta zpage1+1
.0f00	68		               pla
.0f01	28		               plp
.0f02	60		               rts
.0f03			savezp2
.0f03	08		         php
.0f04	48		         pha
.0f05	a5 fd		         lda zpage2
.0f07	8d 78 0f	         sta zp2
.0f0a	a5 fe		         lda zpage2+1
.0f0c	8d 79 0f	         sta zp2+1
.0f0f	68		         pla
.0f10	28		         plp
.0f11	60		         rts
.0f12			restzp2
.0f12	08		                php
.0f13	48		                pha
.0f14	ad 78 0f	                lda  zp2
.0f17	85 fd		                sta  zpage2
.0f19	ad 79 0f	                lda  zp2+1
.0f1c	85 fe		                sta  zpage2+1
.0f1e	68		                pla
.0f1f	28		                plp
.0f20	60		                rts
.0f21			xy2addr
.0f21	08		                php
.0f22	48		                pha
.0f23	8a		                txa
.0f24	48		                pha
.0f25	98		                tya
.0f26	48		                pha
.0f27	ad 71 0f	                lda     addr1+1
.0f2a	8d 73 0f	                sta     addr2+1
.0f2d	ad 70 0f	                lda     addr1
.0f30	8d 72 0f	                sta     addr2
.0f33	c0 00		                cpy     #$00
.0f35	f0 0f		                beq     addx
.0f37	18		moreline        clc
.0f38	6d 6f 0f	                adc     ymult
.0f3b	90 03		                bcc     norepy
.0f3d	ee 73 0f	                inc     addr2+1
.0f40	8d 72 0f	norepy          sta     addr2
.0f43	88		                dey
.0f44	d0 f1		                bne     moreline
.0f46	8a		addx            txa
.0f47	18		                clc
.0f48	6d 72 0f	                adc     addr2
.0f4b	90 03		                bcc     thatsit
.0f4d	ee 73 0f	                inc     addr2+1
.0f50	8d 72 0f	thatsit         sta     addr2
.0f53	68		                pla
.0f54	a8		                tay
.0f55	68		                pla
.0f56	aa		                tax
.0f57	68		                pla
.0f58	28		                plp
.0f59	60		                rts
.0f5a			loop
.0f5a	ce 7a 0f	               dec  loopcount
.0f5d	d0 03		               bne  norep
.0f5f	ce 7b 0f	               dec  loopcount+1
.0f62	ad 7a 0f	norep          lda  loopcount
.0f65	c9 00		               cmp  #$00
.0f67	d0 05		               bne  out
.0f69	4d 7b 0f	               eor  loopcount+1
.0f6c	c9 ff		               cmp  #$ff
.0f6e	60		out            rts
>0f6f	28		ymult          .byte     40
>0f70	00 00		addr1          .word     $0000
>0f72	00 00		addr2          .word     $0000
>0f74	00 00		bytecnt        .word     $0000
>0f76	00 00		zp1            .word   $0000
>0f78	00 00		zp2            .word   $0000
>0f7a	00 00		loopcount      .word     $0000

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0f7c	01		a2hexcol       .byte     1              ; pour aputscxy
>0f7d	00		a2hexbkcol     .byte     %00000000
.0f7e			a2hexpos
>0f7e	00		a2hexpx        .byte     0              ; pour aputsxy
>0f7f	00		a2hexpy        .byte     0
>0f80	24		a2hexprefix    .byte     "$"            ; pour aputs
>0f81	00 00		a2hexstr       .word     $00
>0f83	00 00		               .word     $00
>0f85	00		               .byte     0              ; 0 end string
>0f86	30 30 30 30	abin           .null     "00000000"
>0f8a	30 30 30 30 00
>0f8f	20 20 20 00	adec           .null     "   "
.0f93			putahexfmtxy
.0f93	20 b0 0d	               jsr  push
.0f96	20 e2 0f	               jsr  atohex
.0f99	ae 7e 0f	               ldx  a2hexpx
.0f9c	ac 7f 0f	               ldy  a2hexpy
.0f9f	20 88 0b	               jsr  gotoxy
.0fa2	a2 80		               ldx  #<a2hexprefix
.0fa4	a0 0f		               ldy  #>a2hexprefix
.0fa6	20 6e 0b	               jsr  puts
.0fa9	20 ef 0d	               jsr  pop
.0fac	60		               rts
.0fad			putahexfmt
.0fad	20 b0 0d	               jsr  push
.0fb0	20 e2 0f	               jsr  atohex
.0fb3	a2 80		               ldx  #<a2hexprefix
.0fb5	a0 0f		               ldy  #>a2hexprefix
.0fb7	20 6e 0b	               jsr  puts
.0fba	20 ef 0d	               jsr  pop
.0fbd	60		               rts
.0fbe			putahex
.0fbe	20 b0 0d	               jsr  push
.0fc1	20 e2 0f	               jsr  atohex
.0fc4	a2 81		               ldx  #<a2hexstr
.0fc6	a0 0f		               ldy  #>a2hexstr
.0fc8	20 6e 0b	               jsr  puts
.0fcb	20 ef 0d	               jsr  pop
.0fce	60		               rts
.0fcf			nibtohex
.0fcf	08		               php
.0fd0	29 0f		               and  #$0f
.0fd2	f8		               sed
.0fd3	18		               clc
.0fd4	69 90		               adc  #$90
.0fd6	69 40		               adc  #$40
.0fd8	d8		               cld
.0fd9	28		               plp
.0fda	60		               rts
.0fdb			lsra4bits
.0fdb	08		               php
.0fdc	4a		               lsr
.0fdd	4a		               lsr
.0fde	4a		               lsr
.0fdf	4a		               lsr
.0fe0	28		               plp
.0fe1	60		               rts
.0fe2			atohex
.0fe2	08		               php
.0fe3	48		               pha
.0fe4	48		               pha
.0fe5	20 db 0f	               jsr  lsra4bits
.0fe8	20 cf 0f	               jsr  nibtohex
.0feb	8d 81 0f	               sta  a2hexstr
.0fee	68		               pla
.0fef	20 cf 0f	               jsr  nibtohex
.0ff2	8d 82 0f	               sta  a2hexstr+1
.0ff5	a9 00		               lda  #$00                ; set end of string
.0ff7	8d 83 0f	               sta  a2hexstr+2
.0ffa	68		               pla
.0ffb	28		               plp
.0ffc	60		               rts
.0ffd			xy2hex
.0ffd	20 b0 0d	               jsr  push
.1000	20 e2 0f	               jsr  atohex
.1003	8a		               txa
.1004	48		               pha
.1005	20 db 0f	               jsr  lsra4bits
.1008	20 cf 0f	               jsr  nibtohex
.100b	8d 81 0f	               sta  a2hexstr
.100e	68		               pla
.100f	20 cf 0f	               jsr  nibtohex
.1012	8d 82 0f	               sta  a2hexstr+1
.1015	98		               tya
.1016	48		               pha
.1017	20 db 0f	               jsr  lsra4bits
.101a	20 cf 0f	               jsr  nibtohex
.101d	8d 83 0f	               sta  a2hexstr+2
.1020	68		               pla
.1021	20 cf 0f	               jsr  nibtohex
.1024	8d 84 0f	               sta  a2hexstr+3
.1027	a9 00		               lda  #$00                ; 0 ended string
.1029	8d 85 0f	               sta  a2hexstr+4
.102c	20 ef 0d	               jsr  pop
.102f			atobin
.102f	20 b0 0d	               jsr  push
.1032	a2 08		               ldx  #8
.1034	a0 00		               ldy  #0
.1036	18		               clc
.1037	2a		nextbit        rol
.1038	48		               pha
.1039	69 00		               adc  #$00
.103b	29 01		               and  #$01
.103d	20 cf 0f	               jsr  nibtohex
.1040	99 86 0f	               sta  abin,y
.1043	68		               pla
.1044	c8		               iny
.1045	ca		               dex
.1046	d0 ef		               bne  nextbit
.1048	a9 00		               lda  #0
.104a	99 86 0f	               sta  abin,y
.104d	20 ef 0d	               jsr  pull
.1050	60		               rts
.1051			putabin
.1051	20 2f 10	               jsr     atobin
.1054	20 b0 0d	               jsr     push
.1057	a2 86		               ldx     #<abin
.1059	a0 0f		               ldy     #>abin
.105b	20 6e 0b	               jsr     puts
.105e	20 ef 0d	               jsr     pop
.1061	60		               rts
.1062			printabin
.1062	20 b0 0d	               jsr     push
.1065	a2 86		               ldx     #<abin
.1067	a0 0f		               ldy     #>abin
.1069	20 6e 0b	               jsr     puts
.106c	20 ef 0d	               jsr     pop
.106f	60		               rts
.1070			putabinfmt
.1070	08		               php
.1071	48		               pha
.1072	a9 25		               lda     #"%"
.1074	20 68 0b	               jsr     putch
.1077	68		               pla
.1078	20 51 10	               jsr     putabin
.107b	28		               plp
.107c	60		               rts
.107d			putabinxy
.107d	20 88 0b	               jsr     gotoxy
.1080	20 51 10	               jsr     putabin
.1083	60		               rts
.1084			putabinfmtxy
.1084	20 88 0b	               jsr     gotoxy
.1087	20 70 10	               jsr     putabinfmt
.108a	60		               rts
.108b			atodec
.108b	20 b0 0d	               jsr  push
.108e	f8		               sed            ; On se place en mode décimal.
.108f	aa		               tax            ; On déplace a dans x.
.1090	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.1092	a9 00		               lda  #$00      ; 0 dans A.
.1094	18		nextbit        clc            ; Bit carry a 0.
.1095	69 01		               adc  #$01      ; Ajoute 1 a A.
.1097	90 01		               bcc  decx      ; Pas de carry, pas de report.
.1099	c8		               iny            ; On incrémente Y
.109a	ca		decx           dex            ; X=X-1
.109b	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.109d	48		               pha            ; A sur le stack.
.109e	98		               tya            ; Y dans A (MSB)
.109f	20 cf 0f	               jsr  nibtohex  ; a hex petsci ...
.10a2	8d 8f 0f	               sta  adec      ; ... dans tampon.
.10a5	68		               pla            ; Récupere A
.10a6	48		               pha            ;
.10a7	20 cf 0f	               jsr  nibtohex
.10aa	8d 91 0f	               sta  adec+2
.10ad	68		               pla
.10ae	6a		               ror
.10af	6a		               ror
.10b0	6a		               ror
.10b1	6a		               ror
.10b2	20 cf 0f	               jsr  nibtohex
.10b5	8d 90 0f	               sta  adec+1
.10b8	d8		               cld            ; On revient en mode binaire.
.10b9	20 ef 0d	               jsr  pull
.10bc	60		               rts
.10bd			putadec
.10bd	20 b0 0d	               jsr  push
.10c0	20 8b 10	               jsr  atodec
.10c3	a2 8f		               ldx  #<adec
.10c5	a0 0f		               ldy  #>adec+1
.10c7	20 6e 0b	               jsr  puts
.10ca	20 ef 0d	               jsr  pop
.10cd	60		               rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>10ce	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>10d2	00 00 00 00 00 00 00 00 00 0d 00 00
>10de	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>10e2	00 00 00 00 00 00 00 00 00 00 00 00
>10ee	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>10f2	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>10fe	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1102	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>110e	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1112	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>111e	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1122	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>112e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1132	00 00 00 00 00 00 00 00 00 00 00 00
>113e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1142	00 00 00 00 00 00 00 00 00 00 00 00
>114e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1152	00 00 00 00 00 00 00 00 00 00 00 00
>115e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1162	00 00 00 00 00 00 00 00 00 00 00 00
>116e	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1172	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>117e	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1182	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>118e	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1192	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>119e	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>11a2	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>11ae	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>11b2	00 00 00 00 00 00 00 00 00 00 00 00
>11be	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>11c2	00 00 00 00 00 00 00 00 00 00 00 00
.11ce			waitstop
.11ce	20 b0 0d	               jsr  push
.11d1	20 ed f6	wait           jsr  k_stop
.11d4	d0 fb		               bne  wait
.11d6	20 ef 0d	               jsr  pop
.11d9	60		               rts
.11da			anykey
.11da	08		               php
.11db	48		               pha
.11dc	a5 cb		nokey          lda 203
.11de	c9 40		               cmp #64
.11e0	f0 fa		               beq nokey
.11e2	20 e8 11	               jsr releasekey
.11e5	68		               pla
.11e6	28		               plp
.11e7	60		               rts
.11e8			releasekey
.11e8	08		               php
.11e9	48		               pha
.11ea	a5 cb		keypressed     lda 203
.11ec	c9 40		               cmp #64
.11ee	d0 fa		               bne keypressed
.11f0	68		               pla
.11f1	28		               plp
.11f2	60		               rts
.11f3			getkey
.11f3	20 e4 ff	again          jsr  getin
.11f6	c9 00		               cmp  #0
.11f8	f0 f9		               beq  again
.11fa	60		               rts
.11fb			kbflushbuff
.11fb	08		               php
.11fc	48		               pha
.11fd	20 e4 ff	again          jsr  getin
.1200	c9 00		               cmp  #0
.1202	d0 f9		               bne  again
.1204	68		               pla
.1205	28		               plp
.1206	60		               rts
.1207			waitkey
.1207	20 b0 0d	               jsr  push
.120a	8d 58 12	               sta  thekey
.120d	20 e4 ff	nope           jsr  getin
.1210	20 d2 ff	               jsr  chrout
.1213	cd 58 12	               cmp  thekey
.1216	d0 f5		               bne  nope
.1218	20 d2 ff	               jsr  chrout
.121b	20 ef 0d	               jsr  pop
.121e	60		               rts
.121f			waitspace
.121f	20 b0 0d	               jsr  push
.1222	a9 7f		wait           lda  #$7f  ;%01111111
.1224	8d 00 dc	               sta  $dc00
.1227	ad 01 dc	               lda  $dc01
.122a	29 10		               and  #$10  ;mask %00010000
.122c	d0 f4		               bne  wait
.122e	20 ef 0d	               jsr  pop
.1231			waitsstop
.1231	20 b0 0d	               jsr  push
.1234	20 ed f6	wait           jsr  k_stop  ;%01111111
.1237	d0 fb		               bne  wait
.1239	20 ef 0d	               jsr  pop
.123c			waitreturn
.123c	20 b0 0d	               jsr  push
.123f	ad 59 12	               lda  thecount
.1242	8d 00 04	               sta  scrnram
.1245	a9 02		               lda  #$02
.1247	8d 00 d8	               sta  colorram
.124a	20 e4 ff	nope           jsr  getin
.124d	c9 0d		nohex          cmp  #$0d
.124f	d0 f9		               bne  nope
.1251	ee 59 12	               inc  thecount
.1254	20 ef 0d	               jsr  pop
.1257	60		               rts
>1258	00		thekey         .byte   0
>1259	01		thecount       .byte   $01

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.125a			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.125a	20 b0 0d	                jsr push
.125d	08		                php
.125e	8d 1e 14	                sta  rega
.1261	68		                pla
.1262	8d 21 14	                sta  regp
.1265	8e 1f 14	                stx  regx
.1268	8c 20 14	                sty  regy
.126b	ba		                tsx
.126c	8e 22 14	                stx  regs
.126f	68		                pla
.1270	8d 25 14	                sta  regpcl
.1273	8d 26 14	                sta  regpcl2
.1276	68		                pla
.1277	8d 23 14	                sta  regpch
.127a	8d 24 14	                sta  regpch2
.127d	ad 1e 14	                lda  rega
.1280	48		                pha
.1281	20 cf 0f	                jsr  nibtohex
.1284	8d c8 13	                sta  vala+1
.1287	68		                pla
.1288	20 db 0f	                jsr  lsra4bits
.128b	20 cf 0f	                jsr  nibtohex
.128e	8d c7 13	                sta  vala
.1291	ad 20 14	                lda  regy
.1294	48		                pha
.1295	20 cf 0f	                jsr  nibtohex
.1298	8d dc 13	                sta  valy+1
.129b	68		                pla
.129c	20 db 0f	                jsr  lsra4bits
.129f	20 cf 0f	                jsr  nibtohex
.12a2	8d db 13	                sta  valy
.12a5	ad 1f 14	                lda  regx
.12a8	48		                pha
.12a9	20 cf 0f	                jsr  nibtohex
.12ac	8d d2 13	                sta  valx+1
.12af	68		                pla
.12b0	20 db 0f	                jsr  lsra4bits
.12b3	20 cf 0f	                jsr  nibtohex
.12b6	8d d1 13	                sta  valx
.12b9	ad 21 14	                lda  regp
.12bc	48		                pha
.12bd	20 cf 0f	                jsr  nibtohex
.12c0	8d e6 13	                sta  valp+1
.12c3	68		                pla
.12c4	20 db 0f	                jsr  lsra4bits
.12c7	20 cf 0f	                jsr  nibtohex
.12ca	8d e5 13	                sta  valp
.12cd	ad 22 14	                lda  regs
.12d0	48		                pha
.12d1	20 cf 0f	                jsr  nibtohex
.12d4	8d f0 13	                sta  vals+1
.12d7	68		                pla
.12d8	20 db 0f	                jsr  lsra4bits
.12db	20 cf 0f	                jsr  nibtohex
.12de	8d ef 13	                sta  vals
.12e1	18		                clc
.12e2	ad 26 14	                lda regpcl2
.12e5	69 01		                adc #$01
.12e7	8d 26 14	                sta regpcl2
.12ea	ad 26 14	                lda regpcl2
.12ed	d0 03		                bne noreport
.12ef	ee 24 14	                inc regpch2
.12f2	ad 24 14	    noreport    lda regpch2
.12f5	48		                pha
.12f6	20 cf 0f	                jsr  nibtohex
.12f9	8d fb 13	                sta  valpch+1
.12fc	68		                pla
.12fd	20 db 0f	                jsr  lsra4bits
.1300	20 cf 0f	                jsr  nibtohex
.1303	8d fa 13	                sta  valpch
.1306	ad 26 14	                lda  regpcl2
.1309	48		                pha
.130a	20 cf 0f	                jsr  nibtohex
.130d	8d fd 13	                sta  valpcl+1
.1310	68		                pla
.1311	20 db 0f	                jsr  lsra4bits
.1314	20 cf 0f	                jsr  nibtohex
.1317	8d fc 13	                sta  valpcl
.131a	a5 fb		                lda  zpage1
.131c	48		                pha
.131d	20 cf 0f	                jsr  nibtohex
.1320	8d 0b 14	                sta  valz1l
.1323	68		                pla
.1324	20 db 0f	                jsr  lsra4bits
.1327	20 cf 0f	                jsr  nibtohex
.132a	8d 0c 14	                sta  valz1l+1
.132d	a5 fc		                lda  zpage1+1
.132f	48		                pha
.1330	20 cf 0f	                jsr  nibtohex
.1333	8d 09 14	                sta  valz1h
.1336	68		                pla
.1337	20 db 0f	                jsr  lsra4bits
.133a	20 cf 0f	                jsr  nibtohex
.133d	8d 0a 14	                sta  valz1h+1
.1340	a5 fd		                lda  zpage2
.1342	48		                pha
.1343	20 cf 0f	                jsr  nibtohex
.1346	8d 1a 14	                sta  valz2l
.1349	68		                pla
.134a	20 db 0f	                jsr  lsra4bits
.134d	20 cf 0f	                jsr  nibtohex
.1350	8d 1b 14	                sta  valz2l+1
.1353	a5 fe		                lda  zpage2+1
.1355	48		                pha
.1356	20 cf 0f	                jsr  nibtohex
.1359	8d 18 14	                sta  valz2h
.135c	68		                pla
.135d	20 db 0f	                jsr  lsra4bits
.1360	20 cf 0f	                jsr  nibtohex
.1363	8d 19 14	                sta  valz2h+1
.1366	20 4f 0c	                jsr  setinverse
.1369	78		                sei
.136a	a2 c0		                ldx  #<srega
.136c	a0 13		                ldy  #>srega+1
.136e	20 f7 0b	                jsr  putscxy
.1371	a2 ca		                ldx  #<sregx
.1373	a0 13		                ldy  #>sregx+1
.1375	20 f7 0b	                jsr  putscxy
.1378	a2 d4		                ldx  #<sregy
.137a	a0 13		                ldy  #>sregy+1
.137c	20 f7 0b	                jsr  putscxy
.137f	a2 de		                ldx  #<sregp
.1381	a0 13		                ldy  #>sregp+1
.1383	20 f7 0b	                jsr  putscxy
.1386	a2 e8		                ldx  #<sregs
.1388	a0 13		                ldy  #>sregs+1
.138a	20 f7 0b	                jsr  putscxy
.138d	a2 f2		                ldx  #<sregpc
.138f	a0 13		                ldy  #>sregpc+1
.1391	20 f7 0b	                jsr  putscxy
.1394	a2 00		                ldx  #<sregz1
.1396	a0 14		                ldy  #>sregz1+1
.1398	20 f7 0b	                jsr  putscxy
.139b	a2 0f		                ldx  #<sregz2
.139d	a0 14		                ldy  #>sregz2+1
.139f	20 f7 0b	                jsr  putscxy
.13a2	58		                cli
.13a3	20 57 0c	                jsr  clrinverse
.13a6	ad 23 14	                lda  regpch
.13a9	48		                pha
.13aa	ad 25 14	                lda  regpcl
.13ad	48		                pha
.13ae	ac 20 14	                ldy  regy
.13b1	ae 1f 14	                ldx  regx
.13b4	ad 21 14	                lda  regp
.13b7	48		                pha
.13b8	ad 1e 14	                lda  rega
.13bb	28		                plp
.13bc	20 ef 0d	                jsr pop
.13bf	60		                rts
>13c0	01 00 17	srega   .byte   colr,coln,line
>13c3	20 41 3a 24	        .text   ' a:$' ;4,24
>13c7	00 00 00	vala    .byte   0,0,0
>13ca	01 06 17	sregx   .byte   colr,coln+6,line
>13cd	20 58 3a 24	        .text   ' x:$' ;4,24
>13d1	00 00 00	valx    .byte   0,0,0
>13d4	01 0c 17	sregy   .byte   colr,coln+12,line
>13d7	20 59 3a 24	        .text   ' y:$' ;4,24
>13db	00 00 00	valy    .byte   0,0,0
>13de	01 12 17	sregp   .byte   colr,coln+18,line
>13e1	20 50 3a 24	        .text   ' p:$' ;4,24
>13e5	00 00 00	valp    .byte   0,0,0
>13e8	01 18 17	sregs   .byte   colr,coln+24,line
>13eb	20 53 3a 24	        .text   ' s:$' ;4,24
>13ef	00 00 00	vals    .byte   0,0,0
>13f2	01 1e 17	sregpc  .byte   colr,coln+30,line
>13f5	20 50 43 3a	        .text   ' pc:$' ;4,24
>13f9	24
>13fa	00 00		valpch  .byte   0,0
>13fc	00 00 20 00	valpcl  .byte   0,0,32,0
>1400	01 03 18	sregz1  .byte   colr,coln+3,line+1
>1403	20 5a 50 31	        .text   ' zp1:$' ;4,24
>1407	3a 24
>1409	00 00		valz1h  .byte   0,0
>140b	00 00 20 00	valz1l  .byte   0,0,32,0
>140f	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>1412	20 5a 50 32	        .text   ' zp2:$' ;4,24
>1416	3a 24
>1418	00 00		valz2h  .byte   0,0
>141a	00 00 20 00	valz2l  .byte   0,0,32,0
>141e	00		rega    .byte   0
>141f	00		regx    .byte   0
>1420	00		regy    .byte   0
>1421	00		regp    .byte   0
>1422	00		regs    .byte   0
>1423	00		regpch  .byte   0
>1424	00		regpch2 .byte   0
>1425	00		regpcl  .byte   0
>1426	00		regpcl2 .byte   0
>1427	00		vzp1h   .byte   0
>1428	00		vzp1l   .byte   0
>1429	00		vzp2h   .byte   0
>142a	00		vzp2l   .byte   0

;******  Return to file: libtest03.asm


;******  End of listing

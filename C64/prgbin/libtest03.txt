
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L libtest03.txt -o libtest03.prg libtest03.asm
; Tue May 13 23:18:30 2025

;Offset	;Hex		;Source

;******  Processing input file: libtest03.asm

="20250513-222751"	                Version = "20250513-222751"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart	jmp	main  	; Le programme principale doit s'appeler "main" et ...

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: libtest03.asm

.0854			main
.0854	20 fa 0a	               jsr scrmaninit
.0857	08		               php
.0858	48		               pha
.0859	a9 8e		               lda  #b_uppercase
.085b	8d 19 0b	               sta  characterset
.085e	20 d2 ff	               jsr  $ffd2
.0861	68		               pla
.0862	28		               plp
.0863	08		               php
.0864	48		               pha
.0865	a9 8e		               lda  #b_uppercase
.0867	20 d2 ff	               jsr  $ffd2
.086a	68		               pla
.086b	28		               plp
.086c	08		               php
.086d	48		               pha
.086e	a9 08		               lda  #$08
.0870	20 d2 ff	               jsr  $ffd2
.0873	68		               pla
.0874	28		               plp
.0875	20 ce 0e	               jsr  push
.0878	48		               pha
.0879	a9 05		               lda  #cvert
.087b	8d 20 d0	               sta  $d020
.087e	68		               pla
.087f	48		               pha
.0880	a9 06		               lda  #cbleu
.0882	8d 21 d0	               sta  $d021
.0885	68		               pla
.0886	48		               pha
.0887	a9 01		               lda  #cblanc
.0889	8d 86 02	               sta  bascol
.088c	68		               pla
.088d	20 09 0f	               jsr  pull
.0890	20 9a 08	               jsr  aide
.0893	20 18 09	               jsr  libtest03
.0896	20 46 13	               jsr  anykey
.0899	00		               brk
.089a			aide
.089a	08		               php
.089b	48		               pha
.089c	a9 0e		               lda  #14
.089e	8d 19 0b	               sta  characterset
.08a1	20 d2 ff	               jsr  $ffd2
.08a4	68		               pla
.08a5	28		               plp
.08a6	20 1a 0b	               jsr cls
.08a9	20 ce 0e	               jsr  push
.08ac	a2 c5		               ldx  #<line
.08ae	a0 0a		               ldy  #>line
.08b0	20 37 0b	               jsr  puts
.08b3	20 09 0f	               jsr  pull
.08b6	20 ce 0e	               jsr  push
.08b9	a2 64		               ldx  #<headera
.08bb	a0 09		               ldy  #>headera
.08bd	20 37 0b	               jsr  puts
.08c0	20 09 0f	               jsr  pull
.08c3	20 ce 0e	               jsr  push
.08c6	a2 8b		               ldx  #<headerb
.08c8	a0 09		               ldy  #>headerb
.08ca	20 37 0b	               jsr  puts
.08cd	20 09 0f	               jsr  pull
.08d0	20 ce 0e	               jsr  push
.08d3	a2 c5		               ldx  #<line
.08d5	a0 0a		               ldy  #>line
.08d7	20 37 0b	               jsr  puts
.08da	20 09 0f	               jsr  pull
.08dd	20 ce 0e	               jsr  push
.08e0	a2 c5		               ldx  #<line
.08e2	a0 0a		               ldy  #>line
.08e4	20 37 0b	               jsr  puts
.08e7	20 09 0f	               jsr  pull
.08ea	20 ce 0e	               jsr  push
.08ed	a2 eb		               ldx  #<shortcuts
.08ef	a0 09		               ldy  #>shortcuts
.08f1	20 37 0b	               jsr  puts
.08f4	20 09 0f	               jsr  pull
.08f7	20 ce 0e	               jsr  push
.08fa	a2 71		               ldx  #<aidetext
.08fc	a0 0a		               ldy  #>aidetext
.08fe	20 37 0b	               jsr  puts
.0901	20 09 0f	               jsr  pull
.0904	20 ce 0e	               jsr  push
.0907	a2 c5		               ldx  #<line
.0909	a0 0a		               ldy  #>line
.090b	20 37 0b	               jsr  puts
.090e	20 09 0f	               jsr  pull
.0911	20 46 13	               jsr  anykey
.0914	20 1a 0b	               jsr  cls
.0917	60		               rts
.0918			libtest03
.0918	20 ce 0e	               jsr  push
.091b			nexta
.091b	20 ce 0e	               jsr  push
.091e	a2 ee		               ldx  #<dataloc
.0920	a0 0a		               ldy  #>dataloc
.0922	20 c0 0b	               jsr  putscxy
.0925	20 09 0f	               jsr  pull
.0928	48		               pha
.0929	a9 03		               lda  #ccyan
.092b	8d 86 02	               sta  bascol
.092e	68		               pla
.092f			again
.092f	08		               php
.0930	ae fe ff	               ldx  $fffe		; Load lsb od address in X.
.0933	ad ff ff	               lda  $fffe+1		; Load msb od address in A.
.0936	28		               plp
.0937	20 c6 13	               jsr  showregs
.093a	20 ce 0e	               jsr  push
.093d	a2 00		               ldx  #0
.093f	a0 00		               ldy  #0
.0941	20 51 0b	               jsr  gotoxy
.0944	20 09 0f	               jsr  pop
.0947	20 46 0c	               jsr  b_praxstr      ; Print AAXX as string
.094a	20 b0 0c	               jsr  b_readmemfloat
.094d	20 ce 0e	               jsr  push
.0950	a2 00		               ldx  #0
.0952	a0 01		               ldy  #1
.0954	20 51 0b	               jsr  gotoxy
.0957	20 09 0f	               jsr  pop
.095a	20 53 0d	               jsr  b_outsub
.095d	20 09 0f	out            jsr  pop
.0960	60		               rts
>0961	a6		car            .byte     166
>0962	3a 30		valeur         .word     12346

;******  Processing file: strings_fr.asm

.0964			headera
>0964	13 1d 1d 1d	               .byte     b_home,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right
>0968	1d
>0969	20 c3 4f 4d	               .text              " Commodore 64 test de libraries "
>096d	4d 4f 44 4f 52 45 20 36 34 20 54 45 53 54 20 44
>097d	45 20 4c 49 42 52 41 52 49 45 53 20
>0989	0d 00		               .byte     $0d,0
>098b	20 20 20 20	headerb        .text          "         >>>>>[libtest03]<<<<<"
>098f	20 20 20 20 20 3e 3e 3e 3e 3e 5b 4c 49 42 54 45
>099f	53 54 30 33 5d 3c 3c 3c 3c 3c
>09a9	0d		               .byte     $0d
>09aa	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>09ae	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>09be	45 4c 20 cc 41 46 52 41 4e 43 45
>09c9	0d		               .byte     $0d
>09ca	20 20 20 20	               .text   format("       Version: %s",Version)
>09ce	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>09de	30 35 31 33 2d 32 32 32 37 35 31
>09e9	0d 00		               .byte     $0d,0
>09eb	0d		shortcuts      .byte     $0d
>09ec	91 91		               .byte     ucurkey,ucurkey
>09ee	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>09f2	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>09f6	1d
>09f7	20 d2 20 c1	               .text          " R A C C O U R C I S "
>09fb	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>0a0b	20
>0a0c	0d		               .byte     $0d
>0a0d	20 cc 49 42	               .text   format(" Libtest03: SYS%05d (jsr $%04X)",main, main)
>0a11	54 45 53 54 30 33 3a 20 d3 d9 d3 30 32 31 33 32
>0a21	20 28 4a 53 52 20 24 30 38 35 34 29
>0a2d	0d		               .byte     $0d
>0a2e	20 c1 49 44	               .text   format(" Aide.....: SYS%05d (jsr $%04X)",aide, aide)
>0a32	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 32 30 32
>0a42	20 28 4a 53 52 20 24 30 38 39 c1 29
>0a4e	0d		               .byte     $0d
>0a4f	20 c3 4c 53	               .text   format(" Cls......: SYS%05d (jsr $%04X)",cls, cls)
>0a53	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 38 34 32
>0a63	20 28 4a 53 52 20 24 30 c2 31 c1 29
>0a6f	0d 00		               .byte     $0d,0
>0a71	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d (jsr $%04X)",libtest03, libtest03)
>0a75	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 33 32 38
>0a85	20 28 4a 53 52 20 24 30 39 31 38 29
>0a91	0d 0d		               .byte     $0d, $0d
>0a93	20 20 20 20	                .text   format("    ex.: SYS%05d",libtest03)
>0a97	45 58 2e 3a 20 d3 d9 d3 30 32 33 32 38
>0aa4	0d		                .byte     $0d
>0aa5	20 20 20 20	                .text   format("    for i=0to100:SYS%05d:next",libtest03)
>0aa9	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0ab9	30 32 33 32 38 3a 4e 45 58 54
>0ac3	0d 00		                .byte     $0d,0
>0ac5	20 c0 c0 c0	line            .byte     $20,192,192,192,192,192,192,192,192,192
>0ac9	c0 c0 c0 c0 c0 c0
>0acf	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>0ad3	c0 c0 c0 c0 c0 c0
>0ad9	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>0add	c0 c0 c0 c0 c0 c0
>0ae3	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192
>0ae7	c0 c0 c0 c0 c0
>0aec	0d 00		                .byte     $0d,0
>0aee	01 00 00 00	dataloc         .byte       1,0,0,0

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0af2	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0af6	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0afa			libtart

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0afa			scrmaninit
.0afa	20 ce 0e	               jsr  push
.0afd	a9 06		               lda  #vbleu
.0aff	8d 21 d0	               sta  vicbackcol
.0b02	a9 05		               lda  #vvert
.0b04	8d 20 d0	               sta  vicbordcol
.0b07	a9 01		               lda  #vblanc
.0b09	8d 86 02	               sta  bascol
.0b0c	ad 00 04	               lda  scrnram
.0b0f	8d 00 04	               sta  scrnram
.0b12	20 1a 0b	               jsr  cls
.0b15	20 09 0f	               jsr  pop
.0b18	60		               rts
>0b19	8e		characterset   .byte b_uppercase
.0b1a			cls
.0b1a	08		               php
.0b1b	48		               pha
.0b1c	a9 93		               lda  #$93
.0b1e	20 31 0b	               jsr  putch
.0b21	68		               pla
.0b22	28		               plp
.0b23	60		               rts
.0b24			putnch
.0b24	08		               php
.0b25	e0 00		               cpx  #$00
.0b27	f0 06		               beq  out
.0b29	20 d2 ff	again          jsr  $ffd2
.0b2c	ca		               dex
.0b2d	d0 fa		               bne  again
.0b2f	28		out            plp
.0b30	60		               rts
.0b31			putch
.0b31	08		               php
.0b32	20 d2 ff	               jsr  $ffd2
.0b35	28		               plp
.0b36	60		               rts
.0b37			puts
.0b37	20 ce 0e	               jsr  push
.0b3a	86 fb		               stx  zpage1
.0b3c	84 fc		               sty  zpage1+1
.0b3e	a0 00		               ldy  #0
.0b40	b1 fb		next           lda  (zpage1),y
.0b42	f0 09		               beq  exit
.0b44	20 31 0b	               jsr  putch
.0b47	20 23 10	               jsr  inczp1
.0b4a	4c 40 0b	               jmp  next
.0b4d	20 09 0f	exit           jsr  pop
.0b50	60		               rts
.0b51			gotoxy
.0b51	08		               php
.0b52	18		               clc
.0b53	8a		               txa
.0b54	48		               pha
.0b55	98		               tya
.0b56	aa		               tax
.0b57	68		               pla
.0b58	a8		               tay
.0b59	20 f0 ff	               jsr  kplot
.0b5c	28		               plp
.0b5d	60		               rts
.0b5e			cursor
=$0286			bascol    =    $0286
.0b5e	08		               php            ;tourlou
.0b5f	48		               pha
.0b60	90 12		               bcc  restore
.0b62	20 f0 ff	               jsr  kplot
.0b65	8c 86 0b	               sty  cx
.0b68	8e 87 0b	               stx  cy
.0b6b	ad 86 02	               lda  bascol
.0b6e	8d 88 0b	               sta  bcol
.0b71	4c 83 0b	               jmp  out
.0b74	ae 87 0b	restore        ldx  cy
.0b77	ac 86 0b	               ldy  cx
.0b7a	20 f0 ff	               jsr  kplot
.0b7d	ad 88 0b	               lda  bcol
.0b80	8d 86 02	               sta  bascol
.0b83	68		out            pla
.0b84	28		               plp
.0b85	60		               rts
>0b86	00		cx   .byte     $00
>0b87	00		cy   .byte     $00
>0b88	00		bcol .byte     $00
.0b89			cursave
.0b89	08		               php
.0b8a	38		               sec
.0b8b	20 5e 0b	               jsr  cursor
.0b8e	28		               plp
.0b8f	60		               rts
.0b90			curput
.0b90	08		               php
.0b91	18		               clc
.0b92	20 5e 0b	               jsr  cursor
.0b95	28		               plp
.0b96	60		               rts
.0b97			putsxy
.0b97	20 ce 0e	               jsr  push
.0b9a	86 fb		               stx  zpage1
.0b9c	84 fc		               sty  zpage1+1
.0b9e	a0 00		               ldy  #$00
.0ba0	b1 fb		               lda  (zpage1),y
.0ba2	aa		               tax
.0ba3	20 23 10	               jsr  inczp1
.0ba6	b1 fb		               lda  (zpage1),y
.0ba8	a8		               tay
.0ba9	20 51 0b	               jsr  gotoxy
.0bac	20 23 10	               jsr  inczp1
.0baf	a6 fb		               ldx  zpage1
.0bb1	a4 fc		               ldy  zpage1+1
.0bb3	20 37 0b	               jsr  puts
.0bb6	20 09 0f	               jsr  pop
.0bb9	60		               rts
>0bba	00 00		straddr   .word     $00
>0bbc	00		px        .byte     $00
>0bbd	00		py        .byte     $00
>0bbe	00 00		zp1       .word     $00
.0bc0			putscxy
.0bc0	20 ce 0e	               jsr  push
.0bc3	84 fc		               sty  zpage1+1
.0bc5	86 fb		               stx  zpage1
.0bc7	ad 86 02	               lda  bascol
.0bca	8d ea 0b	               sta  bc
.0bcd	a0 00		               ldy #$00
.0bcf	b1 fb		               lda  (zpage1),y
.0bd1	8d 86 02	               sta  bascol
.0bd4	20 23 10	               jsr  inczp1
.0bd7	a6 fb		               ldx  zpage1
.0bd9	a4 fc		               ldy  zpage1+1
.0bdb	20 97 0b	               jsr  putsxy
.0bde	ad ea 0b	               lda  bc
.0be1	8d 86 02	               sta  bascol
.0be4	20 09 0f	               jsr  pop
.0be7	60		               rts
>0be8	00 00		straddr  .word      $00
>0bea	00		bc       .byte      $00
>0beb	00 00		zp1      .word      $00
.0bed			putrahex
.0bed	08		               php
.0bee	48		               pha
.0bef	20 4e 11	               jsr  atohex
.0bf2	a9 ed		               lda  #<a2hexstr
.0bf4	a0 10		               ldy  #>a2hexstr
.0bf6	20 37 0b	               jsr  puts
.0bf9	68		               pla
.0bfa	28		               plp
.0bfb	60		               rts
.0bfc			kputrahexxy
.0bfc			bputrahexxy
.0bfc			putrahexxy
.0bfc	08		               php
.0bfd	20 4e 11	               jsr  atohex
.0c00	a9 ea		               lda  #<a2hexpos
.0c02	a0 10		               ldy  #>a2hexpos
.0c04	20 97 0b	               jsr  putsxy
.0c07	68		               pla
.0c08	28		               plp
.0c09	60		               rts
.0c0a			putrahexcxy
.0c0a	08		               php
.0c0b	20 4e 11	               jsr  atohex
.0c0e	a9 ea		               lda  #<a2hexpos
.0c10	a0 10		               ldy  #>a2hexpos
.0c12	20 c0 0b	               jsr  putscxy
.0c15	68		               pla
.0c16	28		               plp
.0c17	60		               rts
.0c18			setinverse
.0c18	48		               pha
.0c19	a9 12		               lda  #$12
.0c1b	20 d2 ff	               jsr  $ffd2
.0c1e	68		               pla
.0c1f	60		               rts
.0c20			clrinverse
.0c20	48		               pha
.0c21	a9 92		               lda  #$92
.0c23	20 d2 ff	               jsr  $ffd2
.0c26	68		               pla
.0c27	60		               rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2-math.asm

.0c28			b_math_template
.0c28	20 3c 0f				jsr	pushreg
.0c2b	20 6b 0f				jsr	popreg
.0c2e	60					rts
>0c2f	00		b_bufflenght	.byte	$00
>0c30	00 00 00 00	b_num1		.word	$0000,$0000,$0000
>0c34	00 00
>0c36	00 00 00 00	b_num2		.word	$0000,$0000,$0000
>0c3a	00 00
.0c3c			b_num0
>0c3c	00 00 00 00	b_numresult	.word 	$0000,$0000,$0000
>0c40	00 00
>0c42	31 32 38 00	b_testnum		.null	"128"
.0c46			b_praxstr
.0c46	20 3c 0f				jsr	pushreg
.0c49	20 cd bd				jsr	b_axout
.0c4c	20 6b 0f				jsr	popreg
.0c4f	60					rts
.0c50			b_getascnum
.0c50	20 3c 0f				jsr	pushreg
.0c53	20 bf e3				jsr	b_intcgt		; Initialyse charget
.0c56	20 70 0c				jsr	b_clearbuff	; Clear basic input buffer
.0c59	20 f9 ab				jsr	b_prompt		; Prompt for ? and fill buffer by reading...
.0c5c	86 7a					stx	$7a			; X and Y points to $01ff on return.
.0c5e	84 7b					sty	$7b
.0c60	20 73 00				jsr	b_chrget
.0c63	20 f3 bc				jsr	b_ascflt		; Convert ASCII string at 0200 to FAC1 FP.
.0c66	20 dd bd				jsr	b_facasc		; Converts FAC1 to ASCII string at 100.
.0c69	20 40 0d				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.0c6c	20 6b 0f				jsr	popreg
.0c6f	60					rts
.0c70			b_clearbuff
.0c70	20 3c 0f				jsr	pushreg
.0c73	a9 00					lda	#$00
.0c75	a0 59					ldy	#$59
.0c77	99 00 02	clear		sta	$0200,y		; Clear Basic input buffer
.0c7a	88					dey
.0c7b	d0 fa					bne	clear		; 60 bytes.
.0c7d	20 6b 0f				jsr	popreg
.0c80	60					rts
.0c81			b_printbuff
.0c81	20 3c 0f				jsr	pushreg
.0c84	a9 00					lda	#$00			; Set $22 to point to string at 100
.0c86	85 22					sta	$22
.0c88	a9 01					lda	#$01
.0c8a	85 23					sta	$23
.0c8c	ad 2f 0c				lda	b_bufflenght
.0c8f	20 24 ab				jsr	b_strout
.0c92	20 6b 0f				jsr	popreg
.0c95	60					rts
.0c96			b_insub
.0c96	20 3c 0f				jsr	pushreg
.0c99	20 bf e3				jsr	b_intcgt	; Initialize CHRGET.
.0c9c	20 70 0c				jsr	b_clearbuff
.0c9f	20 f9 ab				jsr	b_prompt
.0ca2	86 7a					stx	$7a
.0ca4	84 7b					sty	$7b
.0ca6	20 73 00				jsr	b_chrget
.0ca9	20 f3 bc				jsr	b_ascflt	; Convert ascii string to floating point in FAC1.
.0cac	20 6b 0f				jsr	popreg
.0caf	60					rts
.0cb0			b_readmemfloat
.0cb0	20 3c 0f				jsr	pushreg
.0cb3	20 bf e3				jsr	b_intcgt	; Initialize CHRGET.
.0cb6	a5 7a					lda	$7a
.0cb8	8d 06 0d				sta	b_v7a
.0cbb	a5 7b					lda	$7b
.0cbd	8d 07 0d				sta	b_v7b
.0cc0	a2 41					ldx	#<(b_testnum-1); #$83		; Set pointer to fvar as location for var minus 1
.0cc2	a0 0c					ldy	#>(b_testnum-1); #$c5
.0cc4	86 7a					stx	$7a
.0cc6	84 7b					sty	$7b
.0cc8	20 73 00				jsr	b_chrget
.0ccb	20 3c 0f				jsr	pushreg
.0cce	a2 30					ldx	#<(b_num1)  	; Copy FAC1 dans la variable ...
.0cd0	a0 0c					ldy	#>(b_num1)  	; ...
.0cd2	20 d4 bb				jsr	b_f1tmem		; b_num1
.0cd5	20 e2 ba				jsr	b_f1x10
.0cd8	a2 36					ldx	#<(b_num2)  	; Copy FAC1 dans la variable ...
.0cda	a0 0c					ldy	#>(b_num2)  	; ...
.0cdc	20 d4 bb				jsr	b_f1tmem		; b_num1
.0cdf	a2 3c					ldx	#<(b_num0)  	; Copy FAC1 dans la variable ...
.0ce1	a0 0c					ldy	#>(b_num0)  	; ...
.0ce3	20 d4 bb				jsr	b_f1tmem		; b_num1
.0ce6	20 7f 0e				jsr	b_prhexbnum1
.0ce9	20 6b 0f				jsr	popreg
.0cec	20 f3 bc				jsr	b_ascflt	  	; Convert ascii string to floating point in FAC1.
.0cef	20 dd bd				jsr	b_facasc		; Convert FAC1 floating point to ascii string at
.0cf2	20 40 0d				jsr	b_getbufflen
.0cf5	ad 06 0d				lda	b_v7a
.0cf8	85 7a					sta	$7a
.0cfa	ad 07 0d				lda	b_v7b
.0cfd	85 7b					sta	$7b
.0cff	20 70 0c				jsr	b_clearbuff
.0d02	20 6b 0f				jsr	popreg
.0d05	60					rts
>0d06	00		b_v7a		.byte	$00
>0d07	00		b_v7b		.byte	$00
.0d08			b_mul2fptomem
.0d08	20 3c 0f				jsr	pushreg
.0d0b	20 96 0c				jsr	b_insub		; Input first number.
.0d0e	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057.
.0d11	20 96 0c				jsr	b_insub		; Input second number.
.0d14	a9 57					lda	#$57
.0d16	a0 00					ldy	#$00			; Point to 1st number.
.0d18	20 28 ba				jsr	b_f1xfv		; FAC1 = FAC1 X FVAR.
.0d1b	a2 3c					ldx	#<b_numresult	; Set pointer to area to copy result to.
.0d1d	a0 0c					ldy	#>b_numresult
.0d1f	20 d4 bb				jsr	b_f1tmem		; Copy FAC1 to memory.
.0d22	20 6b 0f				jsr	popreg
.0d25	60					rts
.0d26			b_mul2fptoasc
.0d26	20 3c 0f				jsr	pushreg
.0d29	20 96 0c				jsr	b_insub		; Get first number.
.0d2c	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057.
.0d2f	20 96 0c				jsr	b_insub	;	 Get second number.
.0d32	a9 57					lda	#$57
.0d34	a0 00					ldy	#$00			; Set pointer to FVAR.
.0d36	20 28 ba				jsr	b_f1xfv		; FAC1 = FAC1 x FVAR.
.0d39	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0d3c	20 6b 0f				jsr	popreg
.0d3f	60					rts
.0d40			b_getbufflen
.0d40	20 3c 0f				jsr	pushreg
.0d43	a0 ff					ldy	#$ff
.0d45	c8		nxtchar		iny				; Determine lenght of string by ...
.0d46	b9 00 01				lda	$0100,y		; ... searching for $00 EOS byte.
.0d49	d0 fa					bne	nxtchar
.0d4b	c8					iny
.0d4c	8c 2f 0c				sty	b_bufflenght	; Store buffer lenght in common variable.
.0d4f	20 6b 0f				jsr	popreg
.0d52	60					rts
.0d53			b_outsub
.0d53	20 3c 0f				jsr	pushreg
.0d56	20 40 0d				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.0d59	20 81 0c				jsr	b_printbuff	; Print buffer content on output device.
.0d5c	20 70 0c				jsr	b_clearbuff
.0d5f	20 6b 0f				jsr	popreg
.0d62	60					rts
.0d63			b_fac1x10
.0d63	20 3c 0f				jsr	pushreg
.0d66	20 96 0c				jsr	b_insub
.0d69	20 e2 ba				jsr	b_f1x10	; FAC1 = FAC1 X 10
.0d6c	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0d6f	20 6b 0f				jsr	popreg
.0d72	60					rts
.0d73			b_fac1d10
.0d73	20 3c 0f				jsr	pushreg
.0d76	20 96 0c				jsr	b_insub		; Get first number.
.0d79	20 2b bc				jsr	b_sgnf1
.0d7c	48					pha
.0d7d	20 fe ba				jsr	b_f1d10		; FAC1 = FAC1 / 10
.0d80	68					pla
.0d81	aa					tax
.0d82	e8					inx
.0d83	d0 04					bne	notneg
.0d85	a9 80					lda	#$80		; On force le bit de signe ...
.0d87	85 66					sta	$66		; de FAC1 a 1 (neg)
.0d89	20 dd bd	notneg		jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0d8c	20 6b 0f				jsr	popreg
.0d8f	60					rts
.0d90			b_fac1square
.0d90	20 3c 0f				jsr	pushreg
.0d93	20 96 0c				jsr	b_insub		; Get first number.
.0d96	20 0c bc				jsr	b_f1tf2		; Copy FAC1 to FAC2.
.0d99	a5 61					lda	$61			; get exponent of FAC1
.0d9b	20 2b ba				jsr	b_f1xf2		; FAC1 = FAC1 X FAC2
.0d9e	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0da1	20 6b 0f				jsr	popreg
.0da4	60					rts
.0da5			b_fvardfac1
.0da5	20 3c 0f				jsr	pushreg
.0da8	20 96 0c				jsr	b_insub		; Get first number.
.0dab	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0dae	20 96 0c				jsr	b_insub		; Get second number.
.0db1	a9 57					lda	#$57
.0db3	a0 00					ldy	#$00
.0db5	20 0f bb				jsr	b_fvdf1		; FAC1 = FVAR / FAC1
.0db8	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0dbb	20 6b 0f				jsr	popreg
.0dbe	60					rts
.0dbf			b_fac2dfac1
.0dbf	20 3c 0f				jsr	pushreg
.0dc2	20 96 0c				jsr	b_insub		; Get first number.
.0dc5	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0dc8	20 96 0c				jsr	b_insub		; Get second number.
.0dcb	a9 57					lda	#$57
.0dcd	a0 00					ldy	#$00
.0dcf	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.0dd2	a5 61					lda	$61			; get exponent of FAC1
.0dd4	20 12 bb				jsr	b_f2df1		; FAC1 = FAC2 / FAC1
.0dd7	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0dda	20 6b 0f				jsr	popreg
.0ddd	60					rts
.0dde			b_fac1pfvar
.0dde	20 3c 0f				jsr	pushreg
.0de1	20 96 0c				jsr	b_insub		; Get first number.
.0de4	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0de7	20 96 0c				jsr	b_insub		; Get second number.
.0dea	a9 57					lda	#$57
.0dec	a0 00					ldy	#$00
.0dee	20 67 b8				jsr	b_f1pfv		; FAC1 = FAC1 + FVAR
.0df1	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0df4	20 6b 0f				jsr	popreg
.0df7	60					rts
.0df8			b_fac2sfac1
.0df8	20 3c 0f				jsr	pushreg
.0dfb	20 96 0c				jsr	b_insub		; Get first number.
.0dfe	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0e01	20 96 0c				jsr	b_insub		; Get second number.
.0e04	a9 57					lda	#$57
.0e06	a0 00					ldy	#$00
.0e08	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.0e0b	20 53 b8				jsr	b_f2sf1		; FAC1 = FAC2 + FAC1
.0e0e	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0e11	20 6b 0f				jsr	popreg
.0e14	60					rts
.0e15			b_fvarsfac1
.0e15	20 3c 0f				jsr	pushreg
.0e18	20 96 0c				jsr	b_insub		; Get first number.
.0e1b	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0e1e	20 96 0c				jsr	b_insub		; Get second number.
.0e21	a9 57					lda	#$57
.0e23	a0 00					ldy	#$00
.0e25	20 50 b8				jsr	b_fvsf1		; FAC1 = FVAR + FAC1
.0e28	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0e2b	20 6b 0f				jsr	popreg
.0e2e	60					rts
.0e2f			b_accpfac1
.0e2f	20 3c 0f				jsr	pushreg
.0e32	48					pha
.0e33	20 96 0c				jsr	b_insub		; Get first number.
.0e36	68					pla
.0e37	20 7e bd				jsr	b_f1pacc
.0e3a	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0e3d	20 6b 0f				jsr	popreg
.0e40	60					rts
.0e41			b_fac2pfac1
.0e41	20 3c 0f				jsr	pushreg
.0e44	20 96 0c				jsr	b_insub		; Get first number.
.0e47	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0e4a	20 96 0c				jsr	b_insub		; Get second number.
.0e4d	a9 57					lda	#$57
.0e4f	a0 00					ldy	#$00
.0e51	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.0e54	a5 61					lda	$61			; get exponent of FAC1
.0e56	20 6a b8				jsr	b_f1pf2
.0e59	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0e5c	20 6b 0f				jsr	popreg
.0e5f	60					rts
.0e60			b_fac1powfac2
.0e60	20 3c 0f				jsr	pushreg
.0e63	20 96 0c				jsr	b_insub		; Get first number.
.0e66	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0e69	20 96 0c				jsr	b_insub		; Get second number.
.0e6c	a9 57					lda	#$57
.0e6e	a0 00					ldy	#$00
.0e70	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.0e73	a5 61					lda	$61			; get exponent of FAC1
.0e75	20 7b bf				jsr	b_expon
.0e78	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0e7b	20 6b 0f				jsr	popreg
.0e7e	60					rts
.0e7f			b_prhexbnum1
.0e7f	20 ce 0e				jsr	pushall		; debug
.0e82	20 ce 0e	               jsr  push
.0e85	a2 00		               ldx  #0
.0e87	a0 05		               ldy  #5
.0e89	20 51 0b	               jsr  gotoxy
.0e8c	20 09 0f	               jsr  pop
.0e8f	a9 30					lda	#<b_num1
.0e91	85 fb					sta	zpage1
.0e93	a9 0c					lda	#>b_num1
.0e95	85 fc					sta	zpage1+1
.0e97	a0 00					ldy	#$00
.0e99	a2 12					ldx	#18
.0e9b	b1 fb		more			lda	(zpage1),y
.0e9d	20 2a 11				jsr	putahex
.0ea0	c8					iny
.0ea1	c0 06					cpy	#6
.0ea3	d0 0d					bne	is12
.0ea5	20 ce 0e	               jsr  push
.0ea8	a2 00		               ldx  #0
.0eaa	a0 07		               ldy  #7
.0eac	20 51 0b	               jsr  gotoxy
.0eaf	20 09 0f	               jsr  pop
.0eb2	c0 0c		is12			cpy	#12
.0eb4	d0 0d					bne	doit
.0eb6	20 ce 0e	               jsr  push
.0eb9	a2 00		               ldx  #0
.0ebb	a0 09		               ldy  #9
.0ebd	20 51 0b	               jsr  gotoxy
.0ec0	20 09 0f	               jsr  pop
.0ec3	ca		doit			dex
.0ec4	d0 d5					bne	more
.0ec6	20 09 0f				jsr	popall
.0ec9	60					rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>0eca	00		rp        .byte     0
>0ecb	00		ra        .byte     0
>0ecc	00 00		pc        .word     0
.0ece			pushall
.0ece			push
.0ece	08		          php            ; stack : flg, pcl, pch
.0ecf	78		          sei
.0ed0	8d cb 0e	          sta  ra        ; save a
.0ed3	68		          pla            ; stack : pcl, pch
.0ed4	8d ca 0e	          sta  rp        ; save rp
.0ed7	68		          pla            ; stack : pch
.0ed8	8d cc 0e	          sta  pc        ; save pcl
.0edb	68		          pla            ; stack : -
.0edc	8d cd 0e	          sta  pc+1      ; save pch
.0edf	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0ee1	48		          pha            ; stack : zp1l
.0ee2	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0ee4	48		          pha            ; stack : zp1h, zp1l
.0ee5	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0ee7	48		          pha            ; stack : zp2l, zp1h, zp1l
.0ee8	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0eea	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0eeb	ad ca 0e	          lda  rp        ; get rp
.0eee	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0eef	ad cb 0e	          lda  ra        ; get a
.0ef2	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ef3	8a		          txa            ; get x
.0ef4	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef5	98		          tya            ; get y
.0ef6	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef7	ad cd 0e	          lda  pc+1      ; get pch
.0efa	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0efb	ad cc 0e	          lda  pc        ; get pcl
.0efe	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eff	ad ca 0e	          lda  rp        ; get rp
.0f02	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f03	ad cb 0e	          lda  ra        ; get a
.0f06	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f07	58		          cli
.0f08	60		          rts
.0f09			pullall
.0f09			pull
.0f09			popall
.0f09			pop
.0f09	78		          sei
.0f0a	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f0b	8d cc 0e	          sta  pc        ; save pcl
.0f0e	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f0f	8d cd 0e	          sta  pc+1      ; save pch
.0f12	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f13	a8		          tay            ; set y
.0f14	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f15	aa		          tax            ; set x
.0f16	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0f17	8d cb 0e	          sta  ra        ; save a
.0f1a	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0f1b	8d ca 0e	          sta  rp        ; save rp
.0f1e	68		          pla            ; stack : zp2l, zp1h, zp1l
.0f1f	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0f21	68		          pla            ; stack : zp1h, zp1l
.0f22	85 fd		          sta  zpage2    ; get zpage2 High byte
.0f24	68		          pla            ; stack : zp1l
.0f25	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0f27	68		          pla            ; stack :
.0f28	85 fb		          sta  zpage1    ; get zpage1 High byte
.0f2a	ad cd 0e	          lda  pc+1      ; get pch
.0f2d	48		          pha            ; stack : pch
.0f2e	ad cc 0e	          lda  pc
.0f31	48		          pha            ; stack : pcl, pch
.0f32	ad ca 0e	          lda  rp        ; get rp
.0f35	48		          pha            ; stack : rp, pcl, pch
.0f36	ad cb 0e	          lda  ra        ; set ra
.0f39	58		          cli
.0f3a	28		          plp            ; stack : pcl, pch
.0f3b	60		          rts
.0f3c			pushreg
.0f3c	08		          php            ; stack : flg, pcl, pch
.0f3d	78		          sei
.0f3e	8d cb 0e	          sta  ra        ; save a
.0f41	68		          pla            ; stack : pcl, pch
.0f42	8d ca 0e	          sta  rp        ; save rp
.0f45	68		          pla            ; stack : pch
.0f46	8d cc 0e	          sta  pc        ; save pcl
.0f49	68		          pla            ; stack : -
.0f4a	8d cd 0e	          sta  pc+1      ; save pch
.0f4d	ad ca 0e	          lda  rp        ; get rp
.0f50	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0f51	ad cb 0e	          lda  ra        ; get a
.0f54	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f55	8a		          txa            ; get x
.0f56	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f57	98		          tya            ; get y
.0f58	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f59	ad cd 0e	          lda  pc+1      ; get pch
.0f5c	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f5d	ad cc 0e	          lda  pc        ; get pcl
.0f60	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f61	ad ca 0e	          lda  rp        ; get rp
.0f64	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f65	ad cb 0e	          lda  ra        ; get a
.0f68	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f69	58		          cli
.0f6a	60		          rts
.0f6b			pullreg
.0f6b			popreg
.0f6b	78		          sei
.0f6c	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f6d	8d cc 0e	          sta  pc        ; save pcl
.0f70	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f71	8d cd 0e	          sta  pc+1      ; save pch
.0f74	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f75	a8		          tay            ; set y
.0f76	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f77	aa		          tax            ; set x
.0f78	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0f79	8d cb 0e	          sta  ra        ; save a
.0f7c	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0f7d	8d ca 0e	          sta  rp        ; save rp
.0f80	ad cd 0e	          lda  pc+1      ; get pch
.0f83	48		          pha            ; stack : pch
.0f84	ad cc 0e	          lda  pc
.0f87	48		          pha            ; stack : pcl, pch
.0f88	ad ca 0e	          lda  rp        ; get rp
.0f8b	48		          pha            ; stack : rp, pcl, pch
.0f8c	ad cb 0e	          lda  ra        ; set ra
.0f8f	58		          cli
.0f90	28		          plp            ; stack : pcl, pch
.0f91	60		          rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0f92			blkfill
.0f92	20 ce 0e	bf0            jsr  push
.0f95	20 51 10	               jsr  savezp1
.0f98	84 fc		               sty  zpage1+1
.0f9a	a0 00		               ldy  #$00
.0f9c	84 fb		               sty  zpage1
.0f9e	91 fb		bf1            sta  (zpage1),y
.0fa0	c8		               iny
.0fa1	d0 fb		               bne  bf1
.0fa3	20 60 10	               jsr  restzp1
.0fa6	20 09 0f	               jsr  pop
.0fa9	60		               rts
.0faa			memfill
.0faa	20 ce 0e	               jsr  push
.0fad	20 92 0f	mf1            jsr  blkfill
.0fb0	c8		               iny
.0fb1	ca		               dex
.0fb2	d0 f9		               bne  mf1
.0fb4	20 09 0f	               jsr  pop
.0fb7	60		               rts
.0fb8			memmove
.0fb8	20 ce 0e	               jsr  push
.0fbb	ba		               tsx            ; On se crée un pointeur ...
.0fbc	8a		               txa
.0fbd	18		               clc
.0fbe	69 0b		               adc  #11
.0fc0	a8		               tay
.0fc1	a2 06		               ldx  #$06
.0fc3	b9 00 01	nextbyte       lda  $0100,y
.0fc6	99 12 10	               sta  words,y
.0fc9	c8		               iny
.0fca	ca		               dex
.0fcb	d0 f6		               bne  nextbyte
.0fcd	ad 12 10	               lda  s
.0fd0	8d e9 0f	               sta  source+1
.0fd3	ad 13 10	               lda  s+1
.0fd6	8d ea 0f	               sta  source+2
.0fd9	ad 14 10	               lda  d
.0fdc	8d e6 0f	               sta  destin+1
.0fdf	ad 15 10	               lda  d+1
.0fe2	8d e7 0f	               sta  destin+2
.0fe5	ad ff ff	destin         lda  $ffff
.0fe8	8d ff ff	source         sta  $ffff
.0feb	ee e6 0f	               inc  destin+1
.0fee	d0 03		               bne  src
.0ff0	ee e7 0f	               inc  destin+2
.0ff3	ee e9 0f	src            inc  source+1
.0ff6	d0 03		               bne  cnt
.0ff8	ee ea 0f	               inc  source+2
.0ffb	ad 16 10	cnt            lda  compte
.0ffe	d0 08		               bne  decit
.1000	ad 17 10	               lda  compte+1
.1003	f0 09		               beq  fini
.1005	ce 17 10	               dec  compte+1
.1008	ce 16 10	decit          dec  compte
.100b	4c e5 0f	               jmp  destin
.100e	20 09 0f	fini           jsr  pop
.1011	60		               rts
.1012			words
>1012	00 00		s         .word     $0000
>1014	00 00		d         .word     $0000
>1016	00 00		compte    .word     $0000
.1018			decword
.1018	20 ce 0e	               jsr  push
.101b	86 fd		               stx  zpage2
.101d	84 fe		               sty  zpage2+1
.101f	20 09 0f	               jsr  pop
.1022	60		               rts
.1023			inczpage1
.1023			inczp1
.1023	08		               php
.1024	48		               pha
.1025	e6 fb		               inc  zpage1
.1027	a5 fb		               lda  zpage1
.1029	d0 02		               bne  nopage
.102b	e6 fc		               inc  zpage1+1
.102d	68		nopage         pla
.102e	28		               plp
.102f	60		               rts
.1030			deczpage1
.1030			deczp1
.1030	08		                php
.1031	48		                pha
.1032	c6 fb		                dec  zpage1
.1034	d0 02		                bne  nopage
.1036	c6 fc		                dec  zpage1+1
.1038	68		nopage          pla
.1039	28		                plp
.103a	60		                rts
.103b			inczpage2
.103b			inczp2
.103b	08		               php
.103c	48		               pha
.103d	e6 fd		               inc  zpage2
.103f	a5 fd		               lda  zpage2
.1041	d0 02		               bne  nopage
.1043	e6 fe		               inc  zpage2+1
.1045	68		nopage         pla
.1046	28		               plp
.1047	60		               rts
.1048			deczpage2
.1048			deczp2
.1048	08		               php
.1049	c6 fd		               dec  zpage2
.104b	d0 02		               bne  nopage
.104d	c6 fe		               dec  zpage2+1
.104f	28		nopage         plp
.1050	60		               rts
.1051			savezp1
.1051	08		               php
.1052	48		               pha
.1053	a5 fb		               lda  zpage1
.1055	8d e2 10	               sta  zp1
.1058	a5 fc		               lda  zpage1+1
.105a	8d e3 10	               sta  zp1+1
.105d	68		               pla
.105e	28		               plp
.105f	60		               rts
.1060			restzp1
.1060	08		               php
.1061	48		               pha
.1062	ad e2 10	               lda zp1
.1065	85 fb		               sta zpage1
.1067	ad e3 10	               lda zp1+1
.106a	85 fc		               sta zpage1+1
.106c	68		               pla
.106d	28		               plp
.106e	60		               rts
.106f			savezp2
.106f	08		         php
.1070	48		         pha
.1071	a5 fd		         lda zpage2
.1073	8d e4 10	         sta zp2
.1076	a5 fe		         lda zpage2+1
.1078	8d e5 10	         sta zp2+1
.107b	68		         pla
.107c	28		         plp
.107d	60		         rts
.107e			restzp2
.107e	08		                php
.107f	48		                pha
.1080	ad e4 10	                lda  zp2
.1083	85 fd		                sta  zpage2
.1085	ad e5 10	                lda  zp2+1
.1088	85 fe		                sta  zpage2+1
.108a	68		                pla
.108b	28		                plp
.108c	60		                rts
.108d			xy2addr
.108d	08		                php
.108e	48		                pha
.108f	8a		                txa
.1090	48		                pha
.1091	98		                tya
.1092	48		                pha
.1093	ad dd 10	                lda     addr1+1
.1096	8d df 10	                sta     addr2+1
.1099	ad dc 10	                lda     addr1
.109c	8d de 10	                sta     addr2
.109f	c0 00		                cpy     #$00
.10a1	f0 0f		                beq     addx
.10a3	18		moreline        clc
.10a4	6d db 10	                adc     ymult
.10a7	90 03		                bcc     norepy
.10a9	ee df 10	                inc     addr2+1
.10ac	8d de 10	norepy          sta     addr2
.10af	88		                dey
.10b0	d0 f1		                bne     moreline
.10b2	8a		addx            txa
.10b3	18		                clc
.10b4	6d de 10	                adc     addr2
.10b7	90 03		                bcc     thatsit
.10b9	ee df 10	                inc     addr2+1
.10bc	8d de 10	thatsit         sta     addr2
.10bf	68		                pla
.10c0	a8		                tay
.10c1	68		                pla
.10c2	aa		                tax
.10c3	68		                pla
.10c4	28		                plp
.10c5	60		                rts
.10c6			loop
.10c6	ce e6 10	               dec  loopcount
.10c9	d0 03		               bne  norep
.10cb	ce e7 10	               dec  loopcount+1
.10ce	ad e6 10	norep          lda  loopcount
.10d1	c9 00		               cmp  #$00
.10d3	d0 05		               bne  out
.10d5	4d e7 10	               eor  loopcount+1
.10d8	c9 ff		               cmp  #$ff
.10da	60		out            rts
>10db	28		ymult          .byte     40
>10dc	00 00		addr1          .word     $0000
>10de	00 00		addr2          .word     $0000
>10e0	00 00		bytecnt        .word     $0000
>10e2	00 00		zp1            .word   $0000
>10e4	00 00		zp2            .word   $0000
>10e6	00 00		loopcount      .word     $0000

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>10e8	01		a2hexcol       .byte     1              ; pour aputscxy
>10e9	00		a2hexbkcol     .byte     %00000000
.10ea			a2hexpos
>10ea	00		a2hexpx        .byte     0              ; pour aputsxy
>10eb	00		a2hexpy        .byte     0
>10ec	24		a2hexprefix    .byte     "$"            ; pour aputs
>10ed	00 00		a2hexstr       .word     $00
>10ef	00 00		               .word     $00
>10f1	00		               .byte     0              ; 0 end string
>10f2	30 30 30 30	abin           .null     "00000000"
>10f6	30 30 30 30 00
>10fb	20 20 20 00	adec           .null     "   "
.10ff			putahexfmtxy
.10ff	20 ce 0e	               jsr  push
.1102	20 4e 11	               jsr  atohex
.1105	ae ea 10	               ldx  a2hexpx
.1108	ac eb 10	               ldy  a2hexpy
.110b	20 51 0b	               jsr  gotoxy
.110e	a2 ec		               ldx  #<a2hexprefix
.1110	a0 10		               ldy  #>a2hexprefix
.1112	20 37 0b	               jsr  puts
.1115	20 09 0f	               jsr  pop
.1118	60		               rts
.1119			putahexfmt
.1119	20 ce 0e	               jsr  push
.111c	20 4e 11	               jsr  atohex
.111f	a2 ec		               ldx  #<a2hexprefix
.1121	a0 10		               ldy  #>a2hexprefix
.1123	20 37 0b	               jsr  puts
.1126	20 09 0f	               jsr  pop
.1129	60		               rts
.112a			putahex
.112a	20 ce 0e	               jsr  push
.112d	20 4e 11	               jsr  atohex
.1130	a2 ed		               ldx  #<a2hexstr
.1132	a0 10		               ldy  #>a2hexstr
.1134	20 37 0b	               jsr  puts
.1137	20 09 0f	               jsr  pop
.113a	60		               rts
.113b			nibtohex
.113b	08		               php
.113c	29 0f		               and  #$0f
.113e	f8		               sed
.113f	18		               clc
.1140	69 90		               adc  #$90
.1142	69 40		               adc  #$40
.1144	d8		               cld
.1145	28		               plp
.1146	60		               rts
.1147			lsra4bits
.1147	08		               php
.1148	4a		               lsr
.1149	4a		               lsr
.114a	4a		               lsr
.114b	4a		               lsr
.114c	28		               plp
.114d	60		               rts
.114e			atohex
.114e	08		               php
.114f	48		               pha
.1150	48		               pha
.1151	20 47 11	               jsr  lsra4bits
.1154	20 3b 11	               jsr  nibtohex
.1157	8d ed 10	               sta  a2hexstr
.115a	68		               pla
.115b	20 3b 11	               jsr  nibtohex
.115e	8d ee 10	               sta  a2hexstr+1
.1161	a9 00		               lda  #$00                ; set end of string
.1163	8d ef 10	               sta  a2hexstr+2
.1166	68		               pla
.1167	28		               plp
.1168	60		               rts
.1169			xy2hex
.1169	20 ce 0e	               jsr  push
.116c	20 4e 11	               jsr  atohex
.116f	8a		               txa
.1170	48		               pha
.1171	20 47 11	               jsr  lsra4bits
.1174	20 3b 11	               jsr  nibtohex
.1177	8d ed 10	               sta  a2hexstr
.117a	68		               pla
.117b	20 3b 11	               jsr  nibtohex
.117e	8d ee 10	               sta  a2hexstr+1
.1181	98		               tya
.1182	48		               pha
.1183	20 47 11	               jsr  lsra4bits
.1186	20 3b 11	               jsr  nibtohex
.1189	8d ef 10	               sta  a2hexstr+2
.118c	68		               pla
.118d	20 3b 11	               jsr  nibtohex
.1190	8d f0 10	               sta  a2hexstr+3
.1193	a9 00		               lda  #$00                ; 0 ended string
.1195	8d f1 10	               sta  a2hexstr+4
.1198	20 09 0f	               jsr  pop
.119b			atobin
.119b	20 ce 0e	               jsr  push
.119e	a2 08		               ldx  #8
.11a0	a0 00		               ldy  #0
.11a2	18		               clc
.11a3	2a		nextbit        rol
.11a4	48		               pha
.11a5	69 00		               adc  #$00
.11a7	29 01		               and  #$01
.11a9	20 3b 11	               jsr  nibtohex
.11ac	99 f2 10	               sta  abin,y
.11af	68		               pla
.11b0	c8		               iny
.11b1	ca		               dex
.11b2	d0 ef		               bne  nextbit
.11b4	a9 00		               lda  #0
.11b6	99 f2 10	               sta  abin,y
.11b9	20 09 0f	               jsr  pull
.11bc	60		               rts
.11bd			putabin
.11bd	20 9b 11	               jsr     atobin
.11c0	20 ce 0e	               jsr     push
.11c3	a2 f2		               ldx     #<abin
.11c5	a0 10		               ldy     #>abin
.11c7	20 37 0b	               jsr     puts
.11ca	20 09 0f	               jsr     pop
.11cd	60		               rts
.11ce			printabin
.11ce	20 ce 0e	               jsr     push
.11d1	a2 f2		               ldx     #<abin
.11d3	a0 10		               ldy     #>abin
.11d5	20 37 0b	               jsr     puts
.11d8	20 09 0f	               jsr     pop
.11db	60		               rts
.11dc			putabinfmt
.11dc	08		               php
.11dd	48		               pha
.11de	a9 25		               lda     #"%"
.11e0	20 31 0b	               jsr     putch
.11e3	68		               pla
.11e4	20 bd 11	               jsr     putabin
.11e7	28		               plp
.11e8	60		               rts
.11e9			putabinxy
.11e9	20 51 0b	               jsr     gotoxy
.11ec	20 bd 11	               jsr     putabin
.11ef	60		               rts
.11f0			putabinfmtxy
.11f0	20 51 0b	               jsr     gotoxy
.11f3	20 dc 11	               jsr     putabinfmt
.11f6	60		               rts
.11f7			atodec
.11f7	20 ce 0e	               jsr  push
.11fa	f8		               sed            ; On se place en mode décimal.
.11fb	aa		               tax            ; On déplace a dans x.
.11fc	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.11fe	a9 00		               lda  #$00      ; 0 dans A.
.1200	18		nextbit        clc            ; Bit carry a 0.
.1201	69 01		               adc  #$01      ; Ajoute 1 a A.
.1203	90 01		               bcc  decx      ; Pas de carry, pas de report.
.1205	c8		               iny            ; On incrémente Y
.1206	ca		decx           dex            ; X=X-1
.1207	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.1209	48		               pha            ; A sur le stack.
.120a	98		               tya            ; Y dans A (MSB)
.120b	20 3b 11	               jsr  nibtohex  ; a hex petsci ...
.120e	8d fb 10	               sta  adec      ; ... dans tampon.
.1211	68		               pla            ; Récupere A
.1212	48		               pha            ;
.1213	20 3b 11	               jsr  nibtohex
.1216	8d fd 10	               sta  adec+2
.1219	68		               pla
.121a	6a		               ror
.121b	6a		               ror
.121c	6a		               ror
.121d	6a		               ror
.121e	20 3b 11	               jsr  nibtohex
.1221	8d fc 10	               sta  adec+1
.1224	d8		               cld            ; On revient en mode binaire.
.1225	20 09 0f	               jsr  pull
.1228	60		               rts
.1229			putadec
.1229	20 ce 0e	               jsr  push
.122c	20 f7 11	               jsr  atodec
.122f	a2 fb		               ldx  #<adec
.1231	a0 10		               ldy  #>adec+1
.1233	20 37 0b	               jsr  puts
.1236	20 09 0f	               jsr  pop
.1239	60		               rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>123a	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>123e	00 00 00 00 00 00 00 00 00 0d 00 00
>124a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>124e	00 00 00 00 00 00 00 00 00 00 00 00
>125a	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>125e	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>126a	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>126e	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>127a	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>127e	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>128a	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>128e	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>129a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>129e	00 00 00 00 00 00 00 00 00 00 00 00
>12aa	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>12ae	00 00 00 00 00 00 00 00 00 00 00 00
>12ba	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>12be	00 00 00 00 00 00 00 00 00 00 00 00
>12ca	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>12ce	00 00 00 00 00 00 00 00 00 00 00 00
>12da	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>12de	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>12ea	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>12ee	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>12fa	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>12fe	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>130a	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>130e	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>131a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>131e	00 00 00 00 00 00 00 00 00 00 00 00
>132a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>132e	00 00 00 00 00 00 00 00 00 00 00 00
.133a			waitstop
.133a	20 ce 0e	               jsr  push
.133d	20 ed f6	wait           jsr  k_stop
.1340	d0 fb		               bne  wait
.1342	20 09 0f	               jsr  pop
.1345	60		               rts
.1346			anykey
.1346	08		               php
.1347	48		               pha
.1348	a5 cb		nokey          lda 203
.134a	c9 40		               cmp #64
.134c	f0 fa		               beq nokey
.134e	20 54 13	               jsr releasekey
.1351	68		               pla
.1352	28		               plp
.1353	60		               rts
.1354			releasekey
.1354	08		               php
.1355	48		               pha
.1356	a5 cb		keypressed     lda 203
.1358	c9 40		               cmp #64
.135a	d0 fa		               bne keypressed
.135c	68		               pla
.135d	28		               plp
.135e	60		               rts
.135f			getkey
.135f	20 e4 ff	again          jsr  getin
.1362	c9 00		               cmp  #0
.1364	f0 f9		               beq  again
.1366	60		               rts
.1367			kbflushbuff
.1367	08		               php
.1368	48		               pha
.1369	20 e4 ff	again          jsr  getin
.136c	c9 00		               cmp  #0
.136e	d0 f9		               bne  again
.1370	68		               pla
.1371	28		               plp
.1372	60		               rts
.1373			waitkey
.1373	20 ce 0e	               jsr  push
.1376	8d c4 13	               sta  thekey
.1379	20 e4 ff	nope           jsr  getin
.137c	20 d2 ff	               jsr  chrout
.137f	cd c4 13	               cmp  thekey
.1382	d0 f5		               bne  nope
.1384	20 d2 ff	               jsr  chrout
.1387	20 09 0f	               jsr  pop
.138a	60		               rts
.138b			waitspace
.138b	20 ce 0e	               jsr  push
.138e	a9 7f		wait           lda  #$7f  ;%01111111
.1390	8d 00 dc	               sta  $dc00
.1393	ad 01 dc	               lda  $dc01
.1396	29 10		               and  #$10  ;mask %00010000
.1398	d0 f4		               bne  wait
.139a	20 09 0f	               jsr  pop
.139d			waitsstop
.139d	20 ce 0e	               jsr  push
.13a0	20 ed f6	wait           jsr  k_stop  ;%01111111
.13a3	d0 fb		               bne  wait
.13a5	20 09 0f	               jsr  pop
.13a8			waitreturn
.13a8	20 ce 0e	               jsr  push
.13ab	ad c5 13	               lda  thecount
.13ae	8d 00 04	               sta  scrnram
.13b1	a9 02		               lda  #$02
.13b3	8d 00 d8	               sta  colorram
.13b6	20 e4 ff	nope           jsr  getin
.13b9	c9 0d		nohex          cmp  #$0d
.13bb	d0 f9		               bne  nope
.13bd	ee c5 13	               inc  thecount
.13c0	20 09 0f	               jsr  pop
.13c3	60		               rts
>13c4	00		thekey         .byte   0
>13c5	01		thecount       .byte   $01

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.13c6			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.13c6	20 ce 0e	                jsr push
.13c9	08		                php
.13ca	8d 8a 15	                sta  rega
.13cd	68		                pla
.13ce	8d 8d 15	                sta  regp
.13d1	8e 8b 15	                stx  regx
.13d4	8c 8c 15	                sty  regy
.13d7	ba		                tsx
.13d8	8e 8e 15	                stx  regs
.13db	68		                pla
.13dc	8d 91 15	                sta  regpcl
.13df	8d 92 15	                sta  regpcl2
.13e2	68		                pla
.13e3	8d 8f 15	                sta  regpch
.13e6	8d 90 15	                sta  regpch2
.13e9	ad 8a 15	                lda  rega
.13ec	48		                pha
.13ed	20 3b 11	                jsr  nibtohex
.13f0	8d 34 15	                sta  vala+1
.13f3	68		                pla
.13f4	20 47 11	                jsr  lsra4bits
.13f7	20 3b 11	                jsr  nibtohex
.13fa	8d 33 15	                sta  vala
.13fd	ad 8c 15	                lda  regy
.1400	48		                pha
.1401	20 3b 11	                jsr  nibtohex
.1404	8d 48 15	                sta  valy+1
.1407	68		                pla
.1408	20 47 11	                jsr  lsra4bits
.140b	20 3b 11	                jsr  nibtohex
.140e	8d 47 15	                sta  valy
.1411	ad 8b 15	                lda  regx
.1414	48		                pha
.1415	20 3b 11	                jsr  nibtohex
.1418	8d 3e 15	                sta  valx+1
.141b	68		                pla
.141c	20 47 11	                jsr  lsra4bits
.141f	20 3b 11	                jsr  nibtohex
.1422	8d 3d 15	                sta  valx
.1425	ad 8d 15	                lda  regp
.1428	48		                pha
.1429	20 3b 11	                jsr  nibtohex
.142c	8d 52 15	                sta  valp+1
.142f	68		                pla
.1430	20 47 11	                jsr  lsra4bits
.1433	20 3b 11	                jsr  nibtohex
.1436	8d 51 15	                sta  valp
.1439	ad 8e 15	                lda  regs
.143c	48		                pha
.143d	20 3b 11	                jsr  nibtohex
.1440	8d 5c 15	                sta  vals+1
.1443	68		                pla
.1444	20 47 11	                jsr  lsra4bits
.1447	20 3b 11	                jsr  nibtohex
.144a	8d 5b 15	                sta  vals
.144d	18		                clc
.144e	ad 92 15	                lda regpcl2
.1451	69 01		                adc #$01
.1453	8d 92 15	                sta regpcl2
.1456	ad 92 15	                lda regpcl2
.1459	d0 03		                bne noreport
.145b	ee 90 15	                inc regpch2
.145e	ad 90 15	    noreport    lda regpch2
.1461	48		                pha
.1462	20 3b 11	                jsr  nibtohex
.1465	8d 67 15	                sta  valpch+1
.1468	68		                pla
.1469	20 47 11	                jsr  lsra4bits
.146c	20 3b 11	                jsr  nibtohex
.146f	8d 66 15	                sta  valpch
.1472	ad 92 15	                lda  regpcl2
.1475	48		                pha
.1476	20 3b 11	                jsr  nibtohex
.1479	8d 69 15	                sta  valpcl+1
.147c	68		                pla
.147d	20 47 11	                jsr  lsra4bits
.1480	20 3b 11	                jsr  nibtohex
.1483	8d 68 15	                sta  valpcl
.1486	a5 fb		                lda  zpage1
.1488	48		                pha
.1489	20 3b 11	                jsr  nibtohex
.148c	8d 77 15	                sta  valz1l
.148f	68		                pla
.1490	20 47 11	                jsr  lsra4bits
.1493	20 3b 11	                jsr  nibtohex
.1496	8d 78 15	                sta  valz1l+1
.1499	a5 fc		                lda  zpage1+1
.149b	48		                pha
.149c	20 3b 11	                jsr  nibtohex
.149f	8d 75 15	                sta  valz1h
.14a2	68		                pla
.14a3	20 47 11	                jsr  lsra4bits
.14a6	20 3b 11	                jsr  nibtohex
.14a9	8d 76 15	                sta  valz1h+1
.14ac	a5 fd		                lda  zpage2
.14ae	48		                pha
.14af	20 3b 11	                jsr  nibtohex
.14b2	8d 86 15	                sta  valz2l
.14b5	68		                pla
.14b6	20 47 11	                jsr  lsra4bits
.14b9	20 3b 11	                jsr  nibtohex
.14bc	8d 87 15	                sta  valz2l+1
.14bf	a5 fe		                lda  zpage2+1
.14c1	48		                pha
.14c2	20 3b 11	                jsr  nibtohex
.14c5	8d 84 15	                sta  valz2h
.14c8	68		                pla
.14c9	20 47 11	                jsr  lsra4bits
.14cc	20 3b 11	                jsr  nibtohex
.14cf	8d 85 15	                sta  valz2h+1
.14d2	20 18 0c	                jsr  setinverse
.14d5	78		                sei
.14d6	a2 2c		                ldx  #<srega
.14d8	a0 15		                ldy  #>srega+1
.14da	20 c0 0b	                jsr  putscxy
.14dd	a2 36		                ldx  #<sregx
.14df	a0 15		                ldy  #>sregx+1
.14e1	20 c0 0b	                jsr  putscxy
.14e4	a2 40		                ldx  #<sregy
.14e6	a0 15		                ldy  #>sregy+1
.14e8	20 c0 0b	                jsr  putscxy
.14eb	a2 4a		                ldx  #<sregp
.14ed	a0 15		                ldy  #>sregp+1
.14ef	20 c0 0b	                jsr  putscxy
.14f2	a2 54		                ldx  #<sregs
.14f4	a0 15		                ldy  #>sregs+1
.14f6	20 c0 0b	                jsr  putscxy
.14f9	a2 5e		                ldx  #<sregpc
.14fb	a0 15		                ldy  #>sregpc+1
.14fd	20 c0 0b	                jsr  putscxy
.1500	a2 6c		                ldx  #<sregz1
.1502	a0 15		                ldy  #>sregz1+1
.1504	20 c0 0b	                jsr  putscxy
.1507	a2 7b		                ldx  #<sregz2
.1509	a0 15		                ldy  #>sregz2+1
.150b	20 c0 0b	                jsr  putscxy
.150e	58		                cli
.150f	20 20 0c	                jsr  clrinverse
.1512	ad 8f 15	                lda  regpch
.1515	48		                pha
.1516	ad 91 15	                lda  regpcl
.1519	48		                pha
.151a	ac 8c 15	                ldy  regy
.151d	ae 8b 15	                ldx  regx
.1520	ad 8d 15	                lda  regp
.1523	48		                pha
.1524	ad 8a 15	                lda  rega
.1527	28		                plp
.1528	20 09 0f	                jsr pop
.152b	60		                rts
>152c	01 00 17	srega   .byte   colr,coln,line
>152f	20 41 3a 24	        .text   ' a:$' ;4,24
>1533	00 00 00	vala    .byte   0,0,0
>1536	01 06 17	sregx   .byte   colr,coln+6,line
>1539	20 58 3a 24	        .text   ' x:$' ;4,24
>153d	00 00 00	valx    .byte   0,0,0
>1540	01 0c 17	sregy   .byte   colr,coln+12,line
>1543	20 59 3a 24	        .text   ' y:$' ;4,24
>1547	00 00 00	valy    .byte   0,0,0
>154a	01 12 17	sregp   .byte   colr,coln+18,line
>154d	20 50 3a 24	        .text   ' p:$' ;4,24
>1551	00 00 00	valp    .byte   0,0,0
>1554	01 18 17	sregs   .byte   colr,coln+24,line
>1557	20 53 3a 24	        .text   ' s:$' ;4,24
>155b	00 00 00	vals    .byte   0,0,0
>155e	01 1e 17	sregpc  .byte   colr,coln+30,line
>1561	20 50 43 3a	        .text   ' pc:$' ;4,24
>1565	24
>1566	00 00		valpch  .byte   0,0
>1568	00 00 20 00	valpcl  .byte   0,0,32,0
>156c	01 03 18	sregz1  .byte   colr,coln+3,line+1
>156f	20 5a 50 31	        .text   ' zp1:$' ;4,24
>1573	3a 24
>1575	00 00		valz1h  .byte   0,0
>1577	00 00 20 00	valz1l  .byte   0,0,32,0
>157b	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>157e	20 5a 50 32	        .text   ' zp2:$' ;4,24
>1582	3a 24
>1584	00 00		valz2h  .byte   0,0
>1586	00 00 20 00	valz2l  .byte   0,0,32,0
>158a	00		rega    .byte   0
>158b	00		regx    .byte   0
>158c	00		regy    .byte   0
>158d	00		regp    .byte   0
>158e	00		regs    .byte   0
>158f	00		regpch  .byte   0
>1590	00		regpch2 .byte   0
>1591	00		regpcl  .byte   0
>1592	00		regpcl2 .byte   0
>1593	00		vzp1h   .byte   0
>1594	00		vzp1l   .byte   0
>1595	00		vzp2h   .byte   0
>1596	00		vzp2l   .byte   0

;******  Return to file: libtest03.asm


;******  End of listing

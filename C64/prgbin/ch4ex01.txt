
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L ch4ex01.txt -o ch4ex01.prg ch4ex01.asm
; Wed Oct 16 23:13:58 2024

;Offset	;Hex		;Source

;******  Processing input file: ch4ex01.asm

="20241016-220013"	                Version = "20241016-220013"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	1d 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	0a 00				.word 10   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 41			.text " *par daniel lafrance*"
>080a	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>081a	45 2a
>081c	00				.byte $00		;Un zéro pour indiquer la fin de cette
>081d	28 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>081f	14 00				.word 20   	;Numero de la ligne Basic.
>0821	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0822	30 32 30 39			.text format("%05d",hpgmstart)
>0826	30
>0827	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0828	00 00		bcmd3	.word $0000    ;L'adresse de la commande Basic suivante.
.082a	4c 2d 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: ch4ex01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: ch4ex01.asm

.082d			main
.082d	20 66 c4	               jsr  push
.0830	20 38 c3	               jsr scrmaninit
.0833	08		               php
.0834	48		               pha
.0835	a9 08		               lda  #$08
.0837	20 d2 ff	               jsr  $ffd2
.083a	68		               pla
.083b	28		               plp
.083c	20 79 08	               jsr help
.083f	4c 75 08	               jmp  mainout
.0842	20 7e c8	               jsr anykey
.0845	20 92 0a	               jsr ch3ex11
.0848	08		               php
.0849	48		               pha
.084a	a9 09		               lda  #$09
.084c	20 d2 ff	               jsr  $ffd2
.084f	68		               pla
.0850	28		               plp
.0851	08		               php
.0852	48		               pha
.0853	a9 8e		               lda  #b_uppercase
.0855	8d 57 c3	               sta  characterset
.0858	20 d2 ff	               jsr  $ffd2
.085b	68		               pla
.085c	28		               plp
.085d	20 58 c3	               jsr  cls
.0860	48		               pha
.0861	a9 0c		               lda  #cgrismoyen
.0863	8d 20 d0	               sta  $d020
.0866	68		               pla
.0867	48		               pha
.0868	a9 0b		               lda  #cgrisfonce
.086a	8d 21 d0	               sta  $d021
.086d	68		               pla
.086e	48		               pha
.086f	a9 0f		               lda  #cgrispale
.0871	8d 86 02	               sta  bascol
.0874	68		               pla
.0875			mainout
.0875	20 a5 c4	               jsr pop
.0878	60		               rts
.0879			help
.0879	08		               php
.087a	48		               pha
.087b	a9 0e		               lda  #14
.087d	8d 57 c3	               sta  characterset
.0880	20 d2 ff	               jsr  $ffd2
.0883	68		               pla
.0884	28		               plp
.0885	20 58 c3	               jsr cls
.0888	20 66 c4	               jsr  push
.088b	a2 6a		isx            ldx  #<line
.088d	a0 0a		isy            ldy  #>line
.088f	20 75 c3	               jsr  puts
.0892	20 a5 c4	               jsr  pull
.0895	20 66 c4	               jsr  push
.0898	a2 d7		isx            ldx  #<headera
.089a	a0 08		isy            ldy  #>headera
.089c	20 75 c3	               jsr  puts
.089f	20 a5 c4	               jsr  pull
.08a2	20 66 c4	               jsr  push
.08a5	a2 62		isx            ldx  #<headerb
.08a7	a0 09		isy            ldy  #>headerb
.08a9	20 75 c3	               jsr  puts
.08ac	20 a5 c4	               jsr  pull
.08af	20 66 c4	               jsr  push
.08b2	a2 de		isx            ldx  #<shortcuts
.08b4	a0 09		isy            ldy  #>shortcuts
.08b6	20 75 c3	               jsr  puts
.08b9	20 a5 c4	               jsr  pull
.08bc	20 66 c4	               jsr  push
.08bf	a2 4e		isx            ldx  #<helptext
.08c1	a0 0a		isy            ldy  #>helptext
.08c3	20 75 c3	               jsr  puts
.08c6	20 a5 c4	               jsr  pull
.08c9	20 66 c4	               jsr  push
.08cc	a2 6a		isx            ldx  #<line
.08ce	a0 0a		isy            ldy  #>line
.08d0	20 75 c3	               jsr  puts
.08d3	20 a5 c4	               jsr  pull
.08d6	60		               rts
.08d7			headera
>08d7	0d 20 d4 cf	               .text     $0d,        " TOP-DOWN ASSEMBLY LANGUAGE PROGRAMMING"
>08db	d0 2d c4 cf d7 ce 20 c1 d3 d3 c5 cd c2 cc d9 20
>08eb	cc c1 ce c7 d5 c1 c7 c5 20 d0 d2 cf c7 d2 c1 cd
>08fb	cd c9 ce c7
>08ff	0d 20 20 20	               .text     $0d,        "     For the Commodore Vic20 and 64"
>0903	20 20 c6 4f 52 20 54 48 45 20 c3 4f 4d 4d 4f 44
>0913	4f 52 45 20 d6 49 43 32 30 20 41 4e 44 20 36 34
>0923	0d 20 20 20	               .text     $0d,        "           Book by KEN SKIER."
>0927	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>0937	cb c5 ce 20 d3 cb c9 c5 d2 2e
>0941	0d 20 20 20	               .null     $0d,        "         ISBN 0-07-057864-8 PBK"
>0945	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 30 37 2d
>0955	30 35 37 38 36 34 2d 38 20 d0 c2 cb 00
>0962	0d 20 20 20	headerb        .text     $0d,        "            ch4ex01 (p.48)"
>0966	20 20 20 20 20 20 20 20 20 43 48 34 45 58 30 31
>0976	20 28 50 2e 34 38 29
>097d	0d 20 20 20	               .text     $0d,        "           (c) McGraw-hill"
>0981	20 20 20 20 20 20 20 20 28 43 29 20 cd 43 c7 52
>0991	41 57 2d 48 49 4c 4c
>0998	0d 20 20 20	               .text     $0d,        "     programmed by Daniel Lafrance."
>099c	20 20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20
>09ac	c4 41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>09bc	0d 20 20 20	               .null     $0d, format("       Version: %s.",Version)
>09c0	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>09d0	34 31 30 31 36 2d 32 32 30 30 31 33 2e 00
>09de	0d 20 2d 2d	shortcuts      .text     $0d,        " -------- S H O R T - C U T S ---------"
>09e2	2d 2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4
>09f2	20 2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d
>0a02	2d 2d 2d 2d
>0a06	0d 20 d4 48	               .text     $0d, format(" This help.....: SYS%05d ($%04X)",help, help)
>0a0a	49 53 20 48 45 4c 50 2e 2e 2e 2e 2e 3a 20 d3 d9
>0a1a	d3 30 32 31 36 39 20 28 24 30 38 37 39 29
>0a28	0d 20 d2 55	               .null     $0d, format(" Run  ch4ex0lI1..: SYS%05d ($%04X)",ch3ex11, ch3ex11),$0d
>0a2c	4e 20 20 43 48 34 45 58 30 4c c9 31 2e 2e 3a 20
>0a3c	d3 d9 d3 30 32 37 30 36 20 28 24 30 c1 39 32 29
>0a4c	0d 00
>0a4e	0d 20 c2 41	helptext       .null     $0d, format(" Basic Example.: SYS%05d",ch3ex11), $0d
>0a52	53 49 43 20 c5 58 41 4d 50 4c 45 2e 3a 20 d3 d9
>0a62	d3 30 32 37 30 36 0d 00
>0a6a	20 2d 2d 2d	line           .null                 " --------------------------------------"
>0a6e	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0a7e	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0a8e	2d 2d 2d 00
.0a92			ch3ex11
.0a92	48		               pha
.0a93	20 58 c3	               jsr  cls
.0a96	20 66 c4	               jsr  push
.0a99	a2 b0		isx            ldx  #<qhelp
.0a9b	a0 0b		isy            ldy  #>qhelp
.0a9d	20 75 c3	               jsr  puts
.0aa0	20 a5 c4	               jsr  pull
.0aa3	ad 20 d0	               lda  vicbordcol
.0aa6	8d af 0b	               sta  byte
.0aa9	a9 10		               lda  #$10
.0aab	8d 20 d0	               sta  vicbordcol
.0aae	20 66 c4	               jsr  push
.0ab1	a2 00		isx            ldx  #<header
.0ab3	a0 0c		isy            ldy  #>header
.0ab5	20 75 c3	               jsr  puts
.0ab8	20 a5 c4	               jsr  pull
.0abb	4c da 0a	               jmp  another
.0abe	4c c3 0a	               jmp  init
>0ac1	d2 0a		pointer   .word     printit
.0ac3	a2 00		init           ldx  #0
.0ac5	a9 da		load           lda  #'Z'
.0ac7	6c c1 0a	useptr         jmp  (pointer)
>0aca	00 00 00 00	               .byte 00,00,00,00,00,00,00,00
>0ace	00 00 00 00
.0ad2	20 d2 ff	printit        jsr  $ffd2
.0ad5	e8		adhust         inx
.0ad6	e0 09		test           cpx #9
.0ad8	d0 ed		branch         bne useptr
.0ada	20 97 c8	another        jsr  getkey
.0add	48		               pha
.0ade	38		               sec
.0adf	20 f0 ff	               jsr  plot
.0ae2	e0 18		               cpx  #24
.0ae4	d0 27		               bne  nohead
.0ae6	20 66 c4	               jsr  push
.0ae9	a2 00		               ldx  #0
.0aeb	a0 00		               ldy  #0
.0aed	20 8f c3	               jsr  gotoxy
.0af0	20 a5 c4	               jsr  pop
.0af3	20 66 c4	               jsr  push
.0af6	a2 b0		isx            ldx  #<qhelp
.0af8	a0 0b		isy            ldy  #>qhelp
.0afa	20 75 c3	               jsr  puts
.0afd	20 a5 c4	               jsr  pull
.0b00	20 66 c4	               jsr  push
.0b03	a2 00		isx            ldx  #<header
.0b05	a0 0c		isy            ldy  #>header
.0b07	20 75 c3	               jsr  puts
.0b0a	20 a5 c4	               jsr  pull
.0b0d	a9 0d		nohead         lda  #13
.0b0f	20 6f c3	               jsr  putch
.0b12	a9 20		               lda  #' '
.0b14	20 6f c3	               jsr  putch
.0b17	a9 20		               lda  #' '
.0b19	20 6f c3	               jsr  putch
.0b1c	68		               pla
.0b1d	20 6f c3	               jsr  putch
.0b20	48		               pha
.0b21	a9 20		               lda  #' '
.0b23	20 6f c3	               jsr  putch
.0b26	a9 20		               lda  #' '
.0b28	20 6f c3	               jsr  putch
.0b2b	a9 25		               lda  #'%'
.0b2d	20 6f c3	               jsr  putch
.0b30	68		               pla
.0b31	20 f2 c6	               jsr  putabin
.0b34	48		               pha
.0b35	a9 20		               lda  #' '
.0b37	20 6f c3	               jsr  putch
.0b3a	a9 24		               lda  #'$'
.0b3c	20 6f c3	               jsr  putch
.0b3f	68		               pla
.0b40	20 5f c6	               jsr  putahex
.0b43	48		               pha
.0b44	a9 20		               lda  #' '
.0b46	20 6f c3	               jsr  putch
.0b49	68		               pla
.0b4a	20 61 c7	               jsr  putadec
.0b4d	c9 1b		isitspecial    cmp  #27
.0b4f	10 14		               bpl  isitctrlh
.0b51	20 66 c4	               jsr  push
.0b54	a2 2f		isx            ldx  #<special
.0b56	a0 0c		isy            ldy  #>special
.0b58	20 75 c3	               jsr  puts
.0b5b	20 a5 c4	               jsr  pull
.0b5e	48		               pha
.0b5f	09 c0		               ora  #%11000000
.0b61	20 6f c3	               jsr  putch
.0b64	68		               pla
.0b65	c9 08		isitctrlh      cmp  #8             ; Is it CTRL]+[H]
.0b67	d0 2a		               bne  isitctrln
.0b69	20 58 c3	               jsr  cls
.0b6c	20 66 c4	               jsr  push
.0b6f	a2 00		               ldx  #0
.0b71	a0 00		               ldy  #0
.0b73	20 8f c3	               jsr  gotoxy
.0b76	20 a5 c4	               jsr  pop
.0b79	20 66 c4	               jsr  push
.0b7c	a2 b0		isx            ldx  #<qhelp
.0b7e	a0 0b		isy            ldy  #>qhelp
.0b80	20 75 c3	               jsr  puts
.0b83	20 a5 c4	               jsr  pull
.0b86	20 66 c4	               jsr  push
.0b89	a2 00		isx            ldx  #<header
.0b8b	a0 0c		isy            ldy  #>header
.0b8d	20 75 c3	               jsr  puts
.0b90	20 a5 c4	               jsr  pull
.0b93	c9 14		isitctrln      cmp  #$14           ; Is it CTRL]+[N]
.0b95	d0 03		               bne  isitctrlq
.0b97	20 79 08	               jsr  help
.0b9a	c9 11		isitctrlq      cmp  #$11           ; Is it [CTRL]+[Q]
.0b9c	f0 03		               beq  doquit
.0b9e	4c da 0a	               jmp  another
.0ba1	ad af 0b	doquit         lda  byte
.0ba4	8d 20 d0	               sta  vicbordcol
.0ba7	68		               pla
.0ba8	20 58 c3	               jsr  cls
.0bab	20 79 08	               jsr  help
.0bae	60		               rts
>0baf	00		byte           .byte     0
>0bb0	20 d4 59 50	qhelp          .text     " Type a key to see char, bin, hex, dec.", 13
>0bb4	45 20 41 20 4b 45 59 20 54 4f 20 53 45 45 20 43
>0bc4	48 41 52 2c 20 42 49 4e 2c 20 48 45 58 2c 20 44
>0bd4	45 43 2e 0d
>0bd8	20 20 c3 d4	               .text     "  CTRL+H help, CTRL+Q quit, CTRL+L cls", 13, 0
>0bdc	d2 cc 2b c8 20 48 45 4c 50 2c 20 c3 d4 d2 cc 2b
>0bec	d1 20 51 55 49 54 2c 20 c3 d4 d2 cc 2b cc 20 43
>0bfc	4c 53 0d 00
>0c00	20 43 48 52	header         .text     " chr %[binary] Hex Dec",13
>0c04	20 25 5b 42 49 4e 41 52 59 5d 20 c8 45 58 20 c4
>0c14	45 43 0d
>0c17	2b 2d 2d 2d	               .null     "+---+---------+---+---+"
>0c1b	2b 2d 2d 2d 2d 2d 2d 2d 2d 2d 2b 2d 2d 2d 2b 2d
>0c2b	2d 2d 2b 00
>0c2f	20 20 c3 d4	special        .null     "  CTRL+"
>0c33	d2 cc 2b 00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>c330	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>c334	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.c338			libtart

;******  Return to file: ch4ex01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: ch4ex01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: ch4ex01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.c338			scrmaninit
.c338	20 66 c4	               jsr  push
.c33b	a9 06		               lda  #vbleu
.c33d	8d 21 d0	               sta  vicbackcol
.c340	a9 05		               lda  #vvert
.c342	8d 20 d0	               sta  vicbordcol
.c345	a9 01		               lda  #vblanc
.c347	8d 86 02	               sta  bascol
.c34a	ad 00 04	               lda  scrnram
.c34d	8d 00 04	               sta  scrnram
.c350	20 58 c3	               jsr  cls
.c353	20 a5 c4	               jsr  pop
.c356	60		               rts
>c357	8e		characterset   .byte b_uppercase
.c358			cls
.c358	08		               php
.c359	48		               pha
.c35a	a9 93		               lda  #$93
.c35c	20 6f c3	               jsr  putch
.c35f	68		               pla
.c360	28		               plp
.c361	60		               rts
.c362			putnch
.c362	08		               php
.c363	e0 00		               cpx  #$00
.c365	f0 06		               beq  out
.c367	20 d2 ff	again          jsr  $ffd2
.c36a	ca		               dex
.c36b	d0 fa		               bne  again
.c36d	28		out            plp
.c36e	60		               rts
.c36f			putch
.c36f	08		               php
.c370	20 d2 ff	               jsr  $ffd2
.c373	28		               plp
.c374	60		               rts
.c375			puts
.c375	20 66 c4	               jsr  push
.c378	86 fb		               stx  zpage1
.c37a	84 fc		               sty  zpage1+1
.c37c	a0 00		               ldy  #0
.c37e	b1 fb		next           lda  (zpage1),y
.c380	f0 09		               beq  exit
.c382	20 6f c3	               jsr  putch
.c385	20 6d c5	               jsr  inczp1
.c388	4c 7e c3	               jmp  next
.c38b	20 a5 c4	exit           jsr  pop
.c38e	60		               rts
.c38f			gotoxy
.c38f	08		               php
.c390	18		               clc
.c391	8a		               txa
.c392	48		               pha
.c393	98		               tya
.c394	aa		               tax
.c395	68		               pla
.c396	a8		               tay
.c397	20 f0 ff	               jsr  kplot
.c39a	28		               plp
.c39b	60		               rts
.c39c			cursor
=$0286			bascol    =    $0286
.c39c	08		               php
.c39d	48		               pha
.c39e	90 12		               bcc  restore
.c3a0	20 f0 ff	               jsr  kplot
.c3a3	8c c4 c3	               sty  cx
.c3a6	8e c5 c3	               stx  cy
.c3a9	ad 86 02	               lda  bascol
.c3ac	8d c6 c3	               sta  bcol
.c3af	4c c1 c3	               jmp  out
.c3b2	ae c5 c3	restore        ldx  cy
.c3b5	ac c4 c3	               ldy  cx
.c3b8	20 f0 ff	               jsr  kplot
.c3bb	ad c6 c3	               lda  bcol
.c3be	8d 86 02	               sta  bascol
.c3c1	68		out            pla
.c3c2	28		               plp
.c3c3	60		               rts
>c3c4	00		cx   .byte     $00
>c3c5	00		cy   .byte     $00
>c3c6	00		bcol .byte     $00
.c3c7			cursave
.c3c7	08		               php
.c3c8	38		               sec
.c3c9	20 9c c3	               jsr  cursor
.c3cc	28		               plp
.c3cd	60		               rts
.c3ce			curput
.c3ce	08		               php
.c3cf	18		               clc
.c3d0	20 9c c3	               jsr  cursor
.c3d3	28		               plp
.c3d4	60		               rts
.c3d5			putsxy
.c3d5	20 66 c4	               jsr  push
.c3d8	86 fb		               stx  zpage1
.c3da	84 fc		               sty  zpage1+1
.c3dc	a0 00		               ldy  #$00
.c3de	b1 fb		               lda  (zpage1),y
.c3e0	aa		               tax
.c3e1	20 6d c5	               jsr  inczp1
.c3e4	b1 fb		               lda  (zpage1),y
.c3e6	a8		               tay
.c3e7	20 8f c3	               jsr  gotoxy
.c3ea	20 6d c5	               jsr  inczp1
.c3ed	a6 fb		               ldx  zpage1
.c3ef	a4 fc		               ldy  zpage1+1
.c3f1	20 75 c3	               jsr  puts
.c3f4	20 a5 c4	               jsr  pop
.c3f7	60		               rts
>c3f8	00 00		straddr   .word     $00
>c3fa	00		px        .byte     $00
>c3fb	00		py        .byte     $00
>c3fc	00 00		zp1       .word     $00
.c3fe			putscxy
.c3fe	20 66 c4	               jsr  push
.c401	84 fc		               sty  zpage1+1
.c403	86 fb		               stx  zpage1
.c405	ad 86 02	               lda  bascol
.c408	8d 28 c4	               sta  bc
.c40b	a0 00		               ldy #$00
.c40d	b1 fb		               lda  (zpage1),y
.c40f	8d 86 02	               sta  bascol
.c412	20 6d c5	               jsr  inczp1
.c415	a6 fb		               ldx  zpage1
.c417	a4 fc		               ldy  zpage1+1
.c419	20 d5 c3	               jsr  putsxy
.c41c	ad 28 c4	               lda  bc
.c41f	8d 86 02	               sta  bascol
.c422	20 a5 c4	               jsr  pop
.c425	60		               rts
>c426	00 00		straddr  .word      $00
>c428	00		bc       .byte      $00
>c429	00 00		zp1      .word      $00
.c42b			putrahex
.c42b	08		               php
.c42c	48		               pha
.c42d	20 83 c6	               jsr  a2hex
.c430	a9 22		               lda  #<a2hexstr
.c432	a0 c6		               ldy  #>a2hexstr
.c434	20 75 c3	               jsr  puts
.c437	68		               pla
.c438	28		               plp
.c439	60		               rts
.c43a			kputrahexxy
.c43a			bputrahexxy
.c43a			putrahexxy
.c43a	08		               php
.c43b	20 83 c6	               jsr  a2hex
.c43e	a9 1f		               lda  #<a2hexpos
.c440	a0 c6		               ldy  #>a2hexpos
.c442	20 d5 c3	               jsr  putsxy
.c445	68		               pla
.c446	28		               plp
.c447	60		               rts
.c448			putrahexcxy
.c448	08		               php
.c449	20 83 c6	               jsr  a2hex
.c44c	a9 1f		               lda  #<a2hexpos
.c44e	a0 c6		               ldy  #>a2hexpos
.c450	20 fe c3	               jsr  putscxy
.c453	68		               pla
.c454	28		               plp
.c455	60		               rts
.c456			setinverse
.c456	48		               pha
.c457	a9 12		               lda  #$12
.c459	20 d2 ff	               jsr  $ffd2
.c45c	68		               pla
.c45d	60		               rts
.c45e			clrinverse
.c45e	48		               pha
.c45f	a9 92		               lda  #$92
.c461	20 d2 ff	               jsr  $ffd2
.c464	68		               pla
.c465	60		               rts

;******  Return to file: ch4ex01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.c466			push
.c466	08		          php            ; stack : flg, pcl, pch
.c467	78		          sei
.c468	8d a2 c4	          sta  ra        ; save a
.c46b	68		          pla            ; stack : pcl, pch
.c46c	8d a1 c4	          sta  rp        ; save rp
.c46f	68		          pla            ; stack : pch
.c470	8d a3 c4	          sta  pc        ; save pcl
.c473	68		          pla            ; stack : -
.c474	8d a4 c4	          sta  pc+1      ; save pch
.c477	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c479	48		          pha            ; stack : zp1l
.c47a	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c47c	48		          pha            ; stack : zp1h, zp1l
.c47d	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c47f	48		          pha            ; stack : zp2l, zp1h, zp1l
.c480	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c482	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c483	ad a1 c4	          lda  rp        ; get rp
.c486	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c487	ad a2 c4	          lda  ra        ; get a
.c48a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c48b	8a		          txa            ; get x
.c48c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c48d	98		          tya            ; get y
.c48e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c48f	ad a4 c4	          lda  pc+1      ; get pch
.c492	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c493	ad a3 c4	          lda  pc        ; get pcl
.c496	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c497	ad a1 c4	          lda  rp        ; get rp
.c49a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c49b	ad a2 c4	          lda  ra        ; get a
.c49e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c49f	58		          cli
.c4a0	60		          rts
>c4a1	00		rp        .byte     0
>c4a2	00		ra        .byte     0
>c4a3	00 00		pc        .word     0
.c4a5			pull
.c4a5			pop
.c4a5	78		          sei
.c4a6	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4a7	8d da c4	          sta  pc        ; save pcl
.c4aa	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4ab	8d db c4	          sta  pc+1      ; save pch
.c4ae	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4af	a8		          tay            ; set y
.c4b0	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c4b1	aa		          tax            ; set x
.c4b2	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c4b3	8d d9 c4	          sta  ra        ; save a
.c4b6	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c4b7	8d d8 c4	          sta  rp        ; save rp
.c4ba	68		          pla            ; stack : zp2l, zp1h, zp1l
.c4bb	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c4bd	68		          pla            ; stack : zp1h, zp1l
.c4be	85 fd		          sta  zpage2    ; get zpage2 High byte
.c4c0	68		          pla            ; stack : zp1l
.c4c1	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c4c3	68		          pla            ; stack :
.c4c4	85 fb		          sta  zpage1    ; get zpage1 High byte
.c4c6	ad db c4	          lda  pc+1      ; get pch
.c4c9	48		          pha            ; stack : pch
.c4ca	ad da c4	          lda  pc
.c4cd	48		          pha            ; stack : pcl, pch
.c4ce	ad d8 c4	          lda  rp        ; get rp
.c4d1	48		          pha            ; stack : rp, pcl, pch
.c4d2	ad d9 c4	          lda  ra        ; set ra
.c4d5	58		          cli
.c4d6	28		          plp            ; stack : pcl, pch
.c4d7	60		          rts
>c4d8	00		rp        .byte     0
>c4d9	00		ra        .byte     0
>c4da	00 00		pc        .word     0

;******  Return to file: ch4ex01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.c4dc			blkfill
.c4dc	20 66 c4	bf0            jsr  push
.c4df	20 9d c5	               jsr  savezp1
.c4e2	84 fc		               sty  zpage1+1
.c4e4	a0 00		               ldy  #$00
.c4e6	84 fb		               sty  zpage1
.c4e8	91 fb		bf1            sta  (zpage1),y
.c4ea	c8		               iny
.c4eb	d0 fb		               bne  bf1
.c4ed	20 ac c5	               jsr  restzp1
.c4f0	20 a5 c4	               jsr  pop
.c4f3	60		               rts
.c4f4			memfill
.c4f4	20 66 c4	               jsr  push
.c4f7	20 dc c4	mf1            jsr  blkfill
.c4fa	c8		               iny
.c4fb	ca		               dex
.c4fc	d0 f9		               bne  mf1
.c4fe	20 a5 c4	               jsr  pop
.c501	60		               rts
.c502			memmove
.c502	20 66 c4	               jsr  push
.c505	ba		               tsx            ; On se crée un pointeur ...
.c506	8a		               txa
.c507	18		               clc
.c508	69 0b		               adc  #11
.c50a	a8		               tay
.c50b	a2 06		               ldx  #$06
.c50d	b9 00 01	nextbyte       lda  $0100,y
.c510	99 5c c5	               sta  words,y
.c513	c8		               iny
.c514	ca		               dex
.c515	d0 f6		               bne  nextbyte
.c517	ad 5c c5	               lda  s
.c51a	8d 33 c5	               sta  source+1
.c51d	ad 5d c5	               lda  s+1
.c520	8d 34 c5	               sta  source+2
.c523	ad 5e c5	               lda  d
.c526	8d 30 c5	               sta  destin+1
.c529	ad 5f c5	               lda  d+1
.c52c	8d 31 c5	               sta  destin+2
.c52f	ad ff ff	destin         lda  $ffff
.c532	8d ff ff	source         sta  $ffff
.c535	ee 30 c5	               inc  destin+1
.c538	d0 03		               bne  src
.c53a	ee 31 c5	               inc  destin+2
.c53d	ee 33 c5	src            inc  source+1
.c540	d0 03		               bne  cnt
.c542	ee 34 c5	               inc  source+2
.c545	ad 60 c5	cnt            lda  compte
.c548	d0 08		               bne  decit
.c54a	ad 61 c5	               lda  compte+1
.c54d	f0 09		               beq  fini
.c54f	ce 61 c5	               dec  compte+1
.c552	ce 60 c5	decit          dec  compte
.c555	4c 2f c5	               jmp  destin
.c558	20 a5 c4	fini           jsr  pop
.c55b	60		               rts
.c55c			words
>c55c	00 00		s         .word     $0000
>c55e	00 00		d         .word     $0000
>c560	00 00		compte    .word     $0000
.c562			decword
.c562	20 66 c4	               jsr  push
.c565	86 fd		               stx  zpage2
.c567	84 fe		               sty  zpage2+1
.c569	20 a5 c4	               jsr  pop
.c56c	60		               rts
.c56d			inczp1
.c56d	08		               php
.c56e	48		               pha
.c56f	e6 fb		               inc  zpage1
.c571	a5 fb		               lda  zpage1
.c573	d0 02		               bne  nopage
.c575	e6 fc		               inc  zpage1+1
.c577	68		nopage         pla
.c578	28		               plp
.c579	60		               rts
.c57a			deczp1
.c57a	08		                php
.c57b	48		                pha
.c57c	c6 fb		                dec  zpage1
.c57e	d0 02		                bne  nopage
.c580	c6 fc		                dec  zpage1+1
.c582	68		nopage          pla
.c583	28		                plp
.c584	60		                rts
.c585			inczp2
.c585	08		               php
.c586	48		               pha
.c587	e6 fd		               inc  zpage2
.c589	a5 fd		               lda  zpage2
.c58b	d0 02		               bne  nopage
.c58d	e6 fe		               inc  zpage2+1
.c58f	68		nopage         pla
.c590	28		               plp
.c591	60		               rts
.c592			deczp2
.c592	08		               php
.c593	48		               pha
.c594	a5 fd		               lda  zpage2
.c596	d0 02		               bne  nopage
.c598	c6 fe		               dec  zpage2+1
.c59a	68		nopage         pla
.c59b	28		               plp
.c59c	60		               rts
.c59d			savezp1
.c59d	08		               php
.c59e	48		               pha
.c59f	a5 fb		               lda  zpage1
.c5a1	8d 19 c6	               sta  zp1
.c5a4	a5 fc		               lda  zpage1+1
.c5a6	8d 1a c6	               sta  zp1+1
.c5a9	68		               pla
.c5aa	28		               plp
.c5ab	60		               rts
.c5ac			restzp1
.c5ac	08		               php
.c5ad	48		               pha
.c5ae	ad 19 c6	               lda zp1
.c5b1	85 fb		               sta zpage1
.c5b3	ad 1a c6	               lda zp1+1
.c5b6	85 fc		               sta zpage1+1
.c5b8	68		               pla
.c5b9	28		               plp
.c5ba	60		               rts
.c5bb			savezp2
.c5bb	08		         php
.c5bc	48		         pha
.c5bd	a5 fd		         lda zpage2
.c5bf	8d 1b c6	         sta zp2
.c5c2	a5 fe		         lda zpage2+1
.c5c4	8d 1c c6	         sta zp2+1
.c5c7	68		         pla
.c5c8	28		         plp
.c5c9	60		         rts
.c5ca			restzp2
.c5ca	08		                php
.c5cb	48		                pha
.c5cc	ad 1b c6	                lda  zp2
.c5cf	85 fd		                sta  zpage2
.c5d1	ad 1c c6	                lda  zp2+1
.c5d4	85 fe		                sta  zpage2+1
.c5d6	68		                pla
.c5d7	28		                plp
.c5d8	60		                rts
.c5d9			xy2addr
.c5d9	08		                php
.c5da	48		                pha
.c5db	8a		                txa
.c5dc	48		                pha
.c5dd	98		                tya
.c5de	48		                pha
.c5df	ad 14 c6	                lda     addr1+1
.c5e2	8d 16 c6	                sta     addr2+1
.c5e5	ad 13 c6	                lda     addr1
.c5e8	8d 15 c6	                sta     addr2
.c5eb	c0 00		                cpy     #$00
.c5ed	f0 0f		                beq     addx
.c5ef	18		moreline        clc
.c5f0	6d 12 c6	                adc     ymult
.c5f3	90 03		                bcc     norepy
.c5f5	ee 16 c6	                inc     addr2+1
.c5f8	8d 15 c6	norepy          sta     addr2
.c5fb	88		                dey
.c5fc	d0 f1		                bne     moreline
.c5fe	8a		addx            txa
.c5ff	18		                clc
.c600	6d 15 c6	                adc     addr2
.c603	90 03		                bcc     thatsit
.c605	ee 16 c6	                inc     addr2+1
.c608	8d 15 c6	thatsit         sta     addr2
.c60b	68		                pla
.c60c	a8		                tay
.c60d	68		                pla
.c60e	aa		                tax
.c60f	68		                pla
.c610	28		                plp
.c611	60		                rts
>c612	28		ymult          .byte     40
>c613	00 00		addr1          .word     $0000
>c615	00 00		addr2          .word     $0000
>c617	00 00		bytecnt        .word     $0000
>c619	00 00		zp1        .word   $0000
>c61b	00 00		zp2        .word   $0000

;******  Return to file: ch4ex01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>c61d	01		a2hexcol       .byte     1              ; pour aputscxy
>c61e	00		a2hexbkcol     .byte     %00000000
.c61f			a2hexpos
>c61f	00		a2hexpx        .byte     0              ; pour aputsxy
>c620	00		a2hexpy        .byte     0
>c621	24		a2hexprefix    .byte     "$"            ; pour aputs
>c622	00 00		a2hexstr       .word     $00
>c624	00 00		               .word     $00
>c626	00		               .byte     0              ; 0 end string
>c627	30 30 30 30	abin           .null     "00000000"
>c62b	30 30 30 30 00
>c630	20 20 20 00	adec           .null     "   "
.c634			putahexfmtxy
.c634	20 66 c4	               jsr  push
.c637	20 83 c6	               jsr  a2hex
.c63a	ae 1f c6	               ldx  a2hexpx
.c63d	ac 20 c6	               ldy  a2hexpy
.c640	20 8f c3	               jsr  gotoxy
.c643	a2 21		               ldx  #<a2hexprefix
.c645	a0 c6		               ldy  #>a2hexprefix
.c647	20 75 c3	               jsr  puts
.c64a	20 a5 c4	               jsr  pop
.c64d	60		               rts
.c64e			putahexfmt
.c64e	20 66 c4	               jsr  push
.c651	20 83 c6	               jsr  a2hex
.c654	a2 21		               ldx  #<a2hexprefix
.c656	a0 c6		               ldy  #>a2hexprefix
.c658	20 75 c3	               jsr  puts
.c65b	20 a5 c4	               jsr  pop
.c65e	60		               rts
.c65f			putahex
.c65f	20 66 c4	               jsr  push
.c662	20 83 c6	               jsr  a2hex
.c665	a2 22		               ldx  #<a2hexstr
.c667	a0 c6		               ldy  #>a2hexstr
.c669	20 75 c3	               jsr  puts
.c66c	20 a5 c4	               jsr  pop
.c66f	60		               rts
.c670			nib2hex
.c670	08		               php
.c671	29 0f		               and  #$0f
.c673	f8		               sed
.c674	18		               clc
.c675	69 90		               adc  #$90
.c677	69 40		               adc  #$40
.c679	d8		               cld
.c67a	28		               plp
.c67b	60		               rts
.c67c			lsra4bits
.c67c	08		               php
.c67d	4a		               lsr
.c67e	4a		               lsr
.c67f	4a		               lsr
.c680	4a		               lsr
.c681	28		               plp
.c682	60		               rts
.c683			a2hex
.c683	08		               php
.c684	48		               pha
.c685	48		               pha
.c686	20 7c c6	               jsr  lsra4bits
.c689	20 70 c6	               jsr  nib2hex
.c68c	8d 22 c6	               sta  a2hexstr
.c68f	68		               pla
.c690	20 70 c6	               jsr  nib2hex
.c693	8d 23 c6	               sta  a2hexstr+1
.c696	a9 00		               lda  #$00                ; set end of string
.c698	8d 24 c6	               sta  a2hexstr+2
.c69b	68		               pla
.c69c	28		               plp
.c69d	60		               rts
.c69e			xy2hex
.c69e	20 66 c4	               jsr  push
.c6a1	20 83 c6	               jsr  a2hex
.c6a4	8a		               txa
.c6a5	48		               pha
.c6a6	20 7c c6	               jsr  lsra4bits
.c6a9	20 70 c6	               jsr  nib2hex
.c6ac	8d 22 c6	               sta  a2hexstr
.c6af	68		               pla
.c6b0	20 70 c6	               jsr  nib2hex
.c6b3	8d 23 c6	               sta  a2hexstr+1
.c6b6	98		               tya
.c6b7	48		               pha
.c6b8	20 7c c6	               jsr  lsra4bits
.c6bb	20 70 c6	               jsr  nib2hex
.c6be	8d 24 c6	               sta  a2hexstr+2
.c6c1	68		               pla
.c6c2	20 70 c6	               jsr  nib2hex
.c6c5	8d 25 c6	               sta  a2hexstr+3
.c6c8	a9 00		               lda  #$00                ; 0 ended string
.c6ca	8d 26 c6	               sta  a2hexstr+4
.c6cd	20 a5 c4	               jsr  pop
.c6d0			atobin
.c6d0	20 66 c4	               jsr  push
.c6d3	a2 08		               ldx  #8
.c6d5	a0 00		               ldy  #0
.c6d7	18		               clc
.c6d8	2a		nextbit        rol
.c6d9	48		               pha
.c6da	69 00		               adc  #$00
.c6dc	29 01		               and  #$01
.c6de	20 70 c6	               jsr  nib2hex
.c6e1	99 27 c6	               sta  abin,y
.c6e4	68		               pla
.c6e5	c8		               iny
.c6e6	ca		               dex
.c6e7	d0 ef		               bne  nextbit
.c6e9	a9 00		               lda  #0
.c6eb	99 27 c6	               sta  abin,y
.c6ee	20 a5 c4	               jsr  pull
.c6f1	60		               rts
.c6f2			putabin
.c6f2	20 d0 c6	               jsr     atobin
.c6f5	20 66 c4	               jsr     push
.c6f8	a2 27		               ldx     #<abin
.c6fa	a0 c6		               ldy     #>abin
.c6fc	20 75 c3	               jsr     puts
.c6ff	20 a5 c4	               jsr     pop
.c702	60		               rts
.c703			printabin
.c703	20 66 c4	               jsr     push
.c706	a2 27		               ldx     #<abin
.c708	a0 c6		               ldy     #>abin
.c70a	20 75 c3	               jsr     puts
.c70d	20 a5 c4	               jsr     pop
.c710	60		               rts
.c711			putabinfmt
.c711	08		               php
.c712	48		               pha
.c713	a9 25		               lda     #"%"
.c715	20 6f c3	               jsr     putch
.c718	68		               pla
.c719	20 f2 c6	               jsr     putabin
.c71c	28		               plp
.c71d	60		               rts
.c71e			putabinxy
.c71e	20 8f c3	               jsr     gotoxy
.c721	20 f2 c6	               jsr     putabin
.c724	60		               rts
.c725			putabinfmtxy
.c725	20 8f c3	               jsr     gotoxy
.c728	20 11 c7	               jsr     putabinfmt
.c72b	60		               rts
.c72c			atodec
.c72c	20 66 c4	               jsr  push
.c72f	f8		               sed
.c730	aa		               tax
.c731	a0 00		               ldy  #$00
.c733	a9 00		               lda  #$00
.c735	18		nextbit        clc
.c736	69 01		               adc  #$01
.c738	90 01		               bcc  decx
.c73a	c8		               iny
.c73b	ca		decx           dex
.c73c	d0 f7		               bne  nextbit
.c73e	48		               pha
.c73f	98		               tya
.c740	20 70 c6	               jsr  nib2hex
.c743	8d 30 c6	               sta  adec
.c746	68		               pla
.c747	48		               pha
.c748	20 70 c6	               jsr  nib2hex
.c74b	8d 32 c6	               sta  adec+2
.c74e	68		               pla
.c74f	6a		               ror
.c750	6a		               ror
.c751	6a		               ror
.c752	6a		               ror
.c753	20 70 c6	               jsr  nib2hex
.c756	8d 31 c6	               sta  adec+1
.c759	d8		               cld
.c75a	20 a5 c4	               jsr  pull
.c75d	60		               rts
>c75e	00 00 00	buffer         .byte     0,0,0
.c761			putadec
.c761	20 66 c4	               jsr  push
.c764	20 2c c7	               jsr  atodec
.c767	a2 30		               ldx  #<adec
.c769	a0 c6		               ldy  #>adec+1
.c76b	20 75 c3	               jsr  puts
.c76e	20 a5 c4	               jsr  pop
.c771	60		               rts

;******  Return to file: ch4ex01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>c772	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>c776	00 00 00 00 00 00 00 00 00 0d 00 00
>c782	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>c786	00 00 00 00 00 00 00 00 00 00 00 00
>c792	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>c796	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>c7a2	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>c7a6	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>c7b2	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>c7b6	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>c7c2	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>c7c6	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>c7d2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>c7d6	00 00 00 00 00 00 00 00 00 00 00 00
>c7e2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>c7e6	00 00 00 00 00 00 00 00 00 00 00 00
>c7f2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>c7f6	00 00 00 00 00 00 00 00 00 00 00 00
>c802	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>c806	00 00 00 00 00 00 00 00 00 00 00 00
>c812	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>c816	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>c822	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>c826	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>c832	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>c836	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>c842	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>c846	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>c852	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>c856	00 00 00 00 00 00 00 00 00 00 00 00
>c862	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>c866	00 00 00 00 00 00 00 00 00 00 00 00
.c872			waitstop
.c872	20 66 c4	               jsr  push
.c875	20 ed f6	wait           jsr  k_stop
.c878	d0 fb		               bne  wait
.c87a	20 a5 c4	               jsr  pop
.c87d	60		               rts
.c87e			anykey
.c87e	08		               php
.c87f	48		               pha
.c880	a5 cb		nokey          lda 203
.c882	c9 40		               cmp #64
.c884	f0 fa		               beq nokey
.c886	20 8c c8	               jsr releasekey
.c889	68		               pla
.c88a	28		               plp
.c88b	60		               rts
.c88c			releasekey
.c88c	08		               php
.c88d	48		               pha
.c88e	a5 cb		keypressed     lda 203
.c890	c9 40		               cmp #64
.c892	d0 fa		               bne keypressed
.c894	68		               pla
.c895	28		               plp
.c896	60		               rts
.c897			getkey
.c897	20 e4 ff	again          jsr  getin
.c89a	c9 00		               cmp  #0
.c89c	f0 f9		               beq  again
.c89e	60		               rts
.c89f			waitkey
.c89f	20 66 c4	               jsr  push
.c8a2	8d f0 c8	               sta  thekey
.c8a5	20 e4 ff	nope           jsr  getin
.c8a8	20 d2 ff	               jsr  chrout
.c8ab	cd f0 c8	               cmp  thekey
.c8ae	d0 f5		               bne  nope
.c8b0	20 d2 ff	               jsr  chrout
.c8b3	20 a5 c4	               jsr  pop
.c8b6	60		               rts
.c8b7			waitspace
.c8b7	20 66 c4	               jsr  push
.c8ba	a9 7f		wait           lda  #$7f  ;%01111111
.c8bc	8d 00 dc	               sta  $dc00
.c8bf	ad 01 dc	               lda  $dc01
.c8c2	29 10		               and  #$10  ;mask %00010000
.c8c4	d0 f4		               bne  wait
.c8c6	20 a5 c4	               jsr  pop
.c8c9			waitsstop
.c8c9	20 66 c4	               jsr  push
.c8cc	20 ed f6	wait           jsr  k_stop  ;%01111111
.c8cf	d0 fb		               bne  wait
.c8d1	20 a5 c4	               jsr  pop
.c8d4			waitreturn
.c8d4	20 66 c4	               jsr  push
.c8d7	ad f1 c8	               lda  thecount
.c8da	8d 00 04	               sta  scrnram
.c8dd	a9 02		               lda  #$02
.c8df	8d 00 d8	               sta  colorram
.c8e2	20 e4 ff	nope           jsr  getin
.c8e5	c9 0d		nohex          cmp  #$0d
.c8e7	d0 f9		               bne  nope
.c8e9	ee f1 c8	               inc  thecount
.c8ec	20 a5 c4	               jsr  pop
.c8ef	60		               rts
>c8f0	00		thekey         .byte   0
>c8f1	01		thecount       .byte   $01

;******  Return to file: ch4ex01.asm


;******  End of listing

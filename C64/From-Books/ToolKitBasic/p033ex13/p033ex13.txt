
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p033ex13.txt -o p033ex13.prg p033ex13.asm
; Tue Oct 29 13:21:36 2024

;Offset	;Hex		;Source

;******  Processing input file: p033ex13.asm

="20241029-122533"	           Version = "20241029-122533"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	2a 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 52			.text " *programmation assembleur sue c64*"
>080a	4f 47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45
>081a	4d 42 4c 45 55 52 20 53 55 45 20 43 36 34 2a
>0829	00				.byte $00		;Un zéro pour indiquer la fin de cette
>082a	46 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082c	02 00				.word 2   	;Numero de la ligne Basic.
>082e	8f				.byte $8F		;Le token de la commande REM du Basic
>082f	20 2a 50 41			.text " *par daniel lafrance*"
>0833	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>0843	45 2a
>0845	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0846	51 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0848	03 00				.word 3   	;Numero de la ligne Basic.
>084a	9e				.byte $9e		;Le token de la commande PRINT du Basic
>084b	30 32 31 33			.text format("%05d",hpgmstart)
>084f	31
>0850	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0851	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0853	4c 80 09	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p033ex13.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p033ex13.asm

.0856			p033ex13
.0856	20 af 0f	          jsr  push           ; Sauvegarde le statut complet.
.0859			again
.0859	48		               pha
.085a	a9 03		               lda  #ccyan
.085c	8d 20 d0	               sta  $d020
.085f	68		               pla
.0860	48		               pha
.0861	a9 01		               lda  #cblanc
.0863	8d 21 d0	               sta  $d021
.0866	68		               pla
.0867	48		               pha
.0868	a9 06		               lda  #cbleu
.086a	8d 86 02	               sta  bascol
.086d	68		               pla
.086e	20 e3 0c	          jsr  cls            ; On efface l'écran.
.0871	20 af 0f	               jsr  push
.0874	a2 fe		isx            ldx  #<ttext
.0876	a0 08		isy            ldy  #>ttext
.0878	20 00 0d	               jsr  puts
.087b	20 ee 0f	               jsr  pull
.087e	20 af 0f	               jsr  push
.0881	a2 29		isx            ldx  #<ptext1
.0883	a0 09		isy            ldy  #>ptext1
.0885	20 00 0d	               jsr  puts
.0888	20 ee 0f	               jsr  pull
.088b	20 68 0c	          jsr  insub          ; Lit le premier nombre.
.088e	20 ca bb	          jsr  b_f1t57
.0891	20 af 0f	               jsr  push
.0894	a2 46		isx            ldx  #<ptext2
.0896	a0 09		isy            ldy  #>ptext2
.0898	20 00 0d	               jsr  puts
.089b	20 ee 0f	               jsr  pull
.089e	20 68 0c	          jsr  insub          ; Lit le premier nombre.
.08a1	a9 57		          lda  #$57
.08a3	a0 00		          ldy  #$00
.08a5	20 67 b8	          jsr  b_f1pfv
.08a8	20 dd bd	noneg     jsr  b_facasc       ; Converti le résultat en ascii à $0100.
.08ab	20 af 0f	               jsr  push
.08ae	a2 63		isx            ldx  #<restxt
.08b0	a0 09		isy            ldy  #>restxt
.08b2	20 00 0d	               jsr  puts
.08b5	20 ee 0f	               jsr  pull
.08b8	20 4a 0c	          jsr  outsub         ; Affiche la valeur finale.
.08bb	a9 0d		          lda  #$0d
.08bd	20 d2 ff	          jsr  $ffd2
.08c0	20 af 0f	               jsr  push
.08c3	a2 e0		isx            ldx  #<query
.08c5	a0 08		isy            ldy  #>query
.08c7	20 00 0d	               jsr  puts
.08ca	20 ee 0f	               jsr  pull
.08cd	20 e0 13	          jsr  getkey
.08d0	29 7f		          and  #$7f
.08d2	c9 4f		          cmp  #'o'
.08d4	d0 03		          bne  out
.08d6	4c 59 08	          jmp again
.08d9	20 0c 0a	out       jsr  aide
.08dc	20 ee 0f	          jsr  pop            ; Récupère le statut complet.
.08df	60		          rts
>08e0	9a 20 0d	query     .byte     b_ltblue,b_space,b_crlf
>08e3	20 20 20 d5	          .text     "   Un autre calcul (o/N)?"
>08e7	4e 20 41 55 54 52 45 20 43 41 4c 43 55 4c 20 28
>08f7	4f 2f ce 29 3f
>08fc	0d 00		          .byte     b_crlf,b_eot
>08fe	1f 20 12	ttext     .byte     b_blue,b_space,b_rvs_on
>0901	20 20 d0 cf	          .text     "  POINT FLOTTANT - FAC1 = FVAR+FAC1  "
>0905	c9 ce d4 20 c6 cc cf d4 d4 c1 ce d4 20 2d 20 c6
>0915	c1 c3 31 20 3d 20 c6 d6 c1 d2 2b c6 c1 c3 31 20
>0925	20
>0926	92 0d 00	          .byte     b_rvs_off,b_crlf,b_eot
>0929	0d 9c 20	ptext1    .byte     b_crlf, b_purple, b_space
>092c	20 c5 4e 54	          .text     " Entez la valeur de FVAR"
>0930	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>0940	c6 d6 c1 d2
>0944	90 00		          .byte     b_black,b_eot
>0946	0d 9c 20	ptext2    .byte     b_crlf, b_purple, b_space
>0949	20 20 20 20	          .text     "      puis celle de FAC1"
>094d	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>095d	c6 c1 c3 31
>0961	90 00		          .byte     b_black,b_eot
>0963	1e 0d		restxt    .byte     b_green,b_crlf
>0965	20 d6 4f 49	          .text    " Voici le resultat......:"
>0969	43 49 20 4c 45 20 52 45 53 55 4c 54 41 54 2e 2e
>0979	2e 2e 2e 2e 3a
>097e	90 00		          .byte     b_black,b_eot
.0980			main
.0980	20 c3 0c	          jsr       scrmaninit
.0983	08		               php
.0984	48		               pha
.0985	a9 08		               lda  #$08
.0987	20 d2 ff	               jsr  $ffd2
.098a	68		               pla
.098b	28		               plp
.098c	48		               pha
.098d	a9 03		               lda  #ccyan
.098f	8d 20 d0	               sta  $d020
.0992	68		               pla
.0993	48		               pha
.0994	a9 01		               lda  #cblanc
.0996	8d 21 d0	               sta  $d021
.0999	68		               pla
.099a	48		               pha
.099b	a9 06		               lda  #cbleu
.099d	8d 86 02	               sta  bascol
.09a0	68		               pla
.09a1	20 c2 09	          jsr       bookinfo
.09a4	20 8c 0c	          jsr       akey
.09a7	20 e3 0c	          jsr       cls
.09aa	20 0c 0a	          jsr       aide
.09ad	20 8c 0c	          jsr       akey
.09b0	a9 0d		          lda       #b_crlf
.09b2	20 d2 ff	          jsr       $ffd2
.09b5	20 56 08	          jsr       p033ex13
.09b8	08		               php
.09b9	48		               pha
.09ba	a9 09		               lda  #$09
.09bc	20 d2 ff	               jsr  $ffd2
.09bf	68		               pla
.09c0	28		               plp
.09c1	60		          rts
.09c2			bookinfo
.09c2	20 af 0f	          jsr  push           ; Sauvegarde le statut complet.
.09c5	08		               php
.09c6	48		               pha
.09c7	a9 0e		               lda  #14
.09c9	8d e2 0c	               sta  characterset
.09cc	20 d2 ff	               jsr  $ffd2
.09cf	68		               pla
.09d0	28		               plp
.09d1	20 e3 0c	          jsr       cls
.09d4	20 af 0f	               jsr  push
.09d7	a2 21		isx            ldx  #<line
.09d9	a0 0c		isy            ldy  #>line
.09db	20 00 0d	               jsr  puts
.09de	20 ee 0f	               jsr  pull
.09e1	20 af 0f	               jsr  push
.09e4	a2 49		isx            ldx  #<headera
.09e6	a0 0a		isy            ldy  #>headera
.09e8	20 00 0d	               jsr  puts
.09eb	20 ee 0f	               jsr  pull
.09ee	20 af 0f	               jsr  push
.09f1	a2 e9		isx            ldx  #<headerb
.09f3	a0 0a		isy            ldy  #>headerb
.09f5	20 00 0d	               jsr  puts
.09f8	20 ee 0f	               jsr  pull
.09fb	20 af 0f	               jsr  push
.09fe	a2 21		isx            ldx  #<line
.0a00	a0 0c		isy            ldy  #>line
.0a02	20 00 0d	               jsr  puts
.0a05	20 ee 0f	               jsr  pull
.0a08	20 ee 0f	          jsr  pop            ; Récupère le statut complet.
.0a0b	60		          rts
.0a0c			aide
.0a0c	20 af 0f	          jsr  push           ; Sauvegarde le statut complet.
.0a0f	08		               php
.0a10	48		               pha
.0a11	a9 0e		               lda  #14
.0a13	8d e2 0c	               sta  characterset
.0a16	20 d2 ff	               jsr  $ffd2
.0a19	68		               pla
.0a1a	28		               plp
.0a1b	20 e3 0c	          jsr       cls
.0a1e	20 af 0f	               jsr  push
.0a21	a2 8c		isx            ldx  #<shortcuts
.0a23	a0 0b		isy            ldy  #>shortcuts
.0a25	20 00 0d	               jsr  puts
.0a28	20 ee 0f	               jsr  pull
.0a2b	20 af 0f	               jsr  push
.0a2e	a2 0d		isx            ldx  #<aidetext
.0a30	a0 0c		isy            ldy  #>aidetext
.0a32	20 00 0d	               jsr  puts
.0a35	20 ee 0f	               jsr  pull
.0a38	20 af 0f	               jsr  push
.0a3b	a2 21		isx            ldx  #<line
.0a3d	a0 0c		isy            ldy  #>line
.0a3f	20 00 0d	               jsr  puts
.0a42	20 ee 0f	               jsr  pull
.0a45	20 ee 0f	          jsr  pop            ; Récupère le statut complet.
.0a48	60		          rts
.0a49			headera
>0a49	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>0a4d	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>0a5d	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>0a6d	20 20 2a
>0a70	0d		          .byte     b_crlf
>0a71	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>0a75	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>0a85	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>0a95	20 20 2a
>0a98	0d		          .byte     b_crlf
>0a99	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>0a9d	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>0aad	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>0abd	20 20 2a
>0ac0	0d		          .byte     b_crlf
>0ac1	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>0ac5	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>0ad5	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>0ae5	20 20 2a 00
>0ae9	0d		headerb   .byte     $0d
>0aea	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>0aee	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>0afe	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>0b0e	20 20 2a
>0b11	0d		          .byte     $0d
>0b12	20 2a 20 20	          .text               " *        page 33, exemple #13        *"
>0b16	20 20 20 20 20 20 50 41 47 45 20 33 33 2c 20 45
>0b26	58 45 4d 50 4c 45 20 23 31 33 20 20 20 20 20 20
>0b36	20 20 2a
>0b39	0d		          .byte     $0d
>0b3a	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0b3e	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0b4e	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0b5e	20 20 2a
>0b61	0d		          .byte     $0d
>0b62	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0b66	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0b76	34 31 30 32 39 2d 31 32 32 35 33 33 2e 20 20 20
>0b86	20 20 2a 20
>0b8a	90 00		          .byte     b_black,b_eot
>0b8c	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0b8f	20 20 20 20	          .text               "       RACCOURCIS DE L'EXEMPLE        "
>0b93	20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4 c5
>0ba3	20 cc 27 c5 d8 c5 cd d0 cc c5 20 20 20 20 20 20
>0bb3	20 20
>0bb5	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0bb8	20 50 30 33	          .text     format(   " p033ex13: SYS %d ($%04X)",p033ex13, p033ex13)
>0bbc	33 45 58 31 33 3a 20 d3 d9 d3 20 32 31 33 34 20
>0bcc	28 24 30 38 35 36 29
>0bd3	0d		          .byte     b_crlf
>0bd4	20 41 49 44	          .text     format(   " aide....: SYS %d ($%04X)",aide, aide)
>0bd8	45 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 35 37 32 20
>0be8	28 24 30 c1 30 c3 29
>0bef	0d		          .byte     b_crlf
>0bf0	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04X)",cls, cls)
>0bf4	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 32 39 39 20
>0c04	28 24 30 c3 c5 33 29
>0c0b	0d 00		          .byte     b_crlf,b_eot
>0c0d	0d 20 1c	aidetext  .byte     b_crlf,b_space,b_red
>0c10	20 45 58 2e	          .text     format(   " ex.: SYS %d",p033ex13)
>0c14	3a 20 d3 d9 d3 20 32 31 33 34
>0c1e	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0c21	20 2d 2d 2d	line      .text               " --------------------------------------"
>0c25	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0c35	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0c45	2d 2d 2d
>0c48	0d 00		          .byte     b_crlf,b_eot

;******  Processing file: toolkitbasic.asm

.0c4a			outsub
.0c4a	20 af 0f	          jsr  push           ; Sauvegarde le statut complet.
.0c4d	a0 ff		          ldy  #$ff           ; On détermine
.0c4f	c8		nxtchr    iny                 ;  le nombre de caractères
.0c50	b9 00 01	          lda  $0100,y        ;  qu'il y a dans la chaine à afficher.
.0c53	d0 fa		          bne  nxtchr
.0c55	c8		          iny                 ; On ajoute 1 au nombre trouvé pour compenser
.0c56	98		          tya                 ;  l'adresse a y=0.
.0c57	48		          pha                 ; Sauvegarde ce nombre.
.0c58	a9 00		          lda  #$00           ; On prépare le pointeur $22-$23
.0c5a	85 22		          sta  $22            ;  en le peuplant avec
.0c5c	a9 01		          lda  #$01           ;  l'adresse ou se trouve la chaine
.0c5e	85 23		          sta  $23            ;  à afficher.
.0c60	68		          pla                 ; On ramène le nombre de caractères.
.0c61	20 24 ab	          jsr  b_strout       ; On affiche.
.0c64	20 ee 0f	          jsr  pop            ; Récupère le statut complet.
.0c67	60		          rts
.0c68			insub
.0c68	20 af 0f	          jsr  push           ; Sauvegarde le statut complet.
.0c6b	20 e8 13	          jsr  kbflushbuff
.0c6e	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.0c71	a9 00		          lda  #$00           ; On efface le basic input buffer
.0c73	a0 59		          ldy  #$59           ;  situé à $200 long de 89 bytes ($59)
.0c75	99 00 02	clear     sta  b_inpbuff,y    ;  en plaçant des $00 partout
.0c78	88		          dey                 ;  et ce jusqu'au
.0c79	d0 fa		          bne  clear          ;  dernier.
.0c7b	20 f9 ab	          jsr  b_prompt       ; Affiche un "?" et attend une entrée.
.0c7e	86 7a		          stx  $7a            ; X et Y pointe sur $01ff au retour.
.0c80	84 7b		          sty  $7b
.0c82	20 73 00	          jsr  b_chrget       ; Lecture du buffer.
.0c85	20 f3 bc	          jsr  b_ascflt       ; Conversion la chaine ascii en 200 en float.
.0c88	20 ee 0f	          jsr  pop            ; Récupère le statut complet.
.0c8b	60		          rts
.0c8c			akey
.0c8c	a9 9d		          lda  #<kmsg
.0c8e	85 22		          sta  $22
.0c90	a9 0c		          lda  #>kmsg
.0c92	85 23		          sta  $23
.0c94	a9 1e		          lda  #kmsgend-kmsg
.0c96	20 24 ab	          jsr  b_strout
.0c99	20 c7 13	          jsr  anykey
.0c9c	60		          rts
>0c9d	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>0ca1	d5 4e 45 20	          .text               "Une clef pour continuer!"
>0ca5	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0cb5	55 45 52 21
>0cb9	90 00		          .byte b_black,b_eot
.0cbb			kmsgend

;******  Return to file: p033ex13.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0cbb	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0cbf	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0cc3			libtart

;******  Return to file: p033ex13.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p033ex13.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p033ex13.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0cc3			scrmaninit
.0cc3	20 af 0f	               jsr  push
.0cc6	a9 06		               lda  #vbleu
.0cc8	8d 21 d0	               sta  vicbackcol
.0ccb	a9 05		               lda  #vvert
.0ccd	8d 20 d0	               sta  vicbordcol
.0cd0	a9 01		               lda  #vblanc
.0cd2	8d 86 02	               sta  bascol
.0cd5	ad 00 04	               lda  scrnram
.0cd8	8d 00 04	               sta  scrnram
.0cdb	20 e3 0c	               jsr  cls
.0cde	20 ee 0f	               jsr  pop
.0ce1	60		               rts
>0ce2	8e		characterset   .byte b_uppercase
.0ce3			cls
.0ce3	08		               php
.0ce4	48		               pha
.0ce5	a9 93		               lda  #$93
.0ce7	20 fa 0c	               jsr  putch
.0cea	68		               pla
.0ceb	28		               plp
.0cec	60		               rts
.0ced			putnch
.0ced	08		               php
.0cee	e0 00		               cpx  #$00
.0cf0	f0 06		               beq  out
.0cf2	20 d2 ff	again          jsr  $ffd2
.0cf5	ca		               dex
.0cf6	d0 fa		               bne  again
.0cf8	28		out            plp
.0cf9	60		               rts
.0cfa			putch
.0cfa	08		               php
.0cfb	20 d2 ff	               jsr  $ffd2
.0cfe	28		               plp
.0cff	60		               rts
.0d00			puts
.0d00	20 af 0f	               jsr  push
.0d03	86 fb		               stx  zpage1
.0d05	84 fc		               sty  zpage1+1
.0d07	a0 00		               ldy  #0
.0d09	b1 fb		next           lda  (zpage1),y
.0d0b	f0 09		               beq  exit
.0d0d	20 fa 0c	               jsr  putch
.0d10	20 b6 10	               jsr  inczp1
.0d13	4c 09 0d	               jmp  next
.0d16	20 ee 0f	exit           jsr  pop
.0d19	60		               rts
.0d1a			gotoxy
.0d1a	08		               php
.0d1b	18		               clc
.0d1c	8a		               txa
.0d1d	48		               pha
.0d1e	98		               tya
.0d1f	aa		               tax
.0d20	68		               pla
.0d21	a8		               tay
.0d22	20 f0 ff	               jsr  kplot
.0d25	28		               plp
.0d26	60		               rts
.0d27			cursor
=$0286			bascol    =    $0286
.0d27	08		               php
.0d28	48		               pha
.0d29	90 12		               bcc  restore
.0d2b	20 f0 ff	               jsr  kplot
.0d2e	8c 4f 0d	               sty  cx
.0d31	8e 50 0d	               stx  cy
.0d34	ad 86 02	               lda  bascol
.0d37	8d 51 0d	               sta  bcol
.0d3a	4c 4c 0d	               jmp  out
.0d3d	ae 50 0d	restore        ldx  cy
.0d40	ac 4f 0d	               ldy  cx
.0d43	20 f0 ff	               jsr  kplot
.0d46	ad 51 0d	               lda  bcol
.0d49	8d 86 02	               sta  bascol
.0d4c	68		out            pla
.0d4d	28		               plp
.0d4e	60		               rts
>0d4f	00		cx   .byte     $00
>0d50	00		cy   .byte     $00
>0d51	00		bcol .byte     $00
.0d52			cursave
.0d52	08		               php
.0d53	38		               sec
.0d54	20 27 0d	               jsr  cursor
.0d57	28		               plp
.0d58	60		               rts
.0d59			curput
.0d59	08		               php
.0d5a	18		               clc
.0d5b	20 27 0d	               jsr  cursor
.0d5e	28		               plp
.0d5f	60		               rts
.0d60			putsxy
.0d60	20 af 0f	               jsr  push
.0d63	86 fb		               stx  zpage1
.0d65	84 fc		               sty  zpage1+1
.0d67	a0 00		               ldy  #$00
.0d69	b1 fb		               lda  (zpage1),y
.0d6b	aa		               tax
.0d6c	20 b6 10	               jsr  inczp1
.0d6f	b1 fb		               lda  (zpage1),y
.0d71	a8		               tay
.0d72	20 1a 0d	               jsr  gotoxy
.0d75	20 b6 10	               jsr  inczp1
.0d78	a6 fb		               ldx  zpage1
.0d7a	a4 fc		               ldy  zpage1+1
.0d7c	20 00 0d	               jsr  puts
.0d7f	20 ee 0f	               jsr  pop
.0d82	60		               rts
>0d83	00 00		straddr   .word     $00
>0d85	00		px        .byte     $00
>0d86	00		py        .byte     $00
>0d87	00 00		zp1       .word     $00
.0d89			putscxy
.0d89	20 af 0f	               jsr  push
.0d8c	84 fc		               sty  zpage1+1
.0d8e	86 fb		               stx  zpage1
.0d90	ad 86 02	               lda  bascol
.0d93	8d b3 0d	               sta  bc
.0d96	a0 00		               ldy #$00
.0d98	b1 fb		               lda  (zpage1),y
.0d9a	8d 86 02	               sta  bascol
.0d9d	20 b6 10	               jsr  inczp1
.0da0	a6 fb		               ldx  zpage1
.0da2	a4 fc		               ldy  zpage1+1
.0da4	20 60 0d	               jsr  putsxy
.0da7	ad b3 0d	               lda  bc
.0daa	8d 86 02	               sta  bascol
.0dad	20 ee 0f	               jsr  pop
.0db0	60		               rts
>0db1	00 00		straddr  .word      $00
>0db3	00		bc       .byte      $00
>0db4	00 00		zp1      .word      $00
.0db6			putrahex
.0db6	08		               php
.0db7	48		               pha
.0db8	20 cc 11	               jsr  a2hex
.0dbb	a9 6b		               lda  #<a2hexstr
.0dbd	a0 11		               ldy  #>a2hexstr
.0dbf	20 00 0d	               jsr  puts
.0dc2	68		               pla
.0dc3	28		               plp
.0dc4	60		               rts
.0dc5			kputrahexxy
.0dc5			bputrahexxy
.0dc5			putrahexxy
.0dc5	08		               php
.0dc6	20 cc 11	               jsr  a2hex
.0dc9	a9 68		               lda  #<a2hexpos
.0dcb	a0 11		               ldy  #>a2hexpos
.0dcd	20 60 0d	               jsr  putsxy
.0dd0	68		               pla
.0dd1	28		               plp
.0dd2	60		               rts
.0dd3			putrahexcxy
.0dd3	08		               php
.0dd4	20 cc 11	               jsr  a2hex
.0dd7	a9 68		               lda  #<a2hexpos
.0dd9	a0 11		               ldy  #>a2hexpos
.0ddb	20 89 0d	               jsr  putscxy
.0dde	68		               pla
.0ddf	28		               plp
.0de0	60		               rts
.0de1			setinverse
.0de1	48		               pha
.0de2	a9 12		               lda  #$12
.0de4	20 d2 ff	               jsr  $ffd2
.0de7	68		               pla
.0de8	60		               rts
.0de9			clrinverse
.0de9	48		               pha
.0dea	a9 92		               lda  #$92
.0dec	20 d2 ff	               jsr  $ffd2
.0def	68		               pla
.0df0	60		               rts

;******  Return to file: p033ex13.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.0df1			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.0df1	08		                php
.0df2	8d a3 0f	                sta  rega
.0df5	68		                pla
.0df6	8d a6 0f	                sta  regp
.0df9	8e a4 0f	                stx  regx
.0dfc	8c a5 0f	                sty  regy
.0dff	ba		                tsx
.0e00	8e a7 0f	                stx  regs
.0e03	68		                pla
.0e04	8d a9 0f	                sta  regpcl
.0e07	8d aa 0f	                sta  regpcl2
.0e0a	68		                pla
.0e0b	8d a8 0f	                sta  regpch
.0e0e	ad a3 0f	                lda  rega
.0e11	48		                pha
.0e12	20 b9 11	                jsr  nib2hex
.0e15	8d 46 0f	                sta  vala+1
.0e18	68		                pla
.0e19	20 c5 11	                jsr  lsra4bits
.0e1c	20 b9 11	                jsr  nib2hex
.0e1f	8d 45 0f	                sta  vala
.0e22	ad a5 0f	                lda  regy
.0e25	48		                pha
.0e26	20 b9 11	                jsr  nib2hex
.0e29	8d 5c 0f	                sta  valy+1
.0e2c	68		                pla
.0e2d	20 c5 11	                jsr  lsra4bits
.0e30	20 b9 11	                jsr  nib2hex
.0e33	8d 5b 0f	                sta  valy
.0e36	ad a4 0f	                lda  regx
.0e39	48		                pha
.0e3a	20 b9 11	                jsr  nib2hex
.0e3d	8d 51 0f	                sta  valx+1
.0e40	68		                pla
.0e41	20 c5 11	                jsr  lsra4bits
.0e44	20 b9 11	                jsr  nib2hex
.0e47	8d 50 0f	                sta  valx
.0e4a	ad a6 0f	                lda  regp
.0e4d	48		                pha
.0e4e	20 b9 11	                jsr  nib2hex
.0e51	8d 67 0f	                sta  valp+1
.0e54	68		                pla
.0e55	20 c5 11	                jsr  lsra4bits
.0e58	20 b9 11	                jsr  nib2hex
.0e5b	8d 66 0f	                sta  valp
.0e5e	ad a7 0f	                lda  regs
.0e61	48		                pha
.0e62	20 b9 11	                jsr  nib2hex
.0e65	8d 72 0f	                sta  vals+1
.0e68	68		                pla
.0e69	20 c5 11	                jsr  lsra4bits
.0e6c	20 b9 11	                jsr  nib2hex
.0e6f	8d 71 0f	                sta  vals
.0e72	ad a8 0f	                lda  regpch
.0e75	48		                pha
.0e76	20 b9 11	                jsr  nib2hex
.0e79	8d 7e 0f	                sta  valpch+1
.0e7c	68		                pla
.0e7d	20 c5 11	                jsr  lsra4bits
.0e80	20 b9 11	                jsr  nib2hex
.0e83	8d 7d 0f	                sta  valpch
.0e86	ad a9 0f	                lda  regpcl
.0e89	48		                pha
.0e8a	20 b9 11	                jsr  nib2hex
.0e8d	8d 80 0f	                sta  valpcl+1
.0e90	68		                pla
.0e91	20 c5 11	                jsr  lsra4bits
.0e94	20 b9 11	                jsr  nib2hex
.0e97	8d 7f 0f	                sta  valpcl
.0e9a	a5 fb		                lda  zpage1
.0e9c	48		                pha
.0e9d	20 b9 11	                jsr  nib2hex
.0ea0	8d 8f 0f	                sta  valz1l
.0ea3	68		                pla
.0ea4	20 c5 11	                jsr  lsra4bits
.0ea7	20 b9 11	                jsr  nib2hex
.0eaa	8d 90 0f	                sta  valz1l+1
.0ead	a5 fc		                lda  zpage1+1
.0eaf	48		                pha
.0eb0	20 b9 11	                jsr  nib2hex
.0eb3	8d 8d 0f	                sta  valz1h
.0eb6	68		                pla
.0eb7	20 c5 11	                jsr  lsra4bits
.0eba	20 b9 11	                jsr  nib2hex
.0ebd	8d 8e 0f	                sta  valz1h+1
.0ec0	a5 fd		                lda  zpage2
.0ec2	48		                pha
.0ec3	20 b9 11	                jsr  nib2hex
.0ec6	8d 9f 0f	                sta  valz2l
.0ec9	68		                pla
.0eca	20 c5 11	                jsr  lsra4bits
.0ecd	20 b9 11	                jsr  nib2hex
.0ed0	8d a0 0f	                sta  valz2l+1
.0ed3	a5 fe		                lda  zpage2+1
.0ed5	48		                pha
.0ed6	20 b9 11	                jsr  nib2hex
.0ed9	8d 9d 0f	                sta  valz2h
.0edc	68		                pla
.0edd	20 c5 11	                jsr  lsra4bits
.0ee0	20 b9 11	                jsr  nib2hex
.0ee3	8d 9e 0f	                sta  valz2h+1
.0ee6	20 e1 0d	                jsr  setinverse
.0ee9	78		                sei
.0eea	a2 3d		                ldx  #<srega
.0eec	a0 0f		                ldy  #>srega+1
.0eee	20 89 0d	                jsr  putscxy
.0ef1	a2 48		                ldx  #<sregx
.0ef3	a0 0f		                ldy  #>sregx+1
.0ef5	20 89 0d	                jsr  putscxy
.0ef8	a2 53		                ldx  #<sregy
.0efa	a0 0f		                ldy  #>sregy+1
.0efc	20 89 0d	                jsr  putscxy
.0eff	a2 5e		                ldx  #<sregp
.0f01	a0 0f		                ldy  #>sregp+1
.0f03	20 89 0d	                jsr  putscxy
.0f06	a2 69		                ldx  #<sregs
.0f08	a0 0f		                ldy  #>sregs+1
.0f0a	20 89 0d	                jsr  putscxy
.0f0d	a2 74		                ldx  #<sregpc
.0f0f	a0 0f		                ldy  #>sregpc+1
.0f11	20 89 0d	                jsr  putscxy
.0f14	a2 83		                ldx  #<sregz1
.0f16	a0 0f		                ldy  #>sregz1+1
.0f18	20 89 0d	                jsr  putscxy
.0f1b	a2 93		                ldx  #<sregz2
.0f1d	a0 0f		                ldy  #>sregz2+1
.0f1f	20 89 0d	                jsr  putscxy
.0f22	58		                cli
.0f23	20 e9 0d	                jsr  clrinverse
.0f26	ad a8 0f	                lda  regpch
.0f29	48		                pha
.0f2a	ad a9 0f	                lda  regpcl
.0f2d	48		                pha
.0f2e	ac a5 0f	                ldy  regy
.0f31	ae a4 0f	                ldx  regx
.0f34	ad a6 0f	                lda  regp
.0f37	48		                pha
.0f38	ad a3 0f	                lda  rega
.0f3b	28		                plp
.0f3c	60		                rts
>0f3d	01 00 00 17	srega   .byte   colr,bkcol,coln,line
>0f41	20 41 3a 24	        .text   ' a:$' ;4,24
>0f45	00 00 00	vala    .byte   0,0,0
>0f48	01 00 06 17	sregx   .byte   colr,bkcol,coln+6,line
>0f4c	20 58 3a 24	        .text   ' x:$' ;4,24
>0f50	00 00 00	valx    .byte   0,0,0
>0f53	01 00 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>0f57	20 59 3a 24	        .text   ' y:$' ;4,24
>0f5b	00 00 00	valy    .byte   0,0,0
>0f5e	01 00 12 17	sregp   .byte   colr,bkcol,coln+18,line
>0f62	20 50 3a 24	        .text   ' p:$' ;4,24
>0f66	00 00 00	valp    .byte   0,0,0
>0f69	01 00 18 17	sregs   .byte   colr,bkcol,coln+24,line
>0f6d	20 53 3a 24	        .text   ' s:$' ;4,24
>0f71	00 00 00	vals    .byte   0,0,0
>0f74	01 00 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>0f78	20 50 43 3a	        .text   ' pc:$' ;4,24
>0f7c	24
>0f7d	00 00		valpch  .byte   0,0
>0f7f	00 00 20 00	valpcl  .byte   0,0,32,0
>0f83	01 00 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>0f87	20 5a 50 31	        .text   ' zp1:$' ;4,24
>0f8b	3a 24
>0f8d	00 00		valz1h  .byte   0,0
>0f8f	00 00 20 00	valz1l  .byte   0,0,32,0
>0f93	01 00 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>0f97	20 5a 50 32	        .text   ' zp2:$' ;4,24
>0f9b	3a 24
>0f9d	00 00		valz2h  .byte   0,0
>0f9f	00 00 20 00	valz2l  .byte   0,0,32,0
>0fa3	00		rega    .byte   0
>0fa4	00		regx    .byte   0
>0fa5	00		regy    .byte   0
>0fa6	00		regp    .byte   0
>0fa7	00		regs    .byte   0
>0fa8	00		regpch  .byte   0
>0fa9	00		regpcl  .byte   0
>0faa	00		regpcl2 .byte   0
>0fab	00		vzp1h   .byte   0
>0fac	00		vzp1l   .byte   0
>0fad	00		vzp2h   .byte   0
>0fae	00		vzp2l   .byte   0

;******  Return to file: p033ex13.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0faf			push
.0faf	08		          php            ; stack : flg, pcl, pch
.0fb0	78		          sei
.0fb1	8d eb 0f	          sta  ra        ; save a
.0fb4	68		          pla            ; stack : pcl, pch
.0fb5	8d ea 0f	          sta  rp        ; save rp
.0fb8	68		          pla            ; stack : pch
.0fb9	8d ec 0f	          sta  pc        ; save pcl
.0fbc	68		          pla            ; stack : -
.0fbd	8d ed 0f	          sta  pc+1      ; save pch
.0fc0	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0fc2	48		          pha            ; stack : zp1l
.0fc3	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0fc5	48		          pha            ; stack : zp1h, zp1l
.0fc6	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0fc8	48		          pha            ; stack : zp2l, zp1h, zp1l
.0fc9	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0fcb	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0fcc	ad ea 0f	          lda  rp        ; get rp
.0fcf	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0fd0	ad eb 0f	          lda  ra        ; get a
.0fd3	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0fd4	8a		          txa            ; get x
.0fd5	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0fd6	98		          tya            ; get y
.0fd7	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0fd8	ad ed 0f	          lda  pc+1      ; get pch
.0fdb	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0fdc	ad ec 0f	          lda  pc        ; get pcl
.0fdf	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0fe0	ad ea 0f	          lda  rp        ; get rp
.0fe3	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0fe4	ad eb 0f	          lda  ra        ; get a
.0fe7	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0fe8	58		          cli
.0fe9	60		          rts
>0fea	00		rp        .byte     0
>0feb	00		ra        .byte     0
>0fec	00 00		pc        .word     0
.0fee			pull
.0fee			pop
.0fee	78		          sei
.0fef	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ff0	8d 23 10	          sta  pc        ; save pcl
.0ff3	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ff4	8d 24 10	          sta  pc+1      ; save pch
.0ff7	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ff8	a8		          tay            ; set y
.0ff9	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ffa	aa		          tax            ; set x
.0ffb	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0ffc	8d 22 10	          sta  ra        ; save a
.0fff	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1000	8d 21 10	          sta  rp        ; save rp
.1003	68		          pla            ; stack : zp2l, zp1h, zp1l
.1004	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1006	68		          pla            ; stack : zp1h, zp1l
.1007	85 fd		          sta  zpage2    ; get zpage2 High byte
.1009	68		          pla            ; stack : zp1l
.100a	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.100c	68		          pla            ; stack :
.100d	85 fb		          sta  zpage1    ; get zpage1 High byte
.100f	ad 24 10	          lda  pc+1      ; get pch
.1012	48		          pha            ; stack : pch
.1013	ad 23 10	          lda  pc
.1016	48		          pha            ; stack : pcl, pch
.1017	ad 21 10	          lda  rp        ; get rp
.101a	48		          pha            ; stack : rp, pcl, pch
.101b	ad 22 10	          lda  ra        ; set ra
.101e	58		          cli
.101f	28		          plp            ; stack : pcl, pch
.1020	60		          rts
>1021	00		rp        .byte     0
>1022	00		ra        .byte     0
>1023	00 00		pc        .word     0

;******  Return to file: p033ex13.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.1025			blkfill
.1025	20 af 0f	bf0            jsr  push
.1028	20 e6 10	               jsr  savezp1
.102b	84 fc		               sty  zpage1+1
.102d	a0 00		               ldy  #$00
.102f	84 fb		               sty  zpage1
.1031	91 fb		bf1            sta  (zpage1),y
.1033	c8		               iny
.1034	d0 fb		               bne  bf1
.1036	20 f5 10	               jsr  restzp1
.1039	20 ee 0f	               jsr  pop
.103c	60		               rts
.103d			memfill
.103d	20 af 0f	               jsr  push
.1040	20 25 10	mf1            jsr  blkfill
.1043	c8		               iny
.1044	ca		               dex
.1045	d0 f9		               bne  mf1
.1047	20 ee 0f	               jsr  pop
.104a	60		               rts
.104b			memmove
.104b	20 af 0f	               jsr  push
.104e	ba		               tsx            ; On se crée un pointeur ...
.104f	8a		               txa
.1050	18		               clc
.1051	69 0b		               adc  #11
.1053	a8		               tay
.1054	a2 06		               ldx  #$06
.1056	b9 00 01	nextbyte       lda  $0100,y
.1059	99 a5 10	               sta  words,y
.105c	c8		               iny
.105d	ca		               dex
.105e	d0 f6		               bne  nextbyte
.1060	ad a5 10	               lda  s
.1063	8d 7c 10	               sta  source+1
.1066	ad a6 10	               lda  s+1
.1069	8d 7d 10	               sta  source+2
.106c	ad a7 10	               lda  d
.106f	8d 79 10	               sta  destin+1
.1072	ad a8 10	               lda  d+1
.1075	8d 7a 10	               sta  destin+2
.1078	ad ff ff	destin         lda  $ffff
.107b	8d ff ff	source         sta  $ffff
.107e	ee 79 10	               inc  destin+1
.1081	d0 03		               bne  src
.1083	ee 7a 10	               inc  destin+2
.1086	ee 7c 10	src            inc  source+1
.1089	d0 03		               bne  cnt
.108b	ee 7d 10	               inc  source+2
.108e	ad a9 10	cnt            lda  compte
.1091	d0 08		               bne  decit
.1093	ad aa 10	               lda  compte+1
.1096	f0 09		               beq  fini
.1098	ce aa 10	               dec  compte+1
.109b	ce a9 10	decit          dec  compte
.109e	4c 78 10	               jmp  destin
.10a1	20 ee 0f	fini           jsr  pop
.10a4	60		               rts
.10a5			words
>10a5	00 00		s         .word     $0000
>10a7	00 00		d         .word     $0000
>10a9	00 00		compte    .word     $0000
.10ab			decword
.10ab	20 af 0f	               jsr  push
.10ae	86 fd		               stx  zpage2
.10b0	84 fe		               sty  zpage2+1
.10b2	20 ee 0f	               jsr  pop
.10b5	60		               rts
.10b6			inczp1
.10b6	08		               php
.10b7	48		               pha
.10b8	e6 fb		               inc  zpage1
.10ba	a5 fb		               lda  zpage1
.10bc	d0 02		               bne  nopage
.10be	e6 fc		               inc  zpage1+1
.10c0	68		nopage         pla
.10c1	28		               plp
.10c2	60		               rts
.10c3			deczp1
.10c3	08		                php
.10c4	48		                pha
.10c5	c6 fb		                dec  zpage1
.10c7	d0 02		                bne  nopage
.10c9	c6 fc		                dec  zpage1+1
.10cb	68		nopage          pla
.10cc	28		                plp
.10cd	60		                rts
.10ce			inczp2
.10ce	08		               php
.10cf	48		               pha
.10d0	e6 fd		               inc  zpage2
.10d2	a5 fd		               lda  zpage2
.10d4	d0 02		               bne  nopage
.10d6	e6 fe		               inc  zpage2+1
.10d8	68		nopage         pla
.10d9	28		               plp
.10da	60		               rts
.10db			deczp2
.10db	08		               php
.10dc	48		               pha
.10dd	a5 fd		               lda  zpage2
.10df	d0 02		               bne  nopage
.10e1	c6 fe		               dec  zpage2+1
.10e3	68		nopage         pla
.10e4	28		               plp
.10e5	60		               rts
.10e6			savezp1
.10e6	08		               php
.10e7	48		               pha
.10e8	a5 fb		               lda  zpage1
.10ea	8d 62 11	               sta  zp1
.10ed	a5 fc		               lda  zpage1+1
.10ef	8d 63 11	               sta  zp1+1
.10f2	68		               pla
.10f3	28		               plp
.10f4	60		               rts
.10f5			restzp1
.10f5	08		               php
.10f6	48		               pha
.10f7	ad 62 11	               lda zp1
.10fa	85 fb		               sta zpage1
.10fc	ad 63 11	               lda zp1+1
.10ff	85 fc		               sta zpage1+1
.1101	68		               pla
.1102	28		               plp
.1103	60		               rts
.1104			savezp2
.1104	08		         php
.1105	48		         pha
.1106	a5 fd		         lda zpage2
.1108	8d 64 11	         sta zp2
.110b	a5 fe		         lda zpage2+1
.110d	8d 65 11	         sta zp2+1
.1110	68		         pla
.1111	28		         plp
.1112	60		         rts
.1113			restzp2
.1113	08		                php
.1114	48		                pha
.1115	ad 64 11	                lda  zp2
.1118	85 fd		                sta  zpage2
.111a	ad 65 11	                lda  zp2+1
.111d	85 fe		                sta  zpage2+1
.111f	68		                pla
.1120	28		                plp
.1121	60		                rts
.1122			xy2addr
.1122	08		                php
.1123	48		                pha
.1124	8a		                txa
.1125	48		                pha
.1126	98		                tya
.1127	48		                pha
.1128	ad 5d 11	                lda     addr1+1
.112b	8d 5f 11	                sta     addr2+1
.112e	ad 5c 11	                lda     addr1
.1131	8d 5e 11	                sta     addr2
.1134	c0 00		                cpy     #$00
.1136	f0 0f		                beq     addx
.1138	18		moreline        clc
.1139	6d 5b 11	                adc     ymult
.113c	90 03		                bcc     norepy
.113e	ee 5f 11	                inc     addr2+1
.1141	8d 5e 11	norepy          sta     addr2
.1144	88		                dey
.1145	d0 f1		                bne     moreline
.1147	8a		addx            txa
.1148	18		                clc
.1149	6d 5e 11	                adc     addr2
.114c	90 03		                bcc     thatsit
.114e	ee 5f 11	                inc     addr2+1
.1151	8d 5e 11	thatsit         sta     addr2
.1154	68		                pla
.1155	a8		                tay
.1156	68		                pla
.1157	aa		                tax
.1158	68		                pla
.1159	28		                plp
.115a	60		                rts
>115b	28		ymult          .byte     40
>115c	00 00		addr1          .word     $0000
>115e	00 00		addr2          .word     $0000
>1160	00 00		bytecnt        .word     $0000
>1162	00 00		zp1        .word   $0000
>1164	00 00		zp2        .word   $0000

;******  Return to file: p033ex13.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1166	01		a2hexcol       .byte     1              ; pour aputscxy
>1167	00		a2hexbkcol     .byte     %00000000
.1168			a2hexpos
>1168	00		a2hexpx        .byte     0              ; pour aputsxy
>1169	00		a2hexpy        .byte     0
>116a	24		a2hexprefix    .byte     "$"            ; pour aputs
>116b	00 00		a2hexstr       .word     $00
>116d	00 00		               .word     $00
>116f	00		               .byte     0              ; 0 end string
>1170	30 30 30 30	abin           .null     "00000000"
>1174	30 30 30 30 00
>1179	20 20 20 00	adec           .null     "   "
.117d			putahexfmtxy
.117d	20 af 0f	               jsr  push
.1180	20 cc 11	               jsr  a2hex
.1183	ae 68 11	               ldx  a2hexpx
.1186	ac 69 11	               ldy  a2hexpy
.1189	20 1a 0d	               jsr  gotoxy
.118c	a2 6a		               ldx  #<a2hexprefix
.118e	a0 11		               ldy  #>a2hexprefix
.1190	20 00 0d	               jsr  puts
.1193	20 ee 0f	               jsr  pop
.1196	60		               rts
.1197			putahexfmt
.1197	20 af 0f	               jsr  push
.119a	20 cc 11	               jsr  a2hex
.119d	a2 6a		               ldx  #<a2hexprefix
.119f	a0 11		               ldy  #>a2hexprefix
.11a1	20 00 0d	               jsr  puts
.11a4	20 ee 0f	               jsr  pop
.11a7	60		               rts
.11a8			putahex
.11a8	20 af 0f	               jsr  push
.11ab	20 cc 11	               jsr  a2hex
.11ae	a2 6b		               ldx  #<a2hexstr
.11b0	a0 11		               ldy  #>a2hexstr
.11b2	20 00 0d	               jsr  puts
.11b5	20 ee 0f	               jsr  pop
.11b8	60		               rts
.11b9			nib2hex
.11b9	08		               php
.11ba	29 0f		               and  #$0f
.11bc	f8		               sed
.11bd	18		               clc
.11be	69 90		               adc  #$90
.11c0	69 40		               adc  #$40
.11c2	d8		               cld
.11c3	28		               plp
.11c4	60		               rts
.11c5			lsra4bits
.11c5	08		               php
.11c6	4a		               lsr
.11c7	4a		               lsr
.11c8	4a		               lsr
.11c9	4a		               lsr
.11ca	28		               plp
.11cb	60		               rts
.11cc			a2hex
.11cc	08		               php
.11cd	48		               pha
.11ce	48		               pha
.11cf	20 c5 11	               jsr  lsra4bits
.11d2	20 b9 11	               jsr  nib2hex
.11d5	8d 6b 11	               sta  a2hexstr
.11d8	68		               pla
.11d9	20 b9 11	               jsr  nib2hex
.11dc	8d 6c 11	               sta  a2hexstr+1
.11df	a9 00		               lda  #$00                ; set end of string
.11e1	8d 6d 11	               sta  a2hexstr+2
.11e4	68		               pla
.11e5	28		               plp
.11e6	60		               rts
.11e7			xy2hex
.11e7	20 af 0f	               jsr  push
.11ea	20 cc 11	               jsr  a2hex
.11ed	8a		               txa
.11ee	48		               pha
.11ef	20 c5 11	               jsr  lsra4bits
.11f2	20 b9 11	               jsr  nib2hex
.11f5	8d 6b 11	               sta  a2hexstr
.11f8	68		               pla
.11f9	20 b9 11	               jsr  nib2hex
.11fc	8d 6c 11	               sta  a2hexstr+1
.11ff	98		               tya
.1200	48		               pha
.1201	20 c5 11	               jsr  lsra4bits
.1204	20 b9 11	               jsr  nib2hex
.1207	8d 6d 11	               sta  a2hexstr+2
.120a	68		               pla
.120b	20 b9 11	               jsr  nib2hex
.120e	8d 6e 11	               sta  a2hexstr+3
.1211	a9 00		               lda  #$00                ; 0 ended string
.1213	8d 6f 11	               sta  a2hexstr+4
.1216	20 ee 0f	               jsr  pop
.1219			atobin
.1219	20 af 0f	               jsr  push
.121c	a2 08		               ldx  #8
.121e	a0 00		               ldy  #0
.1220	18		               clc
.1221	2a		nextbit        rol
.1222	48		               pha
.1223	69 00		               adc  #$00
.1225	29 01		               and  #$01
.1227	20 b9 11	               jsr  nib2hex
.122a	99 70 11	               sta  abin,y
.122d	68		               pla
.122e	c8		               iny
.122f	ca		               dex
.1230	d0 ef		               bne  nextbit
.1232	a9 00		               lda  #0
.1234	99 70 11	               sta  abin,y
.1237	20 ee 0f	               jsr  pull
.123a	60		               rts
.123b			putabin
.123b	20 19 12	               jsr     atobin
.123e	20 af 0f	               jsr     push
.1241	a2 70		               ldx     #<abin
.1243	a0 11		               ldy     #>abin
.1245	20 00 0d	               jsr     puts
.1248	20 ee 0f	               jsr     pop
.124b	60		               rts
.124c			printabin
.124c	20 af 0f	               jsr     push
.124f	a2 70		               ldx     #<abin
.1251	a0 11		               ldy     #>abin
.1253	20 00 0d	               jsr     puts
.1256	20 ee 0f	               jsr     pop
.1259	60		               rts
.125a			putabinfmt
.125a	08		               php
.125b	48		               pha
.125c	a9 25		               lda     #"%"
.125e	20 fa 0c	               jsr     putch
.1261	68		               pla
.1262	20 3b 12	               jsr     putabin
.1265	28		               plp
.1266	60		               rts
.1267			putabinxy
.1267	20 1a 0d	               jsr     gotoxy
.126a	20 3b 12	               jsr     putabin
.126d	60		               rts
.126e			putabinfmtxy
.126e	20 1a 0d	               jsr     gotoxy
.1271	20 5a 12	               jsr     putabinfmt
.1274	60		               rts
.1275			atodec
.1275	20 af 0f	               jsr  push
.1278	f8		               sed
.1279	aa		               tax
.127a	a0 00		               ldy  #$00
.127c	a9 00		               lda  #$00
.127e	18		nextbit        clc
.127f	69 01		               adc  #$01
.1281	90 01		               bcc  decx
.1283	c8		               iny
.1284	ca		decx           dex
.1285	d0 f7		               bne  nextbit
.1287	48		               pha
.1288	98		               tya
.1289	20 b9 11	               jsr  nib2hex
.128c	8d 79 11	               sta  adec
.128f	68		               pla
.1290	48		               pha
.1291	20 b9 11	               jsr  nib2hex
.1294	8d 7b 11	               sta  adec+2
.1297	68		               pla
.1298	6a		               ror
.1299	6a		               ror
.129a	6a		               ror
.129b	6a		               ror
.129c	20 b9 11	               jsr  nib2hex
.129f	8d 7a 11	               sta  adec+1
.12a2	d8		               cld
.12a3	20 ee 0f	               jsr  pull
.12a6	60		               rts
>12a7	00 00 00	buffer         .byte     0,0,0
.12aa			putadec
.12aa	20 af 0f	               jsr  push
.12ad	20 75 12	               jsr  atodec
.12b0	a2 79		               ldx  #<adec
.12b2	a0 11		               ldy  #>adec+1
.12b4	20 00 0d	               jsr  puts
.12b7	20 ee 0f	               jsr  pop
.12ba	60		               rts

;******  Return to file: p033ex13.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>12bb	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>12bf	00 00 00 00 00 00 00 00 00 0d 00 00
>12cb	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>12cf	00 00 00 00 00 00 00 00 00 00 00 00
>12db	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>12df	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>12eb	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>12ef	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>12fb	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>12ff	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>130b	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>130f	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>131b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>131f	00 00 00 00 00 00 00 00 00 00 00 00
>132b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>132f	00 00 00 00 00 00 00 00 00 00 00 00
>133b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>133f	00 00 00 00 00 00 00 00 00 00 00 00
>134b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>134f	00 00 00 00 00 00 00 00 00 00 00 00
>135b	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>135f	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>136b	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>136f	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>137b	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>137f	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>138b	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>138f	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>139b	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>139f	00 00 00 00 00 00 00 00 00 00 00 00
>13ab	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>13af	00 00 00 00 00 00 00 00 00 00 00 00
.13bb			waitstop
.13bb	20 af 0f	               jsr  push
.13be	20 ed f6	wait           jsr  k_stop
.13c1	d0 fb		               bne  wait
.13c3	20 ee 0f	               jsr  pop
.13c6	60		               rts
.13c7			anykey
.13c7	08		               php
.13c8	48		               pha
.13c9	a5 cb		nokey          lda 203
.13cb	c9 40		               cmp #64
.13cd	f0 fa		               beq nokey
.13cf	20 d5 13	               jsr releasekey
.13d2	68		               pla
.13d3	28		               plp
.13d4	60		               rts
.13d5			releasekey
.13d5	08		               php
.13d6	48		               pha
.13d7	a5 cb		keypressed     lda 203
.13d9	c9 40		               cmp #64
.13db	d0 fa		               bne keypressed
.13dd	68		               pla
.13de	28		               plp
.13df	60		               rts
.13e0			getkey
.13e0	20 e4 ff	again          jsr  getin
.13e3	c9 00		               cmp  #0
.13e5	f0 f9		               beq  again
.13e7	60		               rts
.13e8			kbflushbuff
.13e8	08		               php
.13e9	48		               pha
.13ea	20 e4 ff	again          jsr  getin
.13ed	c9 00		               cmp  #0
.13ef	d0 f9		               bne  again
.13f1	68		               pla
.13f2	28		               plp
.13f3	60		               rts
.13f4			waitkey
.13f4	20 af 0f	               jsr  push
.13f7	8d 45 14	               sta  thekey
.13fa	20 e4 ff	nope           jsr  getin
.13fd	20 d2 ff	               jsr  chrout
.1400	cd 45 14	               cmp  thekey
.1403	d0 f5		               bne  nope
.1405	20 d2 ff	               jsr  chrout
.1408	20 ee 0f	               jsr  pop
.140b	60		               rts
.140c			waitspace
.140c	20 af 0f	               jsr  push
.140f	a9 7f		wait           lda  #$7f  ;%01111111
.1411	8d 00 dc	               sta  $dc00
.1414	ad 01 dc	               lda  $dc01
.1417	29 10		               and  #$10  ;mask %00010000
.1419	d0 f4		               bne  wait
.141b	20 ee 0f	               jsr  pop
.141e			waitsstop
.141e	20 af 0f	               jsr  push
.1421	20 ed f6	wait           jsr  k_stop  ;%01111111
.1424	d0 fb		               bne  wait
.1426	20 ee 0f	               jsr  pop
.1429			waitreturn
.1429	20 af 0f	               jsr  push
.142c	ad 46 14	               lda  thecount
.142f	8d 00 04	               sta  scrnram
.1432	a9 02		               lda  #$02
.1434	8d 00 d8	               sta  colorram
.1437	20 e4 ff	nope           jsr  getin
.143a	c9 0d		nohex          cmp  #$0d
.143c	d0 f9		               bne  nope
.143e	ee 46 14	               inc  thecount
.1441	20 ee 0f	               jsr  pop
.1444	60		               rts
>1445	00		thekey         .byte   0
>1446	01		thecount       .byte   $01

;******  Return to file: p033ex13.asm


;******  End of listing

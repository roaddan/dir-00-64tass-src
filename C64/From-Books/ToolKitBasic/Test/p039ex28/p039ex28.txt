
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p039ex28.txt -o p039ex28.prg p039ex28.asm
; Tue Nov  5 15:47:19 2024

;Offset	;Hex		;Source

;******  Processing input file: p039ex28.asm

="20241030-2058ff"	           Version = "20241030-2058ff"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c d3 09	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p039ex28.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p039ex28.asm

.0854			p039ex28
.0854	20 4a 0e	          jsr  push           ; Sauvegarde le statut complet.
.0857			again
.0857	20 4a 0e	               jsr  push
.085a	48		               pha
.085b	a9 03		               lda  #ccyan
.085d	8d 20 d0	               sta  $d020
.0860	68		               pla
.0861	48		               pha
.0862	a9 01		               lda  #cblanc
.0864	8d 21 d0	               sta  $d021
.0867	68		               pla
.0868	48		               pha
.0869	a9 06		               lda  #cbleu
.086b	8d 86 02	               sta  bascol
.086e	68		               pla
.086f	20 89 0e	               jsr  pull
.0872	20 3c 0d	          jsr  cls            ; On efface l'écran.
.0875	a9 c4		          lda  #<serie        ; La série sera placée à l'adresse $c29a.
.0877	85 fd		          sta  $fd            ; Un octet passé l'ordre.
.0879	a9 09		          lda  #>serie
.087b	85 fe		          sta  $fe
.087d	a9 03		          lda  #$03           ; Demande trois valeurs.
.087f	85 ff		          sta  $ff
.0881	20 4a 0e	               jsr  push
.0884	a2 40		               ldx  #<ttext
.0886	a0 09		               ldy  #>ttext
.0888	20 59 0d	               jsr  puts
.088b	20 89 0e	               jsr  pull
.088e	20 4a 0e	               jsr  push
.0891	a2 6d		               ldx  #<ttext2
.0893	a0 09		               ldy  #>ttext2
.0895	20 59 0d	               jsr  puts
.0898	20 89 0e	               jsr  pull
.089b	18		nexser    clc
.089c	a4 ff		          ldy  $ff
.089e	b9 bf 09	          lda  symboles,y
.08a1	8d b1 09	          sta  ptext+23
.08a4	20 4a 0e	               jsr  push
.08a7	a2 9a		               ldx  #<ptext
.08a9	a0 09		               ldy  #>ptext
.08ab	20 59 0d	               jsr  puts
.08ae	20 89 0e	               jsr  pull
.08b1	20 c1 0c	          jsr  insub
.08b4	a6 fd		          ldx  $fd
.08b6	a4 fe		          ldy  $fe
.08b8	20 d4 bb	          jsr  b_f1tmem       ; Copie Fac1 à l'adresse pointée par x et y.
.08bb	18		          clc
.08bc	a9 05		          lda  #$05           ; Déplace le pointeur de 5 octets.
.08be	65 fd		          adc  $fd
.08c0	85 fd		          sta  $fd
.08c2	c6 ff		          dec  $ff
.08c4	d0 d5		          bne  nexser
.08c6	a9 02		          lda  #$02           ; Sélectionne l'ordre de la série.
.08c8	8d c3 09	          sta  order
.08cb	20 4a 0e	          jsr  push
.08ce	a4 ff		          ldy  $ff
.08d0	b9 bf 09	          lda  symboles,y
.08d3	8d b1 09	          sta  ptext+23
.08d6	20 4a 0e	               jsr  push
.08d9	a2 9a		               ldx  #<ptext
.08db	a0 09		               ldy  #>ptext
.08dd	20 59 0d	               jsr  puts
.08e0	20 89 0e	               jsr  pull
.08e3	20 89 0e	          jsr  pull
.08e6	20 c1 0c	          jsr  insub
.08e9	a9 c3		          lda  #<order
.08eb	a0 09		          ldy  #>order
.08ed	20 59 e0	          jsr  b_poly
.08f0	20 dd bd	          jsr  b_facasc
.08f3	20 4a 0e	               jsr  push
.08f6	a2 b4		               ldx  #<restext
.08f8	a0 09		               ldy  #>restext
.08fa	20 59 0d	               jsr  puts
.08fd	20 89 0e	               jsr  pull
.0900	20 a3 0c	          jsr  outsub
.0903	20 4a 0e	               jsr  push
.0906	a2 23		               ldx  #<query
.0908	a0 09		               ldy  #>query
.090a	20 b9 0d	               jsr  putsxy
.090d	20 89 0e	               jsr  pull
.0910	20 7b 12	          jsr  getkey         ; Attend une clef.
.0913	29 7f		          and  #$7f           ; Met en minuscule.
.0915	c9 4f		          cmp  #'o'           ; Est-ce 'o'ui
.0917	d0 03		          bne  out            ; Non, on sort.
.0919	4c 57 08	          jmp again           ; On recommence.
.091c	20 65 0a	out       jsr  aide           ; Affiche le menu d'aide.
.091f	20 89 0e	          jsr  pop            ; Récupère le statut complet.
.0922	60		          rts
>0923	02 17 0d 9a	query     .byte     2,23,b_crlf,b_ltblue,b_space
>0927	20
>0928	20 d5 4e 20	          .text     " Un autre calcul (o/N)?"
>092c	41 55 54 52 45 20 43 41 4c 43 55 4c 20 28 4f 2f
>093c	ce 29 3f
>093f	00		          .byte     b_eot
>0940	05 20 1f 12	ttext     .byte     b_white,b_space,b_blue,b_rvs_on
>0944	20 c3 41 4c	          .text      " Calcul un polynomial de 2ieme ordre. "
>0948	43 55 4c 20 55 4e 20 50 4f 4c 59 4e 4f 4d 49 41
>0958	4c 20 44 45 20 32 49 45 4d 45 20 4f 52 44 52 45
>0968	2e 20
>096a	92 0d 00	          .byte     b_rvs_off,b_crlf,b_eot
>096d	05 20 1f 12	ttext2    .byte     b_white,b_space,b_blue,b_rvs_on
>0971	20 20 20 20	          .text      "          f(x)=A(x)2+B(x)+C           "
>0975	20 20 20 20 20 20 46 28 58 29 3d c1 28 58 29 32
>0985	2b c2 28 58 29 2b c3 20 20 20 20 20 20 20 20 20
>0995	20 20
>0997	92 0d 00	          .byte     b_rvs_off,b_crlf,b_eot
>099a	0d 9c 20	ptext     .byte     b_crlf, b_purple, b_space
>099d	20 c5 4e 54	          .text     " Entez la valeur de X"
>09a1	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>09b1	d8
>09b2	90 00		          .byte     b_black,b_eot
>09b4	0d 9c 20	restext   .byte     b_crlf, b_purple, b_space
>09b7	20 46 28 58	          .text     " f(x)="
>09bb	29 3d
>09bd	90 00		          .byte     b_black,b_eot
>09bf	d8 c3 c2 c1	symboles  .text     "XCBA"
>09c3	00		order     .byte     0
>09c4	00 00 00 00	serie     .byte     0,0,0,0,0
>09c8	00
>09c9	00 00 00 00	          .byte     0,0,0,0,0
>09cd	00
>09ce	00 00 00 00	          .byte     0,0,0,0,0
>09d2	00
.09d3			main
.09d3	20 1c 0d	          jsr       scrmaninit
.09d6	08		               php
.09d7	48		               pha
.09d8	a9 08		               lda  #$08
.09da	20 d2 ff	               jsr  $ffd2
.09dd	68		               pla
.09de	28		               plp
.09df	20 4a 0e	               jsr  push
.09e2	48		               pha
.09e3	a9 03		               lda  #ccyan
.09e5	8d 20 d0	               sta  $d020
.09e8	68		               pla
.09e9	48		               pha
.09ea	a9 01		               lda  #cblanc
.09ec	8d 21 d0	               sta  $d021
.09ef	68		               pla
.09f0	48		               pha
.09f1	a9 06		               lda  #cbleu
.09f3	8d 86 02	               sta  bascol
.09f6	68		               pla
.09f7	20 89 0e	               jsr  pull
.09fa	20 1b 0a	          jsr       bookinfo
.09fd	20 e5 0c	          jsr       akey
.0a00	20 3c 0d	          jsr       cls
.0a03	20 65 0a	          jsr       aide
.0a06	20 e5 0c	          jsr       akey
.0a09	a9 0d		          lda       #b_crlf
.0a0b	20 d2 ff	          jsr       $ffd2
.0a0e	20 54 08	          jsr       p039ex28
.0a11	08		               php
.0a12	48		               pha
.0a13	a9 09		               lda  #$09
.0a15	20 d2 ff	               jsr  $ffd2
.0a18	68		               pla
.0a19	28		               plp
.0a1a	60		          rts
.0a1b			bookinfo
.0a1b	20 4a 0e	          jsr  push           ; Sauvegarde le statut complet.
.0a1e	08		               php
.0a1f	48		               pha
.0a20	a9 0e		               lda  #14
.0a22	8d 3b 0d	               sta  characterset
.0a25	20 d2 ff	               jsr  $ffd2
.0a28	68		               pla
.0a29	28		               plp
.0a2a	20 3c 0d	          jsr       cls
.0a2d	20 4a 0e	               jsr  push
.0a30	a2 7a		               ldx  #<line
.0a32	a0 0c		               ldy  #>line
.0a34	20 59 0d	               jsr  puts
.0a37	20 89 0e	               jsr  pull
.0a3a	20 4a 0e	               jsr  push
.0a3d	a2 a2		               ldx  #<headera
.0a3f	a0 0a		               ldy  #>headera
.0a41	20 59 0d	               jsr  puts
.0a44	20 89 0e	               jsr  pull
.0a47	20 4a 0e	               jsr  push
.0a4a	a2 42		               ldx  #<headerb
.0a4c	a0 0b		               ldy  #>headerb
.0a4e	20 59 0d	               jsr  puts
.0a51	20 89 0e	               jsr  pull
.0a54	20 4a 0e	               jsr  push
.0a57	a2 7a		               ldx  #<line
.0a59	a0 0c		               ldy  #>line
.0a5b	20 59 0d	               jsr  puts
.0a5e	20 89 0e	               jsr  pull
.0a61	20 89 0e	          jsr  pop            ; Récupère le statut complet.
.0a64	60		          rts
.0a65			aide
.0a65	20 4a 0e	          jsr  push           ; Sauvegarde le statut complet.
.0a68	08		               php
.0a69	48		               pha
.0a6a	a9 0e		               lda  #14
.0a6c	8d 3b 0d	               sta  characterset
.0a6f	20 d2 ff	               jsr  $ffd2
.0a72	68		               pla
.0a73	28		               plp
.0a74	20 3c 0d	          jsr       cls
.0a77	20 4a 0e	               jsr  push
.0a7a	a2 e5		               ldx  #<shortcuts
.0a7c	a0 0b		               ldy  #>shortcuts
.0a7e	20 59 0d	               jsr  puts
.0a81	20 89 0e	               jsr  pull
.0a84	20 4a 0e	               jsr  push
.0a87	a2 66		               ldx  #<aidetext
.0a89	a0 0c		               ldy  #>aidetext
.0a8b	20 59 0d	               jsr  puts
.0a8e	20 89 0e	               jsr  pull
.0a91	20 4a 0e	               jsr  push
.0a94	a2 7a		               ldx  #<line
.0a96	a0 0c		               ldy  #>line
.0a98	20 59 0d	               jsr  puts
.0a9b	20 89 0e	               jsr  pull
.0a9e	20 89 0e	          jsr  pop            ; Récupère le statut complet.
.0aa1	60		          rts
.0aa2			headera
>0aa2	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>0aa6	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>0ab6	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>0ac6	20 20 2a
>0ac9	0d		          .byte     b_crlf
>0aca	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>0ace	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>0ade	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>0aee	20 20 2a
>0af1	0d		          .byte     b_crlf
>0af2	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>0af6	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>0b06	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>0b16	20 20 2a
>0b19	0d		          .byte     b_crlf
>0b1a	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>0b1e	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>0b2e	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>0b3e	20 20 2a 00
>0b42	0d		headerb   .byte     $0d
>0b43	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>0b47	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>0b57	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>0b67	20 20 2a
>0b6a	0d		          .byte     $0d
>0b6b	20 2a 20 20	          .text               " *        page 39, exemple #28        *"
>0b6f	20 20 20 20 20 20 50 41 47 45 20 33 39 2c 20 45
>0b7f	58 45 4d 50 4c 45 20 23 32 38 20 20 20 20 20 20
>0b8f	20 20 2a
>0b92	0d		          .byte     $0d
>0b93	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0b97	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0ba7	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0bb7	20 20 2a
>0bba	0d		          .byte     $0d
>0bbb	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0bbf	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0bcf	34 31 30 33 30 2d 32 30 35 38 46 46 2e 20 20 20
>0bdf	20 20 2a 20
>0be3	90 00		          .byte     b_black,b_eot
>0be5	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0be8	20 20 20 20	          .text               "       RACCOURCIS DE L'EXEMPLE        "
>0bec	20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4 c5
>0bfc	20 cc 27 c5 d8 c5 cd d0 cc c5 20 20 20 20 20 20
>0c0c	20 20
>0c0e	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0c11	20 50 30 33	          .text     format(   " p039ex28: SYS %d ($%04x)",p039ex28, p039ex28)
>0c15	39 45 58 32 38 3a 20 d3 d9 d3 20 32 31 33 32 20
>0c25	28 24 30 38 35 34 29
>0c2c	0d		          .byte     b_crlf
>0c2d	20 41 49 44	          .text     format(   " aide....: SYS %d ($%04x)",aide, aide)
>0c31	45 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 36 36 31 20
>0c41	28 24 30 41 36 35 29
>0c48	0d		          .byte     b_crlf
>0c49	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04x)",cls, cls)
>0c4d	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 33 38 38 20
>0c5d	28 24 30 44 33 43 29
>0c64	0d 00		          .byte     b_crlf,b_eot
>0c66	0d 20 1c	aidetext  .byte     b_crlf,b_space,b_red
>0c69	20 45 58 2e	          .text     format(   " ex.: SYS %d",p039ex28)
>0c6d	3a 20 d3 d9 d3 20 32 31 33 32
>0c77	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0c7a	20 2d 2d 2d	line      .text               " --------------------------------------"
>0c7e	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0c8e	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0c9e	2d 2d 2d
>0ca1	0d 00		          .byte     b_crlf,b_eot

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/toolkitbasic.asm

.0ca3			outsub
.0ca3	20 4a 0e	          jsr  push           ; Sauvegarde le statut complet.
.0ca6	a0 ff		          ldy  #$ff           ; On détermine
.0ca8	c8		nxtchr    iny                 ;  le nombre de caractères
.0ca9	b9 00 01	          lda  $0100,y        ;  qu'il y a dans la chaine à afficher.
.0cac	d0 fa		          bne  nxtchr
.0cae	c8		          iny                 ; On ajoute 1 au nombre trouvé pour compenser
.0caf	98		          tya                 ;  l'adresse a y=0.
.0cb0	48		          pha                 ; Sauvegarde ce nombre.
.0cb1	a9 00		          lda  #$00           ; On prépare le pointeur $22-$23
.0cb3	85 22		          sta  $22            ;  en le peuplant avec
.0cb5	a9 01		          lda  #$01           ;  l'adresse ou se trouve la chaine
.0cb7	85 23		          sta  $23            ;  à afficher.
.0cb9	68		          pla                 ; On ramène le nombre de caractères.
.0cba	20 24 ab	          jsr  b_strout       ; On affiche.
.0cbd	20 89 0e	          jsr  pop            ; Récupère le statut complet.
.0cc0	60		          rts
.0cc1			insub
.0cc1	20 4a 0e	          jsr  push           ; Sauvegarde le statut complet.
.0cc4	20 83 12	          jsr  kbflushbuff
.0cc7	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.0cca	a9 00		          lda  #$00           ; On efface le basic input buffer
.0ccc	a0 59		          ldy  #$59           ;  situé à $200 long de 89 bytes ($59)
.0cce	99 00 02	clear     sta  b_inpbuff,y    ;  en plaçant des $00 partout
.0cd1	88		          dey                 ;  et ce jusqu'au
.0cd2	d0 fa		          bne  clear          ;  dernier.
.0cd4	20 f9 ab	          jsr  b_prompt       ; Affiche un "?" et attend une entrée.
.0cd7	86 7a		          stx  $7a            ; X et Y pointe sur $01ff au retour.
.0cd9	84 7b		          sty  $7b
.0cdb	20 73 00	          jsr  b_chrget       ; Lecture du buffer.
.0cde	20 f3 bc	          jsr  b_ascflt       ; Conversion la chaine ascii en 200 en float.
.0ce1	20 89 0e	          jsr  pop            ; Récupère le statut complet.
.0ce4	60		          rts
.0ce5			akey
.0ce5	20 4a 0e	               jsr  push
.0ce8	a2 f6		               ldx  #<kmsg
.0cea	a0 0c		               ldy  #>kmsg
.0cec	20 59 0d	               jsr  puts
.0cef	20 89 0e	               jsr  pull
.0cf2	20 62 12	          jsr  anykey
.0cf5	60		          rts
>0cf6	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>0cfa	d5 4e 45 20	          .text               "Une clef pour continuer!"
>0cfe	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0d0e	55 45 52 21
>0d12	90 00		          .byte b_black,b_eot
.0d14			kmsgend

;******  Return to file: p039ex28.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0d14	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0d18	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0d1c			libtart

;******  Return to file: p039ex28.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p039ex28.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p039ex28.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0d1c			scrmaninit
.0d1c	20 4a 0e	               jsr  push
.0d1f	a9 06		               lda  #vbleu
.0d21	8d 21 d0	               sta  vicbackcol
.0d24	a9 05		               lda  #vvert
.0d26	8d 20 d0	               sta  vicbordcol
.0d29	a9 01		               lda  #vblanc
.0d2b	8d 86 02	               sta  bascol
.0d2e	ad 00 04	               lda  scrnram
.0d31	8d 00 04	               sta  scrnram
.0d34	20 3c 0d	               jsr  cls
.0d37	20 89 0e	               jsr  pop
.0d3a	60		               rts
>0d3b	8e		characterset   .byte b_uppercase
.0d3c			cls
.0d3c	08		               php
.0d3d	48		               pha
.0d3e	a9 93		               lda  #$93
.0d40	20 53 0d	               jsr  putch
.0d43	68		               pla
.0d44	28		               plp
.0d45	60		               rts
.0d46			putnch
.0d46	08		               php
.0d47	e0 00		               cpx  #$00
.0d49	f0 06		               beq  out
.0d4b	20 d2 ff	again          jsr  $ffd2
.0d4e	ca		               dex
.0d4f	d0 fa		               bne  again
.0d51	28		out            plp
.0d52	60		               rts
.0d53			putch
.0d53	08		               php
.0d54	20 d2 ff	               jsr  $ffd2
.0d57	28		               plp
.0d58	60		               rts
.0d59			puts
.0d59	20 4a 0e	               jsr  push
.0d5c	86 fb		               stx  zpage1
.0d5e	84 fc		               sty  zpage1+1
.0d60	a0 00		               ldy  #0
.0d62	b1 fb		next           lda  (zpage1),y
.0d64	f0 09		               beq  exit
.0d66	20 53 0d	               jsr  putch
.0d69	20 51 0f	               jsr  inczp1
.0d6c	4c 62 0d	               jmp  next
.0d6f	20 89 0e	exit           jsr  pop
.0d72	60		               rts
.0d73			gotoxy
.0d73	08		               php
.0d74	18		               clc
.0d75	8a		               txa
.0d76	48		               pha
.0d77	98		               tya
.0d78	aa		               tax
.0d79	68		               pla
.0d7a	a8		               tay
.0d7b	20 f0 ff	               jsr  kplot
.0d7e	28		               plp
.0d7f	60		               rts
.0d80			cursor
=$0286			bascol    =    $0286
.0d80	08		               php
.0d81	48		               pha
.0d82	90 12		               bcc  restore
.0d84	20 f0 ff	               jsr  kplot
.0d87	8c a8 0d	               sty  cx
.0d8a	8e a9 0d	               stx  cy
.0d8d	ad 86 02	               lda  bascol
.0d90	8d aa 0d	               sta  bcol
.0d93	4c a5 0d	               jmp  out
.0d96	ae a9 0d	restore        ldx  cy
.0d99	ac a8 0d	               ldy  cx
.0d9c	20 f0 ff	               jsr  kplot
.0d9f	ad aa 0d	               lda  bcol
.0da2	8d 86 02	               sta  bascol
.0da5	68		out            pla
.0da6	28		               plp
.0da7	60		               rts
>0da8	00		cx   .byte     $00
>0da9	00		cy   .byte     $00
>0daa	00		bcol .byte     $00
.0dab			cursave
.0dab	08		               php
.0dac	38		               sec
.0dad	20 80 0d	               jsr  cursor
.0db0	28		               plp
.0db1	60		               rts
.0db2			curput
.0db2	08		               php
.0db3	18		               clc
.0db4	20 80 0d	               jsr  cursor
.0db7	28		               plp
.0db8	60		               rts
.0db9			putsxy
.0db9	20 4a 0e	               jsr  push
.0dbc	86 fb		               stx  zpage1
.0dbe	84 fc		               sty  zpage1+1
.0dc0	a0 00		               ldy  #$00
.0dc2	b1 fb		               lda  (zpage1),y
.0dc4	aa		               tax
.0dc5	20 51 0f	               jsr  inczp1
.0dc8	b1 fb		               lda  (zpage1),y
.0dca	a8		               tay
.0dcb	20 73 0d	               jsr  gotoxy
.0dce	20 51 0f	               jsr  inczp1
.0dd1	a6 fb		               ldx  zpage1
.0dd3	a4 fc		               ldy  zpage1+1
.0dd5	20 59 0d	               jsr  puts
.0dd8	20 89 0e	               jsr  pop
.0ddb	60		               rts
>0ddc	00 00		straddr   .word     $00
>0dde	00		px        .byte     $00
>0ddf	00		py        .byte     $00
>0de0	00 00		zp1       .word     $00
.0de2			putscxy
.0de2	20 4a 0e	               jsr  push
.0de5	84 fc		               sty  zpage1+1
.0de7	86 fb		               stx  zpage1
.0de9	ad 86 02	               lda  bascol
.0dec	8d 0c 0e	               sta  bc
.0def	a0 00		               ldy #$00
.0df1	b1 fb		               lda  (zpage1),y
.0df3	8d 86 02	               sta  bascol
.0df6	20 51 0f	               jsr  inczp1
.0df9	a6 fb		               ldx  zpage1
.0dfb	a4 fc		               ldy  zpage1+1
.0dfd	20 b9 0d	               jsr  putsxy
.0e00	ad 0c 0e	               lda  bc
.0e03	8d 86 02	               sta  bascol
.0e06	20 89 0e	               jsr  pop
.0e09	60		               rts
>0e0a	00 00		straddr  .word      $00
>0e0c	00		bc       .byte      $00
>0e0d	00 00		zp1      .word      $00
.0e0f			putrahex
.0e0f	08		               php
.0e10	48		               pha
.0e11	20 67 10	               jsr  a2hex
.0e14	a9 06		               lda  #<a2hexstr
.0e16	a0 10		               ldy  #>a2hexstr
.0e18	20 59 0d	               jsr  puts
.0e1b	68		               pla
.0e1c	28		               plp
.0e1d	60		               rts
.0e1e			kputrahexxy
.0e1e			bputrahexxy
.0e1e			putrahexxy
.0e1e	08		               php
.0e1f	20 67 10	               jsr  a2hex
.0e22	a9 03		               lda  #<a2hexpos
.0e24	a0 10		               ldy  #>a2hexpos
.0e26	20 b9 0d	               jsr  putsxy
.0e29	68		               pla
.0e2a	28		               plp
.0e2b	60		               rts
.0e2c			putrahexcxy
.0e2c	08		               php
.0e2d	20 67 10	               jsr  a2hex
.0e30	a9 03		               lda  #<a2hexpos
.0e32	a0 10		               ldy  #>a2hexpos
.0e34	20 e2 0d	               jsr  putscxy
.0e37	68		               pla
.0e38	28		               plp
.0e39	60		               rts
.0e3a			setinverse
.0e3a	48		               pha
.0e3b	a9 12		               lda  #$12
.0e3d	20 d2 ff	               jsr  $ffd2
.0e40	68		               pla
.0e41	60		               rts
.0e42			clrinverse
.0e42	48		               pha
.0e43	a9 92		               lda  #$92
.0e45	20 d2 ff	               jsr  $ffd2
.0e48	68		               pla
.0e49	60		               rts

;******  Return to file: p039ex28.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0e4a			push
.0e4a	08		          php            ; stack : flg, pcl, pch
.0e4b	78		          sei
.0e4c	8d 86 0e	          sta  ra        ; save a
.0e4f	68		          pla            ; stack : pcl, pch
.0e50	8d 85 0e	          sta  rp        ; save rp
.0e53	68		          pla            ; stack : pch
.0e54	8d 87 0e	          sta  pc        ; save pcl
.0e57	68		          pla            ; stack : -
.0e58	8d 88 0e	          sta  pc+1      ; save pch
.0e5b	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0e5d	48		          pha            ; stack : zp1l
.0e5e	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0e60	48		          pha            ; stack : zp1h, zp1l
.0e61	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0e63	48		          pha            ; stack : zp2l, zp1h, zp1l
.0e64	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0e66	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0e67	ad 85 0e	          lda  rp        ; get rp
.0e6a	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0e6b	ad 86 0e	          lda  ra        ; get a
.0e6e	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0e6f	8a		          txa            ; get x
.0e70	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e71	98		          tya            ; get y
.0e72	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e73	ad 88 0e	          lda  pc+1      ; get pch
.0e76	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e77	ad 87 0e	          lda  pc        ; get pcl
.0e7a	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e7b	ad 85 0e	          lda  rp        ; get rp
.0e7e	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e7f	ad 86 0e	          lda  ra        ; get a
.0e82	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e83	58		          cli
.0e84	60		          rts
>0e85	00		rp        .byte     0
>0e86	00		ra        .byte     0
>0e87	00 00		pc        .word     0
.0e89			pull
.0e89			pop
.0e89	78		          sei
.0e8a	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e8b	8d be 0e	          sta  pc        ; save pcl
.0e8e	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e8f	8d bf 0e	          sta  pc+1      ; save pch
.0e92	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e93	a8		          tay            ; set y
.0e94	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0e95	aa		          tax            ; set x
.0e96	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0e97	8d bd 0e	          sta  ra        ; save a
.0e9a	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0e9b	8d bc 0e	          sta  rp        ; save rp
.0e9e	68		          pla            ; stack : zp2l, zp1h, zp1l
.0e9f	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0ea1	68		          pla            ; stack : zp1h, zp1l
.0ea2	85 fd		          sta  zpage2    ; get zpage2 High byte
.0ea4	68		          pla            ; stack : zp1l
.0ea5	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0ea7	68		          pla            ; stack :
.0ea8	85 fb		          sta  zpage1    ; get zpage1 High byte
.0eaa	ad bf 0e	          lda  pc+1      ; get pch
.0ead	48		          pha            ; stack : pch
.0eae	ad be 0e	          lda  pc
.0eb1	48		          pha            ; stack : pcl, pch
.0eb2	ad bc 0e	          lda  rp        ; get rp
.0eb5	48		          pha            ; stack : rp, pcl, pch
.0eb6	ad bd 0e	          lda  ra        ; set ra
.0eb9	58		          cli
.0eba	28		          plp            ; stack : pcl, pch
.0ebb	60		          rts
>0ebc	00		rp        .byte     0
>0ebd	00		ra        .byte     0
>0ebe	00 00		pc        .word     0

;******  Return to file: p039ex28.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0ec0			blkfill
.0ec0	20 4a 0e	bf0            jsr  push
.0ec3	20 81 0f	               jsr  savezp1
.0ec6	84 fc		               sty  zpage1+1
.0ec8	a0 00		               ldy  #$00
.0eca	84 fb		               sty  zpage1
.0ecc	91 fb		bf1            sta  (zpage1),y
.0ece	c8		               iny
.0ecf	d0 fb		               bne  bf1
.0ed1	20 90 0f	               jsr  restzp1
.0ed4	20 89 0e	               jsr  pop
.0ed7	60		               rts
.0ed8			memfill
.0ed8	20 4a 0e	               jsr  push
.0edb	20 c0 0e	mf1            jsr  blkfill
.0ede	c8		               iny
.0edf	ca		               dex
.0ee0	d0 f9		               bne  mf1
.0ee2	20 89 0e	               jsr  pop
.0ee5	60		               rts
.0ee6			memmove
.0ee6	20 4a 0e	               jsr  push
.0ee9	ba		               tsx            ; On se crée un pointeur ...
.0eea	8a		               txa
.0eeb	18		               clc
.0eec	69 0b		               adc  #11
.0eee	a8		               tay
.0eef	a2 06		               ldx  #$06
.0ef1	b9 00 01	nextbyte       lda  $0100,y
.0ef4	99 40 0f	               sta  words,y
.0ef7	c8		               iny
.0ef8	ca		               dex
.0ef9	d0 f6		               bne  nextbyte
.0efb	ad 40 0f	               lda  s
.0efe	8d 17 0f	               sta  source+1
.0f01	ad 41 0f	               lda  s+1
.0f04	8d 18 0f	               sta  source+2
.0f07	ad 42 0f	               lda  d
.0f0a	8d 14 0f	               sta  destin+1
.0f0d	ad 43 0f	               lda  d+1
.0f10	8d 15 0f	               sta  destin+2
.0f13	ad ff ff	destin         lda  $ffff
.0f16	8d ff ff	source         sta  $ffff
.0f19	ee 14 0f	               inc  destin+1
.0f1c	d0 03		               bne  src
.0f1e	ee 15 0f	               inc  destin+2
.0f21	ee 17 0f	src            inc  source+1
.0f24	d0 03		               bne  cnt
.0f26	ee 18 0f	               inc  source+2
.0f29	ad 44 0f	cnt            lda  compte
.0f2c	d0 08		               bne  decit
.0f2e	ad 45 0f	               lda  compte+1
.0f31	f0 09		               beq  fini
.0f33	ce 45 0f	               dec  compte+1
.0f36	ce 44 0f	decit          dec  compte
.0f39	4c 13 0f	               jmp  destin
.0f3c	20 89 0e	fini           jsr  pop
.0f3f	60		               rts
.0f40			words
>0f40	00 00		s         .word     $0000
>0f42	00 00		d         .word     $0000
>0f44	00 00		compte    .word     $0000
.0f46			decword
.0f46	20 4a 0e	               jsr  push
.0f49	86 fd		               stx  zpage2
.0f4b	84 fe		               sty  zpage2+1
.0f4d	20 89 0e	               jsr  pop
.0f50	60		               rts
.0f51			inczp1
.0f51	08		               php
.0f52	48		               pha
.0f53	e6 fb		               inc  zpage1
.0f55	a5 fb		               lda  zpage1
.0f57	d0 02		               bne  nopage
.0f59	e6 fc		               inc  zpage1+1
.0f5b	68		nopage         pla
.0f5c	28		               plp
.0f5d	60		               rts
.0f5e			deczp1
.0f5e	08		                php
.0f5f	48		                pha
.0f60	c6 fb		                dec  zpage1
.0f62	d0 02		                bne  nopage
.0f64	c6 fc		                dec  zpage1+1
.0f66	68		nopage          pla
.0f67	28		                plp
.0f68	60		                rts
.0f69			inczp2
.0f69	08		               php
.0f6a	48		               pha
.0f6b	e6 fd		               inc  zpage2
.0f6d	a5 fd		               lda  zpage2
.0f6f	d0 02		               bne  nopage
.0f71	e6 fe		               inc  zpage2+1
.0f73	68		nopage         pla
.0f74	28		               plp
.0f75	60		               rts
.0f76			deczp2
.0f76	08		               php
.0f77	48		               pha
.0f78	a5 fd		               lda  zpage2
.0f7a	d0 02		               bne  nopage
.0f7c	c6 fe		               dec  zpage2+1
.0f7e	68		nopage         pla
.0f7f	28		               plp
.0f80	60		               rts
.0f81			savezp1
.0f81	08		               php
.0f82	48		               pha
.0f83	a5 fb		               lda  zpage1
.0f85	8d fd 0f	               sta  zp1
.0f88	a5 fc		               lda  zpage1+1
.0f8a	8d fe 0f	               sta  zp1+1
.0f8d	68		               pla
.0f8e	28		               plp
.0f8f	60		               rts
.0f90			restzp1
.0f90	08		               php
.0f91	48		               pha
.0f92	ad fd 0f	               lda zp1
.0f95	85 fb		               sta zpage1
.0f97	ad fe 0f	               lda zp1+1
.0f9a	85 fc		               sta zpage1+1
.0f9c	68		               pla
.0f9d	28		               plp
.0f9e	60		               rts
.0f9f			savezp2
.0f9f	08		         php
.0fa0	48		         pha
.0fa1	a5 fd		         lda zpage2
.0fa3	8d ff 0f	         sta zp2
.0fa6	a5 fe		         lda zpage2+1
.0fa8	8d 00 10	         sta zp2+1
.0fab	68		         pla
.0fac	28		         plp
.0fad	60		         rts
.0fae			restzp2
.0fae	08		                php
.0faf	48		                pha
.0fb0	ad ff 0f	                lda  zp2
.0fb3	85 fd		                sta  zpage2
.0fb5	ad 00 10	                lda  zp2+1
.0fb8	85 fe		                sta  zpage2+1
.0fba	68		                pla
.0fbb	28		                plp
.0fbc	60		                rts
.0fbd			xy2addr
.0fbd	08		                php
.0fbe	48		                pha
.0fbf	8a		                txa
.0fc0	48		                pha
.0fc1	98		                tya
.0fc2	48		                pha
.0fc3	ad f8 0f	                lda     addr1+1
.0fc6	8d fa 0f	                sta     addr2+1
.0fc9	ad f7 0f	                lda     addr1
.0fcc	8d f9 0f	                sta     addr2
.0fcf	c0 00		                cpy     #$00
.0fd1	f0 0f		                beq     addx
.0fd3	18		moreline        clc
.0fd4	6d f6 0f	                adc     ymult
.0fd7	90 03		                bcc     norepy
.0fd9	ee fa 0f	                inc     addr2+1
.0fdc	8d f9 0f	norepy          sta     addr2
.0fdf	88		                dey
.0fe0	d0 f1		                bne     moreline
.0fe2	8a		addx            txa
.0fe3	18		                clc
.0fe4	6d f9 0f	                adc     addr2
.0fe7	90 03		                bcc     thatsit
.0fe9	ee fa 0f	                inc     addr2+1
.0fec	8d f9 0f	thatsit         sta     addr2
.0fef	68		                pla
.0ff0	a8		                tay
.0ff1	68		                pla
.0ff2	aa		                tax
.0ff3	68		                pla
.0ff4	28		                plp
.0ff5	60		                rts
>0ff6	28		ymult          .byte     40
>0ff7	00 00		addr1          .word     $0000
>0ff9	00 00		addr2          .word     $0000
>0ffb	00 00		bytecnt        .word     $0000
>0ffd	00 00		zp1        .word   $0000
>0fff	00 00		zp2        .word   $0000

;******  Return to file: p039ex28.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1001	01		a2hexcol       .byte     1              ; pour aputscxy
>1002	00		a2hexbkcol     .byte     %00000000
.1003			a2hexpos
>1003	00		a2hexpx        .byte     0              ; pour aputsxy
>1004	00		a2hexpy        .byte     0
>1005	24		a2hexprefix    .byte     "$"            ; pour aputs
>1006	00 00		a2hexstr       .word     $00
>1008	00 00		               .word     $00
>100a	00		               .byte     0              ; 0 end string
>100b	30 30 30 30	abin           .null     "00000000"
>100f	30 30 30 30 00
>1014	20 20 20 00	adec           .null     "   "
.1018			putahexfmtxy
.1018	20 4a 0e	               jsr  push
.101b	20 67 10	               jsr  a2hex
.101e	ae 03 10	               ldx  a2hexpx
.1021	ac 04 10	               ldy  a2hexpy
.1024	20 73 0d	               jsr  gotoxy
.1027	a2 05		               ldx  #<a2hexprefix
.1029	a0 10		               ldy  #>a2hexprefix
.102b	20 59 0d	               jsr  puts
.102e	20 89 0e	               jsr  pop
.1031	60		               rts
.1032			putahexfmt
.1032	20 4a 0e	               jsr  push
.1035	20 67 10	               jsr  a2hex
.1038	a2 05		               ldx  #<a2hexprefix
.103a	a0 10		               ldy  #>a2hexprefix
.103c	20 59 0d	               jsr  puts
.103f	20 89 0e	               jsr  pop
.1042	60		               rts
.1043			putahex
.1043	20 4a 0e	               jsr  push
.1046	20 67 10	               jsr  a2hex
.1049	a2 06		               ldx  #<a2hexstr
.104b	a0 10		               ldy  #>a2hexstr
.104d	20 59 0d	               jsr  puts
.1050	20 89 0e	               jsr  pop
.1053	60		               rts
.1054			nib2hex
.1054	08		               php
.1055	29 0f		               and  #$0f
.1057	f8		               sed
.1058	18		               clc
.1059	69 90		               adc  #$90
.105b	69 40		               adc  #$40
.105d	d8		               cld
.105e	28		               plp
.105f	60		               rts
.1060			lsra4bits
.1060	08		               php
.1061	4a		               lsr
.1062	4a		               lsr
.1063	4a		               lsr
.1064	4a		               lsr
.1065	28		               plp
.1066	60		               rts
.1067			a2hex
.1067	08		               php
.1068	48		               pha
.1069	48		               pha
.106a	20 60 10	               jsr  lsra4bits
.106d	20 54 10	               jsr  nib2hex
.1070	8d 06 10	               sta  a2hexstr
.1073	68		               pla
.1074	20 54 10	               jsr  nib2hex
.1077	8d 07 10	               sta  a2hexstr+1
.107a	a9 00		               lda  #$00                ; set end of string
.107c	8d 08 10	               sta  a2hexstr+2
.107f	68		               pla
.1080	28		               plp
.1081	60		               rts
.1082			xy2hex
.1082	20 4a 0e	               jsr  push
.1085	20 67 10	               jsr  a2hex
.1088	8a		               txa
.1089	48		               pha
.108a	20 60 10	               jsr  lsra4bits
.108d	20 54 10	               jsr  nib2hex
.1090	8d 06 10	               sta  a2hexstr
.1093	68		               pla
.1094	20 54 10	               jsr  nib2hex
.1097	8d 07 10	               sta  a2hexstr+1
.109a	98		               tya
.109b	48		               pha
.109c	20 60 10	               jsr  lsra4bits
.109f	20 54 10	               jsr  nib2hex
.10a2	8d 08 10	               sta  a2hexstr+2
.10a5	68		               pla
.10a6	20 54 10	               jsr  nib2hex
.10a9	8d 09 10	               sta  a2hexstr+3
.10ac	a9 00		               lda  #$00                ; 0 ended string
.10ae	8d 0a 10	               sta  a2hexstr+4
.10b1	20 89 0e	               jsr  pop
.10b4			atobin
.10b4	20 4a 0e	               jsr  push
.10b7	a2 08		               ldx  #8
.10b9	a0 00		               ldy  #0
.10bb	18		               clc
.10bc	2a		nextbit        rol
.10bd	48		               pha
.10be	69 00		               adc  #$00
.10c0	29 01		               and  #$01
.10c2	20 54 10	               jsr  nib2hex
.10c5	99 0b 10	               sta  abin,y
.10c8	68		               pla
.10c9	c8		               iny
.10ca	ca		               dex
.10cb	d0 ef		               bne  nextbit
.10cd	a9 00		               lda  #0
.10cf	99 0b 10	               sta  abin,y
.10d2	20 89 0e	               jsr  pull
.10d5	60		               rts
.10d6			putabin
.10d6	20 b4 10	               jsr     atobin
.10d9	20 4a 0e	               jsr     push
.10dc	a2 0b		               ldx     #<abin
.10de	a0 10		               ldy     #>abin
.10e0	20 59 0d	               jsr     puts
.10e3	20 89 0e	               jsr     pop
.10e6	60		               rts
.10e7			printabin
.10e7	20 4a 0e	               jsr     push
.10ea	a2 0b		               ldx     #<abin
.10ec	a0 10		               ldy     #>abin
.10ee	20 59 0d	               jsr     puts
.10f1	20 89 0e	               jsr     pop
.10f4	60		               rts
.10f5			putabinfmt
.10f5	08		               php
.10f6	48		               pha
.10f7	a9 25		               lda     #"%"
.10f9	20 53 0d	               jsr     putch
.10fc	68		               pla
.10fd	20 d6 10	               jsr     putabin
.1100	28		               plp
.1101	60		               rts
.1102			putabinxy
.1102	20 73 0d	               jsr     gotoxy
.1105	20 d6 10	               jsr     putabin
.1108	60		               rts
.1109			putabinfmtxy
.1109	20 73 0d	               jsr     gotoxy
.110c	20 f5 10	               jsr     putabinfmt
.110f	60		               rts
.1110			atodec
.1110	20 4a 0e	               jsr  push
.1113	f8		               sed
.1114	aa		               tax
.1115	a0 00		               ldy  #$00
.1117	a9 00		               lda  #$00
.1119	18		nextbit        clc
.111a	69 01		               adc  #$01
.111c	90 01		               bcc  decx
.111e	c8		               iny
.111f	ca		decx           dex
.1120	d0 f7		               bne  nextbit
.1122	48		               pha
.1123	98		               tya
.1124	20 54 10	               jsr  nib2hex
.1127	8d 14 10	               sta  adec
.112a	68		               pla
.112b	48		               pha
.112c	20 54 10	               jsr  nib2hex
.112f	8d 16 10	               sta  adec+2
.1132	68		               pla
.1133	6a		               ror
.1134	6a		               ror
.1135	6a		               ror
.1136	6a		               ror
.1137	20 54 10	               jsr  nib2hex
.113a	8d 15 10	               sta  adec+1
.113d	d8		               cld
.113e	20 89 0e	               jsr  pull
.1141	60		               rts
>1142	00 00 00	buffer         .byte     0,0,0
.1145			putadec
.1145	20 4a 0e	               jsr  push
.1148	20 10 11	               jsr  atodec
.114b	a2 14		               ldx  #<adec
.114d	a0 10		               ldy  #>adec+1
.114f	20 59 0d	               jsr  puts
.1152	20 89 0e	               jsr  pop
.1155	60		               rts

;******  Return to file: p039ex28.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1156	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>115a	00 00 00 00 00 00 00 00 00 0d 00 00
>1166	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>116a	00 00 00 00 00 00 00 00 00 00 00 00
>1176	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>117a	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1186	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>118a	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1196	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>119a	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>11a6	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>11aa	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>11b6	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>11ba	00 00 00 00 00 00 00 00 00 00 00 00
>11c6	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>11ca	00 00 00 00 00 00 00 00 00 00 00 00
>11d6	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>11da	00 00 00 00 00 00 00 00 00 00 00 00
>11e6	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>11ea	00 00 00 00 00 00 00 00 00 00 00 00
>11f6	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>11fa	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1206	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>120a	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1216	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>121a	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1226	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>122a	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1236	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>123a	00 00 00 00 00 00 00 00 00 00 00 00
>1246	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>124a	00 00 00 00 00 00 00 00 00 00 00 00
.1256			waitstop
.1256	20 4a 0e	               jsr  push
.1259	20 ed f6	wait           jsr  k_stop
.125c	d0 fb		               bne  wait
.125e	20 89 0e	               jsr  pop
.1261	60		               rts
.1262			anykey
.1262	08		               php
.1263	48		               pha
.1264	a5 cb		nokey          lda 203
.1266	c9 40		               cmp #64
.1268	f0 fa		               beq nokey
.126a	20 70 12	               jsr releasekey
.126d	68		               pla
.126e	28		               plp
.126f	60		               rts
.1270			releasekey
.1270	08		               php
.1271	48		               pha
.1272	a5 cb		keypressed     lda 203
.1274	c9 40		               cmp #64
.1276	d0 fa		               bne keypressed
.1278	68		               pla
.1279	28		               plp
.127a	60		               rts
.127b			getkey
.127b	20 e4 ff	again          jsr  getin
.127e	c9 00		               cmp  #0
.1280	f0 f9		               beq  again
.1282	60		               rts
.1283			kbflushbuff
.1283	08		               php
.1284	48		               pha
.1285	20 e4 ff	again          jsr  getin
.1288	c9 00		               cmp  #0
.128a	d0 f9		               bne  again
.128c	68		               pla
.128d	28		               plp
.128e	60		               rts
.128f			waitkey
.128f	20 4a 0e	               jsr  push
.1292	8d e0 12	               sta  thekey
.1295	20 e4 ff	nope           jsr  getin
.1298	20 d2 ff	               jsr  chrout
.129b	cd e0 12	               cmp  thekey
.129e	d0 f5		               bne  nope
.12a0	20 d2 ff	               jsr  chrout
.12a3	20 89 0e	               jsr  pop
.12a6	60		               rts
.12a7			waitspace
.12a7	20 4a 0e	               jsr  push
.12aa	a9 7f		wait           lda  #$7f  ;%01111111
.12ac	8d 00 dc	               sta  $dc00
.12af	ad 01 dc	               lda  $dc01
.12b2	29 10		               and  #$10  ;mask %00010000
.12b4	d0 f4		               bne  wait
.12b6	20 89 0e	               jsr  pop
.12b9			waitsstop
.12b9	20 4a 0e	               jsr  push
.12bc	20 ed f6	wait           jsr  k_stop  ;%01111111
.12bf	d0 fb		               bne  wait
.12c1	20 89 0e	               jsr  pop
.12c4			waitreturn
.12c4	20 4a 0e	               jsr  push
.12c7	ad e1 12	               lda  thecount
.12ca	8d 00 04	               sta  scrnram
.12cd	a9 02		               lda  #$02
.12cf	8d 00 d8	               sta  colorram
.12d2	20 e4 ff	nope           jsr  getin
.12d5	c9 0d		nohex          cmp  #$0d
.12d7	d0 f9		               bne  nope
.12d9	ee e1 12	               inc  thecount
.12dc	20 89 0e	               jsr  pop
.12df	60		               rts
>12e0	00		thekey         .byte   0
>12e1	01		thecount       .byte   $01

;******  Return to file: p039ex28.asm


;******  End of listing

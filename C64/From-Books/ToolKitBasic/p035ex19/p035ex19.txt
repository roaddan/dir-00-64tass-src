
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p035ex19.txt -o p035ex19.prg p035ex19.asm
; Tue Oct 29 21:04:03 2024

;Offset	;Hex		;Source

;******  Processing input file: p035ex19.asm

="20241029-122533"	           Version = "20241029-122533"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	2a 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 52			.text " *programmation assembleur sue c64*"
>080a	4f 47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45
>081a	4d 42 4c 45 55 52 20 53 55 45 20 43 36 34 2a
>0829	00				.byte $00		;Un zéro pour indiquer la fin de cette
>082a	46 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082c	02 00				.word 2   	;Numero de la ligne Basic.
>082e	8f				.byte $8F		;Le token de la commande REM du Basic
>082f	20 2a 50 41			.text " *par daniel lafrance*"
>0833	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>0843	45 2a
>0845	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0846	51 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0848	03 00				.word 3   	;Numero de la ligne Basic.
>084a	9e				.byte $9e		;Le token de la commande PRINT du Basic
>084b	30 32 31 33			.text format("%05d",hpgmstart)
>084f	31
>0850	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0851	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0853	4c 23 0a	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p035ex19.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p035ex19.asm

.0856			p035ex19
.0856	20 94 0e	          jsr  push           ; Sauvegarde le statut complet.
.0859			again
.0859	48		               pha
.085a	a9 03		               lda  #ccyan
.085c	8d 20 d0	               sta  $d020
.085f	68		               pla
.0860	48		               pha
.0861	a9 01		               lda  #cblanc
.0863	8d 21 d0	               sta  $d021
.0866	68		               pla
.0867	48		               pha
.0868	a9 06		               lda  #cbleu
.086a	8d 86 02	               sta  bascol
.086d	68		               pla
.086e	20 86 0d	          jsr  cls            ; On efface l'écran.
.0871	20 94 0e	               jsr  push
.0874	a2 01		isx            ldx  #<ttext
.0876	a0 09		isy            ldy  #>ttext
.0878	20 a3 0d	               jsr  puts
.087b	20 d3 0e	               jsr  pull
.087e	20 94 0e	               jsr  push
.0881	a2 2d		isx            ldx  #<ptext1a
.0883	a0 09		isy            ldy  #>ptext1a
.0885	20 a3 0d	               jsr  puts
.0888	20 d3 0e	               jsr  pull
.088b	20 0b 0d	          jsr  insub          ; Lit le premier nombre.
.088e	20 ca bb	          jsr  b_f1t57
.0891	20 94 0e	               jsr  push
.0894	a2 4a		isx            ldx  #<ptext2a
.0896	a0 09		isy            ldy  #>ptext2a
.0898	20 a3 0d	               jsr  puts
.089b	20 d3 0e	               jsr  pull
.089e	20 0b 0d	          jsr  insub          ; Lit le premier nombre.
.08a1	a9 57		          lda  #$57
.08a3	a0 00		          ldy  #$00
.08a5	20 8c ba	          jsr  b_memtf2
.08a8	20 e9 af	          jsr  b_fpand
.08ab	20 dd bd	          jsr  b_facasc
.08ae	20 94 0e	               jsr  push
.08b1	a2 db		isx            ldx  #<restxt1
.08b3	a0 09		isy            ldy  #>restxt1
.08b5	20 a3 0d	               jsr  puts
.08b8	20 d3 0e	               jsr  pull
.08bb	20 ed 0c	          jsr  outsub         ; Affiche la valeur finale.
.08be	a9 0d		          lda  #$0d
.08c0	20 d2 ff	          jsr  $ffd2
.08c3	20 94 0e	               jsr  push
.08c6	a2 e3		isx            ldx  #<query
.08c8	a0 08		isy            ldy  #>query
.08ca	20 a3 0d	               jsr  puts
.08cd	20 d3 0e	               jsr  pull
.08d0	20 c5 12	          jsr  getkey
.08d3	29 7f		          and  #$7f
.08d5	c9 4f		          cmp  #'o'
.08d7	d0 03		          bne  out
.08d9	4c 59 08	          jmp again
.08dc	20 af 0a	out       jsr  aide
.08df	20 d3 0e	          jsr  pop            ; Récupère le statut complet.
.08e2	60		          rts
>08e3	9a 20 0d	query     .byte     b_ltblue,b_space,b_crlf
>08e6	20 20 20 d5	          .text     "   Un autre calcul (o/N)?"
>08ea	4e 20 41 55 54 52 45 20 43 41 4c 43 55 4c 20 28
>08fa	4f 2f ce 29 3f
>08ff	0d 00		          .byte     b_crlf,b_eot
>0901	1f 20 12	ttext     .byte     b_blue,b_space,b_rvs_on
>0904	20 20 20 20	          .text      "      P.F. - FAC1 = FAC1 and FAC2     "
>0908	20 20 d0 2e c6 2e 20 2d 20 c6 c1 c3 31 20 3d 20
>0918	c6 c1 c3 31 20 41 4e 44 20 c6 c1 c3 32 20 20 20
>0928	20 20
>092a	92 0d 00	          .byte     b_rvs_off,b_crlf,b_eot
>092d	0d 9c 20	ptext1a   .byte     b_crlf, b_purple, b_space
>0930	20 c5 4e 54	          .text     " Entez la valeur de FAC1"
>0934	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>0944	c6 c1 c3 31
>0948	90 00		          .byte     b_black,b_eot
>094a	0d 9c 20	ptext2a   .byte     b_crlf, b_purple, b_space
>094d	20 c5 4e 54	          .text     " Entez la valeur de FAC2"
>0951	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>0961	c6 c1 c3 32
>0965	90 00		          .byte     b_black,b_eot
>0967	0d 9c 20	ptextva   .byte     b_crlf, b_purple, b_space
>096a	20 c5 4e 54	          .text     " Entez la valeur de FVAR"
>096e	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>097e	c6 d6 c1 d2
>0982	90 00		          .byte     b_black,b_eot
>0984	0d 9c 20	ptext1b   .byte     b_crlf, b_purple, b_space
>0987	20 20 20 20	          .text     "      puis celle de FAC1"
>098b	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>099b	c6 c1 c3 31
>099f	90 00		          .byte     b_black,b_eot
>09a1	0d 9c 20	ptext2b   .byte     b_crlf, b_purple, b_space
>09a4	20 20 20 20	          .text     "      puis celle de FAC2"
>09a8	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>09b8	c6 c1 c3 32
>09bc	90 00		          .byte     b_black,b_eot
>09be	0d 9c 20	ptextvb   .byte     b_crlf, b_purple, b_space
>09c1	20 20 20 20	          .text     "      puis celle de FVAR"
>09c5	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>09d5	c6 d6 c1 d2
>09d9	90 00		          .byte     b_black,b_eot
>09db	1e 0d		restxt1   .byte     b_green,b_crlf
>09dd	20 d2 45 53	          .text    " Resultat dans FAC1="
>09e1	55 4c 54 41 54 20 44 41 4e 53 20 c6 c1 c3 31 3d
>09f1	90 00		          .byte     b_black,b_eot
>09f3	1e 0d		restxt2   .byte     b_green,b_crlf
>09f5	20 d2 45 53	          .text    " Resultat dans FAC2="
>09f9	55 4c 54 41 54 20 44 41 4e 53 20 c6 c1 c3 32 3d
>0a09	90 00		          .byte     b_black,b_eot
>0a0b	1e 0d		restxtv   .byte     b_green,b_crlf
>0a0d	20 d2 45 53	          .text    " Resultat dans FVAR="
>0a11	55 4c 54 41 54 20 44 41 4e 53 20 c6 d6 c1 d2 3d
>0a21	90 00		          .byte     b_black,b_eot
.0a23			main
.0a23	20 66 0d	          jsr       scrmaninit
.0a26	08		               php
.0a27	48		               pha
.0a28	a9 08		               lda  #$08
.0a2a	20 d2 ff	               jsr  $ffd2
.0a2d	68		               pla
.0a2e	28		               plp
.0a2f	48		               pha
.0a30	a9 03		               lda  #ccyan
.0a32	8d 20 d0	               sta  $d020
.0a35	68		               pla
.0a36	48		               pha
.0a37	a9 01		               lda  #cblanc
.0a39	8d 21 d0	               sta  $d021
.0a3c	68		               pla
.0a3d	48		               pha
.0a3e	a9 06		               lda  #cbleu
.0a40	8d 86 02	               sta  bascol
.0a43	68		               pla
.0a44	20 65 0a	          jsr       bookinfo
.0a47	20 2f 0d	          jsr       akey
.0a4a	20 86 0d	          jsr       cls
.0a4d	20 af 0a	          jsr       aide
.0a50	20 2f 0d	          jsr       akey
.0a53	a9 0d		          lda       #b_crlf
.0a55	20 d2 ff	          jsr       $ffd2
.0a58	20 56 08	          jsr       p035ex19
.0a5b	08		               php
.0a5c	48		               pha
.0a5d	a9 09		               lda  #$09
.0a5f	20 d2 ff	               jsr  $ffd2
.0a62	68		               pla
.0a63	28		               plp
.0a64	60		          rts
.0a65			bookinfo
.0a65	20 94 0e	          jsr  push           ; Sauvegarde le statut complet.
.0a68	08		               php
.0a69	48		               pha
.0a6a	a9 0e		               lda  #14
.0a6c	8d 85 0d	               sta  characterset
.0a6f	20 d2 ff	               jsr  $ffd2
.0a72	68		               pla
.0a73	28		               plp
.0a74	20 86 0d	          jsr       cls
.0a77	20 94 0e	               jsr  push
.0a7a	a2 c4		isx            ldx  #<line
.0a7c	a0 0c		isy            ldy  #>line
.0a7e	20 a3 0d	               jsr  puts
.0a81	20 d3 0e	               jsr  pull
.0a84	20 94 0e	               jsr  push
.0a87	a2 ec		isx            ldx  #<headera
.0a89	a0 0a		isy            ldy  #>headera
.0a8b	20 a3 0d	               jsr  puts
.0a8e	20 d3 0e	               jsr  pull
.0a91	20 94 0e	               jsr  push
.0a94	a2 8c		isx            ldx  #<headerb
.0a96	a0 0b		isy            ldy  #>headerb
.0a98	20 a3 0d	               jsr  puts
.0a9b	20 d3 0e	               jsr  pull
.0a9e	20 94 0e	               jsr  push
.0aa1	a2 c4		isx            ldx  #<line
.0aa3	a0 0c		isy            ldy  #>line
.0aa5	20 a3 0d	               jsr  puts
.0aa8	20 d3 0e	               jsr  pull
.0aab	20 d3 0e	          jsr  pop            ; Récupère le statut complet.
.0aae	60		          rts
.0aaf			aide
.0aaf	20 94 0e	          jsr  push           ; Sauvegarde le statut complet.
.0ab2	08		               php
.0ab3	48		               pha
.0ab4	a9 0e		               lda  #14
.0ab6	8d 85 0d	               sta  characterset
.0ab9	20 d2 ff	               jsr  $ffd2
.0abc	68		               pla
.0abd	28		               plp
.0abe	20 86 0d	          jsr       cls
.0ac1	20 94 0e	               jsr  push
.0ac4	a2 2f		isx            ldx  #<shortcuts
.0ac6	a0 0c		isy            ldy  #>shortcuts
.0ac8	20 a3 0d	               jsr  puts
.0acb	20 d3 0e	               jsr  pull
.0ace	20 94 0e	               jsr  push
.0ad1	a2 b0		isx            ldx  #<aidetext
.0ad3	a0 0c		isy            ldy  #>aidetext
.0ad5	20 a3 0d	               jsr  puts
.0ad8	20 d3 0e	               jsr  pull
.0adb	20 94 0e	               jsr  push
.0ade	a2 c4		isx            ldx  #<line
.0ae0	a0 0c		isy            ldy  #>line
.0ae2	20 a3 0d	               jsr  puts
.0ae5	20 d3 0e	               jsr  pull
.0ae8	20 d3 0e	          jsr  pop            ; Récupère le statut complet.
.0aeb	60		          rts
.0aec			headera
>0aec	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>0af0	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>0b00	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>0b10	20 20 2a
>0b13	0d		          .byte     b_crlf
>0b14	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>0b18	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>0b28	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>0b38	20 20 2a
>0b3b	0d		          .byte     b_crlf
>0b3c	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>0b40	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>0b50	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>0b60	20 20 2a
>0b63	0d		          .byte     b_crlf
>0b64	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>0b68	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>0b78	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>0b88	20 20 2a 00
>0b8c	0d		headerb   .byte     $0d
>0b8d	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>0b91	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>0ba1	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>0bb1	20 20 2a
>0bb4	0d		          .byte     $0d
>0bb5	20 2a 20 20	          .text               " *        page 35, exemple #19        *"
>0bb9	20 20 20 20 20 20 50 41 47 45 20 33 35 2c 20 45
>0bc9	58 45 4d 50 4c 45 20 23 31 39 20 20 20 20 20 20
>0bd9	20 20 2a
>0bdc	0d		          .byte     $0d
>0bdd	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0be1	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0bf1	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0c01	20 20 2a
>0c04	0d		          .byte     $0d
>0c05	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0c09	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0c19	34 31 30 32 39 2d 31 32 32 35 33 33 2e 20 20 20
>0c29	20 20 2a 20
>0c2d	90 00		          .byte     b_black,b_eot
>0c2f	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0c32	20 20 20 20	          .text               "       RACCOURCIS DE L'EXEMPLE        "
>0c36	20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4 c5
>0c46	20 cc 27 c5 d8 c5 cd d0 cc c5 20 20 20 20 20 20
>0c56	20 20
>0c58	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0c5b	20 50 30 33	          .text     format(   " p035ex19: SYS %d ($%04X)",p035ex19, p035ex19)
>0c5f	35 45 58 31 39 3a 20 d3 d9 d3 20 32 31 33 34 20
>0c6f	28 24 30 38 35 36 29
>0c76	0d		          .byte     b_crlf
>0c77	20 41 49 44	          .text     format(   " aide....: SYS %d ($%04X)",aide, aide)
>0c7b	45 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 37 33 35 20
>0c8b	28 24 30 c1 c1 c6 29
>0c92	0d		          .byte     b_crlf
>0c93	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04X)",cls, cls)
>0c97	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 34 36 32 20
>0ca7	28 24 30 c4 38 36 29
>0cae	0d 00		          .byte     b_crlf,b_eot
>0cb0	0d 20 1c	aidetext  .byte     b_crlf,b_space,b_red
>0cb3	20 45 58 2e	          .text     format(   " ex.: SYS %d",p035ex19)
>0cb7	3a 20 d3 d9 d3 20 32 31 33 34
>0cc1	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0cc4	20 2d 2d 2d	line      .text               " --------------------------------------"
>0cc8	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0cd8	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0ce8	2d 2d 2d
>0ceb	0d 00		          .byte     b_crlf,b_eot

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/toolkitbasic.asm

.0ced			outsub
.0ced	20 94 0e	          jsr  push           ; Sauvegarde le statut complet.
.0cf0	a0 ff		          ldy  #$ff           ; On détermine
.0cf2	c8		nxtchr    iny                 ;  le nombre de caractères
.0cf3	b9 00 01	          lda  $0100,y        ;  qu'il y a dans la chaine à afficher.
.0cf6	d0 fa		          bne  nxtchr
.0cf8	c8		          iny                 ; On ajoute 1 au nombre trouvé pour compenser
.0cf9	98		          tya                 ;  l'adresse a y=0.
.0cfa	48		          pha                 ; Sauvegarde ce nombre.
.0cfb	a9 00		          lda  #$00           ; On prépare le pointeur $22-$23
.0cfd	85 22		          sta  $22            ;  en le peuplant avec
.0cff	a9 01		          lda  #$01           ;  l'adresse ou se trouve la chaine
.0d01	85 23		          sta  $23            ;  à afficher.
.0d03	68		          pla                 ; On ramène le nombre de caractères.
.0d04	20 24 ab	          jsr  b_strout       ; On affiche.
.0d07	20 d3 0e	          jsr  pop            ; Récupère le statut complet.
.0d0a	60		          rts
.0d0b			insub
.0d0b	20 94 0e	          jsr  push           ; Sauvegarde le statut complet.
.0d0e	20 cd 12	          jsr  kbflushbuff
.0d11	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.0d14	a9 00		          lda  #$00           ; On efface le basic input buffer
.0d16	a0 59		          ldy  #$59           ;  situé à $200 long de 89 bytes ($59)
.0d18	99 00 02	clear     sta  b_inpbuff,y    ;  en plaçant des $00 partout
.0d1b	88		          dey                 ;  et ce jusqu'au
.0d1c	d0 fa		          bne  clear          ;  dernier.
.0d1e	20 f9 ab	          jsr  b_prompt       ; Affiche un "?" et attend une entrée.
.0d21	86 7a		          stx  $7a            ; X et Y pointe sur $01ff au retour.
.0d23	84 7b		          sty  $7b
.0d25	20 73 00	          jsr  b_chrget       ; Lecture du buffer.
.0d28	20 f3 bc	          jsr  b_ascflt       ; Conversion la chaine ascii en 200 en float.
.0d2b	20 d3 0e	          jsr  pop            ; Récupère le statut complet.
.0d2e	60		          rts
.0d2f			akey
.0d2f	20 94 0e	               jsr  push
.0d32	a2 40		isx            ldx  #<kmsg
.0d34	a0 0d		isy            ldy  #>kmsg
.0d36	20 a3 0d	               jsr  puts
.0d39	20 d3 0e	               jsr  pull
.0d3c	20 ac 12	          jsr  anykey
.0d3f	60		          rts
>0d40	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>0d44	d5 4e 45 20	          .text               "Une clef pour continuer!"
>0d48	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0d58	55 45 52 21
>0d5c	90 00		          .byte b_black,b_eot
.0d5e			kmsgend

;******  Return to file: p035ex19.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0d5e	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0d62	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0d66			libtart

;******  Return to file: p035ex19.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p035ex19.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p035ex19.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0d66			scrmaninit
.0d66	20 94 0e	               jsr  push
.0d69	a9 06		               lda  #vbleu
.0d6b	8d 21 d0	               sta  vicbackcol
.0d6e	a9 05		               lda  #vvert
.0d70	8d 20 d0	               sta  vicbordcol
.0d73	a9 01		               lda  #vblanc
.0d75	8d 86 02	               sta  bascol
.0d78	ad 00 04	               lda  scrnram
.0d7b	8d 00 04	               sta  scrnram
.0d7e	20 86 0d	               jsr  cls
.0d81	20 d3 0e	               jsr  pop
.0d84	60		               rts
>0d85	8e		characterset   .byte b_uppercase
.0d86			cls
.0d86	08		               php
.0d87	48		               pha
.0d88	a9 93		               lda  #$93
.0d8a	20 9d 0d	               jsr  putch
.0d8d	68		               pla
.0d8e	28		               plp
.0d8f	60		               rts
.0d90			putnch
.0d90	08		               php
.0d91	e0 00		               cpx  #$00
.0d93	f0 06		               beq  out
.0d95	20 d2 ff	again          jsr  $ffd2
.0d98	ca		               dex
.0d99	d0 fa		               bne  again
.0d9b	28		out            plp
.0d9c	60		               rts
.0d9d			putch
.0d9d	08		               php
.0d9e	20 d2 ff	               jsr  $ffd2
.0da1	28		               plp
.0da2	60		               rts
.0da3			puts
.0da3	20 94 0e	               jsr  push
.0da6	86 fb		               stx  zpage1
.0da8	84 fc		               sty  zpage1+1
.0daa	a0 00		               ldy  #0
.0dac	b1 fb		next           lda  (zpage1),y
.0dae	f0 09		               beq  exit
.0db0	20 9d 0d	               jsr  putch
.0db3	20 9b 0f	               jsr  inczp1
.0db6	4c ac 0d	               jmp  next
.0db9	20 d3 0e	exit           jsr  pop
.0dbc	60		               rts
.0dbd			gotoxy
.0dbd	08		               php
.0dbe	18		               clc
.0dbf	8a		               txa
.0dc0	48		               pha
.0dc1	98		               tya
.0dc2	aa		               tax
.0dc3	68		               pla
.0dc4	a8		               tay
.0dc5	20 f0 ff	               jsr  kplot
.0dc8	28		               plp
.0dc9	60		               rts
.0dca			cursor
=$0286			bascol    =    $0286
.0dca	08		               php
.0dcb	48		               pha
.0dcc	90 12		               bcc  restore
.0dce	20 f0 ff	               jsr  kplot
.0dd1	8c f2 0d	               sty  cx
.0dd4	8e f3 0d	               stx  cy
.0dd7	ad 86 02	               lda  bascol
.0dda	8d f4 0d	               sta  bcol
.0ddd	4c ef 0d	               jmp  out
.0de0	ae f3 0d	restore        ldx  cy
.0de3	ac f2 0d	               ldy  cx
.0de6	20 f0 ff	               jsr  kplot
.0de9	ad f4 0d	               lda  bcol
.0dec	8d 86 02	               sta  bascol
.0def	68		out            pla
.0df0	28		               plp
.0df1	60		               rts
>0df2	00		cx   .byte     $00
>0df3	00		cy   .byte     $00
>0df4	00		bcol .byte     $00
.0df5			cursave
.0df5	08		               php
.0df6	38		               sec
.0df7	20 ca 0d	               jsr  cursor
.0dfa	28		               plp
.0dfb	60		               rts
.0dfc			curput
.0dfc	08		               php
.0dfd	18		               clc
.0dfe	20 ca 0d	               jsr  cursor
.0e01	28		               plp
.0e02	60		               rts
.0e03			putsxy
.0e03	20 94 0e	               jsr  push
.0e06	86 fb		               stx  zpage1
.0e08	84 fc		               sty  zpage1+1
.0e0a	a0 00		               ldy  #$00
.0e0c	b1 fb		               lda  (zpage1),y
.0e0e	aa		               tax
.0e0f	20 9b 0f	               jsr  inczp1
.0e12	b1 fb		               lda  (zpage1),y
.0e14	a8		               tay
.0e15	20 bd 0d	               jsr  gotoxy
.0e18	20 9b 0f	               jsr  inczp1
.0e1b	a6 fb		               ldx  zpage1
.0e1d	a4 fc		               ldy  zpage1+1
.0e1f	20 a3 0d	               jsr  puts
.0e22	20 d3 0e	               jsr  pop
.0e25	60		               rts
>0e26	00 00		straddr   .word     $00
>0e28	00		px        .byte     $00
>0e29	00		py        .byte     $00
>0e2a	00 00		zp1       .word     $00
.0e2c			putscxy
.0e2c	20 94 0e	               jsr  push
.0e2f	84 fc		               sty  zpage1+1
.0e31	86 fb		               stx  zpage1
.0e33	ad 86 02	               lda  bascol
.0e36	8d 56 0e	               sta  bc
.0e39	a0 00		               ldy #$00
.0e3b	b1 fb		               lda  (zpage1),y
.0e3d	8d 86 02	               sta  bascol
.0e40	20 9b 0f	               jsr  inczp1
.0e43	a6 fb		               ldx  zpage1
.0e45	a4 fc		               ldy  zpage1+1
.0e47	20 03 0e	               jsr  putsxy
.0e4a	ad 56 0e	               lda  bc
.0e4d	8d 86 02	               sta  bascol
.0e50	20 d3 0e	               jsr  pop
.0e53	60		               rts
>0e54	00 00		straddr  .word      $00
>0e56	00		bc       .byte      $00
>0e57	00 00		zp1      .word      $00
.0e59			putrahex
.0e59	08		               php
.0e5a	48		               pha
.0e5b	20 b1 10	               jsr  a2hex
.0e5e	a9 50		               lda  #<a2hexstr
.0e60	a0 10		               ldy  #>a2hexstr
.0e62	20 a3 0d	               jsr  puts
.0e65	68		               pla
.0e66	28		               plp
.0e67	60		               rts
.0e68			kputrahexxy
.0e68			bputrahexxy
.0e68			putrahexxy
.0e68	08		               php
.0e69	20 b1 10	               jsr  a2hex
.0e6c	a9 4d		               lda  #<a2hexpos
.0e6e	a0 10		               ldy  #>a2hexpos
.0e70	20 03 0e	               jsr  putsxy
.0e73	68		               pla
.0e74	28		               plp
.0e75	60		               rts
.0e76			putrahexcxy
.0e76	08		               php
.0e77	20 b1 10	               jsr  a2hex
.0e7a	a9 4d		               lda  #<a2hexpos
.0e7c	a0 10		               ldy  #>a2hexpos
.0e7e	20 2c 0e	               jsr  putscxy
.0e81	68		               pla
.0e82	28		               plp
.0e83	60		               rts
.0e84			setinverse
.0e84	48		               pha
.0e85	a9 12		               lda  #$12
.0e87	20 d2 ff	               jsr  $ffd2
.0e8a	68		               pla
.0e8b	60		               rts
.0e8c			clrinverse
.0e8c	48		               pha
.0e8d	a9 92		               lda  #$92
.0e8f	20 d2 ff	               jsr  $ffd2
.0e92	68		               pla
.0e93	60		               rts

;******  Return to file: p035ex19.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0e94			push
.0e94	08		          php            ; stack : flg, pcl, pch
.0e95	78		          sei
.0e96	8d d0 0e	          sta  ra        ; save a
.0e99	68		          pla            ; stack : pcl, pch
.0e9a	8d cf 0e	          sta  rp        ; save rp
.0e9d	68		          pla            ; stack : pch
.0e9e	8d d1 0e	          sta  pc        ; save pcl
.0ea1	68		          pla            ; stack : -
.0ea2	8d d2 0e	          sta  pc+1      ; save pch
.0ea5	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0ea7	48		          pha            ; stack : zp1l
.0ea8	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0eaa	48		          pha            ; stack : zp1h, zp1l
.0eab	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0ead	48		          pha            ; stack : zp2l, zp1h, zp1l
.0eae	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0eb0	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0eb1	ad cf 0e	          lda  rp        ; get rp
.0eb4	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0eb5	ad d0 0e	          lda  ra        ; get a
.0eb8	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0eb9	8a		          txa            ; get x
.0eba	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ebb	98		          tya            ; get y
.0ebc	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ebd	ad d2 0e	          lda  pc+1      ; get pch
.0ec0	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec1	ad d1 0e	          lda  pc        ; get pcl
.0ec4	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec5	ad cf 0e	          lda  rp        ; get rp
.0ec8	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec9	ad d0 0e	          lda  ra        ; get a
.0ecc	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ecd	58		          cli
.0ece	60		          rts
>0ecf	00		rp        .byte     0
>0ed0	00		ra        .byte     0
>0ed1	00 00		pc        .word     0
.0ed3			pull
.0ed3			pop
.0ed3	78		          sei
.0ed4	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed5	8d 08 0f	          sta  pc        ; save pcl
.0ed8	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed9	8d 09 0f	          sta  pc+1      ; save pch
.0edc	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0edd	a8		          tay            ; set y
.0ede	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0edf	aa		          tax            ; set x
.0ee0	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0ee1	8d 07 0f	          sta  ra        ; save a
.0ee4	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0ee5	8d 06 0f	          sta  rp        ; save rp
.0ee8	68		          pla            ; stack : zp2l, zp1h, zp1l
.0ee9	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0eeb	68		          pla            ; stack : zp1h, zp1l
.0eec	85 fd		          sta  zpage2    ; get zpage2 High byte
.0eee	68		          pla            ; stack : zp1l
.0eef	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0ef1	68		          pla            ; stack :
.0ef2	85 fb		          sta  zpage1    ; get zpage1 High byte
.0ef4	ad 09 0f	          lda  pc+1      ; get pch
.0ef7	48		          pha            ; stack : pch
.0ef8	ad 08 0f	          lda  pc
.0efb	48		          pha            ; stack : pcl, pch
.0efc	ad 06 0f	          lda  rp        ; get rp
.0eff	48		          pha            ; stack : rp, pcl, pch
.0f00	ad 07 0f	          lda  ra        ; set ra
.0f03	58		          cli
.0f04	28		          plp            ; stack : pcl, pch
.0f05	60		          rts
>0f06	00		rp        .byte     0
>0f07	00		ra        .byte     0
>0f08	00 00		pc        .word     0

;******  Return to file: p035ex19.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0f0a			blkfill
.0f0a	20 94 0e	bf0            jsr  push
.0f0d	20 cb 0f	               jsr  savezp1
.0f10	84 fc		               sty  zpage1+1
.0f12	a0 00		               ldy  #$00
.0f14	84 fb		               sty  zpage1
.0f16	91 fb		bf1            sta  (zpage1),y
.0f18	c8		               iny
.0f19	d0 fb		               bne  bf1
.0f1b	20 da 0f	               jsr  restzp1
.0f1e	20 d3 0e	               jsr  pop
.0f21	60		               rts
.0f22			memfill
.0f22	20 94 0e	               jsr  push
.0f25	20 0a 0f	mf1            jsr  blkfill
.0f28	c8		               iny
.0f29	ca		               dex
.0f2a	d0 f9		               bne  mf1
.0f2c	20 d3 0e	               jsr  pop
.0f2f	60		               rts
.0f30			memmove
.0f30	20 94 0e	               jsr  push
.0f33	ba		               tsx            ; On se crée un pointeur ...
.0f34	8a		               txa
.0f35	18		               clc
.0f36	69 0b		               adc  #11
.0f38	a8		               tay
.0f39	a2 06		               ldx  #$06
.0f3b	b9 00 01	nextbyte       lda  $0100,y
.0f3e	99 8a 0f	               sta  words,y
.0f41	c8		               iny
.0f42	ca		               dex
.0f43	d0 f6		               bne  nextbyte
.0f45	ad 8a 0f	               lda  s
.0f48	8d 61 0f	               sta  source+1
.0f4b	ad 8b 0f	               lda  s+1
.0f4e	8d 62 0f	               sta  source+2
.0f51	ad 8c 0f	               lda  d
.0f54	8d 5e 0f	               sta  destin+1
.0f57	ad 8d 0f	               lda  d+1
.0f5a	8d 5f 0f	               sta  destin+2
.0f5d	ad ff ff	destin         lda  $ffff
.0f60	8d ff ff	source         sta  $ffff
.0f63	ee 5e 0f	               inc  destin+1
.0f66	d0 03		               bne  src
.0f68	ee 5f 0f	               inc  destin+2
.0f6b	ee 61 0f	src            inc  source+1
.0f6e	d0 03		               bne  cnt
.0f70	ee 62 0f	               inc  source+2
.0f73	ad 8e 0f	cnt            lda  compte
.0f76	d0 08		               bne  decit
.0f78	ad 8f 0f	               lda  compte+1
.0f7b	f0 09		               beq  fini
.0f7d	ce 8f 0f	               dec  compte+1
.0f80	ce 8e 0f	decit          dec  compte
.0f83	4c 5d 0f	               jmp  destin
.0f86	20 d3 0e	fini           jsr  pop
.0f89	60		               rts
.0f8a			words
>0f8a	00 00		s         .word     $0000
>0f8c	00 00		d         .word     $0000
>0f8e	00 00		compte    .word     $0000
.0f90			decword
.0f90	20 94 0e	               jsr  push
.0f93	86 fd		               stx  zpage2
.0f95	84 fe		               sty  zpage2+1
.0f97	20 d3 0e	               jsr  pop
.0f9a	60		               rts
.0f9b			inczp1
.0f9b	08		               php
.0f9c	48		               pha
.0f9d	e6 fb		               inc  zpage1
.0f9f	a5 fb		               lda  zpage1
.0fa1	d0 02		               bne  nopage
.0fa3	e6 fc		               inc  zpage1+1
.0fa5	68		nopage         pla
.0fa6	28		               plp
.0fa7	60		               rts
.0fa8			deczp1
.0fa8	08		                php
.0fa9	48		                pha
.0faa	c6 fb		                dec  zpage1
.0fac	d0 02		                bne  nopage
.0fae	c6 fc		                dec  zpage1+1
.0fb0	68		nopage          pla
.0fb1	28		                plp
.0fb2	60		                rts
.0fb3			inczp2
.0fb3	08		               php
.0fb4	48		               pha
.0fb5	e6 fd		               inc  zpage2
.0fb7	a5 fd		               lda  zpage2
.0fb9	d0 02		               bne  nopage
.0fbb	e6 fe		               inc  zpage2+1
.0fbd	68		nopage         pla
.0fbe	28		               plp
.0fbf	60		               rts
.0fc0			deczp2
.0fc0	08		               php
.0fc1	48		               pha
.0fc2	a5 fd		               lda  zpage2
.0fc4	d0 02		               bne  nopage
.0fc6	c6 fe		               dec  zpage2+1
.0fc8	68		nopage         pla
.0fc9	28		               plp
.0fca	60		               rts
.0fcb			savezp1
.0fcb	08		               php
.0fcc	48		               pha
.0fcd	a5 fb		               lda  zpage1
.0fcf	8d 47 10	               sta  zp1
.0fd2	a5 fc		               lda  zpage1+1
.0fd4	8d 48 10	               sta  zp1+1
.0fd7	68		               pla
.0fd8	28		               plp
.0fd9	60		               rts
.0fda			restzp1
.0fda	08		               php
.0fdb	48		               pha
.0fdc	ad 47 10	               lda zp1
.0fdf	85 fb		               sta zpage1
.0fe1	ad 48 10	               lda zp1+1
.0fe4	85 fc		               sta zpage1+1
.0fe6	68		               pla
.0fe7	28		               plp
.0fe8	60		               rts
.0fe9			savezp2
.0fe9	08		         php
.0fea	48		         pha
.0feb	a5 fd		         lda zpage2
.0fed	8d 49 10	         sta zp2
.0ff0	a5 fe		         lda zpage2+1
.0ff2	8d 4a 10	         sta zp2+1
.0ff5	68		         pla
.0ff6	28		         plp
.0ff7	60		         rts
.0ff8			restzp2
.0ff8	08		                php
.0ff9	48		                pha
.0ffa	ad 49 10	                lda  zp2
.0ffd	85 fd		                sta  zpage2
.0fff	ad 4a 10	                lda  zp2+1
.1002	85 fe		                sta  zpage2+1
.1004	68		                pla
.1005	28		                plp
.1006	60		                rts
.1007			xy2addr
.1007	08		                php
.1008	48		                pha
.1009	8a		                txa
.100a	48		                pha
.100b	98		                tya
.100c	48		                pha
.100d	ad 42 10	                lda     addr1+1
.1010	8d 44 10	                sta     addr2+1
.1013	ad 41 10	                lda     addr1
.1016	8d 43 10	                sta     addr2
.1019	c0 00		                cpy     #$00
.101b	f0 0f		                beq     addx
.101d	18		moreline        clc
.101e	6d 40 10	                adc     ymult
.1021	90 03		                bcc     norepy
.1023	ee 44 10	                inc     addr2+1
.1026	8d 43 10	norepy          sta     addr2
.1029	88		                dey
.102a	d0 f1		                bne     moreline
.102c	8a		addx            txa
.102d	18		                clc
.102e	6d 43 10	                adc     addr2
.1031	90 03		                bcc     thatsit
.1033	ee 44 10	                inc     addr2+1
.1036	8d 43 10	thatsit         sta     addr2
.1039	68		                pla
.103a	a8		                tay
.103b	68		                pla
.103c	aa		                tax
.103d	68		                pla
.103e	28		                plp
.103f	60		                rts
>1040	28		ymult          .byte     40
>1041	00 00		addr1          .word     $0000
>1043	00 00		addr2          .word     $0000
>1045	00 00		bytecnt        .word     $0000
>1047	00 00		zp1        .word   $0000
>1049	00 00		zp2        .word   $0000

;******  Return to file: p035ex19.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>104b	01		a2hexcol       .byte     1              ; pour aputscxy
>104c	00		a2hexbkcol     .byte     %00000000
.104d			a2hexpos
>104d	00		a2hexpx        .byte     0              ; pour aputsxy
>104e	00		a2hexpy        .byte     0
>104f	24		a2hexprefix    .byte     "$"            ; pour aputs
>1050	00 00		a2hexstr       .word     $00
>1052	00 00		               .word     $00
>1054	00		               .byte     0              ; 0 end string
>1055	30 30 30 30	abin           .null     "00000000"
>1059	30 30 30 30 00
>105e	20 20 20 00	adec           .null     "   "
.1062			putahexfmtxy
.1062	20 94 0e	               jsr  push
.1065	20 b1 10	               jsr  a2hex
.1068	ae 4d 10	               ldx  a2hexpx
.106b	ac 4e 10	               ldy  a2hexpy
.106e	20 bd 0d	               jsr  gotoxy
.1071	a2 4f		               ldx  #<a2hexprefix
.1073	a0 10		               ldy  #>a2hexprefix
.1075	20 a3 0d	               jsr  puts
.1078	20 d3 0e	               jsr  pop
.107b	60		               rts
.107c			putahexfmt
.107c	20 94 0e	               jsr  push
.107f	20 b1 10	               jsr  a2hex
.1082	a2 4f		               ldx  #<a2hexprefix
.1084	a0 10		               ldy  #>a2hexprefix
.1086	20 a3 0d	               jsr  puts
.1089	20 d3 0e	               jsr  pop
.108c	60		               rts
.108d			putahex
.108d	20 94 0e	               jsr  push
.1090	20 b1 10	               jsr  a2hex
.1093	a2 50		               ldx  #<a2hexstr
.1095	a0 10		               ldy  #>a2hexstr
.1097	20 a3 0d	               jsr  puts
.109a	20 d3 0e	               jsr  pop
.109d	60		               rts
.109e			nib2hex
.109e	08		               php
.109f	29 0f		               and  #$0f
.10a1	f8		               sed
.10a2	18		               clc
.10a3	69 90		               adc  #$90
.10a5	69 40		               adc  #$40
.10a7	d8		               cld
.10a8	28		               plp
.10a9	60		               rts
.10aa			lsra4bits
.10aa	08		               php
.10ab	4a		               lsr
.10ac	4a		               lsr
.10ad	4a		               lsr
.10ae	4a		               lsr
.10af	28		               plp
.10b0	60		               rts
.10b1			a2hex
.10b1	08		               php
.10b2	48		               pha
.10b3	48		               pha
.10b4	20 aa 10	               jsr  lsra4bits
.10b7	20 9e 10	               jsr  nib2hex
.10ba	8d 50 10	               sta  a2hexstr
.10bd	68		               pla
.10be	20 9e 10	               jsr  nib2hex
.10c1	8d 51 10	               sta  a2hexstr+1
.10c4	a9 00		               lda  #$00                ; set end of string
.10c6	8d 52 10	               sta  a2hexstr+2
.10c9	68		               pla
.10ca	28		               plp
.10cb	60		               rts
.10cc			xy2hex
.10cc	20 94 0e	               jsr  push
.10cf	20 b1 10	               jsr  a2hex
.10d2	8a		               txa
.10d3	48		               pha
.10d4	20 aa 10	               jsr  lsra4bits
.10d7	20 9e 10	               jsr  nib2hex
.10da	8d 50 10	               sta  a2hexstr
.10dd	68		               pla
.10de	20 9e 10	               jsr  nib2hex
.10e1	8d 51 10	               sta  a2hexstr+1
.10e4	98		               tya
.10e5	48		               pha
.10e6	20 aa 10	               jsr  lsra4bits
.10e9	20 9e 10	               jsr  nib2hex
.10ec	8d 52 10	               sta  a2hexstr+2
.10ef	68		               pla
.10f0	20 9e 10	               jsr  nib2hex
.10f3	8d 53 10	               sta  a2hexstr+3
.10f6	a9 00		               lda  #$00                ; 0 ended string
.10f8	8d 54 10	               sta  a2hexstr+4
.10fb	20 d3 0e	               jsr  pop
.10fe			atobin
.10fe	20 94 0e	               jsr  push
.1101	a2 08		               ldx  #8
.1103	a0 00		               ldy  #0
.1105	18		               clc
.1106	2a		nextbit        rol
.1107	48		               pha
.1108	69 00		               adc  #$00
.110a	29 01		               and  #$01
.110c	20 9e 10	               jsr  nib2hex
.110f	99 55 10	               sta  abin,y
.1112	68		               pla
.1113	c8		               iny
.1114	ca		               dex
.1115	d0 ef		               bne  nextbit
.1117	a9 00		               lda  #0
.1119	99 55 10	               sta  abin,y
.111c	20 d3 0e	               jsr  pull
.111f	60		               rts
.1120			putabin
.1120	20 fe 10	               jsr     atobin
.1123	20 94 0e	               jsr     push
.1126	a2 55		               ldx     #<abin
.1128	a0 10		               ldy     #>abin
.112a	20 a3 0d	               jsr     puts
.112d	20 d3 0e	               jsr     pop
.1130	60		               rts
.1131			printabin
.1131	20 94 0e	               jsr     push
.1134	a2 55		               ldx     #<abin
.1136	a0 10		               ldy     #>abin
.1138	20 a3 0d	               jsr     puts
.113b	20 d3 0e	               jsr     pop
.113e	60		               rts
.113f			putabinfmt
.113f	08		               php
.1140	48		               pha
.1141	a9 25		               lda     #"%"
.1143	20 9d 0d	               jsr     putch
.1146	68		               pla
.1147	20 20 11	               jsr     putabin
.114a	28		               plp
.114b	60		               rts
.114c			putabinxy
.114c	20 bd 0d	               jsr     gotoxy
.114f	20 20 11	               jsr     putabin
.1152	60		               rts
.1153			putabinfmtxy
.1153	20 bd 0d	               jsr     gotoxy
.1156	20 3f 11	               jsr     putabinfmt
.1159	60		               rts
.115a			atodec
.115a	20 94 0e	               jsr  push
.115d	f8		               sed
.115e	aa		               tax
.115f	a0 00		               ldy  #$00
.1161	a9 00		               lda  #$00
.1163	18		nextbit        clc
.1164	69 01		               adc  #$01
.1166	90 01		               bcc  decx
.1168	c8		               iny
.1169	ca		decx           dex
.116a	d0 f7		               bne  nextbit
.116c	48		               pha
.116d	98		               tya
.116e	20 9e 10	               jsr  nib2hex
.1171	8d 5e 10	               sta  adec
.1174	68		               pla
.1175	48		               pha
.1176	20 9e 10	               jsr  nib2hex
.1179	8d 60 10	               sta  adec+2
.117c	68		               pla
.117d	6a		               ror
.117e	6a		               ror
.117f	6a		               ror
.1180	6a		               ror
.1181	20 9e 10	               jsr  nib2hex
.1184	8d 5f 10	               sta  adec+1
.1187	d8		               cld
.1188	20 d3 0e	               jsr  pull
.118b	60		               rts
>118c	00 00 00	buffer         .byte     0,0,0
.118f			putadec
.118f	20 94 0e	               jsr  push
.1192	20 5a 11	               jsr  atodec
.1195	a2 5e		               ldx  #<adec
.1197	a0 10		               ldy  #>adec+1
.1199	20 a3 0d	               jsr  puts
.119c	20 d3 0e	               jsr  pop
.119f	60		               rts

;******  Return to file: p035ex19.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>11a0	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>11a4	00 00 00 00 00 00 00 00 00 0d 00 00
>11b0	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>11b4	00 00 00 00 00 00 00 00 00 00 00 00
>11c0	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>11c4	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>11d0	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>11d4	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>11e0	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>11e4	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>11f0	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>11f4	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1200	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1204	00 00 00 00 00 00 00 00 00 00 00 00
>1210	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1214	00 00 00 00 00 00 00 00 00 00 00 00
>1220	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1224	00 00 00 00 00 00 00 00 00 00 00 00
>1230	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1234	00 00 00 00 00 00 00 00 00 00 00 00
>1240	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1244	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1250	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1254	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1260	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1264	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1270	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1274	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1280	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1284	00 00 00 00 00 00 00 00 00 00 00 00
>1290	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1294	00 00 00 00 00 00 00 00 00 00 00 00
.12a0			waitstop
.12a0	20 94 0e	               jsr  push
.12a3	20 ed f6	wait           jsr  k_stop
.12a6	d0 fb		               bne  wait
.12a8	20 d3 0e	               jsr  pop
.12ab	60		               rts
.12ac			anykey
.12ac	08		               php
.12ad	48		               pha
.12ae	a5 cb		nokey          lda 203
.12b0	c9 40		               cmp #64
.12b2	f0 fa		               beq nokey
.12b4	20 ba 12	               jsr releasekey
.12b7	68		               pla
.12b8	28		               plp
.12b9	60		               rts
.12ba			releasekey
.12ba	08		               php
.12bb	48		               pha
.12bc	a5 cb		keypressed     lda 203
.12be	c9 40		               cmp #64
.12c0	d0 fa		               bne keypressed
.12c2	68		               pla
.12c3	28		               plp
.12c4	60		               rts
.12c5			getkey
.12c5	20 e4 ff	again          jsr  getin
.12c8	c9 00		               cmp  #0
.12ca	f0 f9		               beq  again
.12cc	60		               rts
.12cd			kbflushbuff
.12cd	08		               php
.12ce	48		               pha
.12cf	20 e4 ff	again          jsr  getin
.12d2	c9 00		               cmp  #0
.12d4	d0 f9		               bne  again
.12d6	68		               pla
.12d7	28		               plp
.12d8	60		               rts
.12d9			waitkey
.12d9	20 94 0e	               jsr  push
.12dc	8d 2a 13	               sta  thekey
.12df	20 e4 ff	nope           jsr  getin
.12e2	20 d2 ff	               jsr  chrout
.12e5	cd 2a 13	               cmp  thekey
.12e8	d0 f5		               bne  nope
.12ea	20 d2 ff	               jsr  chrout
.12ed	20 d3 0e	               jsr  pop
.12f0	60		               rts
.12f1			waitspace
.12f1	20 94 0e	               jsr  push
.12f4	a9 7f		wait           lda  #$7f  ;%01111111
.12f6	8d 00 dc	               sta  $dc00
.12f9	ad 01 dc	               lda  $dc01
.12fc	29 10		               and  #$10  ;mask %00010000
.12fe	d0 f4		               bne  wait
.1300	20 d3 0e	               jsr  pop
.1303			waitsstop
.1303	20 94 0e	               jsr  push
.1306	20 ed f6	wait           jsr  k_stop  ;%01111111
.1309	d0 fb		               bne  wait
.130b	20 d3 0e	               jsr  pop
.130e			waitreturn
.130e	20 94 0e	               jsr  push
.1311	ad 2b 13	               lda  thecount
.1314	8d 00 04	               sta  scrnram
.1317	a9 02		               lda  #$02
.1319	8d 00 d8	               sta  colorram
.131c	20 e4 ff	nope           jsr  getin
.131f	c9 0d		nohex          cmp  #$0d
.1321	d0 f9		               bne  nope
.1323	ee 2b 13	               inc  thecount
.1326	20 d3 0e	               jsr  pop
.1329	60		               rts
>132a	00		thekey         .byte   0
>132b	01		thecount       .byte   $01

;******  Return to file: p035ex19.asm


;******  End of listing

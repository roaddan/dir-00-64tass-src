
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p031ex09.txt -o p031ex09.prg p031ex09.asm
; Tue Oct 29 00:57:13 2024

;Offset	;Hex		;Source

;******  Processing input file: p031ex09.asm

="20241028-220400"	           Version = "20241028-220400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	2a 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 52			.text " *programmation assembleur sue c64*"
>080a	4f 47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45
>081a	4d 42 4c 45 55 52 20 53 55 45 20 43 36 34 2a
>0829	00				.byte $00		;Un zéro pour indiquer la fin de cette
>082a	46 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082c	02 00				.word 2   	;Numero de la ligne Basic.
>082e	8f				.byte $8F		;Le token de la commande REM du Basic
>082f	20 2a 50 41			.text " *par daniel lafrance*"
>0833	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>0843	45 2a
>0845	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0846	51 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0848	03 00				.word 3   	;Numero de la ligne Basic.
>084a	9e				.byte $9e		;Le token de la commande PRINT du Basic
>084b	30 32 31 33			.text format("%05d",hpgmstart)
>084f	31
>0850	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0851	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0853	4c 90 09	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p031ex09.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p031ex09.asm

.0856			p031ex09
.0856	20 4e 0f	          jsr  push           ; Sauvegarde le statut complet.
.0859	48		               pha
.085a	a9 03		               lda  #ccyan
.085c	8d 20 d0	               sta  $d020
.085f	68		               pla
.0860	48		               pha
.0861	a9 01		               lda  #cblanc
.0863	8d 21 d0	               sta  $d021
.0866	68		               pla
.0867	48		               pha
.0868	a9 06		               lda  #cbleu
.086a	8d 86 02	               sta  bascol
.086d	68		               pla
.086e	20 82 0c	          jsr  cls            ; On efface l'écran.
.0871	20 4e 0f	               jsr  push
.0874	a2 ba		isx            ldx  #<ttext
.0876	a0 08		isy            ldy  #>ttext
.0878	20 9f 0c	               jsr  puts
.087b	20 8d 0f	               jsr  pull
.087e	20 4e 0f	               jsr  push
.0881	a2 e5		isx            ldx  #<ptext1
.0883	a0 08		isy            ldy  #>ptext1
.0885	20 9f 0c	               jsr  puts
.0888	20 8d 0f	               jsr  pull
.088b	20 3d 09	          jsr  insub          ; Lit le premier nombre.
.088e	20 2b bc	          jsr  b_sgnf1
.0891	48		          pha
.0892	20 fe ba	          jsr  b_f1d10
.0895	68		          pla
.0896	aa		          tax
.0897	e8		          inx
.0898	d0 04		          bne  noneg
.089a	a9 80		          lda  #$80
.089c	85 66		          sta  $66
.089e	20 dd bd	noneg     jsr  b_facasc       ; Converti le résultat en ascii à $0100.
.08a1	20 4e 0f	               jsr  push
.08a4	a2 01		isx            ldx  #<restxt
.08a6	a0 09		isy            ldy  #>restxt
.08a8	20 9f 0c	               jsr  puts
.08ab	20 8d 0f	               jsr  pull
.08ae	20 1f 09	          jsr  outsub         ; Affiche la valeur finale.
.08b1	a9 0d		          lda  #$0d
.08b3	20 d2 ff	          jsr  $ffd2
.08b6	20 8d 0f	          jsr  pop            ; Récupère le statut complet.
.08b9	60		          rts
>08ba	1f 20 12	ttext     .byte     b_blue,b_space,b_rvs_on
>08bd	20 20 d0 2e	          .text     "  P. FLOTTANT /10 - SIGNE CONSERVE   "
>08c1	20 c6 cc cf d4 d4 c1 ce d4 20 2f 31 30 20 2d 20
>08d1	d3 c9 c7 ce c5 20 c3 cf ce d3 c5 d2 d6 c5 20 20
>08e1	20
>08e2	92 0d 00	          .byte     b_rvs_off,b_crlf,b_eot
>08e5	0d 9c 20	ptext1    .byte     b_crlf, b_purple, b_space
>08e8	c5 4e 54 45	          .text     "Entez un nombre negatif"
>08ec	5a 20 55 4e 20 4e 4f 4d 42 52 45 20 4e 45 47 41
>08fc	54 49 46
>08ff	90 00		          .byte     b_black,b_eot
>0901	1e 0d		restxt    .byte     b_green,b_crlf
>0903	20 d6 4f 49	          .text    " Voici le resultat......: "
>0907	43 49 20 4c 45 20 52 45 53 55 4c 54 41 54 2e 2e
>0917	2e 2e 2e 2e 3a 20
>091d	90 00		          .byte     b_black,b_eot
.091f			outsub
.091f	20 4e 0f	          jsr  push           ; Sauvegarde le statut complet.
.0922	a0 ff		          ldy  #$ff           ; On détermine
.0924	c8		nxtchr    iny                 ;  le nombre de caractères
.0925	b9 00 01	          lda  $0100,y        ;  qu'il y a dans la chaine à afficher.
.0928	d0 fa		          bne  nxtchr
.092a	c8		          iny                 ; On ajoute 1 au nombre trouvé pour compenser
.092b	98		          tya                 ;  l'adresse a y=0.
.092c	48		          pha                 ; Sauvegarde ce nombre.
.092d	a9 00		          lda  #$00           ; On prépare le pointeur $22-$23
.092f	85 22		          sta  $22            ;  en le peuplant avec
.0931	a9 01		          lda  #$01           ;  l'adresse ou se trouve la chaine
.0933	85 23		          sta  $23            ;  à afficher.
.0935	68		          pla                 ; On ramène le nombre de caractères.
.0936	20 24 ab	          jsr  b_strout       ; On affiche.
.0939	20 8d 0f	          jsr  pop            ; Récupère le statut complet.
.093c	60		          rts
.093d			insub
.093d	20 4e 0f	          jsr  push           ; Sauvegarde le statut complet.
.0940	20 87 13	          jsr  kbflushbuff
.0943	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.0946	a9 00		          lda  #$00           ; On efface le basic input buffer
.0948	a0 59		          ldy  #$59           ;  situé à $200 long de 89 bytes ($59)
.094a	99 00 02	clear     sta  b_inpbuff,y    ;  en plaçant des $00 partout
.094d	88		          dey                 ;  et ce jusqu'au
.094e	d0 fa		          bne  clear          ;  dernier.
.0950	20 f9 ab	          jsr  b_prompt       ; Affiche un "?" et attend une entrée.
.0953	86 7a		          stx  $7a            ; X et Y pointe sur $01ff au retour.
.0955	84 7b		          sty  $7b
.0957	20 73 00	          jsr  b_chrget       ; Lecture du buffer.
.095a	20 f3 bc	          jsr  b_ascflt       ; Conversion la chaine ascii en 200 en float.
.095d	20 8d 0f	          jsr  pop            ; Récupère le statut complet.
.0960	60		          rts
.0961			akey
.0961	a9 72		          lda  #<kmsg
.0963	85 22		          sta  $22
.0965	a9 09		          lda  #>kmsg
.0967	85 23		          sta  $23
.0969	a9 1e		          lda  #kmsgend-kmsg
.096b	20 24 ab	          jsr  b_strout
.096e	20 66 13	          jsr  anykey
.0971	60		          rts
>0972	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>0976	d5 4e 45 20	          .text               "Une clef pour continuer!"
>097a	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>098a	55 45 52 21
>098e	90 00		          .byte b_black,b_eot
.0990			kmsgend
.0990			main
.0990	20 62 0c	          jsr       scrmaninit
.0993	08		               php
.0994	48		               pha
.0995	a9 08		               lda  #$08
.0997	20 d2 ff	               jsr  $ffd2
.099a	68		               pla
.099b	28		               plp
.099c	48		               pha
.099d	a9 03		               lda  #ccyan
.099f	8d 20 d0	               sta  $d020
.09a2	68		               pla
.09a3	48		               pha
.09a4	a9 01		               lda  #cblanc
.09a6	8d 21 d0	               sta  $d021
.09a9	68		               pla
.09aa	48		               pha
.09ab	a9 06		               lda  #cbleu
.09ad	8d 86 02	               sta  bascol
.09b0	68		               pla
.09b1	20 d2 09	          jsr       bookinfo
.09b4	20 61 09	          jsr       akey
.09b7	20 82 0c	          jsr       cls
.09ba	20 1c 0a	          jsr       help
.09bd	20 61 09	          jsr       akey
.09c0	a9 0d		          lda       #b_crlf
.09c2	20 d2 ff	          jsr       $ffd2
.09c5	20 56 08	          jsr       p031ex09
.09c8	08		               php
.09c9	48		               pha
.09ca	a9 09		               lda  #$09
.09cc	20 d2 ff	               jsr  $ffd2
.09cf	68		               pla
.09d0	28		               plp
.09d1	60		          rts
.09d2			bookinfo
.09d2	20 4e 0f	          jsr  push           ; Sauvegarde le statut complet.
.09d5	08		               php
.09d6	48		               pha
.09d7	a9 0e		               lda  #14
.09d9	8d 81 0c	               sta  characterset
.09dc	20 d2 ff	               jsr  $ffd2
.09df	68		               pla
.09e0	28		               plp
.09e1	20 82 0c	          jsr       cls
.09e4	20 4e 0f	               jsr  push
.09e7	a2 31		isx            ldx  #<line
.09e9	a0 0c		isy            ldy  #>line
.09eb	20 9f 0c	               jsr  puts
.09ee	20 8d 0f	               jsr  pull
.09f1	20 4e 0f	               jsr  push
.09f4	a2 59		isx            ldx  #<headera
.09f6	a0 0a		isy            ldy  #>headera
.09f8	20 9f 0c	               jsr  puts
.09fb	20 8d 0f	               jsr  pull
.09fe	20 4e 0f	               jsr  push
.0a01	a2 f9		isx            ldx  #<headerb
.0a03	a0 0a		isy            ldy  #>headerb
.0a05	20 9f 0c	               jsr  puts
.0a08	20 8d 0f	               jsr  pull
.0a0b	20 4e 0f	               jsr  push
.0a0e	a2 31		isx            ldx  #<line
.0a10	a0 0c		isy            ldy  #>line
.0a12	20 9f 0c	               jsr  puts
.0a15	20 8d 0f	               jsr  pull
.0a18	20 8d 0f	          jsr  pop            ; Récupère le statut complet.
.0a1b	60		          rts
.0a1c			help
.0a1c	20 4e 0f	          jsr  push           ; Sauvegarde le statut complet.
.0a1f	08		               php
.0a20	48		               pha
.0a21	a9 0e		               lda  #14
.0a23	8d 81 0c	               sta  characterset
.0a26	20 d2 ff	               jsr  $ffd2
.0a29	68		               pla
.0a2a	28		               plp
.0a2b	20 82 0c	          jsr       cls
.0a2e	20 4e 0f	               jsr  push
.0a31	a2 9c		isx            ldx  #<shortcuts
.0a33	a0 0b		isy            ldy  #>shortcuts
.0a35	20 9f 0c	               jsr  puts
.0a38	20 8d 0f	               jsr  pull
.0a3b	20 4e 0f	               jsr  push
.0a3e	a2 1d		isx            ldx  #<helptext
.0a40	a0 0c		isy            ldy  #>helptext
.0a42	20 9f 0c	               jsr  puts
.0a45	20 8d 0f	               jsr  pull
.0a48	20 4e 0f	               jsr  push
.0a4b	a2 31		isx            ldx  #<line
.0a4d	a0 0c		isy            ldy  #>line
.0a4f	20 9f 0c	               jsr  puts
.0a52	20 8d 0f	               jsr  pull
.0a55	20 8d 0f	          jsr  pop            ; Récupère le statut complet.
.0a58	60		          rts
.0a59			headera
>0a59	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>0a5d	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>0a6d	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>0a7d	20 20 2a
>0a80	0d		          .byte     b_crlf
>0a81	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>0a85	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>0a95	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>0aa5	20 20 2a
>0aa8	0d		          .byte     b_crlf
>0aa9	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>0aad	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>0abd	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>0acd	20 20 2a
>0ad0	0d		          .byte     b_crlf
>0ad1	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>0ad5	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>0ae5	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>0af5	20 20 2a 00
>0af9	0d		headerb   .byte     $0d
>0afa	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>0afe	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>0b0e	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>0b1e	20 20 2a
>0b21	0d		          .byte     $0d
>0b22	20 2a 20 20	          .text               " *         page 31, exemple #9        *"
>0b26	20 20 20 20 20 20 20 50 41 47 45 20 33 31 2c 20
>0b36	45 58 45 4d 50 4c 45 20 23 39 20 20 20 20 20 20
>0b46	20 20 2a
>0b49	0d		          .byte     $0d
>0b4a	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0b4e	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0b5e	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0b6e	20 20 2a
>0b71	0d		          .byte     $0d
>0b72	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0b76	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0b86	34 31 30 32 38 2d 32 32 30 34 30 30 2e 20 20 20
>0b96	20 20 2a 20
>0b9a	90 00		          .byte     b_black,b_eot
>0b9c	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0b9f	20 20 20 20	          .text               "       RACCOURCIS DE L'EXEMPLE        "
>0ba3	20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4 c5
>0bb3	20 cc 27 c5 d8 c5 cd d0 cc c5 20 20 20 20 20 20
>0bc3	20 20
>0bc5	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0bc8	20 50 30 33	          .text     format(   " p031ex09: SYS %d ($%04X)",p031ex09, p031ex09)
>0bcc	31 45 58 30 39 3a 20 d3 d9 d3 20 32 31 33 34 20
>0bdc	28 24 30 38 35 36 29
>0be3	0d		          .byte     b_crlf
>0be4	20 41 49 44	          .text     format(   " aide....: SYS %d ($%04X)",help, help)
>0be8	45 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 35 38 38 20
>0bf8	28 24 30 c1 31 c3 29
>0bff	0d		          .byte     b_crlf
>0c00	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04X)",cls, cls)
>0c04	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 32 30 32 20
>0c14	28 24 30 c3 38 32 29
>0c1b	0d 00		          .byte     b_crlf,b_eot
>0c1d	0d 20 1c	helptext  .byte     b_crlf,b_space,b_red
>0c20	20 45 58 2e	          .text     format(   " ex.: SYS %d",p031ex09)
>0c24	3a 20 d3 d9 d3 20 32 31 33 34
>0c2e	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0c31	20 2d 2d 2d	line      .text               " --------------------------------------"
>0c35	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0c45	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0c55	2d 2d 2d
>0c58	0d 00		          .byte     b_crlf,b_eot

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0c5a	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0c5e	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0c62			libtart

;******  Return to file: p031ex09.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p031ex09.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p031ex09.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0c62			scrmaninit
.0c62	20 4e 0f	               jsr  push
.0c65	a9 06		               lda  #vbleu
.0c67	8d 21 d0	               sta  vicbackcol
.0c6a	a9 05		               lda  #vvert
.0c6c	8d 20 d0	               sta  vicbordcol
.0c6f	a9 01		               lda  #vblanc
.0c71	8d 86 02	               sta  bascol
.0c74	ad 00 04	               lda  scrnram
.0c77	8d 00 04	               sta  scrnram
.0c7a	20 82 0c	               jsr  cls
.0c7d	20 8d 0f	               jsr  pop
.0c80	60		               rts
>0c81	8e		characterset   .byte b_uppercase
.0c82			cls
.0c82	08		               php
.0c83	48		               pha
.0c84	a9 93		               lda  #$93
.0c86	20 99 0c	               jsr  putch
.0c89	68		               pla
.0c8a	28		               plp
.0c8b	60		               rts
.0c8c			putnch
.0c8c	08		               php
.0c8d	e0 00		               cpx  #$00
.0c8f	f0 06		               beq  out
.0c91	20 d2 ff	again          jsr  $ffd2
.0c94	ca		               dex
.0c95	d0 fa		               bne  again
.0c97	28		out            plp
.0c98	60		               rts
.0c99			putch
.0c99	08		               php
.0c9a	20 d2 ff	               jsr  $ffd2
.0c9d	28		               plp
.0c9e	60		               rts
.0c9f			puts
.0c9f	20 4e 0f	               jsr  push
.0ca2	86 fb		               stx  zpage1
.0ca4	84 fc		               sty  zpage1+1
.0ca6	a0 00		               ldy  #0
.0ca8	b1 fb		next           lda  (zpage1),y
.0caa	f0 09		               beq  exit
.0cac	20 99 0c	               jsr  putch
.0caf	20 55 10	               jsr  inczp1
.0cb2	4c a8 0c	               jmp  next
.0cb5	20 8d 0f	exit           jsr  pop
.0cb8	60		               rts
.0cb9			gotoxy
.0cb9	08		               php
.0cba	18		               clc
.0cbb	8a		               txa
.0cbc	48		               pha
.0cbd	98		               tya
.0cbe	aa		               tax
.0cbf	68		               pla
.0cc0	a8		               tay
.0cc1	20 f0 ff	               jsr  kplot
.0cc4	28		               plp
.0cc5	60		               rts
.0cc6			cursor
=$0286			bascol    =    $0286
.0cc6	08		               php
.0cc7	48		               pha
.0cc8	90 12		               bcc  restore
.0cca	20 f0 ff	               jsr  kplot
.0ccd	8c ee 0c	               sty  cx
.0cd0	8e ef 0c	               stx  cy
.0cd3	ad 86 02	               lda  bascol
.0cd6	8d f0 0c	               sta  bcol
.0cd9	4c eb 0c	               jmp  out
.0cdc	ae ef 0c	restore        ldx  cy
.0cdf	ac ee 0c	               ldy  cx
.0ce2	20 f0 ff	               jsr  kplot
.0ce5	ad f0 0c	               lda  bcol
.0ce8	8d 86 02	               sta  bascol
.0ceb	68		out            pla
.0cec	28		               plp
.0ced	60		               rts
>0cee	00		cx   .byte     $00
>0cef	00		cy   .byte     $00
>0cf0	00		bcol .byte     $00
.0cf1			cursave
.0cf1	08		               php
.0cf2	38		               sec
.0cf3	20 c6 0c	               jsr  cursor
.0cf6	28		               plp
.0cf7	60		               rts
.0cf8			curput
.0cf8	08		               php
.0cf9	18		               clc
.0cfa	20 c6 0c	               jsr  cursor
.0cfd	28		               plp
.0cfe	60		               rts
.0cff			putsxy
.0cff	20 4e 0f	               jsr  push
.0d02	86 fb		               stx  zpage1
.0d04	84 fc		               sty  zpage1+1
.0d06	a0 00		               ldy  #$00
.0d08	b1 fb		               lda  (zpage1),y
.0d0a	aa		               tax
.0d0b	20 55 10	               jsr  inczp1
.0d0e	b1 fb		               lda  (zpage1),y
.0d10	a8		               tay
.0d11	20 b9 0c	               jsr  gotoxy
.0d14	20 55 10	               jsr  inczp1
.0d17	a6 fb		               ldx  zpage1
.0d19	a4 fc		               ldy  zpage1+1
.0d1b	20 9f 0c	               jsr  puts
.0d1e	20 8d 0f	               jsr  pop
.0d21	60		               rts
>0d22	00 00		straddr   .word     $00
>0d24	00		px        .byte     $00
>0d25	00		py        .byte     $00
>0d26	00 00		zp1       .word     $00
.0d28			putscxy
.0d28	20 4e 0f	               jsr  push
.0d2b	84 fc		               sty  zpage1+1
.0d2d	86 fb		               stx  zpage1
.0d2f	ad 86 02	               lda  bascol
.0d32	8d 52 0d	               sta  bc
.0d35	a0 00		               ldy #$00
.0d37	b1 fb		               lda  (zpage1),y
.0d39	8d 86 02	               sta  bascol
.0d3c	20 55 10	               jsr  inczp1
.0d3f	a6 fb		               ldx  zpage1
.0d41	a4 fc		               ldy  zpage1+1
.0d43	20 ff 0c	               jsr  putsxy
.0d46	ad 52 0d	               lda  bc
.0d49	8d 86 02	               sta  bascol
.0d4c	20 8d 0f	               jsr  pop
.0d4f	60		               rts
>0d50	00 00		straddr  .word      $00
>0d52	00		bc       .byte      $00
>0d53	00 00		zp1      .word      $00
.0d55			putrahex
.0d55	08		               php
.0d56	48		               pha
.0d57	20 6b 11	               jsr  a2hex
.0d5a	a9 0a		               lda  #<a2hexstr
.0d5c	a0 11		               ldy  #>a2hexstr
.0d5e	20 9f 0c	               jsr  puts
.0d61	68		               pla
.0d62	28		               plp
.0d63	60		               rts
.0d64			kputrahexxy
.0d64			bputrahexxy
.0d64			putrahexxy
.0d64	08		               php
.0d65	20 6b 11	               jsr  a2hex
.0d68	a9 07		               lda  #<a2hexpos
.0d6a	a0 11		               ldy  #>a2hexpos
.0d6c	20 ff 0c	               jsr  putsxy
.0d6f	68		               pla
.0d70	28		               plp
.0d71	60		               rts
.0d72			putrahexcxy
.0d72	08		               php
.0d73	20 6b 11	               jsr  a2hex
.0d76	a9 07		               lda  #<a2hexpos
.0d78	a0 11		               ldy  #>a2hexpos
.0d7a	20 28 0d	               jsr  putscxy
.0d7d	68		               pla
.0d7e	28		               plp
.0d7f	60		               rts
.0d80			setinverse
.0d80	48		               pha
.0d81	a9 12		               lda  #$12
.0d83	20 d2 ff	               jsr  $ffd2
.0d86	68		               pla
.0d87	60		               rts
.0d88			clrinverse
.0d88	48		               pha
.0d89	a9 92		               lda  #$92
.0d8b	20 d2 ff	               jsr  $ffd2
.0d8e	68		               pla
.0d8f	60		               rts

;******  Return to file: p031ex09.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.0d90			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.0d90	08		                php
.0d91	8d 42 0f	                sta  rega
.0d94	68		                pla
.0d95	8d 45 0f	                sta  regp
.0d98	8e 43 0f	                stx  regx
.0d9b	8c 44 0f	                sty  regy
.0d9e	ba		                tsx
.0d9f	8e 46 0f	                stx  regs
.0da2	68		                pla
.0da3	8d 48 0f	                sta  regpcl
.0da6	8d 49 0f	                sta  regpcl2
.0da9	68		                pla
.0daa	8d 47 0f	                sta  regpch
.0dad	ad 42 0f	                lda  rega
.0db0	48		                pha
.0db1	20 58 11	                jsr  nib2hex
.0db4	8d e5 0e	                sta  vala+1
.0db7	68		                pla
.0db8	20 64 11	                jsr  lsra4bits
.0dbb	20 58 11	                jsr  nib2hex
.0dbe	8d e4 0e	                sta  vala
.0dc1	ad 44 0f	                lda  regy
.0dc4	48		                pha
.0dc5	20 58 11	                jsr  nib2hex
.0dc8	8d fb 0e	                sta  valy+1
.0dcb	68		                pla
.0dcc	20 64 11	                jsr  lsra4bits
.0dcf	20 58 11	                jsr  nib2hex
.0dd2	8d fa 0e	                sta  valy
.0dd5	ad 43 0f	                lda  regx
.0dd8	48		                pha
.0dd9	20 58 11	                jsr  nib2hex
.0ddc	8d f0 0e	                sta  valx+1
.0ddf	68		                pla
.0de0	20 64 11	                jsr  lsra4bits
.0de3	20 58 11	                jsr  nib2hex
.0de6	8d ef 0e	                sta  valx
.0de9	ad 45 0f	                lda  regp
.0dec	48		                pha
.0ded	20 58 11	                jsr  nib2hex
.0df0	8d 06 0f	                sta  valp+1
.0df3	68		                pla
.0df4	20 64 11	                jsr  lsra4bits
.0df7	20 58 11	                jsr  nib2hex
.0dfa	8d 05 0f	                sta  valp
.0dfd	ad 46 0f	                lda  regs
.0e00	48		                pha
.0e01	20 58 11	                jsr  nib2hex
.0e04	8d 11 0f	                sta  vals+1
.0e07	68		                pla
.0e08	20 64 11	                jsr  lsra4bits
.0e0b	20 58 11	                jsr  nib2hex
.0e0e	8d 10 0f	                sta  vals
.0e11	ad 47 0f	                lda  regpch
.0e14	48		                pha
.0e15	20 58 11	                jsr  nib2hex
.0e18	8d 1d 0f	                sta  valpch+1
.0e1b	68		                pla
.0e1c	20 64 11	                jsr  lsra4bits
.0e1f	20 58 11	                jsr  nib2hex
.0e22	8d 1c 0f	                sta  valpch
.0e25	ad 48 0f	                lda  regpcl
.0e28	48		                pha
.0e29	20 58 11	                jsr  nib2hex
.0e2c	8d 1f 0f	                sta  valpcl+1
.0e2f	68		                pla
.0e30	20 64 11	                jsr  lsra4bits
.0e33	20 58 11	                jsr  nib2hex
.0e36	8d 1e 0f	                sta  valpcl
.0e39	a5 fb		                lda  zpage1
.0e3b	48		                pha
.0e3c	20 58 11	                jsr  nib2hex
.0e3f	8d 2e 0f	                sta  valz1l
.0e42	68		                pla
.0e43	20 64 11	                jsr  lsra4bits
.0e46	20 58 11	                jsr  nib2hex
.0e49	8d 2f 0f	                sta  valz1l+1
.0e4c	a5 fc		                lda  zpage1+1
.0e4e	48		                pha
.0e4f	20 58 11	                jsr  nib2hex
.0e52	8d 2c 0f	                sta  valz1h
.0e55	68		                pla
.0e56	20 64 11	                jsr  lsra4bits
.0e59	20 58 11	                jsr  nib2hex
.0e5c	8d 2d 0f	                sta  valz1h+1
.0e5f	a5 fd		                lda  zpage2
.0e61	48		                pha
.0e62	20 58 11	                jsr  nib2hex
.0e65	8d 3e 0f	                sta  valz2l
.0e68	68		                pla
.0e69	20 64 11	                jsr  lsra4bits
.0e6c	20 58 11	                jsr  nib2hex
.0e6f	8d 3f 0f	                sta  valz2l+1
.0e72	a5 fe		                lda  zpage2+1
.0e74	48		                pha
.0e75	20 58 11	                jsr  nib2hex
.0e78	8d 3c 0f	                sta  valz2h
.0e7b	68		                pla
.0e7c	20 64 11	                jsr  lsra4bits
.0e7f	20 58 11	                jsr  nib2hex
.0e82	8d 3d 0f	                sta  valz2h+1
.0e85	20 80 0d	                jsr  setinverse
.0e88	78		                sei
.0e89	a2 dc		                ldx  #<srega
.0e8b	a0 0e		                ldy  #>srega+1
.0e8d	20 28 0d	                jsr  putscxy
.0e90	a2 e7		                ldx  #<sregx
.0e92	a0 0e		                ldy  #>sregx+1
.0e94	20 28 0d	                jsr  putscxy
.0e97	a2 f2		                ldx  #<sregy
.0e99	a0 0e		                ldy  #>sregy+1
.0e9b	20 28 0d	                jsr  putscxy
.0e9e	a2 fd		                ldx  #<sregp
.0ea0	a0 0e		                ldy  #>sregp+1
.0ea2	20 28 0d	                jsr  putscxy
.0ea5	a2 08		                ldx  #<sregs
.0ea7	a0 0f		                ldy  #>sregs+1
.0ea9	20 28 0d	                jsr  putscxy
.0eac	a2 13		                ldx  #<sregpc
.0eae	a0 0f		                ldy  #>sregpc+1
.0eb0	20 28 0d	                jsr  putscxy
.0eb3	a2 22		                ldx  #<sregz1
.0eb5	a0 0f		                ldy  #>sregz1+1
.0eb7	20 28 0d	                jsr  putscxy
.0eba	a2 32		                ldx  #<sregz2
.0ebc	a0 0f		                ldy  #>sregz2+1
.0ebe	20 28 0d	                jsr  putscxy
.0ec1	58		                cli
.0ec2	20 88 0d	                jsr  clrinverse
.0ec5	ad 47 0f	                lda  regpch
.0ec8	48		                pha
.0ec9	ad 48 0f	                lda  regpcl
.0ecc	48		                pha
.0ecd	ac 44 0f	                ldy  regy
.0ed0	ae 43 0f	                ldx  regx
.0ed3	ad 45 0f	                lda  regp
.0ed6	48		                pha
.0ed7	ad 42 0f	                lda  rega
.0eda	28		                plp
.0edb	60		                rts
>0edc	01 00 00 17	srega   .byte   colr,bkcol,coln,line
>0ee0	20 41 3a 24	        .text   ' a:$' ;4,24
>0ee4	00 00 00	vala    .byte   0,0,0
>0ee7	01 00 06 17	sregx   .byte   colr,bkcol,coln+6,line
>0eeb	20 58 3a 24	        .text   ' x:$' ;4,24
>0eef	00 00 00	valx    .byte   0,0,0
>0ef2	01 00 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>0ef6	20 59 3a 24	        .text   ' y:$' ;4,24
>0efa	00 00 00	valy    .byte   0,0,0
>0efd	01 00 12 17	sregp   .byte   colr,bkcol,coln+18,line
>0f01	20 50 3a 24	        .text   ' p:$' ;4,24
>0f05	00 00 00	valp    .byte   0,0,0
>0f08	01 00 18 17	sregs   .byte   colr,bkcol,coln+24,line
>0f0c	20 53 3a 24	        .text   ' s:$' ;4,24
>0f10	00 00 00	vals    .byte   0,0,0
>0f13	01 00 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>0f17	20 50 43 3a	        .text   ' pc:$' ;4,24
>0f1b	24
>0f1c	00 00		valpch  .byte   0,0
>0f1e	00 00 20 00	valpcl  .byte   0,0,32,0
>0f22	01 00 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>0f26	20 5a 50 31	        .text   ' zp1:$' ;4,24
>0f2a	3a 24
>0f2c	00 00		valz1h  .byte   0,0
>0f2e	00 00 20 00	valz1l  .byte   0,0,32,0
>0f32	01 00 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>0f36	20 5a 50 32	        .text   ' zp2:$' ;4,24
>0f3a	3a 24
>0f3c	00 00		valz2h  .byte   0,0
>0f3e	00 00 20 00	valz2l  .byte   0,0,32,0
>0f42	00		rega    .byte   0
>0f43	00		regx    .byte   0
>0f44	00		regy    .byte   0
>0f45	00		regp    .byte   0
>0f46	00		regs    .byte   0
>0f47	00		regpch  .byte   0
>0f48	00		regpcl  .byte   0
>0f49	00		regpcl2 .byte   0
>0f4a	00		vzp1h   .byte   0
>0f4b	00		vzp1l   .byte   0
>0f4c	00		vzp2h   .byte   0
>0f4d	00		vzp2l   .byte   0

;******  Return to file: p031ex09.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0f4e			push
.0f4e	08		          php            ; stack : flg, pcl, pch
.0f4f	78		          sei
.0f50	8d 8a 0f	          sta  ra        ; save a
.0f53	68		          pla            ; stack : pcl, pch
.0f54	8d 89 0f	          sta  rp        ; save rp
.0f57	68		          pla            ; stack : pch
.0f58	8d 8b 0f	          sta  pc        ; save pcl
.0f5b	68		          pla            ; stack : -
.0f5c	8d 8c 0f	          sta  pc+1      ; save pch
.0f5f	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0f61	48		          pha            ; stack : zp1l
.0f62	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0f64	48		          pha            ; stack : zp1h, zp1l
.0f65	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0f67	48		          pha            ; stack : zp2l, zp1h, zp1l
.0f68	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0f6a	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0f6b	ad 89 0f	          lda  rp        ; get rp
.0f6e	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0f6f	ad 8a 0f	          lda  ra        ; get a
.0f72	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f73	8a		          txa            ; get x
.0f74	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f75	98		          tya            ; get y
.0f76	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f77	ad 8c 0f	          lda  pc+1      ; get pch
.0f7a	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f7b	ad 8b 0f	          lda  pc        ; get pcl
.0f7e	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f7f	ad 89 0f	          lda  rp        ; get rp
.0f82	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f83	ad 8a 0f	          lda  ra        ; get a
.0f86	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f87	58		          cli
.0f88	60		          rts
>0f89	00		rp        .byte     0
>0f8a	00		ra        .byte     0
>0f8b	00 00		pc        .word     0
.0f8d			pull
.0f8d			pop
.0f8d	78		          sei
.0f8e	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f8f	8d c2 0f	          sta  pc        ; save pcl
.0f92	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f93	8d c3 0f	          sta  pc+1      ; save pch
.0f96	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f97	a8		          tay            ; set y
.0f98	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f99	aa		          tax            ; set x
.0f9a	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0f9b	8d c1 0f	          sta  ra        ; save a
.0f9e	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0f9f	8d c0 0f	          sta  rp        ; save rp
.0fa2	68		          pla            ; stack : zp2l, zp1h, zp1l
.0fa3	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0fa5	68		          pla            ; stack : zp1h, zp1l
.0fa6	85 fd		          sta  zpage2    ; get zpage2 High byte
.0fa8	68		          pla            ; stack : zp1l
.0fa9	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0fab	68		          pla            ; stack :
.0fac	85 fb		          sta  zpage1    ; get zpage1 High byte
.0fae	ad c3 0f	          lda  pc+1      ; get pch
.0fb1	48		          pha            ; stack : pch
.0fb2	ad c2 0f	          lda  pc
.0fb5	48		          pha            ; stack : pcl, pch
.0fb6	ad c0 0f	          lda  rp        ; get rp
.0fb9	48		          pha            ; stack : rp, pcl, pch
.0fba	ad c1 0f	          lda  ra        ; set ra
.0fbd	58		          cli
.0fbe	28		          plp            ; stack : pcl, pch
.0fbf	60		          rts
>0fc0	00		rp        .byte     0
>0fc1	00		ra        .byte     0
>0fc2	00 00		pc        .word     0

;******  Return to file: p031ex09.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0fc4			blkfill
.0fc4	20 4e 0f	bf0            jsr  push
.0fc7	20 85 10	               jsr  savezp1
.0fca	84 fc		               sty  zpage1+1
.0fcc	a0 00		               ldy  #$00
.0fce	84 fb		               sty  zpage1
.0fd0	91 fb		bf1            sta  (zpage1),y
.0fd2	c8		               iny
.0fd3	d0 fb		               bne  bf1
.0fd5	20 94 10	               jsr  restzp1
.0fd8	20 8d 0f	               jsr  pop
.0fdb	60		               rts
.0fdc			memfill
.0fdc	20 4e 0f	               jsr  push
.0fdf	20 c4 0f	mf1            jsr  blkfill
.0fe2	c8		               iny
.0fe3	ca		               dex
.0fe4	d0 f9		               bne  mf1
.0fe6	20 8d 0f	               jsr  pop
.0fe9	60		               rts
.0fea			memmove
.0fea	20 4e 0f	               jsr  push
.0fed	ba		               tsx            ; On se crée un pointeur ...
.0fee	8a		               txa
.0fef	18		               clc
.0ff0	69 0b		               adc  #11
.0ff2	a8		               tay
.0ff3	a2 06		               ldx  #$06
.0ff5	b9 00 01	nextbyte       lda  $0100,y
.0ff8	99 44 10	               sta  words,y
.0ffb	c8		               iny
.0ffc	ca		               dex
.0ffd	d0 f6		               bne  nextbyte
.0fff	ad 44 10	               lda  s
.1002	8d 1b 10	               sta  source+1
.1005	ad 45 10	               lda  s+1
.1008	8d 1c 10	               sta  source+2
.100b	ad 46 10	               lda  d
.100e	8d 18 10	               sta  destin+1
.1011	ad 47 10	               lda  d+1
.1014	8d 19 10	               sta  destin+2
.1017	ad ff ff	destin         lda  $ffff
.101a	8d ff ff	source         sta  $ffff
.101d	ee 18 10	               inc  destin+1
.1020	d0 03		               bne  src
.1022	ee 19 10	               inc  destin+2
.1025	ee 1b 10	src            inc  source+1
.1028	d0 03		               bne  cnt
.102a	ee 1c 10	               inc  source+2
.102d	ad 48 10	cnt            lda  compte
.1030	d0 08		               bne  decit
.1032	ad 49 10	               lda  compte+1
.1035	f0 09		               beq  fini
.1037	ce 49 10	               dec  compte+1
.103a	ce 48 10	decit          dec  compte
.103d	4c 17 10	               jmp  destin
.1040	20 8d 0f	fini           jsr  pop
.1043	60		               rts
.1044			words
>1044	00 00		s         .word     $0000
>1046	00 00		d         .word     $0000
>1048	00 00		compte    .word     $0000
.104a			decword
.104a	20 4e 0f	               jsr  push
.104d	86 fd		               stx  zpage2
.104f	84 fe		               sty  zpage2+1
.1051	20 8d 0f	               jsr  pop
.1054	60		               rts
.1055			inczp1
.1055	08		               php
.1056	48		               pha
.1057	e6 fb		               inc  zpage1
.1059	a5 fb		               lda  zpage1
.105b	d0 02		               bne  nopage
.105d	e6 fc		               inc  zpage1+1
.105f	68		nopage         pla
.1060	28		               plp
.1061	60		               rts
.1062			deczp1
.1062	08		                php
.1063	48		                pha
.1064	c6 fb		                dec  zpage1
.1066	d0 02		                bne  nopage
.1068	c6 fc		                dec  zpage1+1
.106a	68		nopage          pla
.106b	28		                plp
.106c	60		                rts
.106d			inczp2
.106d	08		               php
.106e	48		               pha
.106f	e6 fd		               inc  zpage2
.1071	a5 fd		               lda  zpage2
.1073	d0 02		               bne  nopage
.1075	e6 fe		               inc  zpage2+1
.1077	68		nopage         pla
.1078	28		               plp
.1079	60		               rts
.107a			deczp2
.107a	08		               php
.107b	48		               pha
.107c	a5 fd		               lda  zpage2
.107e	d0 02		               bne  nopage
.1080	c6 fe		               dec  zpage2+1
.1082	68		nopage         pla
.1083	28		               plp
.1084	60		               rts
.1085			savezp1
.1085	08		               php
.1086	48		               pha
.1087	a5 fb		               lda  zpage1
.1089	8d 01 11	               sta  zp1
.108c	a5 fc		               lda  zpage1+1
.108e	8d 02 11	               sta  zp1+1
.1091	68		               pla
.1092	28		               plp
.1093	60		               rts
.1094			restzp1
.1094	08		               php
.1095	48		               pha
.1096	ad 01 11	               lda zp1
.1099	85 fb		               sta zpage1
.109b	ad 02 11	               lda zp1+1
.109e	85 fc		               sta zpage1+1
.10a0	68		               pla
.10a1	28		               plp
.10a2	60		               rts
.10a3			savezp2
.10a3	08		         php
.10a4	48		         pha
.10a5	a5 fd		         lda zpage2
.10a7	8d 03 11	         sta zp2
.10aa	a5 fe		         lda zpage2+1
.10ac	8d 04 11	         sta zp2+1
.10af	68		         pla
.10b0	28		         plp
.10b1	60		         rts
.10b2			restzp2
.10b2	08		                php
.10b3	48		                pha
.10b4	ad 03 11	                lda  zp2
.10b7	85 fd		                sta  zpage2
.10b9	ad 04 11	                lda  zp2+1
.10bc	85 fe		                sta  zpage2+1
.10be	68		                pla
.10bf	28		                plp
.10c0	60		                rts
.10c1			xy2addr
.10c1	08		                php
.10c2	48		                pha
.10c3	8a		                txa
.10c4	48		                pha
.10c5	98		                tya
.10c6	48		                pha
.10c7	ad fc 10	                lda     addr1+1
.10ca	8d fe 10	                sta     addr2+1
.10cd	ad fb 10	                lda     addr1
.10d0	8d fd 10	                sta     addr2
.10d3	c0 00		                cpy     #$00
.10d5	f0 0f		                beq     addx
.10d7	18		moreline        clc
.10d8	6d fa 10	                adc     ymult
.10db	90 03		                bcc     norepy
.10dd	ee fe 10	                inc     addr2+1
.10e0	8d fd 10	norepy          sta     addr2
.10e3	88		                dey
.10e4	d0 f1		                bne     moreline
.10e6	8a		addx            txa
.10e7	18		                clc
.10e8	6d fd 10	                adc     addr2
.10eb	90 03		                bcc     thatsit
.10ed	ee fe 10	                inc     addr2+1
.10f0	8d fd 10	thatsit         sta     addr2
.10f3	68		                pla
.10f4	a8		                tay
.10f5	68		                pla
.10f6	aa		                tax
.10f7	68		                pla
.10f8	28		                plp
.10f9	60		                rts
>10fa	28		ymult          .byte     40
>10fb	00 00		addr1          .word     $0000
>10fd	00 00		addr2          .word     $0000
>10ff	00 00		bytecnt        .word     $0000
>1101	00 00		zp1        .word   $0000
>1103	00 00		zp2        .word   $0000

;******  Return to file: p031ex09.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1105	01		a2hexcol       .byte     1              ; pour aputscxy
>1106	00		a2hexbkcol     .byte     %00000000
.1107			a2hexpos
>1107	00		a2hexpx        .byte     0              ; pour aputsxy
>1108	00		a2hexpy        .byte     0
>1109	24		a2hexprefix    .byte     "$"            ; pour aputs
>110a	00 00		a2hexstr       .word     $00
>110c	00 00		               .word     $00
>110e	00		               .byte     0              ; 0 end string
>110f	30 30 30 30	abin           .null     "00000000"
>1113	30 30 30 30 00
>1118	20 20 20 00	adec           .null     "   "
.111c			putahexfmtxy
.111c	20 4e 0f	               jsr  push
.111f	20 6b 11	               jsr  a2hex
.1122	ae 07 11	               ldx  a2hexpx
.1125	ac 08 11	               ldy  a2hexpy
.1128	20 b9 0c	               jsr  gotoxy
.112b	a2 09		               ldx  #<a2hexprefix
.112d	a0 11		               ldy  #>a2hexprefix
.112f	20 9f 0c	               jsr  puts
.1132	20 8d 0f	               jsr  pop
.1135	60		               rts
.1136			putahexfmt
.1136	20 4e 0f	               jsr  push
.1139	20 6b 11	               jsr  a2hex
.113c	a2 09		               ldx  #<a2hexprefix
.113e	a0 11		               ldy  #>a2hexprefix
.1140	20 9f 0c	               jsr  puts
.1143	20 8d 0f	               jsr  pop
.1146	60		               rts
.1147			putahex
.1147	20 4e 0f	               jsr  push
.114a	20 6b 11	               jsr  a2hex
.114d	a2 0a		               ldx  #<a2hexstr
.114f	a0 11		               ldy  #>a2hexstr
.1151	20 9f 0c	               jsr  puts
.1154	20 8d 0f	               jsr  pop
.1157	60		               rts
.1158			nib2hex
.1158	08		               php
.1159	29 0f		               and  #$0f
.115b	f8		               sed
.115c	18		               clc
.115d	69 90		               adc  #$90
.115f	69 40		               adc  #$40
.1161	d8		               cld
.1162	28		               plp
.1163	60		               rts
.1164			lsra4bits
.1164	08		               php
.1165	4a		               lsr
.1166	4a		               lsr
.1167	4a		               lsr
.1168	4a		               lsr
.1169	28		               plp
.116a	60		               rts
.116b			a2hex
.116b	08		               php
.116c	48		               pha
.116d	48		               pha
.116e	20 64 11	               jsr  lsra4bits
.1171	20 58 11	               jsr  nib2hex
.1174	8d 0a 11	               sta  a2hexstr
.1177	68		               pla
.1178	20 58 11	               jsr  nib2hex
.117b	8d 0b 11	               sta  a2hexstr+1
.117e	a9 00		               lda  #$00                ; set end of string
.1180	8d 0c 11	               sta  a2hexstr+2
.1183	68		               pla
.1184	28		               plp
.1185	60		               rts
.1186			xy2hex
.1186	20 4e 0f	               jsr  push
.1189	20 6b 11	               jsr  a2hex
.118c	8a		               txa
.118d	48		               pha
.118e	20 64 11	               jsr  lsra4bits
.1191	20 58 11	               jsr  nib2hex
.1194	8d 0a 11	               sta  a2hexstr
.1197	68		               pla
.1198	20 58 11	               jsr  nib2hex
.119b	8d 0b 11	               sta  a2hexstr+1
.119e	98		               tya
.119f	48		               pha
.11a0	20 64 11	               jsr  lsra4bits
.11a3	20 58 11	               jsr  nib2hex
.11a6	8d 0c 11	               sta  a2hexstr+2
.11a9	68		               pla
.11aa	20 58 11	               jsr  nib2hex
.11ad	8d 0d 11	               sta  a2hexstr+3
.11b0	a9 00		               lda  #$00                ; 0 ended string
.11b2	8d 0e 11	               sta  a2hexstr+4
.11b5	20 8d 0f	               jsr  pop
.11b8			atobin
.11b8	20 4e 0f	               jsr  push
.11bb	a2 08		               ldx  #8
.11bd	a0 00		               ldy  #0
.11bf	18		               clc
.11c0	2a		nextbit        rol
.11c1	48		               pha
.11c2	69 00		               adc  #$00
.11c4	29 01		               and  #$01
.11c6	20 58 11	               jsr  nib2hex
.11c9	99 0f 11	               sta  abin,y
.11cc	68		               pla
.11cd	c8		               iny
.11ce	ca		               dex
.11cf	d0 ef		               bne  nextbit
.11d1	a9 00		               lda  #0
.11d3	99 0f 11	               sta  abin,y
.11d6	20 8d 0f	               jsr  pull
.11d9	60		               rts
.11da			putabin
.11da	20 b8 11	               jsr     atobin
.11dd	20 4e 0f	               jsr     push
.11e0	a2 0f		               ldx     #<abin
.11e2	a0 11		               ldy     #>abin
.11e4	20 9f 0c	               jsr     puts
.11e7	20 8d 0f	               jsr     pop
.11ea	60		               rts
.11eb			printabin
.11eb	20 4e 0f	               jsr     push
.11ee	a2 0f		               ldx     #<abin
.11f0	a0 11		               ldy     #>abin
.11f2	20 9f 0c	               jsr     puts
.11f5	20 8d 0f	               jsr     pop
.11f8	60		               rts
.11f9			putabinfmt
.11f9	08		               php
.11fa	48		               pha
.11fb	a9 25		               lda     #"%"
.11fd	20 99 0c	               jsr     putch
.1200	68		               pla
.1201	20 da 11	               jsr     putabin
.1204	28		               plp
.1205	60		               rts
.1206			putabinxy
.1206	20 b9 0c	               jsr     gotoxy
.1209	20 da 11	               jsr     putabin
.120c	60		               rts
.120d			putabinfmtxy
.120d	20 b9 0c	               jsr     gotoxy
.1210	20 f9 11	               jsr     putabinfmt
.1213	60		               rts
.1214			atodec
.1214	20 4e 0f	               jsr  push
.1217	f8		               sed
.1218	aa		               tax
.1219	a0 00		               ldy  #$00
.121b	a9 00		               lda  #$00
.121d	18		nextbit        clc
.121e	69 01		               adc  #$01
.1220	90 01		               bcc  decx
.1222	c8		               iny
.1223	ca		decx           dex
.1224	d0 f7		               bne  nextbit
.1226	48		               pha
.1227	98		               tya
.1228	20 58 11	               jsr  nib2hex
.122b	8d 18 11	               sta  adec
.122e	68		               pla
.122f	48		               pha
.1230	20 58 11	               jsr  nib2hex
.1233	8d 1a 11	               sta  adec+2
.1236	68		               pla
.1237	6a		               ror
.1238	6a		               ror
.1239	6a		               ror
.123a	6a		               ror
.123b	20 58 11	               jsr  nib2hex
.123e	8d 19 11	               sta  adec+1
.1241	d8		               cld
.1242	20 8d 0f	               jsr  pull
.1245	60		               rts
>1246	00 00 00	buffer         .byte     0,0,0
.1249			putadec
.1249	20 4e 0f	               jsr  push
.124c	20 14 12	               jsr  atodec
.124f	a2 18		               ldx  #<adec
.1251	a0 11		               ldy  #>adec+1
.1253	20 9f 0c	               jsr  puts
.1256	20 8d 0f	               jsr  pop
.1259	60		               rts

;******  Return to file: p031ex09.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>125a	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>125e	00 00 00 00 00 00 00 00 00 0d 00 00
>126a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>126e	00 00 00 00 00 00 00 00 00 00 00 00
>127a	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>127e	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>128a	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>128e	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>129a	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>129e	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>12aa	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>12ae	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>12ba	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>12be	00 00 00 00 00 00 00 00 00 00 00 00
>12ca	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>12ce	00 00 00 00 00 00 00 00 00 00 00 00
>12da	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>12de	00 00 00 00 00 00 00 00 00 00 00 00
>12ea	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>12ee	00 00 00 00 00 00 00 00 00 00 00 00
>12fa	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>12fe	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>130a	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>130e	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>131a	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>131e	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>132a	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>132e	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>133a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>133e	00 00 00 00 00 00 00 00 00 00 00 00
>134a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>134e	00 00 00 00 00 00 00 00 00 00 00 00
.135a			waitstop
.135a	20 4e 0f	               jsr  push
.135d	20 ed f6	wait           jsr  k_stop
.1360	d0 fb		               bne  wait
.1362	20 8d 0f	               jsr  pop
.1365	60		               rts
.1366			anykey
.1366	08		               php
.1367	48		               pha
.1368	a5 cb		nokey          lda 203
.136a	c9 40		               cmp #64
.136c	f0 fa		               beq nokey
.136e	20 74 13	               jsr releasekey
.1371	68		               pla
.1372	28		               plp
.1373	60		               rts
.1374			releasekey
.1374	08		               php
.1375	48		               pha
.1376	a5 cb		keypressed     lda 203
.1378	c9 40		               cmp #64
.137a	d0 fa		               bne keypressed
.137c	68		               pla
.137d	28		               plp
.137e	60		               rts
.137f			getkey
.137f	20 e4 ff	again          jsr  getin
.1382	c9 00		               cmp  #0
.1384	f0 f9		               beq  again
.1386	60		               rts
.1387			kbflushbuff
.1387	08		               php
.1388	48		               pha
.1389	20 e4 ff	again          jsr  getin
.138c	c9 00		               cmp  #0
.138e	d0 f9		               bne  again
.1390	68		               pla
.1391	28		               plp
.1392	60		               rts
.1393			waitkey
.1393	20 4e 0f	               jsr  push
.1396	8d e4 13	               sta  thekey
.1399	20 e4 ff	nope           jsr  getin
.139c	20 d2 ff	               jsr  chrout
.139f	cd e4 13	               cmp  thekey
.13a2	d0 f5		               bne  nope
.13a4	20 d2 ff	               jsr  chrout
.13a7	20 8d 0f	               jsr  pop
.13aa	60		               rts
.13ab			waitspace
.13ab	20 4e 0f	               jsr  push
.13ae	a9 7f		wait           lda  #$7f  ;%01111111
.13b0	8d 00 dc	               sta  $dc00
.13b3	ad 01 dc	               lda  $dc01
.13b6	29 10		               and  #$10  ;mask %00010000
.13b8	d0 f4		               bne  wait
.13ba	20 8d 0f	               jsr  pop
.13bd			waitsstop
.13bd	20 4e 0f	               jsr  push
.13c0	20 ed f6	wait           jsr  k_stop  ;%01111111
.13c3	d0 fb		               bne  wait
.13c5	20 8d 0f	               jsr  pop
.13c8			waitreturn
.13c8	20 4e 0f	               jsr  push
.13cb	ad e5 13	               lda  thecount
.13ce	8d 00 04	               sta  scrnram
.13d1	a9 02		               lda  #$02
.13d3	8d 00 d8	               sta  colorram
.13d6	20 e4 ff	nope           jsr  getin
.13d9	c9 0d		nohex          cmp  #$0d
.13db	d0 f9		               bne  nope
.13dd	ee e5 13	               inc  thecount
.13e0	20 8d 0f	               jsr  pop
.13e3	60		               rts
>13e4	00		thekey         .byte   0
>13e5	01		thecount       .byte   $01

;******  Return to file: p031ex09.asm


;******  End of listing

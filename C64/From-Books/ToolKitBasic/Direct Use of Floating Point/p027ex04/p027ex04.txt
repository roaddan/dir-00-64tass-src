
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p027ex04.txt -o p027ex04.prg p027ex04.asm
; Tue Oct 29 17:25:02 2024

;Offset	;Hex		;Source

;******  Processing input file: p027ex04.asm

="20241028-220934"	           Version = "20241028-220934"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	2a 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 52			.text " *programmation assembleur sue c64*"
>080a	4f 47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45
>081a	4d 42 4c 45 55 52 20 53 55 45 20 43 36 34 2a
>0829	00				.byte $00		;Un zéro pour indiquer la fin de cette
>082a	46 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082c	02 00				.word 2   	;Numero de la ligne Basic.
>082e	8f				.byte $8F		;Le token de la commande REM du Basic
>082f	20 2a 50 41			.text " *par daniel lafrance*"
>0833	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>0843	45 2a
>0845	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0846	51 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0848	03 00				.word 3   	;Numero de la ligne Basic.
>084a	9e				.byte $9e		;Le token de la commande PRINT du Basic
>084b	30 32 31 33			.text format("%05d",hpgmstart)
>084f	31
>0850	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0851	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0853	4c e3 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p027ex04.asm

.0856			p027ex04
.0856	20 c7 0e	          jsr  push
.0859	48		               pha
.085a	a9 03		               lda  #ccyan
.085c	8d 20 d0	               sta  $d020
.085f	68		               pla
.0860	48		               pha
.0861	a9 01		               lda  #cblanc
.0863	8d 21 d0	               sta  $d021
.0866	68		               pla
.0867	48		               pha
.0868	a9 06		               lda  #cbleu
.086a	8d 86 02	               sta  bascol
.086d	68		               pla
.086e	20 c7 0e	               jsr  push
.0871	a2 b7		isx            ldx  #<ttext
.0873	a0 08		isy            ldy  #>ttext
.0875	20 18 0c	               jsr  puts
.0878	20 06 0f	               jsr  pull
.087b	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.087e	a2 ae		          ldx  #<(floatnum-1)
.0880	a0 08		          ldy  #>(floatnum-1)
.0882	86 7a		          stx  $7a
.0884	84 7b		          sty  $7b
.0886	20 73 00	          jsr  b_chrget
.0889	20 f3 bc	          jsr  b_ascflt
.088c	20 dd bd	          jsr  b_facasc
.088f	a0 ff		          ldy  #$ff
.0891	c8		sbufx     iny
.0892	b9 00 01	          lda  $0100,y
.0895	d0 fa		          bne  sbufx
.0897	c8		          iny
.0898	98		          tya
.0899	48		          pha
.089a	a9 00		          lda  #$00
.089c	85 22		          sta  $22
.089e	a9 01		          lda  #$01
.08a0	85 23		          sta  $23
.08a2	68		          pla
.08a3	20 24 ab	          jsr  b_strout
.08a6	a9 0d		          lda  #b_crlf
.08a8	20 d2 ff	          jsr  $ffd2
.08ab	20 06 0f	          jsr  pop
.08ae	60		          rts
>08af	32 35 2e 33	floatnum  .null     "25.35e3"
>08b3	35 45 33 00
>08b7	1f 20 12	ttext     .byte     b_blue,b_space,b_rvs_on
>08ba	20 20 20 20	          .text     "    P.F. - AFFICHAGE STRING A F.P.   "
>08be	d0 2e c6 2e 20 2d 20 c1 c6 c6 c9 c3 c8 c1 c7 c5
>08ce	20 d3 d4 d2 c9 ce c7 20 c1 20 c6 2e d0 2e 20 20
>08de	20
>08df	92 0d 0d 00	          .byte     b_rvs_off,b_crlf,b_crlf,b_eot
.08e3			main
.08e3	20 db 0b	          jsr  scrmaninit
.08e6	08		               php
.08e7	48		               pha
.08e8	a9 08		               lda  #$08
.08ea	20 d2 ff	               jsr  $ffd2
.08ed	68		               pla
.08ee	28		               plp
.08ef	48		               pha
.08f0	a9 03		               lda  #ccyan
.08f2	8d 20 d0	               sta  $d020
.08f5	68		               pla
.08f6	48		               pha
.08f7	a9 01		               lda  #cblanc
.08f9	8d 21 d0	               sta  $d021
.08fc	68		               pla
.08fd	48		               pha
.08fe	a9 06		               lda  #cbleu
.0900	8d 86 02	               sta  bascol
.0903	68		               pla
.0904	20 28 09	          jsr  bookinfo
.0907	20 a4 0b	          jsr  akey
.090a	20 fb 0b	          jsr  cls
.090d	20 6c 09	          jsr  help
.0910	20 a4 0b	          jsr  akey
.0913	20 fb 0b	          jsr  cls
.0916	a9 0d		          lda  #b_crlf
.0918	20 d2 ff	          jsr  $ffd2
.091b	20 56 08	          jsr  p027ex04
.091e	08		               php
.091f	48		               pha
.0920	a9 09		               lda  #$09
.0922	20 d2 ff	               jsr  $ffd2
.0925	68		               pla
.0926	28		               plp
.0927	60		          rts
.0928			bookinfo
.0928	08		               php
.0929	48		               pha
.092a	a9 0e		               lda  #14
.092c	8d fa 0b	               sta  characterset
.092f	20 d2 ff	               jsr  $ffd2
.0932	68		               pla
.0933	28		               plp
.0934	20 fb 0b	          jsr       cls
.0937	20 c7 0e	               jsr  push
.093a	a2 7b		isx            ldx  #<line
.093c	a0 0b		isy            ldy  #>line
.093e	20 18 0c	               jsr  puts
.0941	20 06 0f	               jsr  pull
.0944	20 c7 0e	               jsr  push
.0947	a2 a3		isx            ldx  #<headera
.0949	a0 09		isy            ldy  #>headera
.094b	20 18 0c	               jsr  puts
.094e	20 06 0f	               jsr  pull
.0951	20 c7 0e	               jsr  push
.0954	a2 43		isx            ldx  #<headerb
.0956	a0 0a		isy            ldy  #>headerb
.0958	20 18 0c	               jsr  puts
.095b	20 06 0f	               jsr  pull
.095e	20 c7 0e	               jsr  push
.0961	a2 7b		isx            ldx  #<line
.0963	a0 0b		isy            ldy  #>line
.0965	20 18 0c	               jsr  puts
.0968	20 06 0f	               jsr  pull
.096b	60		          rts
.096c			help
.096c	08		               php
.096d	48		               pha
.096e	a9 0e		               lda  #14
.0970	8d fa 0b	               sta  characterset
.0973	20 d2 ff	               jsr  $ffd2
.0976	68		               pla
.0977	28		               plp
.0978	20 fb 0b	          jsr       cls
.097b	20 c7 0e	               jsr  push
.097e	a2 e6		isx            ldx  #<shortcuts
.0980	a0 0a		isy            ldy  #>shortcuts
.0982	20 18 0c	               jsr  puts
.0985	20 06 0f	               jsr  pull
.0988	20 c7 0e	               jsr  push
.098b	a2 67		isx            ldx  #<helptext
.098d	a0 0b		isy            ldy  #>helptext
.098f	20 18 0c	               jsr  puts
.0992	20 06 0f	               jsr  pull
.0995	20 c7 0e	               jsr  push
.0998	a2 7b		isx            ldx  #<line
.099a	a0 0b		isy            ldy  #>line
.099c	20 18 0c	               jsr  puts
.099f	20 06 0f	               jsr  pull
.09a2	60		          rts
.09a3			headera
>09a3	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>09a7	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>09b7	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>09c7	20 20 2a
>09ca	0d		          .byte     b_crlf
>09cb	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>09cf	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>09df	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>09ef	20 20 2a
>09f2	0d		          .byte     b_crlf
>09f3	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>09f7	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>0a07	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>0a17	20 20 2a
>0a1a	0d		          .byte     b_crlf
>0a1b	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>0a1f	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>0a2f	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>0a3f	20 20 2a 00
>0a43	0d		headerb   .byte     $0d
>0a44	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>0a48	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>0a58	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>0a68	20 20 2a
>0a6b	0d		          .byte     $0d
>0a6c	20 2a 20 20	          .text               " *         page 27, exemple #4        *"
>0a70	20 20 20 20 20 20 20 50 41 47 45 20 32 37 2c 20
>0a80	45 58 45 4d 50 4c 45 20 23 34 20 20 20 20 20 20
>0a90	20 20 2a
>0a93	0d		          .byte     $0d
>0a94	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0a98	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0aa8	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0ab8	20 20 2a
>0abb	0d		          .byte     $0d
>0abc	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0ac0	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0ad0	34 31 30 32 38 2d 32 32 30 39 33 34 2e 20 20 20
>0ae0	20 20 2a 20
>0ae4	90 00		          .byte     b_black,b_eot
>0ae6	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0ae9	20 20 20 20	          .text               "        RACCOURCIS DES EXEMPLES       "
>0aed	20 20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4
>0afd	c5 d3 20 c5 d8 c5 cd d0 cc c5 d3 20 20 20 20 20
>0b0d	20 20
>0b0f	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0b12	20 50 30 32	          .text     format(   " p027ex04: SYS %d ($%04X)",p027ex04, p027ex04)
>0b16	37 45 58 30 34 3a 20 d3 d9 d3 20 32 31 33 34 20
>0b26	28 24 30 38 35 36 29
>0b2d	0d		          .byte     b_crlf
>0b2e	20 48 45 4c	          .text     format(   " help....: SYS %d ($%04X)",help, help)
>0b32	50 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 34 31 32 20
>0b42	28 24 30 39 36 c3 29
>0b49	0d		          .byte     b_crlf
>0b4a	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04X)",cls, cls)
>0b4e	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 30 36 37 20
>0b5e	28 24 30 c2 c6 c2 29
>0b65	0d 00		          .byte     b_crlf,b_eot
>0b67	0d 20 1c	helptext  .byte     b_crlf,b_space,b_red
>0b6a	20 45 58 2e	          .text     format(   " ex.: SYS %d",p027ex04)
>0b6e	3a 20 d3 d9 d3 20 32 31 33 34
>0b78	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0b7b	20 2d 2d 2d	line      .text               " --------------------------------------"
>0b7f	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0b8f	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0b9f	2d 2d 2d
>0ba2	0d 00		          .byte     b_crlf,b_eot
.0ba4			akey
.0ba4	a9 b5		          lda  #<kmsg
.0ba6	85 22		          sta  $22
.0ba8	a9 0b		          lda  #>kmsg
.0baa	85 23		          sta  $23
.0bac	a9 1e		          lda  #kmsgend-kmsg
.0bae	20 24 ab	          jsr  b_strout
.0bb1	20 df 12	          jsr  anykey
.0bb4	60		          rts
>0bb5	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>0bb9	d5 4e 45 20	          .text               "Une clef pour continuer!"
>0bbd	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0bcd	55 45 52 21
>0bd1	90 00		          .byte b_black,b_eot
.0bd3			kmsgend

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0bd3	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0bd7	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0bdb			libtart

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0bdb			scrmaninit
.0bdb	20 c7 0e	               jsr  push
.0bde	a9 06		               lda  #vbleu
.0be0	8d 21 d0	               sta  vicbackcol
.0be3	a9 05		               lda  #vvert
.0be5	8d 20 d0	               sta  vicbordcol
.0be8	a9 01		               lda  #vblanc
.0bea	8d 86 02	               sta  bascol
.0bed	ad 00 04	               lda  scrnram
.0bf0	8d 00 04	               sta  scrnram
.0bf3	20 fb 0b	               jsr  cls
.0bf6	20 06 0f	               jsr  pop
.0bf9	60		               rts
>0bfa	8e		characterset   .byte b_uppercase
.0bfb			cls
.0bfb	08		               php
.0bfc	48		               pha
.0bfd	a9 93		               lda  #$93
.0bff	20 12 0c	               jsr  putch
.0c02	68		               pla
.0c03	28		               plp
.0c04	60		               rts
.0c05			putnch
.0c05	08		               php
.0c06	e0 00		               cpx  #$00
.0c08	f0 06		               beq  out
.0c0a	20 d2 ff	again          jsr  $ffd2
.0c0d	ca		               dex
.0c0e	d0 fa		               bne  again
.0c10	28		out            plp
.0c11	60		               rts
.0c12			putch
.0c12	08		               php
.0c13	20 d2 ff	               jsr  $ffd2
.0c16	28		               plp
.0c17	60		               rts
.0c18			puts
.0c18	20 c7 0e	               jsr  push
.0c1b	86 fb		               stx  zpage1
.0c1d	84 fc		               sty  zpage1+1
.0c1f	a0 00		               ldy  #0
.0c21	b1 fb		next           lda  (zpage1),y
.0c23	f0 09		               beq  exit
.0c25	20 12 0c	               jsr  putch
.0c28	20 ce 0f	               jsr  inczp1
.0c2b	4c 21 0c	               jmp  next
.0c2e	20 06 0f	exit           jsr  pop
.0c31	60		               rts
.0c32			gotoxy
.0c32	08		               php
.0c33	18		               clc
.0c34	8a		               txa
.0c35	48		               pha
.0c36	98		               tya
.0c37	aa		               tax
.0c38	68		               pla
.0c39	a8		               tay
.0c3a	20 f0 ff	               jsr  kplot
.0c3d	28		               plp
.0c3e	60		               rts
.0c3f			cursor
=$0286			bascol    =    $0286
.0c3f	08		               php
.0c40	48		               pha
.0c41	90 12		               bcc  restore
.0c43	20 f0 ff	               jsr  kplot
.0c46	8c 67 0c	               sty  cx
.0c49	8e 68 0c	               stx  cy
.0c4c	ad 86 02	               lda  bascol
.0c4f	8d 69 0c	               sta  bcol
.0c52	4c 64 0c	               jmp  out
.0c55	ae 68 0c	restore        ldx  cy
.0c58	ac 67 0c	               ldy  cx
.0c5b	20 f0 ff	               jsr  kplot
.0c5e	ad 69 0c	               lda  bcol
.0c61	8d 86 02	               sta  bascol
.0c64	68		out            pla
.0c65	28		               plp
.0c66	60		               rts
>0c67	00		cx   .byte     $00
>0c68	00		cy   .byte     $00
>0c69	00		bcol .byte     $00
.0c6a			cursave
.0c6a	08		               php
.0c6b	38		               sec
.0c6c	20 3f 0c	               jsr  cursor
.0c6f	28		               plp
.0c70	60		               rts
.0c71			curput
.0c71	08		               php
.0c72	18		               clc
.0c73	20 3f 0c	               jsr  cursor
.0c76	28		               plp
.0c77	60		               rts
.0c78			putsxy
.0c78	20 c7 0e	               jsr  push
.0c7b	86 fb		               stx  zpage1
.0c7d	84 fc		               sty  zpage1+1
.0c7f	a0 00		               ldy  #$00
.0c81	b1 fb		               lda  (zpage1),y
.0c83	aa		               tax
.0c84	20 ce 0f	               jsr  inczp1
.0c87	b1 fb		               lda  (zpage1),y
.0c89	a8		               tay
.0c8a	20 32 0c	               jsr  gotoxy
.0c8d	20 ce 0f	               jsr  inczp1
.0c90	a6 fb		               ldx  zpage1
.0c92	a4 fc		               ldy  zpage1+1
.0c94	20 18 0c	               jsr  puts
.0c97	20 06 0f	               jsr  pop
.0c9a	60		               rts
>0c9b	00 00		straddr   .word     $00
>0c9d	00		px        .byte     $00
>0c9e	00		py        .byte     $00
>0c9f	00 00		zp1       .word     $00
.0ca1			putscxy
.0ca1	20 c7 0e	               jsr  push
.0ca4	84 fc		               sty  zpage1+1
.0ca6	86 fb		               stx  zpage1
.0ca8	ad 86 02	               lda  bascol
.0cab	8d cb 0c	               sta  bc
.0cae	a0 00		               ldy #$00
.0cb0	b1 fb		               lda  (zpage1),y
.0cb2	8d 86 02	               sta  bascol
.0cb5	20 ce 0f	               jsr  inczp1
.0cb8	a6 fb		               ldx  zpage1
.0cba	a4 fc		               ldy  zpage1+1
.0cbc	20 78 0c	               jsr  putsxy
.0cbf	ad cb 0c	               lda  bc
.0cc2	8d 86 02	               sta  bascol
.0cc5	20 06 0f	               jsr  pop
.0cc8	60		               rts
>0cc9	00 00		straddr  .word      $00
>0ccb	00		bc       .byte      $00
>0ccc	00 00		zp1      .word      $00
.0cce			putrahex
.0cce	08		               php
.0ccf	48		               pha
.0cd0	20 e4 10	               jsr  a2hex
.0cd3	a9 83		               lda  #<a2hexstr
.0cd5	a0 10		               ldy  #>a2hexstr
.0cd7	20 18 0c	               jsr  puts
.0cda	68		               pla
.0cdb	28		               plp
.0cdc	60		               rts
.0cdd			kputrahexxy
.0cdd			bputrahexxy
.0cdd			putrahexxy
.0cdd	08		               php
.0cde	20 e4 10	               jsr  a2hex
.0ce1	a9 80		               lda  #<a2hexpos
.0ce3	a0 10		               ldy  #>a2hexpos
.0ce5	20 78 0c	               jsr  putsxy
.0ce8	68		               pla
.0ce9	28		               plp
.0cea	60		               rts
.0ceb			putrahexcxy
.0ceb	08		               php
.0cec	20 e4 10	               jsr  a2hex
.0cef	a9 80		               lda  #<a2hexpos
.0cf1	a0 10		               ldy  #>a2hexpos
.0cf3	20 a1 0c	               jsr  putscxy
.0cf6	68		               pla
.0cf7	28		               plp
.0cf8	60		               rts
.0cf9			setinverse
.0cf9	48		               pha
.0cfa	a9 12		               lda  #$12
.0cfc	20 d2 ff	               jsr  $ffd2
.0cff	68		               pla
.0d00	60		               rts
.0d01			clrinverse
.0d01	48		               pha
.0d02	a9 92		               lda  #$92
.0d04	20 d2 ff	               jsr  $ffd2
.0d07	68		               pla
.0d08	60		               rts

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.0d09			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.0d09	08		                php
.0d0a	8d bb 0e	                sta  rega
.0d0d	68		                pla
.0d0e	8d be 0e	                sta  regp
.0d11	8e bc 0e	                stx  regx
.0d14	8c bd 0e	                sty  regy
.0d17	ba		                tsx
.0d18	8e bf 0e	                stx  regs
.0d1b	68		                pla
.0d1c	8d c1 0e	                sta  regpcl
.0d1f	8d c2 0e	                sta  regpcl2
.0d22	68		                pla
.0d23	8d c0 0e	                sta  regpch
.0d26	ad bb 0e	                lda  rega
.0d29	48		                pha
.0d2a	20 d1 10	                jsr  nib2hex
.0d2d	8d 5e 0e	                sta  vala+1
.0d30	68		                pla
.0d31	20 dd 10	                jsr  lsra4bits
.0d34	20 d1 10	                jsr  nib2hex
.0d37	8d 5d 0e	                sta  vala
.0d3a	ad bd 0e	                lda  regy
.0d3d	48		                pha
.0d3e	20 d1 10	                jsr  nib2hex
.0d41	8d 74 0e	                sta  valy+1
.0d44	68		                pla
.0d45	20 dd 10	                jsr  lsra4bits
.0d48	20 d1 10	                jsr  nib2hex
.0d4b	8d 73 0e	                sta  valy
.0d4e	ad bc 0e	                lda  regx
.0d51	48		                pha
.0d52	20 d1 10	                jsr  nib2hex
.0d55	8d 69 0e	                sta  valx+1
.0d58	68		                pla
.0d59	20 dd 10	                jsr  lsra4bits
.0d5c	20 d1 10	                jsr  nib2hex
.0d5f	8d 68 0e	                sta  valx
.0d62	ad be 0e	                lda  regp
.0d65	48		                pha
.0d66	20 d1 10	                jsr  nib2hex
.0d69	8d 7f 0e	                sta  valp+1
.0d6c	68		                pla
.0d6d	20 dd 10	                jsr  lsra4bits
.0d70	20 d1 10	                jsr  nib2hex
.0d73	8d 7e 0e	                sta  valp
.0d76	ad bf 0e	                lda  regs
.0d79	48		                pha
.0d7a	20 d1 10	                jsr  nib2hex
.0d7d	8d 8a 0e	                sta  vals+1
.0d80	68		                pla
.0d81	20 dd 10	                jsr  lsra4bits
.0d84	20 d1 10	                jsr  nib2hex
.0d87	8d 89 0e	                sta  vals
.0d8a	ad c0 0e	                lda  regpch
.0d8d	48		                pha
.0d8e	20 d1 10	                jsr  nib2hex
.0d91	8d 96 0e	                sta  valpch+1
.0d94	68		                pla
.0d95	20 dd 10	                jsr  lsra4bits
.0d98	20 d1 10	                jsr  nib2hex
.0d9b	8d 95 0e	                sta  valpch
.0d9e	ad c1 0e	                lda  regpcl
.0da1	48		                pha
.0da2	20 d1 10	                jsr  nib2hex
.0da5	8d 98 0e	                sta  valpcl+1
.0da8	68		                pla
.0da9	20 dd 10	                jsr  lsra4bits
.0dac	20 d1 10	                jsr  nib2hex
.0daf	8d 97 0e	                sta  valpcl
.0db2	a5 fb		                lda  zpage1
.0db4	48		                pha
.0db5	20 d1 10	                jsr  nib2hex
.0db8	8d a7 0e	                sta  valz1l
.0dbb	68		                pla
.0dbc	20 dd 10	                jsr  lsra4bits
.0dbf	20 d1 10	                jsr  nib2hex
.0dc2	8d a8 0e	                sta  valz1l+1
.0dc5	a5 fc		                lda  zpage1+1
.0dc7	48		                pha
.0dc8	20 d1 10	                jsr  nib2hex
.0dcb	8d a5 0e	                sta  valz1h
.0dce	68		                pla
.0dcf	20 dd 10	                jsr  lsra4bits
.0dd2	20 d1 10	                jsr  nib2hex
.0dd5	8d a6 0e	                sta  valz1h+1
.0dd8	a5 fd		                lda  zpage2
.0dda	48		                pha
.0ddb	20 d1 10	                jsr  nib2hex
.0dde	8d b7 0e	                sta  valz2l
.0de1	68		                pla
.0de2	20 dd 10	                jsr  lsra4bits
.0de5	20 d1 10	                jsr  nib2hex
.0de8	8d b8 0e	                sta  valz2l+1
.0deb	a5 fe		                lda  zpage2+1
.0ded	48		                pha
.0dee	20 d1 10	                jsr  nib2hex
.0df1	8d b5 0e	                sta  valz2h
.0df4	68		                pla
.0df5	20 dd 10	                jsr  lsra4bits
.0df8	20 d1 10	                jsr  nib2hex
.0dfb	8d b6 0e	                sta  valz2h+1
.0dfe	20 f9 0c	                jsr  setinverse
.0e01	78		                sei
.0e02	a2 55		                ldx  #<srega
.0e04	a0 0e		                ldy  #>srega+1
.0e06	20 a1 0c	                jsr  putscxy
.0e09	a2 60		                ldx  #<sregx
.0e0b	a0 0e		                ldy  #>sregx+1
.0e0d	20 a1 0c	                jsr  putscxy
.0e10	a2 6b		                ldx  #<sregy
.0e12	a0 0e		                ldy  #>sregy+1
.0e14	20 a1 0c	                jsr  putscxy
.0e17	a2 76		                ldx  #<sregp
.0e19	a0 0e		                ldy  #>sregp+1
.0e1b	20 a1 0c	                jsr  putscxy
.0e1e	a2 81		                ldx  #<sregs
.0e20	a0 0e		                ldy  #>sregs+1
.0e22	20 a1 0c	                jsr  putscxy
.0e25	a2 8c		                ldx  #<sregpc
.0e27	a0 0e		                ldy  #>sregpc+1
.0e29	20 a1 0c	                jsr  putscxy
.0e2c	a2 9b		                ldx  #<sregz1
.0e2e	a0 0e		                ldy  #>sregz1+1
.0e30	20 a1 0c	                jsr  putscxy
.0e33	a2 ab		                ldx  #<sregz2
.0e35	a0 0e		                ldy  #>sregz2+1
.0e37	20 a1 0c	                jsr  putscxy
.0e3a	58		                cli
.0e3b	20 01 0d	                jsr  clrinverse
.0e3e	ad c0 0e	                lda  regpch
.0e41	48		                pha
.0e42	ad c1 0e	                lda  regpcl
.0e45	48		                pha
.0e46	ac bd 0e	                ldy  regy
.0e49	ae bc 0e	                ldx  regx
.0e4c	ad be 0e	                lda  regp
.0e4f	48		                pha
.0e50	ad bb 0e	                lda  rega
.0e53	28		                plp
.0e54	60		                rts
>0e55	01 00 00 17	srega   .byte   colr,bkcol,coln,line
>0e59	20 41 3a 24	        .text   ' a:$' ;4,24
>0e5d	00 00 00	vala    .byte   0,0,0
>0e60	01 00 06 17	sregx   .byte   colr,bkcol,coln+6,line
>0e64	20 58 3a 24	        .text   ' x:$' ;4,24
>0e68	00 00 00	valx    .byte   0,0,0
>0e6b	01 00 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>0e6f	20 59 3a 24	        .text   ' y:$' ;4,24
>0e73	00 00 00	valy    .byte   0,0,0
>0e76	01 00 12 17	sregp   .byte   colr,bkcol,coln+18,line
>0e7a	20 50 3a 24	        .text   ' p:$' ;4,24
>0e7e	00 00 00	valp    .byte   0,0,0
>0e81	01 00 18 17	sregs   .byte   colr,bkcol,coln+24,line
>0e85	20 53 3a 24	        .text   ' s:$' ;4,24
>0e89	00 00 00	vals    .byte   0,0,0
>0e8c	01 00 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>0e90	20 50 43 3a	        .text   ' pc:$' ;4,24
>0e94	24
>0e95	00 00		valpch  .byte   0,0
>0e97	00 00 20 00	valpcl  .byte   0,0,32,0
>0e9b	01 00 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>0e9f	20 5a 50 31	        .text   ' zp1:$' ;4,24
>0ea3	3a 24
>0ea5	00 00		valz1h  .byte   0,0
>0ea7	00 00 20 00	valz1l  .byte   0,0,32,0
>0eab	01 00 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>0eaf	20 5a 50 32	        .text   ' zp2:$' ;4,24
>0eb3	3a 24
>0eb5	00 00		valz2h  .byte   0,0
>0eb7	00 00 20 00	valz2l  .byte   0,0,32,0
>0ebb	00		rega    .byte   0
>0ebc	00		regx    .byte   0
>0ebd	00		regy    .byte   0
>0ebe	00		regp    .byte   0
>0ebf	00		regs    .byte   0
>0ec0	00		regpch  .byte   0
>0ec1	00		regpcl  .byte   0
>0ec2	00		regpcl2 .byte   0
>0ec3	00		vzp1h   .byte   0
>0ec4	00		vzp1l   .byte   0
>0ec5	00		vzp2h   .byte   0
>0ec6	00		vzp2l   .byte   0

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0ec7			push
.0ec7	08		          php            ; stack : flg, pcl, pch
.0ec8	78		          sei
.0ec9	8d 03 0f	          sta  ra        ; save a
.0ecc	68		          pla            ; stack : pcl, pch
.0ecd	8d 02 0f	          sta  rp        ; save rp
.0ed0	68		          pla            ; stack : pch
.0ed1	8d 04 0f	          sta  pc        ; save pcl
.0ed4	68		          pla            ; stack : -
.0ed5	8d 05 0f	          sta  pc+1      ; save pch
.0ed8	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0eda	48		          pha            ; stack : zp1l
.0edb	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0edd	48		          pha            ; stack : zp1h, zp1l
.0ede	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0ee0	48		          pha            ; stack : zp2l, zp1h, zp1l
.0ee1	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0ee3	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0ee4	ad 02 0f	          lda  rp        ; get rp
.0ee7	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0ee8	ad 03 0f	          lda  ra        ; get a
.0eeb	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0eec	8a		          txa            ; get x
.0eed	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eee	98		          tya            ; get y
.0eef	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef0	ad 05 0f	          lda  pc+1      ; get pch
.0ef3	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef4	ad 04 0f	          lda  pc        ; get pcl
.0ef7	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef8	ad 02 0f	          lda  rp        ; get rp
.0efb	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0efc	ad 03 0f	          lda  ra        ; get a
.0eff	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f00	58		          cli
.0f01	60		          rts
>0f02	00		rp        .byte     0
>0f03	00		ra        .byte     0
>0f04	00 00		pc        .word     0
.0f06			pull
.0f06			pop
.0f06	78		          sei
.0f07	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f08	8d 3b 0f	          sta  pc        ; save pcl
.0f0b	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f0c	8d 3c 0f	          sta  pc+1      ; save pch
.0f0f	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f10	a8		          tay            ; set y
.0f11	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f12	aa		          tax            ; set x
.0f13	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0f14	8d 3a 0f	          sta  ra        ; save a
.0f17	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0f18	8d 39 0f	          sta  rp        ; save rp
.0f1b	68		          pla            ; stack : zp2l, zp1h, zp1l
.0f1c	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0f1e	68		          pla            ; stack : zp1h, zp1l
.0f1f	85 fd		          sta  zpage2    ; get zpage2 High byte
.0f21	68		          pla            ; stack : zp1l
.0f22	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0f24	68		          pla            ; stack :
.0f25	85 fb		          sta  zpage1    ; get zpage1 High byte
.0f27	ad 3c 0f	          lda  pc+1      ; get pch
.0f2a	48		          pha            ; stack : pch
.0f2b	ad 3b 0f	          lda  pc
.0f2e	48		          pha            ; stack : pcl, pch
.0f2f	ad 39 0f	          lda  rp        ; get rp
.0f32	48		          pha            ; stack : rp, pcl, pch
.0f33	ad 3a 0f	          lda  ra        ; set ra
.0f36	58		          cli
.0f37	28		          plp            ; stack : pcl, pch
.0f38	60		          rts
>0f39	00		rp        .byte     0
>0f3a	00		ra        .byte     0
>0f3b	00 00		pc        .word     0

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0f3d			blkfill
.0f3d	20 c7 0e	bf0            jsr  push
.0f40	20 fe 0f	               jsr  savezp1
.0f43	84 fc		               sty  zpage1+1
.0f45	a0 00		               ldy  #$00
.0f47	84 fb		               sty  zpage1
.0f49	91 fb		bf1            sta  (zpage1),y
.0f4b	c8		               iny
.0f4c	d0 fb		               bne  bf1
.0f4e	20 0d 10	               jsr  restzp1
.0f51	20 06 0f	               jsr  pop
.0f54	60		               rts
.0f55			memfill
.0f55	20 c7 0e	               jsr  push
.0f58	20 3d 0f	mf1            jsr  blkfill
.0f5b	c8		               iny
.0f5c	ca		               dex
.0f5d	d0 f9		               bne  mf1
.0f5f	20 06 0f	               jsr  pop
.0f62	60		               rts
.0f63			memmove
.0f63	20 c7 0e	               jsr  push
.0f66	ba		               tsx            ; On se crée un pointeur ...
.0f67	8a		               txa
.0f68	18		               clc
.0f69	69 0b		               adc  #11
.0f6b	a8		               tay
.0f6c	a2 06		               ldx  #$06
.0f6e	b9 00 01	nextbyte       lda  $0100,y
.0f71	99 bd 0f	               sta  words,y
.0f74	c8		               iny
.0f75	ca		               dex
.0f76	d0 f6		               bne  nextbyte
.0f78	ad bd 0f	               lda  s
.0f7b	8d 94 0f	               sta  source+1
.0f7e	ad be 0f	               lda  s+1
.0f81	8d 95 0f	               sta  source+2
.0f84	ad bf 0f	               lda  d
.0f87	8d 91 0f	               sta  destin+1
.0f8a	ad c0 0f	               lda  d+1
.0f8d	8d 92 0f	               sta  destin+2
.0f90	ad ff ff	destin         lda  $ffff
.0f93	8d ff ff	source         sta  $ffff
.0f96	ee 91 0f	               inc  destin+1
.0f99	d0 03		               bne  src
.0f9b	ee 92 0f	               inc  destin+2
.0f9e	ee 94 0f	src            inc  source+1
.0fa1	d0 03		               bne  cnt
.0fa3	ee 95 0f	               inc  source+2
.0fa6	ad c1 0f	cnt            lda  compte
.0fa9	d0 08		               bne  decit
.0fab	ad c2 0f	               lda  compte+1
.0fae	f0 09		               beq  fini
.0fb0	ce c2 0f	               dec  compte+1
.0fb3	ce c1 0f	decit          dec  compte
.0fb6	4c 90 0f	               jmp  destin
.0fb9	20 06 0f	fini           jsr  pop
.0fbc	60		               rts
.0fbd			words
>0fbd	00 00		s         .word     $0000
>0fbf	00 00		d         .word     $0000
>0fc1	00 00		compte    .word     $0000
.0fc3			decword
.0fc3	20 c7 0e	               jsr  push
.0fc6	86 fd		               stx  zpage2
.0fc8	84 fe		               sty  zpage2+1
.0fca	20 06 0f	               jsr  pop
.0fcd	60		               rts
.0fce			inczp1
.0fce	08		               php
.0fcf	48		               pha
.0fd0	e6 fb		               inc  zpage1
.0fd2	a5 fb		               lda  zpage1
.0fd4	d0 02		               bne  nopage
.0fd6	e6 fc		               inc  zpage1+1
.0fd8	68		nopage         pla
.0fd9	28		               plp
.0fda	60		               rts
.0fdb			deczp1
.0fdb	08		                php
.0fdc	48		                pha
.0fdd	c6 fb		                dec  zpage1
.0fdf	d0 02		                bne  nopage
.0fe1	c6 fc		                dec  zpage1+1
.0fe3	68		nopage          pla
.0fe4	28		                plp
.0fe5	60		                rts
.0fe6			inczp2
.0fe6	08		               php
.0fe7	48		               pha
.0fe8	e6 fd		               inc  zpage2
.0fea	a5 fd		               lda  zpage2
.0fec	d0 02		               bne  nopage
.0fee	e6 fe		               inc  zpage2+1
.0ff0	68		nopage         pla
.0ff1	28		               plp
.0ff2	60		               rts
.0ff3			deczp2
.0ff3	08		               php
.0ff4	48		               pha
.0ff5	a5 fd		               lda  zpage2
.0ff7	d0 02		               bne  nopage
.0ff9	c6 fe		               dec  zpage2+1
.0ffb	68		nopage         pla
.0ffc	28		               plp
.0ffd	60		               rts
.0ffe			savezp1
.0ffe	08		               php
.0fff	48		               pha
.1000	a5 fb		               lda  zpage1
.1002	8d 7a 10	               sta  zp1
.1005	a5 fc		               lda  zpage1+1
.1007	8d 7b 10	               sta  zp1+1
.100a	68		               pla
.100b	28		               plp
.100c	60		               rts
.100d			restzp1
.100d	08		               php
.100e	48		               pha
.100f	ad 7a 10	               lda zp1
.1012	85 fb		               sta zpage1
.1014	ad 7b 10	               lda zp1+1
.1017	85 fc		               sta zpage1+1
.1019	68		               pla
.101a	28		               plp
.101b	60		               rts
.101c			savezp2
.101c	08		         php
.101d	48		         pha
.101e	a5 fd		         lda zpage2
.1020	8d 7c 10	         sta zp2
.1023	a5 fe		         lda zpage2+1
.1025	8d 7d 10	         sta zp2+1
.1028	68		         pla
.1029	28		         plp
.102a	60		         rts
.102b			restzp2
.102b	08		                php
.102c	48		                pha
.102d	ad 7c 10	                lda  zp2
.1030	85 fd		                sta  zpage2
.1032	ad 7d 10	                lda  zp2+1
.1035	85 fe		                sta  zpage2+1
.1037	68		                pla
.1038	28		                plp
.1039	60		                rts
.103a			xy2addr
.103a	08		                php
.103b	48		                pha
.103c	8a		                txa
.103d	48		                pha
.103e	98		                tya
.103f	48		                pha
.1040	ad 75 10	                lda     addr1+1
.1043	8d 77 10	                sta     addr2+1
.1046	ad 74 10	                lda     addr1
.1049	8d 76 10	                sta     addr2
.104c	c0 00		                cpy     #$00
.104e	f0 0f		                beq     addx
.1050	18		moreline        clc
.1051	6d 73 10	                adc     ymult
.1054	90 03		                bcc     norepy
.1056	ee 77 10	                inc     addr2+1
.1059	8d 76 10	norepy          sta     addr2
.105c	88		                dey
.105d	d0 f1		                bne     moreline
.105f	8a		addx            txa
.1060	18		                clc
.1061	6d 76 10	                adc     addr2
.1064	90 03		                bcc     thatsit
.1066	ee 77 10	                inc     addr2+1
.1069	8d 76 10	thatsit         sta     addr2
.106c	68		                pla
.106d	a8		                tay
.106e	68		                pla
.106f	aa		                tax
.1070	68		                pla
.1071	28		                plp
.1072	60		                rts
>1073	28		ymult          .byte     40
>1074	00 00		addr1          .word     $0000
>1076	00 00		addr2          .word     $0000
>1078	00 00		bytecnt        .word     $0000
>107a	00 00		zp1        .word   $0000
>107c	00 00		zp2        .word   $0000

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>107e	01		a2hexcol       .byte     1              ; pour aputscxy
>107f	00		a2hexbkcol     .byte     %00000000
.1080			a2hexpos
>1080	00		a2hexpx        .byte     0              ; pour aputsxy
>1081	00		a2hexpy        .byte     0
>1082	24		a2hexprefix    .byte     "$"            ; pour aputs
>1083	00 00		a2hexstr       .word     $00
>1085	00 00		               .word     $00
>1087	00		               .byte     0              ; 0 end string
>1088	30 30 30 30	abin           .null     "00000000"
>108c	30 30 30 30 00
>1091	20 20 20 00	adec           .null     "   "
.1095			putahexfmtxy
.1095	20 c7 0e	               jsr  push
.1098	20 e4 10	               jsr  a2hex
.109b	ae 80 10	               ldx  a2hexpx
.109e	ac 81 10	               ldy  a2hexpy
.10a1	20 32 0c	               jsr  gotoxy
.10a4	a2 82		               ldx  #<a2hexprefix
.10a6	a0 10		               ldy  #>a2hexprefix
.10a8	20 18 0c	               jsr  puts
.10ab	20 06 0f	               jsr  pop
.10ae	60		               rts
.10af			putahexfmt
.10af	20 c7 0e	               jsr  push
.10b2	20 e4 10	               jsr  a2hex
.10b5	a2 82		               ldx  #<a2hexprefix
.10b7	a0 10		               ldy  #>a2hexprefix
.10b9	20 18 0c	               jsr  puts
.10bc	20 06 0f	               jsr  pop
.10bf	60		               rts
.10c0			putahex
.10c0	20 c7 0e	               jsr  push
.10c3	20 e4 10	               jsr  a2hex
.10c6	a2 83		               ldx  #<a2hexstr
.10c8	a0 10		               ldy  #>a2hexstr
.10ca	20 18 0c	               jsr  puts
.10cd	20 06 0f	               jsr  pop
.10d0	60		               rts
.10d1			nib2hex
.10d1	08		               php
.10d2	29 0f		               and  #$0f
.10d4	f8		               sed
.10d5	18		               clc
.10d6	69 90		               adc  #$90
.10d8	69 40		               adc  #$40
.10da	d8		               cld
.10db	28		               plp
.10dc	60		               rts
.10dd			lsra4bits
.10dd	08		               php
.10de	4a		               lsr
.10df	4a		               lsr
.10e0	4a		               lsr
.10e1	4a		               lsr
.10e2	28		               plp
.10e3	60		               rts
.10e4			a2hex
.10e4	08		               php
.10e5	48		               pha
.10e6	48		               pha
.10e7	20 dd 10	               jsr  lsra4bits
.10ea	20 d1 10	               jsr  nib2hex
.10ed	8d 83 10	               sta  a2hexstr
.10f0	68		               pla
.10f1	20 d1 10	               jsr  nib2hex
.10f4	8d 84 10	               sta  a2hexstr+1
.10f7	a9 00		               lda  #$00                ; set end of string
.10f9	8d 85 10	               sta  a2hexstr+2
.10fc	68		               pla
.10fd	28		               plp
.10fe	60		               rts
.10ff			xy2hex
.10ff	20 c7 0e	               jsr  push
.1102	20 e4 10	               jsr  a2hex
.1105	8a		               txa
.1106	48		               pha
.1107	20 dd 10	               jsr  lsra4bits
.110a	20 d1 10	               jsr  nib2hex
.110d	8d 83 10	               sta  a2hexstr
.1110	68		               pla
.1111	20 d1 10	               jsr  nib2hex
.1114	8d 84 10	               sta  a2hexstr+1
.1117	98		               tya
.1118	48		               pha
.1119	20 dd 10	               jsr  lsra4bits
.111c	20 d1 10	               jsr  nib2hex
.111f	8d 85 10	               sta  a2hexstr+2
.1122	68		               pla
.1123	20 d1 10	               jsr  nib2hex
.1126	8d 86 10	               sta  a2hexstr+3
.1129	a9 00		               lda  #$00                ; 0 ended string
.112b	8d 87 10	               sta  a2hexstr+4
.112e	20 06 0f	               jsr  pop
.1131			atobin
.1131	20 c7 0e	               jsr  push
.1134	a2 08		               ldx  #8
.1136	a0 00		               ldy  #0
.1138	18		               clc
.1139	2a		nextbit        rol
.113a	48		               pha
.113b	69 00		               adc  #$00
.113d	29 01		               and  #$01
.113f	20 d1 10	               jsr  nib2hex
.1142	99 88 10	               sta  abin,y
.1145	68		               pla
.1146	c8		               iny
.1147	ca		               dex
.1148	d0 ef		               bne  nextbit
.114a	a9 00		               lda  #0
.114c	99 88 10	               sta  abin,y
.114f	20 06 0f	               jsr  pull
.1152	60		               rts
.1153			putabin
.1153	20 31 11	               jsr     atobin
.1156	20 c7 0e	               jsr     push
.1159	a2 88		               ldx     #<abin
.115b	a0 10		               ldy     #>abin
.115d	20 18 0c	               jsr     puts
.1160	20 06 0f	               jsr     pop
.1163	60		               rts
.1164			printabin
.1164	20 c7 0e	               jsr     push
.1167	a2 88		               ldx     #<abin
.1169	a0 10		               ldy     #>abin
.116b	20 18 0c	               jsr     puts
.116e	20 06 0f	               jsr     pop
.1171	60		               rts
.1172			putabinfmt
.1172	08		               php
.1173	48		               pha
.1174	a9 25		               lda     #"%"
.1176	20 12 0c	               jsr     putch
.1179	68		               pla
.117a	20 53 11	               jsr     putabin
.117d	28		               plp
.117e	60		               rts
.117f			putabinxy
.117f	20 32 0c	               jsr     gotoxy
.1182	20 53 11	               jsr     putabin
.1185	60		               rts
.1186			putabinfmtxy
.1186	20 32 0c	               jsr     gotoxy
.1189	20 72 11	               jsr     putabinfmt
.118c	60		               rts
.118d			atodec
.118d	20 c7 0e	               jsr  push
.1190	f8		               sed
.1191	aa		               tax
.1192	a0 00		               ldy  #$00
.1194	a9 00		               lda  #$00
.1196	18		nextbit        clc
.1197	69 01		               adc  #$01
.1199	90 01		               bcc  decx
.119b	c8		               iny
.119c	ca		decx           dex
.119d	d0 f7		               bne  nextbit
.119f	48		               pha
.11a0	98		               tya
.11a1	20 d1 10	               jsr  nib2hex
.11a4	8d 91 10	               sta  adec
.11a7	68		               pla
.11a8	48		               pha
.11a9	20 d1 10	               jsr  nib2hex
.11ac	8d 93 10	               sta  adec+2
.11af	68		               pla
.11b0	6a		               ror
.11b1	6a		               ror
.11b2	6a		               ror
.11b3	6a		               ror
.11b4	20 d1 10	               jsr  nib2hex
.11b7	8d 92 10	               sta  adec+1
.11ba	d8		               cld
.11bb	20 06 0f	               jsr  pull
.11be	60		               rts
>11bf	00 00 00	buffer         .byte     0,0,0
.11c2			putadec
.11c2	20 c7 0e	               jsr  push
.11c5	20 8d 11	               jsr  atodec
.11c8	a2 91		               ldx  #<adec
.11ca	a0 10		               ldy  #>adec+1
.11cc	20 18 0c	               jsr  puts
.11cf	20 06 0f	               jsr  pop
.11d2	60		               rts

;******  Return to file: p027ex04.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>11d3	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>11d7	00 00 00 00 00 00 00 00 00 0d 00 00
>11e3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>11e7	00 00 00 00 00 00 00 00 00 00 00 00
>11f3	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>11f7	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1203	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1207	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1213	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1217	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1223	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1227	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1233	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1237	00 00 00 00 00 00 00 00 00 00 00 00
>1243	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1247	00 00 00 00 00 00 00 00 00 00 00 00
>1253	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1257	00 00 00 00 00 00 00 00 00 00 00 00
>1263	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1267	00 00 00 00 00 00 00 00 00 00 00 00
>1273	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1277	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1283	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1287	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1293	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1297	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>12a3	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>12a7	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>12b3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>12b7	00 00 00 00 00 00 00 00 00 00 00 00
>12c3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>12c7	00 00 00 00 00 00 00 00 00 00 00 00
.12d3			waitstop
.12d3	20 c7 0e	               jsr  push
.12d6	20 ed f6	wait           jsr  k_stop
.12d9	d0 fb		               bne  wait
.12db	20 06 0f	               jsr  pop
.12de	60		               rts
.12df			anykey
.12df	08		               php
.12e0	48		               pha
.12e1	a5 cb		nokey          lda 203
.12e3	c9 40		               cmp #64
.12e5	f0 fa		               beq nokey
.12e7	20 ed 12	               jsr releasekey
.12ea	68		               pla
.12eb	28		               plp
.12ec	60		               rts
.12ed			releasekey
.12ed	08		               php
.12ee	48		               pha
.12ef	a5 cb		keypressed     lda 203
.12f1	c9 40		               cmp #64
.12f3	d0 fa		               bne keypressed
.12f5	68		               pla
.12f6	28		               plp
.12f7	60		               rts
.12f8			getkey
.12f8	20 e4 ff	again          jsr  getin
.12fb	c9 00		               cmp  #0
.12fd	f0 f9		               beq  again
.12ff	60		               rts
.1300			kbflushbuff
.1300	08		               php
.1301	48		               pha
.1302	20 e4 ff	again          jsr  getin
.1305	c9 00		               cmp  #0
.1307	d0 f9		               bne  again
.1309	68		               pla
.130a	28		               plp
.130b	60		               rts
.130c			waitkey
.130c	20 c7 0e	               jsr  push
.130f	8d 5d 13	               sta  thekey
.1312	20 e4 ff	nope           jsr  getin
.1315	20 d2 ff	               jsr  chrout
.1318	cd 5d 13	               cmp  thekey
.131b	d0 f5		               bne  nope
.131d	20 d2 ff	               jsr  chrout
.1320	20 06 0f	               jsr  pop
.1323	60		               rts
.1324			waitspace
.1324	20 c7 0e	               jsr  push
.1327	a9 7f		wait           lda  #$7f  ;%01111111
.1329	8d 00 dc	               sta  $dc00
.132c	ad 01 dc	               lda  $dc01
.132f	29 10		               and  #$10  ;mask %00010000
.1331	d0 f4		               bne  wait
.1333	20 06 0f	               jsr  pop
.1336			waitsstop
.1336	20 c7 0e	               jsr  push
.1339	20 ed f6	wait           jsr  k_stop  ;%01111111
.133c	d0 fb		               bne  wait
.133e	20 06 0f	               jsr  pop
.1341			waitreturn
.1341	20 c7 0e	               jsr  push
.1344	ad 5e 13	               lda  thecount
.1347	8d 00 04	               sta  scrnram
.134a	a9 02		               lda  #$02
.134c	8d 00 d8	               sta  colorram
.134f	20 e4 ff	nope           jsr  getin
.1352	c9 0d		nohex          cmp  #$0d
.1354	d0 f9		               bne  nope
.1356	ee 5e 13	               inc  thecount
.1359	20 06 0f	               jsr  pop
.135c	60		               rts
>135d	00		thekey         .byte   0
>135e	01		thecount       .byte   $01

;******  Return to file: p027ex04.asm


;******  End of listing

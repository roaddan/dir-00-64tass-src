
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p029ex06.txt -o p029ex06.prg p029ex06.asm
; Tue Oct 29 21:23:01 2024

;Offset	;Hex		;Source

;******  Processing input file: p029ex06.asm

="20241028-220400"	           Version = "20241028-220400"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	2a 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 52			.text " *programmation assembleur sue c64*"
>080a	4f 47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45
>081a	4d 42 4c 45 55 52 20 53 55 45 20 43 36 34 2a
>0829	00				.byte $00		;Un zéro pour indiquer la fin de cette
>082a	46 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082c	02 00				.word 2   	;Numero de la ligne Basic.
>082e	8f				.byte $8F		;Le token de la commande REM du Basic
>082f	20 2a 50 41			.text " *par daniel lafrance*"
>0833	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>0843	45 2a
>0845	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0846	51 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0848	03 00				.word 3   	;Numero de la ligne Basic.
>084a	9e				.byte $9e		;Le token de la commande PRINT du Basic
>084b	30 32 31 33			.text format("%05d",hpgmstart)
>084f	31
>0850	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0851	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0853	4c 75 0a	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p029ex06.asm

.0856			p029ex06
.0856	20 33 10	          jsr  push           ; Sauvegarde le statut complet.
.0859	48		               pha
.085a	a9 03		               lda  #ccyan
.085c	8d 20 d0	               sta  $d020
.085f	68		               pla
.0860	48		               pha
.0861	a9 01		               lda  #cblanc
.0863	8d 21 d0	               sta  $d021
.0866	68		               pla
.0867	48		               pha
.0868	a9 06		               lda  #cbleu
.086a	8d 86 02	               sta  bascol
.086d	68		               pla
.086e	20 67 0d	          jsr  cls            ; On efface l'écran.
.0871	20 33 10	               jsr  push
.0874	a2 e2		isx            ldx  #<ttext
.0876	a0 08		isy            ldy  #>ttext
.0878	20 84 0d	               jsr  puts
.087b	20 72 10	               jsr  pull
.087e	20 33 10	               jsr  push
.0881	a2 0e		isx            ldx  #<ptext1a
.0883	a0 09		isy            ldy  #>ptext1a
.0885	20 84 0d	               jsr  puts
.0888	20 72 10	               jsr  pull
.088b	20 22 0a	          jsr  insub          ; Lit le premier nombre.
.088e	20 ca bb	          jsr  b_f1t57        ; Le copie en RAM.
.0891	20 33 10	               jsr  push
.0894	a2 2b		isx            ldx  #<ptext2a
.0896	a0 09		isy            ldy  #>ptext2a
.0898	20 84 0d	               jsr  puts
.089b	20 72 10	               jsr  pull
.089e	20 22 0a	          jsr  insub          ; Lit le second nombre dans FAC1.
.08a1	a9 57		          lda  #$57           ; Multiply FAC1 avec
.08a3	a0 00		          ldy  #$00           ;  le nombre sauvegardé
.08a5	20 28 ba	          jsr  b_f1xfv        ;  en RAM.
.08a8	20 dd bd	          jsr  b_facasc       ; Converti le résultat en ascii à $0100.
.08ab	20 33 10	               jsr  push
.08ae	a2 bc		isx            ldx  #<restxt1
.08b0	a0 09		isy            ldy  #>restxt1
.08b2	20 84 0d	               jsr  puts
.08b5	20 72 10	               jsr  pull
.08b8	20 04 0a	          jsr  outsub         ; Affiche la valeur finale.
.08bb	a9 0d		          lda  #$0d
.08bd	20 d2 ff	          jsr  $ffd2
.08c0	20 72 10	          jsr  pop            ; Récupère le statut complet.
.08c3	60		          rts
>08c4	9a 20 0d	query     .byte     b_ltblue,b_space,b_crlf
>08c7	20 20 20 d5	          .text     "   Un autre calcul (o/N)?"
>08cb	4e 20 41 55 54 52 45 20 43 41 4c 43 55 4c 20 28
>08db	4f 2f ce 29 3f
>08e0	0d 00		          .byte     b_crlf,b_eot
>08e2	1f 20 12	ttext     .byte     b_blue,b_space,b_rvs_on
>08e5	20 20 20 20	          .text      "       P.F. - FAC1 = FAC1 * FAC2      "
>08e9	20 20 20 d0 2e c6 2e 20 2d 20 c6 c1 c3 31 20 3d
>08f9	20 c6 c1 c3 31 20 2a 20 c6 c1 c3 32 20 20 20 20
>0909	20 20
>090b	92 0d 00	          .byte     b_rvs_off,b_crlf,b_eot
>090e	0d 9c 20	ptext1a   .byte     b_crlf, b_purple, b_space
>0911	20 c5 4e 54	          .text     " Entez la valeur de FAC1"
>0915	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>0925	c6 c1 c3 31
>0929	90 00		          .byte     b_black,b_eot
>092b	0d 9c 20	ptext2a   .byte     b_crlf, b_purple, b_space
>092e	20 c5 4e 54	          .text     " Entez la valeur de FAC2"
>0932	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>0942	c6 c1 c3 32
>0946	90 00		          .byte     b_black,b_eot
>0948	0d 9c 20	ptextva   .byte     b_crlf, b_purple, b_space
>094b	20 c5 4e 54	          .text     " Entez la valeur de FVAR"
>094f	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>095f	c6 d6 c1 d2
>0963	90 00		          .byte     b_black,b_eot
>0965	0d 9c 20	ptext1b   .byte     b_crlf, b_purple, b_space
>0968	20 20 20 20	          .text     "      puis celle de FAC1"
>096c	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>097c	c6 c1 c3 31
>0980	90 00		          .byte     b_black,b_eot
>0982	0d 9c 20	ptext2b   .byte     b_crlf, b_purple, b_space
>0985	20 20 20 20	          .text     "      puis celle de FAC2"
>0989	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>0999	c6 c1 c3 32
>099d	90 00		          .byte     b_black,b_eot
>099f	0d 9c 20	ptextvb   .byte     b_crlf, b_purple, b_space
>09a2	20 20 20 20	          .text     "      puis celle de FVAR"
>09a6	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>09b6	c6 d6 c1 d2
>09ba	90 00		          .byte     b_black,b_eot
>09bc	1e 0d		restxt1   .byte     b_green,b_crlf
>09be	20 d2 45 53	          .text    " Resultat dans FAC1="
>09c2	55 4c 54 41 54 20 44 41 4e 53 20 c6 c1 c3 31 3d
>09d2	90 00		          .byte     b_black,b_eot
>09d4	1e 0d		restxt2   .byte     b_green,b_crlf
>09d6	20 d2 45 53	          .text    " Resultat dans FAC2="
>09da	55 4c 54 41 54 20 44 41 4e 53 20 c6 c1 c3 32 3d
>09ea	90 00		          .byte     b_black,b_eot
>09ec	1e 0d		restxtv   .byte     b_green,b_crlf
>09ee	20 d2 45 53	          .text    " Resultat dans FVAR="
>09f2	55 4c 54 41 54 20 44 41 4e 53 20 c6 d6 c1 d2 3d
>0a02	90 00		          .byte     b_black,b_eot
.0a04			outsub
.0a04	20 33 10	          jsr  push           ; Sauvegarde le statut complet.
.0a07	a0 ff		          ldy  #$ff           ; On détermine
.0a09	c8		nxtchr    iny                 ;  le nombre de caractères
.0a0a	b9 00 01	          lda  $0100,y        ;  qu'il y a dans la chaine à afficher.
.0a0d	d0 fa		          bne  nxtchr
.0a0f	c8		          iny                 ; On ajoute 1 au nombre trouvé pour compenser
.0a10	98		          tya                 ;  l'adresse a y=0.
.0a11	48		          pha                 ; Sauvegarde ce nombre.
.0a12	a9 00		          lda  #$00           ; On prépare le pointeur $22-$23
.0a14	85 22		          sta  $22            ;  en le peuplant avec
.0a16	a9 01		          lda  #$01           ;  l'adresse ou se trouve la chaine
.0a18	85 23		          sta  $23            ;  à afficher.
.0a1a	68		          pla                 ; On ramène le nombre de caractères.
.0a1b	20 24 ab	          jsr  b_strout       ; On affiche.
.0a1e	20 72 10	          jsr  pop            ; Récupère le statut complet.
.0a21	60		          rts
.0a22			insub
.0a22	20 33 10	          jsr  push           ; Sauvegarde le statut complet.
.0a25	20 6c 14	          jsr  kbflushbuff
.0a28	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.0a2b	a9 00		          lda  #$00           ; On efface le basic input buffer
.0a2d	a0 59		          ldy  #$59           ;  situé à $200 long de 89 bytes ($59)
.0a2f	99 00 02	clear     sta  b_inpbuff,y    ;  en plaçant des $00 partout
.0a32	88		          dey                 ;  et ce jusqu'au
.0a33	d0 fa		          bne  clear          ;  dernier.
.0a35	20 f9 ab	          jsr  b_prompt       ; Affiche un "?" et attend une entrée.
.0a38	86 7a		          stx  $7a            ; X et Y pointe sur $01ff au retour.
.0a3a	84 7b		          sty  $7b
.0a3c	20 73 00	          jsr  b_chrget       ; Lecture du buffer.
.0a3f	20 f3 bc	          jsr  b_ascflt       ; Conversion la chaine ascii en 200 en float.
.0a42	20 72 10	          jsr  pop            ; Récupère le statut complet.
.0a45	60		          rts
.0a46			akey
.0a46	a9 57		          lda  #<kmsg
.0a48	85 22		          sta  $22
.0a4a	a9 0a		          lda  #>kmsg
.0a4c	85 23		          sta  $23
.0a4e	a9 1e		          lda  #kmsgend-kmsg
.0a50	20 24 ab	          jsr  b_strout
.0a53	20 4b 14	          jsr  anykey
.0a56	60		          rts
>0a57	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>0a5b	d5 4e 45 20	          .text               "Une clef pour continuer!"
>0a5f	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0a6f	55 45 52 21
>0a73	90 00		          .byte b_black,b_eot
.0a75			kmsgend
.0a75			main
.0a75	20 47 0d	          jsr       scrmaninit
.0a78	08		               php
.0a79	48		               pha
.0a7a	a9 08		               lda  #$08
.0a7c	20 d2 ff	               jsr  $ffd2
.0a7f	68		               pla
.0a80	28		               plp
.0a81	48		               pha
.0a82	a9 03		               lda  #ccyan
.0a84	8d 20 d0	               sta  $d020
.0a87	68		               pla
.0a88	48		               pha
.0a89	a9 01		               lda  #cblanc
.0a8b	8d 21 d0	               sta  $d021
.0a8e	68		               pla
.0a8f	48		               pha
.0a90	a9 06		               lda  #cbleu
.0a92	8d 86 02	               sta  bascol
.0a95	68		               pla
.0a96	20 b7 0a	          jsr       bookinfo
.0a99	20 46 0a	          jsr       akey
.0a9c	20 67 0d	          jsr       cls
.0a9f	20 01 0b	          jsr       help
.0aa2	20 46 0a	          jsr       akey
.0aa5	a9 0d		          lda       #b_crlf
.0aa7	20 d2 ff	          jsr       $ffd2
.0aaa	20 56 08	          jsr       p029ex06
.0aad	08		               php
.0aae	48		               pha
.0aaf	a9 09		               lda  #$09
.0ab1	20 d2 ff	               jsr  $ffd2
.0ab4	68		               pla
.0ab5	28		               plp
.0ab6	60		          rts
.0ab7			bookinfo
.0ab7	20 33 10	          jsr  push           ; Sauvegarde le statut complet.
.0aba	08		               php
.0abb	48		               pha
.0abc	a9 0e		               lda  #14
.0abe	8d 66 0d	               sta  characterset
.0ac1	20 d2 ff	               jsr  $ffd2
.0ac4	68		               pla
.0ac5	28		               plp
.0ac6	20 67 0d	          jsr       cls
.0ac9	20 33 10	               jsr  push
.0acc	a2 16		isx            ldx  #<line
.0ace	a0 0d		isy            ldy  #>line
.0ad0	20 84 0d	               jsr  puts
.0ad3	20 72 10	               jsr  pull
.0ad6	20 33 10	               jsr  push
.0ad9	a2 3e		isx            ldx  #<headera
.0adb	a0 0b		isy            ldy  #>headera
.0add	20 84 0d	               jsr  puts
.0ae0	20 72 10	               jsr  pull
.0ae3	20 33 10	               jsr  push
.0ae6	a2 de		isx            ldx  #<headerb
.0ae8	a0 0b		isy            ldy  #>headerb
.0aea	20 84 0d	               jsr  puts
.0aed	20 72 10	               jsr  pull
.0af0	20 33 10	               jsr  push
.0af3	a2 16		isx            ldx  #<line
.0af5	a0 0d		isy            ldy  #>line
.0af7	20 84 0d	               jsr  puts
.0afa	20 72 10	               jsr  pull
.0afd	20 72 10	          jsr  pop            ; Récupère le statut complet.
.0b00	60		          rts
.0b01			help
.0b01	20 33 10	          jsr  push           ; Sauvegarde le statut complet.
.0b04	08		               php
.0b05	48		               pha
.0b06	a9 0e		               lda  #14
.0b08	8d 66 0d	               sta  characterset
.0b0b	20 d2 ff	               jsr  $ffd2
.0b0e	68		               pla
.0b0f	28		               plp
.0b10	20 67 0d	          jsr       cls
.0b13	20 33 10	               jsr  push
.0b16	a2 81		isx            ldx  #<shortcuts
.0b18	a0 0c		isy            ldy  #>shortcuts
.0b1a	20 84 0d	               jsr  puts
.0b1d	20 72 10	               jsr  pull
.0b20	20 33 10	               jsr  push
.0b23	a2 02		isx            ldx  #<helptext
.0b25	a0 0d		isy            ldy  #>helptext
.0b27	20 84 0d	               jsr  puts
.0b2a	20 72 10	               jsr  pull
.0b2d	20 33 10	               jsr  push
.0b30	a2 16		isx            ldx  #<line
.0b32	a0 0d		isy            ldy  #>line
.0b34	20 84 0d	               jsr  puts
.0b37	20 72 10	               jsr  pull
.0b3a	20 72 10	          jsr  pop            ; Récupère le statut complet.
.0b3d	60		          rts
.0b3e			headera
>0b3e	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>0b42	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>0b52	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>0b62	20 20 2a
>0b65	0d		          .byte     b_crlf
>0b66	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>0b6a	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>0b7a	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>0b8a	20 20 2a
>0b8d	0d		          .byte     b_crlf
>0b8e	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>0b92	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>0ba2	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>0bb2	20 20 2a
>0bb5	0d		          .byte     b_crlf
>0bb6	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>0bba	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>0bca	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>0bda	20 20 2a 00
>0bde	0d		headerb   .byte     $0d
>0bdf	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>0be3	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>0bf3	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>0c03	20 20 2a
>0c06	0d		          .byte     $0d
>0c07	20 2a 20 20	          .text               " *         page 29, exemple #6        *"
>0c0b	20 20 20 20 20 20 20 50 41 47 45 20 32 39 2c 20
>0c1b	45 58 45 4d 50 4c 45 20 23 36 20 20 20 20 20 20
>0c2b	20 20 2a
>0c2e	0d		          .byte     $0d
>0c2f	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0c33	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0c43	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0c53	20 20 2a
>0c56	0d		          .byte     $0d
>0c57	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0c5b	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0c6b	34 31 30 32 38 2d 32 32 30 34 30 30 2e 20 20 20
>0c7b	20 20 2a 20
>0c7f	90 00		          .byte     b_black,b_eot
>0c81	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0c84	20 20 20 20	          .text               "       RACCOURCIS DE L'EXEMPLE        "
>0c88	20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4 c5
>0c98	20 cc 27 c5 d8 c5 cd d0 cc c5 20 20 20 20 20 20
>0ca8	20 20
>0caa	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0cad	20 50 30 32	          .text     format(   " p029ex06: SYS %d ($%04X)",p029ex06, p029ex06)
>0cb1	39 45 58 30 36 3a 20 d3 d9 d3 20 32 31 33 34 20
>0cc1	28 24 30 38 35 36 29
>0cc8	0d		          .byte     b_crlf
>0cc9	20 41 49 44	          .text     format(   " aide....: SYS %d ($%04X)",help, help)
>0ccd	45 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 38 31 37 20
>0cdd	28 24 30 c2 30 31 29
>0ce4	0d		          .byte     b_crlf
>0ce5	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04X)",cls, cls)
>0ce9	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 34 33 31 20
>0cf9	28 24 30 c4 36 37 29
>0d00	0d 00		          .byte     b_crlf,b_eot
>0d02	0d 20 1c	helptext  .byte     b_crlf,b_space,b_red
>0d05	20 45 58 2e	          .text     format(   " ex.: SYS %d",p029ex06)
>0d09	3a 20 d3 d9 d3 20 32 31 33 34
>0d13	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0d16	20 2d 2d 2d	line      .text               " --------------------------------------"
>0d1a	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0d2a	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0d3a	2d 2d 2d
>0d3d	0d 00		          .byte     b_crlf,b_eot

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0d3f	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0d43	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0d47			libtart

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0d47			scrmaninit
.0d47	20 33 10	               jsr  push
.0d4a	a9 06		               lda  #vbleu
.0d4c	8d 21 d0	               sta  vicbackcol
.0d4f	a9 05		               lda  #vvert
.0d51	8d 20 d0	               sta  vicbordcol
.0d54	a9 01		               lda  #vblanc
.0d56	8d 86 02	               sta  bascol
.0d59	ad 00 04	               lda  scrnram
.0d5c	8d 00 04	               sta  scrnram
.0d5f	20 67 0d	               jsr  cls
.0d62	20 72 10	               jsr  pop
.0d65	60		               rts
>0d66	8e		characterset   .byte b_uppercase
.0d67			cls
.0d67	08		               php
.0d68	48		               pha
.0d69	a9 93		               lda  #$93
.0d6b	20 7e 0d	               jsr  putch
.0d6e	68		               pla
.0d6f	28		               plp
.0d70	60		               rts
.0d71			putnch
.0d71	08		               php
.0d72	e0 00		               cpx  #$00
.0d74	f0 06		               beq  out
.0d76	20 d2 ff	again          jsr  $ffd2
.0d79	ca		               dex
.0d7a	d0 fa		               bne  again
.0d7c	28		out            plp
.0d7d	60		               rts
.0d7e			putch
.0d7e	08		               php
.0d7f	20 d2 ff	               jsr  $ffd2
.0d82	28		               plp
.0d83	60		               rts
.0d84			puts
.0d84	20 33 10	               jsr  push
.0d87	86 fb		               stx  zpage1
.0d89	84 fc		               sty  zpage1+1
.0d8b	a0 00		               ldy  #0
.0d8d	b1 fb		next           lda  (zpage1),y
.0d8f	f0 09		               beq  exit
.0d91	20 7e 0d	               jsr  putch
.0d94	20 3a 11	               jsr  inczp1
.0d97	4c 8d 0d	               jmp  next
.0d9a	20 72 10	exit           jsr  pop
.0d9d	60		               rts
.0d9e			gotoxy
.0d9e	08		               php
.0d9f	18		               clc
.0da0	8a		               txa
.0da1	48		               pha
.0da2	98		               tya
.0da3	aa		               tax
.0da4	68		               pla
.0da5	a8		               tay
.0da6	20 f0 ff	               jsr  kplot
.0da9	28		               plp
.0daa	60		               rts
.0dab			cursor
=$0286			bascol    =    $0286
.0dab	08		               php
.0dac	48		               pha
.0dad	90 12		               bcc  restore
.0daf	20 f0 ff	               jsr  kplot
.0db2	8c d3 0d	               sty  cx
.0db5	8e d4 0d	               stx  cy
.0db8	ad 86 02	               lda  bascol
.0dbb	8d d5 0d	               sta  bcol
.0dbe	4c d0 0d	               jmp  out
.0dc1	ae d4 0d	restore        ldx  cy
.0dc4	ac d3 0d	               ldy  cx
.0dc7	20 f0 ff	               jsr  kplot
.0dca	ad d5 0d	               lda  bcol
.0dcd	8d 86 02	               sta  bascol
.0dd0	68		out            pla
.0dd1	28		               plp
.0dd2	60		               rts
>0dd3	00		cx   .byte     $00
>0dd4	00		cy   .byte     $00
>0dd5	00		bcol .byte     $00
.0dd6			cursave
.0dd6	08		               php
.0dd7	38		               sec
.0dd8	20 ab 0d	               jsr  cursor
.0ddb	28		               plp
.0ddc	60		               rts
.0ddd			curput
.0ddd	08		               php
.0dde	18		               clc
.0ddf	20 ab 0d	               jsr  cursor
.0de2	28		               plp
.0de3	60		               rts
.0de4			putsxy
.0de4	20 33 10	               jsr  push
.0de7	86 fb		               stx  zpage1
.0de9	84 fc		               sty  zpage1+1
.0deb	a0 00		               ldy  #$00
.0ded	b1 fb		               lda  (zpage1),y
.0def	aa		               tax
.0df0	20 3a 11	               jsr  inczp1
.0df3	b1 fb		               lda  (zpage1),y
.0df5	a8		               tay
.0df6	20 9e 0d	               jsr  gotoxy
.0df9	20 3a 11	               jsr  inczp1
.0dfc	a6 fb		               ldx  zpage1
.0dfe	a4 fc		               ldy  zpage1+1
.0e00	20 84 0d	               jsr  puts
.0e03	20 72 10	               jsr  pop
.0e06	60		               rts
>0e07	00 00		straddr   .word     $00
>0e09	00		px        .byte     $00
>0e0a	00		py        .byte     $00
>0e0b	00 00		zp1       .word     $00
.0e0d			putscxy
.0e0d	20 33 10	               jsr  push
.0e10	84 fc		               sty  zpage1+1
.0e12	86 fb		               stx  zpage1
.0e14	ad 86 02	               lda  bascol
.0e17	8d 37 0e	               sta  bc
.0e1a	a0 00		               ldy #$00
.0e1c	b1 fb		               lda  (zpage1),y
.0e1e	8d 86 02	               sta  bascol
.0e21	20 3a 11	               jsr  inczp1
.0e24	a6 fb		               ldx  zpage1
.0e26	a4 fc		               ldy  zpage1+1
.0e28	20 e4 0d	               jsr  putsxy
.0e2b	ad 37 0e	               lda  bc
.0e2e	8d 86 02	               sta  bascol
.0e31	20 72 10	               jsr  pop
.0e34	60		               rts
>0e35	00 00		straddr  .word      $00
>0e37	00		bc       .byte      $00
>0e38	00 00		zp1      .word      $00
.0e3a			putrahex
.0e3a	08		               php
.0e3b	48		               pha
.0e3c	20 50 12	               jsr  a2hex
.0e3f	a9 ef		               lda  #<a2hexstr
.0e41	a0 11		               ldy  #>a2hexstr
.0e43	20 84 0d	               jsr  puts
.0e46	68		               pla
.0e47	28		               plp
.0e48	60		               rts
.0e49			kputrahexxy
.0e49			bputrahexxy
.0e49			putrahexxy
.0e49	08		               php
.0e4a	20 50 12	               jsr  a2hex
.0e4d	a9 ec		               lda  #<a2hexpos
.0e4f	a0 11		               ldy  #>a2hexpos
.0e51	20 e4 0d	               jsr  putsxy
.0e54	68		               pla
.0e55	28		               plp
.0e56	60		               rts
.0e57			putrahexcxy
.0e57	08		               php
.0e58	20 50 12	               jsr  a2hex
.0e5b	a9 ec		               lda  #<a2hexpos
.0e5d	a0 11		               ldy  #>a2hexpos
.0e5f	20 0d 0e	               jsr  putscxy
.0e62	68		               pla
.0e63	28		               plp
.0e64	60		               rts
.0e65			setinverse
.0e65	48		               pha
.0e66	a9 12		               lda  #$12
.0e68	20 d2 ff	               jsr  $ffd2
.0e6b	68		               pla
.0e6c	60		               rts
.0e6d			clrinverse
.0e6d	48		               pha
.0e6e	a9 92		               lda  #$92
.0e70	20 d2 ff	               jsr  $ffd2
.0e73	68		               pla
.0e74	60		               rts

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.0e75			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.0e75	08		                php
.0e76	8d 27 10	                sta  rega
.0e79	68		                pla
.0e7a	8d 2a 10	                sta  regp
.0e7d	8e 28 10	                stx  regx
.0e80	8c 29 10	                sty  regy
.0e83	ba		                tsx
.0e84	8e 2b 10	                stx  regs
.0e87	68		                pla
.0e88	8d 2d 10	                sta  regpcl
.0e8b	8d 2e 10	                sta  regpcl2
.0e8e	68		                pla
.0e8f	8d 2c 10	                sta  regpch
.0e92	ad 27 10	                lda  rega
.0e95	48		                pha
.0e96	20 3d 12	                jsr  nib2hex
.0e99	8d ca 0f	                sta  vala+1
.0e9c	68		                pla
.0e9d	20 49 12	                jsr  lsra4bits
.0ea0	20 3d 12	                jsr  nib2hex
.0ea3	8d c9 0f	                sta  vala
.0ea6	ad 29 10	                lda  regy
.0ea9	48		                pha
.0eaa	20 3d 12	                jsr  nib2hex
.0ead	8d e0 0f	                sta  valy+1
.0eb0	68		                pla
.0eb1	20 49 12	                jsr  lsra4bits
.0eb4	20 3d 12	                jsr  nib2hex
.0eb7	8d df 0f	                sta  valy
.0eba	ad 28 10	                lda  regx
.0ebd	48		                pha
.0ebe	20 3d 12	                jsr  nib2hex
.0ec1	8d d5 0f	                sta  valx+1
.0ec4	68		                pla
.0ec5	20 49 12	                jsr  lsra4bits
.0ec8	20 3d 12	                jsr  nib2hex
.0ecb	8d d4 0f	                sta  valx
.0ece	ad 2a 10	                lda  regp
.0ed1	48		                pha
.0ed2	20 3d 12	                jsr  nib2hex
.0ed5	8d eb 0f	                sta  valp+1
.0ed8	68		                pla
.0ed9	20 49 12	                jsr  lsra4bits
.0edc	20 3d 12	                jsr  nib2hex
.0edf	8d ea 0f	                sta  valp
.0ee2	ad 2b 10	                lda  regs
.0ee5	48		                pha
.0ee6	20 3d 12	                jsr  nib2hex
.0ee9	8d f6 0f	                sta  vals+1
.0eec	68		                pla
.0eed	20 49 12	                jsr  lsra4bits
.0ef0	20 3d 12	                jsr  nib2hex
.0ef3	8d f5 0f	                sta  vals
.0ef6	ad 2c 10	                lda  regpch
.0ef9	48		                pha
.0efa	20 3d 12	                jsr  nib2hex
.0efd	8d 02 10	                sta  valpch+1
.0f00	68		                pla
.0f01	20 49 12	                jsr  lsra4bits
.0f04	20 3d 12	                jsr  nib2hex
.0f07	8d 01 10	                sta  valpch
.0f0a	ad 2d 10	                lda  regpcl
.0f0d	48		                pha
.0f0e	20 3d 12	                jsr  nib2hex
.0f11	8d 04 10	                sta  valpcl+1
.0f14	68		                pla
.0f15	20 49 12	                jsr  lsra4bits
.0f18	20 3d 12	                jsr  nib2hex
.0f1b	8d 03 10	                sta  valpcl
.0f1e	a5 fb		                lda  zpage1
.0f20	48		                pha
.0f21	20 3d 12	                jsr  nib2hex
.0f24	8d 13 10	                sta  valz1l
.0f27	68		                pla
.0f28	20 49 12	                jsr  lsra4bits
.0f2b	20 3d 12	                jsr  nib2hex
.0f2e	8d 14 10	                sta  valz1l+1
.0f31	a5 fc		                lda  zpage1+1
.0f33	48		                pha
.0f34	20 3d 12	                jsr  nib2hex
.0f37	8d 11 10	                sta  valz1h
.0f3a	68		                pla
.0f3b	20 49 12	                jsr  lsra4bits
.0f3e	20 3d 12	                jsr  nib2hex
.0f41	8d 12 10	                sta  valz1h+1
.0f44	a5 fd		                lda  zpage2
.0f46	48		                pha
.0f47	20 3d 12	                jsr  nib2hex
.0f4a	8d 23 10	                sta  valz2l
.0f4d	68		                pla
.0f4e	20 49 12	                jsr  lsra4bits
.0f51	20 3d 12	                jsr  nib2hex
.0f54	8d 24 10	                sta  valz2l+1
.0f57	a5 fe		                lda  zpage2+1
.0f59	48		                pha
.0f5a	20 3d 12	                jsr  nib2hex
.0f5d	8d 21 10	                sta  valz2h
.0f60	68		                pla
.0f61	20 49 12	                jsr  lsra4bits
.0f64	20 3d 12	                jsr  nib2hex
.0f67	8d 22 10	                sta  valz2h+1
.0f6a	20 65 0e	                jsr  setinverse
.0f6d	78		                sei
.0f6e	a2 c1		                ldx  #<srega
.0f70	a0 0f		                ldy  #>srega+1
.0f72	20 0d 0e	                jsr  putscxy
.0f75	a2 cc		                ldx  #<sregx
.0f77	a0 0f		                ldy  #>sregx+1
.0f79	20 0d 0e	                jsr  putscxy
.0f7c	a2 d7		                ldx  #<sregy
.0f7e	a0 0f		                ldy  #>sregy+1
.0f80	20 0d 0e	                jsr  putscxy
.0f83	a2 e2		                ldx  #<sregp
.0f85	a0 0f		                ldy  #>sregp+1
.0f87	20 0d 0e	                jsr  putscxy
.0f8a	a2 ed		                ldx  #<sregs
.0f8c	a0 0f		                ldy  #>sregs+1
.0f8e	20 0d 0e	                jsr  putscxy
.0f91	a2 f8		                ldx  #<sregpc
.0f93	a0 0f		                ldy  #>sregpc+1
.0f95	20 0d 0e	                jsr  putscxy
.0f98	a2 07		                ldx  #<sregz1
.0f9a	a0 10		                ldy  #>sregz1+1
.0f9c	20 0d 0e	                jsr  putscxy
.0f9f	a2 17		                ldx  #<sregz2
.0fa1	a0 10		                ldy  #>sregz2+1
.0fa3	20 0d 0e	                jsr  putscxy
.0fa6	58		                cli
.0fa7	20 6d 0e	                jsr  clrinverse
.0faa	ad 2c 10	                lda  regpch
.0fad	48		                pha
.0fae	ad 2d 10	                lda  regpcl
.0fb1	48		                pha
.0fb2	ac 29 10	                ldy  regy
.0fb5	ae 28 10	                ldx  regx
.0fb8	ad 2a 10	                lda  regp
.0fbb	48		                pha
.0fbc	ad 27 10	                lda  rega
.0fbf	28		                plp
.0fc0	60		                rts
>0fc1	01 00 00 17	srega   .byte   colr,bkcol,coln,line
>0fc5	20 41 3a 24	        .text   ' a:$' ;4,24
>0fc9	00 00 00	vala    .byte   0,0,0
>0fcc	01 00 06 17	sregx   .byte   colr,bkcol,coln+6,line
>0fd0	20 58 3a 24	        .text   ' x:$' ;4,24
>0fd4	00 00 00	valx    .byte   0,0,0
>0fd7	01 00 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>0fdb	20 59 3a 24	        .text   ' y:$' ;4,24
>0fdf	00 00 00	valy    .byte   0,0,0
>0fe2	01 00 12 17	sregp   .byte   colr,bkcol,coln+18,line
>0fe6	20 50 3a 24	        .text   ' p:$' ;4,24
>0fea	00 00 00	valp    .byte   0,0,0
>0fed	01 00 18 17	sregs   .byte   colr,bkcol,coln+24,line
>0ff1	20 53 3a 24	        .text   ' s:$' ;4,24
>0ff5	00 00 00	vals    .byte   0,0,0
>0ff8	01 00 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>0ffc	20 50 43 3a	        .text   ' pc:$' ;4,24
>1000	24
>1001	00 00		valpch  .byte   0,0
>1003	00 00 20 00	valpcl  .byte   0,0,32,0
>1007	01 00 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>100b	20 5a 50 31	        .text   ' zp1:$' ;4,24
>100f	3a 24
>1011	00 00		valz1h  .byte   0,0
>1013	00 00 20 00	valz1l  .byte   0,0,32,0
>1017	01 00 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>101b	20 5a 50 32	        .text   ' zp2:$' ;4,24
>101f	3a 24
>1021	00 00		valz2h  .byte   0,0
>1023	00 00 20 00	valz2l  .byte   0,0,32,0
>1027	00		rega    .byte   0
>1028	00		regx    .byte   0
>1029	00		regy    .byte   0
>102a	00		regp    .byte   0
>102b	00		regs    .byte   0
>102c	00		regpch  .byte   0
>102d	00		regpcl  .byte   0
>102e	00		regpcl2 .byte   0
>102f	00		vzp1h   .byte   0
>1030	00		vzp1l   .byte   0
>1031	00		vzp2h   .byte   0
>1032	00		vzp2l   .byte   0

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.1033			push
.1033	08		          php            ; stack : flg, pcl, pch
.1034	78		          sei
.1035	8d 6f 10	          sta  ra        ; save a
.1038	68		          pla            ; stack : pcl, pch
.1039	8d 6e 10	          sta  rp        ; save rp
.103c	68		          pla            ; stack : pch
.103d	8d 70 10	          sta  pc        ; save pcl
.1040	68		          pla            ; stack : -
.1041	8d 71 10	          sta  pc+1      ; save pch
.1044	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1046	48		          pha            ; stack : zp1l
.1047	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1049	48		          pha            ; stack : zp1h, zp1l
.104a	a5 fd		          lda  zpage2    ; get zpage2 low byte
.104c	48		          pha            ; stack : zp2l, zp1h, zp1l
.104d	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.104f	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1050	ad 6e 10	          lda  rp        ; get rp
.1053	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1054	ad 6f 10	          lda  ra        ; get a
.1057	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1058	8a		          txa            ; get x
.1059	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.105a	98		          tya            ; get y
.105b	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.105c	ad 71 10	          lda  pc+1      ; get pch
.105f	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1060	ad 70 10	          lda  pc        ; get pcl
.1063	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1064	ad 6e 10	          lda  rp        ; get rp
.1067	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1068	ad 6f 10	          lda  ra        ; get a
.106b	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.106c	58		          cli
.106d	60		          rts
>106e	00		rp        .byte     0
>106f	00		ra        .byte     0
>1070	00 00		pc        .word     0
.1072			pull
.1072			pop
.1072	78		          sei
.1073	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1074	8d a7 10	          sta  pc        ; save pcl
.1077	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1078	8d a8 10	          sta  pc+1      ; save pch
.107b	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.107c	a8		          tay            ; set y
.107d	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.107e	aa		          tax            ; set x
.107f	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1080	8d a6 10	          sta  ra        ; save a
.1083	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1084	8d a5 10	          sta  rp        ; save rp
.1087	68		          pla            ; stack : zp2l, zp1h, zp1l
.1088	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.108a	68		          pla            ; stack : zp1h, zp1l
.108b	85 fd		          sta  zpage2    ; get zpage2 High byte
.108d	68		          pla            ; stack : zp1l
.108e	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1090	68		          pla            ; stack :
.1091	85 fb		          sta  zpage1    ; get zpage1 High byte
.1093	ad a8 10	          lda  pc+1      ; get pch
.1096	48		          pha            ; stack : pch
.1097	ad a7 10	          lda  pc
.109a	48		          pha            ; stack : pcl, pch
.109b	ad a5 10	          lda  rp        ; get rp
.109e	48		          pha            ; stack : rp, pcl, pch
.109f	ad a6 10	          lda  ra        ; set ra
.10a2	58		          cli
.10a3	28		          plp            ; stack : pcl, pch
.10a4	60		          rts
>10a5	00		rp        .byte     0
>10a6	00		ra        .byte     0
>10a7	00 00		pc        .word     0

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.10a9			blkfill
.10a9	20 33 10	bf0            jsr  push
.10ac	20 6a 11	               jsr  savezp1
.10af	84 fc		               sty  zpage1+1
.10b1	a0 00		               ldy  #$00
.10b3	84 fb		               sty  zpage1
.10b5	91 fb		bf1            sta  (zpage1),y
.10b7	c8		               iny
.10b8	d0 fb		               bne  bf1
.10ba	20 79 11	               jsr  restzp1
.10bd	20 72 10	               jsr  pop
.10c0	60		               rts
.10c1			memfill
.10c1	20 33 10	               jsr  push
.10c4	20 a9 10	mf1            jsr  blkfill
.10c7	c8		               iny
.10c8	ca		               dex
.10c9	d0 f9		               bne  mf1
.10cb	20 72 10	               jsr  pop
.10ce	60		               rts
.10cf			memmove
.10cf	20 33 10	               jsr  push
.10d2	ba		               tsx            ; On se crée un pointeur ...
.10d3	8a		               txa
.10d4	18		               clc
.10d5	69 0b		               adc  #11
.10d7	a8		               tay
.10d8	a2 06		               ldx  #$06
.10da	b9 00 01	nextbyte       lda  $0100,y
.10dd	99 29 11	               sta  words,y
.10e0	c8		               iny
.10e1	ca		               dex
.10e2	d0 f6		               bne  nextbyte
.10e4	ad 29 11	               lda  s
.10e7	8d 00 11	               sta  source+1
.10ea	ad 2a 11	               lda  s+1
.10ed	8d 01 11	               sta  source+2
.10f0	ad 2b 11	               lda  d
.10f3	8d fd 10	               sta  destin+1
.10f6	ad 2c 11	               lda  d+1
.10f9	8d fe 10	               sta  destin+2
.10fc	ad ff ff	destin         lda  $ffff
.10ff	8d ff ff	source         sta  $ffff
.1102	ee fd 10	               inc  destin+1
.1105	d0 03		               bne  src
.1107	ee fe 10	               inc  destin+2
.110a	ee 00 11	src            inc  source+1
.110d	d0 03		               bne  cnt
.110f	ee 01 11	               inc  source+2
.1112	ad 2d 11	cnt            lda  compte
.1115	d0 08		               bne  decit
.1117	ad 2e 11	               lda  compte+1
.111a	f0 09		               beq  fini
.111c	ce 2e 11	               dec  compte+1
.111f	ce 2d 11	decit          dec  compte
.1122	4c fc 10	               jmp  destin
.1125	20 72 10	fini           jsr  pop
.1128	60		               rts
.1129			words
>1129	00 00		s         .word     $0000
>112b	00 00		d         .word     $0000
>112d	00 00		compte    .word     $0000
.112f			decword
.112f	20 33 10	               jsr  push
.1132	86 fd		               stx  zpage2
.1134	84 fe		               sty  zpage2+1
.1136	20 72 10	               jsr  pop
.1139	60		               rts
.113a			inczp1
.113a	08		               php
.113b	48		               pha
.113c	e6 fb		               inc  zpage1
.113e	a5 fb		               lda  zpage1
.1140	d0 02		               bne  nopage
.1142	e6 fc		               inc  zpage1+1
.1144	68		nopage         pla
.1145	28		               plp
.1146	60		               rts
.1147			deczp1
.1147	08		                php
.1148	48		                pha
.1149	c6 fb		                dec  zpage1
.114b	d0 02		                bne  nopage
.114d	c6 fc		                dec  zpage1+1
.114f	68		nopage          pla
.1150	28		                plp
.1151	60		                rts
.1152			inczp2
.1152	08		               php
.1153	48		               pha
.1154	e6 fd		               inc  zpage2
.1156	a5 fd		               lda  zpage2
.1158	d0 02		               bne  nopage
.115a	e6 fe		               inc  zpage2+1
.115c	68		nopage         pla
.115d	28		               plp
.115e	60		               rts
.115f			deczp2
.115f	08		               php
.1160	48		               pha
.1161	a5 fd		               lda  zpage2
.1163	d0 02		               bne  nopage
.1165	c6 fe		               dec  zpage2+1
.1167	68		nopage         pla
.1168	28		               plp
.1169	60		               rts
.116a			savezp1
.116a	08		               php
.116b	48		               pha
.116c	a5 fb		               lda  zpage1
.116e	8d e6 11	               sta  zp1
.1171	a5 fc		               lda  zpage1+1
.1173	8d e7 11	               sta  zp1+1
.1176	68		               pla
.1177	28		               plp
.1178	60		               rts
.1179			restzp1
.1179	08		               php
.117a	48		               pha
.117b	ad e6 11	               lda zp1
.117e	85 fb		               sta zpage1
.1180	ad e7 11	               lda zp1+1
.1183	85 fc		               sta zpage1+1
.1185	68		               pla
.1186	28		               plp
.1187	60		               rts
.1188			savezp2
.1188	08		         php
.1189	48		         pha
.118a	a5 fd		         lda zpage2
.118c	8d e8 11	         sta zp2
.118f	a5 fe		         lda zpage2+1
.1191	8d e9 11	         sta zp2+1
.1194	68		         pla
.1195	28		         plp
.1196	60		         rts
.1197			restzp2
.1197	08		                php
.1198	48		                pha
.1199	ad e8 11	                lda  zp2
.119c	85 fd		                sta  zpage2
.119e	ad e9 11	                lda  zp2+1
.11a1	85 fe		                sta  zpage2+1
.11a3	68		                pla
.11a4	28		                plp
.11a5	60		                rts
.11a6			xy2addr
.11a6	08		                php
.11a7	48		                pha
.11a8	8a		                txa
.11a9	48		                pha
.11aa	98		                tya
.11ab	48		                pha
.11ac	ad e1 11	                lda     addr1+1
.11af	8d e3 11	                sta     addr2+1
.11b2	ad e0 11	                lda     addr1
.11b5	8d e2 11	                sta     addr2
.11b8	c0 00		                cpy     #$00
.11ba	f0 0f		                beq     addx
.11bc	18		moreline        clc
.11bd	6d df 11	                adc     ymult
.11c0	90 03		                bcc     norepy
.11c2	ee e3 11	                inc     addr2+1
.11c5	8d e2 11	norepy          sta     addr2
.11c8	88		                dey
.11c9	d0 f1		                bne     moreline
.11cb	8a		addx            txa
.11cc	18		                clc
.11cd	6d e2 11	                adc     addr2
.11d0	90 03		                bcc     thatsit
.11d2	ee e3 11	                inc     addr2+1
.11d5	8d e2 11	thatsit         sta     addr2
.11d8	68		                pla
.11d9	a8		                tay
.11da	68		                pla
.11db	aa		                tax
.11dc	68		                pla
.11dd	28		                plp
.11de	60		                rts
>11df	28		ymult          .byte     40
>11e0	00 00		addr1          .word     $0000
>11e2	00 00		addr2          .word     $0000
>11e4	00 00		bytecnt        .word     $0000
>11e6	00 00		zp1        .word   $0000
>11e8	00 00		zp2        .word   $0000

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>11ea	01		a2hexcol       .byte     1              ; pour aputscxy
>11eb	00		a2hexbkcol     .byte     %00000000
.11ec			a2hexpos
>11ec	00		a2hexpx        .byte     0              ; pour aputsxy
>11ed	00		a2hexpy        .byte     0
>11ee	24		a2hexprefix    .byte     "$"            ; pour aputs
>11ef	00 00		a2hexstr       .word     $00
>11f1	00 00		               .word     $00
>11f3	00		               .byte     0              ; 0 end string
>11f4	30 30 30 30	abin           .null     "00000000"
>11f8	30 30 30 30 00
>11fd	20 20 20 00	adec           .null     "   "
.1201			putahexfmtxy
.1201	20 33 10	               jsr  push
.1204	20 50 12	               jsr  a2hex
.1207	ae ec 11	               ldx  a2hexpx
.120a	ac ed 11	               ldy  a2hexpy
.120d	20 9e 0d	               jsr  gotoxy
.1210	a2 ee		               ldx  #<a2hexprefix
.1212	a0 11		               ldy  #>a2hexprefix
.1214	20 84 0d	               jsr  puts
.1217	20 72 10	               jsr  pop
.121a	60		               rts
.121b			putahexfmt
.121b	20 33 10	               jsr  push
.121e	20 50 12	               jsr  a2hex
.1221	a2 ee		               ldx  #<a2hexprefix
.1223	a0 11		               ldy  #>a2hexprefix
.1225	20 84 0d	               jsr  puts
.1228	20 72 10	               jsr  pop
.122b	60		               rts
.122c			putahex
.122c	20 33 10	               jsr  push
.122f	20 50 12	               jsr  a2hex
.1232	a2 ef		               ldx  #<a2hexstr
.1234	a0 11		               ldy  #>a2hexstr
.1236	20 84 0d	               jsr  puts
.1239	20 72 10	               jsr  pop
.123c	60		               rts
.123d			nib2hex
.123d	08		               php
.123e	29 0f		               and  #$0f
.1240	f8		               sed
.1241	18		               clc
.1242	69 90		               adc  #$90
.1244	69 40		               adc  #$40
.1246	d8		               cld
.1247	28		               plp
.1248	60		               rts
.1249			lsra4bits
.1249	08		               php
.124a	4a		               lsr
.124b	4a		               lsr
.124c	4a		               lsr
.124d	4a		               lsr
.124e	28		               plp
.124f	60		               rts
.1250			a2hex
.1250	08		               php
.1251	48		               pha
.1252	48		               pha
.1253	20 49 12	               jsr  lsra4bits
.1256	20 3d 12	               jsr  nib2hex
.1259	8d ef 11	               sta  a2hexstr
.125c	68		               pla
.125d	20 3d 12	               jsr  nib2hex
.1260	8d f0 11	               sta  a2hexstr+1
.1263	a9 00		               lda  #$00                ; set end of string
.1265	8d f1 11	               sta  a2hexstr+2
.1268	68		               pla
.1269	28		               plp
.126a	60		               rts
.126b			xy2hex
.126b	20 33 10	               jsr  push
.126e	20 50 12	               jsr  a2hex
.1271	8a		               txa
.1272	48		               pha
.1273	20 49 12	               jsr  lsra4bits
.1276	20 3d 12	               jsr  nib2hex
.1279	8d ef 11	               sta  a2hexstr
.127c	68		               pla
.127d	20 3d 12	               jsr  nib2hex
.1280	8d f0 11	               sta  a2hexstr+1
.1283	98		               tya
.1284	48		               pha
.1285	20 49 12	               jsr  lsra4bits
.1288	20 3d 12	               jsr  nib2hex
.128b	8d f1 11	               sta  a2hexstr+2
.128e	68		               pla
.128f	20 3d 12	               jsr  nib2hex
.1292	8d f2 11	               sta  a2hexstr+3
.1295	a9 00		               lda  #$00                ; 0 ended string
.1297	8d f3 11	               sta  a2hexstr+4
.129a	20 72 10	               jsr  pop
.129d			atobin
.129d	20 33 10	               jsr  push
.12a0	a2 08		               ldx  #8
.12a2	a0 00		               ldy  #0
.12a4	18		               clc
.12a5	2a		nextbit        rol
.12a6	48		               pha
.12a7	69 00		               adc  #$00
.12a9	29 01		               and  #$01
.12ab	20 3d 12	               jsr  nib2hex
.12ae	99 f4 11	               sta  abin,y
.12b1	68		               pla
.12b2	c8		               iny
.12b3	ca		               dex
.12b4	d0 ef		               bne  nextbit
.12b6	a9 00		               lda  #0
.12b8	99 f4 11	               sta  abin,y
.12bb	20 72 10	               jsr  pull
.12be	60		               rts
.12bf			putabin
.12bf	20 9d 12	               jsr     atobin
.12c2	20 33 10	               jsr     push
.12c5	a2 f4		               ldx     #<abin
.12c7	a0 11		               ldy     #>abin
.12c9	20 84 0d	               jsr     puts
.12cc	20 72 10	               jsr     pop
.12cf	60		               rts
.12d0			printabin
.12d0	20 33 10	               jsr     push
.12d3	a2 f4		               ldx     #<abin
.12d5	a0 11		               ldy     #>abin
.12d7	20 84 0d	               jsr     puts
.12da	20 72 10	               jsr     pop
.12dd	60		               rts
.12de			putabinfmt
.12de	08		               php
.12df	48		               pha
.12e0	a9 25		               lda     #"%"
.12e2	20 7e 0d	               jsr     putch
.12e5	68		               pla
.12e6	20 bf 12	               jsr     putabin
.12e9	28		               plp
.12ea	60		               rts
.12eb			putabinxy
.12eb	20 9e 0d	               jsr     gotoxy
.12ee	20 bf 12	               jsr     putabin
.12f1	60		               rts
.12f2			putabinfmtxy
.12f2	20 9e 0d	               jsr     gotoxy
.12f5	20 de 12	               jsr     putabinfmt
.12f8	60		               rts
.12f9			atodec
.12f9	20 33 10	               jsr  push
.12fc	f8		               sed
.12fd	aa		               tax
.12fe	a0 00		               ldy  #$00
.1300	a9 00		               lda  #$00
.1302	18		nextbit        clc
.1303	69 01		               adc  #$01
.1305	90 01		               bcc  decx
.1307	c8		               iny
.1308	ca		decx           dex
.1309	d0 f7		               bne  nextbit
.130b	48		               pha
.130c	98		               tya
.130d	20 3d 12	               jsr  nib2hex
.1310	8d fd 11	               sta  adec
.1313	68		               pla
.1314	48		               pha
.1315	20 3d 12	               jsr  nib2hex
.1318	8d ff 11	               sta  adec+2
.131b	68		               pla
.131c	6a		               ror
.131d	6a		               ror
.131e	6a		               ror
.131f	6a		               ror
.1320	20 3d 12	               jsr  nib2hex
.1323	8d fe 11	               sta  adec+1
.1326	d8		               cld
.1327	20 72 10	               jsr  pull
.132a	60		               rts
>132b	00 00 00	buffer         .byte     0,0,0
.132e			putadec
.132e	20 33 10	               jsr  push
.1331	20 f9 12	               jsr  atodec
.1334	a2 fd		               ldx  #<adec
.1336	a0 11		               ldy  #>adec+1
.1338	20 84 0d	               jsr  puts
.133b	20 72 10	               jsr  pop
.133e	60		               rts

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>133f	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1343	00 00 00 00 00 00 00 00 00 0d 00 00
>134f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1353	00 00 00 00 00 00 00 00 00 00 00 00
>135f	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1363	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>136f	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1373	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>137f	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1383	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>138f	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1393	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>139f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>13a3	00 00 00 00 00 00 00 00 00 00 00 00
>13af	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>13b3	00 00 00 00 00 00 00 00 00 00 00 00
>13bf	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>13c3	00 00 00 00 00 00 00 00 00 00 00 00
>13cf	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>13d3	00 00 00 00 00 00 00 00 00 00 00 00
>13df	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>13e3	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>13ef	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>13f3	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>13ff	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1403	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>140f	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1413	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>141f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1423	00 00 00 00 00 00 00 00 00 00 00 00
>142f	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1433	00 00 00 00 00 00 00 00 00 00 00 00
.143f			waitstop
.143f	20 33 10	               jsr  push
.1442	20 ed f6	wait           jsr  k_stop
.1445	d0 fb		               bne  wait
.1447	20 72 10	               jsr  pop
.144a	60		               rts
.144b			anykey
.144b	08		               php
.144c	48		               pha
.144d	a5 cb		nokey          lda 203
.144f	c9 40		               cmp #64
.1451	f0 fa		               beq nokey
.1453	20 59 14	               jsr releasekey
.1456	68		               pla
.1457	28		               plp
.1458	60		               rts
.1459			releasekey
.1459	08		               php
.145a	48		               pha
.145b	a5 cb		keypressed     lda 203
.145d	c9 40		               cmp #64
.145f	d0 fa		               bne keypressed
.1461	68		               pla
.1462	28		               plp
.1463	60		               rts
.1464			getkey
.1464	20 e4 ff	again          jsr  getin
.1467	c9 00		               cmp  #0
.1469	f0 f9		               beq  again
.146b	60		               rts
.146c			kbflushbuff
.146c	08		               php
.146d	48		               pha
.146e	20 e4 ff	again          jsr  getin
.1471	c9 00		               cmp  #0
.1473	d0 f9		               bne  again
.1475	68		               pla
.1476	28		               plp
.1477	60		               rts
.1478			waitkey
.1478	20 33 10	               jsr  push
.147b	8d c9 14	               sta  thekey
.147e	20 e4 ff	nope           jsr  getin
.1481	20 d2 ff	               jsr  chrout
.1484	cd c9 14	               cmp  thekey
.1487	d0 f5		               bne  nope
.1489	20 d2 ff	               jsr  chrout
.148c	20 72 10	               jsr  pop
.148f	60		               rts
.1490			waitspace
.1490	20 33 10	               jsr  push
.1493	a9 7f		wait           lda  #$7f  ;%01111111
.1495	8d 00 dc	               sta  $dc00
.1498	ad 01 dc	               lda  $dc01
.149b	29 10		               and  #$10  ;mask %00010000
.149d	d0 f4		               bne  wait
.149f	20 72 10	               jsr  pop
.14a2			waitsstop
.14a2	20 33 10	               jsr  push
.14a5	20 ed f6	wait           jsr  k_stop  ;%01111111
.14a8	d0 fb		               bne  wait
.14aa	20 72 10	               jsr  pop
.14ad			waitreturn
.14ad	20 33 10	               jsr  push
.14b0	ad ca 14	               lda  thecount
.14b3	8d 00 04	               sta  scrnram
.14b6	a9 02		               lda  #$02
.14b8	8d 00 d8	               sta  colorram
.14bb	20 e4 ff	nope           jsr  getin
.14be	c9 0d		nohex          cmp  #$0d
.14c0	d0 f9		               bne  nope
.14c2	ee ca 14	               inc  thecount
.14c5	20 72 10	               jsr  pop
.14c8	60		               rts
>14c9	00		thekey         .byte   0
>14ca	01		thecount       .byte   $01

;******  Return to file: p029ex06.asm


;******  End of listing

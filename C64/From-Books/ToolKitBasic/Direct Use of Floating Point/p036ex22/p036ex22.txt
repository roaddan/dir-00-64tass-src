
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p036ex22.txt -o p036ex22.prg p036ex22.asm
; Wed Oct 30 21:17:24 2024

;Offset	;Hex		;Source

;******  Processing input file: p036ex22.asm

="20241030-205806"	           Version = "20241030-205806"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 27 0a	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p036ex22.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p036ex22.asm

.0854			p036ex22
.0854	20 98 0e	          jsr  push           ; Sauvegarde le statut complet.
.0857			again
.0857	48		               pha
.0858	a9 03		               lda  #ccyan
.085a	8d 20 d0	               sta  $d020
.085d	68		               pla
.085e	48		               pha
.085f	a9 01		               lda  #cblanc
.0861	8d 21 d0	               sta  $d021
.0864	68		               pla
.0865	48		               pha
.0866	a9 06		               lda  #cbleu
.0868	8d 86 02	               sta  bascol
.086b	68		               pla
.086c	20 8a 0d	          jsr  cls            ; On efface l'écran.
.086f	20 98 0e	               jsr  push
.0872	a2 05		isx            ldx  #<ttext
.0874	a0 09		isy            ldy  #>ttext
.0876	20 a7 0d	               jsr  puts
.0879	20 d7 0e	               jsr  pull
.087c	20 98 0e	               jsr  push
.087f	a2 6b		isx            ldx  #<ptextva
.0881	a0 09		isy            ldy  #>ptextva
.0883	20 a7 0d	               jsr  puts
.0886	20 d7 0e	               jsr  pull
.0889	20 0f 0d	          jsr  insub          ; Lit le premier nombre.
.088c	20 ca bb	          jsr  b_f1t57
.088f	20 98 0e	               jsr  push
.0892	a2 88		isx            ldx  #<ptext1b
.0894	a0 09		isy            ldy  #>ptext1b
.0896	20 a7 0d	               jsr  puts
.0899	20 d7 0e	               jsr  pull
.089c	20 0f 0d	          jsr  insub          ; Lit le premier nombre.
.089f	a9 57		          lda  #$57
.08a1	a0 00		          ldy  #$00
.08a3	20 0f bb	          jsr  b_fvdf1
.08a6	20 ca bb	          jsr  b_f1t57
.08a9	20 cc bc	          jsr  b_int
.08ac	20 c7 bb	          jsr  b_f1t5c
.08af	20 dd bd	          jsr  b_facasc
.08b2	20 98 0e	               jsr  push
.08b5	a2 df		isx            ldx  #<restxt1
.08b7	a0 09		isy            ldy  #>restxt1
.08b9	20 a7 0d	               jsr  puts
.08bc	20 d7 0e	               jsr  pull
.08bf	20 f1 0c	          jsr  outsub         ; Affiche la valeur finale.
.08c2	a9 0d		          lda  #$0d
.08c4	20 d2 ff	          jsr  $ffd2
.08c7	20 98 0e	               jsr  push
.08ca	a2 e7		isx            ldx  #<query
.08cc	a0 08		isy            ldy  #>query
.08ce	20 a7 0d	               jsr  puts
.08d1	20 d7 0e	               jsr  pull
.08d4	20 c9 12	          jsr  getkey
.08d7	29 7f		          and  #$7f
.08d9	c9 4f		          cmp  #'o'
.08db	d0 03		          bne  out
.08dd	4c 57 08	          jmp again
.08e0	20 b3 0a	out       jsr  aide
.08e3	20 d7 0e	          jsr  pop            ; Récupère le statut complet.
.08e6	60		          rts
>08e7	9a 20 0d	query     .byte     b_ltblue,b_space,b_crlf
>08ea	20 20 20 d5	          .text     "   Un autre calcul (o/N)?"
>08ee	4e 20 41 55 54 52 45 20 43 41 4c 43 55 4c 20 28
>08fe	4f 2f ce 29 3f
>0903	0d 00		          .byte     b_crlf,b_eot
>0905	1f 20 12	ttext     .byte     b_blue,b_space,b_rvs_on
>0908	20 d0 2e c6	          .text      " P.F. - FAC1 = ENTIER DE (FVAR/FAC1)  "
>090c	2e 20 2d 20 c6 c1 c3 31 20 3d 20 c5 ce d4 c9 c5
>091c	d2 20 c4 c5 20 28 c6 d6 c1 d2 2f c6 c1 c3 31 29
>092c	20 20
>092e	92 0d 00	          .byte     b_rvs_off,b_crlf,b_eot
>0931	0d 9c 20	ptext1a   .byte     b_crlf, b_purple, b_space
>0934	20 c5 4e 54	          .text     " Entez la valeur de FAC1"
>0938	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>0948	c6 c1 c3 31
>094c	90 00		          .byte     b_black,b_eot
>094e	0d 9c 20	ptext2a   .byte     b_crlf, b_purple, b_space
>0951	20 c5 4e 54	          .text     " Entez la valeur de FAC2"
>0955	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>0965	c6 c1 c3 32
>0969	90 00		          .byte     b_black,b_eot
>096b	0d 9c 20	ptextva   .byte     b_crlf, b_purple, b_space
>096e	20 c5 4e 54	          .text     " Entez la valeur de FVAR"
>0972	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>0982	c6 d6 c1 d2
>0986	90 00		          .byte     b_black,b_eot
>0988	0d 9c 20	ptext1b   .byte     b_crlf, b_purple, b_space
>098b	20 20 20 20	          .text     "      puis celle de FAC1"
>098f	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>099f	c6 c1 c3 31
>09a3	90 00		          .byte     b_black,b_eot
>09a5	0d 9c 20	ptext2b   .byte     b_crlf, b_purple, b_space
>09a8	20 20 20 20	          .text     "      puis celle de FAC2"
>09ac	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>09bc	c6 c1 c3 32
>09c0	90 00		          .byte     b_black,b_eot
>09c2	0d 9c 20	ptextvb   .byte     b_crlf, b_purple, b_space
>09c5	20 20 20 20	          .text     "      puis celle de FVAR"
>09c9	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>09d9	c6 d6 c1 d2
>09dd	90 00		          .byte     b_black,b_eot
>09df	1e 0d		restxt1   .byte     b_green,b_crlf
>09e1	20 d2 45 53	          .text    " Resultat dans FAC1="
>09e5	55 4c 54 41 54 20 44 41 4e 53 20 c6 c1 c3 31 3d
>09f5	90 00		          .byte     b_black,b_eot
>09f7	1e 0d		restxt2   .byte     b_green,b_crlf
>09f9	20 d2 45 53	          .text    " Resultat dans FAC2="
>09fd	55 4c 54 41 54 20 44 41 4e 53 20 c6 c1 c3 32 3d
>0a0d	90 00		          .byte     b_black,b_eot
>0a0f	1e 0d		restxtv   .byte     b_green,b_crlf
>0a11	20 d2 45 53	          .text    " Resultat dans FVAR="
>0a15	55 4c 54 41 54 20 44 41 4e 53 20 c6 d6 c1 d2 3d
>0a25	90 00		          .byte     b_black,b_eot
.0a27			main
.0a27	20 6a 0d	          jsr       scrmaninit
.0a2a	08		               php
.0a2b	48		               pha
.0a2c	a9 08		               lda  #$08
.0a2e	20 d2 ff	               jsr  $ffd2
.0a31	68		               pla
.0a32	28		               plp
.0a33	48		               pha
.0a34	a9 03		               lda  #ccyan
.0a36	8d 20 d0	               sta  $d020
.0a39	68		               pla
.0a3a	48		               pha
.0a3b	a9 01		               lda  #cblanc
.0a3d	8d 21 d0	               sta  $d021
.0a40	68		               pla
.0a41	48		               pha
.0a42	a9 06		               lda  #cbleu
.0a44	8d 86 02	               sta  bascol
.0a47	68		               pla
.0a48	20 69 0a	          jsr       bookinfo
.0a4b	20 33 0d	          jsr       akey
.0a4e	20 8a 0d	          jsr       cls
.0a51	20 b3 0a	          jsr       aide
.0a54	20 33 0d	          jsr       akey
.0a57	a9 0d		          lda       #b_crlf
.0a59	20 d2 ff	          jsr       $ffd2
.0a5c	20 54 08	          jsr       p036ex22
.0a5f	08		               php
.0a60	48		               pha
.0a61	a9 09		               lda  #$09
.0a63	20 d2 ff	               jsr  $ffd2
.0a66	68		               pla
.0a67	28		               plp
.0a68	60		          rts
.0a69			bookinfo
.0a69	20 98 0e	          jsr  push           ; Sauvegarde le statut complet.
.0a6c	08		               php
.0a6d	48		               pha
.0a6e	a9 0e		               lda  #14
.0a70	8d 89 0d	               sta  characterset
.0a73	20 d2 ff	               jsr  $ffd2
.0a76	68		               pla
.0a77	28		               plp
.0a78	20 8a 0d	          jsr       cls
.0a7b	20 98 0e	               jsr  push
.0a7e	a2 c8		isx            ldx  #<line
.0a80	a0 0c		isy            ldy  #>line
.0a82	20 a7 0d	               jsr  puts
.0a85	20 d7 0e	               jsr  pull
.0a88	20 98 0e	               jsr  push
.0a8b	a2 f0		isx            ldx  #<headera
.0a8d	a0 0a		isy            ldy  #>headera
.0a8f	20 a7 0d	               jsr  puts
.0a92	20 d7 0e	               jsr  pull
.0a95	20 98 0e	               jsr  push
.0a98	a2 90		isx            ldx  #<headerb
.0a9a	a0 0b		isy            ldy  #>headerb
.0a9c	20 a7 0d	               jsr  puts
.0a9f	20 d7 0e	               jsr  pull
.0aa2	20 98 0e	               jsr  push
.0aa5	a2 c8		isx            ldx  #<line
.0aa7	a0 0c		isy            ldy  #>line
.0aa9	20 a7 0d	               jsr  puts
.0aac	20 d7 0e	               jsr  pull
.0aaf	20 d7 0e	          jsr  pop            ; Récupère le statut complet.
.0ab2	60		          rts
.0ab3			aide
.0ab3	20 98 0e	          jsr  push           ; Sauvegarde le statut complet.
.0ab6	08		               php
.0ab7	48		               pha
.0ab8	a9 0e		               lda  #14
.0aba	8d 89 0d	               sta  characterset
.0abd	20 d2 ff	               jsr  $ffd2
.0ac0	68		               pla
.0ac1	28		               plp
.0ac2	20 8a 0d	          jsr       cls
.0ac5	20 98 0e	               jsr  push
.0ac8	a2 33		isx            ldx  #<shortcuts
.0aca	a0 0c		isy            ldy  #>shortcuts
.0acc	20 a7 0d	               jsr  puts
.0acf	20 d7 0e	               jsr  pull
.0ad2	20 98 0e	               jsr  push
.0ad5	a2 b4		isx            ldx  #<aidetext
.0ad7	a0 0c		isy            ldy  #>aidetext
.0ad9	20 a7 0d	               jsr  puts
.0adc	20 d7 0e	               jsr  pull
.0adf	20 98 0e	               jsr  push
.0ae2	a2 c8		isx            ldx  #<line
.0ae4	a0 0c		isy            ldy  #>line
.0ae6	20 a7 0d	               jsr  puts
.0ae9	20 d7 0e	               jsr  pull
.0aec	20 d7 0e	          jsr  pop            ; Récupère le statut complet.
.0aef	60		          rts
.0af0			headera
>0af0	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>0af4	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>0b04	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>0b14	20 20 2a
>0b17	0d		          .byte     b_crlf
>0b18	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>0b1c	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>0b2c	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>0b3c	20 20 2a
>0b3f	0d		          .byte     b_crlf
>0b40	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>0b44	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>0b54	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>0b64	20 20 2a
>0b67	0d		          .byte     b_crlf
>0b68	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>0b6c	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>0b7c	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>0b8c	20 20 2a 00
>0b90	0d		headerb   .byte     $0d
>0b91	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>0b95	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>0ba5	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>0bb5	20 20 2a
>0bb8	0d		          .byte     $0d
>0bb9	20 2a 20 20	          .text               " *        page 36, exemple #22        *"
>0bbd	20 20 20 20 20 20 50 41 47 45 20 33 36 2c 20 45
>0bcd	58 45 4d 50 4c 45 20 23 32 32 20 20 20 20 20 20
>0bdd	20 20 2a
>0be0	0d		          .byte     $0d
>0be1	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0be5	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0bf5	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0c05	20 20 2a
>0c08	0d		          .byte     $0d
>0c09	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0c0d	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0c1d	34 31 30 33 30 2d 32 30 35 38 30 36 2e 20 20 20
>0c2d	20 20 2a 20
>0c31	90 00		          .byte     b_black,b_eot
>0c33	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0c36	20 20 20 20	          .text               "       RACCOURCIS DE L'EXEMPLE        "
>0c3a	20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4 c5
>0c4a	20 cc 27 c5 d8 c5 cd d0 cc c5 20 20 20 20 20 20
>0c5a	20 20
>0c5c	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0c5f	20 50 30 33	          .text     format(   " p036ex22: SYS %d ($%04X)",p036ex22, p036ex22)
>0c63	36 45 58 32 32 3a 20 d3 d9 d3 20 32 31 33 32 20
>0c73	28 24 30 38 35 34 29
>0c7a	0d		          .byte     b_crlf
>0c7b	20 41 49 44	          .text     format(   " aide....: SYS %d ($%04X)",aide, aide)
>0c7f	45 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 37 33 39 20
>0c8f	28 24 30 c1 c2 33 29
>0c96	0d		          .byte     b_crlf
>0c97	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04X)",cls, cls)
>0c9b	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 34 36 36 20
>0cab	28 24 30 c4 38 c1 29
>0cb2	0d 00		          .byte     b_crlf,b_eot
>0cb4	0d 20 1c	aidetext  .byte     b_crlf,b_space,b_red
>0cb7	20 45 58 2e	          .text     format(   " ex.: SYS %d",p036ex22)
>0cbb	3a 20 d3 d9 d3 20 32 31 33 32
>0cc5	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0cc8	20 2d 2d 2d	line      .text               " --------------------------------------"
>0ccc	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0cdc	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0cec	2d 2d 2d
>0cef	0d 00		          .byte     b_crlf,b_eot

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/toolkitbasic.asm

.0cf1			outsub
.0cf1	20 98 0e	          jsr  push           ; Sauvegarde le statut complet.
.0cf4	a0 ff		          ldy  #$ff           ; On détermine
.0cf6	c8		nxtchr    iny                 ;  le nombre de caractères
.0cf7	b9 00 01	          lda  $0100,y        ;  qu'il y a dans la chaine à afficher.
.0cfa	d0 fa		          bne  nxtchr
.0cfc	c8		          iny                 ; On ajoute 1 au nombre trouvé pour compenser
.0cfd	98		          tya                 ;  l'adresse a y=0.
.0cfe	48		          pha                 ; Sauvegarde ce nombre.
.0cff	a9 00		          lda  #$00           ; On prépare le pointeur $22-$23
.0d01	85 22		          sta  $22            ;  en le peuplant avec
.0d03	a9 01		          lda  #$01           ;  l'adresse ou se trouve la chaine
.0d05	85 23		          sta  $23            ;  à afficher.
.0d07	68		          pla                 ; On ramène le nombre de caractères.
.0d08	20 24 ab	          jsr  b_strout       ; On affiche.
.0d0b	20 d7 0e	          jsr  pop            ; Récupère le statut complet.
.0d0e	60		          rts
.0d0f			insub
.0d0f	20 98 0e	          jsr  push           ; Sauvegarde le statut complet.
.0d12	20 d1 12	          jsr  kbflushbuff
.0d15	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.0d18	a9 00		          lda  #$00           ; On efface le basic input buffer
.0d1a	a0 59		          ldy  #$59           ;  situé à $200 long de 89 bytes ($59)
.0d1c	99 00 02	clear     sta  b_inpbuff,y    ;  en plaçant des $00 partout
.0d1f	88		          dey                 ;  et ce jusqu'au
.0d20	d0 fa		          bne  clear          ;  dernier.
.0d22	20 f9 ab	          jsr  b_prompt       ; Affiche un "?" et attend une entrée.
.0d25	86 7a		          stx  $7a            ; X et Y pointe sur $01ff au retour.
.0d27	84 7b		          sty  $7b
.0d29	20 73 00	          jsr  b_chrget       ; Lecture du buffer.
.0d2c	20 f3 bc	          jsr  b_ascflt       ; Conversion la chaine ascii en 200 en float.
.0d2f	20 d7 0e	          jsr  pop            ; Récupère le statut complet.
.0d32	60		          rts
.0d33			akey
.0d33	20 98 0e	               jsr  push
.0d36	a2 44		isx            ldx  #<kmsg
.0d38	a0 0d		isy            ldy  #>kmsg
.0d3a	20 a7 0d	               jsr  puts
.0d3d	20 d7 0e	               jsr  pull
.0d40	20 b0 12	          jsr  anykey
.0d43	60		          rts
>0d44	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>0d48	d5 4e 45 20	          .text               "Une clef pour continuer!"
>0d4c	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0d5c	55 45 52 21
>0d60	90 00		          .byte b_black,b_eot
.0d62			kmsgend

;******  Return to file: p036ex22.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0d62	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0d66	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0d6a			libtart

;******  Return to file: p036ex22.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p036ex22.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p036ex22.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0d6a			scrmaninit
.0d6a	20 98 0e	               jsr  push
.0d6d	a9 06		               lda  #vbleu
.0d6f	8d 21 d0	               sta  vicbackcol
.0d72	a9 05		               lda  #vvert
.0d74	8d 20 d0	               sta  vicbordcol
.0d77	a9 01		               lda  #vblanc
.0d79	8d 86 02	               sta  bascol
.0d7c	ad 00 04	               lda  scrnram
.0d7f	8d 00 04	               sta  scrnram
.0d82	20 8a 0d	               jsr  cls
.0d85	20 d7 0e	               jsr  pop
.0d88	60		               rts
>0d89	8e		characterset   .byte b_uppercase
.0d8a			cls
.0d8a	08		               php
.0d8b	48		               pha
.0d8c	a9 93		               lda  #$93
.0d8e	20 a1 0d	               jsr  putch
.0d91	68		               pla
.0d92	28		               plp
.0d93	60		               rts
.0d94			putnch
.0d94	08		               php
.0d95	e0 00		               cpx  #$00
.0d97	f0 06		               beq  out
.0d99	20 d2 ff	again          jsr  $ffd2
.0d9c	ca		               dex
.0d9d	d0 fa		               bne  again
.0d9f	28		out            plp
.0da0	60		               rts
.0da1			putch
.0da1	08		               php
.0da2	20 d2 ff	               jsr  $ffd2
.0da5	28		               plp
.0da6	60		               rts
.0da7			puts
.0da7	20 98 0e	               jsr  push
.0daa	86 fb		               stx  zpage1
.0dac	84 fc		               sty  zpage1+1
.0dae	a0 00		               ldy  #0
.0db0	b1 fb		next           lda  (zpage1),y
.0db2	f0 09		               beq  exit
.0db4	20 a1 0d	               jsr  putch
.0db7	20 9f 0f	               jsr  inczp1
.0dba	4c b0 0d	               jmp  next
.0dbd	20 d7 0e	exit           jsr  pop
.0dc0	60		               rts
.0dc1			gotoxy
.0dc1	08		               php
.0dc2	18		               clc
.0dc3	8a		               txa
.0dc4	48		               pha
.0dc5	98		               tya
.0dc6	aa		               tax
.0dc7	68		               pla
.0dc8	a8		               tay
.0dc9	20 f0 ff	               jsr  kplot
.0dcc	28		               plp
.0dcd	60		               rts
.0dce			cursor
=$0286			bascol    =    $0286
.0dce	08		               php
.0dcf	48		               pha
.0dd0	90 12		               bcc  restore
.0dd2	20 f0 ff	               jsr  kplot
.0dd5	8c f6 0d	               sty  cx
.0dd8	8e f7 0d	               stx  cy
.0ddb	ad 86 02	               lda  bascol
.0dde	8d f8 0d	               sta  bcol
.0de1	4c f3 0d	               jmp  out
.0de4	ae f7 0d	restore        ldx  cy
.0de7	ac f6 0d	               ldy  cx
.0dea	20 f0 ff	               jsr  kplot
.0ded	ad f8 0d	               lda  bcol
.0df0	8d 86 02	               sta  bascol
.0df3	68		out            pla
.0df4	28		               plp
.0df5	60		               rts
>0df6	00		cx   .byte     $00
>0df7	00		cy   .byte     $00
>0df8	00		bcol .byte     $00
.0df9			cursave
.0df9	08		               php
.0dfa	38		               sec
.0dfb	20 ce 0d	               jsr  cursor
.0dfe	28		               plp
.0dff	60		               rts
.0e00			curput
.0e00	08		               php
.0e01	18		               clc
.0e02	20 ce 0d	               jsr  cursor
.0e05	28		               plp
.0e06	60		               rts
.0e07			putsxy
.0e07	20 98 0e	               jsr  push
.0e0a	86 fb		               stx  zpage1
.0e0c	84 fc		               sty  zpage1+1
.0e0e	a0 00		               ldy  #$00
.0e10	b1 fb		               lda  (zpage1),y
.0e12	aa		               tax
.0e13	20 9f 0f	               jsr  inczp1
.0e16	b1 fb		               lda  (zpage1),y
.0e18	a8		               tay
.0e19	20 c1 0d	               jsr  gotoxy
.0e1c	20 9f 0f	               jsr  inczp1
.0e1f	a6 fb		               ldx  zpage1
.0e21	a4 fc		               ldy  zpage1+1
.0e23	20 a7 0d	               jsr  puts
.0e26	20 d7 0e	               jsr  pop
.0e29	60		               rts
>0e2a	00 00		straddr   .word     $00
>0e2c	00		px        .byte     $00
>0e2d	00		py        .byte     $00
>0e2e	00 00		zp1       .word     $00
.0e30			putscxy
.0e30	20 98 0e	               jsr  push
.0e33	84 fc		               sty  zpage1+1
.0e35	86 fb		               stx  zpage1
.0e37	ad 86 02	               lda  bascol
.0e3a	8d 5a 0e	               sta  bc
.0e3d	a0 00		               ldy #$00
.0e3f	b1 fb		               lda  (zpage1),y
.0e41	8d 86 02	               sta  bascol
.0e44	20 9f 0f	               jsr  inczp1
.0e47	a6 fb		               ldx  zpage1
.0e49	a4 fc		               ldy  zpage1+1
.0e4b	20 07 0e	               jsr  putsxy
.0e4e	ad 5a 0e	               lda  bc
.0e51	8d 86 02	               sta  bascol
.0e54	20 d7 0e	               jsr  pop
.0e57	60		               rts
>0e58	00 00		straddr  .word      $00
>0e5a	00		bc       .byte      $00
>0e5b	00 00		zp1      .word      $00
.0e5d			putrahex
.0e5d	08		               php
.0e5e	48		               pha
.0e5f	20 b5 10	               jsr  a2hex
.0e62	a9 54		               lda  #<a2hexstr
.0e64	a0 10		               ldy  #>a2hexstr
.0e66	20 a7 0d	               jsr  puts
.0e69	68		               pla
.0e6a	28		               plp
.0e6b	60		               rts
.0e6c			kputrahexxy
.0e6c			bputrahexxy
.0e6c			putrahexxy
.0e6c	08		               php
.0e6d	20 b5 10	               jsr  a2hex
.0e70	a9 51		               lda  #<a2hexpos
.0e72	a0 10		               ldy  #>a2hexpos
.0e74	20 07 0e	               jsr  putsxy
.0e77	68		               pla
.0e78	28		               plp
.0e79	60		               rts
.0e7a			putrahexcxy
.0e7a	08		               php
.0e7b	20 b5 10	               jsr  a2hex
.0e7e	a9 51		               lda  #<a2hexpos
.0e80	a0 10		               ldy  #>a2hexpos
.0e82	20 30 0e	               jsr  putscxy
.0e85	68		               pla
.0e86	28		               plp
.0e87	60		               rts
.0e88			setinverse
.0e88	48		               pha
.0e89	a9 12		               lda  #$12
.0e8b	20 d2 ff	               jsr  $ffd2
.0e8e	68		               pla
.0e8f	60		               rts
.0e90			clrinverse
.0e90	48		               pha
.0e91	a9 92		               lda  #$92
.0e93	20 d2 ff	               jsr  $ffd2
.0e96	68		               pla
.0e97	60		               rts

;******  Return to file: p036ex22.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0e98			push
.0e98	08		          php            ; stack : flg, pcl, pch
.0e99	78		          sei
.0e9a	8d d4 0e	          sta  ra        ; save a
.0e9d	68		          pla            ; stack : pcl, pch
.0e9e	8d d3 0e	          sta  rp        ; save rp
.0ea1	68		          pla            ; stack : pch
.0ea2	8d d5 0e	          sta  pc        ; save pcl
.0ea5	68		          pla            ; stack : -
.0ea6	8d d6 0e	          sta  pc+1      ; save pch
.0ea9	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0eab	48		          pha            ; stack : zp1l
.0eac	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0eae	48		          pha            ; stack : zp1h, zp1l
.0eaf	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0eb1	48		          pha            ; stack : zp2l, zp1h, zp1l
.0eb2	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0eb4	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0eb5	ad d3 0e	          lda  rp        ; get rp
.0eb8	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0eb9	ad d4 0e	          lda  ra        ; get a
.0ebc	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ebd	8a		          txa            ; get x
.0ebe	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ebf	98		          tya            ; get y
.0ec0	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec1	ad d6 0e	          lda  pc+1      ; get pch
.0ec4	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec5	ad d5 0e	          lda  pc        ; get pcl
.0ec8	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec9	ad d3 0e	          lda  rp        ; get rp
.0ecc	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ecd	ad d4 0e	          lda  ra        ; get a
.0ed0	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed1	58		          cli
.0ed2	60		          rts
>0ed3	00		rp        .byte     0
>0ed4	00		ra        .byte     0
>0ed5	00 00		pc        .word     0
.0ed7			pull
.0ed7			pop
.0ed7	78		          sei
.0ed8	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed9	8d 0c 0f	          sta  pc        ; save pcl
.0edc	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0edd	8d 0d 0f	          sta  pc+1      ; save pch
.0ee0	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ee1	a8		          tay            ; set y
.0ee2	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ee3	aa		          tax            ; set x
.0ee4	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0ee5	8d 0b 0f	          sta  ra        ; save a
.0ee8	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0ee9	8d 0a 0f	          sta  rp        ; save rp
.0eec	68		          pla            ; stack : zp2l, zp1h, zp1l
.0eed	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0eef	68		          pla            ; stack : zp1h, zp1l
.0ef0	85 fd		          sta  zpage2    ; get zpage2 High byte
.0ef2	68		          pla            ; stack : zp1l
.0ef3	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0ef5	68		          pla            ; stack :
.0ef6	85 fb		          sta  zpage1    ; get zpage1 High byte
.0ef8	ad 0d 0f	          lda  pc+1      ; get pch
.0efb	48		          pha            ; stack : pch
.0efc	ad 0c 0f	          lda  pc
.0eff	48		          pha            ; stack : pcl, pch
.0f00	ad 0a 0f	          lda  rp        ; get rp
.0f03	48		          pha            ; stack : rp, pcl, pch
.0f04	ad 0b 0f	          lda  ra        ; set ra
.0f07	58		          cli
.0f08	28		          plp            ; stack : pcl, pch
.0f09	60		          rts
>0f0a	00		rp        .byte     0
>0f0b	00		ra        .byte     0
>0f0c	00 00		pc        .word     0

;******  Return to file: p036ex22.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0f0e			blkfill
.0f0e	20 98 0e	bf0            jsr  push
.0f11	20 cf 0f	               jsr  savezp1
.0f14	84 fc		               sty  zpage1+1
.0f16	a0 00		               ldy  #$00
.0f18	84 fb		               sty  zpage1
.0f1a	91 fb		bf1            sta  (zpage1),y
.0f1c	c8		               iny
.0f1d	d0 fb		               bne  bf1
.0f1f	20 de 0f	               jsr  restzp1
.0f22	20 d7 0e	               jsr  pop
.0f25	60		               rts
.0f26			memfill
.0f26	20 98 0e	               jsr  push
.0f29	20 0e 0f	mf1            jsr  blkfill
.0f2c	c8		               iny
.0f2d	ca		               dex
.0f2e	d0 f9		               bne  mf1
.0f30	20 d7 0e	               jsr  pop
.0f33	60		               rts
.0f34			memmove
.0f34	20 98 0e	               jsr  push
.0f37	ba		               tsx            ; On se crée un pointeur ...
.0f38	8a		               txa
.0f39	18		               clc
.0f3a	69 0b		               adc  #11
.0f3c	a8		               tay
.0f3d	a2 06		               ldx  #$06
.0f3f	b9 00 01	nextbyte       lda  $0100,y
.0f42	99 8e 0f	               sta  words,y
.0f45	c8		               iny
.0f46	ca		               dex
.0f47	d0 f6		               bne  nextbyte
.0f49	ad 8e 0f	               lda  s
.0f4c	8d 65 0f	               sta  source+1
.0f4f	ad 8f 0f	               lda  s+1
.0f52	8d 66 0f	               sta  source+2
.0f55	ad 90 0f	               lda  d
.0f58	8d 62 0f	               sta  destin+1
.0f5b	ad 91 0f	               lda  d+1
.0f5e	8d 63 0f	               sta  destin+2
.0f61	ad ff ff	destin         lda  $ffff
.0f64	8d ff ff	source         sta  $ffff
.0f67	ee 62 0f	               inc  destin+1
.0f6a	d0 03		               bne  src
.0f6c	ee 63 0f	               inc  destin+2
.0f6f	ee 65 0f	src            inc  source+1
.0f72	d0 03		               bne  cnt
.0f74	ee 66 0f	               inc  source+2
.0f77	ad 92 0f	cnt            lda  compte
.0f7a	d0 08		               bne  decit
.0f7c	ad 93 0f	               lda  compte+1
.0f7f	f0 09		               beq  fini
.0f81	ce 93 0f	               dec  compte+1
.0f84	ce 92 0f	decit          dec  compte
.0f87	4c 61 0f	               jmp  destin
.0f8a	20 d7 0e	fini           jsr  pop
.0f8d	60		               rts
.0f8e			words
>0f8e	00 00		s         .word     $0000
>0f90	00 00		d         .word     $0000
>0f92	00 00		compte    .word     $0000
.0f94			decword
.0f94	20 98 0e	               jsr  push
.0f97	86 fd		               stx  zpage2
.0f99	84 fe		               sty  zpage2+1
.0f9b	20 d7 0e	               jsr  pop
.0f9e	60		               rts
.0f9f			inczp1
.0f9f	08		               php
.0fa0	48		               pha
.0fa1	e6 fb		               inc  zpage1
.0fa3	a5 fb		               lda  zpage1
.0fa5	d0 02		               bne  nopage
.0fa7	e6 fc		               inc  zpage1+1
.0fa9	68		nopage         pla
.0faa	28		               plp
.0fab	60		               rts
.0fac			deczp1
.0fac	08		                php
.0fad	48		                pha
.0fae	c6 fb		                dec  zpage1
.0fb0	d0 02		                bne  nopage
.0fb2	c6 fc		                dec  zpage1+1
.0fb4	68		nopage          pla
.0fb5	28		                plp
.0fb6	60		                rts
.0fb7			inczp2
.0fb7	08		               php
.0fb8	48		               pha
.0fb9	e6 fd		               inc  zpage2
.0fbb	a5 fd		               lda  zpage2
.0fbd	d0 02		               bne  nopage
.0fbf	e6 fe		               inc  zpage2+1
.0fc1	68		nopage         pla
.0fc2	28		               plp
.0fc3	60		               rts
.0fc4			deczp2
.0fc4	08		               php
.0fc5	48		               pha
.0fc6	a5 fd		               lda  zpage2
.0fc8	d0 02		               bne  nopage
.0fca	c6 fe		               dec  zpage2+1
.0fcc	68		nopage         pla
.0fcd	28		               plp
.0fce	60		               rts
.0fcf			savezp1
.0fcf	08		               php
.0fd0	48		               pha
.0fd1	a5 fb		               lda  zpage1
.0fd3	8d 4b 10	               sta  zp1
.0fd6	a5 fc		               lda  zpage1+1
.0fd8	8d 4c 10	               sta  zp1+1
.0fdb	68		               pla
.0fdc	28		               plp
.0fdd	60		               rts
.0fde			restzp1
.0fde	08		               php
.0fdf	48		               pha
.0fe0	ad 4b 10	               lda zp1
.0fe3	85 fb		               sta zpage1
.0fe5	ad 4c 10	               lda zp1+1
.0fe8	85 fc		               sta zpage1+1
.0fea	68		               pla
.0feb	28		               plp
.0fec	60		               rts
.0fed			savezp2
.0fed	08		         php
.0fee	48		         pha
.0fef	a5 fd		         lda zpage2
.0ff1	8d 4d 10	         sta zp2
.0ff4	a5 fe		         lda zpage2+1
.0ff6	8d 4e 10	         sta zp2+1
.0ff9	68		         pla
.0ffa	28		         plp
.0ffb	60		         rts
.0ffc			restzp2
.0ffc	08		                php
.0ffd	48		                pha
.0ffe	ad 4d 10	                lda  zp2
.1001	85 fd		                sta  zpage2
.1003	ad 4e 10	                lda  zp2+1
.1006	85 fe		                sta  zpage2+1
.1008	68		                pla
.1009	28		                plp
.100a	60		                rts
.100b			xy2addr
.100b	08		                php
.100c	48		                pha
.100d	8a		                txa
.100e	48		                pha
.100f	98		                tya
.1010	48		                pha
.1011	ad 46 10	                lda     addr1+1
.1014	8d 48 10	                sta     addr2+1
.1017	ad 45 10	                lda     addr1
.101a	8d 47 10	                sta     addr2
.101d	c0 00		                cpy     #$00
.101f	f0 0f		                beq     addx
.1021	18		moreline        clc
.1022	6d 44 10	                adc     ymult
.1025	90 03		                bcc     norepy
.1027	ee 48 10	                inc     addr2+1
.102a	8d 47 10	norepy          sta     addr2
.102d	88		                dey
.102e	d0 f1		                bne     moreline
.1030	8a		addx            txa
.1031	18		                clc
.1032	6d 47 10	                adc     addr2
.1035	90 03		                bcc     thatsit
.1037	ee 48 10	                inc     addr2+1
.103a	8d 47 10	thatsit         sta     addr2
.103d	68		                pla
.103e	a8		                tay
.103f	68		                pla
.1040	aa		                tax
.1041	68		                pla
.1042	28		                plp
.1043	60		                rts
>1044	28		ymult          .byte     40
>1045	00 00		addr1          .word     $0000
>1047	00 00		addr2          .word     $0000
>1049	00 00		bytecnt        .word     $0000
>104b	00 00		zp1        .word   $0000
>104d	00 00		zp2        .word   $0000

;******  Return to file: p036ex22.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>104f	01		a2hexcol       .byte     1              ; pour aputscxy
>1050	00		a2hexbkcol     .byte     %00000000
.1051			a2hexpos
>1051	00		a2hexpx        .byte     0              ; pour aputsxy
>1052	00		a2hexpy        .byte     0
>1053	24		a2hexprefix    .byte     "$"            ; pour aputs
>1054	00 00		a2hexstr       .word     $00
>1056	00 00		               .word     $00
>1058	00		               .byte     0              ; 0 end string
>1059	30 30 30 30	abin           .null     "00000000"
>105d	30 30 30 30 00
>1062	20 20 20 00	adec           .null     "   "
.1066			putahexfmtxy
.1066	20 98 0e	               jsr  push
.1069	20 b5 10	               jsr  a2hex
.106c	ae 51 10	               ldx  a2hexpx
.106f	ac 52 10	               ldy  a2hexpy
.1072	20 c1 0d	               jsr  gotoxy
.1075	a2 53		               ldx  #<a2hexprefix
.1077	a0 10		               ldy  #>a2hexprefix
.1079	20 a7 0d	               jsr  puts
.107c	20 d7 0e	               jsr  pop
.107f	60		               rts
.1080			putahexfmt
.1080	20 98 0e	               jsr  push
.1083	20 b5 10	               jsr  a2hex
.1086	a2 53		               ldx  #<a2hexprefix
.1088	a0 10		               ldy  #>a2hexprefix
.108a	20 a7 0d	               jsr  puts
.108d	20 d7 0e	               jsr  pop
.1090	60		               rts
.1091			putahex
.1091	20 98 0e	               jsr  push
.1094	20 b5 10	               jsr  a2hex
.1097	a2 54		               ldx  #<a2hexstr
.1099	a0 10		               ldy  #>a2hexstr
.109b	20 a7 0d	               jsr  puts
.109e	20 d7 0e	               jsr  pop
.10a1	60		               rts
.10a2			nib2hex
.10a2	08		               php
.10a3	29 0f		               and  #$0f
.10a5	f8		               sed
.10a6	18		               clc
.10a7	69 90		               adc  #$90
.10a9	69 40		               adc  #$40
.10ab	d8		               cld
.10ac	28		               plp
.10ad	60		               rts
.10ae			lsra4bits
.10ae	08		               php
.10af	4a		               lsr
.10b0	4a		               lsr
.10b1	4a		               lsr
.10b2	4a		               lsr
.10b3	28		               plp
.10b4	60		               rts
.10b5			a2hex
.10b5	08		               php
.10b6	48		               pha
.10b7	48		               pha
.10b8	20 ae 10	               jsr  lsra4bits
.10bb	20 a2 10	               jsr  nib2hex
.10be	8d 54 10	               sta  a2hexstr
.10c1	68		               pla
.10c2	20 a2 10	               jsr  nib2hex
.10c5	8d 55 10	               sta  a2hexstr+1
.10c8	a9 00		               lda  #$00                ; set end of string
.10ca	8d 56 10	               sta  a2hexstr+2
.10cd	68		               pla
.10ce	28		               plp
.10cf	60		               rts
.10d0			xy2hex
.10d0	20 98 0e	               jsr  push
.10d3	20 b5 10	               jsr  a2hex
.10d6	8a		               txa
.10d7	48		               pha
.10d8	20 ae 10	               jsr  lsra4bits
.10db	20 a2 10	               jsr  nib2hex
.10de	8d 54 10	               sta  a2hexstr
.10e1	68		               pla
.10e2	20 a2 10	               jsr  nib2hex
.10e5	8d 55 10	               sta  a2hexstr+1
.10e8	98		               tya
.10e9	48		               pha
.10ea	20 ae 10	               jsr  lsra4bits
.10ed	20 a2 10	               jsr  nib2hex
.10f0	8d 56 10	               sta  a2hexstr+2
.10f3	68		               pla
.10f4	20 a2 10	               jsr  nib2hex
.10f7	8d 57 10	               sta  a2hexstr+3
.10fa	a9 00		               lda  #$00                ; 0 ended string
.10fc	8d 58 10	               sta  a2hexstr+4
.10ff	20 d7 0e	               jsr  pop
.1102			atobin
.1102	20 98 0e	               jsr  push
.1105	a2 08		               ldx  #8
.1107	a0 00		               ldy  #0
.1109	18		               clc
.110a	2a		nextbit        rol
.110b	48		               pha
.110c	69 00		               adc  #$00
.110e	29 01		               and  #$01
.1110	20 a2 10	               jsr  nib2hex
.1113	99 59 10	               sta  abin,y
.1116	68		               pla
.1117	c8		               iny
.1118	ca		               dex
.1119	d0 ef		               bne  nextbit
.111b	a9 00		               lda  #0
.111d	99 59 10	               sta  abin,y
.1120	20 d7 0e	               jsr  pull
.1123	60		               rts
.1124			putabin
.1124	20 02 11	               jsr     atobin
.1127	20 98 0e	               jsr     push
.112a	a2 59		               ldx     #<abin
.112c	a0 10		               ldy     #>abin
.112e	20 a7 0d	               jsr     puts
.1131	20 d7 0e	               jsr     pop
.1134	60		               rts
.1135			printabin
.1135	20 98 0e	               jsr     push
.1138	a2 59		               ldx     #<abin
.113a	a0 10		               ldy     #>abin
.113c	20 a7 0d	               jsr     puts
.113f	20 d7 0e	               jsr     pop
.1142	60		               rts
.1143			putabinfmt
.1143	08		               php
.1144	48		               pha
.1145	a9 25		               lda     #"%"
.1147	20 a1 0d	               jsr     putch
.114a	68		               pla
.114b	20 24 11	               jsr     putabin
.114e	28		               plp
.114f	60		               rts
.1150			putabinxy
.1150	20 c1 0d	               jsr     gotoxy
.1153	20 24 11	               jsr     putabin
.1156	60		               rts
.1157			putabinfmtxy
.1157	20 c1 0d	               jsr     gotoxy
.115a	20 43 11	               jsr     putabinfmt
.115d	60		               rts
.115e			atodec
.115e	20 98 0e	               jsr  push
.1161	f8		               sed
.1162	aa		               tax
.1163	a0 00		               ldy  #$00
.1165	a9 00		               lda  #$00
.1167	18		nextbit        clc
.1168	69 01		               adc  #$01
.116a	90 01		               bcc  decx
.116c	c8		               iny
.116d	ca		decx           dex
.116e	d0 f7		               bne  nextbit
.1170	48		               pha
.1171	98		               tya
.1172	20 a2 10	               jsr  nib2hex
.1175	8d 62 10	               sta  adec
.1178	68		               pla
.1179	48		               pha
.117a	20 a2 10	               jsr  nib2hex
.117d	8d 64 10	               sta  adec+2
.1180	68		               pla
.1181	6a		               ror
.1182	6a		               ror
.1183	6a		               ror
.1184	6a		               ror
.1185	20 a2 10	               jsr  nib2hex
.1188	8d 63 10	               sta  adec+1
.118b	d8		               cld
.118c	20 d7 0e	               jsr  pull
.118f	60		               rts
>1190	00 00 00	buffer         .byte     0,0,0
.1193			putadec
.1193	20 98 0e	               jsr  push
.1196	20 5e 11	               jsr  atodec
.1199	a2 62		               ldx  #<adec
.119b	a0 10		               ldy  #>adec+1
.119d	20 a7 0d	               jsr  puts
.11a0	20 d7 0e	               jsr  pop
.11a3	60		               rts

;******  Return to file: p036ex22.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>11a4	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>11a8	00 00 00 00 00 00 00 00 00 0d 00 00
>11b4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>11b8	00 00 00 00 00 00 00 00 00 00 00 00
>11c4	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>11c8	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>11d4	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>11d8	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>11e4	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>11e8	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>11f4	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>11f8	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1204	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1208	00 00 00 00 00 00 00 00 00 00 00 00
>1214	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1218	00 00 00 00 00 00 00 00 00 00 00 00
>1224	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1228	00 00 00 00 00 00 00 00 00 00 00 00
>1234	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1238	00 00 00 00 00 00 00 00 00 00 00 00
>1244	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1248	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1254	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1258	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1264	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1268	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1274	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1278	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1284	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1288	00 00 00 00 00 00 00 00 00 00 00 00
>1294	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1298	00 00 00 00 00 00 00 00 00 00 00 00
.12a4			waitstop
.12a4	20 98 0e	               jsr  push
.12a7	20 ed f6	wait           jsr  k_stop
.12aa	d0 fb		               bne  wait
.12ac	20 d7 0e	               jsr  pop
.12af	60		               rts
.12b0			anykey
.12b0	08		               php
.12b1	48		               pha
.12b2	a5 cb		nokey          lda 203
.12b4	c9 40		               cmp #64
.12b6	f0 fa		               beq nokey
.12b8	20 be 12	               jsr releasekey
.12bb	68		               pla
.12bc	28		               plp
.12bd	60		               rts
.12be			releasekey
.12be	08		               php
.12bf	48		               pha
.12c0	a5 cb		keypressed     lda 203
.12c2	c9 40		               cmp #64
.12c4	d0 fa		               bne keypressed
.12c6	68		               pla
.12c7	28		               plp
.12c8	60		               rts
.12c9			getkey
.12c9	20 e4 ff	again          jsr  getin
.12cc	c9 00		               cmp  #0
.12ce	f0 f9		               beq  again
.12d0	60		               rts
.12d1			kbflushbuff
.12d1	08		               php
.12d2	48		               pha
.12d3	20 e4 ff	again          jsr  getin
.12d6	c9 00		               cmp  #0
.12d8	d0 f9		               bne  again
.12da	68		               pla
.12db	28		               plp
.12dc	60		               rts
.12dd			waitkey
.12dd	20 98 0e	               jsr  push
.12e0	8d 2e 13	               sta  thekey
.12e3	20 e4 ff	nope           jsr  getin
.12e6	20 d2 ff	               jsr  chrout
.12e9	cd 2e 13	               cmp  thekey
.12ec	d0 f5		               bne  nope
.12ee	20 d2 ff	               jsr  chrout
.12f1	20 d7 0e	               jsr  pop
.12f4	60		               rts
.12f5			waitspace
.12f5	20 98 0e	               jsr  push
.12f8	a9 7f		wait           lda  #$7f  ;%01111111
.12fa	8d 00 dc	               sta  $dc00
.12fd	ad 01 dc	               lda  $dc01
.1300	29 10		               and  #$10  ;mask %00010000
.1302	d0 f4		               bne  wait
.1304	20 d7 0e	               jsr  pop
.1307			waitsstop
.1307	20 98 0e	               jsr  push
.130a	20 ed f6	wait           jsr  k_stop  ;%01111111
.130d	d0 fb		               bne  wait
.130f	20 d7 0e	               jsr  pop
.1312			waitreturn
.1312	20 98 0e	               jsr  push
.1315	ad 2f 13	               lda  thecount
.1318	8d 00 04	               sta  scrnram
.131b	a9 02		               lda  #$02
.131d	8d 00 d8	               sta  colorram
.1320	20 e4 ff	nope           jsr  getin
.1323	c9 0d		nohex          cmp  #$0d
.1325	d0 f9		               bne  nope
.1327	ee 2f 13	               inc  thecount
.132a	20 d7 0e	               jsr  pop
.132d	60		               rts
>132e	00		thekey         .byte   0
>132f	01		thecount       .byte   $01

;******  Return to file: p036ex22.asm


;******  End of listing

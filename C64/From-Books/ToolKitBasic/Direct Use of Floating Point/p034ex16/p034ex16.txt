
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p034ex16.txt -o p034ex16.prg p034ex16.asm
; Tue Oct 29 16:56:40 2024

;Offset	;Hex		;Source

;******  Processing input file: p034ex16.asm

="20241029-122533"	           Version = "20241029-122533"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	2a 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 52			.text " *programmation assembleur sue c64*"
>080a	4f 47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45
>081a	4d 42 4c 45 55 52 20 53 55 45 20 43 36 34 2a
>0829	00				.byte $00		;Un zéro pour indiquer la fin de cette
>082a	46 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082c	02 00				.word 2   	;Numero de la ligne Basic.
>082e	8f				.byte $8F		;Le token de la commande REM du Basic
>082f	20 2a 50 41			.text " *par daniel lafrance*"
>0833	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>0843	45 2a
>0845	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0846	51 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0848	03 00				.word 3   	;Numero de la ligne Basic.
>084a	9e				.byte $9e		;Le token de la commande PRINT du Basic
>084b	30 32 31 33			.text format("%05d",hpgmstart)
>084f	31
>0850	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0851	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0853	4c 1d 0a	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p034ex16.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p034ex16.asm

.0856			p034ex16
.0856	20 4c 10	          jsr  push           ; Sauvegarde le statut complet.
.0859			again
.0859	48		               pha
.085a	a9 03		               lda  #ccyan
.085c	8d 20 d0	               sta  $d020
.085f	68		               pla
.0860	48		               pha
.0861	a9 01		               lda  #cblanc
.0863	8d 21 d0	               sta  $d021
.0866	68		               pla
.0867	48		               pha
.0868	a9 06		               lda  #cbleu
.086a	8d 86 02	               sta  bascol
.086d	68		               pla
.086e	20 80 0d	          jsr  cls            ; On efface l'écran.
.0871	20 4c 10	               jsr  push
.0874	a2 e9		isx            ldx  #<ttext
.0876	a0 08		isy            ldy  #>ttext
.0878	20 9d 0d	               jsr  puts
.087b	20 8b 10	               jsr  pull
.087e	20 4c 10	               jsr  push
.0881	a2 15		isx            ldx  #<ptext1a
.0883	a0 09		isy            ldy  #>ptext1a
.0885	20 9d 0d	               jsr  puts
.0888	20 8b 10	               jsr  pull
.088b	20 05 0d	          jsr  insub          ; Lit le premier nombre.
.088e	a9 05		          lda  #$05
.0890	20 7e bd	noneg     jsr  b_f1pacc       ; Converti le résultat en ascii à $0100.
.0893	20 dd bd	          jsr  b_facasc
.0896	20 4c 10	               jsr  push
.0899	a2 c3		isx            ldx  #<restxt1
.089b	a0 09		isy            ldy  #>restxt1
.089d	20 9d 0d	               jsr  puts
.08a0	20 8b 10	               jsr  pull
.08a3	20 e7 0c	          jsr  outsub         ; Affiche la valeur finale.
.08a6	a9 0d		          lda  #$0d
.08a8	20 d2 ff	          jsr  $ffd2
.08ab	20 4c 10	               jsr  push
.08ae	a2 cb		isx            ldx  #<query
.08b0	a0 08		isy            ldy  #>query
.08b2	20 9d 0d	               jsr  puts
.08b5	20 8b 10	               jsr  pull
.08b8	20 7d 14	          jsr  getkey
.08bb	29 7f		          and  #$7f
.08bd	c9 4f		          cmp  #'o'
.08bf	d0 03		          bne  out
.08c1	4c 59 08	          jmp again
.08c4	20 a9 0a	out       jsr  aide
.08c7	20 8b 10	          jsr  pop            ; Récupère le statut complet.
.08ca	60		          rts
>08cb	9a 20 0d	query     .byte     b_ltblue,b_space,b_crlf
>08ce	20 20 20 d5	          .text     "   Un autre calcul (o/N)?"
>08d2	4e 20 41 55 54 52 45 20 43 41 4c 43 55 4c 20 28
>08e2	4f 2f ce 29 3f
>08e7	0d 00		          .byte     b_crlf,b_eot
>08e9	1f 20 12	ttext     .byte     b_blue,b_space,b_rvs_on
>08ec	20 20 d0 2e	          .text     "  P.F. - FAC1 = FAC1+ACCUM (Accum=5)  "
>08f0	c6 2e 20 2d 20 c6 c1 c3 31 20 3d 20 c6 c1 c3 31
>0900	2b c1 c3 c3 d5 cd 20 28 c1 43 43 55 4d 3d 35 29
>0910	20 20
>0912	92 0d 00	          .byte     b_rvs_off,b_crlf,b_eot
>0915	0d 9c 20	ptext1a   .byte     b_crlf, b_purple, b_space
>0918	20 c5 4e 54	          .text     " Entez la valeur de FAC1"
>091c	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>092c	c6 c1 c3 31
>0930	90 00		          .byte     b_black,b_eot
>0932	0d 9c 20	ptext2a   .byte     b_crlf, b_purple, b_space
>0935	20 c5 4e 54	          .text     " Entez la valeur de FAC2"
>0939	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>0949	c6 c1 c3 32
>094d	90 00		          .byte     b_black,b_eot
>094f	0d 9c 20	ptextva   .byte     b_crlf, b_purple, b_space
>0952	20 c5 4e 54	          .text     " Entez la valeur de FVAR"
>0956	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>0966	c6 d6 c1 d2
>096a	90 00		          .byte     b_black,b_eot
>096c	0d 9c 20	ptext1b   .byte     b_crlf, b_purple, b_space
>096f	20 20 20 20	          .text     "      puis celle de FAC1"
>0973	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>0983	c6 c1 c3 31
>0987	90 00		          .byte     b_black,b_eot
>0989	0d 9c 20	ptext2b   .byte     b_crlf, b_purple, b_space
>098c	20 20 20 20	          .text     "      puis celle de FAC2"
>0990	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>09a0	c6 c1 c3 32
>09a4	90 00		          .byte     b_black,b_eot
>09a6	0d 9c 20	ptextvb   .byte     b_crlf, b_purple, b_space
>09a9	20 20 20 20	          .text     "      puis celle de FVAR"
>09ad	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>09bd	c6 d6 c1 d2
>09c1	90 00		          .byte     b_black,b_eot
>09c3	1e 0d		restxt1   .byte     b_green,b_crlf
>09c5	20 20 20 20	          .text    "       Resultat dans FAC1="
>09c9	20 20 20 d2 45 53 55 4c 54 41 54 20 44 41 4e 53
>09d9	20 c6 c1 c3 31 3d
>09df	90 00		          .byte     b_black,b_eot
>09e1	1e 0d		restxt2   .byte     b_green,b_crlf
>09e3	20 20 20 20	          .text    "       Resultat dans FAC2="
>09e7	20 20 20 d2 45 53 55 4c 54 41 54 20 44 41 4e 53
>09f7	20 c6 c1 c3 32 3d
>09fd	90 00		          .byte     b_black,b_eot
>09ff	1e 0d		restxtv   .byte     b_green,b_crlf
>0a01	20 20 20 20	          .text    "       Resultat dans FVAR="
>0a05	20 20 20 d2 45 53 55 4c 54 41 54 20 44 41 4e 53
>0a15	20 c6 d6 c1 d2 3d
>0a1b	90 00		          .byte     b_black,b_eot
.0a1d			main
.0a1d	20 60 0d	          jsr       scrmaninit
.0a20	08		               php
.0a21	48		               pha
.0a22	a9 08		               lda  #$08
.0a24	20 d2 ff	               jsr  $ffd2
.0a27	68		               pla
.0a28	28		               plp
.0a29	48		               pha
.0a2a	a9 03		               lda  #ccyan
.0a2c	8d 20 d0	               sta  $d020
.0a2f	68		               pla
.0a30	48		               pha
.0a31	a9 01		               lda  #cblanc
.0a33	8d 21 d0	               sta  $d021
.0a36	68		               pla
.0a37	48		               pha
.0a38	a9 06		               lda  #cbleu
.0a3a	8d 86 02	               sta  bascol
.0a3d	68		               pla
.0a3e	20 5f 0a	          jsr       bookinfo
.0a41	20 29 0d	          jsr       akey
.0a44	20 80 0d	          jsr       cls
.0a47	20 a9 0a	          jsr       aide
.0a4a	20 29 0d	          jsr       akey
.0a4d	a9 0d		          lda       #b_crlf
.0a4f	20 d2 ff	          jsr       $ffd2
.0a52	20 56 08	          jsr       p034ex16
.0a55	08		               php
.0a56	48		               pha
.0a57	a9 09		               lda  #$09
.0a59	20 d2 ff	               jsr  $ffd2
.0a5c	68		               pla
.0a5d	28		               plp
.0a5e	60		          rts
.0a5f			bookinfo
.0a5f	20 4c 10	          jsr  push           ; Sauvegarde le statut complet.
.0a62	08		               php
.0a63	48		               pha
.0a64	a9 0e		               lda  #14
.0a66	8d 7f 0d	               sta  characterset
.0a69	20 d2 ff	               jsr  $ffd2
.0a6c	68		               pla
.0a6d	28		               plp
.0a6e	20 80 0d	          jsr       cls
.0a71	20 4c 10	               jsr  push
.0a74	a2 be		isx            ldx  #<line
.0a76	a0 0c		isy            ldy  #>line
.0a78	20 9d 0d	               jsr  puts
.0a7b	20 8b 10	               jsr  pull
.0a7e	20 4c 10	               jsr  push
.0a81	a2 e6		isx            ldx  #<headera
.0a83	a0 0a		isy            ldy  #>headera
.0a85	20 9d 0d	               jsr  puts
.0a88	20 8b 10	               jsr  pull
.0a8b	20 4c 10	               jsr  push
.0a8e	a2 86		isx            ldx  #<headerb
.0a90	a0 0b		isy            ldy  #>headerb
.0a92	20 9d 0d	               jsr  puts
.0a95	20 8b 10	               jsr  pull
.0a98	20 4c 10	               jsr  push
.0a9b	a2 be		isx            ldx  #<line
.0a9d	a0 0c		isy            ldy  #>line
.0a9f	20 9d 0d	               jsr  puts
.0aa2	20 8b 10	               jsr  pull
.0aa5	20 8b 10	          jsr  pop            ; Récupère le statut complet.
.0aa8	60		          rts
.0aa9			aide
.0aa9	20 4c 10	          jsr  push           ; Sauvegarde le statut complet.
.0aac	08		               php
.0aad	48		               pha
.0aae	a9 0e		               lda  #14
.0ab0	8d 7f 0d	               sta  characterset
.0ab3	20 d2 ff	               jsr  $ffd2
.0ab6	68		               pla
.0ab7	28		               plp
.0ab8	20 80 0d	          jsr       cls
.0abb	20 4c 10	               jsr  push
.0abe	a2 29		isx            ldx  #<shortcuts
.0ac0	a0 0c		isy            ldy  #>shortcuts
.0ac2	20 9d 0d	               jsr  puts
.0ac5	20 8b 10	               jsr  pull
.0ac8	20 4c 10	               jsr  push
.0acb	a2 aa		isx            ldx  #<aidetext
.0acd	a0 0c		isy            ldy  #>aidetext
.0acf	20 9d 0d	               jsr  puts
.0ad2	20 8b 10	               jsr  pull
.0ad5	20 4c 10	               jsr  push
.0ad8	a2 be		isx            ldx  #<line
.0ada	a0 0c		isy            ldy  #>line
.0adc	20 9d 0d	               jsr  puts
.0adf	20 8b 10	               jsr  pull
.0ae2	20 8b 10	          jsr  pop            ; Récupère le statut complet.
.0ae5	60		          rts
.0ae6			headera
>0ae6	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>0aea	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>0afa	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>0b0a	20 20 2a
>0b0d	0d		          .byte     b_crlf
>0b0e	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>0b12	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>0b22	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>0b32	20 20 2a
>0b35	0d		          .byte     b_crlf
>0b36	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>0b3a	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>0b4a	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>0b5a	20 20 2a
>0b5d	0d		          .byte     b_crlf
>0b5e	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>0b62	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>0b72	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>0b82	20 20 2a 00
>0b86	0d		headerb   .byte     $0d
>0b87	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>0b8b	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>0b9b	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>0bab	20 20 2a
>0bae	0d		          .byte     $0d
>0baf	20 2a 20 20	          .text               " *        page 34, exemple #16        *"
>0bb3	20 20 20 20 20 20 50 41 47 45 20 33 34 2c 20 45
>0bc3	58 45 4d 50 4c 45 20 23 31 36 20 20 20 20 20 20
>0bd3	20 20 2a
>0bd6	0d		          .byte     $0d
>0bd7	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0bdb	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0beb	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0bfb	20 20 2a
>0bfe	0d		          .byte     $0d
>0bff	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0c03	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0c13	34 31 30 32 39 2d 31 32 32 35 33 33 2e 20 20 20
>0c23	20 20 2a 20
>0c27	90 00		          .byte     b_black,b_eot
>0c29	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0c2c	20 20 20 20	          .text               "       RACCOURCIS DE L'EXEMPLE        "
>0c30	20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4 c5
>0c40	20 cc 27 c5 d8 c5 cd d0 cc c5 20 20 20 20 20 20
>0c50	20 20
>0c52	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0c55	20 50 30 33	          .text     format(   " p034ex16: SYS %d ($%04X)",p034ex16, p034ex16)
>0c59	34 45 58 31 36 3a 20 d3 d9 d3 20 32 31 33 34 20
>0c69	28 24 30 38 35 36 29
>0c70	0d		          .byte     b_crlf
>0c71	20 41 49 44	          .text     format(   " aide....: SYS %d ($%04X)",aide, aide)
>0c75	45 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 37 32 39 20
>0c85	28 24 30 c1 c1 39 29
>0c8c	0d		          .byte     b_crlf
>0c8d	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04X)",cls, cls)
>0c91	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 34 35 36 20
>0ca1	28 24 30 c4 38 30 29
>0ca8	0d 00		          .byte     b_crlf,b_eot
>0caa	0d 20 1c	aidetext  .byte     b_crlf,b_space,b_red
>0cad	20 45 58 2e	          .text     format(   " ex.: SYS %d",p034ex16)
>0cb1	3a 20 d3 d9 d3 20 32 31 33 34
>0cbb	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0cbe	20 2d 2d 2d	line      .text               " --------------------------------------"
>0cc2	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0cd2	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0ce2	2d 2d 2d
>0ce5	0d 00		          .byte     b_crlf,b_eot

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/toolkitbasic.asm

.0ce7			outsub
.0ce7	20 4c 10	          jsr  push           ; Sauvegarde le statut complet.
.0cea	a0 ff		          ldy  #$ff           ; On détermine
.0cec	c8		nxtchr    iny                 ;  le nombre de caractères
.0ced	b9 00 01	          lda  $0100,y        ;  qu'il y a dans la chaine à afficher.
.0cf0	d0 fa		          bne  nxtchr
.0cf2	c8		          iny                 ; On ajoute 1 au nombre trouvé pour compenser
.0cf3	98		          tya                 ;  l'adresse a y=0.
.0cf4	48		          pha                 ; Sauvegarde ce nombre.
.0cf5	a9 00		          lda  #$00           ; On prépare le pointeur $22-$23
.0cf7	85 22		          sta  $22            ;  en le peuplant avec
.0cf9	a9 01		          lda  #$01           ;  l'adresse ou se trouve la chaine
.0cfb	85 23		          sta  $23            ;  à afficher.
.0cfd	68		          pla                 ; On ramène le nombre de caractères.
.0cfe	20 24 ab	          jsr  b_strout       ; On affiche.
.0d01	20 8b 10	          jsr  pop            ; Récupère le statut complet.
.0d04	60		          rts
.0d05			insub
.0d05	20 4c 10	          jsr  push           ; Sauvegarde le statut complet.
.0d08	20 85 14	          jsr  kbflushbuff
.0d0b	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.0d0e	a9 00		          lda  #$00           ; On efface le basic input buffer
.0d10	a0 59		          ldy  #$59           ;  situé à $200 long de 89 bytes ($59)
.0d12	99 00 02	clear     sta  b_inpbuff,y    ;  en plaçant des $00 partout
.0d15	88		          dey                 ;  et ce jusqu'au
.0d16	d0 fa		          bne  clear          ;  dernier.
.0d18	20 f9 ab	          jsr  b_prompt       ; Affiche un "?" et attend une entrée.
.0d1b	86 7a		          stx  $7a            ; X et Y pointe sur $01ff au retour.
.0d1d	84 7b		          sty  $7b
.0d1f	20 73 00	          jsr  b_chrget       ; Lecture du buffer.
.0d22	20 f3 bc	          jsr  b_ascflt       ; Conversion la chaine ascii en 200 en float.
.0d25	20 8b 10	          jsr  pop            ; Récupère le statut complet.
.0d28	60		          rts
.0d29			akey
.0d29	a9 3a		          lda  #<kmsg
.0d2b	85 22		          sta  $22
.0d2d	a9 0d		          lda  #>kmsg
.0d2f	85 23		          sta  $23
.0d31	a9 1e		          lda  #kmsgend-kmsg
.0d33	20 24 ab	          jsr  b_strout
.0d36	20 64 14	          jsr  anykey
.0d39	60		          rts
>0d3a	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>0d3e	d5 4e 45 20	          .text               "Une clef pour continuer!"
>0d42	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0d52	55 45 52 21
>0d56	90 00		          .byte b_black,b_eot
.0d58			kmsgend

;******  Return to file: p034ex16.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0d58	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0d5c	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0d60			libtart

;******  Return to file: p034ex16.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p034ex16.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p034ex16.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0d60			scrmaninit
.0d60	20 4c 10	               jsr  push
.0d63	a9 06		               lda  #vbleu
.0d65	8d 21 d0	               sta  vicbackcol
.0d68	a9 05		               lda  #vvert
.0d6a	8d 20 d0	               sta  vicbordcol
.0d6d	a9 01		               lda  #vblanc
.0d6f	8d 86 02	               sta  bascol
.0d72	ad 00 04	               lda  scrnram
.0d75	8d 00 04	               sta  scrnram
.0d78	20 80 0d	               jsr  cls
.0d7b	20 8b 10	               jsr  pop
.0d7e	60		               rts
>0d7f	8e		characterset   .byte b_uppercase
.0d80			cls
.0d80	08		               php
.0d81	48		               pha
.0d82	a9 93		               lda  #$93
.0d84	20 97 0d	               jsr  putch
.0d87	68		               pla
.0d88	28		               plp
.0d89	60		               rts
.0d8a			putnch
.0d8a	08		               php
.0d8b	e0 00		               cpx  #$00
.0d8d	f0 06		               beq  out
.0d8f	20 d2 ff	again          jsr  $ffd2
.0d92	ca		               dex
.0d93	d0 fa		               bne  again
.0d95	28		out            plp
.0d96	60		               rts
.0d97			putch
.0d97	08		               php
.0d98	20 d2 ff	               jsr  $ffd2
.0d9b	28		               plp
.0d9c	60		               rts
.0d9d			puts
.0d9d	20 4c 10	               jsr  push
.0da0	86 fb		               stx  zpage1
.0da2	84 fc		               sty  zpage1+1
.0da4	a0 00		               ldy  #0
.0da6	b1 fb		next           lda  (zpage1),y
.0da8	f0 09		               beq  exit
.0daa	20 97 0d	               jsr  putch
.0dad	20 53 11	               jsr  inczp1
.0db0	4c a6 0d	               jmp  next
.0db3	20 8b 10	exit           jsr  pop
.0db6	60		               rts
.0db7			gotoxy
.0db7	08		               php
.0db8	18		               clc
.0db9	8a		               txa
.0dba	48		               pha
.0dbb	98		               tya
.0dbc	aa		               tax
.0dbd	68		               pla
.0dbe	a8		               tay
.0dbf	20 f0 ff	               jsr  kplot
.0dc2	28		               plp
.0dc3	60		               rts
.0dc4			cursor
=$0286			bascol    =    $0286
.0dc4	08		               php
.0dc5	48		               pha
.0dc6	90 12		               bcc  restore
.0dc8	20 f0 ff	               jsr  kplot
.0dcb	8c ec 0d	               sty  cx
.0dce	8e ed 0d	               stx  cy
.0dd1	ad 86 02	               lda  bascol
.0dd4	8d ee 0d	               sta  bcol
.0dd7	4c e9 0d	               jmp  out
.0dda	ae ed 0d	restore        ldx  cy
.0ddd	ac ec 0d	               ldy  cx
.0de0	20 f0 ff	               jsr  kplot
.0de3	ad ee 0d	               lda  bcol
.0de6	8d 86 02	               sta  bascol
.0de9	68		out            pla
.0dea	28		               plp
.0deb	60		               rts
>0dec	00		cx   .byte     $00
>0ded	00		cy   .byte     $00
>0dee	00		bcol .byte     $00
.0def			cursave
.0def	08		               php
.0df0	38		               sec
.0df1	20 c4 0d	               jsr  cursor
.0df4	28		               plp
.0df5	60		               rts
.0df6			curput
.0df6	08		               php
.0df7	18		               clc
.0df8	20 c4 0d	               jsr  cursor
.0dfb	28		               plp
.0dfc	60		               rts
.0dfd			putsxy
.0dfd	20 4c 10	               jsr  push
.0e00	86 fb		               stx  zpage1
.0e02	84 fc		               sty  zpage1+1
.0e04	a0 00		               ldy  #$00
.0e06	b1 fb		               lda  (zpage1),y
.0e08	aa		               tax
.0e09	20 53 11	               jsr  inczp1
.0e0c	b1 fb		               lda  (zpage1),y
.0e0e	a8		               tay
.0e0f	20 b7 0d	               jsr  gotoxy
.0e12	20 53 11	               jsr  inczp1
.0e15	a6 fb		               ldx  zpage1
.0e17	a4 fc		               ldy  zpage1+1
.0e19	20 9d 0d	               jsr  puts
.0e1c	20 8b 10	               jsr  pop
.0e1f	60		               rts
>0e20	00 00		straddr   .word     $00
>0e22	00		px        .byte     $00
>0e23	00		py        .byte     $00
>0e24	00 00		zp1       .word     $00
.0e26			putscxy
.0e26	20 4c 10	               jsr  push
.0e29	84 fc		               sty  zpage1+1
.0e2b	86 fb		               stx  zpage1
.0e2d	ad 86 02	               lda  bascol
.0e30	8d 50 0e	               sta  bc
.0e33	a0 00		               ldy #$00
.0e35	b1 fb		               lda  (zpage1),y
.0e37	8d 86 02	               sta  bascol
.0e3a	20 53 11	               jsr  inczp1
.0e3d	a6 fb		               ldx  zpage1
.0e3f	a4 fc		               ldy  zpage1+1
.0e41	20 fd 0d	               jsr  putsxy
.0e44	ad 50 0e	               lda  bc
.0e47	8d 86 02	               sta  bascol
.0e4a	20 8b 10	               jsr  pop
.0e4d	60		               rts
>0e4e	00 00		straddr  .word      $00
>0e50	00		bc       .byte      $00
>0e51	00 00		zp1      .word      $00
.0e53			putrahex
.0e53	08		               php
.0e54	48		               pha
.0e55	20 69 12	               jsr  a2hex
.0e58	a9 08		               lda  #<a2hexstr
.0e5a	a0 12		               ldy  #>a2hexstr
.0e5c	20 9d 0d	               jsr  puts
.0e5f	68		               pla
.0e60	28		               plp
.0e61	60		               rts
.0e62			kputrahexxy
.0e62			bputrahexxy
.0e62			putrahexxy
.0e62	08		               php
.0e63	20 69 12	               jsr  a2hex
.0e66	a9 05		               lda  #<a2hexpos
.0e68	a0 12		               ldy  #>a2hexpos
.0e6a	20 fd 0d	               jsr  putsxy
.0e6d	68		               pla
.0e6e	28		               plp
.0e6f	60		               rts
.0e70			putrahexcxy
.0e70	08		               php
.0e71	20 69 12	               jsr  a2hex
.0e74	a9 05		               lda  #<a2hexpos
.0e76	a0 12		               ldy  #>a2hexpos
.0e78	20 26 0e	               jsr  putscxy
.0e7b	68		               pla
.0e7c	28		               plp
.0e7d	60		               rts
.0e7e			setinverse
.0e7e	48		               pha
.0e7f	a9 12		               lda  #$12
.0e81	20 d2 ff	               jsr  $ffd2
.0e84	68		               pla
.0e85	60		               rts
.0e86			clrinverse
.0e86	48		               pha
.0e87	a9 92		               lda  #$92
.0e89	20 d2 ff	               jsr  $ffd2
.0e8c	68		               pla
.0e8d	60		               rts

;******  Return to file: p034ex16.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.0e8e			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.0e8e	08		                php
.0e8f	8d 40 10	                sta  rega
.0e92	68		                pla
.0e93	8d 43 10	                sta  regp
.0e96	8e 41 10	                stx  regx
.0e99	8c 42 10	                sty  regy
.0e9c	ba		                tsx
.0e9d	8e 44 10	                stx  regs
.0ea0	68		                pla
.0ea1	8d 46 10	                sta  regpcl
.0ea4	8d 47 10	                sta  regpcl2
.0ea7	68		                pla
.0ea8	8d 45 10	                sta  regpch
.0eab	ad 40 10	                lda  rega
.0eae	48		                pha
.0eaf	20 56 12	                jsr  nib2hex
.0eb2	8d e3 0f	                sta  vala+1
.0eb5	68		                pla
.0eb6	20 62 12	                jsr  lsra4bits
.0eb9	20 56 12	                jsr  nib2hex
.0ebc	8d e2 0f	                sta  vala
.0ebf	ad 42 10	                lda  regy
.0ec2	48		                pha
.0ec3	20 56 12	                jsr  nib2hex
.0ec6	8d f9 0f	                sta  valy+1
.0ec9	68		                pla
.0eca	20 62 12	                jsr  lsra4bits
.0ecd	20 56 12	                jsr  nib2hex
.0ed0	8d f8 0f	                sta  valy
.0ed3	ad 41 10	                lda  regx
.0ed6	48		                pha
.0ed7	20 56 12	                jsr  nib2hex
.0eda	8d ee 0f	                sta  valx+1
.0edd	68		                pla
.0ede	20 62 12	                jsr  lsra4bits
.0ee1	20 56 12	                jsr  nib2hex
.0ee4	8d ed 0f	                sta  valx
.0ee7	ad 43 10	                lda  regp
.0eea	48		                pha
.0eeb	20 56 12	                jsr  nib2hex
.0eee	8d 04 10	                sta  valp+1
.0ef1	68		                pla
.0ef2	20 62 12	                jsr  lsra4bits
.0ef5	20 56 12	                jsr  nib2hex
.0ef8	8d 03 10	                sta  valp
.0efb	ad 44 10	                lda  regs
.0efe	48		                pha
.0eff	20 56 12	                jsr  nib2hex
.0f02	8d 0f 10	                sta  vals+1
.0f05	68		                pla
.0f06	20 62 12	                jsr  lsra4bits
.0f09	20 56 12	                jsr  nib2hex
.0f0c	8d 0e 10	                sta  vals
.0f0f	ad 45 10	                lda  regpch
.0f12	48		                pha
.0f13	20 56 12	                jsr  nib2hex
.0f16	8d 1b 10	                sta  valpch+1
.0f19	68		                pla
.0f1a	20 62 12	                jsr  lsra4bits
.0f1d	20 56 12	                jsr  nib2hex
.0f20	8d 1a 10	                sta  valpch
.0f23	ad 46 10	                lda  regpcl
.0f26	48		                pha
.0f27	20 56 12	                jsr  nib2hex
.0f2a	8d 1d 10	                sta  valpcl+1
.0f2d	68		                pla
.0f2e	20 62 12	                jsr  lsra4bits
.0f31	20 56 12	                jsr  nib2hex
.0f34	8d 1c 10	                sta  valpcl
.0f37	a5 fb		                lda  zpage1
.0f39	48		                pha
.0f3a	20 56 12	                jsr  nib2hex
.0f3d	8d 2c 10	                sta  valz1l
.0f40	68		                pla
.0f41	20 62 12	                jsr  lsra4bits
.0f44	20 56 12	                jsr  nib2hex
.0f47	8d 2d 10	                sta  valz1l+1
.0f4a	a5 fc		                lda  zpage1+1
.0f4c	48		                pha
.0f4d	20 56 12	                jsr  nib2hex
.0f50	8d 2a 10	                sta  valz1h
.0f53	68		                pla
.0f54	20 62 12	                jsr  lsra4bits
.0f57	20 56 12	                jsr  nib2hex
.0f5a	8d 2b 10	                sta  valz1h+1
.0f5d	a5 fd		                lda  zpage2
.0f5f	48		                pha
.0f60	20 56 12	                jsr  nib2hex
.0f63	8d 3c 10	                sta  valz2l
.0f66	68		                pla
.0f67	20 62 12	                jsr  lsra4bits
.0f6a	20 56 12	                jsr  nib2hex
.0f6d	8d 3d 10	                sta  valz2l+1
.0f70	a5 fe		                lda  zpage2+1
.0f72	48		                pha
.0f73	20 56 12	                jsr  nib2hex
.0f76	8d 3a 10	                sta  valz2h
.0f79	68		                pla
.0f7a	20 62 12	                jsr  lsra4bits
.0f7d	20 56 12	                jsr  nib2hex
.0f80	8d 3b 10	                sta  valz2h+1
.0f83	20 7e 0e	                jsr  setinverse
.0f86	78		                sei
.0f87	a2 da		                ldx  #<srega
.0f89	a0 0f		                ldy  #>srega+1
.0f8b	20 26 0e	                jsr  putscxy
.0f8e	a2 e5		                ldx  #<sregx
.0f90	a0 0f		                ldy  #>sregx+1
.0f92	20 26 0e	                jsr  putscxy
.0f95	a2 f0		                ldx  #<sregy
.0f97	a0 0f		                ldy  #>sregy+1
.0f99	20 26 0e	                jsr  putscxy
.0f9c	a2 fb		                ldx  #<sregp
.0f9e	a0 0f		                ldy  #>sregp+1
.0fa0	20 26 0e	                jsr  putscxy
.0fa3	a2 06		                ldx  #<sregs
.0fa5	a0 10		                ldy  #>sregs+1
.0fa7	20 26 0e	                jsr  putscxy
.0faa	a2 11		                ldx  #<sregpc
.0fac	a0 10		                ldy  #>sregpc+1
.0fae	20 26 0e	                jsr  putscxy
.0fb1	a2 20		                ldx  #<sregz1
.0fb3	a0 10		                ldy  #>sregz1+1
.0fb5	20 26 0e	                jsr  putscxy
.0fb8	a2 30		                ldx  #<sregz2
.0fba	a0 10		                ldy  #>sregz2+1
.0fbc	20 26 0e	                jsr  putscxy
.0fbf	58		                cli
.0fc0	20 86 0e	                jsr  clrinverse
.0fc3	ad 45 10	                lda  regpch
.0fc6	48		                pha
.0fc7	ad 46 10	                lda  regpcl
.0fca	48		                pha
.0fcb	ac 42 10	                ldy  regy
.0fce	ae 41 10	                ldx  regx
.0fd1	ad 43 10	                lda  regp
.0fd4	48		                pha
.0fd5	ad 40 10	                lda  rega
.0fd8	28		                plp
.0fd9	60		                rts
>0fda	01 00 00 17	srega   .byte   colr,bkcol,coln,line
>0fde	20 41 3a 24	        .text   ' a:$' ;4,24
>0fe2	00 00 00	vala    .byte   0,0,0
>0fe5	01 00 06 17	sregx   .byte   colr,bkcol,coln+6,line
>0fe9	20 58 3a 24	        .text   ' x:$' ;4,24
>0fed	00 00 00	valx    .byte   0,0,0
>0ff0	01 00 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>0ff4	20 59 3a 24	        .text   ' y:$' ;4,24
>0ff8	00 00 00	valy    .byte   0,0,0
>0ffb	01 00 12 17	sregp   .byte   colr,bkcol,coln+18,line
>0fff	20 50 3a 24	        .text   ' p:$' ;4,24
>1003	00 00 00	valp    .byte   0,0,0
>1006	01 00 18 17	sregs   .byte   colr,bkcol,coln+24,line
>100a	20 53 3a 24	        .text   ' s:$' ;4,24
>100e	00 00 00	vals    .byte   0,0,0
>1011	01 00 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>1015	20 50 43 3a	        .text   ' pc:$' ;4,24
>1019	24
>101a	00 00		valpch  .byte   0,0
>101c	00 00 20 00	valpcl  .byte   0,0,32,0
>1020	01 00 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>1024	20 5a 50 31	        .text   ' zp1:$' ;4,24
>1028	3a 24
>102a	00 00		valz1h  .byte   0,0
>102c	00 00 20 00	valz1l  .byte   0,0,32,0
>1030	01 00 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>1034	20 5a 50 32	        .text   ' zp2:$' ;4,24
>1038	3a 24
>103a	00 00		valz2h  .byte   0,0
>103c	00 00 20 00	valz2l  .byte   0,0,32,0
>1040	00		rega    .byte   0
>1041	00		regx    .byte   0
>1042	00		regy    .byte   0
>1043	00		regp    .byte   0
>1044	00		regs    .byte   0
>1045	00		regpch  .byte   0
>1046	00		regpcl  .byte   0
>1047	00		regpcl2 .byte   0
>1048	00		vzp1h   .byte   0
>1049	00		vzp1l   .byte   0
>104a	00		vzp2h   .byte   0
>104b	00		vzp2l   .byte   0

;******  Return to file: p034ex16.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.104c			push
.104c	08		          php            ; stack : flg, pcl, pch
.104d	78		          sei
.104e	8d 88 10	          sta  ra        ; save a
.1051	68		          pla            ; stack : pcl, pch
.1052	8d 87 10	          sta  rp        ; save rp
.1055	68		          pla            ; stack : pch
.1056	8d 89 10	          sta  pc        ; save pcl
.1059	68		          pla            ; stack : -
.105a	8d 8a 10	          sta  pc+1      ; save pch
.105d	a5 fb		          lda  zpage1    ; get zpage1 low byte
.105f	48		          pha            ; stack : zp1l
.1060	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1062	48		          pha            ; stack : zp1h, zp1l
.1063	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1065	48		          pha            ; stack : zp2l, zp1h, zp1l
.1066	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1068	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1069	ad 87 10	          lda  rp        ; get rp
.106c	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.106d	ad 88 10	          lda  ra        ; get a
.1070	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1071	8a		          txa            ; get x
.1072	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1073	98		          tya            ; get y
.1074	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1075	ad 8a 10	          lda  pc+1      ; get pch
.1078	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1079	ad 89 10	          lda  pc        ; get pcl
.107c	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.107d	ad 87 10	          lda  rp        ; get rp
.1080	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1081	ad 88 10	          lda  ra        ; get a
.1084	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1085	58		          cli
.1086	60		          rts
>1087	00		rp        .byte     0
>1088	00		ra        .byte     0
>1089	00 00		pc        .word     0
.108b			pull
.108b			pop
.108b	78		          sei
.108c	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.108d	8d c0 10	          sta  pc        ; save pcl
.1090	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1091	8d c1 10	          sta  pc+1      ; save pch
.1094	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1095	a8		          tay            ; set y
.1096	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1097	aa		          tax            ; set x
.1098	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1099	8d bf 10	          sta  ra        ; save a
.109c	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.109d	8d be 10	          sta  rp        ; save rp
.10a0	68		          pla            ; stack : zp2l, zp1h, zp1l
.10a1	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.10a3	68		          pla            ; stack : zp1h, zp1l
.10a4	85 fd		          sta  zpage2    ; get zpage2 High byte
.10a6	68		          pla            ; stack : zp1l
.10a7	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.10a9	68		          pla            ; stack :
.10aa	85 fb		          sta  zpage1    ; get zpage1 High byte
.10ac	ad c1 10	          lda  pc+1      ; get pch
.10af	48		          pha            ; stack : pch
.10b0	ad c0 10	          lda  pc
.10b3	48		          pha            ; stack : pcl, pch
.10b4	ad be 10	          lda  rp        ; get rp
.10b7	48		          pha            ; stack : rp, pcl, pch
.10b8	ad bf 10	          lda  ra        ; set ra
.10bb	58		          cli
.10bc	28		          plp            ; stack : pcl, pch
.10bd	60		          rts
>10be	00		rp        .byte     0
>10bf	00		ra        .byte     0
>10c0	00 00		pc        .word     0

;******  Return to file: p034ex16.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.10c2			blkfill
.10c2	20 4c 10	bf0            jsr  push
.10c5	20 83 11	               jsr  savezp1
.10c8	84 fc		               sty  zpage1+1
.10ca	a0 00		               ldy  #$00
.10cc	84 fb		               sty  zpage1
.10ce	91 fb		bf1            sta  (zpage1),y
.10d0	c8		               iny
.10d1	d0 fb		               bne  bf1
.10d3	20 92 11	               jsr  restzp1
.10d6	20 8b 10	               jsr  pop
.10d9	60		               rts
.10da			memfill
.10da	20 4c 10	               jsr  push
.10dd	20 c2 10	mf1            jsr  blkfill
.10e0	c8		               iny
.10e1	ca		               dex
.10e2	d0 f9		               bne  mf1
.10e4	20 8b 10	               jsr  pop
.10e7	60		               rts
.10e8			memmove
.10e8	20 4c 10	               jsr  push
.10eb	ba		               tsx            ; On se crée un pointeur ...
.10ec	8a		               txa
.10ed	18		               clc
.10ee	69 0b		               adc  #11
.10f0	a8		               tay
.10f1	a2 06		               ldx  #$06
.10f3	b9 00 01	nextbyte       lda  $0100,y
.10f6	99 42 11	               sta  words,y
.10f9	c8		               iny
.10fa	ca		               dex
.10fb	d0 f6		               bne  nextbyte
.10fd	ad 42 11	               lda  s
.1100	8d 19 11	               sta  source+1
.1103	ad 43 11	               lda  s+1
.1106	8d 1a 11	               sta  source+2
.1109	ad 44 11	               lda  d
.110c	8d 16 11	               sta  destin+1
.110f	ad 45 11	               lda  d+1
.1112	8d 17 11	               sta  destin+2
.1115	ad ff ff	destin         lda  $ffff
.1118	8d ff ff	source         sta  $ffff
.111b	ee 16 11	               inc  destin+1
.111e	d0 03		               bne  src
.1120	ee 17 11	               inc  destin+2
.1123	ee 19 11	src            inc  source+1
.1126	d0 03		               bne  cnt
.1128	ee 1a 11	               inc  source+2
.112b	ad 46 11	cnt            lda  compte
.112e	d0 08		               bne  decit
.1130	ad 47 11	               lda  compte+1
.1133	f0 09		               beq  fini
.1135	ce 47 11	               dec  compte+1
.1138	ce 46 11	decit          dec  compte
.113b	4c 15 11	               jmp  destin
.113e	20 8b 10	fini           jsr  pop
.1141	60		               rts
.1142			words
>1142	00 00		s         .word     $0000
>1144	00 00		d         .word     $0000
>1146	00 00		compte    .word     $0000
.1148			decword
.1148	20 4c 10	               jsr  push
.114b	86 fd		               stx  zpage2
.114d	84 fe		               sty  zpage2+1
.114f	20 8b 10	               jsr  pop
.1152	60		               rts
.1153			inczp1
.1153	08		               php
.1154	48		               pha
.1155	e6 fb		               inc  zpage1
.1157	a5 fb		               lda  zpage1
.1159	d0 02		               bne  nopage
.115b	e6 fc		               inc  zpage1+1
.115d	68		nopage         pla
.115e	28		               plp
.115f	60		               rts
.1160			deczp1
.1160	08		                php
.1161	48		                pha
.1162	c6 fb		                dec  zpage1
.1164	d0 02		                bne  nopage
.1166	c6 fc		                dec  zpage1+1
.1168	68		nopage          pla
.1169	28		                plp
.116a	60		                rts
.116b			inczp2
.116b	08		               php
.116c	48		               pha
.116d	e6 fd		               inc  zpage2
.116f	a5 fd		               lda  zpage2
.1171	d0 02		               bne  nopage
.1173	e6 fe		               inc  zpage2+1
.1175	68		nopage         pla
.1176	28		               plp
.1177	60		               rts
.1178			deczp2
.1178	08		               php
.1179	48		               pha
.117a	a5 fd		               lda  zpage2
.117c	d0 02		               bne  nopage
.117e	c6 fe		               dec  zpage2+1
.1180	68		nopage         pla
.1181	28		               plp
.1182	60		               rts
.1183			savezp1
.1183	08		               php
.1184	48		               pha
.1185	a5 fb		               lda  zpage1
.1187	8d ff 11	               sta  zp1
.118a	a5 fc		               lda  zpage1+1
.118c	8d 00 12	               sta  zp1+1
.118f	68		               pla
.1190	28		               plp
.1191	60		               rts
.1192			restzp1
.1192	08		               php
.1193	48		               pha
.1194	ad ff 11	               lda zp1
.1197	85 fb		               sta zpage1
.1199	ad 00 12	               lda zp1+1
.119c	85 fc		               sta zpage1+1
.119e	68		               pla
.119f	28		               plp
.11a0	60		               rts
.11a1			savezp2
.11a1	08		         php
.11a2	48		         pha
.11a3	a5 fd		         lda zpage2
.11a5	8d 01 12	         sta zp2
.11a8	a5 fe		         lda zpage2+1
.11aa	8d 02 12	         sta zp2+1
.11ad	68		         pla
.11ae	28		         plp
.11af	60		         rts
.11b0			restzp2
.11b0	08		                php
.11b1	48		                pha
.11b2	ad 01 12	                lda  zp2
.11b5	85 fd		                sta  zpage2
.11b7	ad 02 12	                lda  zp2+1
.11ba	85 fe		                sta  zpage2+1
.11bc	68		                pla
.11bd	28		                plp
.11be	60		                rts
.11bf			xy2addr
.11bf	08		                php
.11c0	48		                pha
.11c1	8a		                txa
.11c2	48		                pha
.11c3	98		                tya
.11c4	48		                pha
.11c5	ad fa 11	                lda     addr1+1
.11c8	8d fc 11	                sta     addr2+1
.11cb	ad f9 11	                lda     addr1
.11ce	8d fb 11	                sta     addr2
.11d1	c0 00		                cpy     #$00
.11d3	f0 0f		                beq     addx
.11d5	18		moreline        clc
.11d6	6d f8 11	                adc     ymult
.11d9	90 03		                bcc     norepy
.11db	ee fc 11	                inc     addr2+1
.11de	8d fb 11	norepy          sta     addr2
.11e1	88		                dey
.11e2	d0 f1		                bne     moreline
.11e4	8a		addx            txa
.11e5	18		                clc
.11e6	6d fb 11	                adc     addr2
.11e9	90 03		                bcc     thatsit
.11eb	ee fc 11	                inc     addr2+1
.11ee	8d fb 11	thatsit         sta     addr2
.11f1	68		                pla
.11f2	a8		                tay
.11f3	68		                pla
.11f4	aa		                tax
.11f5	68		                pla
.11f6	28		                plp
.11f7	60		                rts
>11f8	28		ymult          .byte     40
>11f9	00 00		addr1          .word     $0000
>11fb	00 00		addr2          .word     $0000
>11fd	00 00		bytecnt        .word     $0000
>11ff	00 00		zp1        .word   $0000
>1201	00 00		zp2        .word   $0000

;******  Return to file: p034ex16.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1203	01		a2hexcol       .byte     1              ; pour aputscxy
>1204	00		a2hexbkcol     .byte     %00000000
.1205			a2hexpos
>1205	00		a2hexpx        .byte     0              ; pour aputsxy
>1206	00		a2hexpy        .byte     0
>1207	24		a2hexprefix    .byte     "$"            ; pour aputs
>1208	00 00		a2hexstr       .word     $00
>120a	00 00		               .word     $00
>120c	00		               .byte     0              ; 0 end string
>120d	30 30 30 30	abin           .null     "00000000"
>1211	30 30 30 30 00
>1216	20 20 20 00	adec           .null     "   "
.121a			putahexfmtxy
.121a	20 4c 10	               jsr  push
.121d	20 69 12	               jsr  a2hex
.1220	ae 05 12	               ldx  a2hexpx
.1223	ac 06 12	               ldy  a2hexpy
.1226	20 b7 0d	               jsr  gotoxy
.1229	a2 07		               ldx  #<a2hexprefix
.122b	a0 12		               ldy  #>a2hexprefix
.122d	20 9d 0d	               jsr  puts
.1230	20 8b 10	               jsr  pop
.1233	60		               rts
.1234			putahexfmt
.1234	20 4c 10	               jsr  push
.1237	20 69 12	               jsr  a2hex
.123a	a2 07		               ldx  #<a2hexprefix
.123c	a0 12		               ldy  #>a2hexprefix
.123e	20 9d 0d	               jsr  puts
.1241	20 8b 10	               jsr  pop
.1244	60		               rts
.1245			putahex
.1245	20 4c 10	               jsr  push
.1248	20 69 12	               jsr  a2hex
.124b	a2 08		               ldx  #<a2hexstr
.124d	a0 12		               ldy  #>a2hexstr
.124f	20 9d 0d	               jsr  puts
.1252	20 8b 10	               jsr  pop
.1255	60		               rts
.1256			nib2hex
.1256	08		               php
.1257	29 0f		               and  #$0f
.1259	f8		               sed
.125a	18		               clc
.125b	69 90		               adc  #$90
.125d	69 40		               adc  #$40
.125f	d8		               cld
.1260	28		               plp
.1261	60		               rts
.1262			lsra4bits
.1262	08		               php
.1263	4a		               lsr
.1264	4a		               lsr
.1265	4a		               lsr
.1266	4a		               lsr
.1267	28		               plp
.1268	60		               rts
.1269			a2hex
.1269	08		               php
.126a	48		               pha
.126b	48		               pha
.126c	20 62 12	               jsr  lsra4bits
.126f	20 56 12	               jsr  nib2hex
.1272	8d 08 12	               sta  a2hexstr
.1275	68		               pla
.1276	20 56 12	               jsr  nib2hex
.1279	8d 09 12	               sta  a2hexstr+1
.127c	a9 00		               lda  #$00                ; set end of string
.127e	8d 0a 12	               sta  a2hexstr+2
.1281	68		               pla
.1282	28		               plp
.1283	60		               rts
.1284			xy2hex
.1284	20 4c 10	               jsr  push
.1287	20 69 12	               jsr  a2hex
.128a	8a		               txa
.128b	48		               pha
.128c	20 62 12	               jsr  lsra4bits
.128f	20 56 12	               jsr  nib2hex
.1292	8d 08 12	               sta  a2hexstr
.1295	68		               pla
.1296	20 56 12	               jsr  nib2hex
.1299	8d 09 12	               sta  a2hexstr+1
.129c	98		               tya
.129d	48		               pha
.129e	20 62 12	               jsr  lsra4bits
.12a1	20 56 12	               jsr  nib2hex
.12a4	8d 0a 12	               sta  a2hexstr+2
.12a7	68		               pla
.12a8	20 56 12	               jsr  nib2hex
.12ab	8d 0b 12	               sta  a2hexstr+3
.12ae	a9 00		               lda  #$00                ; 0 ended string
.12b0	8d 0c 12	               sta  a2hexstr+4
.12b3	20 8b 10	               jsr  pop
.12b6			atobin
.12b6	20 4c 10	               jsr  push
.12b9	a2 08		               ldx  #8
.12bb	a0 00		               ldy  #0
.12bd	18		               clc
.12be	2a		nextbit        rol
.12bf	48		               pha
.12c0	69 00		               adc  #$00
.12c2	29 01		               and  #$01
.12c4	20 56 12	               jsr  nib2hex
.12c7	99 0d 12	               sta  abin,y
.12ca	68		               pla
.12cb	c8		               iny
.12cc	ca		               dex
.12cd	d0 ef		               bne  nextbit
.12cf	a9 00		               lda  #0
.12d1	99 0d 12	               sta  abin,y
.12d4	20 8b 10	               jsr  pull
.12d7	60		               rts
.12d8			putabin
.12d8	20 b6 12	               jsr     atobin
.12db	20 4c 10	               jsr     push
.12de	a2 0d		               ldx     #<abin
.12e0	a0 12		               ldy     #>abin
.12e2	20 9d 0d	               jsr     puts
.12e5	20 8b 10	               jsr     pop
.12e8	60		               rts
.12e9			printabin
.12e9	20 4c 10	               jsr     push
.12ec	a2 0d		               ldx     #<abin
.12ee	a0 12		               ldy     #>abin
.12f0	20 9d 0d	               jsr     puts
.12f3	20 8b 10	               jsr     pop
.12f6	60		               rts
.12f7			putabinfmt
.12f7	08		               php
.12f8	48		               pha
.12f9	a9 25		               lda     #"%"
.12fb	20 97 0d	               jsr     putch
.12fe	68		               pla
.12ff	20 d8 12	               jsr     putabin
.1302	28		               plp
.1303	60		               rts
.1304			putabinxy
.1304	20 b7 0d	               jsr     gotoxy
.1307	20 d8 12	               jsr     putabin
.130a	60		               rts
.130b			putabinfmtxy
.130b	20 b7 0d	               jsr     gotoxy
.130e	20 f7 12	               jsr     putabinfmt
.1311	60		               rts
.1312			atodec
.1312	20 4c 10	               jsr  push
.1315	f8		               sed
.1316	aa		               tax
.1317	a0 00		               ldy  #$00
.1319	a9 00		               lda  #$00
.131b	18		nextbit        clc
.131c	69 01		               adc  #$01
.131e	90 01		               bcc  decx
.1320	c8		               iny
.1321	ca		decx           dex
.1322	d0 f7		               bne  nextbit
.1324	48		               pha
.1325	98		               tya
.1326	20 56 12	               jsr  nib2hex
.1329	8d 16 12	               sta  adec
.132c	68		               pla
.132d	48		               pha
.132e	20 56 12	               jsr  nib2hex
.1331	8d 18 12	               sta  adec+2
.1334	68		               pla
.1335	6a		               ror
.1336	6a		               ror
.1337	6a		               ror
.1338	6a		               ror
.1339	20 56 12	               jsr  nib2hex
.133c	8d 17 12	               sta  adec+1
.133f	d8		               cld
.1340	20 8b 10	               jsr  pull
.1343	60		               rts
>1344	00 00 00	buffer         .byte     0,0,0
.1347			putadec
.1347	20 4c 10	               jsr  push
.134a	20 12 13	               jsr  atodec
.134d	a2 16		               ldx  #<adec
.134f	a0 12		               ldy  #>adec+1
.1351	20 9d 0d	               jsr  puts
.1354	20 8b 10	               jsr  pop
.1357	60		               rts

;******  Return to file: p034ex16.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1358	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>135c	00 00 00 00 00 00 00 00 00 0d 00 00
>1368	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>136c	00 00 00 00 00 00 00 00 00 00 00 00
>1378	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>137c	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1388	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>138c	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1398	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>139c	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>13a8	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>13ac	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>13b8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>13bc	00 00 00 00 00 00 00 00 00 00 00 00
>13c8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>13cc	00 00 00 00 00 00 00 00 00 00 00 00
>13d8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>13dc	00 00 00 00 00 00 00 00 00 00 00 00
>13e8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>13ec	00 00 00 00 00 00 00 00 00 00 00 00
>13f8	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>13fc	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1408	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>140c	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1418	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>141c	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1428	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>142c	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1438	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>143c	00 00 00 00 00 00 00 00 00 00 00 00
>1448	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>144c	00 00 00 00 00 00 00 00 00 00 00 00
.1458			waitstop
.1458	20 4c 10	               jsr  push
.145b	20 ed f6	wait           jsr  k_stop
.145e	d0 fb		               bne  wait
.1460	20 8b 10	               jsr  pop
.1463	60		               rts
.1464			anykey
.1464	08		               php
.1465	48		               pha
.1466	a5 cb		nokey          lda 203
.1468	c9 40		               cmp #64
.146a	f0 fa		               beq nokey
.146c	20 72 14	               jsr releasekey
.146f	68		               pla
.1470	28		               plp
.1471	60		               rts
.1472			releasekey
.1472	08		               php
.1473	48		               pha
.1474	a5 cb		keypressed     lda 203
.1476	c9 40		               cmp #64
.1478	d0 fa		               bne keypressed
.147a	68		               pla
.147b	28		               plp
.147c	60		               rts
.147d			getkey
.147d	20 e4 ff	again          jsr  getin
.1480	c9 00		               cmp  #0
.1482	f0 f9		               beq  again
.1484	60		               rts
.1485			kbflushbuff
.1485	08		               php
.1486	48		               pha
.1487	20 e4 ff	again          jsr  getin
.148a	c9 00		               cmp  #0
.148c	d0 f9		               bne  again
.148e	68		               pla
.148f	28		               plp
.1490	60		               rts
.1491			waitkey
.1491	20 4c 10	               jsr  push
.1494	8d e2 14	               sta  thekey
.1497	20 e4 ff	nope           jsr  getin
.149a	20 d2 ff	               jsr  chrout
.149d	cd e2 14	               cmp  thekey
.14a0	d0 f5		               bne  nope
.14a2	20 d2 ff	               jsr  chrout
.14a5	20 8b 10	               jsr  pop
.14a8	60		               rts
.14a9			waitspace
.14a9	20 4c 10	               jsr  push
.14ac	a9 7f		wait           lda  #$7f  ;%01111111
.14ae	8d 00 dc	               sta  $dc00
.14b1	ad 01 dc	               lda  $dc01
.14b4	29 10		               and  #$10  ;mask %00010000
.14b6	d0 f4		               bne  wait
.14b8	20 8b 10	               jsr  pop
.14bb			waitsstop
.14bb	20 4c 10	               jsr  push
.14be	20 ed f6	wait           jsr  k_stop  ;%01111111
.14c1	d0 fb		               bne  wait
.14c3	20 8b 10	               jsr  pop
.14c6			waitreturn
.14c6	20 4c 10	               jsr  push
.14c9	ad e3 14	               lda  thecount
.14cc	8d 00 04	               sta  scrnram
.14cf	a9 02		               lda  #$02
.14d1	8d 00 d8	               sta  colorram
.14d4	20 e4 ff	nope           jsr  getin
.14d7	c9 0d		nohex          cmp  #$0d
.14d9	d0 f9		               bne  nope
.14db	ee e3 14	               inc  thecount
.14de	20 8b 10	               jsr  pop
.14e1	60		               rts
>14e2	00		thekey         .byte   0
>14e3	01		thecount       .byte   $01

;******  Return to file: p034ex16.asm


;******  End of listing

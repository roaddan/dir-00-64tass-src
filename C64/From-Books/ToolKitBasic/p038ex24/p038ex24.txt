
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p038ex24.txt -o p038ex24.prg p038ex24.asm
; Mon Nov  4 20:11:14 2024

;Offset	;Hex		;Source

;******  Processing input file: p038ex24.asm

="20241030-205806"	           Version = "20241030-205806"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 1f 0a	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p038ex24.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p038ex24.asm

.0854			p038ex24
.0854	20 90 0e	          jsr  push           ; Sauvegarde le statut complet.
.0857			again
.0857	48		               pha
.0858	a9 03		               lda  #ccyan
.085a	8d 20 d0	               sta  $d020
.085d	68		               pla
.085e	48		               pha
.085f	a9 01		               lda  #cblanc
.0861	8d 21 d0	               sta  $d021
.0864	68		               pla
.0865	48		               pha
.0866	a9 06		               lda  #cbleu
.0868	8d 86 02	               sta  bascol
.086b	68		               pla
.086c	20 82 0d	          jsr  cls            ; On efface l'écran.
.086f	20 90 0e	               jsr  push
.0872	a2 e7		isx            ldx  #<ttext
.0874	a0 08		isy            ldy  #>ttext
.0876	20 9f 0d	               jsr  puts
.0879	20 cf 0e	               jsr  pull
.087c	20 90 0e	               jsr  push
.087f	a2 13		isx            ldx  #<ptext1a
.0881	a0 09		isy            ldy  #>ptext1a
.0883	20 9f 0d	               jsr  puts
.0886	20 cf 0e	               jsr  pull
.0889	20 07 0d	          jsr  insub          ; Lit le premier nombre.
.088c	a9 00		          lda  #$00
.088e	85 0d		          sta  $0d
.0890	20 a1 b7	          jsr  b_f1tx
.0893	8a		          txa
.0894	20 90 0e	               jsr  push
.0897	a2 09		isx            ldx  #<restxtx
.0899	a0 0a		isy            ldy  #>restxtx
.089b	20 9f 0d	               jsr  puts
.089e	20 cf 0e	               jsr  pull
.08a1	20 78 10	          jsr  putahexfmt
.08a4	a9 0d		          lda  #$0d           ; Affiche un CRLF.
.08a6	20 d2 ff	          jsr  $ffd2
.08a9	20 90 0e	               jsr  push
.08ac	a2 c9		isx            ldx  #<query
.08ae	a0 08		isy            ldy  #>query
.08b0	20 9f 0d	               jsr  puts
.08b3	20 cf 0e	               jsr  pull
.08b6	20 c1 12	          jsr  getkey         ; Attend une clef.
.08b9	29 7f		          and  #$7f           ; Met en minuscule.
.08bb	c9 4f		          cmp  #'o'           ; Est-ce 'o'ui
.08bd	d0 03		          bne  out            ; Non, on sort.
.08bf	4c 57 08	          jmp again           ; On recommence.
.08c2	20 ab 0a	out       jsr  aide           ; Affiche le menu d'aide.
.08c5	20 cf 0e	          jsr  pop            ; Récupère le statut complet.
.08c8	60		          rts
>08c9	9a 20 0d	query     .byte     b_ltblue,b_space,b_crlf
>08cc	20 20 20 d5	          .text     "   Un autre calcul (o/N)?"
>08d0	4e 20 41 55 54 52 45 20 43 41 4c 43 55 4c 20 28
>08e0	4f 2f ce 29 3f
>08e5	0d 00		          .byte     b_crlf,b_eot
>08e7	1f 20 12	ttext     .byte     b_blue,b_space,b_rvs_on
>08ea	20 20 20 c6	          .text      "   FAC1 (0-256) en entier 8 bits (x)  "
>08ee	c1 c3 31 20 28 30 2d 32 35 36 29 20 45 4e 20 45
>08fe	4e 54 49 45 52 20 38 20 42 49 54 53 20 28 58 29
>090e	20 20
>0910	92 0d 00	          .byte     b_rvs_off,b_crlf,b_eot
>0913	0d 9c 20	ptext1a   .byte     b_crlf, b_purple, b_space
>0916	20 c5 4e 54	          .text     " Entez la valeur de FAC1"
>091a	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>092a	c6 c1 c3 31
>092e	90 00		          .byte     b_black,b_eot
>0930	0d 9c 20	ptext2a   .byte     b_crlf, b_purple, b_space
>0933	20 c5 4e 54	          .text     " Entez la valeur de FAC2"
>0937	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>0947	c6 c1 c3 32
>094b	90 00		          .byte     b_black,b_eot
>094d	0d 9c 20	ptextva   .byte     b_crlf, b_purple, b_space
>0950	20 c5 4e 54	          .text     " Entez la valeur de FVAR"
>0954	45 5a 20 4c 41 20 56 41 4c 45 55 52 20 44 45 20
>0964	c6 d6 c1 d2
>0968	90 00		          .byte     b_black,b_eot
>096a	0d 9c 20	ptext1b   .byte     b_crlf, b_purple, b_space
>096d	20 20 20 20	          .text     "      puis celle de FAC1"
>0971	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>0981	c6 c1 c3 31
>0985	90 00		          .byte     b_black,b_eot
>0987	0d 9c 20	ptext2b   .byte     b_crlf, b_purple, b_space
>098a	20 20 20 20	          .text     "      puis celle de FAC2"
>098e	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>099e	c6 c1 c3 32
>09a2	90 00		          .byte     b_black,b_eot
>09a4	0d 9c 20	ptextvb   .byte     b_crlf, b_purple, b_space
>09a7	20 20 20 20	          .text     "      puis celle de FVAR"
>09ab	20 20 50 55 49 53 20 43 45 4c 4c 45 20 44 45 20
>09bb	c6 d6 c1 d2
>09bf	90 00		          .byte     b_black,b_eot
>09c1	1e 0d		restxt1   .byte     b_green,b_crlf
>09c3	20 d2 45 53	          .text    " Resultat dans FAC1="
>09c7	55 4c 54 41 54 20 44 41 4e 53 20 c6 c1 c3 31 3d
>09d7	90 00		          .byte     b_black,b_eot
>09d9	1e 0d		restxt2   .byte     b_green,b_crlf
>09db	20 d2 45 53	          .text    " Resultat dans FAC2="
>09df	55 4c 54 41 54 20 44 41 4e 53 20 c6 c1 c3 32 3d
>09ef	90 00		          .byte     b_black,b_eot
>09f1	1e 0d		restxtv   .byte     b_green,b_crlf
>09f3	20 d2 45 53	          .text    " Resultat dans FVAR="
>09f7	55 4c 54 41 54 20 44 41 4e 53 20 c6 d6 c1 d2 3d
>0a07	90 00		          .byte     b_black,b_eot
>0a09	1e 0d		restxtx   .byte     b_green,b_crlf
>0a0b	20 d2 45 53	          .text    " Resultat dans X ="
>0a0f	55 4c 54 41 54 20 44 41 4e 53 20 d8 20 3d
>0a1d	90 00		          .byte     b_black,b_eot
.0a1f			main
.0a1f	20 62 0d	          jsr       scrmaninit
.0a22	08		               php
.0a23	48		               pha
.0a24	a9 08		               lda  #$08
.0a26	20 d2 ff	               jsr  $ffd2
.0a29	68		               pla
.0a2a	28		               plp
.0a2b	48		               pha
.0a2c	a9 03		               lda  #ccyan
.0a2e	8d 20 d0	               sta  $d020
.0a31	68		               pla
.0a32	48		               pha
.0a33	a9 01		               lda  #cblanc
.0a35	8d 21 d0	               sta  $d021
.0a38	68		               pla
.0a39	48		               pha
.0a3a	a9 06		               lda  #cbleu
.0a3c	8d 86 02	               sta  bascol
.0a3f	68		               pla
.0a40	20 61 0a	          jsr       bookinfo
.0a43	20 2b 0d	          jsr       akey
.0a46	20 82 0d	          jsr       cls
.0a49	20 ab 0a	          jsr       aide
.0a4c	20 2b 0d	          jsr       akey
.0a4f	a9 0d		          lda       #b_crlf
.0a51	20 d2 ff	          jsr       $ffd2
.0a54	20 54 08	          jsr       p038ex24
.0a57	08		               php
.0a58	48		               pha
.0a59	a9 09		               lda  #$09
.0a5b	20 d2 ff	               jsr  $ffd2
.0a5e	68		               pla
.0a5f	28		               plp
.0a60	60		          rts
.0a61			bookinfo
.0a61	20 90 0e	          jsr  push           ; Sauvegarde le statut complet.
.0a64	08		               php
.0a65	48		               pha
.0a66	a9 0e		               lda  #14
.0a68	8d 81 0d	               sta  characterset
.0a6b	20 d2 ff	               jsr  $ffd2
.0a6e	68		               pla
.0a6f	28		               plp
.0a70	20 82 0d	          jsr       cls
.0a73	20 90 0e	               jsr  push
.0a76	a2 c0		isx            ldx  #<line
.0a78	a0 0c		isy            ldy  #>line
.0a7a	20 9f 0d	               jsr  puts
.0a7d	20 cf 0e	               jsr  pull
.0a80	20 90 0e	               jsr  push
.0a83	a2 e8		isx            ldx  #<headera
.0a85	a0 0a		isy            ldy  #>headera
.0a87	20 9f 0d	               jsr  puts
.0a8a	20 cf 0e	               jsr  pull
.0a8d	20 90 0e	               jsr  push
.0a90	a2 88		isx            ldx  #<headerb
.0a92	a0 0b		isy            ldy  #>headerb
.0a94	20 9f 0d	               jsr  puts
.0a97	20 cf 0e	               jsr  pull
.0a9a	20 90 0e	               jsr  push
.0a9d	a2 c0		isx            ldx  #<line
.0a9f	a0 0c		isy            ldy  #>line
.0aa1	20 9f 0d	               jsr  puts
.0aa4	20 cf 0e	               jsr  pull
.0aa7	20 cf 0e	          jsr  pop            ; Récupère le statut complet.
.0aaa	60		          rts
.0aab			aide
.0aab	20 90 0e	          jsr  push           ; Sauvegarde le statut complet.
.0aae	08		               php
.0aaf	48		               pha
.0ab0	a9 0e		               lda  #14
.0ab2	8d 81 0d	               sta  characterset
.0ab5	20 d2 ff	               jsr  $ffd2
.0ab8	68		               pla
.0ab9	28		               plp
.0aba	20 82 0d	          jsr       cls
.0abd	20 90 0e	               jsr  push
.0ac0	a2 2b		isx            ldx  #<shortcuts
.0ac2	a0 0c		isy            ldy  #>shortcuts
.0ac4	20 9f 0d	               jsr  puts
.0ac7	20 cf 0e	               jsr  pull
.0aca	20 90 0e	               jsr  push
.0acd	a2 ac		isx            ldx  #<aidetext
.0acf	a0 0c		isy            ldy  #>aidetext
.0ad1	20 9f 0d	               jsr  puts
.0ad4	20 cf 0e	               jsr  pull
.0ad7	20 90 0e	               jsr  push
.0ada	a2 c0		isx            ldx  #<line
.0adc	a0 0c		isy            ldy  #>line
.0ade	20 9f 0d	               jsr  puts
.0ae1	20 cf 0e	               jsr  pull
.0ae4	20 cf 0e	          jsr  pop            ; Récupère le statut complet.
.0ae7	60		          rts
.0ae8			headera
>0ae8	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>0aec	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>0afc	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>0b0c	20 20 2a
>0b0f	0d		          .byte     b_crlf
>0b10	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>0b14	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>0b24	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>0b34	20 20 2a
>0b37	0d		          .byte     b_crlf
>0b38	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>0b3c	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>0b4c	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>0b5c	20 20 2a
>0b5f	0d		          .byte     b_crlf
>0b60	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>0b64	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>0b74	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>0b84	20 20 2a 00
>0b88	0d		headerb   .byte     $0d
>0b89	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>0b8d	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>0b9d	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>0bad	20 20 2a
>0bb0	0d		          .byte     $0d
>0bb1	20 2a 20 20	          .text               " *        page 38, exemple #24        *"
>0bb5	20 20 20 20 20 20 50 41 47 45 20 33 38 2c 20 45
>0bc5	58 45 4d 50 4c 45 20 23 32 34 20 20 20 20 20 20
>0bd5	20 20 2a
>0bd8	0d		          .byte     $0d
>0bd9	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0bdd	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0bed	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0bfd	20 20 2a
>0c00	0d		          .byte     $0d
>0c01	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0c05	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0c15	34 31 30 33 30 2d 32 30 35 38 30 36 2e 20 20 20
>0c25	20 20 2a 20
>0c29	90 00		          .byte     b_black,b_eot
>0c2b	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0c2e	20 20 20 20	          .text               "       RACCOURCIS DE L'EXEMPLE        "
>0c32	20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4 c5
>0c42	20 cc 27 c5 d8 c5 cd d0 cc c5 20 20 20 20 20 20
>0c52	20 20
>0c54	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0c57	20 50 30 33	          .text     format(   " p038ex24: SYS %d ($%04x)",p038ex24, p038ex24)
>0c5b	38 45 58 32 34 3a 20 d3 d9 d3 20 32 31 33 32 20
>0c6b	28 24 30 38 35 34 29
>0c72	0d		          .byte     b_crlf
>0c73	20 41 49 44	          .text     format(   " aide....: SYS %d ($%04x)",aide, aide)
>0c77	45 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 37 33 31 20
>0c87	28 24 30 41 41 42 29
>0c8e	0d		          .byte     b_crlf
>0c8f	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04x)",cls, cls)
>0c93	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 34 35 38 20
>0ca3	28 24 30 44 38 32 29
>0caa	0d 00		          .byte     b_crlf,b_eot
>0cac	0d 20 1c	aidetext  .byte     b_crlf,b_space,b_red
>0caf	20 45 58 2e	          .text     format(   " ex.: SYS %d",p038ex24)
>0cb3	3a 20 d3 d9 d3 20 32 31 33 32
>0cbd	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0cc0	20 2d 2d 2d	line      .text               " --------------------------------------"
>0cc4	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0cd4	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0ce4	2d 2d 2d
>0ce7	0d 00		          .byte     b_crlf,b_eot

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/toolkitbasic.asm

.0ce9			outsub
.0ce9	20 90 0e	          jsr  push           ; Sauvegarde le statut complet.
.0cec	a0 ff		          ldy  #$ff           ; On détermine
.0cee	c8		nxtchr    iny                 ;  le nombre de caractères
.0cef	b9 00 01	          lda  $0100,y        ;  qu'il y a dans la chaine à afficher.
.0cf2	d0 fa		          bne  nxtchr
.0cf4	c8		          iny                 ; On ajoute 1 au nombre trouvé pour compenser
.0cf5	98		          tya                 ;  l'adresse a y=0.
.0cf6	48		          pha                 ; Sauvegarde ce nombre.
.0cf7	a9 00		          lda  #$00           ; On prépare le pointeur $22-$23
.0cf9	85 22		          sta  $22            ;  en le peuplant avec
.0cfb	a9 01		          lda  #$01           ;  l'adresse ou se trouve la chaine
.0cfd	85 23		          sta  $23            ;  à afficher.
.0cff	68		          pla                 ; On ramène le nombre de caractères.
.0d00	20 24 ab	          jsr  b_strout       ; On affiche.
.0d03	20 cf 0e	          jsr  pop            ; Récupère le statut complet.
.0d06	60		          rts
.0d07			insub
.0d07	20 90 0e	          jsr  push           ; Sauvegarde le statut complet.
.0d0a	20 c9 12	          jsr  kbflushbuff
.0d0d	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.0d10	a9 00		          lda  #$00           ; On efface le basic input buffer
.0d12	a0 59		          ldy  #$59           ;  situé à $200 long de 89 bytes ($59)
.0d14	99 00 02	clear     sta  b_inpbuff,y    ;  en plaçant des $00 partout
.0d17	88		          dey                 ;  et ce jusqu'au
.0d18	d0 fa		          bne  clear          ;  dernier.
.0d1a	20 f9 ab	          jsr  b_prompt       ; Affiche un "?" et attend une entrée.
.0d1d	86 7a		          stx  $7a            ; X et Y pointe sur $01ff au retour.
.0d1f	84 7b		          sty  $7b
.0d21	20 73 00	          jsr  b_chrget       ; Lecture du buffer.
.0d24	20 f3 bc	          jsr  b_ascflt       ; Conversion la chaine ascii en 200 en float.
.0d27	20 cf 0e	          jsr  pop            ; Récupère le statut complet.
.0d2a	60		          rts
.0d2b			akey
.0d2b	20 90 0e	               jsr  push
.0d2e	a2 3c		isx            ldx  #<kmsg
.0d30	a0 0d		isy            ldy  #>kmsg
.0d32	20 9f 0d	               jsr  puts
.0d35	20 cf 0e	               jsr  pull
.0d38	20 a8 12	          jsr  anykey
.0d3b	60		          rts
>0d3c	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>0d40	d5 4e 45 20	          .text               "Une clef pour continuer!"
>0d44	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0d54	55 45 52 21
>0d58	90 00		          .byte b_black,b_eot
.0d5a			kmsgend

;******  Return to file: p038ex24.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0d5a	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0d5e	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0d62			libtart

;******  Return to file: p038ex24.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p038ex24.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p038ex24.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0d62			scrmaninit
.0d62	20 90 0e	               jsr  push
.0d65	a9 06		               lda  #vbleu
.0d67	8d 21 d0	               sta  vicbackcol
.0d6a	a9 05		               lda  #vvert
.0d6c	8d 20 d0	               sta  vicbordcol
.0d6f	a9 01		               lda  #vblanc
.0d71	8d 86 02	               sta  bascol
.0d74	ad 00 04	               lda  scrnram
.0d77	8d 00 04	               sta  scrnram
.0d7a	20 82 0d	               jsr  cls
.0d7d	20 cf 0e	               jsr  pop
.0d80	60		               rts
>0d81	8e		characterset   .byte b_uppercase
.0d82			cls
.0d82	08		               php
.0d83	48		               pha
.0d84	a9 93		               lda  #$93
.0d86	20 99 0d	               jsr  putch
.0d89	68		               pla
.0d8a	28		               plp
.0d8b	60		               rts
.0d8c			putnch
.0d8c	08		               php
.0d8d	e0 00		               cpx  #$00
.0d8f	f0 06		               beq  out
.0d91	20 d2 ff	again          jsr  $ffd2
.0d94	ca		               dex
.0d95	d0 fa		               bne  again
.0d97	28		out            plp
.0d98	60		               rts
.0d99			putch
.0d99	08		               php
.0d9a	20 d2 ff	               jsr  $ffd2
.0d9d	28		               plp
.0d9e	60		               rts
.0d9f			puts
.0d9f	20 90 0e	               jsr  push
.0da2	86 fb		               stx  zpage1
.0da4	84 fc		               sty  zpage1+1
.0da6	a0 00		               ldy  #0
.0da8	b1 fb		next           lda  (zpage1),y
.0daa	f0 09		               beq  exit
.0dac	20 99 0d	               jsr  putch
.0daf	20 97 0f	               jsr  inczp1
.0db2	4c a8 0d	               jmp  next
.0db5	20 cf 0e	exit           jsr  pop
.0db8	60		               rts
.0db9			gotoxy
.0db9	08		               php
.0dba	18		               clc
.0dbb	8a		               txa
.0dbc	48		               pha
.0dbd	98		               tya
.0dbe	aa		               tax
.0dbf	68		               pla
.0dc0	a8		               tay
.0dc1	20 f0 ff	               jsr  kplot
.0dc4	28		               plp
.0dc5	60		               rts
.0dc6			cursor
=$0286			bascol    =    $0286
.0dc6	08		               php
.0dc7	48		               pha
.0dc8	90 12		               bcc  restore
.0dca	20 f0 ff	               jsr  kplot
.0dcd	8c ee 0d	               sty  cx
.0dd0	8e ef 0d	               stx  cy
.0dd3	ad 86 02	               lda  bascol
.0dd6	8d f0 0d	               sta  bcol
.0dd9	4c eb 0d	               jmp  out
.0ddc	ae ef 0d	restore        ldx  cy
.0ddf	ac ee 0d	               ldy  cx
.0de2	20 f0 ff	               jsr  kplot
.0de5	ad f0 0d	               lda  bcol
.0de8	8d 86 02	               sta  bascol
.0deb	68		out            pla
.0dec	28		               plp
.0ded	60		               rts
>0dee	00		cx   .byte     $00
>0def	00		cy   .byte     $00
>0df0	00		bcol .byte     $00
.0df1			cursave
.0df1	08		               php
.0df2	38		               sec
.0df3	20 c6 0d	               jsr  cursor
.0df6	28		               plp
.0df7	60		               rts
.0df8			curput
.0df8	08		               php
.0df9	18		               clc
.0dfa	20 c6 0d	               jsr  cursor
.0dfd	28		               plp
.0dfe	60		               rts
.0dff			putsxy
.0dff	20 90 0e	               jsr  push
.0e02	86 fb		               stx  zpage1
.0e04	84 fc		               sty  zpage1+1
.0e06	a0 00		               ldy  #$00
.0e08	b1 fb		               lda  (zpage1),y
.0e0a	aa		               tax
.0e0b	20 97 0f	               jsr  inczp1
.0e0e	b1 fb		               lda  (zpage1),y
.0e10	a8		               tay
.0e11	20 b9 0d	               jsr  gotoxy
.0e14	20 97 0f	               jsr  inczp1
.0e17	a6 fb		               ldx  zpage1
.0e19	a4 fc		               ldy  zpage1+1
.0e1b	20 9f 0d	               jsr  puts
.0e1e	20 cf 0e	               jsr  pop
.0e21	60		               rts
>0e22	00 00		straddr   .word     $00
>0e24	00		px        .byte     $00
>0e25	00		py        .byte     $00
>0e26	00 00		zp1       .word     $00
.0e28			putscxy
.0e28	20 90 0e	               jsr  push
.0e2b	84 fc		               sty  zpage1+1
.0e2d	86 fb		               stx  zpage1
.0e2f	ad 86 02	               lda  bascol
.0e32	8d 52 0e	               sta  bc
.0e35	a0 00		               ldy #$00
.0e37	b1 fb		               lda  (zpage1),y
.0e39	8d 86 02	               sta  bascol
.0e3c	20 97 0f	               jsr  inczp1
.0e3f	a6 fb		               ldx  zpage1
.0e41	a4 fc		               ldy  zpage1+1
.0e43	20 ff 0d	               jsr  putsxy
.0e46	ad 52 0e	               lda  bc
.0e49	8d 86 02	               sta  bascol
.0e4c	20 cf 0e	               jsr  pop
.0e4f	60		               rts
>0e50	00 00		straddr  .word      $00
>0e52	00		bc       .byte      $00
>0e53	00 00		zp1      .word      $00
.0e55			putrahex
.0e55	08		               php
.0e56	48		               pha
.0e57	20 ad 10	               jsr  a2hex
.0e5a	a9 4c		               lda  #<a2hexstr
.0e5c	a0 10		               ldy  #>a2hexstr
.0e5e	20 9f 0d	               jsr  puts
.0e61	68		               pla
.0e62	28		               plp
.0e63	60		               rts
.0e64			kputrahexxy
.0e64			bputrahexxy
.0e64			putrahexxy
.0e64	08		               php
.0e65	20 ad 10	               jsr  a2hex
.0e68	a9 49		               lda  #<a2hexpos
.0e6a	a0 10		               ldy  #>a2hexpos
.0e6c	20 ff 0d	               jsr  putsxy
.0e6f	68		               pla
.0e70	28		               plp
.0e71	60		               rts
.0e72			putrahexcxy
.0e72	08		               php
.0e73	20 ad 10	               jsr  a2hex
.0e76	a9 49		               lda  #<a2hexpos
.0e78	a0 10		               ldy  #>a2hexpos
.0e7a	20 28 0e	               jsr  putscxy
.0e7d	68		               pla
.0e7e	28		               plp
.0e7f	60		               rts
.0e80			setinverse
.0e80	48		               pha
.0e81	a9 12		               lda  #$12
.0e83	20 d2 ff	               jsr  $ffd2
.0e86	68		               pla
.0e87	60		               rts
.0e88			clrinverse
.0e88	48		               pha
.0e89	a9 92		               lda  #$92
.0e8b	20 d2 ff	               jsr  $ffd2
.0e8e	68		               pla
.0e8f	60		               rts

;******  Return to file: p038ex24.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0e90			push
.0e90	08		          php            ; stack : flg, pcl, pch
.0e91	78		          sei
.0e92	8d cc 0e	          sta  ra        ; save a
.0e95	68		          pla            ; stack : pcl, pch
.0e96	8d cb 0e	          sta  rp        ; save rp
.0e99	68		          pla            ; stack : pch
.0e9a	8d cd 0e	          sta  pc        ; save pcl
.0e9d	68		          pla            ; stack : -
.0e9e	8d ce 0e	          sta  pc+1      ; save pch
.0ea1	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0ea3	48		          pha            ; stack : zp1l
.0ea4	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0ea6	48		          pha            ; stack : zp1h, zp1l
.0ea7	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0ea9	48		          pha            ; stack : zp2l, zp1h, zp1l
.0eaa	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0eac	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0ead	ad cb 0e	          lda  rp        ; get rp
.0eb0	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0eb1	ad cc 0e	          lda  ra        ; get a
.0eb4	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0eb5	8a		          txa            ; get x
.0eb6	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eb7	98		          tya            ; get y
.0eb8	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eb9	ad ce 0e	          lda  pc+1      ; get pch
.0ebc	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ebd	ad cd 0e	          lda  pc        ; get pcl
.0ec0	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec1	ad cb 0e	          lda  rp        ; get rp
.0ec4	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec5	ad cc 0e	          lda  ra        ; get a
.0ec8	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec9	58		          cli
.0eca	60		          rts
>0ecb	00		rp        .byte     0
>0ecc	00		ra        .byte     0
>0ecd	00 00		pc        .word     0
.0ecf			pull
.0ecf			pop
.0ecf	78		          sei
.0ed0	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed1	8d 04 0f	          sta  pc        ; save pcl
.0ed4	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed5	8d 05 0f	          sta  pc+1      ; save pch
.0ed8	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed9	a8		          tay            ; set y
.0eda	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0edb	aa		          tax            ; set x
.0edc	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0edd	8d 03 0f	          sta  ra        ; save a
.0ee0	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0ee1	8d 02 0f	          sta  rp        ; save rp
.0ee4	68		          pla            ; stack : zp2l, zp1h, zp1l
.0ee5	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0ee7	68		          pla            ; stack : zp1h, zp1l
.0ee8	85 fd		          sta  zpage2    ; get zpage2 High byte
.0eea	68		          pla            ; stack : zp1l
.0eeb	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0eed	68		          pla            ; stack :
.0eee	85 fb		          sta  zpage1    ; get zpage1 High byte
.0ef0	ad 05 0f	          lda  pc+1      ; get pch
.0ef3	48		          pha            ; stack : pch
.0ef4	ad 04 0f	          lda  pc
.0ef7	48		          pha            ; stack : pcl, pch
.0ef8	ad 02 0f	          lda  rp        ; get rp
.0efb	48		          pha            ; stack : rp, pcl, pch
.0efc	ad 03 0f	          lda  ra        ; set ra
.0eff	58		          cli
.0f00	28		          plp            ; stack : pcl, pch
.0f01	60		          rts
>0f02	00		rp        .byte     0
>0f03	00		ra        .byte     0
>0f04	00 00		pc        .word     0

;******  Return to file: p038ex24.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0f06			blkfill
.0f06	20 90 0e	bf0            jsr  push
.0f09	20 c7 0f	               jsr  savezp1
.0f0c	84 fc		               sty  zpage1+1
.0f0e	a0 00		               ldy  #$00
.0f10	84 fb		               sty  zpage1
.0f12	91 fb		bf1            sta  (zpage1),y
.0f14	c8		               iny
.0f15	d0 fb		               bne  bf1
.0f17	20 d6 0f	               jsr  restzp1
.0f1a	20 cf 0e	               jsr  pop
.0f1d	60		               rts
.0f1e			memfill
.0f1e	20 90 0e	               jsr  push
.0f21	20 06 0f	mf1            jsr  blkfill
.0f24	c8		               iny
.0f25	ca		               dex
.0f26	d0 f9		               bne  mf1
.0f28	20 cf 0e	               jsr  pop
.0f2b	60		               rts
.0f2c			memmove
.0f2c	20 90 0e	               jsr  push
.0f2f	ba		               tsx            ; On se crée un pointeur ...
.0f30	8a		               txa
.0f31	18		               clc
.0f32	69 0b		               adc  #11
.0f34	a8		               tay
.0f35	a2 06		               ldx  #$06
.0f37	b9 00 01	nextbyte       lda  $0100,y
.0f3a	99 86 0f	               sta  words,y
.0f3d	c8		               iny
.0f3e	ca		               dex
.0f3f	d0 f6		               bne  nextbyte
.0f41	ad 86 0f	               lda  s
.0f44	8d 5d 0f	               sta  source+1
.0f47	ad 87 0f	               lda  s+1
.0f4a	8d 5e 0f	               sta  source+2
.0f4d	ad 88 0f	               lda  d
.0f50	8d 5a 0f	               sta  destin+1
.0f53	ad 89 0f	               lda  d+1
.0f56	8d 5b 0f	               sta  destin+2
.0f59	ad ff ff	destin         lda  $ffff
.0f5c	8d ff ff	source         sta  $ffff
.0f5f	ee 5a 0f	               inc  destin+1
.0f62	d0 03		               bne  src
.0f64	ee 5b 0f	               inc  destin+2
.0f67	ee 5d 0f	src            inc  source+1
.0f6a	d0 03		               bne  cnt
.0f6c	ee 5e 0f	               inc  source+2
.0f6f	ad 8a 0f	cnt            lda  compte
.0f72	d0 08		               bne  decit
.0f74	ad 8b 0f	               lda  compte+1
.0f77	f0 09		               beq  fini
.0f79	ce 8b 0f	               dec  compte+1
.0f7c	ce 8a 0f	decit          dec  compte
.0f7f	4c 59 0f	               jmp  destin
.0f82	20 cf 0e	fini           jsr  pop
.0f85	60		               rts
.0f86			words
>0f86	00 00		s         .word     $0000
>0f88	00 00		d         .word     $0000
>0f8a	00 00		compte    .word     $0000
.0f8c			decword
.0f8c	20 90 0e	               jsr  push
.0f8f	86 fd		               stx  zpage2
.0f91	84 fe		               sty  zpage2+1
.0f93	20 cf 0e	               jsr  pop
.0f96	60		               rts
.0f97			inczp1
.0f97	08		               php
.0f98	48		               pha
.0f99	e6 fb		               inc  zpage1
.0f9b	a5 fb		               lda  zpage1
.0f9d	d0 02		               bne  nopage
.0f9f	e6 fc		               inc  zpage1+1
.0fa1	68		nopage         pla
.0fa2	28		               plp
.0fa3	60		               rts
.0fa4			deczp1
.0fa4	08		                php
.0fa5	48		                pha
.0fa6	c6 fb		                dec  zpage1
.0fa8	d0 02		                bne  nopage
.0faa	c6 fc		                dec  zpage1+1
.0fac	68		nopage          pla
.0fad	28		                plp
.0fae	60		                rts
.0faf			inczp2
.0faf	08		               php
.0fb0	48		               pha
.0fb1	e6 fd		               inc  zpage2
.0fb3	a5 fd		               lda  zpage2
.0fb5	d0 02		               bne  nopage
.0fb7	e6 fe		               inc  zpage2+1
.0fb9	68		nopage         pla
.0fba	28		               plp
.0fbb	60		               rts
.0fbc			deczp2
.0fbc	08		               php
.0fbd	48		               pha
.0fbe	a5 fd		               lda  zpage2
.0fc0	d0 02		               bne  nopage
.0fc2	c6 fe		               dec  zpage2+1
.0fc4	68		nopage         pla
.0fc5	28		               plp
.0fc6	60		               rts
.0fc7			savezp1
.0fc7	08		               php
.0fc8	48		               pha
.0fc9	a5 fb		               lda  zpage1
.0fcb	8d 43 10	               sta  zp1
.0fce	a5 fc		               lda  zpage1+1
.0fd0	8d 44 10	               sta  zp1+1
.0fd3	68		               pla
.0fd4	28		               plp
.0fd5	60		               rts
.0fd6			restzp1
.0fd6	08		               php
.0fd7	48		               pha
.0fd8	ad 43 10	               lda zp1
.0fdb	85 fb		               sta zpage1
.0fdd	ad 44 10	               lda zp1+1
.0fe0	85 fc		               sta zpage1+1
.0fe2	68		               pla
.0fe3	28		               plp
.0fe4	60		               rts
.0fe5			savezp2
.0fe5	08		         php
.0fe6	48		         pha
.0fe7	a5 fd		         lda zpage2
.0fe9	8d 45 10	         sta zp2
.0fec	a5 fe		         lda zpage2+1
.0fee	8d 46 10	         sta zp2+1
.0ff1	68		         pla
.0ff2	28		         plp
.0ff3	60		         rts
.0ff4			restzp2
.0ff4	08		                php
.0ff5	48		                pha
.0ff6	ad 45 10	                lda  zp2
.0ff9	85 fd		                sta  zpage2
.0ffb	ad 46 10	                lda  zp2+1
.0ffe	85 fe		                sta  zpage2+1
.1000	68		                pla
.1001	28		                plp
.1002	60		                rts
.1003			xy2addr
.1003	08		                php
.1004	48		                pha
.1005	8a		                txa
.1006	48		                pha
.1007	98		                tya
.1008	48		                pha
.1009	ad 3e 10	                lda     addr1+1
.100c	8d 40 10	                sta     addr2+1
.100f	ad 3d 10	                lda     addr1
.1012	8d 3f 10	                sta     addr2
.1015	c0 00		                cpy     #$00
.1017	f0 0f		                beq     addx
.1019	18		moreline        clc
.101a	6d 3c 10	                adc     ymult
.101d	90 03		                bcc     norepy
.101f	ee 40 10	                inc     addr2+1
.1022	8d 3f 10	norepy          sta     addr2
.1025	88		                dey
.1026	d0 f1		                bne     moreline
.1028	8a		addx            txa
.1029	18		                clc
.102a	6d 3f 10	                adc     addr2
.102d	90 03		                bcc     thatsit
.102f	ee 40 10	                inc     addr2+1
.1032	8d 3f 10	thatsit         sta     addr2
.1035	68		                pla
.1036	a8		                tay
.1037	68		                pla
.1038	aa		                tax
.1039	68		                pla
.103a	28		                plp
.103b	60		                rts
>103c	28		ymult          .byte     40
>103d	00 00		addr1          .word     $0000
>103f	00 00		addr2          .word     $0000
>1041	00 00		bytecnt        .word     $0000
>1043	00 00		zp1        .word   $0000
>1045	00 00		zp2        .word   $0000

;******  Return to file: p038ex24.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1047	01		a2hexcol       .byte     1              ; pour aputscxy
>1048	00		a2hexbkcol     .byte     %00000000
.1049			a2hexpos
>1049	00		a2hexpx        .byte     0              ; pour aputsxy
>104a	00		a2hexpy        .byte     0
>104b	24		a2hexprefix    .byte     "$"            ; pour aputs
>104c	00 00		a2hexstr       .word     $00
>104e	00 00		               .word     $00
>1050	00		               .byte     0              ; 0 end string
>1051	30 30 30 30	abin           .null     "00000000"
>1055	30 30 30 30 00
>105a	20 20 20 00	adec           .null     "   "
.105e			putahexfmtxy
.105e	20 90 0e	               jsr  push
.1061	20 ad 10	               jsr  a2hex
.1064	ae 49 10	               ldx  a2hexpx
.1067	ac 4a 10	               ldy  a2hexpy
.106a	20 b9 0d	               jsr  gotoxy
.106d	a2 4b		               ldx  #<a2hexprefix
.106f	a0 10		               ldy  #>a2hexprefix
.1071	20 9f 0d	               jsr  puts
.1074	20 cf 0e	               jsr  pop
.1077	60		               rts
.1078			putahexfmt
.1078	20 90 0e	               jsr  push
.107b	20 ad 10	               jsr  a2hex
.107e	a2 4b		               ldx  #<a2hexprefix
.1080	a0 10		               ldy  #>a2hexprefix
.1082	20 9f 0d	               jsr  puts
.1085	20 cf 0e	               jsr  pop
.1088	60		               rts
.1089			putahex
.1089	20 90 0e	               jsr  push
.108c	20 ad 10	               jsr  a2hex
.108f	a2 4c		               ldx  #<a2hexstr
.1091	a0 10		               ldy  #>a2hexstr
.1093	20 9f 0d	               jsr  puts
.1096	20 cf 0e	               jsr  pop
.1099	60		               rts
.109a			nib2hex
.109a	08		               php
.109b	29 0f		               and  #$0f
.109d	f8		               sed
.109e	18		               clc
.109f	69 90		               adc  #$90
.10a1	69 40		               adc  #$40
.10a3	d8		               cld
.10a4	28		               plp
.10a5	60		               rts
.10a6			lsra4bits
.10a6	08		               php
.10a7	4a		               lsr
.10a8	4a		               lsr
.10a9	4a		               lsr
.10aa	4a		               lsr
.10ab	28		               plp
.10ac	60		               rts
.10ad			a2hex
.10ad	08		               php
.10ae	48		               pha
.10af	48		               pha
.10b0	20 a6 10	               jsr  lsra4bits
.10b3	20 9a 10	               jsr  nib2hex
.10b6	8d 4c 10	               sta  a2hexstr
.10b9	68		               pla
.10ba	20 9a 10	               jsr  nib2hex
.10bd	8d 4d 10	               sta  a2hexstr+1
.10c0	a9 00		               lda  #$00                ; set end of string
.10c2	8d 4e 10	               sta  a2hexstr+2
.10c5	68		               pla
.10c6	28		               plp
.10c7	60		               rts
.10c8			xy2hex
.10c8	20 90 0e	               jsr  push
.10cb	20 ad 10	               jsr  a2hex
.10ce	8a		               txa
.10cf	48		               pha
.10d0	20 a6 10	               jsr  lsra4bits
.10d3	20 9a 10	               jsr  nib2hex
.10d6	8d 4c 10	               sta  a2hexstr
.10d9	68		               pla
.10da	20 9a 10	               jsr  nib2hex
.10dd	8d 4d 10	               sta  a2hexstr+1
.10e0	98		               tya
.10e1	48		               pha
.10e2	20 a6 10	               jsr  lsra4bits
.10e5	20 9a 10	               jsr  nib2hex
.10e8	8d 4e 10	               sta  a2hexstr+2
.10eb	68		               pla
.10ec	20 9a 10	               jsr  nib2hex
.10ef	8d 4f 10	               sta  a2hexstr+3
.10f2	a9 00		               lda  #$00                ; 0 ended string
.10f4	8d 50 10	               sta  a2hexstr+4
.10f7	20 cf 0e	               jsr  pop
.10fa			atobin
.10fa	20 90 0e	               jsr  push
.10fd	a2 08		               ldx  #8
.10ff	a0 00		               ldy  #0
.1101	18		               clc
.1102	2a		nextbit        rol
.1103	48		               pha
.1104	69 00		               adc  #$00
.1106	29 01		               and  #$01
.1108	20 9a 10	               jsr  nib2hex
.110b	99 51 10	               sta  abin,y
.110e	68		               pla
.110f	c8		               iny
.1110	ca		               dex
.1111	d0 ef		               bne  nextbit
.1113	a9 00		               lda  #0
.1115	99 51 10	               sta  abin,y
.1118	20 cf 0e	               jsr  pull
.111b	60		               rts
.111c			putabin
.111c	20 fa 10	               jsr     atobin
.111f	20 90 0e	               jsr     push
.1122	a2 51		               ldx     #<abin
.1124	a0 10		               ldy     #>abin
.1126	20 9f 0d	               jsr     puts
.1129	20 cf 0e	               jsr     pop
.112c	60		               rts
.112d			printabin
.112d	20 90 0e	               jsr     push
.1130	a2 51		               ldx     #<abin
.1132	a0 10		               ldy     #>abin
.1134	20 9f 0d	               jsr     puts
.1137	20 cf 0e	               jsr     pop
.113a	60		               rts
.113b			putabinfmt
.113b	08		               php
.113c	48		               pha
.113d	a9 25		               lda     #"%"
.113f	20 99 0d	               jsr     putch
.1142	68		               pla
.1143	20 1c 11	               jsr     putabin
.1146	28		               plp
.1147	60		               rts
.1148			putabinxy
.1148	20 b9 0d	               jsr     gotoxy
.114b	20 1c 11	               jsr     putabin
.114e	60		               rts
.114f			putabinfmtxy
.114f	20 b9 0d	               jsr     gotoxy
.1152	20 3b 11	               jsr     putabinfmt
.1155	60		               rts
.1156			atodec
.1156	20 90 0e	               jsr  push
.1159	f8		               sed
.115a	aa		               tax
.115b	a0 00		               ldy  #$00
.115d	a9 00		               lda  #$00
.115f	18		nextbit        clc
.1160	69 01		               adc  #$01
.1162	90 01		               bcc  decx
.1164	c8		               iny
.1165	ca		decx           dex
.1166	d0 f7		               bne  nextbit
.1168	48		               pha
.1169	98		               tya
.116a	20 9a 10	               jsr  nib2hex
.116d	8d 5a 10	               sta  adec
.1170	68		               pla
.1171	48		               pha
.1172	20 9a 10	               jsr  nib2hex
.1175	8d 5c 10	               sta  adec+2
.1178	68		               pla
.1179	6a		               ror
.117a	6a		               ror
.117b	6a		               ror
.117c	6a		               ror
.117d	20 9a 10	               jsr  nib2hex
.1180	8d 5b 10	               sta  adec+1
.1183	d8		               cld
.1184	20 cf 0e	               jsr  pull
.1187	60		               rts
>1188	00 00 00	buffer         .byte     0,0,0
.118b			putadec
.118b	20 90 0e	               jsr  push
.118e	20 56 11	               jsr  atodec
.1191	a2 5a		               ldx  #<adec
.1193	a0 10		               ldy  #>adec+1
.1195	20 9f 0d	               jsr  puts
.1198	20 cf 0e	               jsr  pop
.119b	60		               rts

;******  Return to file: p038ex24.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>119c	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>11a0	00 00 00 00 00 00 00 00 00 0d 00 00
>11ac	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>11b0	00 00 00 00 00 00 00 00 00 00 00 00
>11bc	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>11c0	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>11cc	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>11d0	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>11dc	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>11e0	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>11ec	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>11f0	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>11fc	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1200	00 00 00 00 00 00 00 00 00 00 00 00
>120c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1210	00 00 00 00 00 00 00 00 00 00 00 00
>121c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1220	00 00 00 00 00 00 00 00 00 00 00 00
>122c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1230	00 00 00 00 00 00 00 00 00 00 00 00
>123c	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1240	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>124c	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1250	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>125c	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1260	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>126c	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1270	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>127c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1280	00 00 00 00 00 00 00 00 00 00 00 00
>128c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1290	00 00 00 00 00 00 00 00 00 00 00 00
.129c			waitstop
.129c	20 90 0e	               jsr  push
.129f	20 ed f6	wait           jsr  k_stop
.12a2	d0 fb		               bne  wait
.12a4	20 cf 0e	               jsr  pop
.12a7	60		               rts
.12a8			anykey
.12a8	08		               php
.12a9	48		               pha
.12aa	a5 cb		nokey          lda 203
.12ac	c9 40		               cmp #64
.12ae	f0 fa		               beq nokey
.12b0	20 b6 12	               jsr releasekey
.12b3	68		               pla
.12b4	28		               plp
.12b5	60		               rts
.12b6			releasekey
.12b6	08		               php
.12b7	48		               pha
.12b8	a5 cb		keypressed     lda 203
.12ba	c9 40		               cmp #64
.12bc	d0 fa		               bne keypressed
.12be	68		               pla
.12bf	28		               plp
.12c0	60		               rts
.12c1			getkey
.12c1	20 e4 ff	again          jsr  getin
.12c4	c9 00		               cmp  #0
.12c6	f0 f9		               beq  again
.12c8	60		               rts
.12c9			kbflushbuff
.12c9	08		               php
.12ca	48		               pha
.12cb	20 e4 ff	again          jsr  getin
.12ce	c9 00		               cmp  #0
.12d0	d0 f9		               bne  again
.12d2	68		               pla
.12d3	28		               plp
.12d4	60		               rts
.12d5			waitkey
.12d5	20 90 0e	               jsr  push
.12d8	8d 26 13	               sta  thekey
.12db	20 e4 ff	nope           jsr  getin
.12de	20 d2 ff	               jsr  chrout
.12e1	cd 26 13	               cmp  thekey
.12e4	d0 f5		               bne  nope
.12e6	20 d2 ff	               jsr  chrout
.12e9	20 cf 0e	               jsr  pop
.12ec	60		               rts
.12ed			waitspace
.12ed	20 90 0e	               jsr  push
.12f0	a9 7f		wait           lda  #$7f  ;%01111111
.12f2	8d 00 dc	               sta  $dc00
.12f5	ad 01 dc	               lda  $dc01
.12f8	29 10		               and  #$10  ;mask %00010000
.12fa	d0 f4		               bne  wait
.12fc	20 cf 0e	               jsr  pop
.12ff			waitsstop
.12ff	20 90 0e	               jsr  push
.1302	20 ed f6	wait           jsr  k_stop  ;%01111111
.1305	d0 fb		               bne  wait
.1307	20 cf 0e	               jsr  pop
.130a			waitreturn
.130a	20 90 0e	               jsr  push
.130d	ad 27 13	               lda  thecount
.1310	8d 00 04	               sta  scrnram
.1313	a9 02		               lda  #$02
.1315	8d 00 d8	               sta  colorram
.1318	20 e4 ff	nope           jsr  getin
.131b	c9 0d		nohex          cmp  #$0d
.131d	d0 f9		               bne  nope
.131f	ee 27 13	               inc  thecount
.1322	20 cf 0e	               jsr  pop
.1325	60		               rts
>1326	00		thekey         .byte   0
>1327	01		thecount       .byte   $01

;******  Return to file: p038ex24.asm


;******  End of listing

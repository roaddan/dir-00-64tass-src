
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p028ex05.txt -o p028ex05.prg p028ex05.asm
; Mon Oct 28 17:36:01 2024

;Offset	;Hex		;Source

;******  Processing input file: p028ex05.asm

="20241028-172827"	           Version = "20241028-172827"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	1d 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	0a 00				.word 10   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 41			.text " *par daniel lafrance*"
>080a	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>081a	45 2a
>081c	00				.byte $00		;Un zéro pour indiquer la fin de cette
>081d	28 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>081f	14 00				.word 20   	;Numero de la ligne Basic.
>0821	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0822	30 32 30 39			.text format("%05d",hpgmstart)
>0826	30
>0827	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0828	00 00		bcmd3	.word $0000    ;L'adresse de la commande Basic suivante.
.082a	4c da 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p028ex05.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p028ex05.asm

.082d			p028ex05
.082d	20 8c 0e	          jsr  push
.0830	48		               pha
.0831	a9 03		               lda  #ccyan
.0833	8d 20 d0	               sta  $d020
.0836	68		               pla
.0837	48		               pha
.0838	a9 01		               lda  #cblanc
.083a	8d 21 d0	               sta  $d021
.083d	68		               pla
.083e	48		               pha
.083f	a9 06		               lda  #cbleu
.0841	8d 86 02	               sta  bascol
.0844	68		               pla
.0845	20 c0 0b	          jsr  cls
.0848	20 95 08	          jsr  insub
.084b	20 ca bb	          jsr  b_f1t57
.084e	20 95 08	          jsr  insub
.0851	a9 57		          lda  #$57
.0853	a0 00		          ldy  #$00
.0855	20 28 ba	          jsr  b_f1xfv
.0858	a2 60		          ldx  #<floatnum
.085a	a0 08		          ldy  #>floatnum
.085c	20 d4 bb	          jsr  b_f1tmem
.085f	60		          rts
>0860	00 00 00 00	floatnum  .byte 0,0,0,0,0,0
>0864	00 00
.0866			akey
.0866	a9 77		          lda  #<kmsg
.0868	85 22		          sta  $22
.086a	a9 08		          lda  #>kmsg
.086c	85 23		          sta  $23
.086e	a9 1e		          lda  #kmsgend-kmsg
.0870	20 24 ab	          jsr  b_strout
.0873	20 a4 12	          jsr  anykey
.0876	60		          rts
>0877	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>087b	d5 4e 45 20	          .text               "Une clef pour continuer!"
>087f	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>088f	55 45 52 21
>0893	90 00		          .byte b_black,b_eot
.0895			kmsgend
.0895			insub
.0895	48		          pha
.0896	8a		          txa
.0897	48		          pha
.0898	20 c5 12	          jsr  kbflushbuff
.089b	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.089e	a9 00		          lda  #$00           ; On efface le basic input buffer
.08a0	a0 59		          ldy  #$59           ;  situé à $200 long de 89 bytes ($59)
.08a2	99 00 02	clear     sta  b_inpbuff,y    ;  en plaçant des $00 partout
.08a5	88		          dey                 ;  et ce jusqu'au
.08a6	d0 fa		          bne  clear          ;  dernier.
.08a8	a9 c6		          lda  #<ptext
.08aa	85 22		          sta  $22
.08ac	a9 08		          lda  #>ptext
.08ae	85 23		          sta  $23
.08b0	a9 14		          lda  #ptextend-ptext
.08b2	20 24 ab	          jsr  b_strout       ; Affiche la chaine(z)
.08b5	20 f9 ab	          jsr  b_prompt       ; Affiche un "?" et attend une entrée.
.08b8	86 7a		          stx  $7a            ; X et Y pointe sur $01ff au retour.
.08ba	84 7b		          sty  $7b
.08bc	20 73 00	          jsr  b_chrget       ; Lecture du buffer.
.08bf	20 f3 bc	          jsr  b_ascflt       ; Conversion la chaine ascii en 200 en float.
.08c2	68		          pla                 ;  dans $22(lsb) et $23(msb)
.08c3	aa		          tax
.08c4	68		          pla
.08c5	60		          rts
>08c6	0d 9c 20	ptext     .byte b_crlf, b_purple, b_space
>08c9	c5 4e 54 45	          .text "Enter a number "
>08cd	52 20 41 20 4e 55 4d 42 45 52 20
>08d8	90 00		          .byte b_black,b_eot
.08da			ptextend
.08da			main
.08da	20 a0 0b	          jsr       scrmaninit
.08dd	08		               php
.08de	48		               pha
.08df	a9 08		               lda  #$08
.08e1	20 d2 ff	               jsr  $ffd2
.08e4	68		               pla
.08e5	28		               plp
.08e6	48		               pha
.08e7	a9 03		               lda  #ccyan
.08e9	8d 20 d0	               sta  $d020
.08ec	68		               pla
.08ed	48		               pha
.08ee	a9 01		               lda  #cblanc
.08f0	8d 21 d0	               sta  $d021
.08f3	68		               pla
.08f4	48		               pha
.08f5	a9 06		               lda  #cbleu
.08f7	8d 86 02	               sta  bascol
.08fa	68		               pla
.08fb	20 1c 09	          jsr       bookinfo
.08fe	20 66 08	          jsr       akey
.0901	20 c0 0b	          jsr       cls
.0904	20 60 09	          jsr       help
.0907	20 66 08	          jsr       akey
.090a	a9 0d		          lda       #b_crlf
.090c	20 d2 ff	          jsr       $ffd2
.090f	20 2d 08	          jsr       p028ex05
.0912	08		               php
.0913	48		               pha
.0914	a9 09		               lda  #$09
.0916	20 d2 ff	               jsr  $ffd2
.0919	68		               pla
.091a	28		               plp
.091b	60		          rts
.091c			bookinfo
.091c	08		               php
.091d	48		               pha
.091e	a9 0e		               lda  #14
.0920	8d bf 0b	               sta  characterset
.0923	20 d2 ff	               jsr  $ffd2
.0926	68		               pla
.0927	28		               plp
.0928	20 c0 0b	          jsr       cls
.092b	20 8c 0e	               jsr  push
.092e	a2 6f		isx            ldx  #<line
.0930	a0 0b		isy            ldy  #>line
.0932	20 dd 0b	               jsr  puts
.0935	20 cb 0e	               jsr  pull
.0938	20 8c 0e	               jsr  push
.093b	a2 97		isx            ldx  #<headera
.093d	a0 09		isy            ldy  #>headera
.093f	20 dd 0b	               jsr  puts
.0942	20 cb 0e	               jsr  pull
.0945	20 8c 0e	               jsr  push
.0948	a2 37		isx            ldx  #<headerb
.094a	a0 0a		isy            ldy  #>headerb
.094c	20 dd 0b	               jsr  puts
.094f	20 cb 0e	               jsr  pull
.0952	20 8c 0e	               jsr  push
.0955	a2 6f		isx            ldx  #<line
.0957	a0 0b		isy            ldy  #>line
.0959	20 dd 0b	               jsr  puts
.095c	20 cb 0e	               jsr  pull
.095f	60		          rts
.0960			help
.0960	08		               php
.0961	48		               pha
.0962	a9 0e		               lda  #14
.0964	8d bf 0b	               sta  characterset
.0967	20 d2 ff	               jsr  $ffd2
.096a	68		               pla
.096b	28		               plp
.096c	20 c0 0b	          jsr       cls
.096f	20 8c 0e	               jsr  push
.0972	a2 da		isx            ldx  #<shortcuts
.0974	a0 0a		isy            ldy  #>shortcuts
.0976	20 dd 0b	               jsr  puts
.0979	20 cb 0e	               jsr  pull
.097c	20 8c 0e	               jsr  push
.097f	a2 5b		isx            ldx  #<helptext
.0981	a0 0b		isy            ldy  #>helptext
.0983	20 dd 0b	               jsr  puts
.0986	20 cb 0e	               jsr  pull
.0989	20 8c 0e	               jsr  push
.098c	a2 6f		isx            ldx  #<line
.098e	a0 0b		isy            ldy  #>line
.0990	20 dd 0b	               jsr  puts
.0993	20 cb 0e	               jsr  pull
.0996	60		          rts
.0997			headera
>0997	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>099b	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>09ab	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>09bb	20 20 2a
>09be	0d		          .byte     b_crlf
>09bf	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>09c3	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>09d3	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>09e3	20 20 2a
>09e6	0d		          .byte     b_crlf
>09e7	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>09eb	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>09fb	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>0a0b	20 20 2a
>0a0e	0d		          .byte     b_crlf
>0a0f	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>0a13	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>0a23	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>0a33	20 20 2a 00
>0a37	0d		headerb   .byte     $0d
>0a38	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>0a3c	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>0a4c	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>0a5c	20 20 2a
>0a5f	0d		          .byte     $0d
>0a60	20 2a 20 20	          .text               " *         page 28, exemple #5        *"
>0a64	20 20 20 20 20 20 20 50 41 47 45 20 32 38 2c 20
>0a74	45 58 45 4d 50 4c 45 20 23 35 20 20 20 20 20 20
>0a84	20 20 2a
>0a87	0d		          .byte     $0d
>0a88	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0a8c	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0a9c	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0aac	20 20 2a
>0aaf	0d		          .byte     $0d
>0ab0	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0ab4	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0ac4	34 31 30 32 38 2d 31 37 32 38 32 37 2e 20 20 20
>0ad4	20 20 2a 20
>0ad8	90 00		          .byte     b_black,b_eot
>0ada	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0add	20 20 20 20	          .text               "        RACCOURCIS DES EXEMPLES       "
>0ae1	20 20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4
>0af1	c5 d3 20 c5 d8 c5 cd d0 cc c5 d3 20 20 20 20 20
>0b01	20 20
>0b03	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0b06	20 50 30 32	          .text     format(   " p028ex05: SYS %d ($%04X)",p028ex05, p028ex05)
>0b0a	38 45 58 30 35 3a 20 d3 d9 d3 20 32 30 39 33 20
>0b1a	28 24 30 38 32 c4 29
>0b21	0d		          .byte     b_crlf
>0b22	20 48 45 4c	          .text     format(   " help....: SYS %d ($%04X)",help, help)
>0b26	50 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 34 30 30 20
>0b36	28 24 30 39 36 30 29
>0b3d	0d		          .byte     b_crlf
>0b3e	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04X)",cls, cls)
>0b42	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 30 30 38 20
>0b52	28 24 30 c2 c3 30 29
>0b59	0d 00		          .byte     b_crlf,b_eot
>0b5b	0d 20 1c	helptext  .byte     b_crlf,b_space,b_red
>0b5e	20 45 58 2e	          .text     format(   " ex.: SYS %d",p028ex05)
>0b62	3a 20 d3 d9 d3 20 32 30 39 33
>0b6c	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0b6f	20 2d 2d 2d	line      .text               " --------------------------------------"
>0b73	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0b83	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0b93	2d 2d 2d
>0b96	0d 00		          .byte     b_crlf,b_eot

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0b98	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0b9c	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0ba0			libtart

;******  Return to file: p028ex05.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p028ex05.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p028ex05.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0ba0			scrmaninit
.0ba0	20 8c 0e	               jsr  push
.0ba3	a9 06		               lda  #vbleu
.0ba5	8d 21 d0	               sta  vicbackcol
.0ba8	a9 05		               lda  #vvert
.0baa	8d 20 d0	               sta  vicbordcol
.0bad	a9 01		               lda  #vblanc
.0baf	8d 86 02	               sta  bascol
.0bb2	ad 00 04	               lda  scrnram
.0bb5	8d 00 04	               sta  scrnram
.0bb8	20 c0 0b	               jsr  cls
.0bbb	20 cb 0e	               jsr  pop
.0bbe	60		               rts
>0bbf	8e		characterset   .byte b_uppercase
.0bc0			cls
.0bc0	08		               php
.0bc1	48		               pha
.0bc2	a9 93		               lda  #$93
.0bc4	20 d7 0b	               jsr  putch
.0bc7	68		               pla
.0bc8	28		               plp
.0bc9	60		               rts
.0bca			putnch
.0bca	08		               php
.0bcb	e0 00		               cpx  #$00
.0bcd	f0 06		               beq  out
.0bcf	20 d2 ff	again          jsr  $ffd2
.0bd2	ca		               dex
.0bd3	d0 fa		               bne  again
.0bd5	28		out            plp
.0bd6	60		               rts
.0bd7			putch
.0bd7	08		               php
.0bd8	20 d2 ff	               jsr  $ffd2
.0bdb	28		               plp
.0bdc	60		               rts
.0bdd			puts
.0bdd	20 8c 0e	               jsr  push
.0be0	86 fb		               stx  zpage1
.0be2	84 fc		               sty  zpage1+1
.0be4	a0 00		               ldy  #0
.0be6	b1 fb		next           lda  (zpage1),y
.0be8	f0 09		               beq  exit
.0bea	20 d7 0b	               jsr  putch
.0bed	20 93 0f	               jsr  inczp1
.0bf0	4c e6 0b	               jmp  next
.0bf3	20 cb 0e	exit           jsr  pop
.0bf6	60		               rts
.0bf7			gotoxy
.0bf7	08		               php
.0bf8	18		               clc
.0bf9	8a		               txa
.0bfa	48		               pha
.0bfb	98		               tya
.0bfc	aa		               tax
.0bfd	68		               pla
.0bfe	a8		               tay
.0bff	20 f0 ff	               jsr  kplot
.0c02	28		               plp
.0c03	60		               rts
.0c04			cursor
=$0286			bascol    =    $0286
.0c04	08		               php
.0c05	48		               pha
.0c06	90 12		               bcc  restore
.0c08	20 f0 ff	               jsr  kplot
.0c0b	8c 2c 0c	               sty  cx
.0c0e	8e 2d 0c	               stx  cy
.0c11	ad 86 02	               lda  bascol
.0c14	8d 2e 0c	               sta  bcol
.0c17	4c 29 0c	               jmp  out
.0c1a	ae 2d 0c	restore        ldx  cy
.0c1d	ac 2c 0c	               ldy  cx
.0c20	20 f0 ff	               jsr  kplot
.0c23	ad 2e 0c	               lda  bcol
.0c26	8d 86 02	               sta  bascol
.0c29	68		out            pla
.0c2a	28		               plp
.0c2b	60		               rts
>0c2c	00		cx   .byte     $00
>0c2d	00		cy   .byte     $00
>0c2e	00		bcol .byte     $00
.0c2f			cursave
.0c2f	08		               php
.0c30	38		               sec
.0c31	20 04 0c	               jsr  cursor
.0c34	28		               plp
.0c35	60		               rts
.0c36			curput
.0c36	08		               php
.0c37	18		               clc
.0c38	20 04 0c	               jsr  cursor
.0c3b	28		               plp
.0c3c	60		               rts
.0c3d			putsxy
.0c3d	20 8c 0e	               jsr  push
.0c40	86 fb		               stx  zpage1
.0c42	84 fc		               sty  zpage1+1
.0c44	a0 00		               ldy  #$00
.0c46	b1 fb		               lda  (zpage1),y
.0c48	aa		               tax
.0c49	20 93 0f	               jsr  inczp1
.0c4c	b1 fb		               lda  (zpage1),y
.0c4e	a8		               tay
.0c4f	20 f7 0b	               jsr  gotoxy
.0c52	20 93 0f	               jsr  inczp1
.0c55	a6 fb		               ldx  zpage1
.0c57	a4 fc		               ldy  zpage1+1
.0c59	20 dd 0b	               jsr  puts
.0c5c	20 cb 0e	               jsr  pop
.0c5f	60		               rts
>0c60	00 00		straddr   .word     $00
>0c62	00		px        .byte     $00
>0c63	00		py        .byte     $00
>0c64	00 00		zp1       .word     $00
.0c66			putscxy
.0c66	20 8c 0e	               jsr  push
.0c69	84 fc		               sty  zpage1+1
.0c6b	86 fb		               stx  zpage1
.0c6d	ad 86 02	               lda  bascol
.0c70	8d 90 0c	               sta  bc
.0c73	a0 00		               ldy #$00
.0c75	b1 fb		               lda  (zpage1),y
.0c77	8d 86 02	               sta  bascol
.0c7a	20 93 0f	               jsr  inczp1
.0c7d	a6 fb		               ldx  zpage1
.0c7f	a4 fc		               ldy  zpage1+1
.0c81	20 3d 0c	               jsr  putsxy
.0c84	ad 90 0c	               lda  bc
.0c87	8d 86 02	               sta  bascol
.0c8a	20 cb 0e	               jsr  pop
.0c8d	60		               rts
>0c8e	00 00		straddr  .word      $00
>0c90	00		bc       .byte      $00
>0c91	00 00		zp1      .word      $00
.0c93			putrahex
.0c93	08		               php
.0c94	48		               pha
.0c95	20 a9 10	               jsr  a2hex
.0c98	a9 48		               lda  #<a2hexstr
.0c9a	a0 10		               ldy  #>a2hexstr
.0c9c	20 dd 0b	               jsr  puts
.0c9f	68		               pla
.0ca0	28		               plp
.0ca1	60		               rts
.0ca2			kputrahexxy
.0ca2			bputrahexxy
.0ca2			putrahexxy
.0ca2	08		               php
.0ca3	20 a9 10	               jsr  a2hex
.0ca6	a9 45		               lda  #<a2hexpos
.0ca8	a0 10		               ldy  #>a2hexpos
.0caa	20 3d 0c	               jsr  putsxy
.0cad	68		               pla
.0cae	28		               plp
.0caf	60		               rts
.0cb0			putrahexcxy
.0cb0	08		               php
.0cb1	20 a9 10	               jsr  a2hex
.0cb4	a9 45		               lda  #<a2hexpos
.0cb6	a0 10		               ldy  #>a2hexpos
.0cb8	20 66 0c	               jsr  putscxy
.0cbb	68		               pla
.0cbc	28		               plp
.0cbd	60		               rts
.0cbe			setinverse
.0cbe	48		               pha
.0cbf	a9 12		               lda  #$12
.0cc1	20 d2 ff	               jsr  $ffd2
.0cc4	68		               pla
.0cc5	60		               rts
.0cc6			clrinverse
.0cc6	48		               pha
.0cc7	a9 92		               lda  #$92
.0cc9	20 d2 ff	               jsr  $ffd2
.0ccc	68		               pla
.0ccd	60		               rts

;******  Return to file: p028ex05.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.0cce			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.0cce	08		                php
.0ccf	8d 80 0e	                sta  rega
.0cd2	68		                pla
.0cd3	8d 83 0e	                sta  regp
.0cd6	8e 81 0e	                stx  regx
.0cd9	8c 82 0e	                sty  regy
.0cdc	ba		                tsx
.0cdd	8e 84 0e	                stx  regs
.0ce0	68		                pla
.0ce1	8d 86 0e	                sta  regpcl
.0ce4	8d 87 0e	                sta  regpcl2
.0ce7	68		                pla
.0ce8	8d 85 0e	                sta  regpch
.0ceb	ad 80 0e	                lda  rega
.0cee	48		                pha
.0cef	20 96 10	                jsr  nib2hex
.0cf2	8d 23 0e	                sta  vala+1
.0cf5	68		                pla
.0cf6	20 a2 10	                jsr  lsra4bits
.0cf9	20 96 10	                jsr  nib2hex
.0cfc	8d 22 0e	                sta  vala
.0cff	ad 82 0e	                lda  regy
.0d02	48		                pha
.0d03	20 96 10	                jsr  nib2hex
.0d06	8d 39 0e	                sta  valy+1
.0d09	68		                pla
.0d0a	20 a2 10	                jsr  lsra4bits
.0d0d	20 96 10	                jsr  nib2hex
.0d10	8d 38 0e	                sta  valy
.0d13	ad 81 0e	                lda  regx
.0d16	48		                pha
.0d17	20 96 10	                jsr  nib2hex
.0d1a	8d 2e 0e	                sta  valx+1
.0d1d	68		                pla
.0d1e	20 a2 10	                jsr  lsra4bits
.0d21	20 96 10	                jsr  nib2hex
.0d24	8d 2d 0e	                sta  valx
.0d27	ad 83 0e	                lda  regp
.0d2a	48		                pha
.0d2b	20 96 10	                jsr  nib2hex
.0d2e	8d 44 0e	                sta  valp+1
.0d31	68		                pla
.0d32	20 a2 10	                jsr  lsra4bits
.0d35	20 96 10	                jsr  nib2hex
.0d38	8d 43 0e	                sta  valp
.0d3b	ad 84 0e	                lda  regs
.0d3e	48		                pha
.0d3f	20 96 10	                jsr  nib2hex
.0d42	8d 4f 0e	                sta  vals+1
.0d45	68		                pla
.0d46	20 a2 10	                jsr  lsra4bits
.0d49	20 96 10	                jsr  nib2hex
.0d4c	8d 4e 0e	                sta  vals
.0d4f	ad 85 0e	                lda  regpch
.0d52	48		                pha
.0d53	20 96 10	                jsr  nib2hex
.0d56	8d 5b 0e	                sta  valpch+1
.0d59	68		                pla
.0d5a	20 a2 10	                jsr  lsra4bits
.0d5d	20 96 10	                jsr  nib2hex
.0d60	8d 5a 0e	                sta  valpch
.0d63	ad 86 0e	                lda  regpcl
.0d66	48		                pha
.0d67	20 96 10	                jsr  nib2hex
.0d6a	8d 5d 0e	                sta  valpcl+1
.0d6d	68		                pla
.0d6e	20 a2 10	                jsr  lsra4bits
.0d71	20 96 10	                jsr  nib2hex
.0d74	8d 5c 0e	                sta  valpcl
.0d77	a5 fb		                lda  zpage1
.0d79	48		                pha
.0d7a	20 96 10	                jsr  nib2hex
.0d7d	8d 6c 0e	                sta  valz1l
.0d80	68		                pla
.0d81	20 a2 10	                jsr  lsra4bits
.0d84	20 96 10	                jsr  nib2hex
.0d87	8d 6d 0e	                sta  valz1l+1
.0d8a	a5 fc		                lda  zpage1+1
.0d8c	48		                pha
.0d8d	20 96 10	                jsr  nib2hex
.0d90	8d 6a 0e	                sta  valz1h
.0d93	68		                pla
.0d94	20 a2 10	                jsr  lsra4bits
.0d97	20 96 10	                jsr  nib2hex
.0d9a	8d 6b 0e	                sta  valz1h+1
.0d9d	a5 fd		                lda  zpage2
.0d9f	48		                pha
.0da0	20 96 10	                jsr  nib2hex
.0da3	8d 7c 0e	                sta  valz2l
.0da6	68		                pla
.0da7	20 a2 10	                jsr  lsra4bits
.0daa	20 96 10	                jsr  nib2hex
.0dad	8d 7d 0e	                sta  valz2l+1
.0db0	a5 fe		                lda  zpage2+1
.0db2	48		                pha
.0db3	20 96 10	                jsr  nib2hex
.0db6	8d 7a 0e	                sta  valz2h
.0db9	68		                pla
.0dba	20 a2 10	                jsr  lsra4bits
.0dbd	20 96 10	                jsr  nib2hex
.0dc0	8d 7b 0e	                sta  valz2h+1
.0dc3	20 be 0c	                jsr  setinverse
.0dc6	78		                sei
.0dc7	a2 1a		                ldx  #<srega
.0dc9	a0 0e		                ldy  #>srega+1
.0dcb	20 66 0c	                jsr  putscxy
.0dce	a2 25		                ldx  #<sregx
.0dd0	a0 0e		                ldy  #>sregx+1
.0dd2	20 66 0c	                jsr  putscxy
.0dd5	a2 30		                ldx  #<sregy
.0dd7	a0 0e		                ldy  #>sregy+1
.0dd9	20 66 0c	                jsr  putscxy
.0ddc	a2 3b		                ldx  #<sregp
.0dde	a0 0e		                ldy  #>sregp+1
.0de0	20 66 0c	                jsr  putscxy
.0de3	a2 46		                ldx  #<sregs
.0de5	a0 0e		                ldy  #>sregs+1
.0de7	20 66 0c	                jsr  putscxy
.0dea	a2 51		                ldx  #<sregpc
.0dec	a0 0e		                ldy  #>sregpc+1
.0dee	20 66 0c	                jsr  putscxy
.0df1	a2 60		                ldx  #<sregz1
.0df3	a0 0e		                ldy  #>sregz1+1
.0df5	20 66 0c	                jsr  putscxy
.0df8	a2 70		                ldx  #<sregz2
.0dfa	a0 0e		                ldy  #>sregz2+1
.0dfc	20 66 0c	                jsr  putscxy
.0dff	58		                cli
.0e00	20 c6 0c	                jsr  clrinverse
.0e03	ad 85 0e	                lda  regpch
.0e06	48		                pha
.0e07	ad 86 0e	                lda  regpcl
.0e0a	48		                pha
.0e0b	ac 82 0e	                ldy  regy
.0e0e	ae 81 0e	                ldx  regx
.0e11	ad 83 0e	                lda  regp
.0e14	48		                pha
.0e15	ad 80 0e	                lda  rega
.0e18	28		                plp
.0e19	60		                rts
>0e1a	01 00 00 17	srega   .byte   colr,bkcol,coln,line
>0e1e	20 41 3a 24	        .text   ' a:$' ;4,24
>0e22	00 00 00	vala    .byte   0,0,0
>0e25	01 00 06 17	sregx   .byte   colr,bkcol,coln+6,line
>0e29	20 58 3a 24	        .text   ' x:$' ;4,24
>0e2d	00 00 00	valx    .byte   0,0,0
>0e30	01 00 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>0e34	20 59 3a 24	        .text   ' y:$' ;4,24
>0e38	00 00 00	valy    .byte   0,0,0
>0e3b	01 00 12 17	sregp   .byte   colr,bkcol,coln+18,line
>0e3f	20 50 3a 24	        .text   ' p:$' ;4,24
>0e43	00 00 00	valp    .byte   0,0,0
>0e46	01 00 18 17	sregs   .byte   colr,bkcol,coln+24,line
>0e4a	20 53 3a 24	        .text   ' s:$' ;4,24
>0e4e	00 00 00	vals    .byte   0,0,0
>0e51	01 00 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>0e55	20 50 43 3a	        .text   ' pc:$' ;4,24
>0e59	24
>0e5a	00 00		valpch  .byte   0,0
>0e5c	00 00 20 00	valpcl  .byte   0,0,32,0
>0e60	01 00 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>0e64	20 5a 50 31	        .text   ' zp1:$' ;4,24
>0e68	3a 24
>0e6a	00 00		valz1h  .byte   0,0
>0e6c	00 00 20 00	valz1l  .byte   0,0,32,0
>0e70	01 00 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>0e74	20 5a 50 32	        .text   ' zp2:$' ;4,24
>0e78	3a 24
>0e7a	00 00		valz2h  .byte   0,0
>0e7c	00 00 20 00	valz2l  .byte   0,0,32,0
>0e80	00		rega    .byte   0
>0e81	00		regx    .byte   0
>0e82	00		regy    .byte   0
>0e83	00		regp    .byte   0
>0e84	00		regs    .byte   0
>0e85	00		regpch  .byte   0
>0e86	00		regpcl  .byte   0
>0e87	00		regpcl2 .byte   0
>0e88	00		vzp1h   .byte   0
>0e89	00		vzp1l   .byte   0
>0e8a	00		vzp2h   .byte   0
>0e8b	00		vzp2l   .byte   0

;******  Return to file: p028ex05.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0e8c			push
.0e8c	08		          php            ; stack : flg, pcl, pch
.0e8d	78		          sei
.0e8e	8d c8 0e	          sta  ra        ; save a
.0e91	68		          pla            ; stack : pcl, pch
.0e92	8d c7 0e	          sta  rp        ; save rp
.0e95	68		          pla            ; stack : pch
.0e96	8d c9 0e	          sta  pc        ; save pcl
.0e99	68		          pla            ; stack : -
.0e9a	8d ca 0e	          sta  pc+1      ; save pch
.0e9d	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0e9f	48		          pha            ; stack : zp1l
.0ea0	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0ea2	48		          pha            ; stack : zp1h, zp1l
.0ea3	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0ea5	48		          pha            ; stack : zp2l, zp1h, zp1l
.0ea6	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0ea8	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0ea9	ad c7 0e	          lda  rp        ; get rp
.0eac	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0ead	ad c8 0e	          lda  ra        ; get a
.0eb0	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0eb1	8a		          txa            ; get x
.0eb2	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eb3	98		          tya            ; get y
.0eb4	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eb5	ad ca 0e	          lda  pc+1      ; get pch
.0eb8	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eb9	ad c9 0e	          lda  pc        ; get pcl
.0ebc	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ebd	ad c7 0e	          lda  rp        ; get rp
.0ec0	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec1	ad c8 0e	          lda  ra        ; get a
.0ec4	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec5	58		          cli
.0ec6	60		          rts
>0ec7	00		rp        .byte     0
>0ec8	00		ra        .byte     0
>0ec9	00 00		pc        .word     0
.0ecb			pull
.0ecb			pop
.0ecb	78		          sei
.0ecc	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ecd	8d 00 0f	          sta  pc        ; save pcl
.0ed0	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed1	8d 01 0f	          sta  pc+1      ; save pch
.0ed4	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed5	a8		          tay            ; set y
.0ed6	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ed7	aa		          tax            ; set x
.0ed8	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0ed9	8d ff 0e	          sta  ra        ; save a
.0edc	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0edd	8d fe 0e	          sta  rp        ; save rp
.0ee0	68		          pla            ; stack : zp2l, zp1h, zp1l
.0ee1	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0ee3	68		          pla            ; stack : zp1h, zp1l
.0ee4	85 fd		          sta  zpage2    ; get zpage2 High byte
.0ee6	68		          pla            ; stack : zp1l
.0ee7	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0ee9	68		          pla            ; stack :
.0eea	85 fb		          sta  zpage1    ; get zpage1 High byte
.0eec	ad 01 0f	          lda  pc+1      ; get pch
.0eef	48		          pha            ; stack : pch
.0ef0	ad 00 0f	          lda  pc
.0ef3	48		          pha            ; stack : pcl, pch
.0ef4	ad fe 0e	          lda  rp        ; get rp
.0ef7	48		          pha            ; stack : rp, pcl, pch
.0ef8	ad ff 0e	          lda  ra        ; set ra
.0efb	58		          cli
.0efc	28		          plp            ; stack : pcl, pch
.0efd	60		          rts
>0efe	00		rp        .byte     0
>0eff	00		ra        .byte     0
>0f00	00 00		pc        .word     0

;******  Return to file: p028ex05.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0f02			blkfill
.0f02	20 8c 0e	bf0            jsr  push
.0f05	20 c3 0f	               jsr  savezp1
.0f08	84 fc		               sty  zpage1+1
.0f0a	a0 00		               ldy  #$00
.0f0c	84 fb		               sty  zpage1
.0f0e	91 fb		bf1            sta  (zpage1),y
.0f10	c8		               iny
.0f11	d0 fb		               bne  bf1
.0f13	20 d2 0f	               jsr  restzp1
.0f16	20 cb 0e	               jsr  pop
.0f19	60		               rts
.0f1a			memfill
.0f1a	20 8c 0e	               jsr  push
.0f1d	20 02 0f	mf1            jsr  blkfill
.0f20	c8		               iny
.0f21	ca		               dex
.0f22	d0 f9		               bne  mf1
.0f24	20 cb 0e	               jsr  pop
.0f27	60		               rts
.0f28			memmove
.0f28	20 8c 0e	               jsr  push
.0f2b	ba		               tsx            ; On se crée un pointeur ...
.0f2c	8a		               txa
.0f2d	18		               clc
.0f2e	69 0b		               adc  #11
.0f30	a8		               tay
.0f31	a2 06		               ldx  #$06
.0f33	b9 00 01	nextbyte       lda  $0100,y
.0f36	99 82 0f	               sta  words,y
.0f39	c8		               iny
.0f3a	ca		               dex
.0f3b	d0 f6		               bne  nextbyte
.0f3d	ad 82 0f	               lda  s
.0f40	8d 59 0f	               sta  source+1
.0f43	ad 83 0f	               lda  s+1
.0f46	8d 5a 0f	               sta  source+2
.0f49	ad 84 0f	               lda  d
.0f4c	8d 56 0f	               sta  destin+1
.0f4f	ad 85 0f	               lda  d+1
.0f52	8d 57 0f	               sta  destin+2
.0f55	ad ff ff	destin         lda  $ffff
.0f58	8d ff ff	source         sta  $ffff
.0f5b	ee 56 0f	               inc  destin+1
.0f5e	d0 03		               bne  src
.0f60	ee 57 0f	               inc  destin+2
.0f63	ee 59 0f	src            inc  source+1
.0f66	d0 03		               bne  cnt
.0f68	ee 5a 0f	               inc  source+2
.0f6b	ad 86 0f	cnt            lda  compte
.0f6e	d0 08		               bne  decit
.0f70	ad 87 0f	               lda  compte+1
.0f73	f0 09		               beq  fini
.0f75	ce 87 0f	               dec  compte+1
.0f78	ce 86 0f	decit          dec  compte
.0f7b	4c 55 0f	               jmp  destin
.0f7e	20 cb 0e	fini           jsr  pop
.0f81	60		               rts
.0f82			words
>0f82	00 00		s         .word     $0000
>0f84	00 00		d         .word     $0000
>0f86	00 00		compte    .word     $0000
.0f88			decword
.0f88	20 8c 0e	               jsr  push
.0f8b	86 fd		               stx  zpage2
.0f8d	84 fe		               sty  zpage2+1
.0f8f	20 cb 0e	               jsr  pop
.0f92	60		               rts
.0f93			inczp1
.0f93	08		               php
.0f94	48		               pha
.0f95	e6 fb		               inc  zpage1
.0f97	a5 fb		               lda  zpage1
.0f99	d0 02		               bne  nopage
.0f9b	e6 fc		               inc  zpage1+1
.0f9d	68		nopage         pla
.0f9e	28		               plp
.0f9f	60		               rts
.0fa0			deczp1
.0fa0	08		                php
.0fa1	48		                pha
.0fa2	c6 fb		                dec  zpage1
.0fa4	d0 02		                bne  nopage
.0fa6	c6 fc		                dec  zpage1+1
.0fa8	68		nopage          pla
.0fa9	28		                plp
.0faa	60		                rts
.0fab			inczp2
.0fab	08		               php
.0fac	48		               pha
.0fad	e6 fd		               inc  zpage2
.0faf	a5 fd		               lda  zpage2
.0fb1	d0 02		               bne  nopage
.0fb3	e6 fe		               inc  zpage2+1
.0fb5	68		nopage         pla
.0fb6	28		               plp
.0fb7	60		               rts
.0fb8			deczp2
.0fb8	08		               php
.0fb9	48		               pha
.0fba	a5 fd		               lda  zpage2
.0fbc	d0 02		               bne  nopage
.0fbe	c6 fe		               dec  zpage2+1
.0fc0	68		nopage         pla
.0fc1	28		               plp
.0fc2	60		               rts
.0fc3			savezp1
.0fc3	08		               php
.0fc4	48		               pha
.0fc5	a5 fb		               lda  zpage1
.0fc7	8d 3f 10	               sta  zp1
.0fca	a5 fc		               lda  zpage1+1
.0fcc	8d 40 10	               sta  zp1+1
.0fcf	68		               pla
.0fd0	28		               plp
.0fd1	60		               rts
.0fd2			restzp1
.0fd2	08		               php
.0fd3	48		               pha
.0fd4	ad 3f 10	               lda zp1
.0fd7	85 fb		               sta zpage1
.0fd9	ad 40 10	               lda zp1+1
.0fdc	85 fc		               sta zpage1+1
.0fde	68		               pla
.0fdf	28		               plp
.0fe0	60		               rts
.0fe1			savezp2
.0fe1	08		         php
.0fe2	48		         pha
.0fe3	a5 fd		         lda zpage2
.0fe5	8d 41 10	         sta zp2
.0fe8	a5 fe		         lda zpage2+1
.0fea	8d 42 10	         sta zp2+1
.0fed	68		         pla
.0fee	28		         plp
.0fef	60		         rts
.0ff0			restzp2
.0ff0	08		                php
.0ff1	48		                pha
.0ff2	ad 41 10	                lda  zp2
.0ff5	85 fd		                sta  zpage2
.0ff7	ad 42 10	                lda  zp2+1
.0ffa	85 fe		                sta  zpage2+1
.0ffc	68		                pla
.0ffd	28		                plp
.0ffe	60		                rts
.0fff			xy2addr
.0fff	08		                php
.1000	48		                pha
.1001	8a		                txa
.1002	48		                pha
.1003	98		                tya
.1004	48		                pha
.1005	ad 3a 10	                lda     addr1+1
.1008	8d 3c 10	                sta     addr2+1
.100b	ad 39 10	                lda     addr1
.100e	8d 3b 10	                sta     addr2
.1011	c0 00		                cpy     #$00
.1013	f0 0f		                beq     addx
.1015	18		moreline        clc
.1016	6d 38 10	                adc     ymult
.1019	90 03		                bcc     norepy
.101b	ee 3c 10	                inc     addr2+1
.101e	8d 3b 10	norepy          sta     addr2
.1021	88		                dey
.1022	d0 f1		                bne     moreline
.1024	8a		addx            txa
.1025	18		                clc
.1026	6d 3b 10	                adc     addr2
.1029	90 03		                bcc     thatsit
.102b	ee 3c 10	                inc     addr2+1
.102e	8d 3b 10	thatsit         sta     addr2
.1031	68		                pla
.1032	a8		                tay
.1033	68		                pla
.1034	aa		                tax
.1035	68		                pla
.1036	28		                plp
.1037	60		                rts
>1038	28		ymult          .byte     40
>1039	00 00		addr1          .word     $0000
>103b	00 00		addr2          .word     $0000
>103d	00 00		bytecnt        .word     $0000
>103f	00 00		zp1        .word   $0000
>1041	00 00		zp2        .word   $0000

;******  Return to file: p028ex05.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1043	01		a2hexcol       .byte     1              ; pour aputscxy
>1044	00		a2hexbkcol     .byte     %00000000
.1045			a2hexpos
>1045	00		a2hexpx        .byte     0              ; pour aputsxy
>1046	00		a2hexpy        .byte     0
>1047	24		a2hexprefix    .byte     "$"            ; pour aputs
>1048	00 00		a2hexstr       .word     $00
>104a	00 00		               .word     $00
>104c	00		               .byte     0              ; 0 end string
>104d	30 30 30 30	abin           .null     "00000000"
>1051	30 30 30 30 00
>1056	20 20 20 00	adec           .null     "   "
.105a			putahexfmtxy
.105a	20 8c 0e	               jsr  push
.105d	20 a9 10	               jsr  a2hex
.1060	ae 45 10	               ldx  a2hexpx
.1063	ac 46 10	               ldy  a2hexpy
.1066	20 f7 0b	               jsr  gotoxy
.1069	a2 47		               ldx  #<a2hexprefix
.106b	a0 10		               ldy  #>a2hexprefix
.106d	20 dd 0b	               jsr  puts
.1070	20 cb 0e	               jsr  pop
.1073	60		               rts
.1074			putahexfmt
.1074	20 8c 0e	               jsr  push
.1077	20 a9 10	               jsr  a2hex
.107a	a2 47		               ldx  #<a2hexprefix
.107c	a0 10		               ldy  #>a2hexprefix
.107e	20 dd 0b	               jsr  puts
.1081	20 cb 0e	               jsr  pop
.1084	60		               rts
.1085			putahex
.1085	20 8c 0e	               jsr  push
.1088	20 a9 10	               jsr  a2hex
.108b	a2 48		               ldx  #<a2hexstr
.108d	a0 10		               ldy  #>a2hexstr
.108f	20 dd 0b	               jsr  puts
.1092	20 cb 0e	               jsr  pop
.1095	60		               rts
.1096			nib2hex
.1096	08		               php
.1097	29 0f		               and  #$0f
.1099	f8		               sed
.109a	18		               clc
.109b	69 90		               adc  #$90
.109d	69 40		               adc  #$40
.109f	d8		               cld
.10a0	28		               plp
.10a1	60		               rts
.10a2			lsra4bits
.10a2	08		               php
.10a3	4a		               lsr
.10a4	4a		               lsr
.10a5	4a		               lsr
.10a6	4a		               lsr
.10a7	28		               plp
.10a8	60		               rts
.10a9			a2hex
.10a9	08		               php
.10aa	48		               pha
.10ab	48		               pha
.10ac	20 a2 10	               jsr  lsra4bits
.10af	20 96 10	               jsr  nib2hex
.10b2	8d 48 10	               sta  a2hexstr
.10b5	68		               pla
.10b6	20 96 10	               jsr  nib2hex
.10b9	8d 49 10	               sta  a2hexstr+1
.10bc	a9 00		               lda  #$00                ; set end of string
.10be	8d 4a 10	               sta  a2hexstr+2
.10c1	68		               pla
.10c2	28		               plp
.10c3	60		               rts
.10c4			xy2hex
.10c4	20 8c 0e	               jsr  push
.10c7	20 a9 10	               jsr  a2hex
.10ca	8a		               txa
.10cb	48		               pha
.10cc	20 a2 10	               jsr  lsra4bits
.10cf	20 96 10	               jsr  nib2hex
.10d2	8d 48 10	               sta  a2hexstr
.10d5	68		               pla
.10d6	20 96 10	               jsr  nib2hex
.10d9	8d 49 10	               sta  a2hexstr+1
.10dc	98		               tya
.10dd	48		               pha
.10de	20 a2 10	               jsr  lsra4bits
.10e1	20 96 10	               jsr  nib2hex
.10e4	8d 4a 10	               sta  a2hexstr+2
.10e7	68		               pla
.10e8	20 96 10	               jsr  nib2hex
.10eb	8d 4b 10	               sta  a2hexstr+3
.10ee	a9 00		               lda  #$00                ; 0 ended string
.10f0	8d 4c 10	               sta  a2hexstr+4
.10f3	20 cb 0e	               jsr  pop
.10f6			atobin
.10f6	20 8c 0e	               jsr  push
.10f9	a2 08		               ldx  #8
.10fb	a0 00		               ldy  #0
.10fd	18		               clc
.10fe	2a		nextbit        rol
.10ff	48		               pha
.1100	69 00		               adc  #$00
.1102	29 01		               and  #$01
.1104	20 96 10	               jsr  nib2hex
.1107	99 4d 10	               sta  abin,y
.110a	68		               pla
.110b	c8		               iny
.110c	ca		               dex
.110d	d0 ef		               bne  nextbit
.110f	a9 00		               lda  #0
.1111	99 4d 10	               sta  abin,y
.1114	20 cb 0e	               jsr  pull
.1117	60		               rts
.1118			putabin
.1118	20 f6 10	               jsr     atobin
.111b	20 8c 0e	               jsr     push
.111e	a2 4d		               ldx     #<abin
.1120	a0 10		               ldy     #>abin
.1122	20 dd 0b	               jsr     puts
.1125	20 cb 0e	               jsr     pop
.1128	60		               rts
.1129			printabin
.1129	20 8c 0e	               jsr     push
.112c	a2 4d		               ldx     #<abin
.112e	a0 10		               ldy     #>abin
.1130	20 dd 0b	               jsr     puts
.1133	20 cb 0e	               jsr     pop
.1136	60		               rts
.1137			putabinfmt
.1137	08		               php
.1138	48		               pha
.1139	a9 25		               lda     #"%"
.113b	20 d7 0b	               jsr     putch
.113e	68		               pla
.113f	20 18 11	               jsr     putabin
.1142	28		               plp
.1143	60		               rts
.1144			putabinxy
.1144	20 f7 0b	               jsr     gotoxy
.1147	20 18 11	               jsr     putabin
.114a	60		               rts
.114b			putabinfmtxy
.114b	20 f7 0b	               jsr     gotoxy
.114e	20 37 11	               jsr     putabinfmt
.1151	60		               rts
.1152			atodec
.1152	20 8c 0e	               jsr  push
.1155	f8		               sed
.1156	aa		               tax
.1157	a0 00		               ldy  #$00
.1159	a9 00		               lda  #$00
.115b	18		nextbit        clc
.115c	69 01		               adc  #$01
.115e	90 01		               bcc  decx
.1160	c8		               iny
.1161	ca		decx           dex
.1162	d0 f7		               bne  nextbit
.1164	48		               pha
.1165	98		               tya
.1166	20 96 10	               jsr  nib2hex
.1169	8d 56 10	               sta  adec
.116c	68		               pla
.116d	48		               pha
.116e	20 96 10	               jsr  nib2hex
.1171	8d 58 10	               sta  adec+2
.1174	68		               pla
.1175	6a		               ror
.1176	6a		               ror
.1177	6a		               ror
.1178	6a		               ror
.1179	20 96 10	               jsr  nib2hex
.117c	8d 57 10	               sta  adec+1
.117f	d8		               cld
.1180	20 cb 0e	               jsr  pull
.1183	60		               rts
>1184	00 00 00	buffer         .byte     0,0,0
.1187			putadec
.1187	20 8c 0e	               jsr  push
.118a	20 52 11	               jsr  atodec
.118d	a2 56		               ldx  #<adec
.118f	a0 10		               ldy  #>adec+1
.1191	20 dd 0b	               jsr  puts
.1194	20 cb 0e	               jsr  pop
.1197	60		               rts

;******  Return to file: p028ex05.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1198	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>119c	00 00 00 00 00 00 00 00 00 0d 00 00
>11a8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>11ac	00 00 00 00 00 00 00 00 00 00 00 00
>11b8	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>11bc	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>11c8	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>11cc	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>11d8	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>11dc	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>11e8	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>11ec	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>11f8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>11fc	00 00 00 00 00 00 00 00 00 00 00 00
>1208	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>120c	00 00 00 00 00 00 00 00 00 00 00 00
>1218	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>121c	00 00 00 00 00 00 00 00 00 00 00 00
>1228	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>122c	00 00 00 00 00 00 00 00 00 00 00 00
>1238	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>123c	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1248	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>124c	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1258	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>125c	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1268	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>126c	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1278	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>127c	00 00 00 00 00 00 00 00 00 00 00 00
>1288	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>128c	00 00 00 00 00 00 00 00 00 00 00 00
.1298			waitstop
.1298	20 8c 0e	               jsr  push
.129b	20 ed f6	wait           jsr  k_stop
.129e	d0 fb		               bne  wait
.12a0	20 cb 0e	               jsr  pop
.12a3	60		               rts
.12a4			anykey
.12a4	08		               php
.12a5	48		               pha
.12a6	a5 cb		nokey          lda 203
.12a8	c9 40		               cmp #64
.12aa	f0 fa		               beq nokey
.12ac	20 b2 12	               jsr releasekey
.12af	68		               pla
.12b0	28		               plp
.12b1	60		               rts
.12b2			releasekey
.12b2	08		               php
.12b3	48		               pha
.12b4	a5 cb		keypressed     lda 203
.12b6	c9 40		               cmp #64
.12b8	d0 fa		               bne keypressed
.12ba	68		               pla
.12bb	28		               plp
.12bc	60		               rts
.12bd			getkey
.12bd	20 e4 ff	again          jsr  getin
.12c0	c9 00		               cmp  #0
.12c2	f0 f9		               beq  again
.12c4	60		               rts
.12c5			kbflushbuff
.12c5	08		               php
.12c6	48		               pha
.12c7	20 e4 ff	again          jsr  getin
.12ca	c9 00		               cmp  #0
.12cc	d0 f9		               bne  again
.12ce	68		               pla
.12cf	28		               plp
.12d0	60		               rts
.12d1			waitkey
.12d1	20 8c 0e	               jsr  push
.12d4	8d 22 13	               sta  thekey
.12d7	20 e4 ff	nope           jsr  getin
.12da	20 d2 ff	               jsr  chrout
.12dd	cd 22 13	               cmp  thekey
.12e0	d0 f5		               bne  nope
.12e2	20 d2 ff	               jsr  chrout
.12e5	20 cb 0e	               jsr  pop
.12e8	60		               rts
.12e9			waitspace
.12e9	20 8c 0e	               jsr  push
.12ec	a9 7f		wait           lda  #$7f  ;%01111111
.12ee	8d 00 dc	               sta  $dc00
.12f1	ad 01 dc	               lda  $dc01
.12f4	29 10		               and  #$10  ;mask %00010000
.12f6	d0 f4		               bne  wait
.12f8	20 cb 0e	               jsr  pop
.12fb			waitsstop
.12fb	20 8c 0e	               jsr  push
.12fe	20 ed f6	wait           jsr  k_stop  ;%01111111
.1301	d0 fb		               bne  wait
.1303	20 cb 0e	               jsr  pop
.1306			waitreturn
.1306	20 8c 0e	               jsr  push
.1309	ad 23 13	               lda  thecount
.130c	8d 00 04	               sta  scrnram
.130f	a9 02		               lda  #$02
.1311	8d 00 d8	               sta  colorram
.1314	20 e4 ff	nope           jsr  getin
.1317	c9 0d		nohex          cmp  #$0d
.1319	d0 f9		               bne  nope
.131b	ee 23 13	               inc  thecount
.131e	20 cb 0e	               jsr  pop
.1321	60		               rts
>1322	00		thekey         .byte   0
>1323	01		thecount       .byte   $01

;******  Return to file: p028ex05.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L p029ex06.txt -o p029ex06.prg p029ex06.asm
; Mon Oct 28 17:37:51 2024

;Offset	;Hex		;Source

;******  Processing input file: p029ex06.asm

="20241028-172827"	           Version = "20241028-172827"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	1d 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	0a 00				.word 10   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 41			.text " *par daniel lafrance*"
>080a	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>081a	45 2a
>081c	00				.byte $00		;Un zéro pour indiquer la fin de cette
>081d	28 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>081f	14 00				.word 20   	;Numero de la ligne Basic.
>0821	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0822	30 32 30 39			.text format("%05d",hpgmstart)
>0826	30
>0827	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0828	00 00		bcmd3	.word $0000    ;L'adresse de la commande Basic suivante.
.082a	4c fa 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: p029ex06.asm

.082d			p029ex06
.082d	20 ac 0e	          jsr  push
.0830	48		               pha
.0831	a9 03		               lda  #ccyan
.0833	8d 20 d0	               sta  $d020
.0836	68		               pla
.0837	48		               pha
.0838	a9 01		               lda  #cblanc
.083a	8d 21 d0	               sta  $d021
.083d	68		               pla
.083e	48		               pha
.083f	a9 06		               lda  #cbleu
.0841	8d 86 02	               sta  bascol
.0844	68		               pla
.0845	20 e0 0b	          jsr  cls
.0848	20 86 08	          jsr  insub
.084b	20 ca bb	          jsr  b_f1t57
.084e	20 86 08	          jsr  insub
.0851	a9 57		          lda  #$57
.0853	a0 00		          ldy  #$00
.0855	20 28 ba	          jsr  b_f1xfv
.0858	20 dd bd	          jsr  b_facasc
.085b	20 68 08	          jsr  outsub
.085e	20 eb 0e	          jsr  pop
.0861	60		          rts
>0862	00 00 00 00	floatnum  .byte 0,0,0,0,0,0
>0866	00 00
.0868			outsub
.0868	20 ac 0e	          jsr  push
.086b	a0 ff		          ldy  #$ff
.086d	c8		nxtchr    iny
.086e	b9 00 01	          lda  $0100,y
.0871	d0 fa		          bne  nxtchr
.0873	c8		          iny
.0874	98		          tya
.0875	48		          pha
.0876	a9 00		          lda  #$00
.0878	85 22		          sta  $22
.087a	a9 01		          lda  #$01
.087c	85 23		          sta  $23
.087e	68		          pla
.087f	20 24 ab	          jsr  b_strout
.0882	20 eb 0e	          jsr  pop
.0885	60		          rts
.0886			insub
.0886	48		          pha
.0887	8a		          txa
.0888	48		          pha
.0889	20 e5 12	          jsr  kbflushbuff
.088c	20 bf e3	          jsr  b_intcgt       ; Initialide chrget
.088f	a9 00		          lda  #$00           ; On efface le basic input buffer
.0891	a0 59		          ldy  #$59           ;  situé à $200 long de 89 bytes ($59)
.0893	99 00 02	clear     sta  b_inpbuff,y    ;  en plaçant des $00 partout
.0896	88		          dey                 ;  et ce jusqu'au
.0897	d0 fa		          bne  clear          ;  dernier.
.0899	a9 b7		          lda  #<ptext
.089b	85 22		          sta  $22
.089d	a9 08		          lda  #>ptext
.089f	85 23		          sta  $23
.08a1	a9 14		          lda  #ptextend-ptext
.08a3	20 24 ab	          jsr  b_strout       ; Affiche la chaine(z)
.08a6	20 f9 ab	          jsr  b_prompt       ; Affiche un "?" et attend une entrée.
.08a9	86 7a		          stx  $7a            ; X et Y pointe sur $01ff au retour.
.08ab	84 7b		          sty  $7b
.08ad	20 73 00	          jsr  b_chrget       ; Lecture du buffer.
.08b0	20 f3 bc	          jsr  b_ascflt       ; Conversion la chaine ascii en 200 en float.
.08b3	68		          pla                 ;  dans $22(lsb) et $23(msb)
.08b4	aa		          tax
.08b5	68		          pla
.08b6	60		          rts
>08b7	0d 9c 20	ptext     .byte b_crlf, b_purple, b_space
>08ba	c5 4e 54 45	          .text "Enter a number "
>08be	52 20 41 20 4e 55 4d 42 45 52 20
>08c9	90 00		          .byte b_black,b_eot
.08cb			ptextend
.08cb			akey
.08cb	a9 dc		          lda  #<kmsg
.08cd	85 22		          sta  $22
.08cf	a9 08		          lda  #>kmsg
.08d1	85 23		          sta  $23
.08d3	a9 1e		          lda  #kmsgend-kmsg
.08d5	20 24 ab	          jsr  b_strout
.08d8	20 c4 12	          jsr  anykey
.08db	60		          rts
>08dc	0d 1e 91 1d	kmsg      .byte b_crlf,b_green,b_crsr_up,b_crsr_right
>08e0	d5 4e 45 20	          .text               "Une clef pour continuer!"
>08e4	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>08f4	55 45 52 21
>08f8	90 00		          .byte b_black,b_eot
.08fa			kmsgend
.08fa			main
.08fa	20 c0 0b	          jsr       scrmaninit
.08fd	08		               php
.08fe	48		               pha
.08ff	a9 08		               lda  #$08
.0901	20 d2 ff	               jsr  $ffd2
.0904	68		               pla
.0905	28		               plp
.0906	48		               pha
.0907	a9 03		               lda  #ccyan
.0909	8d 20 d0	               sta  $d020
.090c	68		               pla
.090d	48		               pha
.090e	a9 01		               lda  #cblanc
.0910	8d 21 d0	               sta  $d021
.0913	68		               pla
.0914	48		               pha
.0915	a9 06		               lda  #cbleu
.0917	8d 86 02	               sta  bascol
.091a	68		               pla
.091b	20 3c 09	          jsr       bookinfo
.091e	20 cb 08	          jsr       akey
.0921	20 e0 0b	          jsr       cls
.0924	20 80 09	          jsr       help
.0927	20 cb 08	          jsr       akey
.092a	a9 0d		          lda       #b_crlf
.092c	20 d2 ff	          jsr       $ffd2
.092f	20 2d 08	          jsr       p029ex06
.0932	08		               php
.0933	48		               pha
.0934	a9 09		               lda  #$09
.0936	20 d2 ff	               jsr  $ffd2
.0939	68		               pla
.093a	28		               plp
.093b	60		          rts
.093c			bookinfo
.093c	08		               php
.093d	48		               pha
.093e	a9 0e		               lda  #14
.0940	8d df 0b	               sta  characterset
.0943	20 d2 ff	               jsr  $ffd2
.0946	68		               pla
.0947	28		               plp
.0948	20 e0 0b	          jsr       cls
.094b	20 ac 0e	               jsr  push
.094e	a2 8f		isx            ldx  #<line
.0950	a0 0b		isy            ldy  #>line
.0952	20 fd 0b	               jsr  puts
.0955	20 eb 0e	               jsr  pull
.0958	20 ac 0e	               jsr  push
.095b	a2 b7		isx            ldx  #<headera
.095d	a0 09		isy            ldy  #>headera
.095f	20 fd 0b	               jsr  puts
.0962	20 eb 0e	               jsr  pull
.0965	20 ac 0e	               jsr  push
.0968	a2 57		isx            ldx  #<headerb
.096a	a0 0a		isy            ldy  #>headerb
.096c	20 fd 0b	               jsr  puts
.096f	20 eb 0e	               jsr  pull
.0972	20 ac 0e	               jsr  push
.0975	a2 8f		isx            ldx  #<line
.0977	a0 0b		isy            ldy  #>line
.0979	20 fd 0b	               jsr  puts
.097c	20 eb 0e	               jsr  pull
.097f	60		          rts
.0980			help
.0980	08		               php
.0981	48		               pha
.0982	a9 0e		               lda  #14
.0984	8d df 0b	               sta  characterset
.0987	20 d2 ff	               jsr  $ffd2
.098a	68		               pla
.098b	28		               plp
.098c	20 e0 0b	          jsr       cls
.098f	20 ac 0e	               jsr  push
.0992	a2 fa		isx            ldx  #<shortcuts
.0994	a0 0a		isy            ldy  #>shortcuts
.0996	20 fd 0b	               jsr  puts
.0999	20 eb 0e	               jsr  pull
.099c	20 ac 0e	               jsr  push
.099f	a2 7b		isx            ldx  #<helptext
.09a1	a0 0b		isy            ldy  #>helptext
.09a3	20 fd 0b	               jsr  puts
.09a6	20 eb 0e	               jsr  pull
.09a9	20 ac 0e	               jsr  push
.09ac	a2 8f		isx            ldx  #<line
.09ae	a0 0b		isy            ldy  #>line
.09b0	20 fd 0b	               jsr  puts
.09b3	20 eb 0e	               jsr  pull
.09b6	60		          rts
.09b7			headera
>09b7	20 2a 20 20	          .text               " *       Vic-20 and Commodore 64      *"
>09bb	20 20 20 20 20 d6 49 43 2d 32 30 20 41 4e 44 20
>09cb	c3 4f 4d 4d 4f 44 4f 52 45 20 36 34 20 20 20 20
>09db	20 20 2a
>09de	0d		          .byte     b_crlf
>09df	20 2a 20 20	          .text               " *           Tool Kit: BASIC          *"
>09e3	20 20 20 20 20 20 20 20 20 d4 4f 4f 4c 20 cb 49
>09f3	54 3a 20 c2 c1 d3 c9 c3 20 20 20 20 20 20 20 20
>0a03	20 20 2a
>0a06	0d		          .byte     b_crlf
>0a07	20 2a 20 20	          .text               " *          Book by Dan Heeb.         *"
>0a0b	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>0a1b	c4 41 4e 20 c8 45 45 42 2e 20 20 20 20 20 20 20
>0a2b	20 20 2a
>0a2e	0d		          .byte     b_crlf
>0a2f	20 2a 20 20	          .null               " *         ISBN: 0-942386-32-9        *"
>0a33	20 20 20 20 20 20 20 c9 d3 c2 ce 3a 20 30 2d 39
>0a43	34 32 33 38 36 2d 33 32 2d 39 20 20 20 20 20 20
>0a53	20 20 2a 00
>0a57	0d		headerb   .byte     $0d
>0a58	20 2a 20 20	          .text               " *    Direct Use of Floating Point    *"
>0a5c	20 20 c4 49 52 45 43 54 20 d5 53 45 20 4f 46 20
>0a6c	c6 4c 4f 41 54 49 4e 47 20 d0 4f 49 4e 54 20 20
>0a7c	20 20 2a
>0a7f	0d		          .byte     $0d
>0a80	20 2a 20 20	          .text               " *         page 28, exemple #5        *"
>0a84	20 20 20 20 20 20 20 50 41 47 45 20 32 38 2c 20
>0a94	45 58 45 4d 50 4c 45 20 23 35 20 20 20 20 20 20
>0aa4	20 20 2a
>0aa7	0d		          .byte     $0d
>0aa8	20 2a 20 20	          .text               " *    Programmeur Daniel Lafrance.    *"
>0aac	20 20 d0 52 4f 47 52 41 4d 4d 45 55 52 20 c4 41
>0abc	4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e 20 20
>0acc	20 20 2a
>0acf	0d		          .byte     $0d
>0ad0	20 2a 20 20	          .text     format(   " *      Version: %s.     * ",Version)
>0ad4	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0ae4	34 31 30 32 38 2d 31 37 32 38 32 37 2e 20 20 20
>0af4	20 20 2a 20
>0af8	90 00		          .byte     b_black,b_eot
>0afa	1f 20 12	shortcuts .byte     b_blue,b_space,b_rvs_on
>0afd	20 20 20 20	          .text               "        RACCOURCIS DES EXEMPLES       "
>0b01	20 20 20 20 d2 c1 c3 c3 cf d5 d2 c3 c9 d3 20 c4
>0b11	c5 d3 20 c5 d8 c5 cd d0 cc c5 d3 20 20 20 20 20
>0b21	20 20
>0b23	92 0d 0d	          .byte     b_rvs_off,b_crlf,b_crlf
>0b26	20 50 30 32	          .text     format(   " p029ex06: SYS %d ($%04X)",p029ex06, p029ex06)
>0b2a	39 45 58 30 36 3a 20 d3 d9 d3 20 32 30 39 33 20
>0b3a	28 24 30 38 32 c4 29
>0b41	0d		          .byte     b_crlf
>0b42	20 48 45 4c	          .text     format(   " help....: SYS %d ($%04X)",help, help)
>0b46	50 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 34 33 32 20
>0b56	28 24 30 39 38 30 29
>0b5d	0d		          .byte     b_crlf
>0b5e	20 43 4c 53	          .text     format(   " cls.....: SYS %d ($%04X)",cls, cls)
>0b62	2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 30 34 30 20
>0b72	28 24 30 c2 c5 30 29
>0b79	0d 00		          .byte     b_crlf,b_eot
>0b7b	0d 20 1c	helptext  .byte     b_crlf,b_space,b_red
>0b7e	20 45 58 2e	          .text     format(   " ex.: SYS %d",p029ex06)
>0b82	3a 20 d3 d9 d3 20 32 30 39 33
>0b8c	0d 90 00	          .byte     b_crlf,b_black,b_eot
>0b8f	20 2d 2d 2d	line      .text               " --------------------------------------"
>0b93	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0ba3	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0bb3	2d 2d 2d
>0bb6	0d 00		          .byte     b_crlf,b_eot

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0bb8	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0bbc	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0bc0			libtart

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0bc0			scrmaninit
.0bc0	20 ac 0e	               jsr  push
.0bc3	a9 06		               lda  #vbleu
.0bc5	8d 21 d0	               sta  vicbackcol
.0bc8	a9 05		               lda  #vvert
.0bca	8d 20 d0	               sta  vicbordcol
.0bcd	a9 01		               lda  #vblanc
.0bcf	8d 86 02	               sta  bascol
.0bd2	ad 00 04	               lda  scrnram
.0bd5	8d 00 04	               sta  scrnram
.0bd8	20 e0 0b	               jsr  cls
.0bdb	20 eb 0e	               jsr  pop
.0bde	60		               rts
>0bdf	8e		characterset   .byte b_uppercase
.0be0			cls
.0be0	08		               php
.0be1	48		               pha
.0be2	a9 93		               lda  #$93
.0be4	20 f7 0b	               jsr  putch
.0be7	68		               pla
.0be8	28		               plp
.0be9	60		               rts
.0bea			putnch
.0bea	08		               php
.0beb	e0 00		               cpx  #$00
.0bed	f0 06		               beq  out
.0bef	20 d2 ff	again          jsr  $ffd2
.0bf2	ca		               dex
.0bf3	d0 fa		               bne  again
.0bf5	28		out            plp
.0bf6	60		               rts
.0bf7			putch
.0bf7	08		               php
.0bf8	20 d2 ff	               jsr  $ffd2
.0bfb	28		               plp
.0bfc	60		               rts
.0bfd			puts
.0bfd	20 ac 0e	               jsr  push
.0c00	86 fb		               stx  zpage1
.0c02	84 fc		               sty  zpage1+1
.0c04	a0 00		               ldy  #0
.0c06	b1 fb		next           lda  (zpage1),y
.0c08	f0 09		               beq  exit
.0c0a	20 f7 0b	               jsr  putch
.0c0d	20 b3 0f	               jsr  inczp1
.0c10	4c 06 0c	               jmp  next
.0c13	20 eb 0e	exit           jsr  pop
.0c16	60		               rts
.0c17			gotoxy
.0c17	08		               php
.0c18	18		               clc
.0c19	8a		               txa
.0c1a	48		               pha
.0c1b	98		               tya
.0c1c	aa		               tax
.0c1d	68		               pla
.0c1e	a8		               tay
.0c1f	20 f0 ff	               jsr  kplot
.0c22	28		               plp
.0c23	60		               rts
.0c24			cursor
=$0286			bascol    =    $0286
.0c24	08		               php
.0c25	48		               pha
.0c26	90 12		               bcc  restore
.0c28	20 f0 ff	               jsr  kplot
.0c2b	8c 4c 0c	               sty  cx
.0c2e	8e 4d 0c	               stx  cy
.0c31	ad 86 02	               lda  bascol
.0c34	8d 4e 0c	               sta  bcol
.0c37	4c 49 0c	               jmp  out
.0c3a	ae 4d 0c	restore        ldx  cy
.0c3d	ac 4c 0c	               ldy  cx
.0c40	20 f0 ff	               jsr  kplot
.0c43	ad 4e 0c	               lda  bcol
.0c46	8d 86 02	               sta  bascol
.0c49	68		out            pla
.0c4a	28		               plp
.0c4b	60		               rts
>0c4c	00		cx   .byte     $00
>0c4d	00		cy   .byte     $00
>0c4e	00		bcol .byte     $00
.0c4f			cursave
.0c4f	08		               php
.0c50	38		               sec
.0c51	20 24 0c	               jsr  cursor
.0c54	28		               plp
.0c55	60		               rts
.0c56			curput
.0c56	08		               php
.0c57	18		               clc
.0c58	20 24 0c	               jsr  cursor
.0c5b	28		               plp
.0c5c	60		               rts
.0c5d			putsxy
.0c5d	20 ac 0e	               jsr  push
.0c60	86 fb		               stx  zpage1
.0c62	84 fc		               sty  zpage1+1
.0c64	a0 00		               ldy  #$00
.0c66	b1 fb		               lda  (zpage1),y
.0c68	aa		               tax
.0c69	20 b3 0f	               jsr  inczp1
.0c6c	b1 fb		               lda  (zpage1),y
.0c6e	a8		               tay
.0c6f	20 17 0c	               jsr  gotoxy
.0c72	20 b3 0f	               jsr  inczp1
.0c75	a6 fb		               ldx  zpage1
.0c77	a4 fc		               ldy  zpage1+1
.0c79	20 fd 0b	               jsr  puts
.0c7c	20 eb 0e	               jsr  pop
.0c7f	60		               rts
>0c80	00 00		straddr   .word     $00
>0c82	00		px        .byte     $00
>0c83	00		py        .byte     $00
>0c84	00 00		zp1       .word     $00
.0c86			putscxy
.0c86	20 ac 0e	               jsr  push
.0c89	84 fc		               sty  zpage1+1
.0c8b	86 fb		               stx  zpage1
.0c8d	ad 86 02	               lda  bascol
.0c90	8d b0 0c	               sta  bc
.0c93	a0 00		               ldy #$00
.0c95	b1 fb		               lda  (zpage1),y
.0c97	8d 86 02	               sta  bascol
.0c9a	20 b3 0f	               jsr  inczp1
.0c9d	a6 fb		               ldx  zpage1
.0c9f	a4 fc		               ldy  zpage1+1
.0ca1	20 5d 0c	               jsr  putsxy
.0ca4	ad b0 0c	               lda  bc
.0ca7	8d 86 02	               sta  bascol
.0caa	20 eb 0e	               jsr  pop
.0cad	60		               rts
>0cae	00 00		straddr  .word      $00
>0cb0	00		bc       .byte      $00
>0cb1	00 00		zp1      .word      $00
.0cb3			putrahex
.0cb3	08		               php
.0cb4	48		               pha
.0cb5	20 c9 10	               jsr  a2hex
.0cb8	a9 68		               lda  #<a2hexstr
.0cba	a0 10		               ldy  #>a2hexstr
.0cbc	20 fd 0b	               jsr  puts
.0cbf	68		               pla
.0cc0	28		               plp
.0cc1	60		               rts
.0cc2			kputrahexxy
.0cc2			bputrahexxy
.0cc2			putrahexxy
.0cc2	08		               php
.0cc3	20 c9 10	               jsr  a2hex
.0cc6	a9 65		               lda  #<a2hexpos
.0cc8	a0 10		               ldy  #>a2hexpos
.0cca	20 5d 0c	               jsr  putsxy
.0ccd	68		               pla
.0cce	28		               plp
.0ccf	60		               rts
.0cd0			putrahexcxy
.0cd0	08		               php
.0cd1	20 c9 10	               jsr  a2hex
.0cd4	a9 65		               lda  #<a2hexpos
.0cd6	a0 10		               ldy  #>a2hexpos
.0cd8	20 86 0c	               jsr  putscxy
.0cdb	68		               pla
.0cdc	28		               plp
.0cdd	60		               rts
.0cde			setinverse
.0cde	48		               pha
.0cdf	a9 12		               lda  #$12
.0ce1	20 d2 ff	               jsr  $ffd2
.0ce4	68		               pla
.0ce5	60		               rts
.0ce6			clrinverse
.0ce6	48		               pha
.0ce7	a9 92		               lda  #$92
.0ce9	20 d2 ff	               jsr  $ffd2
.0cec	68		               pla
.0ced	60		               rts

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.0cee			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.0cee	08		                php
.0cef	8d a0 0e	                sta  rega
.0cf2	68		                pla
.0cf3	8d a3 0e	                sta  regp
.0cf6	8e a1 0e	                stx  regx
.0cf9	8c a2 0e	                sty  regy
.0cfc	ba		                tsx
.0cfd	8e a4 0e	                stx  regs
.0d00	68		                pla
.0d01	8d a6 0e	                sta  regpcl
.0d04	8d a7 0e	                sta  regpcl2
.0d07	68		                pla
.0d08	8d a5 0e	                sta  regpch
.0d0b	ad a0 0e	                lda  rega
.0d0e	48		                pha
.0d0f	20 b6 10	                jsr  nib2hex
.0d12	8d 43 0e	                sta  vala+1
.0d15	68		                pla
.0d16	20 c2 10	                jsr  lsra4bits
.0d19	20 b6 10	                jsr  nib2hex
.0d1c	8d 42 0e	                sta  vala
.0d1f	ad a2 0e	                lda  regy
.0d22	48		                pha
.0d23	20 b6 10	                jsr  nib2hex
.0d26	8d 59 0e	                sta  valy+1
.0d29	68		                pla
.0d2a	20 c2 10	                jsr  lsra4bits
.0d2d	20 b6 10	                jsr  nib2hex
.0d30	8d 58 0e	                sta  valy
.0d33	ad a1 0e	                lda  regx
.0d36	48		                pha
.0d37	20 b6 10	                jsr  nib2hex
.0d3a	8d 4e 0e	                sta  valx+1
.0d3d	68		                pla
.0d3e	20 c2 10	                jsr  lsra4bits
.0d41	20 b6 10	                jsr  nib2hex
.0d44	8d 4d 0e	                sta  valx
.0d47	ad a3 0e	                lda  regp
.0d4a	48		                pha
.0d4b	20 b6 10	                jsr  nib2hex
.0d4e	8d 64 0e	                sta  valp+1
.0d51	68		                pla
.0d52	20 c2 10	                jsr  lsra4bits
.0d55	20 b6 10	                jsr  nib2hex
.0d58	8d 63 0e	                sta  valp
.0d5b	ad a4 0e	                lda  regs
.0d5e	48		                pha
.0d5f	20 b6 10	                jsr  nib2hex
.0d62	8d 6f 0e	                sta  vals+1
.0d65	68		                pla
.0d66	20 c2 10	                jsr  lsra4bits
.0d69	20 b6 10	                jsr  nib2hex
.0d6c	8d 6e 0e	                sta  vals
.0d6f	ad a5 0e	                lda  regpch
.0d72	48		                pha
.0d73	20 b6 10	                jsr  nib2hex
.0d76	8d 7b 0e	                sta  valpch+1
.0d79	68		                pla
.0d7a	20 c2 10	                jsr  lsra4bits
.0d7d	20 b6 10	                jsr  nib2hex
.0d80	8d 7a 0e	                sta  valpch
.0d83	ad a6 0e	                lda  regpcl
.0d86	48		                pha
.0d87	20 b6 10	                jsr  nib2hex
.0d8a	8d 7d 0e	                sta  valpcl+1
.0d8d	68		                pla
.0d8e	20 c2 10	                jsr  lsra4bits
.0d91	20 b6 10	                jsr  nib2hex
.0d94	8d 7c 0e	                sta  valpcl
.0d97	a5 fb		                lda  zpage1
.0d99	48		                pha
.0d9a	20 b6 10	                jsr  nib2hex
.0d9d	8d 8c 0e	                sta  valz1l
.0da0	68		                pla
.0da1	20 c2 10	                jsr  lsra4bits
.0da4	20 b6 10	                jsr  nib2hex
.0da7	8d 8d 0e	                sta  valz1l+1
.0daa	a5 fc		                lda  zpage1+1
.0dac	48		                pha
.0dad	20 b6 10	                jsr  nib2hex
.0db0	8d 8a 0e	                sta  valz1h
.0db3	68		                pla
.0db4	20 c2 10	                jsr  lsra4bits
.0db7	20 b6 10	                jsr  nib2hex
.0dba	8d 8b 0e	                sta  valz1h+1
.0dbd	a5 fd		                lda  zpage2
.0dbf	48		                pha
.0dc0	20 b6 10	                jsr  nib2hex
.0dc3	8d 9c 0e	                sta  valz2l
.0dc6	68		                pla
.0dc7	20 c2 10	                jsr  lsra4bits
.0dca	20 b6 10	                jsr  nib2hex
.0dcd	8d 9d 0e	                sta  valz2l+1
.0dd0	a5 fe		                lda  zpage2+1
.0dd2	48		                pha
.0dd3	20 b6 10	                jsr  nib2hex
.0dd6	8d 9a 0e	                sta  valz2h
.0dd9	68		                pla
.0dda	20 c2 10	                jsr  lsra4bits
.0ddd	20 b6 10	                jsr  nib2hex
.0de0	8d 9b 0e	                sta  valz2h+1
.0de3	20 de 0c	                jsr  setinverse
.0de6	78		                sei
.0de7	a2 3a		                ldx  #<srega
.0de9	a0 0e		                ldy  #>srega+1
.0deb	20 86 0c	                jsr  putscxy
.0dee	a2 45		                ldx  #<sregx
.0df0	a0 0e		                ldy  #>sregx+1
.0df2	20 86 0c	                jsr  putscxy
.0df5	a2 50		                ldx  #<sregy
.0df7	a0 0e		                ldy  #>sregy+1
.0df9	20 86 0c	                jsr  putscxy
.0dfc	a2 5b		                ldx  #<sregp
.0dfe	a0 0e		                ldy  #>sregp+1
.0e00	20 86 0c	                jsr  putscxy
.0e03	a2 66		                ldx  #<sregs
.0e05	a0 0e		                ldy  #>sregs+1
.0e07	20 86 0c	                jsr  putscxy
.0e0a	a2 71		                ldx  #<sregpc
.0e0c	a0 0e		                ldy  #>sregpc+1
.0e0e	20 86 0c	                jsr  putscxy
.0e11	a2 80		                ldx  #<sregz1
.0e13	a0 0e		                ldy  #>sregz1+1
.0e15	20 86 0c	                jsr  putscxy
.0e18	a2 90		                ldx  #<sregz2
.0e1a	a0 0e		                ldy  #>sregz2+1
.0e1c	20 86 0c	                jsr  putscxy
.0e1f	58		                cli
.0e20	20 e6 0c	                jsr  clrinverse
.0e23	ad a5 0e	                lda  regpch
.0e26	48		                pha
.0e27	ad a6 0e	                lda  regpcl
.0e2a	48		                pha
.0e2b	ac a2 0e	                ldy  regy
.0e2e	ae a1 0e	                ldx  regx
.0e31	ad a3 0e	                lda  regp
.0e34	48		                pha
.0e35	ad a0 0e	                lda  rega
.0e38	28		                plp
.0e39	60		                rts
>0e3a	01 00 00 17	srega   .byte   colr,bkcol,coln,line
>0e3e	20 41 3a 24	        .text   ' a:$' ;4,24
>0e42	00 00 00	vala    .byte   0,0,0
>0e45	01 00 06 17	sregx   .byte   colr,bkcol,coln+6,line
>0e49	20 58 3a 24	        .text   ' x:$' ;4,24
>0e4d	00 00 00	valx    .byte   0,0,0
>0e50	01 00 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>0e54	20 59 3a 24	        .text   ' y:$' ;4,24
>0e58	00 00 00	valy    .byte   0,0,0
>0e5b	01 00 12 17	sregp   .byte   colr,bkcol,coln+18,line
>0e5f	20 50 3a 24	        .text   ' p:$' ;4,24
>0e63	00 00 00	valp    .byte   0,0,0
>0e66	01 00 18 17	sregs   .byte   colr,bkcol,coln+24,line
>0e6a	20 53 3a 24	        .text   ' s:$' ;4,24
>0e6e	00 00 00	vals    .byte   0,0,0
>0e71	01 00 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>0e75	20 50 43 3a	        .text   ' pc:$' ;4,24
>0e79	24
>0e7a	00 00		valpch  .byte   0,0
>0e7c	00 00 20 00	valpcl  .byte   0,0,32,0
>0e80	01 00 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>0e84	20 5a 50 31	        .text   ' zp1:$' ;4,24
>0e88	3a 24
>0e8a	00 00		valz1h  .byte   0,0
>0e8c	00 00 20 00	valz1l  .byte   0,0,32,0
>0e90	01 00 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>0e94	20 5a 50 32	        .text   ' zp2:$' ;4,24
>0e98	3a 24
>0e9a	00 00		valz2h  .byte   0,0
>0e9c	00 00 20 00	valz2l  .byte   0,0,32,0
>0ea0	00		rega    .byte   0
>0ea1	00		regx    .byte   0
>0ea2	00		regy    .byte   0
>0ea3	00		regp    .byte   0
>0ea4	00		regs    .byte   0
>0ea5	00		regpch  .byte   0
>0ea6	00		regpcl  .byte   0
>0ea7	00		regpcl2 .byte   0
>0ea8	00		vzp1h   .byte   0
>0ea9	00		vzp1l   .byte   0
>0eaa	00		vzp2h   .byte   0
>0eab	00		vzp2l   .byte   0

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0eac			push
.0eac	08		          php            ; stack : flg, pcl, pch
.0ead	78		          sei
.0eae	8d e8 0e	          sta  ra        ; save a
.0eb1	68		          pla            ; stack : pcl, pch
.0eb2	8d e7 0e	          sta  rp        ; save rp
.0eb5	68		          pla            ; stack : pch
.0eb6	8d e9 0e	          sta  pc        ; save pcl
.0eb9	68		          pla            ; stack : -
.0eba	8d ea 0e	          sta  pc+1      ; save pch
.0ebd	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0ebf	48		          pha            ; stack : zp1l
.0ec0	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0ec2	48		          pha            ; stack : zp1h, zp1l
.0ec3	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0ec5	48		          pha            ; stack : zp2l, zp1h, zp1l
.0ec6	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0ec8	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0ec9	ad e7 0e	          lda  rp        ; get rp
.0ecc	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0ecd	ad e8 0e	          lda  ra        ; get a
.0ed0	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ed1	8a		          txa            ; get x
.0ed2	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed3	98		          tya            ; get y
.0ed4	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed5	ad ea 0e	          lda  pc+1      ; get pch
.0ed8	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ed9	ad e9 0e	          lda  pc        ; get pcl
.0edc	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0edd	ad e7 0e	          lda  rp        ; get rp
.0ee0	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ee1	ad e8 0e	          lda  ra        ; get a
.0ee4	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ee5	58		          cli
.0ee6	60		          rts
>0ee7	00		rp        .byte     0
>0ee8	00		ra        .byte     0
>0ee9	00 00		pc        .word     0
.0eeb			pull
.0eeb			pop
.0eeb	78		          sei
.0eec	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eed	8d 20 0f	          sta  pc        ; save pcl
.0ef0	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef1	8d 21 0f	          sta  pc+1      ; save pch
.0ef4	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ef5	a8		          tay            ; set y
.0ef6	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ef7	aa		          tax            ; set x
.0ef8	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0ef9	8d 1f 0f	          sta  ra        ; save a
.0efc	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0efd	8d 1e 0f	          sta  rp        ; save rp
.0f00	68		          pla            ; stack : zp2l, zp1h, zp1l
.0f01	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0f03	68		          pla            ; stack : zp1h, zp1l
.0f04	85 fd		          sta  zpage2    ; get zpage2 High byte
.0f06	68		          pla            ; stack : zp1l
.0f07	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0f09	68		          pla            ; stack :
.0f0a	85 fb		          sta  zpage1    ; get zpage1 High byte
.0f0c	ad 21 0f	          lda  pc+1      ; get pch
.0f0f	48		          pha            ; stack : pch
.0f10	ad 20 0f	          lda  pc
.0f13	48		          pha            ; stack : pcl, pch
.0f14	ad 1e 0f	          lda  rp        ; get rp
.0f17	48		          pha            ; stack : rp, pcl, pch
.0f18	ad 1f 0f	          lda  ra        ; set ra
.0f1b	58		          cli
.0f1c	28		          plp            ; stack : pcl, pch
.0f1d	60		          rts
>0f1e	00		rp        .byte     0
>0f1f	00		ra        .byte     0
>0f20	00 00		pc        .word     0

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0f22			blkfill
.0f22	20 ac 0e	bf0            jsr  push
.0f25	20 e3 0f	               jsr  savezp1
.0f28	84 fc		               sty  zpage1+1
.0f2a	a0 00		               ldy  #$00
.0f2c	84 fb		               sty  zpage1
.0f2e	91 fb		bf1            sta  (zpage1),y
.0f30	c8		               iny
.0f31	d0 fb		               bne  bf1
.0f33	20 f2 0f	               jsr  restzp1
.0f36	20 eb 0e	               jsr  pop
.0f39	60		               rts
.0f3a			memfill
.0f3a	20 ac 0e	               jsr  push
.0f3d	20 22 0f	mf1            jsr  blkfill
.0f40	c8		               iny
.0f41	ca		               dex
.0f42	d0 f9		               bne  mf1
.0f44	20 eb 0e	               jsr  pop
.0f47	60		               rts
.0f48			memmove
.0f48	20 ac 0e	               jsr  push
.0f4b	ba		               tsx            ; On se crée un pointeur ...
.0f4c	8a		               txa
.0f4d	18		               clc
.0f4e	69 0b		               adc  #11
.0f50	a8		               tay
.0f51	a2 06		               ldx  #$06
.0f53	b9 00 01	nextbyte       lda  $0100,y
.0f56	99 a2 0f	               sta  words,y
.0f59	c8		               iny
.0f5a	ca		               dex
.0f5b	d0 f6		               bne  nextbyte
.0f5d	ad a2 0f	               lda  s
.0f60	8d 79 0f	               sta  source+1
.0f63	ad a3 0f	               lda  s+1
.0f66	8d 7a 0f	               sta  source+2
.0f69	ad a4 0f	               lda  d
.0f6c	8d 76 0f	               sta  destin+1
.0f6f	ad a5 0f	               lda  d+1
.0f72	8d 77 0f	               sta  destin+2
.0f75	ad ff ff	destin         lda  $ffff
.0f78	8d ff ff	source         sta  $ffff
.0f7b	ee 76 0f	               inc  destin+1
.0f7e	d0 03		               bne  src
.0f80	ee 77 0f	               inc  destin+2
.0f83	ee 79 0f	src            inc  source+1
.0f86	d0 03		               bne  cnt
.0f88	ee 7a 0f	               inc  source+2
.0f8b	ad a6 0f	cnt            lda  compte
.0f8e	d0 08		               bne  decit
.0f90	ad a7 0f	               lda  compte+1
.0f93	f0 09		               beq  fini
.0f95	ce a7 0f	               dec  compte+1
.0f98	ce a6 0f	decit          dec  compte
.0f9b	4c 75 0f	               jmp  destin
.0f9e	20 eb 0e	fini           jsr  pop
.0fa1	60		               rts
.0fa2			words
>0fa2	00 00		s         .word     $0000
>0fa4	00 00		d         .word     $0000
>0fa6	00 00		compte    .word     $0000
.0fa8			decword
.0fa8	20 ac 0e	               jsr  push
.0fab	86 fd		               stx  zpage2
.0fad	84 fe		               sty  zpage2+1
.0faf	20 eb 0e	               jsr  pop
.0fb2	60		               rts
.0fb3			inczp1
.0fb3	08		               php
.0fb4	48		               pha
.0fb5	e6 fb		               inc  zpage1
.0fb7	a5 fb		               lda  zpage1
.0fb9	d0 02		               bne  nopage
.0fbb	e6 fc		               inc  zpage1+1
.0fbd	68		nopage         pla
.0fbe	28		               plp
.0fbf	60		               rts
.0fc0			deczp1
.0fc0	08		                php
.0fc1	48		                pha
.0fc2	c6 fb		                dec  zpage1
.0fc4	d0 02		                bne  nopage
.0fc6	c6 fc		                dec  zpage1+1
.0fc8	68		nopage          pla
.0fc9	28		                plp
.0fca	60		                rts
.0fcb			inczp2
.0fcb	08		               php
.0fcc	48		               pha
.0fcd	e6 fd		               inc  zpage2
.0fcf	a5 fd		               lda  zpage2
.0fd1	d0 02		               bne  nopage
.0fd3	e6 fe		               inc  zpage2+1
.0fd5	68		nopage         pla
.0fd6	28		               plp
.0fd7	60		               rts
.0fd8			deczp2
.0fd8	08		               php
.0fd9	48		               pha
.0fda	a5 fd		               lda  zpage2
.0fdc	d0 02		               bne  nopage
.0fde	c6 fe		               dec  zpage2+1
.0fe0	68		nopage         pla
.0fe1	28		               plp
.0fe2	60		               rts
.0fe3			savezp1
.0fe3	08		               php
.0fe4	48		               pha
.0fe5	a5 fb		               lda  zpage1
.0fe7	8d 5f 10	               sta  zp1
.0fea	a5 fc		               lda  zpage1+1
.0fec	8d 60 10	               sta  zp1+1
.0fef	68		               pla
.0ff0	28		               plp
.0ff1	60		               rts
.0ff2			restzp1
.0ff2	08		               php
.0ff3	48		               pha
.0ff4	ad 5f 10	               lda zp1
.0ff7	85 fb		               sta zpage1
.0ff9	ad 60 10	               lda zp1+1
.0ffc	85 fc		               sta zpage1+1
.0ffe	68		               pla
.0fff	28		               plp
.1000	60		               rts
.1001			savezp2
.1001	08		         php
.1002	48		         pha
.1003	a5 fd		         lda zpage2
.1005	8d 61 10	         sta zp2
.1008	a5 fe		         lda zpage2+1
.100a	8d 62 10	         sta zp2+1
.100d	68		         pla
.100e	28		         plp
.100f	60		         rts
.1010			restzp2
.1010	08		                php
.1011	48		                pha
.1012	ad 61 10	                lda  zp2
.1015	85 fd		                sta  zpage2
.1017	ad 62 10	                lda  zp2+1
.101a	85 fe		                sta  zpage2+1
.101c	68		                pla
.101d	28		                plp
.101e	60		                rts
.101f			xy2addr
.101f	08		                php
.1020	48		                pha
.1021	8a		                txa
.1022	48		                pha
.1023	98		                tya
.1024	48		                pha
.1025	ad 5a 10	                lda     addr1+1
.1028	8d 5c 10	                sta     addr2+1
.102b	ad 59 10	                lda     addr1
.102e	8d 5b 10	                sta     addr2
.1031	c0 00		                cpy     #$00
.1033	f0 0f		                beq     addx
.1035	18		moreline        clc
.1036	6d 58 10	                adc     ymult
.1039	90 03		                bcc     norepy
.103b	ee 5c 10	                inc     addr2+1
.103e	8d 5b 10	norepy          sta     addr2
.1041	88		                dey
.1042	d0 f1		                bne     moreline
.1044	8a		addx            txa
.1045	18		                clc
.1046	6d 5b 10	                adc     addr2
.1049	90 03		                bcc     thatsit
.104b	ee 5c 10	                inc     addr2+1
.104e	8d 5b 10	thatsit         sta     addr2
.1051	68		                pla
.1052	a8		                tay
.1053	68		                pla
.1054	aa		                tax
.1055	68		                pla
.1056	28		                plp
.1057	60		                rts
>1058	28		ymult          .byte     40
>1059	00 00		addr1          .word     $0000
>105b	00 00		addr2          .word     $0000
>105d	00 00		bytecnt        .word     $0000
>105f	00 00		zp1        .word   $0000
>1061	00 00		zp2        .word   $0000

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1063	01		a2hexcol       .byte     1              ; pour aputscxy
>1064	00		a2hexbkcol     .byte     %00000000
.1065			a2hexpos
>1065	00		a2hexpx        .byte     0              ; pour aputsxy
>1066	00		a2hexpy        .byte     0
>1067	24		a2hexprefix    .byte     "$"            ; pour aputs
>1068	00 00		a2hexstr       .word     $00
>106a	00 00		               .word     $00
>106c	00		               .byte     0              ; 0 end string
>106d	30 30 30 30	abin           .null     "00000000"
>1071	30 30 30 30 00
>1076	20 20 20 00	adec           .null     "   "
.107a			putahexfmtxy
.107a	20 ac 0e	               jsr  push
.107d	20 c9 10	               jsr  a2hex
.1080	ae 65 10	               ldx  a2hexpx
.1083	ac 66 10	               ldy  a2hexpy
.1086	20 17 0c	               jsr  gotoxy
.1089	a2 67		               ldx  #<a2hexprefix
.108b	a0 10		               ldy  #>a2hexprefix
.108d	20 fd 0b	               jsr  puts
.1090	20 eb 0e	               jsr  pop
.1093	60		               rts
.1094			putahexfmt
.1094	20 ac 0e	               jsr  push
.1097	20 c9 10	               jsr  a2hex
.109a	a2 67		               ldx  #<a2hexprefix
.109c	a0 10		               ldy  #>a2hexprefix
.109e	20 fd 0b	               jsr  puts
.10a1	20 eb 0e	               jsr  pop
.10a4	60		               rts
.10a5			putahex
.10a5	20 ac 0e	               jsr  push
.10a8	20 c9 10	               jsr  a2hex
.10ab	a2 68		               ldx  #<a2hexstr
.10ad	a0 10		               ldy  #>a2hexstr
.10af	20 fd 0b	               jsr  puts
.10b2	20 eb 0e	               jsr  pop
.10b5	60		               rts
.10b6			nib2hex
.10b6	08		               php
.10b7	29 0f		               and  #$0f
.10b9	f8		               sed
.10ba	18		               clc
.10bb	69 90		               adc  #$90
.10bd	69 40		               adc  #$40
.10bf	d8		               cld
.10c0	28		               plp
.10c1	60		               rts
.10c2			lsra4bits
.10c2	08		               php
.10c3	4a		               lsr
.10c4	4a		               lsr
.10c5	4a		               lsr
.10c6	4a		               lsr
.10c7	28		               plp
.10c8	60		               rts
.10c9			a2hex
.10c9	08		               php
.10ca	48		               pha
.10cb	48		               pha
.10cc	20 c2 10	               jsr  lsra4bits
.10cf	20 b6 10	               jsr  nib2hex
.10d2	8d 68 10	               sta  a2hexstr
.10d5	68		               pla
.10d6	20 b6 10	               jsr  nib2hex
.10d9	8d 69 10	               sta  a2hexstr+1
.10dc	a9 00		               lda  #$00                ; set end of string
.10de	8d 6a 10	               sta  a2hexstr+2
.10e1	68		               pla
.10e2	28		               plp
.10e3	60		               rts
.10e4			xy2hex
.10e4	20 ac 0e	               jsr  push
.10e7	20 c9 10	               jsr  a2hex
.10ea	8a		               txa
.10eb	48		               pha
.10ec	20 c2 10	               jsr  lsra4bits
.10ef	20 b6 10	               jsr  nib2hex
.10f2	8d 68 10	               sta  a2hexstr
.10f5	68		               pla
.10f6	20 b6 10	               jsr  nib2hex
.10f9	8d 69 10	               sta  a2hexstr+1
.10fc	98		               tya
.10fd	48		               pha
.10fe	20 c2 10	               jsr  lsra4bits
.1101	20 b6 10	               jsr  nib2hex
.1104	8d 6a 10	               sta  a2hexstr+2
.1107	68		               pla
.1108	20 b6 10	               jsr  nib2hex
.110b	8d 6b 10	               sta  a2hexstr+3
.110e	a9 00		               lda  #$00                ; 0 ended string
.1110	8d 6c 10	               sta  a2hexstr+4
.1113	20 eb 0e	               jsr  pop
.1116			atobin
.1116	20 ac 0e	               jsr  push
.1119	a2 08		               ldx  #8
.111b	a0 00		               ldy  #0
.111d	18		               clc
.111e	2a		nextbit        rol
.111f	48		               pha
.1120	69 00		               adc  #$00
.1122	29 01		               and  #$01
.1124	20 b6 10	               jsr  nib2hex
.1127	99 6d 10	               sta  abin,y
.112a	68		               pla
.112b	c8		               iny
.112c	ca		               dex
.112d	d0 ef		               bne  nextbit
.112f	a9 00		               lda  #0
.1131	99 6d 10	               sta  abin,y
.1134	20 eb 0e	               jsr  pull
.1137	60		               rts
.1138			putabin
.1138	20 16 11	               jsr     atobin
.113b	20 ac 0e	               jsr     push
.113e	a2 6d		               ldx     #<abin
.1140	a0 10		               ldy     #>abin
.1142	20 fd 0b	               jsr     puts
.1145	20 eb 0e	               jsr     pop
.1148	60		               rts
.1149			printabin
.1149	20 ac 0e	               jsr     push
.114c	a2 6d		               ldx     #<abin
.114e	a0 10		               ldy     #>abin
.1150	20 fd 0b	               jsr     puts
.1153	20 eb 0e	               jsr     pop
.1156	60		               rts
.1157			putabinfmt
.1157	08		               php
.1158	48		               pha
.1159	a9 25		               lda     #"%"
.115b	20 f7 0b	               jsr     putch
.115e	68		               pla
.115f	20 38 11	               jsr     putabin
.1162	28		               plp
.1163	60		               rts
.1164			putabinxy
.1164	20 17 0c	               jsr     gotoxy
.1167	20 38 11	               jsr     putabin
.116a	60		               rts
.116b			putabinfmtxy
.116b	20 17 0c	               jsr     gotoxy
.116e	20 57 11	               jsr     putabinfmt
.1171	60		               rts
.1172			atodec
.1172	20 ac 0e	               jsr  push
.1175	f8		               sed
.1176	aa		               tax
.1177	a0 00		               ldy  #$00
.1179	a9 00		               lda  #$00
.117b	18		nextbit        clc
.117c	69 01		               adc  #$01
.117e	90 01		               bcc  decx
.1180	c8		               iny
.1181	ca		decx           dex
.1182	d0 f7		               bne  nextbit
.1184	48		               pha
.1185	98		               tya
.1186	20 b6 10	               jsr  nib2hex
.1189	8d 76 10	               sta  adec
.118c	68		               pla
.118d	48		               pha
.118e	20 b6 10	               jsr  nib2hex
.1191	8d 78 10	               sta  adec+2
.1194	68		               pla
.1195	6a		               ror
.1196	6a		               ror
.1197	6a		               ror
.1198	6a		               ror
.1199	20 b6 10	               jsr  nib2hex
.119c	8d 77 10	               sta  adec+1
.119f	d8		               cld
.11a0	20 eb 0e	               jsr  pull
.11a3	60		               rts
>11a4	00 00 00	buffer         .byte     0,0,0
.11a7			putadec
.11a7	20 ac 0e	               jsr  push
.11aa	20 72 11	               jsr  atodec
.11ad	a2 76		               ldx  #<adec
.11af	a0 10		               ldy  #>adec+1
.11b1	20 fd 0b	               jsr  puts
.11b4	20 eb 0e	               jsr  pop
.11b7	60		               rts

;******  Return to file: p029ex06.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>11b8	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>11bc	00 00 00 00 00 00 00 00 00 0d 00 00
>11c8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>11cc	00 00 00 00 00 00 00 00 00 00 00 00
>11d8	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>11dc	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>11e8	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>11ec	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>11f8	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>11fc	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1208	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>120c	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1218	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>121c	00 00 00 00 00 00 00 00 00 00 00 00
>1228	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>122c	00 00 00 00 00 00 00 00 00 00 00 00
>1238	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>123c	00 00 00 00 00 00 00 00 00 00 00 00
>1248	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>124c	00 00 00 00 00 00 00 00 00 00 00 00
>1258	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>125c	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1268	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>126c	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1278	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>127c	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1288	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>128c	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1298	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>129c	00 00 00 00 00 00 00 00 00 00 00 00
>12a8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>12ac	00 00 00 00 00 00 00 00 00 00 00 00
.12b8			waitstop
.12b8	20 ac 0e	               jsr  push
.12bb	20 ed f6	wait           jsr  k_stop
.12be	d0 fb		               bne  wait
.12c0	20 eb 0e	               jsr  pop
.12c3	60		               rts
.12c4			anykey
.12c4	08		               php
.12c5	48		               pha
.12c6	a5 cb		nokey          lda 203
.12c8	c9 40		               cmp #64
.12ca	f0 fa		               beq nokey
.12cc	20 d2 12	               jsr releasekey
.12cf	68		               pla
.12d0	28		               plp
.12d1	60		               rts
.12d2			releasekey
.12d2	08		               php
.12d3	48		               pha
.12d4	a5 cb		keypressed     lda 203
.12d6	c9 40		               cmp #64
.12d8	d0 fa		               bne keypressed
.12da	68		               pla
.12db	28		               plp
.12dc	60		               rts
.12dd			getkey
.12dd	20 e4 ff	again          jsr  getin
.12e0	c9 00		               cmp  #0
.12e2	f0 f9		               beq  again
.12e4	60		               rts
.12e5			kbflushbuff
.12e5	08		               php
.12e6	48		               pha
.12e7	20 e4 ff	again          jsr  getin
.12ea	c9 00		               cmp  #0
.12ec	d0 f9		               bne  again
.12ee	68		               pla
.12ef	28		               plp
.12f0	60		               rts
.12f1			waitkey
.12f1	20 ac 0e	               jsr  push
.12f4	8d 42 13	               sta  thekey
.12f7	20 e4 ff	nope           jsr  getin
.12fa	20 d2 ff	               jsr  chrout
.12fd	cd 42 13	               cmp  thekey
.1300	d0 f5		               bne  nope
.1302	20 d2 ff	               jsr  chrout
.1305	20 eb 0e	               jsr  pop
.1308	60		               rts
.1309			waitspace
.1309	20 ac 0e	               jsr  push
.130c	a9 7f		wait           lda  #$7f  ;%01111111
.130e	8d 00 dc	               sta  $dc00
.1311	ad 01 dc	               lda  $dc01
.1314	29 10		               and  #$10  ;mask %00010000
.1316	d0 f4		               bne  wait
.1318	20 eb 0e	               jsr  pop
.131b			waitsstop
.131b	20 ac 0e	               jsr  push
.131e	20 ed f6	wait           jsr  k_stop  ;%01111111
.1321	d0 fb		               bne  wait
.1323	20 eb 0e	               jsr  pop
.1326			waitreturn
.1326	20 ac 0e	               jsr  push
.1329	ad 43 13	               lda  thecount
.132c	8d 00 04	               sta  scrnram
.132f	a9 02		               lda  #$02
.1331	8d 00 d8	               sta  colorram
.1334	20 e4 ff	nope           jsr  getin
.1337	c9 0d		nohex          cmp  #$0d
.1339	d0 f9		               bne  nope
.133b	ee 43 13	               inc  thecount
.133e	20 eb 0e	               jsr  pop
.1341	60		               rts
>1342	00		thekey         .byte   0
>1343	01		thecount       .byte   $01

;******  Return to file: p029ex06.asm


;******  End of listing

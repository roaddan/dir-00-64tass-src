
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L spritechar.txt -o spritechar.prg spritechar.asm
; Thu May 25 22:46:01 2023

;Offset	;Hex		;Source

;******  Processing input file: spritechar.asm

="20230331-212716"	                Version = "20230331-212716"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: spritechar.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: spritechar.asm

.080d			main
.080d	20 9c 40	                jsr scrmaninit
.0810	20 19 08	                jsr help
.0813	20 7f 44	                jsr anykey
.0816	4c 74 a4	                jmp b_warmstart
.0819			help
.0819	20 bd 40	                jsr cls
.081c	a2 a1		                ldx  #<line
.081e	a0 09		                ldy  #>line
.0820	20 d2 40	                jsr  puts
.0823	a2 47		                ldx  #<headera
.0825	a0 08		                ldy  #>headera
.0827	20 d2 40	                jsr  puts
.082a	a2 c9		                ldx  #<headerb
.082c	a0 08		                ldy  #>headerb
.082e	20 d2 40	                jsr  puts
.0831	a2 4d		                ldx  #<shortcuts
.0833	a0 09		                ldy  #>shortcuts
.0835	20 d2 40	                jsr  puts
.0838	a2 ca		                ldx  #<helptext
.083a	a0 09		                ldy  #>helptext
.083c	20 d2 40	                jsr  puts
.083f	a2 a1		                ldx  #<line
.0841	a0 09		                ldy  #>line
.0843	20 d2 40	                jsr  puts
.0846	60		                rts
.0847			headera
>0847	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>084b	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>085b	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>0869	0d		                .byte   $0d
>086a	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>086e	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>087e	cd cd cf c4 cf d2 c5 20 36 34
>0888	0d		                .byte   $0d
>0889	20 20 20 20	                .text          "       Book by Mark Greenshields."
>088d	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>089d	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08aa	0d		                .byte   $0d
>08ab	20 20 20 20	                .text          "          ISBN 0-7156-1899-7"
>08af	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 37 31 35
>08bf	36 2d 31 38 39 39 2d 37
>08c7	0d 00		                .byte   $0d,0
>08c9	20 20 20 20	headerb         .text          "            spritechar (p68)"
>08cd	20 20 20 20 20 20 20 20 53 50 52 49 54 45 43 48
>08dd	41 52 20 28 50 36 38 29
>08e5	0d		                .byte   $0d
>08e6	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>08ea	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>08fa	44 20 d4 45 4d 50 4c 45 54 4f 4e
>0905	0d		                .byte   $0d
>0906	20 20 20 20	                .text          "     programmed by Daniel Lafrance."
>090a	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>091a	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>0929	0d		                .byte   $0d
>092a	20 20 20 20	                .text   format("        Version: %s.",Version)
>092e	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>093e	33 30 33 33 31 2d 32 31 32 37 31 36 2e
>094b	0d 00		                .byte   $0d,0
>094d	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>0951	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>0961	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>0971	2d 2d 2d
>0974	0d		                .byte   $0d
>0975	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0979	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>0989	d3 d9 d3 20 32 30 37 33
>0991	0d		                .byte   $0d
>0992	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>0996	3d d3 d9 d3 31 36 35 37 33
>099f	0d 00		                .byte   $0d,0
>09a1	20 2d 2d 2d	line            .text          " --------------------------------------"
>09a5	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09b5	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09c5	2d 2d 2d
>09c8	0d 00		                .byte   $0d,0
>09ca	20 53 50 52	helptext        .text   format(" spritechar  : SYS%5d",spritechar)
>09ce	49 54 45 43 48 41 52 20 20 3a 20 d3 d9 d3 31 36
>09de	33 38 34
>09e1	0d 00		                .byte   $0d,0
.4000			spritechar
.4000	ad 00 d0	                lda vicsprt0x   ; $d000, 53248 Sprt 0 Horizontal position (X)
.4003	38		                sec
.4004	e9 18		                sbc #$18        ; 24
.4006	aa		                tax
.4007	ad 10 d0	                lda vicspxmsb   ; $D010, 53264 MSb for sprites hor. position.
.400a	c9 01		                cmp #$01
.400c	d0 03		                bne more
.400e	ae 00 d0	                ldx vicsprt0x   ; $d000, 53248 Sprt 0 Horizontal position (X)
.4011	ad 01 d0	more            lda vicsprt0y   ; $d001, 53249 Sprt 0 Vertical position (Y)
.4014	38		                sec
.4015	e9 3a		                sbc #$3a        ; 58
.4017	a8		                tay
.4018	8e 98 40	                stx x1store     ; x1
.401b	8c 9a 40	                sty y1store     ; y1
.401e	98		                tya
.401f	4a		                lsr a
.4020	4a		                lsr a
.4021	4a		                lsr a           ; y2=y1/8
.4022	18		                clc
.4023	69 01		                adc #$01
.4025	8d 9b 40	                sta y2store
.4028	8a		                txa
.4029	4a		                lsr a
.402a	4a		                lsr a
.402b	4a		                lsr a           ; x2=x1/8
.402c	8d 99 40	                sta x2store
.402f	ad 10 d0	                lda vicspxmsb   ; $D010, 53264 MSb for sprites hor. position.
.4032	c9 01		                cmp #$01
.4034	d0 09		                bne more1
.4036	ad 99 40	                lda x2store
.4039	18		                clc
.403a	69 1d		                adc #$1d        ; 29
.403c	8d 99 40	                sta x2store
.403f	ad 9b 40	more1           lda y2store
.4042	8d 96 40	                sta number1
.4045	a9 28		                lda #$28        ; 40
.4047	8d 97 40	                sta number2
.404a	20 79 40	                jsr multiply
.404d	ad 99 40	                lda x2store
.4050	6d 94 40	                adc result
.4053	8d 94 40	                sta result
.4056	ad 95 40	                lda result+1
.4059	69 00		                adc #$00
.405b	8d 95 40	                sta result+1
.405e	ad 95 40	                lda result+1
.4061	18		                clc
.4062	69 04		                adc #$04
.4064	8d 95 40	                sta result+1
.4067	ad 94 40	                lda result
.406a	85 fb		                sta zpage1
.406c	ad 95 40	                lda result+1
.406f	85 fc		                sta zpage1+1
.4071	a0 00		                ldy #$00
.4073	b1 fb		                lda ($fb),y
.4075	8d 3c 03	                sta tbuffer         ;$33c,828-1019 Cassette i/o buffer
.4078	60		                rts
.4079	a9 00		multiply        lda #$00
.407b	8d 94 40	                sta result
.407e	a2 08		                ldx #$08
.4080	4e 96 40	loop            lsr number1
.4083	90 04		                bcc noadd
.4085	18		                clc
.4086	6d 97 40	                adc number2
.4089	6a		noadd           ror a
.408a	6e 94 40	                ror result
.408d	ca		                dex
.408e	d0 f0		                bne loop
.4090	8d 95 40	                sta result+1
.4093	60		                rts
>4094	00 00		result          .word   $00
>4096	00		number1         .byte   $00
>4097	00		number2         .byte   $00
>4098	00		x1store         .byte   $00
>4099	00		x2store         .byte   $00
>409a	00		y1store         .byte   $00
>409b	00		y2store         .byte   $00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ; 97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.409c			libtart

;******  Return to file: spritechar.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: spritechar.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: spritechar.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.409c			scrmaninit
.409c	20 c3 41	               jsr  push
.409f	a9 06		               lda  #vbleu
.40a1	8d 21 d0	               sta  vicbackcol
.40a4	a9 05		               lda  #vvert
.40a6	8d 20 d0	               sta  vicbordcol
.40a9	a9 01		               lda  #vblanc
.40ab	8d 86 02	               sta  bascol
.40ae	ad 00 04	               lda  scrnram
.40b1	29 fd		               and  #%11111101
.40b3	8d 00 04	               sta  scrnram
.40b6	20 bd 40	               jsr  cls
.40b9	20 02 42	               jsr  pop
.40bc	60		               rts
.40bd			cls
.40bd	08		               php
.40be	48		               pha
.40bf	a9 93		               lda  #$93
.40c1	20 cc 40	               jsr  putch
.40c4	a9 0e		               lda  #$0e
.40c6	20 cc 40	               jsr  putch
.40c9	68		               pla
.40ca	28		               plp
.40cb	60		               rts
.40cc			putch
.40cc	08		               php
.40cd	20 d2 ff	               jsr  $ffd2
.40d0	28		               plp
.40d1	60		               rts
.40d2			puts
.40d2	20 c3 41	               jsr  push
.40d5	86 fb		               stx  zpage1
.40d7	84 fc		               sty  zpage1+1
.40d9	a0 00		               ldy  #0
.40db	b1 fb		next           lda  (zpage1),y
.40dd	f0 09		               beq  exit
.40df	20 cc 40	               jsr  putch
.40e2	20 ca 42	               jsr  inczp1
.40e5	4c db 40	               jmp  next
.40e8	20 02 42	exit           jsr  pop
.40eb	60		               rts
.40ec			gotoxy
.40ec	08		               php
.40ed	18		               clc
.40ee	8a		               txa
.40ef	48		               pha
.40f0	98		               tya
.40f1	aa		               tax
.40f2	68		               pla
.40f3	a8		               tay
.40f4	20 f0 ff	               jsr  kplot
.40f7	28		               plp
.40f8	60		               rts
.40f9			cursor
=$0286			bascol    =    $0286
.40f9	08		               php
.40fa	48		               pha
.40fb	90 12		               bcc  restore
.40fd	20 f0 ff	               jsr  kplot
.4100	8c 21 41	               sty  cx
.4103	8e 22 41	               stx  cy
.4106	ad 86 02	               lda  bascol
.4109	8d 23 41	               sta  bcol
.410c	4c 1e 41	               jmp  out
.410f	ae 22 41	restore        ldx  cy
.4112	ac 21 41	               ldy  cx
.4115	20 f0 ff	               jsr  kplot
.4118	ad 23 41	               lda  bcol
.411b	8d 86 02	               sta  bascol
.411e	68		out            pla
.411f	28		               plp
.4120	60		               rts
>4121	00		cx   .byte     $00
>4122	00		cy   .byte     $00
>4123	00		bcol .byte     $00
.4124			cursave
.4124	08		               php
.4125	38		               sec
.4126	20 f9 40	               jsr  cursor
.4129	28		               plp
.412a	60		               rts
.412b			curput
.412b	08		               php
.412c	18		               clc
.412d	20 f9 40	               jsr  cursor
.4130	28		               plp
.4131	60		               rts
.4132			putsxy
.4132	20 c3 41	               jsr  push
.4135	86 fb		               stx  zpage1
.4137	84 fc		               sty  zpage1+1
.4139	a0 00		               ldy  #$00
.413b	b1 fb		               lda  (zpage1),y
.413d	aa		               tax
.413e	20 ca 42	               jsr  inczp1
.4141	b1 fb		               lda  (zpage1),y
.4143	a8		               tay
.4144	20 ec 40	               jsr  gotoxy
.4147	20 ca 42	               jsr  inczp1
.414a	a6 fb		               ldx  zpage1
.414c	a4 fc		               ldy  zpage1+1
.414e	20 d2 40	               jsr  puts
.4151	20 02 42	               jsr  pop
.4154	60		               rts
>4155	00 00		straddr   .word     $00
>4157	00		px        .byte     $00
>4158	00		py        .byte     $00
>4159	00 00		zp1       .word     $00
.415b			putscxy
.415b	20 c3 41	               jsr  push
.415e	84 fc		               sty  zpage1+1
.4160	86 fb		               stx  zpage1
.4162	ad 86 02	               lda  bascol
.4165	8d 85 41	               sta  bc
.4168	a0 00		               ldy #$00
.416a	b1 fb		               lda  (zpage1),y
.416c	8d 86 02	               sta  bascol
.416f	20 ca 42	               jsr  inczp1
.4172	a6 fb		               ldx  zpage1
.4174	a4 fc		               ldy  zpage1+1
.4176	20 32 41	               jsr  putsxy
.4179	ad 85 41	               lda  bc
.417c	8d 86 02	               sta  bascol
.417f	20 02 42	               jsr  pop
.4182	60		               rts
>4183	00 00		straddr  .word      $00
>4185	00		bc       .byte      $00
>4186	00 00		zp1      .word      $00
.4188			putrahex
.4188	08		               php
.4189	48		               pha
.418a	20 d0 43	               jsr  a2hex
.418d	a9 7c		               lda  #<a2hexstr
.418f	a0 43		               ldy  #>a2hexstr
.4191	20 d2 40	               jsr  puts
.4194	68		               pla
.4195	28		               plp
.4196	60		               rts
.4197			kputrahexxy
.4197			bputrahexxy
.4197			putrahexxy
.4197	08		               php
.4198	20 d0 43	               jsr  a2hex
.419b	a9 79		               lda  #<a2hexpos
.419d	a0 43		               ldy  #>a2hexpos
.419f	20 32 41	               jsr  putsxy
.41a2	68		               pla
.41a3	28		               plp
.41a4	60		               rts
.41a5			putrahexcxy
.41a5	08		               php
.41a6	20 d0 43	               jsr  a2hex
.41a9	a9 79		               lda  #<a2hexpos
.41ab	a0 43		               ldy  #>a2hexpos
.41ad	20 5b 41	               jsr  putscxy
.41b0	68		               pla
.41b1	28		               plp
.41b2	60		               rts
.41b3			setinverse
.41b3	48		               pha
.41b4	a9 12		               lda  #$12
.41b6	20 d2 ff	               jsr  $ffd2
.41b9	68		               pla
.41ba	60		               rts
.41bb			clrinverse
.41bb	48		               pha
.41bc	a9 92		               lda  #$92
.41be	20 d2 ff	               jsr  $ffd2
.41c1	68		               pla
.41c2	60		               rts

;******  Return to file: spritechar.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.41c3			push
.41c3	08		          php            ; stack : flg, pcl, pch
.41c4	78		          sei
.41c5	8d ff 41	          sta  ra        ; save a
.41c8	68		          pla            ; stack : pcl, pch
.41c9	8d fe 41	          sta  rp        ; save rp
.41cc	68		          pla            ; stack : pch
.41cd	8d 00 42	          sta  pc        ; save pcl
.41d0	68		          pla            ; stack : -
.41d1	8d 01 42	          sta  pc+1      ; save pch
.41d4	a5 fb		          lda  zpage1    ; get zpage1 low byte
.41d6	48		          pha            ; stack : zp1l
.41d7	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.41d9	48		          pha            ; stack : zp1h, zp1l
.41da	a5 fd		          lda  zpage2    ; get zpage2 low byte
.41dc	48		          pha            ; stack : zp2l, zp1h, zp1l
.41dd	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.41df	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.41e0	ad fe 41	          lda  rp        ; get rp
.41e3	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.41e4	ad ff 41	          lda  ra        ; get a
.41e7	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.41e8	8a		          txa            ; get x
.41e9	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.41ea	98		          tya            ; get y
.41eb	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.41ec	ad 01 42	          lda  pc+1      ; get pch
.41ef	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.41f0	ad 00 42	          lda  pc        ; get pcl
.41f3	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.41f4	ad fe 41	          lda  rp        ; get rp
.41f7	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.41f8	ad ff 41	          lda  ra        ; get a
.41fb	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.41fc	58		          cli
.41fd	60		          rts
>41fe	00		rp        .byte     0
>41ff	00		ra        .byte     0
>4200	00 00		pc        .word     0
.4202			pull
.4202			pop
.4202	78		          sei
.4203	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.4204	8d 37 42	          sta  pc        ; save pcl
.4207	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.4208	8d 38 42	          sta  pc+1      ; save pch
.420b	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.420c	a8		          tay            ; set y
.420d	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.420e	aa		          tax            ; set x
.420f	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.4210	8d 36 42	          sta  ra        ; save a
.4213	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.4214	8d 35 42	          sta  rp        ; save rp
.4217	68		          pla            ; stack : zp2l, zp1h, zp1l
.4218	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.421a	68		          pla            ; stack : zp1h, zp1l
.421b	85 fd		          sta  zpage2    ; get zpage2 High byte
.421d	68		          pla            ; stack : zp1l
.421e	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.4220	68		          pla            ; stack :
.4221	85 fb		          sta  zpage1    ; get zpage1 High byte
.4223	ad 38 42	          lda  pc+1      ; get pch
.4226	48		          pha            ; stack : pch
.4227	ad 37 42	          lda  pc
.422a	48		          pha            ; stack : pcl, pch
.422b	ad 35 42	          lda  rp        ; get rp
.422e	48		          pha            ; stack : rp, pcl, pch
.422f	ad 36 42	          lda  ra        ; set ra
.4232	58		          cli
.4233	28		          plp            ; stack : pcl, pch
.4234	60		          rts
>4235	00		rp        .byte     0
>4236	00		ra        .byte     0
>4237	00 00		pc        .word     0

;******  Return to file: spritechar.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.4239			blkfill
.4239	20 c3 41	bf0            jsr  push
.423c	20 f7 42	               jsr  savezp1
.423f	84 fc		               sty  zpage1+1
.4241	a0 00		               ldy  #$00
.4243	84 fb		               sty  zpage1
.4245	91 fb		bf1            sta  (zpage1),y
.4247	c8		               iny
.4248	d0 fb		               bne  bf1
.424a	20 06 43	               jsr  restzp1
.424d	20 02 42	               jsr  pop
.4250	60		               rts
.4251			memfill
.4251	20 c3 41	               jsr  push
.4254	20 39 42	mf1            jsr  blkfill
.4257	c8		               iny
.4258	ca		               dex
.4259	d0 f9		               bne  mf1
.425b	20 02 42	               jsr  pop
.425e	60		               rts
.425f			memmove
.425f	20 c3 41	               jsr  push
.4262	ba		               tsx            ; On se crée un pointeur ...
.4263	8a		               txa
.4264	18		               clc
.4265	69 0b		               adc  #11
.4267	a8		               tay
.4268	a2 06		               ldx  #$06
.426a	b9 00 01	nextbyte       lda  $0100,y
.426d	99 b9 42	               sta  words,y
.4270	c8		               iny
.4271	ca		               dex
.4272	d0 f6		               bne  nextbyte
.4274	ad b9 42	               lda  s
.4277	8d 90 42	               sta  source+1
.427a	ad ba 42	               lda  s+1
.427d	8d 91 42	               sta  source+2
.4280	ad bb 42	               lda  d
.4283	8d 8d 42	               sta  destin+1
.4286	ad bc 42	               lda  d+1
.4289	8d 8e 42	               sta  destin+2
.428c	ad ff ff	destin         lda  $ffff
.428f	8d ff ff	source         sta  $ffff
.4292	ee 8d 42	               inc  destin+1
.4295	d0 03		               bne  src
.4297	ee 8e 42	               inc  destin+2
.429a	ee 90 42	src            inc  source+1
.429d	d0 03		               bne  cnt
.429f	ee 91 42	               inc  source+2
.42a2	ad bd 42	cnt            lda  compte
.42a5	d0 08		               bne  decit
.42a7	ad be 42	               lda  compte+1
.42aa	f0 09		               beq  fini
.42ac	ce be 42	               dec  compte+1
.42af	ce bd 42	decit          dec  compte
.42b2	4c 8c 42	               jmp  destin
.42b5	20 02 42	fini           jsr  pop
.42b8	60		               rts
.42b9			words
>42b9	00 00		s         .word     $0000
>42bb	00 00		d         .word     $0000
>42bd	00 00		compte    .word     $0000
.42bf			decword
.42bf	20 c3 41	               jsr  push
.42c2	86 fd		               stx  zpage2
.42c4	84 fe		               sty  zpage2+1
.42c6	20 02 42	               jsr  pop
.42c9	60		               rts
.42ca			inczp1
.42ca	08		               php
.42cb	e6 fb		               inc  zpage1
.42cd	d0 02		               bne  nopage
.42cf	e6 fc		               inc  zpage1+1
.42d1	28		nopage         plp
.42d2	60		               rts
.42d3			deczp1
.42d3	08		                php
.42d4	48		                pha
.42d5	c6 fb		                dec  zpage1
.42d7	d0 02		                bne  nopage
.42d9	c6 fc		                dec  zpage1+1
.42db	c6 fb		nopage          dec  zpage1
.42dd	68		                pla
.42de	28		                plp
.42df	60		                rts
.42e0			inczp2
.42e0	08		               php
.42e1	48		               pha
.42e2	e6 fd		               inc  zpage2
.42e4	d0 02		               bne  nopage
.42e6	e6 fe		               inc  zpage2+1
.42e8	68		nopage         pla
.42e9	28		               plp
.42ea	60		               rts
.42eb			deczp2
.42eb	08		               php
.42ec	48		               pha
.42ed	a5 fd		               lda  zpage2
.42ef	d0 02		               bne  nopage
.42f1	c6 fe		               dec  zpage2+1
.42f3	c6 fd		nopage         dec  zpage2
.42f5	28		               plp
.42f6	60		               rts
.42f7			savezp1
.42f7	08		               php
.42f8	48		               pha
.42f9	a5 fb		               lda  zpage1
.42fb	8d 73 43	               sta  zp1
.42fe	a5 fc		               lda  zpage1+1
.4300	8d 74 43	               sta  zp1+1
.4303	68		               pla
.4304	28		               plp
.4305	60		               rts
.4306			restzp1
.4306	08		               php
.4307	48		               pha
.4308	ad 73 43	               lda zp1
.430b	85 fb		               sta zpage1
.430d	ad 74 43	               lda zp1+1
.4310	85 fc		               sta zpage1+1
.4312	68		               pla
.4313	28		               plp
.4314	60		               rts
.4315			savezp2
.4315	08		         php
.4316	48		         pha
.4317	a5 fd		         lda zpage2
.4319	8d 75 43	         sta zp2
.431c	a5 fe		         lda zpage2+1
.431e	8d 76 43	         sta zp2+1
.4321	68		         pla
.4322	28		         plp
.4323	60		         rts
.4324			restzp2
.4324	08		                php
.4325	48		                pha
.4326	ad 75 43	                lda  zp2
.4329	85 fd		                sta  zpage2
.432b	ad 76 43	                lda  zp2+1
.432e	85 fe		                sta  zpage2+1
.4330	68		                pla
.4331	28		                plp
.4332	60		                rts
.4333			xy2addr
.4333	08		                php
.4334	48		                pha
.4335	8a		                txa
.4336	48		                pha
.4337	98		                tya
.4338	48		                pha
.4339	ad 6e 43	                lda     addr1+1
.433c	8d 70 43	                sta     addr2+1
.433f	ad 6d 43	                lda     addr1
.4342	8d 6f 43	                sta     addr2
.4345	c0 00		                cpy     #$00
.4347	f0 0f		                beq     addx
.4349	18		moreline        clc
.434a	6d 6c 43	                adc     ymult
.434d	90 03		                bcc     norepy
.434f	ee 70 43	                inc     addr2+1
.4352	8d 6f 43	norepy          sta     addr2
.4355	88		                dey
.4356	d0 f1		                bne     moreline
.4358	8a		addx            txa
.4359	18		                clc
.435a	6d 6f 43	                adc     addr2
.435d	90 03		                bcc     thatsit
.435f	ee 70 43	                inc     addr2+1
.4362	8d 6f 43	thatsit         sta     addr2
.4365	68		                pla
.4366	a8		                tay
.4367	68		                pla
.4368	aa		                tax
.4369	68		                pla
.436a	28		                plp
.436b	60		                rts
>436c	28		ymult          .byte     40
>436d	00 00		addr1          .word     $0000
>436f	00 00		addr2          .word     $0000
>4371	00 00		bytecnt        .word     $0000
>4373	00 00		zp1        .word   $0000
>4375	00 00		zp2        .word   $0000

;******  Return to file: spritechar.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>4377	01		a2hexcol       .byte     1              ; pour aputscxy
>4378	00		a2hexbkcol     .byte     %00000000
.4379			a2hexpos
>4379	00		a2hexpx        .byte     0              ; pour aputsxy
>437a	00		a2hexpy        .byte     0
>437b	24		a2hexprefix    .byte     "$"            ; pour aputs
>437c	00 00		a2hexstr       .word     $00
>437e	00 00		               .word     $00
>4380	00		               .byte     0              ; 0 end string
.4381			putahexfmtxy
.4381	20 c3 41	               jsr  push
.4384	20 d0 43	               jsr  a2hex
.4387	ae 79 43	               ldx  a2hexpx
.438a	ac 7a 43	               ldy  a2hexpy
.438d	20 ec 40	               jsr  gotoxy
.4390	a2 7b		               ldx  #<a2hexprefix
.4392	a0 43		               ldy  #>a2hexprefix
.4394	20 d2 40	               jsr  puts
.4397	20 02 42	               jsr  pop
.439a	60		               rts
.439b			putahexfmt
.439b	20 c3 41	               jsr  push
.439e	20 d0 43	               jsr  a2hex
.43a1	a2 7b		               ldx  #<a2hexprefix
.43a3	a0 43		               ldy  #>a2hexprefix
.43a5	20 d2 40	               jsr  puts
.43a8	20 02 42	               jsr  pop
.43ab	60		               rts
.43ac			putahex
.43ac	20 c3 41	               jsr  push
.43af	20 d0 43	               jsr  a2hex
.43b2	a2 7c		               ldx  #<a2hexstr
.43b4	a0 43		               ldy  #>a2hexstr
.43b6	20 d2 40	               jsr  puts
.43b9	20 02 42	               jsr  pop
.43bc	60		               rts
.43bd			nib2hex
.43bd	08		               php
.43be	29 0f		               and  #$0f
.43c0	f8		               sed
.43c1	18		               clc
.43c2	69 90		               adc  #$90
.43c4	69 40		               adc  #$40
.43c6	d8		               cld
.43c7	28		               plp
.43c8	60		               rts
.43c9			lsra4bits
.43c9	08		               php
.43ca	4a		               lsr
.43cb	4a		               lsr
.43cc	4a		               lsr
.43cd	4a		               lsr
.43ce	28		               plp
.43cf	60		               rts
.43d0			a2hex
.43d0	08		               php
.43d1	48		               pha
.43d2	48		               pha
.43d3	20 c9 43	               jsr  lsra4bits
.43d6	20 bd 43	               jsr  nib2hex
.43d9	8d 7c 43	               sta  a2hexstr
.43dc	68		               pla
.43dd	20 bd 43	               jsr  nib2hex
.43e0	8d 7d 43	               sta  a2hexstr+1
.43e3	a9 00		               lda  #$00                ; set end of string
.43e5	8d 7e 43	               sta  a2hexstr+2
.43e8	68		               pla
.43e9	28		               plp
.43ea	60		               rts
.43eb			xy2hex
.43eb	20 c3 41	               jsr  push
.43ee	20 d0 43	               jsr  a2hex
.43f1	8a		               txa
.43f2	48		               pha
.43f3	20 c9 43	               jsr  lsra4bits
.43f6	20 bd 43	               jsr  nib2hex
.43f9	8d 7c 43	               sta  a2hexstr
.43fc	68		               pla
.43fd	20 bd 43	               jsr  nib2hex
.4400	8d 7d 43	               sta  a2hexstr+1
.4403	98		               tya
.4404	48		               pha
.4405	20 c9 43	               jsr  lsra4bits
.4408	20 bd 43	               jsr  nib2hex
.440b	8d 7e 43	               sta  a2hexstr+2
.440e	68		               pla
.440f	20 bd 43	               jsr  nib2hex
.4412	8d 7f 43	               sta  a2hexstr+3
.4415	a9 00		               lda  #$00                ; 0 ended string
.4417	8d 80 43	               sta  a2hexstr+4
.441a	20 02 42	               jsr  pop
.441d			atobin
.441d	20 c3 41	               jsr     push
.4420	a2 08		               ldx     #8
.4422	a0 00		               ldy     #0
.4424	2a		nextbit        rol
.4425	48		               pha
.4426	69 00		               adc     #$00
.4428	29 01		               and     #$01
.442a	20 bd 43	               jsr     nib2hex
.442d	99 3e 44	               sta     abin,y
.4430	68		               pla
.4431	c8		               iny
.4432	ca		               dex
.4433	d0 ef		               bne     nextbit
.4435	a9 00		               lda     #0
.4437	99 3e 44	               sta     abin,y
.443a	20 02 42	               jsr     pull
.443d	60		               rts
>443e	30 30 30 30	abin           .null   "00000000"
>4442	30 30 30 30 00
.4447			putabin
.4447	20 1d 44	               jsr     atobin
.444a	20 c3 41	               jsr     push
.444d	a2 3e		               ldx     #<abin
.444f	a0 44		               ldy     #>abin
.4451	20 d2 40	               jsr     puts
.4454	20 02 42	               jsr     pop
.4457	60		               rts
.4458			putabinfmt
.4458	08		               php
.4459	48		               pha
.445a	a9 25		               lda     #"%"
.445c	20 cc 40	               jsr     putch
.445f	68		               pla
.4460	20 47 44	               jsr     putabin
.4463	28		               plp
.4464	60		               rts
.4465			putabinxy
.4465	20 ec 40	               jsr     gotoxy
.4468	20 47 44	               jsr     putabin
.446b	60		               rts
.446c			putabinfmtxy
.446c	20 ec 40	               jsr     gotoxy
.446f	20 58 44	               jsr     putabinfmt
.4472	60		               rts

;******  Return to file: spritechar.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

.4473			waitstop
.4473	20 c3 41	                jsr     push
.4476	20 ed f6	wait            jsr     k_stop
.4479	d0 fb		                bne     wait
.447b	20 02 42	                jsr     pop
.447e	60		                rts
.447f			anykey
.447f	08		                php
.4480	48		                pha
.4481	a5 cb		nokey           lda 203
.4483	c9 40		                cmp #64
.4485	f0 fa		                beq nokey
.4487	68		                pla
.4488	28		                plp
.4489	60		                rts
.448a			getkey
.448a	20 c3 41	                jsr     push
.448d	20 cf ff	again           jsr     chrin
.4490	4c 8d 44	                jmp     again
.4493	20 02 42	                jsr     pop
.4496	60		                rts
.4497			waitkey
.4497	20 c3 41	                jsr     push
.449a	8d af 44	                sta     thekey
.449d	20 e4 ff	nope            jsr     getin
.44a0	20 d2 ff	                jsr     chrout
.44a3	cd af 44	                cmp     thekey
.44a6	d0 f5		                bne     nope
.44a8	20 d2 ff	                jsr     chrout
.44ab	20 02 42	                jsr     pop
.44ae	60		                rts
>44af	00		thekey          .byte   0
.44b0			waitspace
.44b0	20 c3 41	                jsr     push
.44b3	a9 7f		wait            lda     #$7f  ;%01111111
.44b5	8d 00 dc	                sta     $dc00
.44b8	ad 01 dc	                lda     $dc01
.44bb	29 10		                and     #$10  ;mask %00010000
.44bd	d0 f4		                bne     wait
.44bf	20 02 42	                jsr     pop
.44c2			waitsstop
.44c2	20 c3 41	                jsr     push
.44c5	20 ed f6	wait            jsr     k_stop  ;%01111111
.44c8	d0 fb		                bne     wait
.44ca	20 02 42	                jsr     pop
.44cd			waitreturn
.44cd	20 c3 41	                jsr     push
.44d0	ad ec 44	                lda     thecount
.44d3	8d 00 04	                sta     scrnram
.44d6	a9 02		                lda     #$02
.44d8	8d 00 d8	                sta     colorram
.44db	20 e4 ff	nope            jsr     getin
.44de	20 d2 ff	                jsr     chrout
.44e1	c9 0d		                cmp     #$0d
.44e3	d0 f6		                bne     nope
.44e5	ee ec 44	                inc     thecount
.44e8	20 02 42	                jsr     pop
.44eb	60		                rts
>44ec	01		thecount        .byte   $01

;******  Return to file: spritechar.asm


;******  End of listing

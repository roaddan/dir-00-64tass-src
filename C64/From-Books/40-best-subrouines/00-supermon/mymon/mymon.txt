
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L mymon.txt -o mymon.prg mymon.asm
; Mon May 29 21:19:55 2023

;Offset	;Hex		;Source

;******  Processing input file: mymon.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: mymon.asm

.080d			main
.080d	a9 93		                lda #147
.080f	20 d2 ff	                jsr chrout
.0812	20 1a cd	                jsr greetsmall
.0815	60		                rts
=$c1			tmp0            = $c1               ; used to return input, often holds end address
=$c3			tmp2            = $c3               ; usually holds start address
=$90			satus           = $90               ; kernal i/o status word
=$b7			fnlen           = $b7               ; length of current filename
=$b9			sadd            = $b9               ; current secondary address (official name sa)
=$ba			fa              = $ba               ; current device number
=$bb			fnadr           = $bb               ; pointer to current filename
=$c6			ndx             = $c6               ; number of characters in keyboard buffer
=$0277			keyd            = $0277             ; keyboard buffer
=$0316			bkvec           = $0316             ; brk instruction vector (official name cbinv)
>0100			acmd            .fill 1             ; addressing command
>0101			length          .fill 1             ; length of operand
>0102			mnemw           .fill 3             ; 3 letter mnemonic buffer
>0105			savx            .fill 1             ; 1 byte temp storage, often to save x register
>0106			opcode          .fill 1             ; current opcode for assembler/disassembler
>0107			upflg           .fill 1             ; flag: count up (bit 7 clear) or down (bit 7 set)
>0108			digcnt          .fill 1             ; digit count
>0109			indig           .fill 1             ; numeric value of single digit
>010a			numbit          .fill 1             ; numeric base of input
>010b			stash           .fill 2             ; 2-byte temp storage
>010d			u0aa0           .fill 10            ; work buffer
=$0117			u0aae           =*                  ; end of work buffer
>0117			stage           .fill 30            ; staging buffer for filename, search, etc.
=$0135			estage          =*                  ; end of staging buffer
>0200			inbuff          .fill 40            ; 40-character input buffer
=$0228			endin           =*                  ; end of input buffer
>0228			pch             .fill 1             ; program counter high byte
>0229			pcl             .fill 1             ; program counter low byte
>022a			sr              .fill 1             ; status register
>022b			acc             .fill 1             ; accumulator
>022c			xr              .fill 1             ; x register
>022d			yr              .fill 1             ; y register
>022e			sp              .fill 1             ; stack pointer
>022f			store           .fill 2             ; 2-byte temp storage
>0231			chrpnt          .fill 1             ; current position in input buffer
>0232			savy            .fill 1             ; temp storage, often to save y register
>0233			u9f             .fill 1             ; index into assembler work buffer
=$ff90			setmsg          = $ff90             ; set kernel message control flag
=$ff93			second          = $ff93             ; set secondary address after listen
=$ff96			tksa            = $ff96             ; send secondary address after talk
=$ffb1			listen          = $ffb1             ; command serial bus device to listen
=$ffb4			talk            = $ffb4             ; command serial bus device to talk
=$ffba			setlfs          = $ffba             ; set logical file parameters
=$ffbd			setnam          = $ffbd             ; set filename
=$ffa5			acptr           = $ffa5             ; input byte from serial bus
=$ffa8			ciout           = $ffa8             ; output byte to serial bus
=$ffab			untlk           = $ffab             ; command serial bus device to untalk
=$ffae			unlsn           = $ffae             ; command serial bus device to unlisten
=$ffc6			chkin           = $ffc6             ; define input channel
=$ffcc			clrchn          = $ffcc             ; restore default devices
=$ffcf			input           = $ffcf             ; input a character (official name chrin)
=$ffd2			chrout          = $ffd2             ; output a character
=$ffd5			load            = $ffd5             ; load from device
=$ffd8			save            = $ffd8             ; save to device
=$ffe1			stop            = $ffe1             ; check the stop key
=$ffe4			getin           = $ffe4             ; get a character
=50000			org             = $c3e0 - 144
.c350	20 89 c3	super           jsr setcolors
.c353	20 25 cd	                jsr greeting
.c356	20 57 ca	                jsr crlf
.c359	a0 20		                ldy #msg4-msgbas    ; display "..sys "
.c35b	20 fe cc	                jsr sndmsg
.c35e	ad 9f cf	                lda supad           ; store entry point address in tmp0
.c361	85 c1		                sta tmp0
.c363	ad a0 cf	                lda supad+1
.c366	85 c2		                sta tmp0+1
.c368	20 88 cb	                jsr cvtdec          ; convert address to decimal
.c36b	a9 00		                lda #0
.c36d	a2 06		                ldx #6
.c36f	a0 03		                ldy #3
.c371	20 c2 cb	                jsr nmprnt          ; print entry point address
.c374	20 57 ca	                jsr crlf
.c377	ad 9d cf	                lda linkad          ; set brk vector
.c37a	8d 16 03	                sta bkvec
.c37d	ad 9e cf	                lda linkad+1
.c380	8d 17 03	                sta bkvec+1
.c383	a9 80		                lda #$80            ; disable kernel control messages
.c385	20 90 ff	                jsr setmsg          ; and enable error messages
.c388	00		                brk
.c389			setcolors
.c389	08		                php
.c38a	48		                pha
.c38b	a9 0b		                lda     #$0b ;#$05
.c38d	8d 21 d0	                sta     screen
.c390	a9 0c		                lda     #$0c ; - 8
.c392	8d 20 d0	                sta     border
.c395	a9 01		                lda     #$01
.c397	8d 86 02	                sta     texte
.c39a	a9 93		                lda     #147
.c39c	20 d2 ff	                jsr     $ffd2
.c39f	a9 13		                lda     #19
.c3a1	20 d2 ff	                jsr     $ffd2
.c3a4	68		                pla
.c3a5	28		                plp
.c3a6	60		                rts
=53281			screen  =       53281
=53280			border  =       53280
=646			texte   =       646
.c3a7	a2 05		break           ldx #$05            ; pull registers off the stack
.c3a9	68		bstack          pla                 ; order: y,x,a,sr,pcl,pch
.c3aa	9d 28 02	                sta pch,x           ; store in memory
.c3ad	ca		                dex
.c3ae	10 f9		                bpl bstack
.c3b0	d8		                cld                 ; disable bcd mode
.c3b1	ba		                tsx                 ; store stack pointer in memory
.c3b2	8e 2e 02	                stx sp
.c3b5	58		                cli                 ; enable interupts
.c3b6	a0 00		dsplyr          ldy #msg2-msgbas    ; display headers
.c3b8	20 eb cc	                jsr sndclr
.c3bb	a9 3b		                lda #$3b            ; prefix registers with "; " to allow editing
.c3bd	20 d2 ff	                jsr chrout
.c3c0	a9 20		                lda #$20
.c3c2	20 d2 ff	                jsr chrout
.c3c5	ad 28 02	                lda pch             ; print 2-byte program counter
.c3c8	20 70 ca	                jsr wrtwo
.c3cb	a0 01		                ldy #1              ; start 1 byte after pc high byte
.c3cd	b9 28 02	disj            lda pch,y           ; loop through rest of the registers
.c3d0	20 4c ca	                jsr wrbyte          ; print 1-byte register value
.c3d3	c8		                iny
.c3d4	c0 07		                cpy #7              ; there are a total of 5 registers to print
.c3d6	90 f5		                bcc disj
.c3d8	20 57 ca	strt            jsr crlf            ; new line
.c3db	a2 00		                ldx #0              ; point at start of input buffer
.c3dd	8e 31 02	                stx chrpnt
.c3e0	20 cf ff	smove           jsr input           ; chrin kernal call to input a character
.c3e3	9d 00 02	                sta inbuff,x        ; store in input buffer
.c3e6	e8		                inx
.c3e7	e0 28		                cpx #endin-inbuff   ; error if buffer is full
.c3e9	b0 1c		                bcs error
.c3eb	c9 0d		                cmp #$0d            ; keep reading until cr
.c3ed	d0 f1		                bne smove
.c3ef	a9 00		                lda #0              ; null-terminate input buffer
.c3f1	9d ff 01	                sta inbuff-1,x      ; (replacing the cr)
.c3f4	20 98 ca	st1             jsr getchr          ; get a character from the buffer
.c3f7	f0 df		                beq strt            ; start over if buffer is empty
.c3f9	c9 20		                cmp #$20            ; skip leading spaces
.c3fb	f0 f7		                beq st1
.c3fd	a2 16		s0              ldx #keytop-keyw    ; loop through valid command characters
.c3ff	dd 61 cf	s1              cmp keyw,x          ; see if input character matches
.c402	f0 0b		                beq s2              ; command matched, dispatch it
.c404	ca		                dex                 ; no match, check next command
.c405	10 f8		                bpl s1              ; keep trying until we've checked them all
.c407	a0 1e		error           ldy #msg3-msgbas    ; display "?" to indicate error and go to new line
.c409	20 fe cc	                jsr sndmsg
.c40c	4c d8 c3	                jmp strt            ; back to main loop
.c40f	e0 13		s2              cpx #$13            ; last 3 commands in table are load/save/validate
.c411	b0 12		                bcs lsv             ;   which are handled by the same subroutine
.c413	e0 0f		                cpx #$0f            ; next 4 commands are base conversions
.c415	b0 14		                bcs cnvlnk          ;   which are handled by the same subroutine
.c417	8a		                txa                 ; remaining commands dispatch through vector table
.c418	0a		                asl a               ; multiply index of command by 2
.c419	aa		                tax                 ;   since table contains 2-byte addresses
.c41a	bd 78 cf	                lda kaddr+1,x       ; push address from vector table onto stack
.c41d	48		                pha                 ;   so that the rts from getpar will jump there
.c41e	bd 77 cf	                lda kaddr,x
.c421	48		                pha
.c422	4c 79 c9	                jmp getpar          ; get the first parameter for the command
.c425	8d 32 02	lsv             sta savy            ; handle load/save/validate
.c428	4c fb c5	                jmp ld
.c42b	4c 3d cb	cnvlnk          jmp convrt          ; handle base conversion
.c42e	20 25 cd	exit            jsr greeting
.c431	6c 02 a0	                jmp ($a002)         ; jump to warm-start vector to reinitialize basic
.c434	b0 08		dsplym          bcs dspm11          ; start from previous end addr if no address given
.c436	20 b2 ca	                jsr copy12          ; save start address in tmp2
.c439	20 79 c9	                jsr getpar          ; get end address in tmp0
.c43c	90 06		                bcc dsmnew          ; did user specify one?
.c43e	a9 0b		dspm11          lda #$0b            ; if not, show 12 lines by default
.c440	85 c1		                sta tmp0
.c442	d0 0e		                bne dspbyt          ; always true, but bne uses 1 byte less than jmp
.c444	20 bb ca	dsmnew          jsr sub12           ; end addr given, calc bytes between start and end
.c447	90 1e		                bcc merror          ; error if start is after end
.c449	a2 03		                ldx #3              ; divide by 8 (shift right 3 times)
.c44b	46 c2		dspm01          lsr tmp0+1
.c44d	66 c1		                ror tmp0
.c44f	ca		                dex
.c450	d0 f9		                bne dspm01
.c452	20 e1 ff	dspbyt          jsr stop            ; check for stop key
.c455	f0 0d		                beq dspmx           ; exit early if pressed
.c457	20 d7 c4	                jsr dispmem         ; display 1 line containing 8 bytes
.c45a	a9 08		                lda #8              ; increase start address by 8 bytes
.c45c	20 f1 ca	                jsr bumpad2
.c45f	20 c9 ca	                jsr suba1           ; decrement line counter
.c462	b0 ee		                bcs dspbyt          ; show another line until it's < 0
.c464	4c d8 c3	dspmx           jmp strt            ; back to main loop
.c467	4c 07 c4	merror          jmp error           ; handle error
.c46a	20 09 cb	altr            jsr copy1p          ; store first parameter in pc
.c46d	a0 00		                ldy #0              ; init counter
.c46f	20 79 c9	altr1           jsr getpar          ; get value for next register
.c472	b0 0a		                bcs altrx           ; exit early if no more values given
.c474	a5 c1		                lda tmp0            ; store in memory, offset from sr
.c476	99 2a 02	                sta sr,y            ; these locations will be transferred to the
.c479	c8		                iny                 ;   actual registers before exiting the monitor
.c47a	c0 05		                cpy #$05            ; have we updated all 5 yet?
.c47c	90 f1		                bcc altr1           ; if not, get next
.c47e	4c d8 c3	altrx           jmp strt            ; back to main loop
.c481	b0 13		altm            bcs altmx           ; exit if no parameter provided
.c483	20 b2 ca	                jsr copy12          ; copy parameter to start address
.c486	a0 00		                ldy #0
.c488	20 79 c9	altm1           jsr getpar          ; get value for next byte of memory
.c48b	b0 09		                bcs altmx           ; if none given, exit early
.c48d	a5 c1		                lda tmp0            ; poke value into memory at start address + y
.c48f	91 c3		                sta (tmp2),y
.c491	c8		                iny                 ; next byte
.c492	c0 08		                cpy #8              ; have we read 8 bytes yet?
.c494	90 f2		                bcc altm1           ; if not, read the next one
.c496	a9 91		altmx           lda #$91            ; move cursor up
.c498	20 d2 ff	                jsr chrout
.c49b	20 d7 c4	                jsr dispmem         ; re-display line to make ascii match hex
.c49e	4c d8 c3	                jmp strt            ; back to main loop
.c4a1	ae 2e 02	goto            ldx sp              ; load stack pointer from memory
.c4a4	9a		                txs                 ; save in sp register
.c4a5	20 09 cb	goto2           jsr copy1p          ; copy provided address to pc
.c4a8	78		                sei                 ; disable interrupts
.c4a9	ad 28 02	                lda pch             ; push pc high byte on stack
.c4ac	48		                pha
.c4ad	ad 29 02	                lda pcl             ; push pc low byte on stack
.c4b0	48		                pha
.c4b1	ad 2a 02	                lda sr              ; push status byte on stack
.c4b4	48		                pha
.c4b5	ad 2b 02	                lda acc             ; load accumulator from memory
.c4b8	ae 2c 02	                ldx xr              ; load x from memory
.c4bb	ac 2d 02	                ldy yr              ; load y from memory
.c4be	40		                rti                 ; return from interrupt (pops pc and sr)
.c4bf	ae 2e 02	jsub            ldx sp              ; load stack pointer from memory
.c4c2	9a		                txs                 ; save value in sp register
.c4c3	20 a5 c4	                jsr goto2           ; same as goto command
.c4c6	8c 2d 02	                sty yr              ; save y to memory
.c4c9	8e 2c 02	                stx xr              ; save x to memory
.c4cc	8d 2b 02	                sta acc             ; save accumulator to memory
.c4cf	08		                php                 ; push processor status on stack
.c4d0	68		                pla                 ; pull processor status into a
.c4d1	8d 2a 02	                sta sr              ; save processor status to memory
.c4d4	4c b6 c3	                jmp dsplyr          ; display registers
.c4d7	20 57 ca	dispmem         jsr crlf            ; new line
.c4da	a9 3e		                lda #">"            ; prefix > so memory can be edited in place
.c4dc	20 d2 ff	                jsr chrout
.c4df	20 42 ca	                jsr showad          ; show address of first byte on line
.c4e2	a0 00		                ldy #0
.c4e4	f0 03		                beq dmemgo          ; showad already printed a space after the address
.c4e6	20 4f ca	dmemlp          jsr space           ; print space between bytes
.c4e9	b1 c3		dmemgo          lda (tmp2),y        ; load byte from start address + y
.c4eb	20 70 ca	                jsr wrtwo           ; output hex digits for byte
.c4ee	c8		                iny                 ; next byte
.c4ef	c0 08		                cpy #8              ; have we output 8 bytes yet?
.c4f1	90 f3		                bcc dmemlp          ; if not, output next byte
.c4f3	a0 28		                ldy #msg5-msgbas    ; if so, output : and turn on reverse video
.c4f5	20 fe cc	                jsr sndmsg          ;   before displaying ascii representation
.c4f8	a0 00		                ldy #0              ; back to first byte in line
.c4fa	b1 c3		dchar           lda (tmp2),y        ; load byte at start address + y
.c4fc	aa		                tax                 ; stash in x
.c4fd	29 bf		                and #$bf            ; clear 6th bit
.c4ff	c9 22		                cmp #$22            ; is it a quote ("")?
.c501	f0 08		                beq ddot            ; if so, print . instead
.c503	8a		                txa                 ; if not, restore character
.c504	29 7f		                and #$7f            ; clear top bit
.c506	c9 20		                cmp #$20            ; is it a printable character (>= $20)?
.c508	8a		                txa                 ; restore character
.c509	b0 02		                bcs dchrok          ; if printable, output character
.c50b	a9 2e		ddot            lda #$2e            ; if not, output '.' instaed
.c50d	20 d2 ff	dchrok          jsr chrout
.c510	c8		                iny                 ; next byte
.c511	c0 08		                cpy #8              ; have we output 8 bytes yet?
.c513	90 e5		                bcc dchar           ; if not, output next byte
.c515	60		                rts
.c516	a9 00		compar          lda #0              ; bit 7 clear signals compare
>c518	2c		                .byte $2c           ; absolute bit opcode consumes next word (lda #$80)
.c519	a9 80		trans           lda #$80            ; bit 7 set signals transfer
.c51b	8d 32 02	                sta savy            ; save compare/transfer flag in savy
.c51e	a9 00		                lda #0              ; assume we're counting up (bit 7 clear)
.c520	8d 07 01	                sta upflg           ; save direction flag
.c523	20 16 cb	                jsr getdif          ; get two addresses and calculate difference
.c526	b0 05		                bcs terror          ; carry set indicates error
.c528	20 79 c9	                jsr getpar          ; get destination address in tmp0
.c52b	90 03		                bcc tokay           ; carry set indicates error
.c52d	4c 07 c4	terror          jmp error           ; handle error
.c530	2c 32 02	tokay           bit savy            ; transfer or compare?
.c533	10 27		                bpl compar1         ; high bit clear indicates compare
.c535	a5 c3		                lda tmp2            ; if it's a transfer, we must take steps
.c537	c5 c1		                cmp tmp0            ;   to avoid overwriting the source bytes before
.c539	a5 c4		                lda tmp2+1          ;   they have been transferred
.c53b	e5 c2		                sbc tmp0+1          ; compare source (tmp2) to destination (tmp0)
.c53d	b0 1d		                bcs compar1         ; and count up if source is before than desitnation
.c53f	ad 2f 02	                lda store           ; otherwise, start at end and count down...
.c542	65 c1		                adc tmp0            ; add length (store) to desintation (tmp0)
.c544	85 c1		                sta tmp0            ; to calculate end of destination
.c546	ad 30 02	                lda store+1
.c549	65 c2		                adc tmp0+1
.c54b	85 c2		                sta tmp0+1
.c54d	a2 01		                ldx #1              ; change source pointer from beginning to end
.c54f	bd 0b 01	tdown           lda stash,x         ; tmp2 = source end (stash)
.c552	95 c3		                sta tmp2,x
.c554	ca		                dex
.c555	10 f8		                bpl tdown
.c557	a9 80		                lda #$80            ; high bit set in upflg means count down
.c559	8d 07 01	                sta upflg
.c55c	20 57 ca	compar1         jsr crlf            ; new line
.c55f	a0 00		                ldy #0              ; no offset from pointer
.c561	20 e1 ff	tcloop          jsr stop            ; check for stop key
.c564	f0 31		                beq texit           ; exit if pressed
.c566	b1 c3		                lda (tmp2),y        ; load byte from source
.c568	2c 32 02	                bit savy            ; transfer or compare?
.c56b	10 02		                bpl compar2         ; skip store if comparing
.c56d	91 c1		                sta (tmp0),y        ; otherwise, store in destination
.c56f	d1 c1		compar2         cmp (tmp0),y        ; compare to destination
.c571	f0 03		                beq tmvad           ; don't show address if equal
.c573	20 42 ca	                jsr showad          ; show address
.c576	2c 07 01	tmvad           bit upflg           ; counting up or down?
.c579	30 0b		                bmi tdecad          ; high bit set means we're counting down
.c57b	e6 c1		                inc tmp0            ; increment destination low byte
.c57d	d0 10		                bne tincok
.c57f	e6 c2		                inc tmp0+1          ; carry to high byte if necessary
.c581	d0 0c		                bne tincok
.c583	4c 07 c4	                jmp error           ; error if high byte overflowed
.c586	20 c9 ca	tdecad          jsr suba1           ; decrement destination (tmp0)
.c589	20 fb ca	                jsr sub21           ; decrement source (tmp2)
.c58c	4c 92 c5	                jmp tmor
.c58f	20 ef ca	tincok          jsr adda2           ; increment source (tmp2)
.c592	20 dd ca	tmor            jsr sub13           ; decrement length
.c595	b0 ca		                bcs tcloop          ; loop until length is 0
.c597	4c d8 c3	texit           jmp strt            ; back to main loop
.c59a	20 16 cb	hunt            jsr getdif          ; get start (tmp2) and end (tmp0) of haystack
.c59d	b0 59		                bcs herror          ; carry indicates error
.c59f	a0 00		                ldy #0
.c5a1	20 98 ca	                jsr getchr          ; get a single character
.c5a4	c9 27		                cmp #"'"            ; is it a single quote?
.c5a6	d0 16		                bne nostrh          ; if not, input needle as hex bytes
.c5a8	20 98 ca	                jsr getchr          ; if so, input needle as string
.c5ab	c9 00		                cmp #0
.c5ad	f0 49		                beq herror          ; error if needle isn't at least one byte
.c5af	99 17 01	hpar            sta stage,y         ; save char in staging area
.c5b2	c8		                iny
.c5b3	20 98 ca	                jsr getchr          ; get another char
.c5b6	f0 18		                beq htgo            ; if it's null start searching
.c5b8	c0 1e		                cpy #estage-stage   ; have we filled up the needle staging area?
.c5ba	d0 f3		                bne hpar            ; if not, get another character
.c5bc	f0 12		                beq htgo            ; if so, start searching
.c5be	20 76 c9	nostrh          jsr rdpar           ; read hex bytes if string not indicated
.c5c1	a5 c1		hlp             lda tmp0            ; save last read byte in staging area
.c5c3	99 17 01	                sta stage,y
.c5c6	c8		                iny                 ; get another hex byte
.c5c7	20 79 c9	                jsr getpar
.c5ca	b0 04		                bcs htgo            ; if there is none, start searching
.c5cc	c0 1e		                cpy #estage-stage   ; have we filled up the needle staging area?
.c5ce	d0 f1		                bne hlp             ; if not, get another byte
.c5d0	8c 32 02	htgo            sty savy            ; save length of needle
.c5d3	20 57 ca	                jsr crlf            ; new line
.c5d6	a0 00		hscan           ldy #0
.c5d8	b1 c3		hlp3            lda (tmp2),y        ; get first byte in haystack
.c5da	d9 17 01	                cmp stage,y         ; compare it to first byte of needle
.c5dd	d0 09		                bne hnoft           ; if it doesn't match, we haven't found anything
.c5df	c8		                iny                 ; if it does, check the next byte
.c5e0	cc 32 02	                cpy savy            ; have we reached the end of the needle?
.c5e3	d0 f3		                bne hlp3            ; if not, keep comparing bytes
.c5e5	20 42 ca	                jsr showad          ; match found, show address
.c5e8	20 e1 ff	hnoft           jsr stop            ; no match, check for stop key
.c5eb	f0 08		                beq hexit           ; exit prematurely if pressed
.c5ed	20 ef ca	                jsr adda2           ; increment haystack pointer
.c5f0	20 dd ca	                jsr sub13           ; decrement haystack length
.c5f3	b0 e1		                bcs hscan           ; still more haystack? keep searching
.c5f5	4c d8 c3	hexit           jmp strt            ; back to main loop
.c5f8	4c 07 c4	herror          jmp error           ; handle error
.c5fb	a0 01		ld              ldy #1              ; default to reading from tape, device #1
.c5fd	84 ba		                sty fa
.c5ff	84 b9		                sty sadd            ; default to secondary address #1
.c601	88		                dey
.c602	84 b7		                sty fnlen           ; start with an empty filename
.c604	84 90		                sty satus           ; clear status
.c606	a9 01		                lda #>stage         ; set filename pointer to staging buffer
.c608	85 bc		                sta fnadr+1
.c60a	a9 17		                lda #<stage
.c60c	85 bb		                sta fnadr
.c60e	20 98 ca	l1              jsr getchr          ; get a character
.c611	f0 59		                beq lshort          ; no filename given, try load or verify from tape
.c613	c9 20		                cmp #$20            ; skip leading spaces
.c615	f0 f7		                beq l1
.c617	c9 22		                cmp #$22            ; error if filename doesn't start with a quote
.c619	d0 16		                bne lerror
.c61b	ae 31 02	                ldx chrpnt          ; load current char pointer into index reg
.c61e	bd 00 02	l3              lda inbuff,x        ; load current char from buffer to accumulator
.c621	f0 49		                beq lshort          ; no filename given, try load or verify from tape
.c623	e8		                inx                 ; next char
.c624	c9 22		                cmp #$22            ; is it a quote?
.c626	f0 0c		                beq l8              ; if so, we've reached the end of the filename
.c628	91 bb		                sta (fnadr),y       ; if not, save character in filename buffer
.c62a	e6 b7		                inc fnlen           ; increment filename length
.c62c	c8		                iny
.c62d	c0 1e		                cpy #estage-stage   ; check whether buffer is full
.c62f	90 ed		                bcc l3              ; if not, get another character
.c631	4c 07 c4	lerror          jmp error           ; if so, handle error
.c634	8e 31 02	l8              stx chrpnt          ; set character pointer to the current index
.c637	20 98 ca	                jsr getchr          ; eat separator between filename and device #
.c63a	f0 30		                beq lshort          ; no separator, try to load or verify from tape
.c63c	20 79 c9	                jsr getpar          ; get device number
.c63f	b0 2b		                bcs lshort          ; no device # given, try load or verify from tape
.c641	a5 c1		                lda tmp0            ; set device number for kernal routines
.c643	85 ba		                sta fa
.c645	20 79 c9	                jsr getpar          ; get start address for load or save in tmp0
.c648	b0 22		                bcs lshort          ; no start address, try to load or verify
.c64a	20 b2 ca	                jsr copy12          ; transfer start address to tmp2
.c64d	20 79 c9	                jsr getpar          ; get end address for save in tmp0
.c650	b0 3d		                bcs ldaddr          ; no end address, try to load to given start addr
.c652	20 57 ca	                jsr crlf            ; new line
.c655	a6 c1		                ldx tmp0            ; put low byte of end address in x
.c657	a4 c2		                ldy tmp0+1          ; put high byte of end address in y
.c659	ad 32 02	                lda savy            ; confirm that we're doing a save
.c65c	c9 53		                cmp #"s"
.c65e	d0 d1		                bne lerror          ; if not, error due to too many params
.c660	a9 00		                lda #0
.c662	85 b9		                sta sadd            ; set secondary address to 0
.c664	a9 c3		                lda #tmp2           ; put addr of zero-page pointer to data in a
.c666	20 d8 ff	                jsr save            ; call kernal save routine
.c669	4c d8 c3	lsvxit          jmp strt            ; back to mainloop
.c66c	ad 32 02	lshort          lda savy            ; check which command we received
.c66f	c9 56		                cmp #"v"
.c671	f0 06		                beq loadit          ; we're doing a verify so don't set a to 0
.c673	c9 4c		                cmp #"l"
.c675	d0 ba		                bne lerror          ; error due to not enough params for save
.c677	a9 00		                lda #0              ; 0 in a signals load, anything else is verify
.c679	20 d5 ff	loadit          jsr load            ; call kernal load routine
.c67c	a5 90		                lda satus           ; get i/o status
.c67e	29 10		                and #$10            ; check bit 5 for checksum error
.c680	f0 e7		                beq lsvxit          ; if no error go back to mainloop
.c682	ad 32 02	                lda savy            ; ?? not sure what these two lines are for...
.c685	f0 aa		                beq lerror          ; ?? savy will never be 0, so why check?
.c687	a0 2a		                ldy #msg6-msgbas    ; display "error" if checksum didn't match
.c689	20 fe cc	                jsr sndmsg
.c68c	4c d8 c3	                jmp strt            ; back to mainloop
.c68f	a6 c3		ldaddr          ldx tmp2            ; load address low byte in x
.c691	a4 c4		                ldy tmp2+1          ; load address high byte in y
.c693	a9 00		                lda #0              ; 0 in a signals load
.c695	85 b9		                sta sadd            ; secondary addr 0 means load to addr in x and y
.c697	f0 d3		                beq lshort          ; execute load
.c699	20 16 cb	fill            jsr getdif          ; start in tmp2, end in stash, length in store
.c69c	b0 59		                bcs aerror          ; carry set indicates error
.c69e	20 79 c9	                jsr getpar          ; get value to fill in tmp0
.c6a1	b0 54		                bcs aerror          ; carry set indicates error
.c6a3	20 98 ca	                jsr getchr          ; any more characters triggers an error
.c6a6	d0 4f		                bne aerror
.c6a8	a0 00		                ldy #0              ; no offset
.c6aa	a5 c1		fillp           lda tmp0            ; load value to fill in accumulator
.c6ac	91 c3		                sta (tmp2),y        ; store fill value in current address
.c6ae	20 e1 ff	                jsr stop            ; check for stop key
.c6b1	f0 08		                beq fstart          ; if pressed, back to main loop
.c6b3	20 ef ca	                jsr adda2           ; increment address
.c6b6	20 dd ca	                jsr sub13           ; decrement length
.c6b9	b0 ef		                bcs fillp           ; keep going until length reaches 0
.c6bb	4c d8 c3	fstart          jmp strt            ; back to main loop
.c6be	b0 37		assem           bcs aerror          ; error if no address given
.c6c0	20 b2 ca	                jsr copy12          ; copy address to tmp2
.c6c3	a2 00		aget1           ldx #0
.c6c5	8e 0e 01	                stx u0aa0+1         ; clear byte that mnemonic gets shifted into
.c6c8	8e 08 01	                stx digcnt          ; clear digit count
.c6cb	20 98 ca	aget2           jsr getchr          ; get a char
.c6ce	d0 04		                bne almor           ; proceed if the character isn't null
.c6d0	e0 00		                cpx #0              ; it's null, have read a mnemonic yet?
.c6d2	f0 e7		                beq fstart          ; if not, silently go back to main loop
.c6d4	c9 20		almor           cmp #$20            ; skip leading spaces
.c6d6	f0 eb		                beq aget1
.c6d8	9d 02 01	                sta mnemw,x         ; put character in mnemonic buffer
.c6db	e8		                inx
.c6dc	e0 03		                cpx #3              ; have we read 3 characters yet?
.c6de	d0 eb		                bne aget2           ; if not, get next character
.c6e0	ca		asqeez          dex                 ; move to previous char
.c6e1	30 17		                bmi aoprnd          ; if we're done with mnemonic, look for operand
.c6e3	bd 02 01	                lda mnemw,x         ; get current character
.c6e6	38		                sec                 ; pack 3-letter mnemonic into 2 bytes (15 bits)
.c6e7	e9 3f		                sbc #$3f            ; subtract $3f from ascii code so a-z = 2 to 27
.c6e9	a0 05		                ldy #$05            ; letters now fit in 5 bits; shift them out
.c6eb	4a		ashift          lsr a               ;   into the first two bytes of the inst buffer
.c6ec	6e 0e 01	                ror u0aa0+1         ; catch the low bit from accumulator in right byte
.c6ef	6e 0d 01	                ror u0aa0           ; catch the low bit from right byte in left byte
.c6f2	88		                dey                 ; count down bits
.c6f3	d0 f6		                bne ashift          ; keep looping until we reach zero
.c6f5	f0 e9		                beq asqeez          ; unconditional branch to handle next char
.c6f7	4c 07 c4	aerror          jmp error           ; handle error
.c6fa	a2 02		aoprnd          ldx #2              ; mnemonic is in first two bytes so start at third
.c6fc	ad 08 01	ascan           lda digcnt          ; did we find address digits last time?
.c6ff	d0 2d		                bne aform1          ; if so, look for mode chars
.c701	20 a1 c9	                jsr rdval           ; otherwise, look for an address
.c704	f0 25		                beq aform0          ; we didn't find an address, look for characters
.c706	b0 ef		                bcs aerror          ; carry flag indicates error
.c708	a9 24		                lda #"$"
.c70a	9d 0d 01	                sta u0aa0,x         ; prefix addresses with $
.c70d	e8		                inx                 ; next position in buffer
.c70e	a0 04		                ldy #4              ; non-zero page addresses are 4 hex digits
.c710	ad 0a 01	                lda numbit          ; check numeric base in which address was given
.c713	c9 08		                cmp #8              ; for addresses given in octal or binary
.c715	90 05		                bcc aaddr           ;   use only the high byte to determine page
.c717	cc 08 01	                cpy digcnt          ; for decimal or hex, force non-zero page addressing
.c71a	f0 06		                beq afill0          ;   if address was given with four digits or more
.c71c	a5 c2		aaddr           lda tmp0+1          ; check whether high byte of address is zero
.c71e	d0 02		                bne afill0          ; non-zero high byte means we're not in zero page
.c720	a0 02		                ldy #2              ; if it's in zero page, addr is 2 hex digits
.c722	a9 30		afill0          lda #$30            ; use 0 as placeholder for each hex digit in addr
.c724	9d 0d 01	afil0l          sta u0aa0,x         ; put placeholder in assembly buffer
.c727	e8		                inx                 ; move to next byte in buffer
.c728	88		                dey                 ; decrement number of remaining digits
.c729	d0 f9		                bne afil0l          ; loop until all digits have been placed
.c72b	ce 31 02	aform0          dec chrpnt          ; non-numeric input; back 1 char to see what it was
.c72e	20 98 ca	aform1          jsr getchr          ; get next character
.c731	f0 0e		                beq aescan          ; if there is none, we're finished scanning
.c733	c9 20		                cmp #$20            ; skip spaces
.c735	f0 c5		                beq ascan
.c737	9d 0d 01	                sta u0aa0,x         ; store character in assembly buffer
.c73a	e8		                inx                 ; move to next byte in buffer
.c73b	e0 0a		                cpx #u0aae-u0aa0    ; is instruction buffer full?
.c73d	90 bd		                bcc ascan           ; if not, keep scanning
.c73f	b0 b6		                bcs aerror          ; error if buffer is full
.c741	8e 2f 02	aescan          stx store           ; save number of bytes in assembly buffer
.c744	a2 00		                ldx #0              ; start at opcode $00 and check every one until
.c746	8e 06 01	                stx opcode          ;   we find one that matches our criteria
.c749	a2 00		atryop          ldx #0
.c74b	8e 33 02	                stx u9f             ; reset index into work buffer
.c74e	ad 06 01	                lda opcode
.c751	20 08 c9	                jsr instxx          ; look up instruction format for current opcode
.c754	ae 00 01	                ldx acmd            ; save addressing command for later
.c757	8e 30 02	                stx store+1
.c75a	aa		                tax                 ; use current opcode as index
.c75b	bd 1d cf	                lda mnemr,x         ; check right byte of compressed mnemonic
.c75e	20 2f c8	                jsr chekop
.c761	bd dd ce	                lda mneml,x         ; check left byte of compressed mnemonic
.c764	20 2f c8	                jsr chekop
.c767	a2 06		                ldx #6              ; 6 possible characters to check against operand
.c769	e0 03		tryit           cpx #3              ; are we on character 3?
.c76b	d0 14		                bne trymod          ; if not, check operand characters
.c76d	ac 01 01	                ldy length          ; otherwise, check number of bytes in operand
.c770	f0 0f		                beq trymod          ; if zero, check operand characters
.c772	ad 00 01	tryad           lda acmd            ; otherwise, look for an address
.c775	c9 e8		                cmp #$e8            ; special case for relative addressing mode
.c777	a9 30		                lda #$30            ; '0' is the digit placeholder we're looking for
.c779	b0 1e		                bcs try4b           ; acmd >= $e8 indicates relative addressing
.c77b	20 2c c8	                jsr chek2b          ; acmd < $e8 indicates normal addressing
.c77e	88		                dey                 ; consume byte
.c77f	d0 f1		                bne tryad           ; check for 2 more digits if not zero-page
.c781	0e 00 01	trymod          asl acmd            ; shift a bit out of the addressing command
.c784	90 0e		                bcc ub4df           ; if it's zero, skip checking current character
.c786	bd d0 ce	                lda char1-1,x
.c789	20 2f c8	                jsr chekop          ; otherwise first character against operand
.c78c	bd d6 ce	                lda char2-1,x       ; get second character to check
.c78f	f0 03		                beq ub4df           ; if it's zero, skip checking it
.c791	20 2f c8	                jsr chekop          ; otherwise check it against hte operand
.c794	ca		ub4df           dex                 ; move to next character
.c795	d0 d2		                bne tryit           ; repeat tests
.c797	f0 06		                beq trybran
.c799	20 2c c8	try4b           jsr chek2b          ; check for 4 digit address placeholder
.c79c	20 2c c8	                jsr chek2b          ;   by checking for 2 digits twice
.c79f	ad 2f 02	trybran         lda store           ; get number of bytes in assembly buffer
.c7a2	cd 33 02	                cmp u9f             ; more bytes left to check?
.c7a5	f0 03		                beq abran           ; if not, we've found a match; build instruction
.c7a7	4c 3c c8	                jmp bumpop          ; if so, this opcode doesn't match; try the next
.c7aa	ac 01 01	abran           ldy length          ; get number of bytes in operand
.c7ad	f0 32		                beq a1byte          ; if none, just output the opcode
.c7af	ad 30 02	                lda store+1         ; otherwise check the address format
.c7b2	c9 9d		                cmp #$9d            ; is it a relative branch?
.c7b4	d0 23		                bne objput          ; if not, skip relative branch calculation
.c7b6	a5 c1		                lda tmp0            ; calculate the difference between the current
.c7b8	e5 c3		                sbc tmp2            ;   address and the branch target (low byte)
.c7ba	aa		                tax                 ; save it in x
.c7bb	a5 c2		                lda tmp0+1          ; borrow from the high byte if necessary
.c7bd	e5 c4		                sbc tmp2+1
.c7bf	90 08		                bcc abback          ; if result is negative, we're branching back
.c7c1	d0 66		                bne serror          ; high bytes must be equal when branching forward
.c7c3	e0 82		                cpx #$82            ; difference between low bytes must be < 130
.c7c5	b0 62		                bcs serror          ; error if the address is too far away
.c7c7	90 08		                bcc abranx
.c7c9	a8		abback          tay                 ; when branching backward high byte of target must
.c7ca	c8		                iny                 ;   be 1 less than high byte of current address
.c7cb	d0 5c		                bne serror          ; if not, it's too far away
.c7cd	e0 82		                cpx #$82            ; difference between low bytes must be < 130
.c7cf	90 58		                bcc serror          ; if not, it's too far away
.c7d1	ca		abranx          dex                 ; adjust branch target relative to the
.c7d2	ca		                dex                 ;   instruction following this one
.c7d3	8a		                txa
.c7d4	ac 01 01	                ldy length          ; load length of operand
.c7d7	d0 03		                bne objp2           ; don't use the absolute address
.c7d9	b9 c0 00	objput          lda tmp0-1,y        ; get the operand
.c7dc	91 c3		objp2           sta (tmp2),y        ; store it after the opcode
.c7de	88		                dey
.c7df	d0 f8		                bne objput          ; copy the other byte of operand if there is one
.c7e1	ad 06 01	a1byte          lda opcode          ; put opcode into instruction
.c7e4	91 c3		                sta (tmp2),y
.c7e6	20 57 ca	                jsr crlf            ; carriage return
.c7e9	a9 91		                lda #$91            ; back up one line
.c7eb	20 d2 ff	                jsr chrout
.c7ee	a0 30		                ldy #msg7-msgbas    ; "a " prefix
.c7f0	20 eb cc	                jsr sndclr          ; clear line
.c7f3	20 8a c8	                jsr dislin          ; disassemble the instruction we just assembled
.c7f6	ee 01 01	                inc length          ; instruction length = operand length + 1 byte
.c7f9	ad 01 01	                lda length          ;   for the opcode
.c7fc	20 f1 ca	                jsr bumpad2         ; increment address by length of instruction
.c7ff	a9 41		                lda #"a"            ; stuff keyboard buffer with next assemble command:
.c801	8d 77 02	                sta keyd            ;   "a xxxx " where xxxx is the next address
.c804	a9 20		                lda #" "            ;   after the previously assembled instruction
.c806	8d 78 02	                sta keyd+1
.c809	8d 7d 02	                sta keyd+6
.c80c	a5 c4		                lda tmp2+1          ; convert high byte of next address to hex
.c80e	20 80 ca	                jsr asctwo
.c811	8d 79 02	                sta keyd+2          ; put it in the keyboard buffer
.c814	8e 7a 02	                stx keyd+3
.c817	a5 c3		                lda tmp2            ; convert low byte of next address to hex
.c819	20 80 ca	                jsr asctwo
.c81c	8d 7b 02	                sta keyd+4          ; put it in the keyboard buffer
.c81f	8e 7c 02	                stx keyd+5
.c822	a9 07		                lda #7              ; set number of chars in keyboard buffer
.c824	85 c6		                sta ndx
.c826	4c d8 c3	                jmp strt            ; back to main loop
.c829	4c 07 c4	serror          jmp error           ; handle error
.c82c	20 2f c8	chek2b          jsr chekop          ; check two bytes against value in accumulator
.c82f	8e 05 01	chekop          stx savx            ; stash x
.c832	ae 33 02	                ldx u9f             ; get current index into work buffer
.c835	dd 0d 01	                cmp u0aa0,x         ; check whether this opcode matches the buffer
.c838	f0 0a		                beq opok            ;   matching so far, check the next criteria
.c83a	68		                pla                 ; didn't match, so throw away return address
.c83b	68		                pla                 ;   on the stack because we're starting over
.c83c	ee 06 01	bumpop          inc opcode          ; check the next opcode
.c83f	f0 e8		                beq serror          ; error if we tried every opcode and none fit
.c841	4c 49 c7	                jmp atryop          ; start over with new opcode
.c844	ee 33 02	opok            inc u9f             ; opcode matches so far; check the next criteria
.c847	ae 05 01	                ldx savx            ; restore x
.c84a	60		                rts
.c84b	b0 08		disass          bcs dis0ad          ; if no address was given, start from last address
.c84d	20 b2 ca	                jsr copy12          ; copy start address to tmp2
.c850	20 79 c9	                jsr getpar          ; get end address in tmp0
.c853	90 06		                bcc dis2ad          ; if one was given, skip default
.c855	a9 14		dis0ad          lda #$14            ; disassemble 14 bytes by default
.c857	85 c1		                sta tmp0            ; store length in tmp0
.c859	d0 05		                bne disgo           ; skip length calculation
.c85b	20 bb ca	dis2ad          jsr sub12           ; calculate number of bytes between start and end
.c85e	90 1f		                bcc derror          ; error if end address is before start address
.c860	20 e5 cc	disgo           jsr cline           ; clear the current line
.c863	20 e1 ff	                jsr stop            ; check for stop key
.c866	f0 14		                beq disexit         ; exit early if pressed
.c868	20 82 c8	                jsr dsout1          ; output disassembly prefix ". "
.c86b	ee 01 01	                inc length
.c86e	ad 01 01	                lda length          ; add length of last instruction to start address
.c871	20 f1 ca	                jsr bumpad2
.c874	ad 01 01	                lda length          ; subtract length of last inst from end address
.c877	20 cb ca	                jsr suba2
.c87a	b0 e4		                bcs disgo
.c87c	4c d8 c3	disexit         jmp strt            ; back to mainloop
.c87f	4c 07 c4	derror          jmp error
.c882	a9 2e		dsout1          lda #"."            ; output ". " prefix to allow edit and reassemble
.c884	20 d2 ff	                jsr chrout
.c887	20 4f ca	                jsr space
.c88a	20 42 ca	dislin          jsr showad          ; show the address of the instruction
.c88d	20 4f ca	                jsr space           ; insert a space
.c890	a0 00		                ldy #0              ; no offset
.c892	b1 c3		                lda (tmp2),y        ; load operand of current instruction
.c894	20 08 c9	                jsr instxx          ; get mnemonic and addressing mode for opcode
.c897	48		                pha                 ; save index into mnemonic table
.c898	ae 01 01	                ldx length          ; get length of operand
.c89b	e8		                inx                 ; add 1 byte for opcode
.c89c	ca		dsbyt           dex                 ; decrement index
.c89d	10 0e		                bpl dshex           ; show hex for byte being disassembled
.c89f	8c 32 02	                sty savy            ; save index
.c8a2	a0 32		                ldy #msg8-msgbas    ; skip 3 spaces
.c8a4	20 fe cc	                jsr sndmsg
.c8a7	ac 32 02	                ldy savy            ; restore index
.c8aa	4c b2 c8	                jmp nxbyt
.c8ad	b1 c3		dshex           lda (tmp2),y        ; show hex for byte
.c8af	20 4c ca	                jsr wrbyte
.c8b2	c8		nxbyt           iny                 ; next byte
.c8b3	c0 03		                cpy #3              ; have we output 3 bytes yet?
.c8b5	90 e5		                bcc dsbyt           ; if not, loop
.c8b7	68		                pla                 ; restore index into mnemonic table
.c8b8	a2 03		                ldx #3              ; 3 letters in mnemonic
.c8ba	20 50 c9	                jsr propxx          ; print mnemonic
.c8bd	a2 06		                ldx #6              ; 6 possible address mode character combos
.c8bf	e0 03		pradr1          cpx #3              ; have we checked the third combo yet?
.c8c1	d0 16		                bne pradr3          ; if so, output the leading characters
.c8c3	ac 01 01	                ldy length          ; get the length of the operand
.c8c6	f0 11		                beq pradr3          ; if it's zero, there's no operand to print
.c8c8	ad 00 01	pradr2          lda acmd            ; otherwise, get the addressing mode
.c8cb	c9 e8		                cmp #$e8            ; check for relative addressing
.c8cd	08		                php                 ; save result of check
.c8ce	b1 c3		                lda (tmp2),y        ; get the operand
.c8d0	28		                plp                 ; restore result of check
.c8d1	b0 1d		                bcs relad           ; handle a relative address
.c8d3	20 70 ca	                jsr wrtwo           ; output digits from address
.c8d6	88		                dey
.c8d7	d0 ef		                bne pradr2          ; repeat for next byte of operand, if there is one
.c8d9	0e 00 01	pradr3          asl acmd            ; check whether addr mode uses the current char
.c8dc	90 0e		                bcc pradr4          ; if not, skip it
.c8de	bd d0 ce	                lda char1-1,x       ; look up the first char in the table
.c8e1	20 d2 ff	                jsr chrout          ; print first char
.c8e4	bd d6 ce	                lda char2-1,x       ; look up the second char in the table
.c8e7	f0 03		                beq pradr4          ; if there's no second character, skip it
.c8e9	20 d2 ff	                jsr chrout          ; print second char
.c8ec	ca		pradr4          dex                 ; next potential address mode character
.c8ed	d0 d0		                bne pradr1          ; loop if we haven't checked them all yet
.c8ef	60		                rts                 ; back to caller
.c8f0	20 fc c8	relad           jsr ub64d           ; calculate absolute address from relative
.c8f3	18		                clc
.c8f4	69 01		                adc #1              ; adjust address relative to next instruction
.c8f6	d0 01		                bne relend          ; don't increment high byte unless we overflowed
.c8f8	e8		                inx                 ; increment high byte
.c8f9	4c 46 ca	relend          jmp wraddr          ; print address
.c8fc	a6 c4		ub64d           ldx tmp2+1          ; get high byte of current address
.c8fe	a8		                tay                 ; is relative address positive or negative?
.c8ff	10 01		                bpl relc2           ; if positive, leave high byte alone
.c901	ca		                dex                 ; if negative, decrement high byte
.c902	65 c3		relc2           adc tmp2            ; add relative address to low byte
.c904	90 01		                bcc relc3           ; if there's no carry, we're done
.c906	e8		                inx                 ; if there's a carry, increment the high byte
.c907	60		relc3           rts
.c908	a8		instxx          tay                 ; stash opcode in accumulator in y for later
.c909	4a		                lsr a               ; is opcode even or odd?
.c90a	90 0b		                bcc ieven
.c90c	4a		                lsr a
.c90d	b0 17		                bcs err             ; invalid opcodes xxxxxx11
.c90f	c9 22		                cmp #$22
.c911	f0 13		                beq err             ; invalid opcode 10001001
.c913	29 07		                and #$07            ; mask bits to 10000xxx
.c915	09 80		                ora #$80
.c917	4a		ieven           lsr a               ; lsb determines whether to use left/right nybble
.c918	aa		                tax                 ; get format index using remaining high bytes
.c919	bd 7f ce	                lda mode,x
.c91c	b0 04		                bcs rtmode          ; look at left or right nybble based on carry bit
.c91e	4a		                lsr a               ; if carry = 0, use left nybble
.c91f	4a		                lsr a
.c920	4a		                lsr a
.c921	4a		                lsr a
.c922	29 0f		rtmode          and #$0f            ; if carry = 1, use right nybble
.c924	d0 04		                bne getfmt
.c926	a0 80		err             ldy #$80            ; substitute 10000000 for invalid opcodes
.c928	a9 00		                lda #0
.c92a	aa		getfmt          tax
.c92b	bd c3 ce	                lda mode2,x         ; lookup operand format using selected nybble
.c92e	8d 00 01	                sta acmd            ; save for later use
.c931	29 03		                and #$03            ; lower 2 bits indicate number of bytes in operand
.c933	8d 01 01	                sta length
.c936	98		                tya                 ; restore original opcode
.c937	29 8f		                and #$8f            ; mask bits to x000xxxx
.c939	aa		                tax                 ; save it
.c93a	98		                tya                 ; restore original opcode
.c93b	a0 03		                ldy #3
.c93d	e0 8a		                cpx #$8a            ; check if opcode = 1xxx1010
.c93f	f0 0b		                beq gtfm4
.c941	4a		gtfm2           lsr a               ; transform opcode into index for mnemonic table
.c942	90 08		                bcc gtfm4
.c944	4a		                lsr a               ; opcodes transformed as follows:
.c945	4a		gtfm3           lsr a               ; 1xxx1010->00101xxx
.c946	09 20		                ora #$20            ; xxxyyy01->00111xxx
.c948	88		                dey                 ; xxxyyy10->00111xxx
.c949	d0 fa		                bne gtfm3           ; xxxyy100->00110xxx
.c94b	c8		                iny                 ; xxxxx000->000xxxxx
.c94c	88		gtfm4           dey
.c94d	d0 f2		                bne gtfm2
.c94f	60		                rts
.c950	a8		propxx          tay                 ; use index in accumulator to look up mnemonic
.c951	b9 dd ce	                lda mneml,y         ;   and place a temporary copy in store
.c954	8d 2f 02	                sta store
.c957	b9 1d cf	                lda mnemr,y
.c95a	8d 30 02	                sta store+1
.c95d	a9 00		prmn1           lda #0              ; clear accumulator
.c95f	a0 05		                ldy #$05            ; shift 5 times
.c961	0e 30 02	prmn2           asl store+1         ; shift right byte
.c964	2e 2f 02	                rol store           ; rotate bits from right byte into left byte
.c967	2a		                rol a               ; rotate bits from left byte into accumulator
.c968	88		                dey                 ; next bit
.c969	d0 f6		                bne prmn2           ; loop until all bits shifted
.c96b	69 3f		                adc #$3f            ; calculate ascii code for letter by adding to '?'
.c96d	20 d2 ff	                jsr chrout          ; output letter
.c970	ca		                dex                 ; next letter
.c971	d0 ea		                bne prmn1           ; loop until all 3 letters are output
.c973	4c 4f ca	                jmp space           ; output space
.c976	ce 31 02	rdpar           dec chrpnt          ; back up one char
.c979	20 a1 c9	getpar          jsr rdval           ; read the value
.c97c	b0 17		                bcs gterr           ; carry set indicates error
.c97e	20 95 ca	                jsr gotchr          ; check previous character
.c981	d0 0a		                bne ckterm          ; if it's not null, check if it's a valid separator
.c983	ce 31 02	                dec chrpnt          ; back up one char
.c986	ad 08 01	                lda digcnt          ; get number of digits read
.c989	d0 11		                bne getgot          ; found some digits
.c98b	f0 0d		                beq gtnil           ; didn't find any digits
.c98d	c9 20		ckterm          cmp #$20            ; space or comma are valid separators
.c98f	f0 0b		                beq getgot          ; anything else is an error
.c991	c9 2c		                cmp #","
.c993	f0 07		                beq getgot
.c995	68		gterr           pla                 ; encountered error
.c996	68		                pla                 ; get rid of command vector pushed on stack
.c997	4c 07 c4	                jmp error           ; handle error
.c99a	38		gtnil           sec                 ; set carry to indicate no parameter found
>c99b	24		                .byte $24           ; bit zp opcode consumes next byte (clc)
.c99c	18		getgot          clc                 ; clear carry to indicate paremeter returned
.c99d	ad 08 01	                lda digcnt          ; return number of digits in a
.c9a0	60		                rts                 ; return to address pushed from vector table
.c9a1	a9 00		rdval           lda #0              ; clear temp
.c9a3	85 c1		                sta tmp0
.c9a5	85 c2		                sta tmp0+1
.c9a7	8d 08 01	                sta digcnt          ; clear digit counter
.c9aa	8a		                txa                 ; save x and y
.c9ab	48		                pha
.c9ac	98		                tya
.c9ad	48		                pha
.c9ae	20 98 ca	rdvmor          jsr getchr          ; get next character from input buffer
.c9b1	f0 1e		                beq rdnilk          ; null at end of buffer
.c9b3	c9 20		                cmp #$20            ; skip spaces
.c9b5	f0 f7		                beq rdvmor
.c9b7	a2 03		                ldx #3              ; check numeric base [$+&%]
.c9b9	dd 70 cf	gnmode          cmp hikey,x
.c9bc	f0 07		                beq gotmod          ; got a match, set up base
.c9be	ca		                dex
.c9bf	10 f8		                bpl gnmode          ; check next base
.c9c1	e8		                inx                 ; default to hex
.c9c2	ce 31 02	                dec chrpnt          ; back up one character
.c9c5	bc 95 cf	gotmod          ldy modtab,x        ; get base value
.c9c8	bd 99 cf	                lda lentab,x        ; get bits per digit
.c9cb	8d 0a 01	                sta numbit          ; store bits per digit
.c9ce	20 98 ca	nudig           jsr getchr          ; get next char in a
.c9d1	f0 63		rdnilk          beq rdnil           ; end of number if no more characters
.c9d3	38		                sec
.c9d4	e9 30		                sbc #$30            ; subtract ascii value of 0 to get numeric value
.c9d6	90 5e		                bcc rdnil           ; end of number if character was less than 0
.c9d8	c9 0a		                cmp #$0a
.c9da	90 06		                bcc digmor          ; not a hex digit if less than a
.c9dc	e9 07		                sbc #$07            ; 7 chars between ascii 9 and a, so subtract 7
.c9de	c9 10		                cmp #$10            ; end of number if char is greater than f
.c9e0	b0 54		                bcs rdnil
.c9e2	8d 09 01	digmor          sta indig           ; store the digit
.c9e5	cc 09 01	                cpy indig           ; compare base with the digit
.c9e8	90 4a		                bcc rderr           ; error if the digit >= the base
.c9ea	f0 48		                beq rderr
.c9ec	ee 08 01	                inc digcnt          ; increment the number of digits
.c9ef	c0 0a		                cpy #10
.c9f1	d0 0a		                bne nodecm          ; skip the next part if not using base 10
.c9f3	a2 01		                ldx #1
.c9f5	b5 c1		declp1          lda tmp0,x          ; stash the previous 16-bit value for later use
.c9f7	9d 0b 01	                sta stash,x
.c9fa	ca		                dex
.c9fb	10 f8		                bpl declp1
.c9fd	ae 0a 01	nodecm          ldx numbit          ; number of bits to shift
.ca00	06 c1		times2          asl tmp0            ; shift 16-bit value by specified number of bits
.ca02	26 c2		                rol tmp0+1
.ca04	b0 2e		                bcs rderr           ; error if we overflowed 16 bits
.ca06	ca		                dex
.ca07	d0 f7		                bne times2          ; shift remaining bits
.ca09	c0 0a		                cpy #10
.ca0b	d0 18		                bne nodec2          ; skip the next part if not using base 10
.ca0d	0e 0b 01	                asl stash           ; shift the previous 16-bit value one bit left
.ca10	2e 0c 01	                rol stash+1
.ca13	b0 1f		                bcs rderr           ; error if we overflowed 16 bits
.ca15	ad 0b 01	                lda stash           ; add shifted previous value to current value
.ca18	65 c1		                adc tmp0
.ca1a	85 c1		                sta tmp0
.ca1c	ad 0c 01	                lda stash+1
.ca1f	65 c2		                adc tmp0+1
.ca21	85 c2		                sta tmp0+1
.ca23	b0 0f		                bcs rderr           ; error if we overflowed 16 bits
.ca25	18		nodec2          clc
.ca26	ad 09 01	                lda indig           ; load current digit
.ca29	65 c1		                adc tmp0            ; add current digit to low byte
.ca2b	85 c1		                sta tmp0            ; and store result back in low byte
.ca2d	8a		                txa                 ; a=0
.ca2e	65 c2		                adc tmp0+1          ; add carry to high byte
.ca30	85 c2		                sta tmp0+1          ; and store result back in high byte
.ca32	90 9a		                bcc nudig           ; get next digit if we didn't overflow
.ca34	38		rderr           sec                 ; set carry to indicate error
>ca35	24		                .byte $24           ; bit zp opcode consumes next byte (clc)
.ca36	18		rdnil           clc                 ; clear carry to indicate success
.ca37	8c 0a 01	                sty numbit          ; save base of number
.ca3a	68		                pla                 ; restore x and y
.ca3b	a8		                tay
.ca3c	68		                pla
.ca3d	aa		                tax
.ca3e	ad 08 01	                lda digcnt          ; return number of digits in a
.ca41	60		                rts
.ca42	a5 c3		showad          lda tmp2
.ca44	a6 c4		                ldx tmp2+1
.ca46	48		wraddr          pha                 ; save low byte
.ca47	8a		                txa                 ; put high byte in a
.ca48	20 70 ca	                jsr wrtwo           ; output high byte
.ca4b	68		                pla                 ; restore low byte
.ca4c	20 70 ca	wrbyte          jsr wrtwo           ; output byte in a
.ca4f	a9 20		space           lda #$20            ; output space
.ca51	d0 0f		                bne flip
.ca53	c9 0d		chout           cmp #$0d            ; output char with special handling of cr
.ca55	d0 0b		                bne flip
.ca57	a9 0d		crlf            lda #$0d            ; load cr in a
.ca59	24 13		                bit $13             ; check default channel
.ca5b	10 05		                bpl flip            ; if high bit is clear output cr only
.ca5d	20 d2 ff	                jsr chrout          ; otherwise output cr+lf
.ca60	a9 0a		                lda #$0a            ; output lf
.ca62	4c d2 ff	flip            jmp chrout
.ca65	20 57 ca	fresh           jsr crlf            ; output cr
.ca68	a9 20		                lda #$20            ; load space in a
.ca6a	20 d2 ff	                jsr chrout
.ca6d	4c ee cc	                jmp snclr
.ca70	8e 05 01	wrtwo           stx savx            ; save x
.ca73	20 80 ca	                jsr asctwo          ; get hex chars for byte in x (lower) and a (upper)
.ca76	20 d2 ff	                jsr chrout          ; output upper nybble
.ca79	8a		                txa                 ; transfer lower to a
.ca7a	ae 05 01	                ldx savx            ; restore x
.ca7d	4c d2 ff	                jmp chrout          ; output lower nybble
.ca80	48		asctwo          pha                 ; save byte
.ca81	20 8a ca	                jsr ascii           ; do low nybble
.ca84	aa		                tax                 ; save in x
.ca85	68		                pla                 ; restore byte
.ca86	4a		                lsr a               ; shift upper nybble down
.ca87	4a		                lsr a
.ca88	4a		                lsr a
.ca89	4a		                lsr a
.ca8a	29 0f		ascii           and #$0f            ; clear upper nibble
.ca8c	c9 0a		                cmp #$0a            ; if less than a, skip next step
.ca8e	90 02		                bcc asc1
.ca90	69 06		                adc #6              ; skip ascii chars between 9 and a
.ca92	69 30		asc1            adc #$30            ; add ascii char 0 to value
.ca94	60		                rts
.ca95	ce 31 02	gotchr          dec chrpnt
.ca98	8e 05 01	getchr          stx savx
.ca9b	ae 31 02	                ldx chrpnt          ; get pointer to next char
.ca9e	bd 00 02	                lda inbuff,x        ; load next char in a
.caa1	f0 06		                beq nochar          ; null, :, or ? signal end of buffer
.caa3	c9 3a		                cmp #":"
.caa5	f0 02		                beq nochar
.caa7	c9 3f		                cmp #"?"
.caa9	08		nochar          php
.caaa	ee 31 02	                inc chrpnt          ; next char
.caad	ae 05 01	                ldx savx
.cab0	28		                plp                 ; z flag will signal last character
.cab1	60		                rts
.cab2	a5 c1		copy12          lda tmp0            ; low byte
.cab4	85 c3		                sta tmp2
.cab6	a5 c2		                lda tmp0+1          ; high byte
.cab8	85 c4		                sta tmp2+1
.caba	60		                rts
.cabb	38		sub12           sec
.cabc	a5 c1		                lda tmp0            ; subtract low byte
.cabe	e5 c3		                sbc tmp2
.cac0	85 c1		                sta tmp0
.cac2	a5 c2		                lda tmp0+1
.cac4	e5 c4		                sbc tmp2+1          ; subtract high byte
.cac6	85 c2		                sta tmp0+1
.cac8	60		                rts
.cac9	a9 01		suba1           lda #1              ; shortcut to decrement by 1
.cacb	8d 05 01	suba2           sta savx            ; subtrahend in accumulator
.cace	38		                sec
.cacf	a5 c1		                lda tmp0            ; minuend in low byte
.cad1	ed 05 01	                sbc savx
.cad4	85 c1		                sta tmp0
.cad6	a5 c2		                lda tmp0+1          ; borrow from high byte
.cad8	e9 00		                sbc #0
.cada	85 c2		                sta tmp0+1
.cadc	60		                rts
.cadd	38		sub13           sec
.cade	ad 2f 02	                lda store
.cae1	e9 01		                sbc #1              ; decrement low byte
.cae3	8d 2f 02	                sta store
.cae6	ad 30 02	                lda store+1
.cae9	e9 00		                sbc #0              ; borrow from high byte
.caeb	8d 30 02	                sta store+1
.caee	60		                rts
.caef	a9 01		adda2           lda #1              ; shortcut to increment by 1
.caf1	18		bumpad2         clc
.caf2	65 c3		                adc tmp2            ; add value in accumulator to low byte
.caf4	85 c3		                sta tmp2
.caf6	90 02		                bcc bumpex
.caf8	e6 c4		                inc tmp2+1          ; carry to high byte
.cafa	60		bumpex          rts
.cafb	38		sub21           sec
.cafc	a5 c3		                lda tmp2            ; decrement low byte
.cafe	e9 01		                sbc #1
.cb00	85 c3		                sta tmp2
.cb02	a5 c4		                lda tmp2+1          ; borrow from high byte
.cb04	e9 00		                sbc #0
.cb06	85 c4		                sta tmp2+1
.cb08	60		                rts
.cb09	b0 0a		copy1p          bcs cpy1px          ; do nothing if parameter is empty
.cb0b	a5 c1		                lda tmp0            ; copy low byte
.cb0d	a4 c2		                ldy tmp0+1          ; copy high byte
.cb0f	8d 29 02	                sta pcl
.cb12	8c 28 02	                sty pch
.cb15	60		cpy1px          rts
.cb16	b0 23		getdif          bcs gdifx           ; exit with error if no parameter given
.cb18	20 b2 ca	                jsr copy12          ; save start address in tmp2
.cb1b	20 79 c9	                jsr getpar          ; get end address in tmp0
.cb1e	b0 1b		                bcs gdifx           ; exit with error if no parameter given
.cb20	a5 c1		                lda tmp0            ; save end address in stash
.cb22	8d 0b 01	                sta stash
.cb25	a5 c2		                lda tmp0+1
.cb27	8d 0c 01	                sta stash+1
.cb2a	20 bb ca	                jsr sub12           ; subtract start address from end address
.cb2d	a5 c1		                lda tmp0
.cb2f	8d 2f 02	                sta store           ; save difference in store
.cb32	a5 c2		                lda tmp0+1
.cb34	8d 30 02	                sta store+1
.cb37	90 02		                bcc gdifx           ; error if start address is after end address
.cb39	18		                clc                 ; clear carry to indicate success
>cb3a	24		                .byte $24           ; bit zp opcode consumes next byte (sec)
.cb3b	38		gdifx           sec                 ; set carry to indicate error
.cb3c	60		                rts
.cb3d	20 76 c9	convrt          jsr rdpar           ; read a parameter
.cb40	20 65 ca	                jsr fresh           ; next line and clear
.cb43	a9 24		                lda #"$"            ; output $ sigil for hex
.cb45	20 d2 ff	                jsr chrout
.cb48	a5 c1		                lda tmp0            ; load the 16-bit value entered
.cb4a	a6 c2		                ldx tmp0+1
.cb4c	20 46 ca	                jsr wraddr          ; print it in 4 hex digits
.cb4f	20 65 ca	                jsr fresh
.cb52	a9 2b		                lda #"+"            ; output + sigil for decimal
.cb54	20 d2 ff	                jsr chrout
.cb57	20 88 cb	                jsr cvtdec          ; convert to bcd using hardware mode
.cb5a	a9 00		                lda #0              ; clear digit counter
.cb5c	a2 06		                ldx #6              ; max digits + 1
.cb5e	a0 03		                ldy #3              ; bits per digit - 1
.cb60	20 c2 cb	                jsr nmprnt          ; print result without leading zeros
.cb63	20 65 ca	                jsr fresh           ; next line and clear
.cb66	a9 26		                lda #"&"            ; print & sigil for octal
.cb68	20 d2 ff	                jsr chrout
.cb6b	a9 00		                lda #0              ; clear digit counter
.cb6d	a2 08		                ldx #8              ; max digits + 1
.cb6f	a0 02		                ldy #2              ; bits per digit - 1
.cb71	20 b1 cb	                jsr prinum          ; output number
.cb74	20 65 ca	                jsr fresh           ; next line and clear
.cb77	a9 25		                lda #"%"            ; print % sigil for binary
.cb79	20 d2 ff	                jsr chrout
.cb7c	a9 00		                lda #0              ; clear digit counter
.cb7e	a2 18		                ldx #$18            ; max digits + 1
.cb80	a0 00		                ldy #0              ; bits per digit - 1
.cb82	20 b1 cb	                jsr prinum          ; output number
.cb85	4c d8 c3	                jmp strt            ; back to mainloop
.cb88	20 b2 ca	cvtdec          jsr copy12          ; copy value from tmp0 to tmp2
.cb8b	a9 00		                lda #0
.cb8d	a2 02		                ldx #2              ; clear 3 bytes in work buffer
.cb8f	9d 0d 01	decml1          sta u0aa0,x
.cb92	ca		                dex
.cb93	10 fa		                bpl decml1
.cb95	a0 10		                ldy #16             ; 16 bits in input
.cb97	08		                php                 ; save status register
.cb98	78		                sei                 ; make sure no interrupts occur with bcd enabled
.cb99	f8		                sed
.cb9a	06 c3		decml2          asl tmp2            ; rotate bytes out of input low byte
.cb9c	26 c4		                rol tmp2+1          ; .. into high byte and carry bit
.cb9e	a2 02		                ldx #2              ; process 3 bytes
.cba0	bd 0d 01	decdbl          lda u0aa0,x         ; load current value of byte
.cba3	7d 0d 01	                adc u0aa0,x         ; add it to itself plus the carry bit
.cba6	9d 0d 01	                sta u0aa0,x         ; store it back in the same location
.cba9	ca		                dex                 ; decrement byte counter
.cbaa	10 f4		                bpl decdbl          ; loop until all bytes processed
.cbac	88		                dey                 ; decrement bit counter
.cbad	d0 eb		                bne decml2          ; loop until all bits processed
.cbaf	28		                plp                 ; restore processor status
.cbb0	60		                rts
.cbb1	48		prinum          pha                 ; save accumulator
.cbb2	a5 c1		                lda tmp0            ; copy input low byte to work buffer
.cbb4	8d 0f 01	                sta u0aa0+2
.cbb7	a5 c2		                lda tmp0+1          ; copy input high byte to work buffer
.cbb9	8d 0e 01	                sta u0aa0+1
.cbbc	a9 00		                lda #0              ; clear overflow byte in work buffer
.cbbe	8d 0d 01	                sta u0aa0
.cbc1	68		                pla                 ; restore accumulator
.cbc2	8d 08 01	nmprnt          sta digcnt          ; number of digits in accumulator
.cbc5	8c 0a 01	                sty numbit          ; bits per digit passed in y register
.cbc8	ac 0a 01	digout          ldy numbit          ; get bits to process
.cbcb	a9 00		                lda #0              ; clear accumulator
.cbcd	0e 0f 01	rolbit          asl u0aa0+2         ; shift bits out of low byte
.cbd0	2e 0e 01	                rol u0aa0+1         ; ... into high byte
.cbd3	2e 0d 01	                rol u0aa0           ; ... into overflow byte
.cbd6	2a		                rol a               ; ... into accumulator
.cbd7	88		                dey                 ; decrement bit counter
.cbd8	10 f3		                bpl rolbit          ; loop until all bits processed
.cbda	a8		                tay                 ; check whether accumulator is 0
.cbdb	d0 09		                bne nzero           ; if not, print it
.cbdd	e0 01		                cpx #1              ; have we output the max number of digits?
.cbdf	f0 05		                beq nzero           ; if not, print it
.cbe1	ac 08 01	                ldy digcnt          ; how many digits have we output?
.cbe4	f0 08		                beq zersup          ; skip output if digit is 0
.cbe6	ee 08 01	nzero           inc digcnt          ; increment digit counter
.cbe9	09 30		                ora #$30            ; add numeric value to ascii '0' to get ascii char
.cbeb	20 d2 ff	                jsr chrout          ; output character
.cbee	ca		zersup          dex                 ; decrement number of leading zeros
.cbef	d0 d7		                bne digout          ; next digit
.cbf1	60		                rts
.cbf2	d0 03		dstat           bne chgdev          ; if device address was given, use it
.cbf4	a2 08		                ldx #8              ; otherwise, default to 8
>cbf6	2c		                .byte $2c           ; absolute bit opcode consumes next word (ldx tmp0)
.cbf7	a6 c1		chgdev          ldx tmp0            ; load device address from parameter
.cbf9	e0 04		                cpx #4              ; make sure device address is in range 4-31
.cbfb	90 58		                bcc ioerr
.cbfd	e0 20		                cpx #32
.cbff	b0 54		                bcs ioerr
.cc01	86 c1		                stx tmp0
.cc03	a9 00		                lda #0              ; clear status
.cc05	85 90		                sta satus
.cc07	85 b7		                sta fnlen           ; empty filename
.cc09	20 98 ca	                jsr getchr          ; get next character
.cc0c	f0 24		                beq instat1         ; null, display status
.cc0e	ce 31 02	                dec chrpnt          ; back up 1 char
.cc11	c9 24		                cmp #"$"            ; $, display directory
.cc13	f0 43		                beq direct
.cc15	a5 c1		                lda tmp0            ; command specified device to listen
.cc17	20 b1 ff	                jsr listen
.cc1a	a9 6f		                lda #$6f            ; secondary address 15 (only low nybble used)
.cc1c	20 93 ff	                jsr second
.cc1f	ae 31 02	dcomd           ldx chrpnt          ; get next character from buffer
.cc22	ee 31 02	                inc chrpnt
.cc25	bd 00 02	                lda inbuff,x
.cc28	f0 05		                beq instat          ; break out of loop if it's null
.cc2a	20 a8 ff	                jsr ciout           ; otherwise output it to the serial bus
.cc2d	90 f0		                bcc dcomd           ; unconditional loop: ciout clears carry before rts
.cc2f	20 ae ff	instat          jsr unlsn           ; command device to unlisten
.cc32	20 57 ca	instat1         jsr crlf            ; new line
.cc35	a5 c1		                lda tmp0            ; load device address
.cc37	20 b4 ff	                jsr talk            ; command device to talk
.cc3a	a9 6f		                lda #$6f            ; secondary address 15 (only low nybble used)
.cc3c	20 96 ff	                jsr tksa
.cc3f	20 a5 ff	rdstat          jsr acptr           ; read byte from serial bus
.cc42	20 d2 ff	                jsr chrout          ; print it
.cc45	c9 0d		                cmp #$0d            ; if the byte is cr, exit loop
.cc47	f0 06		                beq dexit
.cc49	a5 90		                lda satus           ; check status
.cc4b	29 bf		                and #$bf            ; ignore eoi bit
.cc4d	f0 f0		                beq rdstat          ; if no errors, read next byte
.cc4f	20 ab ff	dexit           jsr untlk           ; command device to stop talking
.cc52	4c d8 c3	                jmp strt            ; back to mainloop
.cc55	4c 07 c4	ioerr           jmp error           ; handle error
.cc58	a5 c1		direct          lda tmp0            ; load device address
.cc5a	20 b1 ff	                jsr listen          ; command device to listen
.cc5d	a9 f0		                lda #$f0            ; secondary address 0 (only low nybble used)
.cc5f	20 93 ff	                jsr second
.cc62	ae 31 02	                ldx chrpnt          ; get index of next character
.cc65	bd 00 02	dir2            lda inbuff,x        ; get next character from buffer
.cc68	f0 06		                beq dir3            ; break if it's null
.cc6a	20 a8 ff	                jsr ciout           ; send character to device
.cc6d	e8		                inx                 ; increment characer index
.cc6e	d0 f5		                bne dir2            ; loop if it hasn't wrapped to zero
.cc70	20 ae ff	dir3            jsr unlsn           ; command device to unlisten
.cc73	20 57 ca	                jsr crlf            ; new line
.cc76	a5 c1		                lda tmp0            ; load device address
.cc78	48		                pha                 ; save on stack
.cc79	20 b4 ff	                jsr talk            ; command device to talk
.cc7c	a9 60		                lda #$60            ; secondary address 0 (only low nybble used)
.cc7e	20 96 ff	                jsr tksa
.cc81	a0 03		                ldy #3              ; read 3 16-bit values from device
.cc83	8c 2f 02	dirlin          sty store           ;   ignore the first 2; 3rd is file size
.cc86	20 a5 ff	dlink           jsr acptr           ; read low byte from device
.cc89	85 c1		                sta tmp0            ; store it
.cc8b	a5 90		                lda satus           ; check status
.cc8d	d0 44		                bne drexit          ; exit if error or eof occurred
.cc8f	20 a5 ff	                jsr acptr           ; read high byte from device
.cc92	85 c2		                sta tmp0+1          ; store it
.cc94	a5 90		                lda satus           ; check status
.cc96	d0 3b		                bne drexit          ; exit if error or eof cocurred
.cc98	ce 2f 02	                dec store           ; decrement byte count
.cc9b	d0 e9		                bne dlink           ; loop if bytes remain
.cc9d	20 88 cb	                jsr cvtdec          ; convert last 16-bit value to decimal
.cca0	a9 00		                lda #0              ; clear digit count
.cca2	a2 06		                ldx #6              ; max 6 digits
.cca4	a0 03		                ldy #3              ; 3 bits per digit
.cca6	20 c2 cb	                jsr nmprnt          ; output number
.cca9	a9 20		                lda #" "            ; output space
.ccab	20 d2 ff	                jsr chrout
.ccae	20 a5 ff	dname           jsr acptr           ; get a filename character from the device
.ccb1	f0 0a		                beq dmore           ; if it's null, break out of loop
.ccb3	a6 90		                ldx satus           ; check for errors or eof
.ccb5	d0 1c		                bne drexit          ; if found exit early
.ccb7	20 d2 ff	                jsr chrout          ; output character
.ccba	18		                clc
.ccbb	90 f1		                bcc dname           ; unconditional branch to read next char
.ccbd	20 57 ca	dmore           jsr crlf
.ccc0	20 e1 ff	                jsr stop            ; check for stop key
.ccc3	f0 0e		                beq drexit          ; exit early if pressed
.ccc5	20 e4 ff	                jsr getin           ; pause if a key was pressed
.ccc8	f0 05		                beq nopaws
.ccca	20 e4 ff	paws            jsr getin           ; wait until another key is pressed
.cccd	f0 fb		                beq paws
.cccf	a0 02		nopaws          ldy #2
.ccd1	d0 b0		                bne dirlin          ; unconditional branch to read next file
.ccd3	20 ab ff	drexit          jsr untlk           ; command device to untalk
.ccd6	68		                pla                 ; restore accumulator
.ccd7	20 b1 ff	                jsr listen          ; command device to listen
.ccda	a9 e0		                lda #$e0            ; secondary address 0 (only low nybble is used)
.ccdc	20 93 ff	                jsr second
.ccdf	20 ae ff	                jsr unlsn           ; command device to unlisten
.cce2	4c d8 c3	                jmp strt            ; back to mainloop
.cce5	20 57 ca	cline           jsr crlf            ; send cr+lf
.cce8	4c ee cc	                jmp snclr           ; clear line
.cceb	20 fe cc	sndclr          jsr sndmsg
.ccee	a0 28		snclr           ldy #$28            ; loop 40 times
.ccf0	a9 20		snclp           lda #$20            ; output space character
.ccf2	20 d2 ff	                jsr chrout
.ccf5	a9 14		                lda #$14            ; output delete character
.ccf7	20 d2 ff	                jsr chrout
.ccfa	88		                dey
.ccfb	d0 f3		                bne snclp
.ccfd	60		                rts
.ccfe	b9 59 cd	sndmsg          lda msgbas,y        ; y contains offset in msg table
.cd01	08		                php
.cd02	29 7f		                and #$7f            ; strip high bit before output
.cd04	20 53 ca	                jsr chout
.cd07	c8		                iny
.cd08	28		                plp
.cd09	10 f3		                bpl sndmsg          ; loop until high bit is set
.cd0b	60		                rts
.cd0c	b9 8e cd	sndtxt          lda txtptr,y         ; y contains offset in msg table
.cd0f	08		                php
.cd10	29 7f		                and #$7f            ; strip high bit before output
.cd12	20 53 ca	                jsr chout
.cd15	c8		                iny
.cd16	28		                plp
.cd17	10 f3		                bpl sndtxt          ; loop until high bit is set
.cd19	60		                rts
.cd1a	48		greetsmall      pha
.cd1b	98		                tya
.cd1c	48		                pha
.cd1d	a0 01		                ldy     #txt0-txtptr+1
.cd1f	20 0c cd	                jsr     sndtxt
.cd22	4c 2d cd	                jmp     greet
.cd25	48		greeting        pha
.cd26	98		                tya
.cd27	48		                pha
.cd28	a0 00		                ldy     #txt0-txtptr
.cd2a	20 0c cd	                jsr     sndtxt
.cd2d	a0 52		greet           ldy     #txt1-txtptr
.cd2f	20 0c cd	                jsr     sndtxt
.cd32	a0 00		                ldy     #txt0-txtptr
.cd34	20 0c cd	                jsr     sndtxt
.cd37	a0 7b		                ldy     #txt2-txtptr
.cd39	20 0c cd	                jsr     sndtxt
.cd3c	a0 29		                ldy     #txt01-txtptr
.cd3e	20 0c cd	                jsr     sndtxt
.cd41	a0 a3		                ldy     #txt3-txtptr
.cd43	20 0c cd	                jsr     sndtxt
.cd46	a0 29		                ldy     #txt01-txtptr
.cd48	20 0c cd	                jsr     sndtxt
.cd4b	a0 ca		                ldy     #txt4-txtptr
.cd4d	20 0c cd	                jsr     sndtxt
.cd50	a0 29		                ldy     #txt01-txtptr
.cd52	20 0c cd	                jsr     sndtxt
.cd55	68		                pla
.cd56	a8		                tay
.cd57	68		                pla
.cd58	60		                rts
=52569			msgbas  =*
>cd59	0d		msg2            .byte $0d               ; header for registers
>cd5a	20 20 20 50	                .text "   pc  sr ac xr yr sp   v1.2"
>cd5e	43 20 20 53 52 20 41 43 20 58 52 20 59 52 20 53
>cd6e	50 20 20 20 56 31 2e 32
>cd76	8d		                .byte $0d+$80
>cd77	1d bf		msg3            .byte $1d,$3f+$80       ; syntax error: move right, display "?"
>cd79	2e 2e 2e 20	msg4            .text "... sys"         ; sys call to enter monitor
>cd7d	53 59 53
>cd80	a0		                .byte $20+$80
>cd81	3a 92		msg5            .byte $3a,$12+$80       ; ":" then rvs on for memory ascii dump
>cd83	20 45 52 52	msg6            .text " erro"           ; i/o error: display " error"
>cd87	4f
>cd88	d2		                .byte "r"+$80
>cd89	41 a0		msg7            .byte $41,$20+$80       ; assemble next instruction: "a " + addr
>cd8b	20 20		msg8            .text "  "              ; pad non-existent byte: skip 3 spaces
>cd8d	a0		                .byte $20+$80
=52622			txtptr  =*
>cd8e	0d		txt0            .byte $0d
>cd8f	20 3d 3d 3d	                .text        " ======================================"
>cd93	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d
>cda3	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d
>cdb3	3d 3d 3d
>cdb6	80		                .byte $80
>cdb7	0d		txt01           .byte $0d
>cdb8	20 2d 2d 2d	                .text        " --------------------------------------"
>cdbc	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>cdcc	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>cddc	2d 2d 2d
>cddf	80		                .byte $80
>cde0	0d		txt1            .byte $0d
>cde1	20 20 20 20	                .text        "      < < < < < supermon > > > > >     "
>cde5	20 20 3c 20 3c 20 3c 20 3c 20 3c 20 53 55 50 45
>cdf5	52 4d 4f 4e 20 3e 20 3e 20 3e 20 3e 20 3e 20 20
>ce05	20 20 20
>ce08	80		                .byte $80
>ce09	0d		txt2            .byte $0d
>ce0a	20 20 42 59	                .text        "  by jim butterfield (r.i.p.1936-2007)"
>ce0e	20 4a 49 4d 20 42 55 54 54 45 52 46 49 45 4c 44
>ce1e	20 28 52 2e 49 2e 50 2e 31 39 33 36 2d 32 30 30
>ce2e	37 29
>ce30	80		                .byte $80
>ce31	0d		txt3            .byte $0d
>ce32	20 20 20 54	                .text format("   type [sys%05d] to launch. ($%04x)",org, org)           ; sys call to enter monitor
>ce36	59 50 45 20 5b 53 59 53 35 30 30 30 30 5d 20 54
>ce46	4f 20 4c 41 55 4e 43 48 2e 20 28 24 43 33 35 30
>ce56	29
>ce57	80		                .byte $80
>ce58	0d		txt4            .byte $0d
>ce59	20 20 20 20	                .text format("    (range $c000-$%04x is available) ",org-1)
>ce5d	28 52 41 4e 47 45 20 24 43 30 30 30 2d 24 43 33
>ce6d	34 46 20 49 53 20 41 56 41 49 4c 41 42 4c 45 29
>ce7d	20
>ce7e	80		                .byte $80
>ce7f	40 02 45 03	mode            .byte $40,$02,$45,$03   ; even opcodes
>ce83	d0 08 40 09	                .byte $d0,$08,$40,$09
>ce87	30 22 45 33	                .byte $30,$22,$45,$33
>ce8b	d0 08 40 09	                .byte $d0,$08,$40,$09
>ce8f	40 02 45 33	                .byte $40,$02,$45,$33
>ce93	d0 08 40 09	                .byte $d0,$08,$40,$09
>ce97	40 02 45 b3	                .byte $40,$02,$45,$b3
>ce9b	d0 08 40 09	                .byte $d0,$08,$40,$09
>ce9f	00 22 44 33	                .byte $00,$22,$44,$33
>cea3	d0 8c 44 00	                .byte $d0,$8c,$44,$00
>cea7	11 22 44 33	                .byte $11,$22,$44,$33
>ceab	d0 8c 44 9a	                .byte $d0,$8c,$44,$9a
>ceaf	10 22 44 33	                .byte $10,$22,$44,$33
>ceb3	d0 08 40 09	                .byte $d0,$08,$40,$09
>ceb7	10 22 44 33	                .byte $10,$22,$44,$33
>cebb	d0 08 40 09	                .byte $d0,$08,$40,$09
>cebf	62 13 78 a9	                .byte $62,$13,$78,$a9   ; opcodes ending in 01
>cec3	00		mode2           .byte $00   ; 000 000    00                  0   error
>cec4	21		                .byte $21   ; 001 000    01      #$00        1   immediate
>cec5	81		                .byte $81   ; 100 000    01      $00         2   zero-page
>cec6	82		                .byte $82   ; 100 000    10      $0000       3   absolute
>cec7	00		                .byte $00   ; 000 000    00                  4   implied
>cec8	00		                .byte $00   ; 000 000    00                  5   accumulator
>cec9	59		                .byte $59   ; 010 110    01      ($00,x)     6   indirect,x
>ceca	4d		                .byte $4d   ; 010 011    01      ($00),y     7   indirect,y
>cecb	91		                .byte $91   ; 100 100    01      $00,x       8   zero-page,x
>cecc	92		                .byte $92   ; 100 100    10      $0000,x     9   absolute,x
>cecd	86		                .byte $86   ; 100 001    10      $0000,y     a   absolute,y
>cece	4a		                .byte $4a   ; 010 010    10      ($0000)     b   indirect
>cecf	85		                .byte $85   ; 100 001    01      $00,y       c   zero-page,y
>ced0	9d		                .byte $9d   ; 100 111    01      $0000*      d   relative
>ced1	2c 29 2c	char1           .byte $2c,$29,$2c       ; ","  ")"  ","
>ced4	23 28 24	                .byte $23,$28,$24       ; "#"  "("  "$"
>ced7	59 00 58	char2           .byte $59,$00,$58       ; "y"   0   "x"
>ceda	24 24 00	                .byte $24,$24,$00       ; "$"  "$"   0
>cedd	1c 8a 1c 23	mneml           .byte $1c,$8a,$1c,$23   ; brk php bpl clc
>cee1	5d 8b 1b a1	                .byte $5d,$8b,$1b,$a1   ; jsr plp bmi sec
>cee5	9d 8a 1d 23	                .byte $9d,$8a,$1d,$23   ; rti pha bvc cli
>cee9	9d 8b 1d a1	                .byte $9d,$8b,$1d,$a1   ; rts pla bvs sei
>ceed	00 29 19 ae	                .byte $00,$29,$19,$ae   ; ??? dey bcc tya
>cef1	69 a8 19 23	                .byte $69,$a8,$19,$23   ; ldy tay bcs clv
>cef5	24 53 1b 23	                .byte $24,$53,$1b,$23   ; cpy iny bne cld
>cef9	24 53 19 a1	                .byte $24,$53,$19,$a1   ; cpx inx beq sed
>cefd	00 1a 5b 5b	                .byte $00,$1a,$5b,$5b   ; ??? bit jmp jmp
>cf01	a5 69 24 24	                .byte $a5,$69,$24,$24   ; sty ldy cpy cpx
>cf05	ae ae a8 ad	                .byte $ae,$ae,$a8,$ad   ; txa txs tax tsx
>cf09	29 00 7c 00	                .byte $29,$00,$7c,$00   ; dex ??? nop ???
>cf0d	15 9c 6d 9c	                .byte $15,$9c,$6d,$9c   ; asl rol lsr ror
>cf11	a5 69 29 53	                .byte $a5,$69,$29,$53   ; stx ldx dec inc
>cf15	84 13 34 11	                .byte $84,$13,$34,$11   ; ora and eor adc
>cf19	a5 69 23 a0	                .byte $a5,$69,$23,$a0   ; sta lda cmp sbc
>cf1d	d8 62 5a 48	mnemr           .byte $d8,$62,$5a,$48   ; brk php bpl clc
>cf21	26 62 94 88	                .byte $26,$62,$94,$88   ; jsr plp bmi sec
>cf25	54 44 c8 54	                .byte $54,$44,$c8,$54   ; rti pha bvc cli
>cf29	68 44 e8 94	                .byte $68,$44,$e8,$94   ; rts pla bvs sei
>cf2d	00 b4 08 84	                .byte $00,$b4,$08,$84   ; ??? dey bcc tya
>cf31	74 b4 28 6e	                .byte $74,$b4,$28,$6e   ; ldy tay bcs clv
>cf35	74 f4 cc 4a	                .byte $74,$f4,$cc,$4a   ; cpy iny bne cld
>cf39	72 f2 a4 8a	                .byte $72,$f2,$a4,$8a   ; cpx inx beq sed
>cf3d	00 aa a2 a2	                .byte $00,$aa,$a2,$a2   ; ??? bit jmp jmp
>cf41	74 74 74 72	                .byte $74,$74,$74,$72   ; sty ldy cpy cpx
>cf45	44 68 b2 32	                .byte $44,$68,$b2,$32   ; txa txs tax tsx
>cf49	b2 00 22 00	                .byte $b2,$00,$22,$00   ; dex ??? nop ???
>cf4d	1a 1a 26 26	                .byte $1a,$1a,$26,$26   ; asl rol lsr ror
>cf51	72 72 88 c8	                .byte $72,$72,$88,$c8   ; stx ldx dec inc
>cf55	c4 ca 26 48	                .byte $c4,$ca,$26,$48   ; ora and eor adc
>cf59	44 44 a2 c8	                .byte $44,$44,$a2,$c8   ; sta lda cmp sbc
>cf5d	0d 20 20 20	                .byte $0d,$20,$20,$20
>cf61	41 43 44 46	keyw            .text "acdfghjmrtx@.>;"
>cf65	47 48 4a 4d 52 54 58 40 2e 3e 3b
>cf70	24 2b 26 25	hikey           .text "$+&%lsv"
>cf74	4c 53 56
=53111			keytop  =*
>cf77	bd c6 15 c5	kaddr           .word assem-1,compar-1,disass-1,fill-1
>cf7b	4a c8 98 c6
>cf7f	a0 c4 99 c5	                .word goto-1,hunt-1,jsub-1,dsplym-1
>cf83	be c4 33 c4
>cf87	b5 c3 18 c5	                .word dsplyr-1,trans-1,exit-1,dstat-1
>cf8b	2d c4 f1 cb
>cf8f	bd c6 80 c4	                .word assem-1,altm-1,altr-1
>cf93	69 c4
>cf95	10 0a 08 02	modtab          .byte $10,$0a,$08,02    ; modulo number systems
>cf99	04 03 03 01	lentab          .byte $04,$03,$03,$01   ; bits per digit
>cf9d	a7 c3		linkad          .word break             ; address of brk handler
>cf9f	50 c3		supad           .word super             ; address of entry point

;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L jbmon64.txt -o jbmon64.prg jbmon64.asm
; Mon May 27 22:50:01 2024

;Offset	;Hex		;Source

;******  Processing input file: jbmon64.asm

=$c1			tmp0    = $c1               ; used to return input, often holds end address
=$c3			tmp2    = $c3               ; usually holds start address
=$90			satus   = $90               ; kernal i/o status word
=$b7			fnlen   = $b7               ; length of current filename
=$b9			sadd    = $b9               ; current secondary address (official name sa)
=$ba			fa      = $ba               ; current device number
=$bb			fnadr   = $bb               ; pointer to current filename
=$c6			ndx     = $c6               ; number of characters in keyboard buffer
=$0277			keyd    = $0277             ; keyboard buffer
=$0316			bkvec   = $0316             ; brk instruction vector (official name cbinv)
>0100			acmd    .fill 1             ; addressing command
>0101			length  .fill 1             ; length of operand
>0102			mnemw   .fill 3             ; 3 letter mnemonic buffer
>0105			savx    .fill 1             ; 1 byte temp storage, often to save x register
>0106			opcode  .fill 1             ; current opcode for assembler/disassembler
>0107			upflg   .fill 1             ; flag: count up (bit 7 clear) or down (bit 7 set)
>0108			digcnt  .fill 1             ; digit count
>0109			indig   .fill 1             ; numeric value of single digit
>010a			numbit  .fill 1             ; numeric base of input
>010b			stash   .fill 2             ; 2-byte temp storage
>010d			u0aa0   .fill 10            ; work buffer
=$0117			u0aae   =*                  ; end of work buffer
>0117			stage   .fill 30            ; staging buffer for filename, search, etc.
=$0135			estage  =*                  ; end of staging buffer
>0200			inbuff  .fill 40            ; 40-character input buffer
=$0228			endin   =*                  ; end of input buffer
>0228			pch     .fill 1             ; program counter high byte
>0229			pcl     .fill 1             ; program counter low byte
>022a			sr      .fill 1             ; status register
>022b			acc     .fill 1             ; accumulator
>022c			xr      .fill 1             ; x register
>022d			yr      .fill 1             ; y register
>022e			sp      .fill 1             ; stack pointer
>022f			store   .fill 2             ; 2-byte temp storage
>0231			chrpnt  .fill 1             ; current position in input buffer
>0232			savy    .fill 1             ; temp storage, often to save y register
>0233			u9f     .fill 1             ; index into assembler work buffer
=$ff90			setmsg  = $ff90             ; set kernel message control flag
=$ff93			second  = $ff93             ; set secondary address after listen
=$ff96			tksa    = $ff96             ; send secondary address after talk
=$ffb1			listen  = $ffb1             ; command serial bus device to listen
=$ffb4			talk    = $ffb4             ; command serial bus device to talk
=$ffba			setlfs  = $ffba             ; set logical file parameters
=$ffbd			setnam  = $ffbd             ; set filename
=$ffa5			acptr   = $ffa5             ; input byte from serial bus
=$ffa8			ciout   = $ffa8             ; output byte to serial bus
=$ffab			untlk   = $ffab             ; command serial bus device to untalk
=$ffae			unlsn   = $ffae             ; command serial bus device to unlisten
=$ffc6			chkin   = $ffc6             ; define input channel
=$ffcc			clrchn  = $ffcc             ; restore default devices
=$ffcf			input   = $ffcf             ; input a character (official name chrin)
=$ffd2			chrout  = $ffd2             ; output a character
=$ffd5			load    = $ffd5             ; load from device
=$ffd8			save    = $ffd8             ; save to device
=$ffe1			stop    = $ffe1             ; check the stop key
=$ffe4			getin   = $ffe4             ; get a character
=$8000			org     = $8000 ;36000;$9519
.8000	20 40 80	super   jsr setcolors
.8003	a0 33		        ldy #msg9-msgbas    ; display "      < < < < < supermon > > > > >"
.8005	20 b2 89	        jsr sndmsg
.8008	a0 56		        ldy #msga-msgbas    ; display " by jim butterfield  (r.i.p. 1936-2007)"
.800a	20 b2 89	        jsr sndmsg
.800d	20 0b 87	        jsr crlf
.8010	a0 20		        ldy #msg4-msgbas    ; display "..sys "
.8012	20 b2 89	        jsr sndmsg
.8015	ad 5e 8b	        lda supad           ; store entry point address in tmp0
.8018	85 c1		        sta tmp0
.801a	ad 5f 8b	        lda supad+1
.801d	85 c2		        sta tmp0+1
.801f	20 3c 88	        jsr cvtdec          ; convert address to decimal
.8022	a9 00		        lda #0
.8024	a2 06		        ldx #6
.8026	a0 03		        ldy #3
.8028	20 76 88	        jsr nmprnt          ; print entry point address
.802b	20 0b 87	        jsr crlf
.802e	ad 5c 8b	        lda linkad          ; set brk vector
.8031	8d 16 03	        sta bkvec
.8034	ad 5d 8b	        lda linkad+1
.8037	8d 17 03	        sta bkvec+1
.803a	a9 80		        lda #$80            ; disable kernel control messages
.803c	20 90 ff	        jsr setmsg          ; and enable error messages
.803f	00		        brk
.8040			setcolors
.8040	08		                php
.8041	48		                pha
.8042	a9 0e		                lda     #$0e ;and #$0a #$0b
.8044	8d 21 d0	                sta     screen
.8047	29 07		                and     #$07
.8049	8d 20 d0	                sta     border
.804c	a9 01		                lda     #$01
.804e	8d 86 02	                sta     texte
.8051	a9 93		                lda     #147
.8053	20 d2 ff	                jsr     $ffd2
.8056	a9 13		                lda     #19
.8058	20 d2 ff	                jsr     $ffd2
.805b	68		                pla
.805c	28		                plp
.805d	60		                rts
=53281			screen  =       53281
=53280			border  =       53280
=646			texte   =       646
.805e	a2 05		break   ldx #$05            ; pull registers off the stack
.8060	68		bstack  pla                 ; order: y,x,a,sr,pcl,pch
.8061	9d 28 02	        sta pch,x           ; store in memory
.8064	ca		        dex
.8065	10 f9		        bpl bstack
.8067	d8		        cld                 ; disable bcd mode
.8068	ba		        tsx                 ; store stack pointer in memory
.8069	8e 2e 02	        stx sp
.806c	58		        cli                 ; enable interupts
.806d	a0 00		dsplyr  ldy #msg2-msgbas    ; display headers
.806f	20 9f 89	        jsr sndclr
.8072	a9 3b		        lda #$3b            ; prefix registers with "; " to allow editing
.8074	20 d2 ff	        jsr chrout
.8077	a9 20		        lda #$20
.8079	20 d2 ff	        jsr chrout
.807c	ad 28 02	        lda pch             ; print 2-byte program counter
.807f	20 24 87	        jsr wrtwo
.8082	a0 01		        ldy #1              ; start 1 byte after pc high byte
.8084	b9 28 02	disj    lda pch,y           ; loop through rest of the registers
.8087	20 00 87	        jsr wrbyte          ; print 1-byte register value
.808a	c8		        iny
.808b	c0 07		        cpy #7              ; there are a total of 5 registers to print
.808d	90 f5		        bcc disj
.808f	20 0b 87	strt    jsr crlf            ; new line
.8092	a2 00		        ldx #0              ; point at start of input buffer
.8094	8e 31 02	        stx chrpnt
.8097	20 cf ff	smove   jsr input           ; chrin kernal call to input a character
.809a	9d 00 02	        sta inbuff,x        ; store in input buffer
.809d	e8		        inx
.809e	e0 28		        cpx #endin-inbuff   ; error if buffer is full
.80a0	b0 1c		        bcs error
.80a2	c9 0d		        cmp #$0d            ; keep reading until cr
.80a4	d0 f1		        bne smove
.80a6	a9 00		        lda #0              ; null-terminate input buffer
.80a8	9d ff 01	        sta inbuff-1,x      ; (replacing the cr)
.80ab	20 4c 87	st1     jsr getchr          ; get a character from the buffer
.80ae	f0 df		        beq strt            ; start over if buffer is empty
.80b0	c9 20		        cmp #$20            ; skip leading spaces
.80b2	f0 f7		        beq st1
.80b4	a2 16		s0      ldx #keytop-keyw    ; loop through valid command characters
.80b6	dd 20 8b	s1      cmp keyw,x          ; see if input character matches
.80b9	f0 0b		        beq s2              ; command matched, dispatch it
.80bb	ca		        dex                 ; no match, check next command
.80bc	10 f8		        bpl s1              ; keep trying until we've checked them all
.80be	a0 1e		error   ldy #msg3-msgbas    ; display "?" to indicate error and go to new line
.80c0	20 b2 89	        jsr sndmsg
.80c3	4c 8f 80	        jmp strt            ; back to main loop
.80c6	e0 13		s2      cpx #$13            ; last 3 commands in table are load/save/validate
.80c8	b0 12		        bcs lsv             ;   which are handled by the same subroutine
.80ca	e0 0f		        cpx #$0f            ; next 4 commands are base conversions
.80cc	b0 14		        bcs cnvlnk          ;   which are handled by the same subroutine
.80ce	8a		        txa                 ; remaining commands dispatch through vector table
.80cf	0a		        asl a               ; multiply index of command by 2
.80d0	aa		        tax                 ;   since table contains 2-byte addresses
.80d1	bd 37 8b	        lda kaddr+1,x       ; push address from vector table onto stack
.80d4	48		        pha                 ;   so that the rts from getpar will jump there
.80d5	bd 36 8b	        lda kaddr,x
.80d8	48		        pha
.80d9	4c 2d 86	        jmp getpar          ; get the first parameter for the command
.80dc	8d 32 02	lsv     sta savy            ; handle load/save/validate
.80df	4c af 82	        jmp ld
.80e2	4c f1 87	cnvlnk  jmp convrt          ; handle base conversion
.80e5	6c 02 a0	exit    jmp ($a002)         ; jump to warm-start vector to reinitialize basic
.80e8	b0 08		dsplym  bcs dspm11          ; start from previous end addr if no address given
.80ea	20 66 87	        jsr copy12          ; save start address in tmp2
.80ed	20 2d 86	        jsr getpar          ; get end address in tmp0
.80f0	90 06		        bcc dsmnew          ; did user specify one?
.80f2	a9 0b		dspm11  lda #$0b            ; if not, show 12 lines by default
.80f4	85 c1		        sta tmp0
.80f6	d0 0e		        bne dspbyt          ; always true, but bne uses 1 byte less than jmp
.80f8	20 6f 87	dsmnew  jsr sub12           ; end addr given, calc bytes between start and end
.80fb	90 1e		        bcc merror          ; error if start is after end
.80fd	a2 03		        ldx #3              ; divide by 8 (shift right 3 times)
.80ff	46 c2		dspm01  lsr tmp0+1
.8101	66 c1		        ror tmp0
.8103	ca		        dex
.8104	d0 f9		        bne dspm01
.8106	20 e1 ff	dspbyt  jsr stop            ; check for stop key
.8109	f0 0d		        beq dspmx           ; exit early if pressed
.810b	20 8b 81	        jsr dispmem         ; display 1 line containing 8 bytes
.810e	a9 08		        lda #8              ; increase start address by 8 bytes
.8110	20 a5 87	        jsr bumpad2
.8113	20 7d 87	        jsr suba1           ; decrement line counter
.8116	b0 ee		        bcs dspbyt          ; show another line until it's < 0
.8118	4c 8f 80	dspmx   jmp strt            ; back to main loop
.811b	4c be 80	merror  jmp error           ; handle error
.811e	20 bd 87	altr    jsr copy1p          ; store first parameter in pc
.8121	a0 00		        ldy #0              ; init counter
.8123	20 2d 86	altr1   jsr getpar          ; get value for next register
.8126	b0 0a		        bcs altrx           ; exit early if no more values given
.8128	a5 c1		        lda tmp0            ; store in memory, offset from sr
.812a	99 2a 02	        sta sr,y            ; these locations will be transferred to the
.812d	c8		        iny                 ;   actual registers before exiting the monitor
.812e	c0 05		        cpy #$05            ; have we updated all 5 yet?
.8130	90 f1		        bcc altr1           ; if not, get next
.8132	4c 8f 80	altrx   jmp strt            ; back to main loop
.8135	b0 13		altm    bcs altmx           ; exit if no parameter provided
.8137	20 66 87	        jsr copy12          ; copy parameter to start address
.813a	a0 00		        ldy #0
.813c	20 2d 86	altm1   jsr getpar          ; get value for next byte of memory
.813f	b0 09		        bcs altmx           ; if none given, exit early
.8141	a5 c1		        lda tmp0            ; poke value into memory at start address + y
.8143	91 c3		        sta (tmp2),y
.8145	c8		        iny                 ; next byte
.8146	c0 08		        cpy #8              ; have we read 8 bytes yet?
.8148	90 f2		        bcc altm1           ; if not, read the next one
.814a	a9 91		altmx   lda #$91            ; move cursor up
.814c	20 d2 ff	        jsr chrout
.814f	20 8b 81	        jsr dispmem         ; re-display line to make ascii match hex
.8152	4c 8f 80	        jmp strt            ; back to main loop
.8155	ae 2e 02	goto    ldx sp              ; load stack pointer from memory
.8158	9a		        txs                 ; save in sp register
.8159	20 bd 87	goto2   jsr copy1p          ; copy provided address to pc
.815c	78		        sei                 ; disable interrupts
.815d	ad 28 02	        lda pch             ; push pc high byte on stack
.8160	48		        pha
.8161	ad 29 02	        lda pcl             ; push pc low byte on stack
.8164	48		        pha
.8165	ad 2a 02	        lda sr              ; push status byte on stack
.8168	48		        pha
.8169	ad 2b 02	        lda acc             ; load accumulator from memory
.816c	ae 2c 02	        ldx xr              ; load x from memory
.816f	ac 2d 02	        ldy yr              ; load y from memory
.8172	40		        rti                 ; return from interrupt (pops pc and sr)
.8173	ae 2e 02	jsub    ldx sp              ; load stack pointer from memory
.8176	9a		        txs                 ; save value in sp register
.8177	20 59 81	        jsr goto2           ; same as goto command
.817a	8c 2d 02	        sty yr              ; save y to memory
.817d	8e 2c 02	        stx xr              ; save x to memory
.8180	8d 2b 02	        sta acc             ; save accumulator to memory
.8183	08		        php                 ; push processor status on stack
.8184	68		        pla                 ; pull processor status into a
.8185	8d 2a 02	        sta sr              ; save processor status to memory
.8188	4c 6d 80	        jmp dsplyr          ; display registers
.818b	20 0b 87	dispmem jsr crlf            ; new line
.818e	a9 3e		        lda #">"            ; prefix > so memory can be edited in place
.8190	20 d2 ff	        jsr chrout
.8193	20 f6 86	        jsr showad          ; show address of first byte on line
.8196	a0 00		        ldy #0
.8198	f0 03		        beq dmemgo          ; showad already printed a space after the address
.819a	20 03 87	dmemlp  jsr space           ; print space between bytes
.819d	b1 c3		dmemgo  lda (tmp2),y        ; load byte from start address + y
.819f	20 24 87	        jsr wrtwo           ; output hex digits for byte
.81a2	c8		        iny                 ; next byte
.81a3	c0 08		        cpy #8              ; have we output 8 bytes yet?
.81a5	90 f3		        bcc dmemlp          ; if not, output next byte
.81a7	a0 26		        ldy #msg5-msgbas    ; if so, output : and turn on reverse video
.81a9	20 b2 89	        jsr sndmsg          ;   before displaying ascii representation
.81ac	a0 00		        ldy #0              ; back to first byte in line
.81ae	b1 c3		dchar   lda (tmp2),y        ; load byte at start address + y
.81b0	aa		        tax                 ; stash in x
.81b1	29 bf		        and #$bf            ; clear 6th bit
.81b3	c9 22		        cmp #$22            ; is it a quote ("")?
.81b5	f0 08		        beq ddot            ; if so, print . instead
.81b7	8a		        txa                 ; if not, restore character
.81b8	29 7f		        and #$7f            ; clear top bit
.81ba	c9 20		        cmp #$20            ; is it a printable character (>= $20)?
.81bc	8a		        txa                 ; restore character
.81bd	b0 02		        bcs dchrok          ; if printable, output character
.81bf	a9 2e		ddot    lda #$2e            ; if not, output '.' instaed
.81c1	20 d2 ff	dchrok  jsr chrout
.81c4	c8		        iny                 ; next byte
.81c5	c0 08		        cpy #8              ; have we output 8 bytes yet?
.81c7	90 e5		        bcc dchar           ; if not, output next byte
.81c9	60		        rts
.81ca	a9 00		compar  lda #0              ; bit 7 clear signals compare
>81cc	2c		        .byte $2c           ; absolute bit opcode consumes next word (lda #$80)
.81cd	a9 80		trans   lda #$80            ; bit 7 set signals transfer
.81cf	8d 32 02	        sta savy            ; save compare/transfer flag in savy
.81d2	a9 00		        lda #0              ; assume we're counting up (bit 7 clear)
.81d4	8d 07 01	        sta upflg           ; save direction flag
.81d7	20 ca 87	        jsr getdif          ; get two addresses and calculate difference
.81da	b0 05		        bcs terror          ; carry set indicates error
.81dc	20 2d 86	        jsr getpar          ; get destination address in tmp0
.81df	90 03		        bcc tokay           ; carry set indicates error
.81e1	4c be 80	terror  jmp error           ; handle error
.81e4	2c 32 02	tokay   bit savy            ; transfer or compare?
.81e7	10 27		        bpl compar1         ; high bit clear indicates compare
.81e9	a5 c3		        lda tmp2            ; if it's a transfer, we must take steps
.81eb	c5 c1		        cmp tmp0            ;   to avoid overwriting the source bytes before
.81ed	a5 c4		        lda tmp2+1          ;   they have been transferred
.81ef	e5 c2		        sbc tmp0+1          ; compare source (tmp2) to destination (tmp0)
.81f1	b0 1d		        bcs compar1         ; and count up if source is before than desitnation
.81f3	ad 2f 02	        lda store           ; otherwise, start at end and count down...
.81f6	65 c1		        adc tmp0            ; add length (store) to desintation (tmp0)
.81f8	85 c1		        sta tmp0            ; to calculate end of destination
.81fa	ad 30 02	        lda store+1
.81fd	65 c2		        adc tmp0+1
.81ff	85 c2		        sta tmp0+1
.8201	a2 01		        ldx #1              ; change source pointer from beginning to end
.8203	bd 0b 01	tdown   lda stash,x         ; tmp2 = source end (stash)
.8206	95 c3		        sta tmp2,x
.8208	ca		        dex
.8209	10 f8		        bpl tdown
.820b	a9 80		        lda #$80            ; high bit set in upflg means count down
.820d	8d 07 01	        sta upflg
.8210	20 0b 87	compar1 jsr crlf            ; new line
.8213	a0 00		        ldy #0              ; no offset from pointer
.8215	20 e1 ff	tcloop  jsr stop            ; check for stop key
.8218	f0 31		        beq texit           ; exit if pressed
.821a	b1 c3		        lda (tmp2),y        ; load byte from source
.821c	2c 32 02	        bit savy            ; transfer or compare?
.821f	10 02		        bpl compar2         ; skip store if comparing
.8221	91 c1		        sta (tmp0),y        ; otherwise, store in destination
.8223	d1 c1		compar2 cmp (tmp0),y        ; compare to destination
.8225	f0 03		        beq tmvad           ; don't show address if equal
.8227	20 f6 86	        jsr showad          ; show address
.822a	2c 07 01	tmvad   bit upflg           ; counting up or down?
.822d	30 0b		        bmi tdecad          ; high bit set means we're counting down
.822f	e6 c1		        inc tmp0            ; increment destination low byte
.8231	d0 10		        bne tincok
.8233	e6 c2		        inc tmp0+1          ; carry to high byte if necessary
.8235	d0 0c		        bne tincok
.8237	4c be 80	        jmp error           ; error if high byte overflowed
.823a	20 7d 87	tdecad  jsr suba1           ; decrement destination (tmp0)
.823d	20 af 87	        jsr sub21           ; decrement source (tmp2)
.8240	4c 46 82	        jmp tmor
.8243	20 a3 87	tincok  jsr adda2           ; increment source (tmp2)
.8246	20 91 87	tmor    jsr sub13           ; decrement length
.8249	b0 ca		        bcs tcloop          ; loop until length is 0
.824b	4c 8f 80	texit   jmp strt            ; back to main loop
.824e	20 ca 87	hunt    jsr getdif          ; get start (tmp2) and end (tmp0) of haystack
.8251	b0 59		        bcs herror          ; carry indicates error
.8253	a0 00		        ldy #0
.8255	20 4c 87	        jsr getchr          ; get a single character
.8258	c9 27		        cmp #"'"            ; is it a single quote?
.825a	d0 16		        bne nostrh          ; if not, input needle as hex bytes
.825c	20 4c 87	        jsr getchr          ; if so, input needle as string
.825f	c9 00		        cmp #0
.8261	f0 49		        beq herror          ; error if needle isn't at least one byte
.8263	99 17 01	hpar    sta stage,y         ; save char in staging area
.8266	c8		        iny
.8267	20 4c 87	        jsr getchr          ; get another char
.826a	f0 18		        beq htgo            ; if it's null start searching
.826c	c0 1e		        cpy #estage-stage   ; have we filled up the needle staging area?
.826e	d0 f3		        bne hpar            ; if not, get another character
.8270	f0 12		        beq htgo            ; if so, start searching
.8272	20 2a 86	nostrh  jsr rdpar           ; read hex bytes if string not indicated
.8275	a5 c1		hlp     lda tmp0            ; save last read byte in staging area
.8277	99 17 01	        sta stage,y
.827a	c8		        iny                 ; get another hex byte
.827b	20 2d 86	        jsr getpar
.827e	b0 04		        bcs htgo            ; if there is none, start searching
.8280	c0 1e		        cpy #estage-stage   ; have we filled up the needle staging area?
.8282	d0 f1		        bne hlp             ; if not, get another byte
.8284	8c 32 02	htgo    sty savy            ; save length of needle
.8287	20 0b 87	        jsr crlf            ; new line
.828a	a0 00		hscan   ldy #0
.828c	b1 c3		hlp3    lda (tmp2),y        ; get first byte in haystack
.828e	d9 17 01	        cmp stage,y         ; compare it to first byte of needle
.8291	d0 09		        bne hnoft           ; if it doesn't match, we haven't found anything
.8293	c8		        iny                 ; if it does, check the next byte
.8294	cc 32 02	        cpy savy            ; have we reached the end of the needle?
.8297	d0 f3		        bne hlp3            ; if not, keep comparing bytes
.8299	20 f6 86	        jsr showad          ; match found, show address
.829c	20 e1 ff	hnoft   jsr stop            ; no match, check for stop key
.829f	f0 08		        beq hexit           ; exit prematurely if pressed
.82a1	20 a3 87	        jsr adda2           ; increment haystack pointer
.82a4	20 91 87	        jsr sub13           ; decrement haystack length
.82a7	b0 e1		        bcs hscan           ; still more haystack? keep searching
.82a9	4c 8f 80	hexit   jmp strt            ; back to main loop
.82ac	4c be 80	herror  jmp error           ; handle error
.82af	a0 01		ld      ldy #1              ; default to reading from tape, device #1
.82b1	84 ba		        sty fa
.82b3	84 b9		        sty sadd            ; default to secondary address #1
.82b5	88		        dey
.82b6	84 b7		        sty fnlen           ; start with an empty filename
.82b8	84 90		        sty satus           ; clear status
.82ba	a9 01		        lda #>stage         ; set filename pointer to staging buffer
.82bc	85 bc		        sta fnadr+1
.82be	a9 17		        lda #<stage
.82c0	85 bb		        sta fnadr
.82c2	20 4c 87	l1      jsr getchr          ; get a character
.82c5	f0 59		        beq lshort          ; no filename given, try load or verify from tape
.82c7	c9 20		        cmp #$20            ; skip leading spaces
.82c9	f0 f7		        beq l1
.82cb	c9 22		        cmp #$22            ; error if filename doesn't start with a quote
.82cd	d0 16		        bne lerror
.82cf	ae 31 02	        ldx chrpnt          ; load current char pointer into index reg
.82d2	bd 00 02	l3      lda inbuff,x        ; load current char from buffer to accumulator
.82d5	f0 49		        beq lshort          ; no filename given, try load or verify from tape
.82d7	e8		        inx                 ; next char
.82d8	c9 22		        cmp #$22            ; is it a quote?
.82da	f0 0c		        beq l8              ; if so, we've reached the end of the filename
.82dc	91 bb		        sta (fnadr),y       ; if not, save character in filename buffer
.82de	e6 b7		        inc fnlen           ; increment filename length
.82e0	c8		        iny
.82e1	c0 1e		        cpy #estage-stage   ; check whether buffer is full
.82e3	90 ed		        bcc l3              ; if not, get another character
.82e5	4c be 80	lerror  jmp error           ; if so, handle error
.82e8	8e 31 02	l8      stx chrpnt          ; set character pointer to the current index
.82eb	20 4c 87	        jsr getchr          ; eat separator between filename and device #
.82ee	f0 30		        beq lshort          ; no separator, try to load or verify from tape
.82f0	20 2d 86	        jsr getpar          ; get device number
.82f3	b0 2b		        bcs lshort          ; no device # given, try load or verify from tape
.82f5	a5 c1		        lda tmp0            ; set device number for kernal routines
.82f7	85 ba		        sta fa
.82f9	20 2d 86	        jsr getpar          ; get start address for load or save in tmp0
.82fc	b0 22		        bcs lshort          ; no start address, try to load or verify
.82fe	20 66 87	        jsr copy12          ; transfer start address to tmp2
.8301	20 2d 86	        jsr getpar          ; get end address for save in tmp0
.8304	b0 3d		        bcs ldaddr          ; no end address, try to load to given start addr
.8306	20 0b 87	        jsr crlf            ; new line
.8309	a6 c1		        ldx tmp0            ; put low byte of end address in x
.830b	a4 c2		        ldy tmp0+1          ; put high byte of end address in y
.830d	ad 32 02	        lda savy            ; confirm that we're doing a save
.8310	c9 53		        cmp #"s"
.8312	d0 d1		        bne lerror          ; if not, error due to too many params
.8314	a9 00		        lda #0
.8316	85 b9		        sta sadd            ; set secondary address to 0
.8318	a9 c3		        lda #tmp2           ; put addr of zero-page pointer to data in a
.831a	20 d8 ff	        jsr save            ; call kernal save routine
.831d	4c 8f 80	lsvxit  jmp strt            ; back to mainloop
.8320	ad 32 02	lshort  lda savy            ; check which command we received
.8323	c9 56		        cmp #"v"
.8325	f0 06		        beq loadit          ; we're doing a verify so don't set a to 0
.8327	c9 4c		        cmp #"l"
.8329	d0 ba		        bne lerror          ; error due to not enough params for save
.832b	a9 00		        lda #0              ; 0 in a signals load, anything else is verify
.832d	20 d5 ff	loadit  jsr load            ; call kernal load routine
.8330	a5 90		        lda satus           ; get i/o status
.8332	29 10		        and #$10            ; check bit 5 for checksum error
.8334	f0 e7		        beq lsvxit          ; if no error go back to mainloop
.8336	ad 32 02	        lda savy            ; ?? not sure what these two lines are for...
.8339	f0 aa		        beq lerror          ; ?? savy will never be 0, so why check?
.833b	a0 28		        ldy #msg6-msgbas    ; display "error" if checksum didn't match
.833d	20 b2 89	        jsr sndmsg
.8340	4c 8f 80	        jmp strt            ; back to mainloop
.8343	a6 c3		ldaddr  ldx tmp2            ; load address low byte in x
.8345	a4 c4		        ldy tmp2+1          ; load address high byte in y
.8347	a9 00		        lda #0              ; 0 in a signals load
.8349	85 b9		        sta sadd            ; secondary addr 0 means load to addr in x and y
.834b	f0 d3		        beq lshort          ; execute load
.834d	20 ca 87	fill    jsr getdif          ; start in tmp2, end in stash, length in store
.8350	b0 59		        bcs aerror          ; carry set indicates error
.8352	20 2d 86	        jsr getpar          ; get value to fill in tmp0
.8355	b0 54		        bcs aerror          ; carry set indicates error
.8357	20 4c 87	        jsr getchr          ; any more characters triggers an error
.835a	d0 4f		        bne aerror
.835c	a0 00		        ldy #0              ; no offset
.835e	a5 c1		fillp   lda tmp0            ; load value to fill in accumulator
.8360	91 c3		        sta (tmp2),y        ; store fill value in current address
.8362	20 e1 ff	        jsr stop            ; check for stop key
.8365	f0 08		        beq fstart          ; if pressed, back to main loop
.8367	20 a3 87	        jsr adda2           ; increment address
.836a	20 91 87	        jsr sub13           ; decrement length
.836d	b0 ef		        bcs fillp           ; keep going until length reaches 0
.836f	4c 8f 80	fstart  jmp strt            ; back to main loop
.8372	b0 37		assem   bcs aerror          ; error if no address given
.8374	20 66 87	        jsr copy12          ; copy address to tmp2
.8377	a2 00		aget1   ldx #0
.8379	8e 0e 01	        stx u0aa0+1         ; clear byte that mnemonic gets shifted into
.837c	8e 08 01	        stx digcnt          ; clear digit count
.837f	20 4c 87	aget2   jsr getchr          ; get a char
.8382	d0 04		        bne almor           ; proceed if the character isn't null
.8384	e0 00		        cpx #0              ; it's null, have read a mnemonic yet?
.8386	f0 e7		        beq fstart          ; if not, silently go back to main loop
.8388	c9 20		almor   cmp #$20            ; skip leading spaces
.838a	f0 eb		        beq aget1
.838c	9d 02 01	        sta mnemw,x         ; put character in mnemonic buffer
.838f	e8		        inx
.8390	e0 03		        cpx #3              ; have we read 3 characters yet?
.8392	d0 eb		        bne aget2           ; if not, get next character
.8394	ca		asqeez  dex                 ; move to previous char
.8395	30 17		        bmi aoprnd          ; if we're done with mnemonic, look for operand
.8397	bd 02 01	        lda mnemw,x         ; get current character
.839a	38		        sec                 ; pack 3-letter mnemonic into 2 bytes (15 bits)
.839b	e9 3f		        sbc #$3f            ; subtract $3f from ascii code so a-z = 2 to 27
.839d	a0 05		        ldy #$05            ; letters now fit in 5 bits; shift them out
.839f	4a		ashift  lsr a               ;   into the first two bytes of the inst buffer
.83a0	6e 0e 01	        ror u0aa0+1         ; catch the low bit from accumulator in right byte
.83a3	6e 0d 01	        ror u0aa0           ; catch the low bit from right byte in left byte
.83a6	88		        dey                 ; count down bits
.83a7	d0 f6		        bne ashift          ; keep looping until we reach zero
.83a9	f0 e9		        beq asqeez          ; unconditional branch to handle next char
.83ab	4c be 80	aerror  jmp error           ; handle error
.83ae	a2 02		aoprnd  ldx #2              ; mnemonic is in first two bytes so start at third
.83b0	ad 08 01	ascan   lda digcnt          ; did we find address digits last time?
.83b3	d0 2d		        bne aform1          ; if so, look for mode chars
.83b5	20 55 86	        jsr rdval           ; otherwise, look for an address
.83b8	f0 25		        beq aform0          ; we didn't find an address, look for characters
.83ba	b0 ef		        bcs aerror          ; carry flag indicates error
.83bc	a9 24		        lda #"$"
.83be	9d 0d 01	        sta u0aa0,x         ; prefix addresses with $
.83c1	e8		        inx                 ; next position in buffer
.83c2	a0 04		        ldy #4              ; non-zero page addresses are 4 hex digits
.83c4	ad 0a 01	        lda numbit          ; check numeric base in which address was given
.83c7	c9 08		        cmp #8              ; for addresses given in octal or binary
.83c9	90 05		        bcc aaddr           ;   use only the high byte to determine page
.83cb	cc 08 01	        cpy digcnt          ; for decimal or hex, force non-zero page addressing
.83ce	f0 06		        beq afill0          ;   if address was given with four digits or more
.83d0	a5 c2		aaddr   lda tmp0+1          ; check whether high byte of address is zero
.83d2	d0 02		        bne afill0          ; non-zero high byte means we're not in zero page
.83d4	a0 02		        ldy #2              ; if it's in zero page, addr is 2 hex digits
.83d6	a9 30		afill0  lda #$30            ; use 0 as placeholder for each hex digit in addr
.83d8	9d 0d 01	afil0l  sta u0aa0,x         ; put placeholder in assembly buffer
.83db	e8		        inx                 ; move to next byte in buffer
.83dc	88		        dey                 ; decrement number of remaining digits
.83dd	d0 f9		        bne afil0l          ; loop until all digits have been placed
.83df	ce 31 02	aform0  dec chrpnt          ; non-numeric input; back 1 char to see what it was
.83e2	20 4c 87	aform1  jsr getchr          ; get next character
.83e5	f0 0e		        beq aescan          ; if there is none, we're finished scanning
.83e7	c9 20		        cmp #$20            ; skip spaces
.83e9	f0 c5		        beq ascan
.83eb	9d 0d 01	        sta u0aa0,x         ; store character in assembly buffer
.83ee	e8		        inx                 ; move to next byte in buffer
.83ef	e0 0a		        cpx #u0aae-u0aa0    ; is instruction buffer full?
.83f1	90 bd		        bcc ascan           ; if not, keep scanning
.83f3	b0 b6		        bcs aerror          ; error if buffer is full
.83f5	8e 2f 02	aescan  stx store           ; save number of bytes in assembly buffer
.83f8	a2 00		        ldx #0              ; start at opcode $00 and check every one until
.83fa	8e 06 01	        stx opcode          ;   we find one that matches our criteria
.83fd	a2 00		atryop  ldx #0
.83ff	8e 33 02	        stx u9f             ; reset index into work buffer
.8402	ad 06 01	        lda opcode
.8405	20 bc 85	        jsr instxx          ; look up instruction format for current opcode
.8408	ae 00 01	        ldx acmd            ; save addressing command for later
.840b	8e 30 02	        stx store+1
.840e	aa		        tax                 ; use current opcode as index
.840f	bd dc 8a	        lda mnemr,x         ; check right byte of compressed mnemonic
.8412	20 e3 84	        jsr chekop
.8415	bd 9c 8a	        lda mneml,x         ; check left byte of compressed mnemonic
.8418	20 e3 84	        jsr chekop
.841b	a2 06		        ldx #6              ; 6 possible characters to check against operand
.841d	e0 03		tryit   cpx #3              ; are we on character 3?
.841f	d0 14		        bne trymod          ; if not, check operand characters
.8421	ac 01 01	        ldy length          ; otherwise, check number of bytes in operand
.8424	f0 0f		        beq trymod          ; if zero, check operand characters
.8426	ad 00 01	tryad   lda acmd            ; otherwise, look for an address
.8429	c9 e8		        cmp #$e8            ; special case for relative addressing mode
.842b	a9 30		        lda #$30            ; '0' is the digit placeholder we're looking for
.842d	b0 1e		        bcs try4b           ; acmd >= $e8 indicates relative addressing
.842f	20 e0 84	        jsr chek2b          ; acmd < $e8 indicates normal addressing
.8432	88		        dey                 ; consume byte
.8433	d0 f1		        bne tryad           ; check for 2 more digits if not zero-page
.8435	0e 00 01	trymod  asl acmd            ; shift a bit out of the addressing command
.8438	90 0e		        bcc ub4df           ; if it's zero, skip checking current character
.843a	bd 8f 8a	        lda char1-1,x
.843d	20 e3 84	        jsr chekop          ; otherwise first character against operand
.8440	bd 95 8a	        lda char2-1,x       ; get second character to check
.8443	f0 03		        beq ub4df           ; if it's zero, skip checking it
.8445	20 e3 84	        jsr chekop          ; otherwise check it against hte operand
.8448	ca		ub4df   dex                 ; move to next character
.8449	d0 d2		        bne tryit           ; repeat tests
.844b	f0 06		        beq trybran
.844d	20 e0 84	try4b   jsr chek2b          ; check for 4 digit address placeholder
.8450	20 e0 84	        jsr chek2b          ;   by checking for 2 digits twice
.8453	ad 2f 02	trybran lda store           ; get number of bytes in assembly buffer
.8456	cd 33 02	        cmp u9f             ; more bytes left to check?
.8459	f0 03		        beq abran           ; if not, we've found a match; build instruction
.845b	4c f0 84	        jmp bumpop          ; if so, this opcode doesn't match; try the next
.845e	ac 01 01	abran   ldy length          ; get number of bytes in operand
.8461	f0 32		        beq a1byte          ; if none, just output the opcode
.8463	ad 30 02	        lda store+1         ; otherwise check the address format
.8466	c9 9d		        cmp #$9d            ; is it a relative branch?
.8468	d0 23		        bne objput          ; if not, skip relative branch calculation
.846a	a5 c1		        lda tmp0            ; calculate the difference between the current
.846c	e5 c3		        sbc tmp2            ;   address and the branch target (low byte)
.846e	aa		        tax                 ; save it in x
.846f	a5 c2		        lda tmp0+1          ; borrow from the high byte if necessary
.8471	e5 c4		        sbc tmp2+1
.8473	90 08		        bcc abback          ; if result is negative, we're branching back
.8475	d0 66		        bne serror          ; high bytes must be equal when branching forward
.8477	e0 82		        cpx #$82            ; difference between low bytes must be < 130
.8479	b0 62		        bcs serror          ; error if the address is too far away
.847b	90 08		        bcc abranx
.847d	a8		abback  tay                 ; when branching backward high byte of target must
.847e	c8		        iny                 ;   be 1 less than high byte of current address
.847f	d0 5c		        bne serror          ; if not, it's too far away
.8481	e0 82		        cpx #$82            ; difference between low bytes must be < 130
.8483	90 58		        bcc serror          ; if not, it's too far away
.8485	ca		abranx  dex                 ; adjust branch target relative to the
.8486	ca		        dex                 ;   instruction following this one
.8487	8a		        txa
.8488	ac 01 01	        ldy length          ; load length of operand
.848b	d0 03		        bne objp2           ; don't use the absolute address
.848d	b9 c0 00	objput  lda tmp0-1,y        ; get the operand
.8490	91 c3		objp2   sta (tmp2),y        ; store it after the opcode
.8492	88		        dey
.8493	d0 f8		        bne objput          ; copy the other byte of operand if there is one
.8495	ad 06 01	a1byte  lda opcode          ; put opcode into instruction
.8498	91 c3		        sta (tmp2),y
.849a	20 0b 87	        jsr crlf            ; carriage return
.849d	a9 91		        lda #$91            ; back up one line
.849f	20 d2 ff	        jsr chrout
.84a2	a0 2e		        ldy #msg7-msgbas    ; "a " prefix
.84a4	20 9f 89	        jsr sndclr          ; clear line
.84a7	20 3e 85	        jsr dislin          ; disassemble the instruction we just assembled
.84aa	ee 01 01	        inc length          ; instruction length = operand length + 1 byte
.84ad	ad 01 01	        lda length          ;   for the opcode
.84b0	20 a5 87	        jsr bumpad2         ; increment address by length of instruction
.84b3	a9 41		        lda #"a"            ; stuff keyboard buffer with next assemble command:
.84b5	8d 77 02	        sta keyd            ;   "a xxxx " where xxxx is the next address
.84b8	a9 20		        lda #" "            ;   after the previously assembled instruction
.84ba	8d 78 02	        sta keyd+1
.84bd	8d 7d 02	        sta keyd+6
.84c0	a5 c4		        lda tmp2+1          ; convert high byte of next address to hex
.84c2	20 34 87	        jsr asctwo
.84c5	8d 79 02	        sta keyd+2          ; put it in the keyboard buffer
.84c8	8e 7a 02	        stx keyd+3
.84cb	a5 c3		        lda tmp2            ; convert low byte of next address to hex
.84cd	20 34 87	        jsr asctwo
.84d0	8d 7b 02	        sta keyd+4          ; put it in the keyboard buffer
.84d3	8e 7c 02	        stx keyd+5
.84d6	a9 07		        lda #7              ; set number of chars in keyboard buffer
.84d8	85 c6		        sta ndx
.84da	4c 8f 80	        jmp strt            ; back to main loop
.84dd	4c be 80	serror  jmp error           ; handle error
.84e0	20 e3 84	chek2b  jsr chekop          ; check two bytes against value in accumulator
.84e3	8e 05 01	chekop  stx savx            ; stash x
.84e6	ae 33 02	        ldx u9f             ; get current index into work buffer
.84e9	dd 0d 01	        cmp u0aa0,x         ; check whether this opcode matches the buffer
.84ec	f0 0a		        beq opok            ;   matching so far, check the next criteria
.84ee	68		        pla                 ; didn't match, so throw away return address
.84ef	68		        pla                 ;   on the stack because we're starting over
.84f0	ee 06 01	bumpop  inc opcode          ; check the next opcode
.84f3	f0 e8		        beq serror          ; error if we tried every opcode and none fit
.84f5	4c fd 83	        jmp atryop          ; start over with new opcode
.84f8	ee 33 02	opok    inc u9f             ; opcode matches so far; check the next criteria
.84fb	ae 05 01	        ldx savx            ; restore x
.84fe	60		        rts
.84ff	b0 08		disass  bcs dis0ad          ; if no address was given, start from last address
.8501	20 66 87	        jsr copy12          ; copy start address to tmp2
.8504	20 2d 86	        jsr getpar          ; get end address in tmp0
.8507	90 06		        bcc dis2ad          ; if one was given, skip default
.8509	a9 14		dis0ad  lda #$14            ; disassemble 14 bytes by default
.850b	85 c1		        sta tmp0            ; store length in tmp0
.850d	d0 05		        bne disgo           ; skip length calculation
.850f	20 6f 87	dis2ad  jsr sub12           ; calculate number of bytes between start and end
.8512	90 1f		        bcc derror          ; error if end address is before start address
.8514	20 99 89	disgo   jsr cline           ; clear the current line
.8517	20 e1 ff	        jsr stop            ; check for stop key
.851a	f0 14		        beq disexit         ; exit early if pressed
.851c	20 36 85	        jsr dsout1          ; output disassembly prefix ". "
.851f	ee 01 01	        inc length
.8522	ad 01 01	        lda length          ; add length of last instruction to start address
.8525	20 a5 87	        jsr bumpad2
.8528	ad 01 01	        lda length          ; subtract length of last inst from end address
.852b	20 7f 87	        jsr suba2
.852e	b0 e4		        bcs disgo
.8530	4c 8f 80	disexit jmp strt            ; back to mainloop
.8533	4c be 80	derror  jmp error
.8536	a9 2e		dsout1  lda #"."            ; output ". " prefix to allow edit and reassemble
.8538	20 d2 ff	        jsr chrout
.853b	20 03 87	        jsr space
.853e	20 f6 86	dislin  jsr showad          ; show the address of the instruction
.8541	20 03 87	        jsr space           ; insert a space
.8544	a0 00		        ldy #0              ; no offset
.8546	b1 c3		        lda (tmp2),y        ; load operand of current instruction
.8548	20 bc 85	        jsr instxx          ; get mnemonic and addressing mode for opcode
.854b	48		        pha                 ; save index into mnemonic table
.854c	ae 01 01	        ldx length          ; get length of operand
.854f	e8		        inx                 ; add 1 byte for opcode
.8550	ca		dsbyt   dex                 ; decrement index
.8551	10 0e		        bpl dshex           ; show hex for byte being disassembled
.8553	8c 32 02	        sty savy            ; save index
.8556	a0 30		        ldy #msg8-msgbas    ; skip 3 spaces
.8558	20 b2 89	        jsr sndmsg
.855b	ac 32 02	        ldy savy            ; restore index
.855e	4c 66 85	        jmp nxbyt
.8561	b1 c3		dshex   lda (tmp2),y        ; show hex for byte
.8563	20 00 87	        jsr wrbyte
.8566	c8		nxbyt   iny                 ; next byte
.8567	c0 03		        cpy #3              ; have we output 3 bytes yet?
.8569	90 e5		        bcc dsbyt           ; if not, loop
.856b	68		        pla                 ; restore index into mnemonic table
.856c	a2 03		        ldx #3              ; 3 letters in mnemonic
.856e	20 04 86	        jsr propxx          ; print mnemonic
.8571	a2 06		        ldx #6              ; 6 possible address mode character combos
.8573	e0 03		pradr1  cpx #3              ; have we checked the third combo yet?
.8575	d0 16		        bne pradr3          ; if so, output the leading characters
.8577	ac 01 01	        ldy length          ; get the length of the operand
.857a	f0 11		        beq pradr3          ; if it's zero, there's no operand to print
.857c	ad 00 01	pradr2  lda acmd            ; otherwise, get the addressing mode
.857f	c9 e8		        cmp #$e8            ; check for relative addressing
.8581	08		        php                 ; save result of check
.8582	b1 c3		        lda (tmp2),y        ; get the operand
.8584	28		        plp                 ; restore result of check
.8585	b0 1d		        bcs relad           ; handle a relative address
.8587	20 24 87	        jsr wrtwo           ; output digits from address
.858a	88		        dey
.858b	d0 ef		        bne pradr2          ; repeat for next byte of operand, if there is one
.858d	0e 00 01	pradr3  asl acmd            ; check whether addr mode uses the current char
.8590	90 0e		        bcc pradr4          ; if not, skip it
.8592	bd 8f 8a	        lda char1-1,x       ; look up the first char in the table
.8595	20 d2 ff	        jsr chrout          ; print first char
.8598	bd 95 8a	        lda char2-1,x       ; look up the second char in the table
.859b	f0 03		        beq pradr4          ; if there's no second character, skip it
.859d	20 d2 ff	        jsr chrout          ; print second char
.85a0	ca		pradr4  dex                 ; next potential address mode character
.85a1	d0 d0		        bne pradr1          ; loop if we haven't checked them all yet
.85a3	60		        rts                 ; back to caller
.85a4	20 b0 85	relad   jsr ub64d           ; calculate absolute address from relative
.85a7	18		        clc
.85a8	69 01		        adc #1              ; adjust address relative to next instruction
.85aa	d0 01		        bne relend          ; don't increment high byte unless we overflowed
.85ac	e8		        inx                 ; increment high byte
.85ad	4c fa 86	relend  jmp wraddr          ; print address
.85b0	a6 c4		ub64d   ldx tmp2+1          ; get high byte of current address
.85b2	a8		        tay                 ; is relative address positive or negative?
.85b3	10 01		        bpl relc2           ; if positive, leave high byte alone
.85b5	ca		        dex                 ; if negative, decrement high byte
.85b6	65 c3		relc2   adc tmp2            ; add relative address to low byte
.85b8	90 01		        bcc relc3           ; if there's no carry, we're done
.85ba	e8		        inx                 ; if there's a carry, increment the high byte
.85bb	60		relc3   rts
.85bc	a8		instxx  tay                 ; stash opcode in accumulator in y for later
.85bd	4a		        lsr a               ; is opcode even or odd?
.85be	90 0b		        bcc ieven
.85c0	4a		        lsr a
.85c1	b0 17		        bcs err             ; invalid opcodes xxxxxx11
.85c3	c9 22		        cmp #$22
.85c5	f0 13		        beq err             ; invalid opcode 10001001
.85c7	29 07		        and #$07            ; mask bits to 10000xxx
.85c9	09 80		        ora #$80
.85cb	4a		ieven   lsr a               ; lsb determines whether to use left/right nybble
.85cc	aa		        tax                 ; get format index using remaining high bytes
.85cd	bd 3e 8a	        lda mode,x
.85d0	b0 04		        bcs rtmode          ; look at left or right nybble based on carry bit
.85d2	4a		        lsr a               ; if carry = 0, use left nybble
.85d3	4a		        lsr a
.85d4	4a		        lsr a
.85d5	4a		        lsr a
.85d6	29 0f		rtmode  and #$0f            ; if carry = 1, use right nybble
.85d8	d0 04		        bne getfmt
.85da	a0 80		err     ldy #$80            ; substitute 10000000 for invalid opcodes
.85dc	a9 00		        lda #0
.85de	aa		getfmt  tax
.85df	bd 82 8a	        lda mode2,x         ; lookup operand format using selected nybble
.85e2	8d 00 01	        sta acmd            ; save for later use
.85e5	29 03		        and #$03            ; lower 2 bits indicate number of bytes in operand
.85e7	8d 01 01	        sta length
.85ea	98		        tya                 ; restore original opcode
.85eb	29 8f		        and #$8f            ; mask bits to x000xxxx
.85ed	aa		        tax                 ; save it
.85ee	98		        tya                 ; restore original opcode
.85ef	a0 03		        ldy #3
.85f1	e0 8a		        cpx #$8a            ; check if opcode = 1xxx1010
.85f3	f0 0b		        beq gtfm4
.85f5	4a		gtfm2   lsr a               ; transform opcode into index for mnemonic table
.85f6	90 08		        bcc gtfm4
.85f8	4a		        lsr a               ; opcodes transformed as follows:
.85f9	4a		gtfm3   lsr a               ; 1xxx1010->00101xxx
.85fa	09 20		        ora #$20            ; xxxyyy01->00111xxx
.85fc	88		        dey                 ; xxxyyy10->00111xxx
.85fd	d0 fa		        bne gtfm3           ; xxxyy100->00110xxx
.85ff	c8		        iny                 ; xxxxx000->000xxxxx
.8600	88		gtfm4   dey
.8601	d0 f2		        bne gtfm2
.8603	60		        rts
.8604	a8		propxx  tay                 ; use index in accumulator to look up mnemonic
.8605	b9 9c 8a	        lda mneml,y         ;   and place a temporary copy in store
.8608	8d 2f 02	        sta store
.860b	b9 dc 8a	        lda mnemr,y
.860e	8d 30 02	        sta store+1
.8611	a9 00		prmn1   lda #0              ; clear accumulator
.8613	a0 05		        ldy #$05            ; shift 5 times
.8615	0e 30 02	prmn2   asl store+1         ; shift right byte
.8618	2e 2f 02	        rol store           ; rotate bits from right byte into left byte
.861b	2a		        rol a               ; rotate bits from left byte into accumulator
.861c	88		        dey                 ; next bit
.861d	d0 f6		        bne prmn2           ; loop until all bits shifted
.861f	69 3f		        adc #$3f            ; calculate ascii code for letter by adding to '?'
.8621	20 d2 ff	        jsr chrout          ; output letter
.8624	ca		        dex                 ; next letter
.8625	d0 ea		        bne prmn1           ; loop until all 3 letters are output
.8627	4c 03 87	        jmp space           ; output space
.862a	ce 31 02	rdpar   dec chrpnt          ; back up one char
.862d	20 55 86	getpar  jsr rdval           ; read the value
.8630	b0 17		        bcs gterr           ; carry set indicates error
.8632	20 49 87	        jsr gotchr          ; check previous character
.8635	d0 0a		        bne ckterm          ; if it's not null, check if it's a valid separator
.8637	ce 31 02	        dec chrpnt          ; back up one char
.863a	ad 08 01	        lda digcnt          ; get number of digits read
.863d	d0 11		        bne getgot          ; found some digits
.863f	f0 0d		        beq gtnil           ; didn't find any digits
.8641	c9 20		ckterm  cmp #$20            ; space or comma are valid separators
.8643	f0 0b		        beq getgot          ; anything else is an error
.8645	c9 2c		        cmp #","
.8647	f0 07		        beq getgot
.8649	68		gterr   pla                 ; encountered error
.864a	68		        pla                 ; get rid of command vector pushed on stack
.864b	4c be 80	        jmp error           ; handle error
.864e	38		gtnil   sec                 ; set carry to indicate no parameter found
>864f	24		        .byte $24           ; bit zp opcode consumes next byte (clc)
.8650	18		getgot  clc                 ; clear carry to indicate paremeter returned
.8651	ad 08 01	        lda digcnt          ; return number of digits in a
.8654	60		        rts                 ; return to address pushed from vector table
.8655	a9 00		rdval   lda #0              ; clear temp
.8657	85 c1		        sta tmp0
.8659	85 c2		        sta tmp0+1
.865b	8d 08 01	        sta digcnt          ; clear digit counter
.865e	8a		        txa                 ; save x and y
.865f	48		        pha
.8660	98		        tya
.8661	48		        pha
.8662	20 4c 87	rdvmor  jsr getchr          ; get next character from input buffer
.8665	f0 1e		        beq rdnilk          ; null at end of buffer
.8667	c9 20		        cmp #$20            ; skip spaces
.8669	f0 f7		        beq rdvmor
.866b	a2 03		        ldx #3              ; check numeric base [$+&%]
.866d	dd 2f 8b	gnmode  cmp hikey,x
.8670	f0 07		        beq gotmod          ; got a match, set up base
.8672	ca		        dex
.8673	10 f8		        bpl gnmode          ; check next base
.8675	e8		        inx                 ; default to hex
.8676	ce 31 02	        dec chrpnt          ; back up one character
.8679	bc 54 8b	gotmod  ldy modtab,x        ; get base value
.867c	bd 58 8b	        lda lentab,x        ; get bits per digit
.867f	8d 0a 01	        sta numbit          ; store bits per digit
.8682	20 4c 87	nudig   jsr getchr          ; get next char in a
.8685	f0 63		rdnilk  beq rdnil           ; end of number if no more characters
.8687	38		        sec
.8688	e9 30		        sbc #$30            ; subtract ascii value of 0 to get numeric value
.868a	90 5e		        bcc rdnil           ; end of number if character was less than 0
.868c	c9 0a		        cmp #$0a
.868e	90 06		        bcc digmor          ; not a hex digit if less than a
.8690	e9 07		        sbc #$07            ; 7 chars between ascii 9 and a, so subtract 7
.8692	c9 10		        cmp #$10            ; end of number if char is greater than f
.8694	b0 54		        bcs rdnil
.8696	8d 09 01	digmor  sta indig           ; store the digit
.8699	cc 09 01	        cpy indig           ; compare base with the digit
.869c	90 4a		        bcc rderr           ; error if the digit >= the base
.869e	f0 48		        beq rderr
.86a0	ee 08 01	        inc digcnt          ; increment the number of digits
.86a3	c0 0a		        cpy #10
.86a5	d0 0a		        bne nodecm          ; skip the next part if not using base 10
.86a7	a2 01		        ldx #1
.86a9	b5 c1		declp1  lda tmp0,x          ; stash the previous 16-bit value for later use
.86ab	9d 0b 01	        sta stash,x
.86ae	ca		        dex
.86af	10 f8		        bpl declp1
.86b1	ae 0a 01	nodecm  ldx numbit          ; number of bits to shift
.86b4	06 c1		times2  asl tmp0            ; shift 16-bit value by specified number of bits
.86b6	26 c2		        rol tmp0+1
.86b8	b0 2e		        bcs rderr           ; error if we overflowed 16 bits
.86ba	ca		        dex
.86bb	d0 f7		        bne times2          ; shift remaining bits
.86bd	c0 0a		        cpy #10
.86bf	d0 18		        bne nodec2          ; skip the next part if not using base 10
.86c1	0e 0b 01	        asl stash           ; shift the previous 16-bit value one bit left
.86c4	2e 0c 01	        rol stash+1
.86c7	b0 1f		        bcs rderr           ; error if we overflowed 16 bits
.86c9	ad 0b 01	        lda stash           ; add shifted previous value to current value
.86cc	65 c1		        adc tmp0
.86ce	85 c1		        sta tmp0
.86d0	ad 0c 01	        lda stash+1
.86d3	65 c2		        adc tmp0+1
.86d5	85 c2		        sta tmp0+1
.86d7	b0 0f		        bcs rderr           ; error if we overflowed 16 bits
.86d9	18		nodec2  clc
.86da	ad 09 01	        lda indig           ; load current digit
.86dd	65 c1		        adc tmp0            ; add current digit to low byte
.86df	85 c1		        sta tmp0            ; and store result back in low byte
.86e1	8a		        txa                 ; a=0
.86e2	65 c2		        adc tmp0+1          ; add carry to high byte
.86e4	85 c2		        sta tmp0+1          ; and store result back in high byte
.86e6	90 9a		        bcc nudig           ; get next digit if we didn't overflow
.86e8	38		rderr   sec                 ; set carry to indicate error
>86e9	24		        .byte $24           ; bit zp opcode consumes next byte (clc)
.86ea	18		rdnil   clc                 ; clear carry to indicate success
.86eb	8c 0a 01	        sty numbit          ; save base of number
.86ee	68		        pla                 ; restore x and y
.86ef	a8		        tay
.86f0	68		        pla
.86f1	aa		        tax
.86f2	ad 08 01	        lda digcnt          ; return number of digits in a
.86f5	60		        rts
.86f6	a5 c3		showad  lda tmp2
.86f8	a6 c4		        ldx tmp2+1
.86fa	48		wraddr  pha                 ; save low byte
.86fb	8a		        txa                 ; put high byte in a
.86fc	20 24 87	        jsr wrtwo           ; output high byte
.86ff	68		        pla                 ; restore low byte
.8700	20 24 87	wrbyte  jsr wrtwo           ; output byte in a
.8703	a9 20		space   lda #$20            ; output space
.8705	d0 0f		        bne flip
.8707	c9 0d		chout   cmp #$0d            ; output char with special handling of cr
.8709	d0 0b		        bne flip
.870b	a9 0d		crlf    lda #$0d            ; load cr in a
.870d	24 13		        bit $13             ; check default channel
.870f	10 05		        bpl flip            ; if high bit is clear output cr only
.8711	20 d2 ff	        jsr chrout          ; otherwise output cr+lf
.8714	a9 0a		        lda #$0a            ; output lf
.8716	4c d2 ff	flip    jmp chrout
.8719	20 0b 87	fresh   jsr crlf            ; output cr
.871c	a9 20		        lda #$20            ; load space in a
.871e	20 d2 ff	        jsr chrout
.8721	4c a2 89	        jmp snclr
.8724	8e 05 01	wrtwo   stx savx            ; save x
.8727	20 34 87	        jsr asctwo          ; get hex chars for byte in x (lower) and a (upper)
.872a	20 d2 ff	        jsr chrout          ; output upper nybble
.872d	8a		        txa                 ; transfer lower to a
.872e	ae 05 01	        ldx savx            ; restore x
.8731	4c d2 ff	        jmp chrout          ; output lower nybble
.8734	48		asctwo  pha                 ; save byte
.8735	20 3e 87	        jsr ascii           ; do low nybble
.8738	aa		        tax                 ; save in x
.8739	68		        pla                 ; restore byte
.873a	4a		        lsr a               ; shift upper nybble down
.873b	4a		        lsr a
.873c	4a		        lsr a
.873d	4a		        lsr a
.873e	29 0f		ascii   and #$0f            ; clear upper nibble
.8740	c9 0a		        cmp #$0a            ; if less than a, skip next step
.8742	90 02		        bcc asc1
.8744	69 06		        adc #6              ; skip ascii chars between 9 and a
.8746	69 30		asc1    adc #$30            ; add ascii char 0 to value
.8748	60		        rts
.8749	ce 31 02	gotchr  dec chrpnt
.874c	8e 05 01	getchr  stx savx
.874f	ae 31 02	        ldx chrpnt          ; get pointer to next char
.8752	bd 00 02	        lda inbuff,x        ; load next char in a
.8755	f0 06		        beq nochar          ; null, :, or ? signal end of buffer
.8757	c9 3a		        cmp #":"
.8759	f0 02		        beq nochar
.875b	c9 3f		        cmp #"?"
.875d	08		nochar  php
.875e	ee 31 02	        inc chrpnt          ; next char
.8761	ae 05 01	        ldx savx
.8764	28		        plp                 ; z flag will signal last character
.8765	60		        rts
.8766	a5 c1		copy12  lda tmp0            ; low byte
.8768	85 c3		        sta tmp2
.876a	a5 c2		        lda tmp0+1          ; high byte
.876c	85 c4		        sta tmp2+1
.876e	60		        rts
.876f	38		sub12   sec
.8770	a5 c1		        lda tmp0            ; subtract low byte
.8772	e5 c3		        sbc tmp2
.8774	85 c1		        sta tmp0
.8776	a5 c2		        lda tmp0+1
.8778	e5 c4		        sbc tmp2+1          ; subtract high byte
.877a	85 c2		        sta tmp0+1
.877c	60		        rts
.877d	a9 01		suba1   lda #1              ; shortcut to decrement by 1
.877f	8d 05 01	suba2   sta savx            ; subtrahend in accumulator
.8782	38		        sec
.8783	a5 c1		        lda tmp0            ; minuend in low byte
.8785	ed 05 01	        sbc savx
.8788	85 c1		        sta tmp0
.878a	a5 c2		        lda tmp0+1          ; borrow from high byte
.878c	e9 00		        sbc #0
.878e	85 c2		        sta tmp0+1
.8790	60		        rts
.8791	38		sub13   sec
.8792	ad 2f 02	        lda store
.8795	e9 01		        sbc #1              ; decrement low byte
.8797	8d 2f 02	        sta store
.879a	ad 30 02	        lda store+1
.879d	e9 00		        sbc #0              ; borrow from high byte
.879f	8d 30 02	        sta store+1
.87a2	60		        rts
.87a3	a9 01		adda2   lda #1              ; shortcut to increment by 1
.87a5	18		bumpad2 clc
.87a6	65 c3		        adc tmp2            ; add value in accumulator to low byte
.87a8	85 c3		        sta tmp2
.87aa	90 02		        bcc bumpex
.87ac	e6 c4		        inc tmp2+1          ; carry to high byte
.87ae	60		bumpex  rts
.87af	38		sub21   sec
.87b0	a5 c3		        lda tmp2            ; decrement low byte
.87b2	e9 01		        sbc #1
.87b4	85 c3		        sta tmp2
.87b6	a5 c4		        lda tmp2+1          ; borrow from high byte
.87b8	e9 00		        sbc #0
.87ba	85 c4		        sta tmp2+1
.87bc	60		        rts
.87bd	b0 0a		copy1p  bcs cpy1px          ; do nothing if parameter is empty
.87bf	a5 c1		        lda tmp0            ; copy low byte
.87c1	a4 c2		        ldy tmp0+1          ; copy high byte
.87c3	8d 29 02	        sta pcl
.87c6	8c 28 02	        sty pch
.87c9	60		cpy1px  rts
.87ca	b0 23		getdif  bcs gdifx           ; exit with error if no parameter given
.87cc	20 66 87	        jsr copy12          ; save start address in tmp2
.87cf	20 2d 86	        jsr getpar          ; get end address in tmp0
.87d2	b0 1b		        bcs gdifx           ; exit with error if no parameter given
.87d4	a5 c1		        lda tmp0            ; save end address in stash
.87d6	8d 0b 01	        sta stash
.87d9	a5 c2		        lda tmp0+1
.87db	8d 0c 01	        sta stash+1
.87de	20 6f 87	        jsr sub12           ; subtract start address from end address
.87e1	a5 c1		        lda tmp0
.87e3	8d 2f 02	        sta store           ; save difference in store
.87e6	a5 c2		        lda tmp0+1
.87e8	8d 30 02	        sta store+1
.87eb	90 02		        bcc gdifx           ; error if start address is after end address
.87ed	18		        clc                 ; clear carry to indicate success
>87ee	24		        .byte $24           ; bit zp opcode consumes next byte (sec)
.87ef	38		gdifx   sec                 ; set carry to indicate error
.87f0	60		        rts
.87f1	20 2a 86	convrt  jsr rdpar           ; read a parameter
.87f4	20 19 87	        jsr fresh           ; next line and clear
.87f7	a9 24		        lda #"$"            ; output $ sigil for hex
.87f9	20 d2 ff	        jsr chrout
.87fc	a5 c1		        lda tmp0            ; load the 16-bit value entered
.87fe	a6 c2		        ldx tmp0+1
.8800	20 fa 86	        jsr wraddr          ; print it in 4 hex digits
.8803	20 19 87	        jsr fresh
.8806	a9 2b		        lda #"+"            ; output + sigil for decimal
.8808	20 d2 ff	        jsr chrout
.880b	20 3c 88	        jsr cvtdec          ; convert to bcd using hardware mode
.880e	a9 00		        lda #0              ; clear digit counter
.8810	a2 06		        ldx #6              ; max digits + 1
.8812	a0 03		        ldy #3              ; bits per digit - 1
.8814	20 76 88	        jsr nmprnt          ; print result without leading zeros
.8817	20 19 87	        jsr fresh           ; next line and clear
.881a	a9 26		        lda #"&"            ; print & sigil for octal
.881c	20 d2 ff	        jsr chrout
.881f	a9 00		        lda #0              ; clear digit counter
.8821	a2 08		        ldx #8              ; max digits + 1
.8823	a0 02		        ldy #2              ; bits per digit - 1
.8825	20 65 88	        jsr prinum          ; output number
.8828	20 19 87	        jsr fresh           ; next line and clear
.882b	a9 25		        lda #"%"            ; print % sigil for binary
.882d	20 d2 ff	        jsr chrout
.8830	a9 00		        lda #0              ; clear digit counter
.8832	a2 18		        ldx #$18            ; max digits + 1
.8834	a0 00		        ldy #0              ; bits per digit - 1
.8836	20 65 88	        jsr prinum          ; output number
.8839	4c 8f 80	        jmp strt            ; back to mainloop
.883c	20 66 87	cvtdec  jsr copy12          ; copy value from tmp0 to tmp2
.883f	a9 00		        lda #0
.8841	a2 02		        ldx #2              ; clear 3 bytes in work buffer
.8843	9d 0d 01	decml1  sta u0aa0,x
.8846	ca		        dex
.8847	10 fa		        bpl decml1
.8849	a0 10		        ldy #16             ; 16 bits in input
.884b	08		        php                 ; save status register
.884c	78		        sei                 ; make sure no interrupts occur with bcd enabled
.884d	f8		        sed
.884e	06 c3		decml2  asl tmp2            ; rotate bytes out of input low byte
.8850	26 c4		        rol tmp2+1          ; .. into high byte and carry bit
.8852	a2 02		        ldx #2              ; process 3 bytes
.8854	bd 0d 01	decdbl  lda u0aa0,x         ; load current value of byte
.8857	7d 0d 01	        adc u0aa0,x         ; add it to itself plus the carry bit
.885a	9d 0d 01	        sta u0aa0,x         ; store it back in the same location
.885d	ca		        dex                 ; decrement byte counter
.885e	10 f4		        bpl decdbl          ; loop until all bytes processed
.8860	88		        dey                 ; decrement bit counter
.8861	d0 eb		        bne decml2          ; loop until all bits processed
.8863	28		        plp                 ; restore processor status
.8864	60		        rts
.8865	48		prinum  pha                 ; save accumulator
.8866	a5 c1		        lda tmp0            ; copy input low byte to work buffer
.8868	8d 0f 01	        sta u0aa0+2
.886b	a5 c2		        lda tmp0+1          ; copy input high byte to work buffer
.886d	8d 0e 01	        sta u0aa0+1
.8870	a9 00		        lda #0              ; clear overflow byte in work buffer
.8872	8d 0d 01	        sta u0aa0
.8875	68		        pla                 ; restore accumulator
.8876	8d 08 01	nmprnt  sta digcnt          ; number of digits in accumulator
.8879	8c 0a 01	        sty numbit          ; bits per digit passed in y register
.887c	ac 0a 01	digout  ldy numbit          ; get bits to process
.887f	a9 00		        lda #0              ; clear accumulator
.8881	0e 0f 01	rolbit  asl u0aa0+2         ; shift bits out of low byte
.8884	2e 0e 01	        rol u0aa0+1         ; ... into high byte
.8887	2e 0d 01	        rol u0aa0           ; ... into overflow byte
.888a	2a		        rol a               ; ... into accumulator
.888b	88		        dey                 ; decrement bit counter
.888c	10 f3		        bpl rolbit          ; loop until all bits processed
.888e	a8		        tay                 ; check whether accumulator is 0
.888f	d0 09		        bne nzero           ; if not, print it
.8891	e0 01		        cpx #1              ; have we output the max number of digits?
.8893	f0 05		        beq nzero           ; if not, print it
.8895	ac 08 01	        ldy digcnt          ; how many digits have we output?
.8898	f0 08		        beq zersup          ; skip output if digit is 0
.889a	ee 08 01	nzero   inc digcnt          ; increment digit counter
.889d	09 30		        ora #$30            ; add numeric value to ascii '0' to get ascii char
.889f	20 d2 ff	        jsr chrout          ; output character
.88a2	ca		zersup  dex                 ; decrement number of leading zeros
.88a3	d0 d7		        bne digout          ; next digit
.88a5	60		        rts
.88a6	d0 03		dstat   bne chgdev          ; if device address was given, use it
.88a8	a2 08		        ldx #8              ; otherwise, default to 8
>88aa	2c		        .byte $2c           ; absolute bit opcode consumes next word (ldx tmp0)
.88ab	a6 c1		chgdev  ldx tmp0            ; load device address from parameter
.88ad	e0 04		        cpx #4              ; make sure device address is in range 4-31
.88af	90 58		        bcc ioerr
.88b1	e0 20		        cpx #32
.88b3	b0 54		        bcs ioerr
.88b5	86 c1		        stx tmp0
.88b7	a9 00		        lda #0              ; clear status
.88b9	85 90		        sta satus
.88bb	85 b7		        sta fnlen           ; empty filename
.88bd	20 4c 87	        jsr getchr          ; get next character
.88c0	f0 24		        beq instat1         ; null, display status
.88c2	ce 31 02	        dec chrpnt          ; back up 1 char
.88c5	c9 24		        cmp #"$"            ; $, display directory
.88c7	f0 43		        beq direct
.88c9	a5 c1		        lda tmp0            ; command specified device to listen
.88cb	20 b1 ff	        jsr listen
.88ce	a9 6f		        lda #$6f            ; secondary address 15 (only low nybble used)
.88d0	20 93 ff	        jsr second
.88d3	ae 31 02	dcomd   ldx chrpnt          ; get next character from buffer
.88d6	ee 31 02	        inc chrpnt
.88d9	bd 00 02	        lda inbuff,x
.88dc	f0 05		        beq instat          ; break out of loop if it's null
.88de	20 a8 ff	        jsr ciout           ; otherwise output it to the serial bus
.88e1	90 f0		        bcc dcomd           ; unconditional loop: ciout clears carry before rts
.88e3	20 ae ff	instat  jsr unlsn           ; command device to unlisten
.88e6	20 0b 87	instat1 jsr crlf            ; new line
.88e9	a5 c1		        lda tmp0            ; load device address
.88eb	20 b4 ff	        jsr talk            ; command device to talk
.88ee	a9 6f		        lda #$6f            ; secondary address 15 (only low nybble used)
.88f0	20 96 ff	        jsr tksa
.88f3	20 a5 ff	rdstat  jsr acptr           ; read byte from serial bus
.88f6	20 d2 ff	        jsr chrout          ; print it
.88f9	c9 0d		        cmp #$0d            ; if the byte is cr, exit loop
.88fb	f0 06		        beq dexit
.88fd	a5 90		        lda satus           ; check status
.88ff	29 bf		        and #$bf            ; ignore eoi bit
.8901	f0 f0		        beq rdstat          ; if no errors, read next byte
.8903	20 ab ff	dexit   jsr untlk           ; command device to stop talking
.8906	4c 8f 80	        jmp strt            ; back to mainloop
.8909	4c be 80	ioerr   jmp error           ; handle error
.890c	a5 c1		direct  lda tmp0            ; load device address
.890e	20 b1 ff	        jsr listen          ; command device to listen
.8911	a9 f0		        lda #$f0            ; secondary address 0 (only low nybble used)
.8913	20 93 ff	        jsr second
.8916	ae 31 02	        ldx chrpnt          ; get index of next character
.8919	bd 00 02	dir2    lda inbuff,x        ; get next character from buffer
.891c	f0 06		        beq dir3            ; break if it's null
.891e	20 a8 ff	        jsr ciout           ; send character to device
.8921	e8		        inx                 ; increment characer index
.8922	d0 f5		        bne dir2            ; loop if it hasn't wrapped to zero
.8924	20 ae ff	dir3    jsr unlsn           ; command device to unlisten
.8927	20 0b 87	        jsr crlf            ; new line
.892a	a5 c1		        lda tmp0            ; load device address
.892c	48		        pha                 ; save on stack
.892d	20 b4 ff	        jsr talk            ; command device to talk
.8930	a9 60		        lda #$60            ; secondary address 0 (only low nybble used)
.8932	20 96 ff	        jsr tksa
.8935	a0 03		        ldy #3              ; read 3 16-bit values from device
.8937	8c 2f 02	dirlin  sty store           ;   ignore the first 2; 3rd is file size
.893a	20 a5 ff	dlink   jsr acptr           ; read low byte from device
.893d	85 c1		        sta tmp0            ; store it
.893f	a5 90		        lda satus           ; check status
.8941	d0 44		        bne drexit          ; exit if error or eof occurred
.8943	20 a5 ff	        jsr acptr           ; read high byte from device
.8946	85 c2		        sta tmp0+1          ; store it
.8948	a5 90		        lda satus           ; check status
.894a	d0 3b		        bne drexit          ; exit if error or eof cocurred
.894c	ce 2f 02	        dec store           ; decrement byte count
.894f	d0 e9		        bne dlink           ; loop if bytes remain
.8951	20 3c 88	        jsr cvtdec          ; convert last 16-bit value to decimal
.8954	a9 00		        lda #0              ; clear digit count
.8956	a2 06		        ldx #6              ; max 6 digits
.8958	a0 03		        ldy #3              ; 3 bits per digit
.895a	20 76 88	        jsr nmprnt          ; output number
.895d	a9 20		        lda #" "            ; output space
.895f	20 d2 ff	        jsr chrout
.8962	20 a5 ff	dname   jsr acptr           ; get a filename character from the device
.8965	f0 0a		        beq dmore           ; if it's null, break out of loop
.8967	a6 90		        ldx satus           ; check for errors or eof
.8969	d0 1c		        bne drexit          ; if found exit early
.896b	20 d2 ff	        jsr chrout          ; output character
.896e	18		        clc
.896f	90 f1		        bcc dname           ; unconditional branch to read next char
.8971	20 0b 87	dmore   jsr crlf
.8974	20 e1 ff	        jsr stop            ; check for stop key
.8977	f0 0e		        beq drexit          ; exit early if pressed
.8979	20 e4 ff	        jsr getin           ; pause if a key was pressed
.897c	f0 05		        beq nopaws
.897e	20 e4 ff	paws    jsr getin           ; wait until another key is pressed
.8981	f0 fb		        beq paws
.8983	a0 02		nopaws  ldy #2
.8985	d0 b0		        bne dirlin          ; unconditional branch to read next file
.8987	20 ab ff	drexit  jsr untlk           ; command device to untalk
.898a	68		        pla                 ; restore accumulator
.898b	20 b1 ff	        jsr listen          ; command device to listen
.898e	a9 e0		        lda #$e0            ; secondary address 0 (only low nybble is used)
.8990	20 93 ff	        jsr second
.8993	20 ae ff	        jsr unlsn           ; command device to unlisten
.8996	4c 8f 80	        jmp strt            ; back to mainloop
.8999	20 0b 87	cline   jsr crlf            ; send cr+lf
.899c	4c a2 89	        jmp snclr           ; clear line
.899f	20 b2 89	sndclr  jsr sndmsg
.89a2	a0 28		snclr   ldy #$28            ; loop 40 times
.89a4	a9 20		snclp   lda #$20            ; output space character
.89a6	20 d2 ff	        jsr chrout
.89a9	a9 14		        lda #$14            ; output delete character
.89ab	20 d2 ff	        jsr chrout
.89ae	88		        dey
.89af	d0 f3		        bne snclp
.89b1	60		        rts
.89b2	b9 c0 89	sndmsg  lda msgbas,y        ; y contains offset in msg table
.89b5	08		        php
.89b6	29 7f		        and #$7f            ; strip high bit before output
.89b8	20 07 87	        jsr chout
.89bb	c8		        iny
.89bc	28		        plp
.89bd	10 f3		        bpl sndmsg          ; loop until high bit is set
.89bf	60		        rts
=$89c0			msgbas  =*
>89c0	0d		msg2    .byte $0d               ; header for registers
>89c1	20 20 20 50	        .text "   pc  sr ac xr yr sp   v1.2"
>89c5	43 20 20 53 52 20 41 43 20 58 52 20 59 52 20 53
>89d5	50 20 20 20 56 31 2e 32
>89dd	8d		        .byte $0d+$80
>89de	1d bf		msg3    .byte $1d,$3f+$80       ; syntax error: move right, display "?"
>89e0	2e 2e 53 59	msg4    .text "..sys"           ; sys call to enter monitor
>89e4	53
>89e5	a0		        .byte $20+$80
>89e6	3a 92		msg5    .byte $3a,$12+$80       ; ":" then rvs on for memory ascii dump
>89e8	20 45 52 52	msg6    .text " erro"           ; i/o error: display " error"
>89ec	4f
>89ed	d2		        .byte "r"+$80
>89ee	41 a0		msg7    .byte $41,$20+$80       ; assemble next instruction: "a " + addr
>89f0	20 20		msg8    .text "  "              ; pad non-existent byte: skip 3 spaces
>89f2	a0		        .byte $20+$80
>89f3	20 20 20 20	msg9    .text "      < < < < < supermon > > > > >"
>89f7	20 20 3c 20 3c 20 3c 20 3c 20 3c 20 53 55 50 45
>8a07	52 4d 4f 4e 20 3e 20 3e 20 3e 20 3e 20 3e
>8a15	8d		        .byte $0d+$80
>8a16	20 42 59 20	msga    .text " by jim butterfield  (r.i.p. 1936-2007)"
>8a1a	4a 49 4d 20 42 55 54 54 45 52 46 49 45 4c 44 20
>8a2a	20 28 52 2e 49 2e 50 2e 20 31 39 33 36 2d 32 30
>8a3a	30 37 29
>8a3d	8d		        .byte $0d+$80
>8a3e	40 02 45 03	mode    .byte $40,$02,$45,$03   ; even opcodes
>8a42	d0 08 40 09	        .byte $d0,$08,$40,$09
>8a46	30 22 45 33	        .byte $30,$22,$45,$33
>8a4a	d0 08 40 09	        .byte $d0,$08,$40,$09
>8a4e	40 02 45 33	        .byte $40,$02,$45,$33
>8a52	d0 08 40 09	        .byte $d0,$08,$40,$09
>8a56	40 02 45 b3	        .byte $40,$02,$45,$b3
>8a5a	d0 08 40 09	        .byte $d0,$08,$40,$09
>8a5e	00 22 44 33	        .byte $00,$22,$44,$33
>8a62	d0 8c 44 00	        .byte $d0,$8c,$44,$00
>8a66	11 22 44 33	        .byte $11,$22,$44,$33
>8a6a	d0 8c 44 9a	        .byte $d0,$8c,$44,$9a
>8a6e	10 22 44 33	        .byte $10,$22,$44,$33
>8a72	d0 08 40 09	        .byte $d0,$08,$40,$09
>8a76	10 22 44 33	        .byte $10,$22,$44,$33
>8a7a	d0 08 40 09	        .byte $d0,$08,$40,$09
>8a7e	62 13 78 a9	        .byte $62,$13,$78,$a9   ; opcodes ending in 01
>8a82	00		mode2   .byte $00   ; 000 000    00                  0   error
>8a83	21		        .byte $21   ; 001 000    01      #$00        1   immediate
>8a84	81		        .byte $81   ; 100 000    01      $00         2   zero-page
>8a85	82		        .byte $82   ; 100 000    10      $0000       3   absolute
>8a86	00		        .byte $00   ; 000 000    00                  4   implied
>8a87	00		        .byte $00   ; 000 000    00                  5   accumulator
>8a88	59		        .byte $59   ; 010 110    01      ($00,x)     6   indirect,x
>8a89	4d		        .byte $4d   ; 010 011    01      ($00),y     7   indirect,y
>8a8a	91		        .byte $91   ; 100 100    01      $00,x       8   zero-page,x
>8a8b	92		        .byte $92   ; 100 100    10      $0000,x     9   absolute,x
>8a8c	86		        .byte $86   ; 100 001    10      $0000,y     a   absolute,y
>8a8d	4a		        .byte $4a   ; 010 010    10      ($0000)     b   indirect
>8a8e	85		        .byte $85   ; 100 001    01      $00,y       c   zero-page,y
>8a8f	9d		        .byte $9d   ; 100 111    01      $0000*      d   relative
>8a90	2c 29 2c	char1   .byte $2c,$29,$2c       ; ","  ")"  ","
>8a93	23 28 24	        .byte $23,$28,$24       ; "#"  "("  "$"
>8a96	59 00 58	char2   .byte $59,$00,$58       ; "y"   0   "x"
>8a99	24 24 00	        .byte $24,$24,$00       ; "$"  "$"   0
>8a9c	1c 8a 1c 23	mneml   .byte $1c,$8a,$1c,$23   ; brk php bpl clc
>8aa0	5d 8b 1b a1	        .byte $5d,$8b,$1b,$a1   ; jsr plp bmi sec
>8aa4	9d 8a 1d 23	        .byte $9d,$8a,$1d,$23   ; rti pha bvc cli
>8aa8	9d 8b 1d a1	        .byte $9d,$8b,$1d,$a1   ; rts pla bvs sei
>8aac	00 29 19 ae	        .byte $00,$29,$19,$ae   ; ??? dey bcc tya
>8ab0	69 a8 19 23	        .byte $69,$a8,$19,$23   ; ldy tay bcs clv
>8ab4	24 53 1b 23	        .byte $24,$53,$1b,$23   ; cpy iny bne cld
>8ab8	24 53 19 a1	        .byte $24,$53,$19,$a1   ; cpx inx beq sed
>8abc	00 1a 5b 5b	        .byte $00,$1a,$5b,$5b   ; ??? bit jmp jmp
>8ac0	a5 69 24 24	        .byte $a5,$69,$24,$24   ; sty ldy cpy cpx
>8ac4	ae ae a8 ad	        .byte $ae,$ae,$a8,$ad   ; txa txs tax tsx
>8ac8	29 00 7c 00	        .byte $29,$00,$7c,$00   ; dex ??? nop ???
>8acc	15 9c 6d 9c	        .byte $15,$9c,$6d,$9c   ; asl rol lsr ror
>8ad0	a5 69 29 53	        .byte $a5,$69,$29,$53   ; stx ldx dec inc
>8ad4	84 13 34 11	        .byte $84,$13,$34,$11   ; ora and eor adc
>8ad8	a5 69 23 a0	        .byte $a5,$69,$23,$a0   ; sta lda cmp sbc
>8adc	d8 62 5a 48	mnemr   .byte $d8,$62,$5a,$48   ; brk php bpl clc
>8ae0	26 62 94 88	        .byte $26,$62,$94,$88   ; jsr plp bmi sec
>8ae4	54 44 c8 54	        .byte $54,$44,$c8,$54   ; rti pha bvc cli
>8ae8	68 44 e8 94	        .byte $68,$44,$e8,$94   ; rts pla bvs sei
>8aec	00 b4 08 84	        .byte $00,$b4,$08,$84   ; ??? dey bcc tya
>8af0	74 b4 28 6e	        .byte $74,$b4,$28,$6e   ; ldy tay bcs clv
>8af4	74 f4 cc 4a	        .byte $74,$f4,$cc,$4a   ; cpy iny bne cld
>8af8	72 f2 a4 8a	        .byte $72,$f2,$a4,$8a   ; cpx inx beq sed
>8afc	00 aa a2 a2	        .byte $00,$aa,$a2,$a2   ; ??? bit jmp jmp
>8b00	74 74 74 72	        .byte $74,$74,$74,$72   ; sty ldy cpy cpx
>8b04	44 68 b2 32	        .byte $44,$68,$b2,$32   ; txa txs tax tsx
>8b08	b2 00 22 00	        .byte $b2,$00,$22,$00   ; dex ??? nop ???
>8b0c	1a 1a 26 26	        .byte $1a,$1a,$26,$26   ; asl rol lsr ror
>8b10	72 72 88 c8	        .byte $72,$72,$88,$c8   ; stx ldx dec inc
>8b14	c4 ca 26 48	        .byte $c4,$ca,$26,$48   ; ora and eor adc
>8b18	44 44 a2 c8	        .byte $44,$44,$a2,$c8   ; sta lda cmp sbc
>8b1c	0d 20 20 20	        .byte $0d,$20,$20,$20
>8b20	41 43 44 46	keyw    .text "acdfghjmrtx@.>;"
>8b24	47 48 4a 4d 52 54 58 40 2e 3e 3b
>8b2f	24 2b 26 25	hikey   .text "$+&%lsv"
>8b33	4c 53 56
=$8b36			keytop  =*
>8b36	71 83 c9 81	kaddr   .word assem-1,compar-1,disass-1,fill-1
>8b3a	fe 84 4c 83
>8b3e	54 81 4d 82	        .word goto-1,hunt-1,jsub-1,dsplym-1
>8b42	72 81 e7 80
>8b46	6c 80 cc 81	        .word dsplyr-1,trans-1,exit-1,dstat-1
>8b4a	e4 80 a5 88
>8b4e	71 83 34 81	        .word assem-1,altm-1,altr-1
>8b52	1d 81
>8b54	10 0a 08 02	modtab  .byte $10,$0a,$08,02    ; modulo number systems
>8b58	04 03 03 01	lentab  .byte $04,$03,$03,$01   ; bits per digit
>8b5c	5e 80		linkad  .word break             ; address of brk handler
>8b5e	00 80		supad   .word super             ; address of entry point

;******  End of listing

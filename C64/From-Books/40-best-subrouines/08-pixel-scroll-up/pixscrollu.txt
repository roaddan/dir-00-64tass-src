
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L pixscrollu.txt -o pixscrollu.prg pixscrollu.asm
; Tue Jun 18 22:22:04 2024

;Offset	;Hex		;Source

;******  Processing input file: pixscrollu.asm

="20240618-213900-a"	Version = "20240618-213900-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: pixscrollu.asm

.080d			main
.080d	20 3c 40	                jsr scrmaninit
.0810	a9 0e		                lda #14
.0812	20 73 40	                jsr putch
.0815	20 1e 08	                jsr help
.0818	20 71 45	                jsr anykey
.081b	4c 74 a4	                jmp b_warmstart
.081e			help
.081e	20 5c 40	                jsr cls
.0821	20 6a 41	               jsr  push
.0824	a2 bc		isx            ldx  #<line
.0826	a0 09		isy            ldy  #>line
.0828	20 79 40	               jsr  puts
.082b	20 a9 41	               jsr  pull
.082e	20 6a 41	               jsr  push
.0831	a2 7d		isx            ldx  #<header
.0833	a0 08		isy            ldy  #>header
.0835	20 79 40	               jsr  puts
.0838	20 a9 41	               jsr  pull
.083b	20 6a 41	               jsr  push
.083e	a2 bc		isx            ldx  #<line
.0840	a0 09		isy            ldy  #>line
.0842	20 79 40	               jsr  puts
.0845	20 a9 41	               jsr  pull
.0848	20 6a 41	               jsr  push
.084b	a2 68		isx            ldx  #<shortcuts
.084d	a0 09		isy            ldy  #>shortcuts
.084f	20 79 40	               jsr  puts
.0852	20 a9 41	               jsr  pull
.0855	20 6a 41	               jsr  push
.0858	a2 bc		isx            ldx  #<line
.085a	a0 09		isy            ldy  #>line
.085c	20 79 40	               jsr  puts
.085f	20 a9 41	               jsr  pull
.0862	20 6a 41	               jsr  push
.0865	a2 e5		isx            ldx  #<helptext
.0867	a0 09		isy            ldy  #>helptext
.0869	20 79 40	               jsr  puts
.086c	20 a9 41	               jsr  pull
.086f	20 6a 41	               jsr  push
.0872	a2 bc		isx            ldx  #<line
.0874	a0 09		isy            ldy  #>line
.0876	20 79 40	               jsr  puts
.0879	20 a9 41	               jsr  pull
.087c	60		                rts
.087d			header
>087d	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>0881	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>0891	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>089f	0d		                .byte   $0d
>08a0	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>08a4	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>08b4	cd cd cf c4 cf d2 c5 20 36 34
>08be	0d		                .byte   $0d
>08bf	20 20 20 20	                .text          "       Book by Mark Greenshields."
>08c3	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>08d3	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08e0	0d 0d		                .byte   $0d,$0d
>08e2	20 20 20 20	                .text          "            pixscrollu (p56)"
>08e6	20 20 20 20 20 20 20 20 50 49 58 53 43 52 4f 4c
>08f6	4c 55 20 28 50 35 36 29
>08fe	0d		                .byte   $0d
>08ff	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>0903	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>0913	44 20 d4 45 4d 50 4c 45 54 4f 4e
>091e	0d 0d		                .byte   $0d,$0d
>0920	20 20 20 20	                .text          "     Programmed by Daniel Lafrance."
>0924	20 d0 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>0934	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>0943	0d		                .byte   $0d
>0944	20 20 20 20	                .text   format("       Version: %s.",Version)
>0948	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 34
>0958	30 36 31 38 2d 32 31 33 39 30 30 2d 41 2e
>0966	0d 00		                .byte   $0d,0
>0968	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>096c	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>097c	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>098c	2d 2d 2d
>098f	0d		                .byte   $0d
>0990	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>0994	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>09a4	d3 d9 d3 20 32 30 37 38
>09ac	0d		                .byte   $0d
>09ad	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>09b1	3d d3 d9 d3 31 36 34 37 36
>09ba	0d 00		                .byte   $0d,0
>09bc	20 2d 2d 2d	line            .text          " --------------------------------------"
>09c0	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09d0	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09e0	2d 2d 2d
>09e3	0d 00		                .byte   $0d,0
>09e5	20 d0 52 45	helptext        .text   format(" Prepare to scrool  : SYS%5d",pixscrollu)
>09e9	50 41 52 45 20 54 4f 20 53 43 52 4f 4f 4c 20 20
>09f9	3a 20 d3 d9 d3 31 36 33 38 34
>0a03	0d		                .byte   $0d
>0a04	20 53 43 52	                .text   format(" scroll 1 pixelup   : SYS%5d",scrollup)
>0a08	4f 4c 4c 20 31 20 50 49 58 45 4c 55 50 20 20 20
>0a18	3a 20 d3 d9 d3 31 36 33 39 38
>0a22	0d		                .byte   $0d
>0a23	20 45 58 2e	                .text   format(" ex.: SYS%5d",pixscrollu)
>0a27	3a 20 d3 d9 d3 31 36 33 38 34
>0a31	0d		                .byte   $0d
>0a32	20 45 58 2e	                .text   format(" ex.: for i=0to100:SYS%5d:next",scrollup)
>0a36	3a 20 46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3
>0a46	d9 d3 31 36 33 39 38 3a 4e 45 58 54
>0a52	0d 00		                .byte   $0d,0
.4000	ad 11 d0	pixscrollu      lda vicctrl0v
.4003	29 f7		                and #$f7
.4005	8d 11 d0	                sta vicctrl0v
.4008	a9 07		                lda #$07
.400a	8d 3b 40	                sta byte
.400d	60		                rts
.400e	ad 11 d0	scrollup        lda vicctrl0v
.4011	29 f8		                and #$f8
.4013	18		                clc
.4014	6d 3b 40	                adc byte
.4017	8d 11 d0	                sta vicctrl0v
.401a	ce 3b 40	                dec byte
.401d	ad 3b 40	                lda byte
.4020	c9 ff		                cmp #$ff
.4022	f0 01		                beq reset
.4024	60		                rts
.4025	a9 07		reset           lda #$07
.4027	8d 3b 40	                sta byte
.402a	ad 11 d0	                lda vicctrl0v
.402d	29 f8		                and #$f8
.402f	18		                clc
.4030	69 07		                adc #$07
.4032	8d 11 d0	                sta vicctrl0v
.4035	a9 0d		                lda #$0d
.4037	20 73 40	                jsr putch
.403a	60		                rts
>403b	00		byte            .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.403c			libtart

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.403c			scrmaninit
.403c	20 6a 41	               jsr  push
.403f	a9 06		               lda  #vbleu
.4041	8d 21 d0	               sta  vicbackcol
.4044	a9 05		               lda  #vvert
.4046	8d 20 d0	               sta  vicbordcol
.4049	a9 01		               lda  #vblanc
.404b	8d 86 02	               sta  bascol
.404e	ad 00 04	               lda  scrnram
.4051	8d 00 04	               sta  scrnram
.4054	20 5c 40	               jsr  cls
.4057	20 a9 41	               jsr  pop
.405a	60		               rts
>405b	8e		characterset   .byte b_uppercase
.405c			cls
.405c	08		               php
.405d	48		               pha
.405e	a9 93		               lda  #$93
.4060	20 73 40	               jsr  putch
.4063	68		               pla
.4064	28		               plp
.4065	60		               rts
.4066			putnch
.4066	08		               php
.4067	e0 00		               cpx  #$00
.4069	f0 06		               beq  out
.406b	20 d2 ff	again          jsr  $ffd2
.406e	ca		               dex
.406f	d0 fa		               bne  again
.4071	28		out            plp
.4072	60		               rts
.4073			putch
.4073	08		               php
.4074	20 d2 ff	               jsr  $ffd2
.4077	28		               plp
.4078	60		               rts
.4079			puts
.4079	20 6a 41	               jsr  push
.407c	86 fb		               stx  zpage1
.407e	84 fc		               sty  zpage1+1
.4080	a0 00		               ldy  #0
.4082	b1 fb		next           lda  (zpage1),y
.4084	f0 09		               beq  exit
.4086	20 73 40	               jsr  putch
.4089	20 71 42	               jsr  inczp1
.408c	4c 82 40	               jmp  next
.408f	20 a9 41	exit           jsr  pop
.4092	60		               rts
.4093			gotoxy
.4093	08		               php
.4094	18		               clc
.4095	8a		               txa
.4096	48		               pha
.4097	98		               tya
.4098	aa		               tax
.4099	68		               pla
.409a	a8		               tay
.409b	20 f0 ff	               jsr  kplot
.409e	28		               plp
.409f	60		               rts
.40a0			cursor
=$0286			bascol    =    $0286
.40a0	08		               php
.40a1	48		               pha
.40a2	90 12		               bcc  restore
.40a4	20 f0 ff	               jsr  kplot
.40a7	8c c8 40	               sty  cx
.40aa	8e c9 40	               stx  cy
.40ad	ad 86 02	               lda  bascol
.40b0	8d ca 40	               sta  bcol
.40b3	4c c5 40	               jmp  out
.40b6	ae c9 40	restore        ldx  cy
.40b9	ac c8 40	               ldy  cx
.40bc	20 f0 ff	               jsr  kplot
.40bf	ad ca 40	               lda  bcol
.40c2	8d 86 02	               sta  bascol
.40c5	68		out            pla
.40c6	28		               plp
.40c7	60		               rts
>40c8	00		cx   .byte     $00
>40c9	00		cy   .byte     $00
>40ca	00		bcol .byte     $00
.40cb			cursave
.40cb	08		               php
.40cc	38		               sec
.40cd	20 a0 40	               jsr  cursor
.40d0	28		               plp
.40d1	60		               rts
.40d2			curput
.40d2	08		               php
.40d3	18		               clc
.40d4	20 a0 40	               jsr  cursor
.40d7	28		               plp
.40d8	60		               rts
.40d9			putsxy
.40d9	20 6a 41	               jsr  push
.40dc	86 fb		               stx  zpage1
.40de	84 fc		               sty  zpage1+1
.40e0	a0 00		               ldy  #$00
.40e2	b1 fb		               lda  (zpage1),y
.40e4	aa		               tax
.40e5	20 71 42	               jsr  inczp1
.40e8	b1 fb		               lda  (zpage1),y
.40ea	a8		               tay
.40eb	20 93 40	               jsr  gotoxy
.40ee	20 71 42	               jsr  inczp1
.40f1	a6 fb		               ldx  zpage1
.40f3	a4 fc		               ldy  zpage1+1
.40f5	20 79 40	               jsr  puts
.40f8	20 a9 41	               jsr  pop
.40fb	60		               rts
>40fc	00 00		straddr   .word     $00
>40fe	00		px        .byte     $00
>40ff	00		py        .byte     $00
>4100	00 00		zp1       .word     $00
.4102			putscxy
.4102	20 6a 41	               jsr  push
.4105	84 fc		               sty  zpage1+1
.4107	86 fb		               stx  zpage1
.4109	ad 86 02	               lda  bascol
.410c	8d 2c 41	               sta  bc
.410f	a0 00		               ldy #$00
.4111	b1 fb		               lda  (zpage1),y
.4113	8d 86 02	               sta  bascol
.4116	20 71 42	               jsr  inczp1
.4119	a6 fb		               ldx  zpage1
.411b	a4 fc		               ldy  zpage1+1
.411d	20 d9 40	               jsr  putsxy
.4120	ad 2c 41	               lda  bc
.4123	8d 86 02	               sta  bascol
.4126	20 a9 41	               jsr  pop
.4129	60		               rts
>412a	00 00		straddr  .word      $00
>412c	00		bc       .byte      $00
>412d	00 00		zp1      .word      $00
.412f			putrahex
.412f	08		               php
.4130	48		               pha
.4131	20 87 43	               jsr  a2hex
.4134	a9 26		               lda  #<a2hexstr
.4136	a0 43		               ldy  #>a2hexstr
.4138	20 79 40	               jsr  puts
.413b	68		               pla
.413c	28		               plp
.413d	60		               rts
.413e			kputrahexxy
.413e			bputrahexxy
.413e			putrahexxy
.413e	08		               php
.413f	20 87 43	               jsr  a2hex
.4142	a9 23		               lda  #<a2hexpos
.4144	a0 43		               ldy  #>a2hexpos
.4146	20 d9 40	               jsr  putsxy
.4149	68		               pla
.414a	28		               plp
.414b	60		               rts
.414c			putrahexcxy
.414c	08		               php
.414d	20 87 43	               jsr  a2hex
.4150	a9 23		               lda  #<a2hexpos
.4152	a0 43		               ldy  #>a2hexpos
.4154	20 02 41	               jsr  putscxy
.4157	68		               pla
.4158	28		               plp
.4159	60		               rts
.415a			setinverse
.415a	48		               pha
.415b	a9 12		               lda  #$12
.415d	20 d2 ff	               jsr  $ffd2
.4160	68		               pla
.4161	60		               rts
.4162			clrinverse
.4162	48		               pha
.4163	a9 92		               lda  #$92
.4165	20 d2 ff	               jsr  $ffd2
.4168	68		               pla
.4169	60		               rts

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.416a			push
.416a	08		          php            ; stack : flg, pcl, pch
.416b	78		          sei
.416c	8d a6 41	          sta  ra        ; save a
.416f	68		          pla            ; stack : pcl, pch
.4170	8d a5 41	          sta  rp        ; save rp
.4173	68		          pla            ; stack : pch
.4174	8d a7 41	          sta  pc        ; save pcl
.4177	68		          pla            ; stack : -
.4178	8d a8 41	          sta  pc+1      ; save pch
.417b	a5 fb		          lda  zpage1    ; get zpage1 low byte
.417d	48		          pha            ; stack : zp1l
.417e	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.4180	48		          pha            ; stack : zp1h, zp1l
.4181	a5 fd		          lda  zpage2    ; get zpage2 low byte
.4183	48		          pha            ; stack : zp2l, zp1h, zp1l
.4184	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.4186	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.4187	ad a5 41	          lda  rp        ; get rp
.418a	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.418b	ad a6 41	          lda  ra        ; get a
.418e	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.418f	8a		          txa            ; get x
.4190	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.4191	98		          tya            ; get y
.4192	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.4193	ad a8 41	          lda  pc+1      ; get pch
.4196	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.4197	ad a7 41	          lda  pc        ; get pcl
.419a	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.419b	ad a5 41	          lda  rp        ; get rp
.419e	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.419f	ad a6 41	          lda  ra        ; get a
.41a2	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.41a3	58		          cli
.41a4	60		          rts
>41a5	00		rp        .byte     0
>41a6	00		ra        .byte     0
>41a7	00 00		pc        .word     0
.41a9			pull
.41a9			pop
.41a9	78		          sei
.41aa	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.41ab	8d de 41	          sta  pc        ; save pcl
.41ae	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.41af	8d df 41	          sta  pc+1      ; save pch
.41b2	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.41b3	a8		          tay            ; set y
.41b4	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.41b5	aa		          tax            ; set x
.41b6	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.41b7	8d dd 41	          sta  ra        ; save a
.41ba	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.41bb	8d dc 41	          sta  rp        ; save rp
.41be	68		          pla            ; stack : zp2l, zp1h, zp1l
.41bf	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.41c1	68		          pla            ; stack : zp1h, zp1l
.41c2	85 fd		          sta  zpage2    ; get zpage2 High byte
.41c4	68		          pla            ; stack : zp1l
.41c5	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.41c7	68		          pla            ; stack :
.41c8	85 fb		          sta  zpage1    ; get zpage1 High byte
.41ca	ad df 41	          lda  pc+1      ; get pch
.41cd	48		          pha            ; stack : pch
.41ce	ad de 41	          lda  pc
.41d1	48		          pha            ; stack : pcl, pch
.41d2	ad dc 41	          lda  rp        ; get rp
.41d5	48		          pha            ; stack : rp, pcl, pch
.41d6	ad dd 41	          lda  ra        ; set ra
.41d9	58		          cli
.41da	28		          plp            ; stack : pcl, pch
.41db	60		          rts
>41dc	00		rp        .byte     0
>41dd	00		ra        .byte     0
>41de	00 00		pc        .word     0

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.41e0			blkfill
.41e0	20 6a 41	bf0            jsr  push
.41e3	20 a1 42	               jsr  savezp1
.41e6	84 fc		               sty  zpage1+1
.41e8	a0 00		               ldy  #$00
.41ea	84 fb		               sty  zpage1
.41ec	91 fb		bf1            sta  (zpage1),y
.41ee	c8		               iny
.41ef	d0 fb		               bne  bf1
.41f1	20 b0 42	               jsr  restzp1
.41f4	20 a9 41	               jsr  pop
.41f7	60		               rts
.41f8			memfill
.41f8	20 6a 41	               jsr  push
.41fb	20 e0 41	mf1            jsr  blkfill
.41fe	c8		               iny
.41ff	ca		               dex
.4200	d0 f9		               bne  mf1
.4202	20 a9 41	               jsr  pop
.4205	60		               rts
.4206			memmove
.4206	20 6a 41	               jsr  push
.4209	ba		               tsx            ; On se crée un pointeur ...
.420a	8a		               txa
.420b	18		               clc
.420c	69 0b		               adc  #11
.420e	a8		               tay
.420f	a2 06		               ldx  #$06
.4211	b9 00 01	nextbyte       lda  $0100,y
.4214	99 60 42	               sta  words,y
.4217	c8		               iny
.4218	ca		               dex
.4219	d0 f6		               bne  nextbyte
.421b	ad 60 42	               lda  s
.421e	8d 37 42	               sta  source+1
.4221	ad 61 42	               lda  s+1
.4224	8d 38 42	               sta  source+2
.4227	ad 62 42	               lda  d
.422a	8d 34 42	               sta  destin+1
.422d	ad 63 42	               lda  d+1
.4230	8d 35 42	               sta  destin+2
.4233	ad ff ff	destin         lda  $ffff
.4236	8d ff ff	source         sta  $ffff
.4239	ee 34 42	               inc  destin+1
.423c	d0 03		               bne  src
.423e	ee 35 42	               inc  destin+2
.4241	ee 37 42	src            inc  source+1
.4244	d0 03		               bne  cnt
.4246	ee 38 42	               inc  source+2
.4249	ad 64 42	cnt            lda  compte
.424c	d0 08		               bne  decit
.424e	ad 65 42	               lda  compte+1
.4251	f0 09		               beq  fini
.4253	ce 65 42	               dec  compte+1
.4256	ce 64 42	decit          dec  compte
.4259	4c 33 42	               jmp  destin
.425c	20 a9 41	fini           jsr  pop
.425f	60		               rts
.4260			words
>4260	00 00		s         .word     $0000
>4262	00 00		d         .word     $0000
>4264	00 00		compte    .word     $0000
.4266			decword
.4266	20 6a 41	               jsr  push
.4269	86 fd		               stx  zpage2
.426b	84 fe		               sty  zpage2+1
.426d	20 a9 41	               jsr  pop
.4270	60		               rts
.4271			inczp1
.4271	08		               php
.4272	48		               pha
.4273	e6 fb		               inc  zpage1
.4275	a5 fb		               lda  zpage1
.4277	d0 02		               bne  nopage
.4279	e6 fc		               inc  zpage1+1
.427b	68		nopage         pla
.427c	28		               plp
.427d	60		               rts
.427e			deczp1
.427e	08		                php
.427f	48		                pha
.4280	c6 fb		                dec  zpage1
.4282	d0 02		                bne  nopage
.4284	c6 fc		                dec  zpage1+1
.4286	68		nopage          pla
.4287	28		                plp
.4288	60		                rts
.4289			inczp2
.4289	08		               php
.428a	48		               pha
.428b	e6 fd		               inc  zpage2
.428d	a5 fd		               lda  zpage2
.428f	d0 02		               bne  nopage
.4291	e6 fe		               inc  zpage2+1
.4293	68		nopage         pla
.4294	28		               plp
.4295	60		               rts
.4296			deczp2
.4296	08		               php
.4297	48		               pha
.4298	a5 fd		               lda  zpage2
.429a	d0 02		               bne  nopage
.429c	c6 fe		               dec  zpage2+1
.429e	68		nopage         pla
.429f	28		               plp
.42a0	60		               rts
.42a1			savezp1
.42a1	08		               php
.42a2	48		               pha
.42a3	a5 fb		               lda  zpage1
.42a5	8d 1d 43	               sta  zp1
.42a8	a5 fc		               lda  zpage1+1
.42aa	8d 1e 43	               sta  zp1+1
.42ad	68		               pla
.42ae	28		               plp
.42af	60		               rts
.42b0			restzp1
.42b0	08		               php
.42b1	48		               pha
.42b2	ad 1d 43	               lda zp1
.42b5	85 fb		               sta zpage1
.42b7	ad 1e 43	               lda zp1+1
.42ba	85 fc		               sta zpage1+1
.42bc	68		               pla
.42bd	28		               plp
.42be	60		               rts
.42bf			savezp2
.42bf	08		         php
.42c0	48		         pha
.42c1	a5 fd		         lda zpage2
.42c3	8d 1f 43	         sta zp2
.42c6	a5 fe		         lda zpage2+1
.42c8	8d 20 43	         sta zp2+1
.42cb	68		         pla
.42cc	28		         plp
.42cd	60		         rts
.42ce			restzp2
.42ce	08		                php
.42cf	48		                pha
.42d0	ad 1f 43	                lda  zp2
.42d3	85 fd		                sta  zpage2
.42d5	ad 20 43	                lda  zp2+1
.42d8	85 fe		                sta  zpage2+1
.42da	68		                pla
.42db	28		                plp
.42dc	60		                rts
.42dd			xy2addr
.42dd	08		                php
.42de	48		                pha
.42df	8a		                txa
.42e0	48		                pha
.42e1	98		                tya
.42e2	48		                pha
.42e3	ad 18 43	                lda     addr1+1
.42e6	8d 1a 43	                sta     addr2+1
.42e9	ad 17 43	                lda     addr1
.42ec	8d 19 43	                sta     addr2
.42ef	c0 00		                cpy     #$00
.42f1	f0 0f		                beq     addx
.42f3	18		moreline        clc
.42f4	6d 16 43	                adc     ymult
.42f7	90 03		                bcc     norepy
.42f9	ee 1a 43	                inc     addr2+1
.42fc	8d 19 43	norepy          sta     addr2
.42ff	88		                dey
.4300	d0 f1		                bne     moreline
.4302	8a		addx            txa
.4303	18		                clc
.4304	6d 19 43	                adc     addr2
.4307	90 03		                bcc     thatsit
.4309	ee 1a 43	                inc     addr2+1
.430c	8d 19 43	thatsit         sta     addr2
.430f	68		                pla
.4310	a8		                tay
.4311	68		                pla
.4312	aa		                tax
.4313	68		                pla
.4314	28		                plp
.4315	60		                rts
>4316	28		ymult          .byte     40
>4317	00 00		addr1          .word     $0000
>4319	00 00		addr2          .word     $0000
>431b	00 00		bytecnt        .word     $0000
>431d	00 00		zp1        .word   $0000
>431f	00 00		zp2        .word   $0000

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>4321	01		a2hexcol       .byte     1              ; pour aputscxy
>4322	00		a2hexbkcol     .byte     %00000000
.4323			a2hexpos
>4323	00		a2hexpx        .byte     0              ; pour aputsxy
>4324	00		a2hexpy        .byte     0
>4325	24		a2hexprefix    .byte     "$"            ; pour aputs
>4326	00 00		a2hexstr       .word     $00
>4328	00 00		               .word     $00
>432a	00		               .byte     0              ; 0 end string
>432b	30 30 30 30	abin           .null     "00000000"
>432f	30 30 30 30 00
>4334	20 20 20 00	adec           .null     "   "
.4338			putahexfmtxy
.4338	20 6a 41	               jsr  push
.433b	20 87 43	               jsr  a2hex
.433e	ae 23 43	               ldx  a2hexpx
.4341	ac 24 43	               ldy  a2hexpy
.4344	20 93 40	               jsr  gotoxy
.4347	a2 25		               ldx  #<a2hexprefix
.4349	a0 43		               ldy  #>a2hexprefix
.434b	20 79 40	               jsr  puts
.434e	20 a9 41	               jsr  pop
.4351	60		               rts
.4352			putahexfmt
.4352	20 6a 41	               jsr  push
.4355	20 87 43	               jsr  a2hex
.4358	a2 25		               ldx  #<a2hexprefix
.435a	a0 43		               ldy  #>a2hexprefix
.435c	20 79 40	               jsr  puts
.435f	20 a9 41	               jsr  pop
.4362	60		               rts
.4363			putahex
.4363	20 6a 41	               jsr  push
.4366	20 87 43	               jsr  a2hex
.4369	a2 26		               ldx  #<a2hexstr
.436b	a0 43		               ldy  #>a2hexstr
.436d	20 79 40	               jsr  puts
.4370	20 a9 41	               jsr  pop
.4373	60		               rts
.4374			nib2hex
.4374	08		               php
.4375	29 0f		               and  #$0f
.4377	f8		               sed
.4378	18		               clc
.4379	69 90		               adc  #$90
.437b	69 40		               adc  #$40
.437d	d8		               cld
.437e	28		               plp
.437f	60		               rts
.4380			lsra4bits
.4380	08		               php
.4381	4a		               lsr
.4382	4a		               lsr
.4383	4a		               lsr
.4384	4a		               lsr
.4385	28		               plp
.4386	60		               rts
.4387			a2hex
.4387	08		               php
.4388	48		               pha
.4389	48		               pha
.438a	20 80 43	               jsr  lsra4bits
.438d	20 74 43	               jsr  nib2hex
.4390	8d 26 43	               sta  a2hexstr
.4393	68		               pla
.4394	20 74 43	               jsr  nib2hex
.4397	8d 27 43	               sta  a2hexstr+1
.439a	a9 00		               lda  #$00                ; set end of string
.439c	8d 28 43	               sta  a2hexstr+2
.439f	68		               pla
.43a0	28		               plp
.43a1	60		               rts
.43a2			xy2hex
.43a2	20 6a 41	               jsr  push
.43a5	20 87 43	               jsr  a2hex
.43a8	8a		               txa
.43a9	48		               pha
.43aa	20 80 43	               jsr  lsra4bits
.43ad	20 74 43	               jsr  nib2hex
.43b0	8d 26 43	               sta  a2hexstr
.43b3	68		               pla
.43b4	20 74 43	               jsr  nib2hex
.43b7	8d 27 43	               sta  a2hexstr+1
.43ba	98		               tya
.43bb	48		               pha
.43bc	20 80 43	               jsr  lsra4bits
.43bf	20 74 43	               jsr  nib2hex
.43c2	8d 28 43	               sta  a2hexstr+2
.43c5	68		               pla
.43c6	20 74 43	               jsr  nib2hex
.43c9	8d 29 43	               sta  a2hexstr+3
.43cc	a9 00		               lda  #$00                ; 0 ended string
.43ce	8d 2a 43	               sta  a2hexstr+4
.43d1	20 a9 41	               jsr  pop
.43d4			atobin
.43d4	20 6a 41	               jsr  push
.43d7	a2 08		               ldx  #8
.43d9	a0 00		               ldy  #0
.43db	18		               clc
.43dc	2a		nextbit        rol
.43dd	48		               pha
.43de	69 00		               adc  #$00
.43e0	29 01		               and  #$01
.43e2	20 74 43	               jsr  nib2hex
.43e5	99 2b 43	               sta  abin,y
.43e8	68		               pla
.43e9	c8		               iny
.43ea	ca		               dex
.43eb	d0 ef		               bne  nextbit
.43ed	a9 00		               lda  #0
.43ef	99 2b 43	               sta  abin,y
.43f2	20 a9 41	               jsr  pull
.43f5	60		               rts
.43f6			putabin
.43f6	20 d4 43	               jsr     atobin
.43f9	20 6a 41	               jsr     push
.43fc	a2 2b		               ldx     #<abin
.43fe	a0 43		               ldy     #>abin
.4400	20 79 40	               jsr     puts
.4403	20 a9 41	               jsr     pop
.4406	60		               rts
.4407			printabin
.4407	20 6a 41	               jsr     push
.440a	a2 2b		               ldx     #<abin
.440c	a0 43		               ldy     #>abin
.440e	20 79 40	               jsr     puts
.4411	20 a9 41	               jsr     pop
.4414	60		               rts
.4415			putabinfmt
.4415	08		               php
.4416	48		               pha
.4417	a9 25		               lda     #"%"
.4419	20 73 40	               jsr     putch
.441c	68		               pla
.441d	20 f6 43	               jsr     putabin
.4420	28		               plp
.4421	60		               rts
.4422			putabinxy
.4422	20 93 40	               jsr     gotoxy
.4425	20 f6 43	               jsr     putabin
.4428	60		               rts
.4429			putabinfmtxy
.4429	20 93 40	               jsr     gotoxy
.442c	20 15 44	               jsr     putabinfmt
.442f	60		               rts
.4430			atodec
.4430	20 6a 41	               jsr  push
.4433	f8		               sed
.4434	aa		               tax
.4435	a0 00		               ldy  #$00
.4437	a9 00		               lda  #$00
.4439	18		nextbit        clc
.443a	69 01		               adc  #$01
.443c	90 01		               bcc  decx
.443e	c8		               iny
.443f	ca		decx           dex
.4440	d0 f7		               bne  nextbit
.4442	48		               pha
.4443	98		               tya
.4444	20 74 43	               jsr  nib2hex
.4447	8d 34 43	               sta  adec
.444a	68		               pla
.444b	48		               pha
.444c	20 74 43	               jsr  nib2hex
.444f	8d 36 43	               sta  adec+2
.4452	68		               pla
.4453	6a		               ror
.4454	6a		               ror
.4455	6a		               ror
.4456	6a		               ror
.4457	20 74 43	               jsr  nib2hex
.445a	8d 35 43	               sta  adec+1
.445d	d8		               cld
.445e	20 a9 41	               jsr  pull
.4461	60		               rts
>4462	00 00 00	buffer         .byte     0,0,0

;******  Return to file: pixscrollu.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>4465	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>4469	00 00 00 00 00 00 00 00 00 0d 00 00
>4475	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>4479	00 00 00 00 00 00 00 00 00 00 00 00
>4485	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>4489	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>4495	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>4499	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>44a5	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>44a9	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>44b5	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>44b9	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>44c5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>44c9	00 00 00 00 00 00 00 00 00 00 00 00
>44d5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>44d9	00 00 00 00 00 00 00 00 00 00 00 00
>44e5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>44e9	00 00 00 00 00 00 00 00 00 00 00 00
>44f5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>44f9	00 00 00 00 00 00 00 00 00 00 00 00
>4505	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>4509	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>4515	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>4519	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>4525	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>4529	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>4535	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>4539	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>4545	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>4549	00 00 00 00 00 00 00 00 00 00 00 00
>4555	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>4559	00 00 00 00 00 00 00 00 00 00 00 00
.4565			waitstop
.4565	20 6a 41	               jsr  push
.4568	20 ed f6	wait           jsr  k_stop
.456b	d0 fb		               bne  wait
.456d	20 a9 41	               jsr  pop
.4570	60		               rts
.4571			anykey
.4571	08		               php
.4572	48		               pha
.4573	a5 cb		nokey          lda 203
.4575	c9 40		               cmp #64
.4577	f0 fa		               beq nokey
.4579	20 7f 45	               jsr releasekey
.457c	68		               pla
.457d	28		               plp
.457e	60		               rts
.457f			releasekey
.457f	08		               php
.4580	48		               pha
.4581	a5 cb		keypressed     lda 203
.4583	c9 40		               cmp #64
.4585	d0 fa		               bne keypressed
.4587	68		               pla
.4588	28		               plp
.4589	60		               rts
.458a			getkey
.458a	20 e4 ff	again          jsr  getin
.458d	c9 00		               cmp  #0
.458f	f0 f9		               beq  again
.4591	60		               rts
.4592			waitkey
.4592	20 6a 41	               jsr  push
.4595	8d e3 45	               sta  thekey
.4598	20 e4 ff	nope           jsr  getin
.459b	20 d2 ff	               jsr  chrout
.459e	cd e3 45	               cmp  thekey
.45a1	d0 f5		               bne  nope
.45a3	20 d2 ff	               jsr  chrout
.45a6	20 a9 41	               jsr  pop
.45a9	60		               rts
.45aa			waitspace
.45aa	20 6a 41	               jsr  push
.45ad	a9 7f		wait           lda  #$7f  ;%01111111
.45af	8d 00 dc	               sta  $dc00
.45b2	ad 01 dc	               lda  $dc01
.45b5	29 10		               and  #$10  ;mask %00010000
.45b7	d0 f4		               bne  wait
.45b9	20 a9 41	               jsr  pop
.45bc			waitsstop
.45bc	20 6a 41	               jsr  push
.45bf	20 ed f6	wait           jsr  k_stop  ;%01111111
.45c2	d0 fb		               bne  wait
.45c4	20 a9 41	               jsr  pop
.45c7			waitreturn
.45c7	20 6a 41	               jsr  push
.45ca	ad e4 45	               lda  thecount
.45cd	8d 00 04	               sta  scrnram
.45d0	a9 02		               lda  #$02
.45d2	8d 00 d8	               sta  colorram
.45d5	20 e4 ff	nope           jsr  getin
.45d8	c9 0d		nohex          cmp  #$0d
.45da	d0 f9		               bne  nope
.45dc	ee e4 45	               inc  thecount
.45df	20 a9 41	               jsr  pop
.45e2	60		               rts
>45e3	00		thekey         .byte   0
>45e4	01		thecount       .byte   $01

;******  Return to file: pixscrollu.asm


;******  End of listing

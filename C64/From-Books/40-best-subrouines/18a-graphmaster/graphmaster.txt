
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L graphmaster.txt -o graphmaster.prg graphmaster.asm
; Wed Sep  4 23:38:32 2024

;Offset	;Hex		;Source

;******  Processing input file: graphmaster.asm

="20240620-222425"	                Version = "20240620-222425"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: graphmaster.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: graphmaster.asm

.080d			main
.080d	20 48 c1	                jsr scrmaninit
.0810	20 38 08	                jsr help
.0813	20 8e c6	                jsr anykey
.0816	20 9c c6	                jsr releasekey
.0819	20 00 c0	                jsr graph
.081c	20 8e c6	                jsr anykey
.081f	20 9c c6	                jsr releasekey
.0822	20 26 c0	                jsr clg
.0825	20 8e c6	                jsr anykey
.0828	20 9c c6	                jsr releasekey
.082b	20 16 c0	                jsr nrm
.082e	20 a7 c6	                jsr getkey
.0831	20 48 c1	                jsr scrmaninit
.0834	20 38 08	                jsr help
.0837	60		                rts
.0838			help
.0838	20 68 c1	                jsr cls
.083b	a9 0e		                lda #14
.083d	20 7f c1	                jsr putch
.0840	20 76 c2	               jsr  push
.0843	a2 e6		isx            ldx  #<line
.0845	a0 09		isy            ldy  #>line
.0847	20 85 c1	               jsr  puts
.084a	20 b5 c2	               jsr  pull
.084d	20 76 c2	               jsr  push
.0850	a2 8f		isx            ldx  #<headera
.0852	a0 08		isy            ldy  #>headera
.0854	20 85 c1	               jsr  puts
.0857	20 b5 c2	               jsr  pull
.085a	20 76 c2	               jsr  push
.085d	a2 11		isx            ldx  #<headerb
.085f	a0 09		isy            ldy  #>headerb
.0861	20 85 c1	               jsr  puts
.0864	20 b5 c2	               jsr  pull
.0867	20 76 c2	               jsr  push
.086a	a2 92		isx            ldx  #<shortcuts
.086c	a0 09		isy            ldy  #>shortcuts
.086e	20 85 c1	               jsr  puts
.0871	20 b5 c2	               jsr  pull
.0874	20 76 c2	               jsr  push
.0877	a2 0f		isx            ldx  #<helptext
.0879	a0 0a		isy            ldy  #>helptext
.087b	20 85 c1	               jsr  puts
.087e	20 b5 c2	               jsr  pull
.0881	20 76 c2	               jsr  push
.0884	a2 e6		isx            ldx  #<line
.0886	a0 09		isy            ldy  #>line
.0888	20 85 c1	               jsr  puts
.088b	20 b5 c2	               jsr  pull
.088e	60		                rts
.088f			headera
>088f	20 20 20 20	                .text          "     40 BEST MACHINE CODE ROUTINES"
>0893	20 34 30 20 c2 c5 d3 d4 20 cd c1 c3 c8 c9 ce c5
>08a3	20 c3 cf c4 c5 20 d2 cf d5 d4 c9 ce c5 d3
>08b1	0d		                .byte   $0d
>08b2	20 20 20 20	                .text          "          FOR THE COMMODORE 64"
>08b6	20 20 20 20 20 20 c6 cf d2 20 d4 c8 c5 20 c3 cf
>08c6	cd cd cf c4 cf d2 c5 20 36 34
>08d0	0d		                .byte   $0d
>08d1	20 20 20 20	                .text          "       Book by Mark Greenshields."
>08d5	20 20 20 c2 4f 4f 4b 20 42 59 20 cd 41 52 4b 20
>08e5	c7 52 45 45 4e 53 48 49 45 4c 44 53 2e
>08f2	0d		                .byte   $0d
>08f3	20 20 20 20	                .text          "          ISBN 0-7156-1899-7"
>08f7	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 37 31 35
>0907	36 2d 31 38 39 39 2d 37
>090f	0d 00		                .byte   $0d,0
>0911	20 20 20 20	headerb         .text          "              graph (p78)"
>0915	20 20 20 20 20 20 20 20 20 20 47 52 41 50 48 20
>0925	28 50 37 38 29
>092a	0d		                .byte   $0d
>092b	20 20 20 20	                .text          "        (c) 1979 Brad Templeton"
>092f	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>093f	44 20 d4 45 4d 50 4c 45 54 4f 4e
>094a	0d		                .byte   $0d
>094b	20 20 20 20	                .text          "     programmed by Daniel Lafrance."
>094f	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>095f	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>096e	0d		                .byte   $0d
>096f	20 20 20 20	                .text   format("        Version: %s.",Version)
>0973	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>0983	34 30 36 32 30 2d 32 32 32 34 32 35 2e
>0990	0d 00		                .byte   $0d,0
>0992	20 2d 2d 2d	shortcuts       .text          " -------- S H O R T - C U T S ---------"
>0996	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>09a6	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>09b6	2d 2d 2d
>09b9	0d		                .byte   $0d
>09ba	20 52 55 4e	                .text   format(" run=SYS%5d, help=SYS%5d",main, help)
>09be	3d d3 d9 d3 20 32 30 36 31 2c 20 48 45 4c 50 3d
>09ce	d3 d9 d3 20 32 31 30 34
>09d6	0d		                .byte   $0d
>09d7	20 43 4c 53	                .text   format(" cls=SYS%5d",cls)
>09db	3d d3 d9 d3 34 39 35 31 32
>09e4	0d 00		                .byte   $0d,0
>09e6	20 2d 2d 2d	line            .text          " --------------------------------------"
>09ea	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09fa	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0a0a	2d 2d 2d
>0a0d	0d 00		                .byte   $0d,0
>0a0f	20 d0 52 45	helptext        .text   format(" Prepare to graph  : SYS%5d",graph)
>0a13	50 41 52 45 20 54 4f 20 47 52 41 50 48 20 20 3a
>0a23	20 d3 d9 d3 34 39 31 35 32
>0a2c	0d		                .byte   $0d
>0a2d	20 47 52 41	                .text   format(" graph.....: SYS%5d",graph)
>0a31	50 48 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34 39 31 35
>0a41	32
>0a42	0d		                .byte   $0d
>0a43	20 43 4c 47	                .text   format(" clg.......: SYS%5d,fgcol,bgcol",clg)
>0a47	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34 39 31 39
>0a57	30 2c 46 47 43 4f 4c 2c 42 47 43 4f 4c
>0a64	0d		                .byte   $0d
>0a65	20 4e 52 4d	                .text   format(" nrm.......: SYS%5d",nrm)
>0a69	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34 39 31 37
>0a79	34
>0a7a	0d		                .byte   $0d
>0a7b	20 50 4c 4f	                .text   format(" plot......: SYS%5d",gplot)
>0a7f	54 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34 39 32 39
>0a8f	30
>0a90	0d		                .byte   $0d
>0a91	20 41 4e 59	                .text   format(" anykey....: SYS%5d",anykey)
>0a95	4b 45 59 2e 2e 2e 2e 3a 20 d3 d9 d3 35 30 38 33
>0aa5	30
>0aa6	0d		                .byte   $0d
>0aa7	20 52 45 4c	                .text   format(" releasekey: SYS%5d",releasekey)
>0aab	45 41 53 45 4b 45 59 3a 20 d3 d9 d3 35 30 38 34
>0abb	34
>0abc	0d 00		                .byte   $0d,0
.c000			graph
.c000	48		                pha
.c001	a9 16		                lda #$16
.c003	8d 00 dd	                sta cia2pra   ;56576
.c006	a9 08		                lda #8
.c008	8d 18 d0	                sta vicmemptr ;53272
.c00b	ad 11 d0	                lda vicctrl0v ; 53265
.c00e	09 20		                ora #32
.c010	8d 11 d0	                sta vicctrl0v ; 53265
.c013	68		                pla
.c014	60		                rts
.c016			nrm
.c016	a9 15		                lda #21
.c018	8d 18 d0	                sta vicmemptr ; 53272
.c01b	a9 1b		                lda #27
.c01d	8d 11 d0	                sta vicctrl0v ; 53265
.c020	a9 17		                lda #23
.c022	8d 00 dd	                sta cia2pra   ;56576
.c025	60		                rts
.c026			clg
.c026	08		                php
.c027	48		                pha
.c028			more
.c028	ad 73 c0	                lda colour
.c02b	29 0f		                and #$0f
.c02d	8d 73 c0	                sta colour
.c030	8d 72 c0	                sta fin
.c033	ee 73 c0	                inc colour
.c036			more1
.c036	a9 01		                lda #1
.c038	0a		                asl a
.c039	0a		                asl a
.c03a	0a		                asl a
.c03b	0a		                asl a
.c03c	0d 72 c0	                ora fin
.c03f	8d 72 c0	                sta fin
.c042	a9 00		                lda #0
.c044	85 60		                sta $60
.c046	a9 60		                lda #96
.c048	85 fc		                sta $fc
.c04a	a0 00		                ldy #0
.c04c	a9 00		                lda #0
.c04e	91 fb		loop            sta ($fb),y
.c050	c8		                iny
.c051	d0 fb		                bne loop
.c053	e6 fc		                inc $fc
.c055	a6 fc		                ldx $fc
.c057	e0 80		                cpx #128
.c059	d0 f3		                bne loop
.c05b	ad 72 c0	                lda fin
.c05e	a2 00		                ldx #0
.c060	9d 00 40	loop1           sta $4000,x
.c063	9d 00 41	                sta $4100,x
.c066	9d 00 42	                sta $4200,x
.c069	9d 00 43	                sta $4300,x
.c06c	e8		                inx
.c06d	d0 f1		                bne loop1
.c06f	68		                pla
.c070	28		                plp
.c071	60		                rts
>c072	00		fin             .byte 0
>c073	02		colour          .byte 2
=$14			xcoord    =    $14
=$15			ycoord    =    $15
=$fd			temp      =    $fd
=$6000			pscreen   =    $6000
=$aefd			checkcom  =    $aefd
=$b7eb			coord     =    $b7eb
=255			false     =    255
=0			true      =    0
=320			n         =    320
.c08a			gplot
.c08a	a9 00		set            lda  #true
.c08c	8d 3a c1	set1           sta  rsflag
.c08f	20 fd ae	               jsr  checkcom
.c092	20 eb b7	               jsr  coord
.c095	e0 c8		               cpx  #200
.c097	b0 5e		               bcs  toobig
.c099	a5 14		               lda  xcoord
.c09b	c9 40		               cmp  #<320
.c09d	a5 15		               lda  ycoord
.c09f	e9 01		               sbc  #>320
.c0a1	b0 54		               bcs  toobig
.c0a3	8a		               txa
.c0a4	4a		               lsr
.c0a5	4a		               lsr
.c0a6	4a		               lsr
.c0a7	0a		               asl
.c0a8	a8		               tay
.c0a9	b9 f8 c0	               lda  table,y
.c0ac	85 fd		               sta  temp
.c0ae	b9 f9 c0	               lda  table+1,y
.c0b1	85 fe		               sta  temp+1
.c0b3	8a		               txa
.c0b4	29 07		               and  #%00000111
.c0b6	18		               clc
.c0b7	65 fd		               adc  temp
.c0b9	85 fd		               sta  temp
.c0bb	a5 fe		               lda  temp+1
.c0bd	69 00		               adc  #0
.c0bf	85 fe		               sta  temp+1
.c0c1	a5 14		               lda  xcoord
.c0c3	29 07		               and  #%00000111
.c0c5	a8		               tay
.c0c6	a5 14		               lda  xcoord
.c0c8	29 f8		               and  #%11111000
.c0ca	18		               clc
.c0cb	65 fd		               adc  temp
.c0cd	85 fd		               sta  temp
.c0cf	a5 fe		               lda  temp+1
.c0d1	65 15		               adc  xcoord+1
.c0d3	85 fe		               sta  temp+1
.c0d5	a5 fd		               lda  temp
.c0d7	18		               clc
.c0d8	69 00		               adc  #<pscreen
.c0da	85 fd		               sta  temp
.c0dc	a5 fe		               lda  temp+1
.c0de	69 60		               adc  #>pscreen
.c0e0	85 fe		               sta  temp+1
.c0e2	a2 00		               ldx  #0
.c0e4	a1 fd		               lda  (temp,x)
.c0e6	2c 3a c1	               bit  rsflag
.c0e9	10 06		               bpl  set2
.c0eb	39 32 c1	               and  andmask,y
.c0ee	4c f4 c0	               jmp  set3
.c0f1	19 2a c1	set2           ora  ormask,y
.c0f4	81 fd		set3           sta  (temp,x)
.c0f6	60		               rts
.c0f7	60		toobig         rts
>c0f8	00 00 40 01	table          .word     0*n,  1*n,   2*n,  3*n
>c0fc	80 02 c0 03
>c100	00 05 40 06	               .word     4*n,  5*n,   6*n,  7*n
>c104	80 07 c0 08
>c108	00 0a 40 0b	               .word     8*n,  9*n,  10*n, 11*n
>c10c	80 0c c0 0d
>c110	00 0f 40 10	               .word     12*n, 13*n, 14*n, 15*n
>c114	80 11 c0 12
>c118	00 14 40 15	               .word     16*n, 17*n, 18*n, 19*n
>c11c	80 16 c0 17
>c120	00 19 40 1a	               .word     20*n, 21*n, 22*n, 23*n
>c124	80 1b c0 1c
>c128	00 1e		               .word     24*n
>c12a	80 40 20 10	ormask         .byte     $80, $40, $20, $10, $08, $04, $02, $01
>c12e	08 04 02 01
>c132	7f bf df ef	andmask        .byte     $7f, $bf, $df, $ef, $f7, $fb, $fd, $fe
>c136	f7 fb fd fe
>c13a	00 c2 c9 f0	rsflag         .byte     $0 , $c2, $c9, $f0, $08, $20
>c13e	08 20

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>c140	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>c144	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.c148			libtart

;******  Return to file: graphmaster.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: graphmaster.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: graphmaster.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.c148			scrmaninit
.c148	20 76 c2	               jsr  push
.c14b	a9 06		               lda  #vbleu
.c14d	8d 21 d0	               sta  vicbackcol
.c150	a9 05		               lda  #vvert
.c152	8d 20 d0	               sta  vicbordcol
.c155	a9 01		               lda  #vblanc
.c157	8d 86 02	               sta  bascol
.c15a	ad 00 04	               lda  scrnram
.c15d	8d 00 04	               sta  scrnram
.c160	20 68 c1	               jsr  cls
.c163	20 b5 c2	               jsr  pop
.c166	60		               rts
>c167	8e		characterset   .byte b_uppercase
.c168			cls
.c168	08		               php
.c169	48		               pha
.c16a	a9 93		               lda  #$93
.c16c	20 7f c1	               jsr  putch
.c16f	68		               pla
.c170	28		               plp
.c171	60		               rts
.c172			putnch
.c172	08		               php
.c173	e0 00		               cpx  #$00
.c175	f0 06		               beq  out
.c177	20 d2 ff	again          jsr  $ffd2
.c17a	ca		               dex
.c17b	d0 fa		               bne  again
.c17d	28		out            plp
.c17e	60		               rts
.c17f			putch
.c17f	08		               php
.c180	20 d2 ff	               jsr  $ffd2
.c183	28		               plp
.c184	60		               rts
.c185			puts
.c185	20 76 c2	               jsr  push
.c188	86 fb		               stx  zpage1
.c18a	84 fc		               sty  zpage1+1
.c18c	a0 00		               ldy  #0
.c18e	b1 fb		next           lda  (zpage1),y
.c190	f0 09		               beq  exit
.c192	20 7f c1	               jsr  putch
.c195	20 7d c3	               jsr  inczp1
.c198	4c 8e c1	               jmp  next
.c19b	20 b5 c2	exit           jsr  pop
.c19e	60		               rts
.c19f			gotoxy
.c19f	08		               php
.c1a0	18		               clc
.c1a1	8a		               txa
.c1a2	48		               pha
.c1a3	98		               tya
.c1a4	aa		               tax
.c1a5	68		               pla
.c1a6	a8		               tay
.c1a7	20 f0 ff	               jsr  kplot
.c1aa	28		               plp
.c1ab	60		               rts
.c1ac			cursor
=$0286			bascol    =    $0286
.c1ac	08		               php
.c1ad	48		               pha
.c1ae	90 12		               bcc  restore
.c1b0	20 f0 ff	               jsr  kplot
.c1b3	8c d4 c1	               sty  cx
.c1b6	8e d5 c1	               stx  cy
.c1b9	ad 86 02	               lda  bascol
.c1bc	8d d6 c1	               sta  bcol
.c1bf	4c d1 c1	               jmp  out
.c1c2	ae d5 c1	restore        ldx  cy
.c1c5	ac d4 c1	               ldy  cx
.c1c8	20 f0 ff	               jsr  kplot
.c1cb	ad d6 c1	               lda  bcol
.c1ce	8d 86 02	               sta  bascol
.c1d1	68		out            pla
.c1d2	28		               plp
.c1d3	60		               rts
>c1d4	00		cx   .byte     $00
>c1d5	00		cy   .byte     $00
>c1d6	00		bcol .byte     $00
.c1d7			cursave
.c1d7	08		               php
.c1d8	38		               sec
.c1d9	20 ac c1	               jsr  cursor
.c1dc	28		               plp
.c1dd	60		               rts
.c1de			curput
.c1de	08		               php
.c1df	18		               clc
.c1e0	20 ac c1	               jsr  cursor
.c1e3	28		               plp
.c1e4	60		               rts
.c1e5			putsxy
.c1e5	20 76 c2	               jsr  push
.c1e8	86 fb		               stx  zpage1
.c1ea	84 fc		               sty  zpage1+1
.c1ec	a0 00		               ldy  #$00
.c1ee	b1 fb		               lda  (zpage1),y
.c1f0	aa		               tax
.c1f1	20 7d c3	               jsr  inczp1
.c1f4	b1 fb		               lda  (zpage1),y
.c1f6	a8		               tay
.c1f7	20 9f c1	               jsr  gotoxy
.c1fa	20 7d c3	               jsr  inczp1
.c1fd	a6 fb		               ldx  zpage1
.c1ff	a4 fc		               ldy  zpage1+1
.c201	20 85 c1	               jsr  puts
.c204	20 b5 c2	               jsr  pop
.c207	60		               rts
>c208	00 00		straddr   .word     $00
>c20a	00		px        .byte     $00
>c20b	00		py        .byte     $00
>c20c	00 00		zp1       .word     $00
.c20e			putscxy
.c20e	20 76 c2	               jsr  push
.c211	84 fc		               sty  zpage1+1
.c213	86 fb		               stx  zpage1
.c215	ad 86 02	               lda  bascol
.c218	8d 38 c2	               sta  bc
.c21b	a0 00		               ldy #$00
.c21d	b1 fb		               lda  (zpage1),y
.c21f	8d 86 02	               sta  bascol
.c222	20 7d c3	               jsr  inczp1
.c225	a6 fb		               ldx  zpage1
.c227	a4 fc		               ldy  zpage1+1
.c229	20 e5 c1	               jsr  putsxy
.c22c	ad 38 c2	               lda  bc
.c22f	8d 86 02	               sta  bascol
.c232	20 b5 c2	               jsr  pop
.c235	60		               rts
>c236	00 00		straddr  .word      $00
>c238	00		bc       .byte      $00
>c239	00 00		zp1      .word      $00
.c23b			putrahex
.c23b	08		               php
.c23c	48		               pha
.c23d	20 93 c4	               jsr  a2hex
.c240	a9 32		               lda  #<a2hexstr
.c242	a0 c4		               ldy  #>a2hexstr
.c244	20 85 c1	               jsr  puts
.c247	68		               pla
.c248	28		               plp
.c249	60		               rts
.c24a			kputrahexxy
.c24a			bputrahexxy
.c24a			putrahexxy
.c24a	08		               php
.c24b	20 93 c4	               jsr  a2hex
.c24e	a9 2f		               lda  #<a2hexpos
.c250	a0 c4		               ldy  #>a2hexpos
.c252	20 e5 c1	               jsr  putsxy
.c255	68		               pla
.c256	28		               plp
.c257	60		               rts
.c258			putrahexcxy
.c258	08		               php
.c259	20 93 c4	               jsr  a2hex
.c25c	a9 2f		               lda  #<a2hexpos
.c25e	a0 c4		               ldy  #>a2hexpos
.c260	20 0e c2	               jsr  putscxy
.c263	68		               pla
.c264	28		               plp
.c265	60		               rts
.c266			setinverse
.c266	48		               pha
.c267	a9 12		               lda  #$12
.c269	20 d2 ff	               jsr  $ffd2
.c26c	68		               pla
.c26d	60		               rts
.c26e			clrinverse
.c26e	48		               pha
.c26f	a9 92		               lda  #$92
.c271	20 d2 ff	               jsr  $ffd2
.c274	68		               pla
.c275	60		               rts

;******  Return to file: graphmaster.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.c276			push
.c276	08		          php            ; stack : flg, pcl, pch
.c277	78		          sei
.c278	8d b2 c2	          sta  ra        ; save a
.c27b	68		          pla            ; stack : pcl, pch
.c27c	8d b1 c2	          sta  rp        ; save rp
.c27f	68		          pla            ; stack : pch
.c280	8d b3 c2	          sta  pc        ; save pcl
.c283	68		          pla            ; stack : -
.c284	8d b4 c2	          sta  pc+1      ; save pch
.c287	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c289	48		          pha            ; stack : zp1l
.c28a	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c28c	48		          pha            ; stack : zp1h, zp1l
.c28d	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c28f	48		          pha            ; stack : zp2l, zp1h, zp1l
.c290	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c292	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c293	ad b1 c2	          lda  rp        ; get rp
.c296	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c297	ad b2 c2	          lda  ra        ; get a
.c29a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c29b	8a		          txa            ; get x
.c29c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c29d	98		          tya            ; get y
.c29e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c29f	ad b4 c2	          lda  pc+1      ; get pch
.c2a2	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2a3	ad b3 c2	          lda  pc        ; get pcl
.c2a6	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2a7	ad b1 c2	          lda  rp        ; get rp
.c2aa	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2ab	ad b2 c2	          lda  ra        ; get a
.c2ae	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2af	58		          cli
.c2b0	60		          rts
>c2b1	00		rp        .byte     0
>c2b2	00		ra        .byte     0
>c2b3	00 00		pc        .word     0
.c2b5			pull
.c2b5			pop
.c2b5	78		          sei
.c2b6	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2b7	8d ea c2	          sta  pc        ; save pcl
.c2ba	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2bb	8d eb c2	          sta  pc+1      ; save pch
.c2be	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2bf	a8		          tay            ; set y
.c2c0	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c2c1	aa		          tax            ; set x
.c2c2	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c2c3	8d e9 c2	          sta  ra        ; save a
.c2c6	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c2c7	8d e8 c2	          sta  rp        ; save rp
.c2ca	68		          pla            ; stack : zp2l, zp1h, zp1l
.c2cb	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c2cd	68		          pla            ; stack : zp1h, zp1l
.c2ce	85 fd		          sta  zpage2    ; get zpage2 High byte
.c2d0	68		          pla            ; stack : zp1l
.c2d1	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c2d3	68		          pla            ; stack :
.c2d4	85 fb		          sta  zpage1    ; get zpage1 High byte
.c2d6	ad eb c2	          lda  pc+1      ; get pch
.c2d9	48		          pha            ; stack : pch
.c2da	ad ea c2	          lda  pc
.c2dd	48		          pha            ; stack : pcl, pch
.c2de	ad e8 c2	          lda  rp        ; get rp
.c2e1	48		          pha            ; stack : rp, pcl, pch
.c2e2	ad e9 c2	          lda  ra        ; set ra
.c2e5	58		          cli
.c2e6	28		          plp            ; stack : pcl, pch
.c2e7	60		          rts
>c2e8	00		rp        .byte     0
>c2e9	00		ra        .byte     0
>c2ea	00 00		pc        .word     0

;******  Return to file: graphmaster.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.c2ec			blkfill
.c2ec	20 76 c2	bf0            jsr  push
.c2ef	20 ad c3	               jsr  savezp1
.c2f2	84 fc		               sty  zpage1+1
.c2f4	a0 00		               ldy  #$00
.c2f6	84 fb		               sty  zpage1
.c2f8	91 fb		bf1            sta  (zpage1),y
.c2fa	c8		               iny
.c2fb	d0 fb		               bne  bf1
.c2fd	20 bc c3	               jsr  restzp1
.c300	20 b5 c2	               jsr  pop
.c303	60		               rts
.c304			memfill
.c304	20 76 c2	               jsr  push
.c307	20 ec c2	mf1            jsr  blkfill
.c30a	c8		               iny
.c30b	ca		               dex
.c30c	d0 f9		               bne  mf1
.c30e	20 b5 c2	               jsr  pop
.c311	60		               rts
.c312			memmove
.c312	20 76 c2	               jsr  push
.c315	ba		               tsx            ; On se crée un pointeur ...
.c316	8a		               txa
.c317	18		               clc
.c318	69 0b		               adc  #11
.c31a	a8		               tay
.c31b	a2 06		               ldx  #$06
.c31d	b9 00 01	nextbyte       lda  $0100,y
.c320	99 6c c3	               sta  words,y
.c323	c8		               iny
.c324	ca		               dex
.c325	d0 f6		               bne  nextbyte
.c327	ad 6c c3	               lda  s
.c32a	8d 43 c3	               sta  source+1
.c32d	ad 6d c3	               lda  s+1
.c330	8d 44 c3	               sta  source+2
.c333	ad 6e c3	               lda  d
.c336	8d 40 c3	               sta  destin+1
.c339	ad 6f c3	               lda  d+1
.c33c	8d 41 c3	               sta  destin+2
.c33f	ad ff ff	destin         lda  $ffff
.c342	8d ff ff	source         sta  $ffff
.c345	ee 40 c3	               inc  destin+1
.c348	d0 03		               bne  src
.c34a	ee 41 c3	               inc  destin+2
.c34d	ee 43 c3	src            inc  source+1
.c350	d0 03		               bne  cnt
.c352	ee 44 c3	               inc  source+2
.c355	ad 70 c3	cnt            lda  compte
.c358	d0 08		               bne  decit
.c35a	ad 71 c3	               lda  compte+1
.c35d	f0 09		               beq  fini
.c35f	ce 71 c3	               dec  compte+1
.c362	ce 70 c3	decit          dec  compte
.c365	4c 3f c3	               jmp  destin
.c368	20 b5 c2	fini           jsr  pop
.c36b	60		               rts
.c36c			words
>c36c	00 00		s         .word     $0000
>c36e	00 00		d         .word     $0000
>c370	00 00		compte    .word     $0000
.c372			decword
.c372	20 76 c2	               jsr  push
.c375	86 fd		               stx  zpage2
.c377	84 fe		               sty  zpage2+1
.c379	20 b5 c2	               jsr  pop
.c37c	60		               rts
.c37d			inczp1
.c37d	08		               php
.c37e	48		               pha
.c37f	e6 fb		               inc  zpage1
.c381	a5 fb		               lda  zpage1
.c383	d0 02		               bne  nopage
.c385	e6 fc		               inc  zpage1+1
.c387	68		nopage         pla
.c388	28		               plp
.c389	60		               rts
.c38a			deczp1
.c38a	08		                php
.c38b	48		                pha
.c38c	c6 fb		                dec  zpage1
.c38e	d0 02		                bne  nopage
.c390	c6 fc		                dec  zpage1+1
.c392	68		nopage          pla
.c393	28		                plp
.c394	60		                rts
.c395			inczp2
.c395	08		               php
.c396	48		               pha
.c397	e6 fd		               inc  zpage2
.c399	a5 fd		               lda  zpage2
.c39b	d0 02		               bne  nopage
.c39d	e6 fe		               inc  zpage2+1
.c39f	68		nopage         pla
.c3a0	28		               plp
.c3a1	60		               rts
.c3a2			deczp2
.c3a2	08		               php
.c3a3	48		               pha
.c3a4	a5 fd		               lda  zpage2
.c3a6	d0 02		               bne  nopage
.c3a8	c6 fe		               dec  zpage2+1
.c3aa	68		nopage         pla
.c3ab	28		               plp
.c3ac	60		               rts
.c3ad			savezp1
.c3ad	08		               php
.c3ae	48		               pha
.c3af	a5 fb		               lda  zpage1
.c3b1	8d 29 c4	               sta  zp1
.c3b4	a5 fc		               lda  zpage1+1
.c3b6	8d 2a c4	               sta  zp1+1
.c3b9	68		               pla
.c3ba	28		               plp
.c3bb	60		               rts
.c3bc			restzp1
.c3bc	08		               php
.c3bd	48		               pha
.c3be	ad 29 c4	               lda zp1
.c3c1	85 fb		               sta zpage1
.c3c3	ad 2a c4	               lda zp1+1
.c3c6	85 fc		               sta zpage1+1
.c3c8	68		               pla
.c3c9	28		               plp
.c3ca	60		               rts
.c3cb			savezp2
.c3cb	08		         php
.c3cc	48		         pha
.c3cd	a5 fd		         lda zpage2
.c3cf	8d 2b c4	         sta zp2
.c3d2	a5 fe		         lda zpage2+1
.c3d4	8d 2c c4	         sta zp2+1
.c3d7	68		         pla
.c3d8	28		         plp
.c3d9	60		         rts
.c3da			restzp2
.c3da	08		                php
.c3db	48		                pha
.c3dc	ad 2b c4	                lda  zp2
.c3df	85 fd		                sta  zpage2
.c3e1	ad 2c c4	                lda  zp2+1
.c3e4	85 fe		                sta  zpage2+1
.c3e6	68		                pla
.c3e7	28		                plp
.c3e8	60		                rts
.c3e9			xy2addr
.c3e9	08		                php
.c3ea	48		                pha
.c3eb	8a		                txa
.c3ec	48		                pha
.c3ed	98		                tya
.c3ee	48		                pha
.c3ef	ad 24 c4	                lda     addr1+1
.c3f2	8d 26 c4	                sta     addr2+1
.c3f5	ad 23 c4	                lda     addr1
.c3f8	8d 25 c4	                sta     addr2
.c3fb	c0 00		                cpy     #$00
.c3fd	f0 0f		                beq     addx
.c3ff	18		moreline        clc
.c400	6d 22 c4	                adc     ymult
.c403	90 03		                bcc     norepy
.c405	ee 26 c4	                inc     addr2+1
.c408	8d 25 c4	norepy          sta     addr2
.c40b	88		                dey
.c40c	d0 f1		                bne     moreline
.c40e	8a		addx            txa
.c40f	18		                clc
.c410	6d 25 c4	                adc     addr2
.c413	90 03		                bcc     thatsit
.c415	ee 26 c4	                inc     addr2+1
.c418	8d 25 c4	thatsit         sta     addr2
.c41b	68		                pla
.c41c	a8		                tay
.c41d	68		                pla
.c41e	aa		                tax
.c41f	68		                pla
.c420	28		                plp
.c421	60		                rts
>c422	28		ymult          .byte     40
>c423	00 00		addr1          .word     $0000
>c425	00 00		addr2          .word     $0000
>c427	00 00		bytecnt        .word     $0000
>c429	00 00		zp1        .word   $0000
>c42b	00 00		zp2        .word   $0000

;******  Return to file: graphmaster.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>c42d	01		a2hexcol       .byte     1              ; pour aputscxy
>c42e	00		a2hexbkcol     .byte     %00000000
.c42f			a2hexpos
>c42f	00		a2hexpx        .byte     0              ; pour aputsxy
>c430	00		a2hexpy        .byte     0
>c431	24		a2hexprefix    .byte     "$"            ; pour aputs
>c432	00 00		a2hexstr       .word     $00
>c434	00 00		               .word     $00
>c436	00		               .byte     0              ; 0 end string
>c437	30 30 30 30	abin           .null     "00000000"
>c43b	30 30 30 30 00
>c440	20 20 20 00	adec           .null     "   "
.c444			putahexfmtxy
.c444	20 76 c2	               jsr  push
.c447	20 93 c4	               jsr  a2hex
.c44a	ae 2f c4	               ldx  a2hexpx
.c44d	ac 30 c4	               ldy  a2hexpy
.c450	20 9f c1	               jsr  gotoxy
.c453	a2 31		               ldx  #<a2hexprefix
.c455	a0 c4		               ldy  #>a2hexprefix
.c457	20 85 c1	               jsr  puts
.c45a	20 b5 c2	               jsr  pop
.c45d	60		               rts
.c45e			putahexfmt
.c45e	20 76 c2	               jsr  push
.c461	20 93 c4	               jsr  a2hex
.c464	a2 31		               ldx  #<a2hexprefix
.c466	a0 c4		               ldy  #>a2hexprefix
.c468	20 85 c1	               jsr  puts
.c46b	20 b5 c2	               jsr  pop
.c46e	60		               rts
.c46f			putahex
.c46f	20 76 c2	               jsr  push
.c472	20 93 c4	               jsr  a2hex
.c475	a2 32		               ldx  #<a2hexstr
.c477	a0 c4		               ldy  #>a2hexstr
.c479	20 85 c1	               jsr  puts
.c47c	20 b5 c2	               jsr  pop
.c47f	60		               rts
.c480			nib2hex
.c480	08		               php
.c481	29 0f		               and  #$0f
.c483	f8		               sed
.c484	18		               clc
.c485	69 90		               adc  #$90
.c487	69 40		               adc  #$40
.c489	d8		               cld
.c48a	28		               plp
.c48b	60		               rts
.c48c			lsra4bits
.c48c	08		               php
.c48d	4a		               lsr
.c48e	4a		               lsr
.c48f	4a		               lsr
.c490	4a		               lsr
.c491	28		               plp
.c492	60		               rts
.c493			a2hex
.c493	08		               php
.c494	48		               pha
.c495	48		               pha
.c496	20 8c c4	               jsr  lsra4bits
.c499	20 80 c4	               jsr  nib2hex
.c49c	8d 32 c4	               sta  a2hexstr
.c49f	68		               pla
.c4a0	20 80 c4	               jsr  nib2hex
.c4a3	8d 33 c4	               sta  a2hexstr+1
.c4a6	a9 00		               lda  #$00                ; set end of string
.c4a8	8d 34 c4	               sta  a2hexstr+2
.c4ab	68		               pla
.c4ac	28		               plp
.c4ad	60		               rts
.c4ae			xy2hex
.c4ae	20 76 c2	               jsr  push
.c4b1	20 93 c4	               jsr  a2hex
.c4b4	8a		               txa
.c4b5	48		               pha
.c4b6	20 8c c4	               jsr  lsra4bits
.c4b9	20 80 c4	               jsr  nib2hex
.c4bc	8d 32 c4	               sta  a2hexstr
.c4bf	68		               pla
.c4c0	20 80 c4	               jsr  nib2hex
.c4c3	8d 33 c4	               sta  a2hexstr+1
.c4c6	98		               tya
.c4c7	48		               pha
.c4c8	20 8c c4	               jsr  lsra4bits
.c4cb	20 80 c4	               jsr  nib2hex
.c4ce	8d 34 c4	               sta  a2hexstr+2
.c4d1	68		               pla
.c4d2	20 80 c4	               jsr  nib2hex
.c4d5	8d 35 c4	               sta  a2hexstr+3
.c4d8	a9 00		               lda  #$00                ; 0 ended string
.c4da	8d 36 c4	               sta  a2hexstr+4
.c4dd	20 b5 c2	               jsr  pop
.c4e0			atobin
.c4e0	20 76 c2	               jsr  push
.c4e3	a2 08		               ldx  #8
.c4e5	a0 00		               ldy  #0
.c4e7	18		               clc
.c4e8	2a		nextbit        rol
.c4e9	48		               pha
.c4ea	69 00		               adc  #$00
.c4ec	29 01		               and  #$01
.c4ee	20 80 c4	               jsr  nib2hex
.c4f1	99 37 c4	               sta  abin,y
.c4f4	68		               pla
.c4f5	c8		               iny
.c4f6	ca		               dex
.c4f7	d0 ef		               bne  nextbit
.c4f9	a9 00		               lda  #0
.c4fb	99 37 c4	               sta  abin,y
.c4fe	20 b5 c2	               jsr  pull
.c501	60		               rts
.c502			putabin
.c502	20 e0 c4	               jsr     atobin
.c505	20 76 c2	               jsr     push
.c508	a2 37		               ldx     #<abin
.c50a	a0 c4		               ldy     #>abin
.c50c	20 85 c1	               jsr     puts
.c50f	20 b5 c2	               jsr     pop
.c512	60		               rts
.c513			printabin
.c513	20 76 c2	               jsr     push
.c516	a2 37		               ldx     #<abin
.c518	a0 c4		               ldy     #>abin
.c51a	20 85 c1	               jsr     puts
.c51d	20 b5 c2	               jsr     pop
.c520	60		               rts
.c521			putabinfmt
.c521	08		               php
.c522	48		               pha
.c523	a9 25		               lda     #"%"
.c525	20 7f c1	               jsr     putch
.c528	68		               pla
.c529	20 02 c5	               jsr     putabin
.c52c	28		               plp
.c52d	60		               rts
.c52e			putabinxy
.c52e	20 9f c1	               jsr     gotoxy
.c531	20 02 c5	               jsr     putabin
.c534	60		               rts
.c535			putabinfmtxy
.c535	20 9f c1	               jsr     gotoxy
.c538	20 21 c5	               jsr     putabinfmt
.c53b	60		               rts
.c53c			atodec
.c53c	20 76 c2	               jsr  push
.c53f	f8		               sed
.c540	aa		               tax
.c541	a0 00		               ldy  #$00
.c543	a9 00		               lda  #$00
.c545	18		nextbit        clc
.c546	69 01		               adc  #$01
.c548	90 01		               bcc  decx
.c54a	c8		               iny
.c54b	ca		decx           dex
.c54c	d0 f7		               bne  nextbit
.c54e	48		               pha
.c54f	98		               tya
.c550	20 80 c4	               jsr  nib2hex
.c553	8d 40 c4	               sta  adec
.c556	68		               pla
.c557	48		               pha
.c558	20 80 c4	               jsr  nib2hex
.c55b	8d 42 c4	               sta  adec+2
.c55e	68		               pla
.c55f	6a		               ror
.c560	6a		               ror
.c561	6a		               ror
.c562	6a		               ror
.c563	20 80 c4	               jsr  nib2hex
.c566	8d 41 c4	               sta  adec+1
.c569	d8		               cld
.c56a	20 b5 c2	               jsr  pull
.c56d	60		               rts
>c56e	00 00 00	buffer         .byte     0,0,0
.c571			putadec
.c571	20 76 c2	               jsr  push
.c574	20 3c c5	               jsr  atodec
.c577	a2 40		               ldx  #<adec
.c579	a0 c4		               ldy  #>adec+1
.c57b	20 85 c1	               jsr  puts
.c57e	20 b5 c2	               jsr  pop
.c581	60		               rts

;******  Return to file: graphmaster.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>c582	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>c586	00 00 00 00 00 00 00 00 00 0d 00 00
>c592	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>c596	00 00 00 00 00 00 00 00 00 00 00 00
>c5a2	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>c5a6	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>c5b2	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>c5b6	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>c5c2	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>c5c6	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>c5d2	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>c5d6	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>c5e2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>c5e6	00 00 00 00 00 00 00 00 00 00 00 00
>c5f2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>c5f6	00 00 00 00 00 00 00 00 00 00 00 00
>c602	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>c606	00 00 00 00 00 00 00 00 00 00 00 00
>c612	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>c616	00 00 00 00 00 00 00 00 00 00 00 00
>c622	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>c626	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>c632	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>c636	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>c642	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>c646	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>c652	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>c656	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>c662	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>c666	00 00 00 00 00 00 00 00 00 00 00 00
>c672	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>c676	00 00 00 00 00 00 00 00 00 00 00 00
.c682			waitstop
.c682	20 76 c2	               jsr  push
.c685	20 ed f6	wait           jsr  k_stop
.c688	d0 fb		               bne  wait
.c68a	20 b5 c2	               jsr  pop
.c68d	60		               rts
.c68e			anykey
.c68e	08		               php
.c68f	48		               pha
.c690	a5 cb		nokey          lda 203
.c692	c9 40		               cmp #64
.c694	f0 fa		               beq nokey
.c696	20 9c c6	               jsr releasekey
.c699	68		               pla
.c69a	28		               plp
.c69b	60		               rts
.c69c			releasekey
.c69c	08		               php
.c69d	48		               pha
.c69e	a5 cb		keypressed     lda 203
.c6a0	c9 40		               cmp #64
.c6a2	d0 fa		               bne keypressed
.c6a4	68		               pla
.c6a5	28		               plp
.c6a6	60		               rts
.c6a7			getkey
.c6a7	20 e4 ff	again          jsr  getin
.c6aa	c9 00		               cmp  #0
.c6ac	f0 f9		               beq  again
.c6ae	60		               rts
.c6af			waitkey
.c6af	20 76 c2	               jsr  push
.c6b2	8d 00 c7	               sta  thekey
.c6b5	20 e4 ff	nope           jsr  getin
.c6b8	20 d2 ff	               jsr  chrout
.c6bb	cd 00 c7	               cmp  thekey
.c6be	d0 f5		               bne  nope
.c6c0	20 d2 ff	               jsr  chrout
.c6c3	20 b5 c2	               jsr  pop
.c6c6	60		               rts
.c6c7			waitspace
.c6c7	20 76 c2	               jsr  push
.c6ca	a9 7f		wait           lda  #$7f  ;%01111111
.c6cc	8d 00 dc	               sta  $dc00
.c6cf	ad 01 dc	               lda  $dc01
.c6d2	29 10		               and  #$10  ;mask %00010000
.c6d4	d0 f4		               bne  wait
.c6d6	20 b5 c2	               jsr  pop
.c6d9			waitsstop
.c6d9	20 76 c2	               jsr  push
.c6dc	20 ed f6	wait           jsr  k_stop  ;%01111111
.c6df	d0 fb		               bne  wait
.c6e1	20 b5 c2	               jsr  pop
.c6e4			waitreturn
.c6e4	20 76 c2	               jsr  push
.c6e7	ad 01 c7	               lda  thecount
.c6ea	8d 00 04	               sta  scrnram
.c6ed	a9 02		               lda  #$02
.c6ef	8d 00 d8	               sta  colorram
.c6f2	20 e4 ff	nope           jsr  getin
.c6f5	c9 0d		nohex          cmp  #$0d
.c6f7	d0 f9		               bne  nope
.c6f9	ee 01 c7	               inc  thecount
.c6fc	20 b5 c2	               jsr  pop
.c6ff	60		               rts
>c700	00		thekey         .byte   0
>c701	01		thecount       .byte   $01

;******  Return to file: graphmaster.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L wos2024.txt -o wos2024.prg wos2024.asm
; Fri Nov 22 01:36:26 2024

;Offset	;Hex		;Source

;******  Processing input file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 00 c0	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: wos2024.asm

="20241118-223038"	     version = "20241118-223038"
=$a474			     ready     =    $a474
.c000			main
.c000	20 b1 c5	               jsr  scrmaninit     ; Initialisation de l'é
.c003	20 da c0	               jsr  greetings
.c006	20 0a c0	               jsr  wedgeos
.c009	60		over           rts
.c00a			wedgeos
.c00a	a9 08		initwos        lda  #$08
.c00c	8d 1c cb	               sta  dsk_dev
.c00f	ad 86 02	               lda  bascol
.c012	8d 06 c3	               sta  fcol
.c015	ad 20 d0	               lda  vicbordcol
.c018	8d 04 c3	               sta  bcol
.c01b	ad 21 d0	               lda  vicbackcol
.c01e	8d 05 c3	               sta  scol
.c021	a9 4c		               lda  #$4c           ; On remplace l’instruction cmp
.c023	85 7c		               sta  $7c            ; ... avec « : » par jmp à
.c025	a9 30		               lda  #<wos          ; ... l’adresse de notre
.c027	85 7d		               sta  $7d            ; ... fonction à la place de
.c029	a9 c0		               lda  #>wos          ; ... celle du basic du c64
.c02b	85 7e		               sta  $7e            ; ... pour s’insérer.
.c02d	4c 74 a4	               jmp  ready          ; Affiche "Ready" et lance basic warm-start.
.c030	c9 40		wos            cmp  #$40           ; Est-ce un "@" (ASCII).
.c032	d0 44		               bne  lnormcmd       ; Laisse Basic interpreter sa commande.
.c034	a5 9d		               lda  $9d            ; Le Z de MSGFLG indique si en mode pgm.
.c036	f0 28		               beq  lmodepgm       ; Oui - branche a lmodepgm.
.c038	ad 00 02	               lda  $0200          ; Non - lecture du tampon clavier.
.c03b	c9 40		               cmp  #$40           ; Est-ce un "@" (ASCII).
.c03d	d0 1c		               bne  lflushpfx      ; Non, stdcmd, branche a $1c (+28) bytes
.c03f	20 8d c0	               jsr  lfindxcmd      ; Oui, cherchons parmis nos commandes.
.c042	a0 00		l290           ldy  #$00           ; Initialise l'index à $00.
.c044	b1 7a		lgetbuffb      lda  ($7a),y        ; Prend un octet du tampon clavier.
.c046	c9 20		               cmp  #$20           ; Est-ce un espace?
.c048	f0 09		               beq  lnoxcmd        ; Oui, On ignore le "@".
.c04a	e6 7a		               inc  $7a            ; On incremente le LSB du pointeur.
.c04c	d0 f6		               bne  lgetbuffb      ; Pas de report, On lit le prochain octet.
.c04e	e6 7b		               inc  $7b            ; On fait un repport au MSB du pointeur.
.c050	38		               sec                 ; On force un branchement par BCS.
.c051	b0 f1		               bcs  lgetbuffb      ; On lit le prochain octet.
.c053	20 74 a4	lnoxcmd        jsr  b_warmstart    ; On retourne à l'interpréteur Basic.
.c056	a9 00		               lda  #$00           ; On place $00 dans Acc.
.c058	38		               sec                 ; On force le C pour BCS et ...
.c059	b0 1d		l410           bcs  lnormcmd       ; ... brancher à lnormcmd.
.c05b	a9 40		lflushpfx      lda  #$40           ; Charge "@" dans Acc.
.c05d	38		               sec                 ; On force le C pour BCS et ...
.c05e	b0 18		               bcs  lnormcmd       ; ... brancher à lnormcmd.
.c060	20 8d c0	lmodepgm       jsr  lfindxcmd      ; On trouve et exécute notre commande
.c063	a0 00		               ldy  #$00           ; On initialise l'indexe.
.c065	b1 7a		lnxtbuffb      lda  ($7a),y        ; On lit un octet de la ligne du programme.
.c067	c9 00		               cmp  #$00           ; Si #$00, Il s'agit de la fin de la ligne.
.c069	f0 0d		               beq  lnormcmd       ; Alors on branche pour traiter une autre commande.
.c06b	c9 3a		               cmp  #$3a           ; Est-ce un délimiteur ":"?
.c06d	f0 09		               beq  lnormcmd       ; Oui, on branche ranche à $09 ( +9) bytes
.c06f	e6 7a		               inc  $7a            ; Incrémente LSB du pointeur.
.c071	d0 f2		               bne  lnxtbuffb      ; Pas de report, on lit le prochaon octet.
.c073	e6 7b		               inc  $7b            ; On fait le report
.c075	38		               sec                 ; On force le branchement par BCS.
.c076	b0 ed		               bcs  lnxtbuffb      ; On lit le prochaon octet.
.c078	c9 3a		lnormcmd       cmp  #$3a           ; Est-ce un délimiteur ":"?
.c07a	b0 0a		               bcs  ltbasic        ; Si >= $0a
.c07c	c9 20		               cmp  #$20           ; Est-ce un " "?
.c07e	f0 0a		               beq  ltochrget      ; On passe au prochain caractère.
.c080	38		               sec                 ; Set Carry pour se préparer à la soustraction.
.c081	e9 30		               sbc  #$30           ; Soustrait la base de l'ascii su chiffre "0"
.c083	38		               sec                 ; set Carry pour se préparer à la soustraction.
.c084	e9 d0		               sbc  #$d0           ; Soustrait ascii et set bit
.c086	60		ltbasic        rts                 ; tbasic - 1 Retourne à Basic
.c087	4c 74 a4	               jmp  ready
.c08a	4c 73 00	ltochrget      jmp  $0073          ; tochrget - 3 lance CHARGET
.c08d	a9 7e		lfindxcmd      lda  #<cmdtbl       ; On place le (LSB) de l'adresse de la ...
.c08f	85 7f		               sta  $7f            ; ... table des commandes a l'adresse $7f ...
.c091	a9 c1		               lda  #>cmdtbl       ; ... et le (MSB) ...
.c093	85 80		               sta  $80            ; ... a l'adresse $80.
.c095	e6 7a		               inc  $7a            ; On passe au caractere suivant le @.
.c097	d0 02		               bne  lsetxy         ; Pas de report à faire.
.c099	e6 7b		               inc  $7b            ; On fait le report.
.c09b	a0 00		lsetxy         ldy  #$00           ; On initialise les deux index X et Y...
.c09d	a2 00		               ldx  #$00           ; ... à $00.
.c09f	b1 7f		lgettabcar     lda  ($7f),y        ; Somme nous à la fin de la commande ($00)?
.c0a1	f0 24		               beq  lgcmdvct       ; Si oui On récupère le vecteur de la commande.
.c0a3	d1 7a		               cmp  ($7a),y        ; Regarde si car = cmd.
.c0a5	d0 04		               bne  lnocmdfnd      ; Non, on regarde la commande suivante.
.c0a7	c8		               iny                 ; Oui, on compate le prochain caractère.
.c0a8	38		               sec                 ; On force un branchement à gettabcar pour ...
.c0a9	b0 f4		l820           bcs  lgettabcar     ; ... comparer le prochain car. de la table.
.c0ab	b1 7f		lnocmdfnd      lda  ($7f),y        ; La fin commande n'est pas trouvé.
.c0ad	f0 04		               beq  lcmdend        ; Avons nous trouver la fin de la commande.
.c0af	c8		               iny                 ; Incrémente l'index
.c0b0	38		               sec                 ; Met le Carry à 1 pour forcer BCS.
.c0b1	b0 f8		               bcs  lnocmdfnd      ; Branche puisqu'aucune commande n'a été trouvée.
.c0b3	c8		lcmdend        iny                 ; Incremente index
.c0b4	98		               tya                 ; Sauvegarde l'index dans l'acc.
.c0b5	18		               clc                 ; Met le Carry à 0 pour préparer l'addition.
.c0b6	65 7f		               adc  $7f            ; Aditionne l'Acc. au vecteur de commande.
.c0b8	85 7f		               sta  $7f            ; On le replace en mémoire.
.c0ba	a9 00		               lda  #$00           ; On ajoute le Carry (C+$00) de la dernière ...
.c0bc	65 80		               adc  $80            ; ... addition dans le MSB du vecteur ...
.c0be	85 80		               sta  $80            ; ... et le sauvegarder.
.c0c0	a0 00		               ldy  #$00           ; nitialise l'index
.c0c2	e8		               inx                 ; Ajoute 2 à x pour se déplacer vers la prochaine
.c0c3	e8		               inx                 ; ... adresse dans la table des commandes.
.c0c4	38		               sec                 ; Force le branchement de BCS.
.c0c5	b0 d8		               bcs  lgettabcar     ; Va lire le prochain caractere de la table.
.c0c7	bd 1c c2	lgcmdvct       lda  cmdvect,x      ; Récupère le LSB de l'adresse d'exécution.
.c0ca	85 80		               sta  $80            ; Le place à 80.
.c0cc	e8		               inx                 ; Avance X pour aller chercher le MSB ...
.c0cd	bd 1c c2	               lda  cmdvect,x      ; ... de l'adresse d'exécution et ...
.c0d0	85 81		               sta  $81            ; ... le sauvegarde.
.c0d2	6c 80 00	               jmp  ($0080)        ; Saute vers le vecteur d'exécution.
.c0d5	a2 0b		illegal        ldx  #$0b           ; Charge le code d'erreur dans X
.c0d7	6c 00 03	               jmp  ($300)         ; Affiche l'erreur.
.c0da			greetings
.c0da	20 df c6	               jsr  push
.c0dd	a9 06		               lda  #vbleu
.c0df	8d 21 d0	               sta  vicbackcol
.c0e2	a9 03		               lda  #vcyan
.c0e4	8d 20 d0	               sta  vicbordcol
.c0e7	20 d1 c5	               jsr  cls
.c0ea	a9 01		               lda  #vblanc
.c0ec	8d 86 02	               sta  bascol
.c0ef	20 df c6	               jsr  push
.c0f2	a2 24		               ldx  #<msg0
.c0f4	a0 c3		               ldy  #>msg0
.c0f6	20 ee c5	               jsr  puts
.c0f9	20 1e c7	               jsr  pull
.c0fc	20 df c6	               jsr  push
.c0ff	a2 27		               ldx  #<msg1
.c101	a0 c3		               ldy  #>msg1
.c103	20 ee c5	               jsr  puts
.c106	20 1e c7	               jsr  pull
.c109	20 df c6	               jsr  push
.c10c	a2 4f		               ldx  #<msg2
.c10e	a0 c3		               ldy  #>msg2
.c110	20 ee c5	               jsr  puts
.c113	20 1e c7	               jsr  pull
.c116	20 df c6	               jsr  push
.c119	a2 78		               ldx  #<msg3
.c11b	a0 c3		               ldy  #>msg3
.c11d	20 ee c5	               jsr  puts
.c120	20 1e c7	               jsr  pull
.c123	20 df c6	               jsr  push
.c126	a2 a1		               ldx  #<msg4
.c128	a0 c3		               ldy  #>msg4
.c12a	20 ee c5	               jsr  puts
.c12d	20 1e c7	               jsr  pull
.c130	a9 0d		               lda  #$0d
.c132	20 e8 c5	               jsr  putch
.c135	20 df c6	               jsr  push
.c138	a2 27		               ldx  #<msg1
.c13a	a0 c3		               ldy  #>msg1
.c13c	20 ee c5	               jsr  puts
.c13f	20 1e c7	               jsr  pull
.c142	a9 0d		               lda  #$0d
.c144	20 e8 c5	               jsr  putch
.c147	20 1e c7	               jsr  pop
.c14a	60		               rts
.c14b			ascii2bintxt
.c14b	20 df c6	               jsr  push           ;p21
.c14e	c9 30		               cmp  #$30           ;120
.c150	90 12		               bcc  Lnonum         ;130
.c152	c9 3a		               cmp  #$3a           ;140
.c154	90 08		               bcc  L210           ;150
.c156	e9 07		               sbc  #$07           ;160
.c158	90 0a		               bcc  Lnonum         ;170
.c15a	c9 40		               cmp  #$40           ;180
.c15c	b0 02		               bcs  L220           ;190
.c15e	29 0f		L210           and  #$0f           ;210
.c160	20 1e c7	L220           jsr  pop            ;220 return
.c163	60		               rts                 ;230
.c164	38		Lnonum         sec                 ;nonum
.c165	20 1e c7	               jsr  pop
.c168	60		               rts
.c169			p2tester
.c169	20 df c6	               jsr  push
.c16c	20 e4 ff	lnoxcmd        jsr  getin          ;noxcmd
.c16f	f0 fb		               beq  lnoxcmd        ;390
.c171	20 49 c9	               jsr  atobin          ;aschex2bin;400
.c174	90 02		               bcc  out            ;410
.c176	a9 ff		               lda  #$FF           ;flushpfx
.c178	85 fb		out            sta  $fb            ;430
.c17a	20 1e c7	               jsr  pop
.c17d	60		               rts            ;modepgm
.c17e			cmdtbl
>c17e	c3 cc d3 00	               .text     "CLS",0,"LOW",0,"UP",0
>c182	cc cf d7 00 d5 d0 00
>c189	d4 c5 d3 d4	               .text     "TEST",0
>c18d	00
>c18e	c1 c2 cf d5	               .text     "ABOUT",0,"?",0
>c192	d4 00 3f 00
>c196	d3 2b 00 d3	               .text     "S+",0,"S-",0,"B+",0,"B-",0,"F+",0,"F-",0,"FILL",0
>c19a	2d 00 c2 2b 00 c2 2d 00 c6 2b 00 c6 2d 00 c6 c9
>c1aa	cc cc 00
>c1ad	c4 c9 d2 00	               .text     "DIR",0,"8DIR",0,"9DIR",0,"10DIR",0,"11DIR",0,"12DIR",0
>c1b1	38 c4 c9 d2 00 39 c4 c9 d2 00 31 30 c4 c9 d2 00
>c1c1	31 31 c4 c9 d2 00 31 32 c4 c9 d2 00
>c1cd	43 4c 53 00	               .text     "cls",0,"low",0,"up",0
>c1d1	4c 4f 57 00 55 50 00
>c1d8	54 45 53 54	               .text     "test",0
>c1dc	00
>c1dd	41 42 4f 55	               .text     "about",0,"?",0
>c1e1	54 00 3f 00
>c1e5	53 2b 00 53	               .text     "s+",0,"s-",0,"b+",0,"b-",0,"f+",0,"f-",0,"fill",0
>c1e9	2d 00 42 2b 00 42 2d 00 46 2b 00 46 2d 00 46 49
>c1f9	4c 4c 00
>c1fc	44 49 52 00	               .text     "dir",0,"8dir",0,"9dir",0,"10dir",0,"11dir",0,"12dir",0
>c200	38 44 49 52 00 39 44 49 52 00 31 30 44 49 52 00
>c210	31 31 44 49 52 00 31 32 44 49 52 00
.c21c			cmdvect
>c21c	68 c2 6d c2	               .word     woscls, woslow, wosup
>c220	72 c2
>c222	77 c2		               .word     wostest
>c224	85 c2 97 c2	               .word     wosabout, woshelp
>c228	a7 c2 ad c2	               .word     wosincback, wosdecback,wosincbrd, wosdecbrd
>c22c	9b c2 a1 c2
>c230	b3 c2 b9 c2	               .word     wosincfont, wosdecfont, wosfillcol
>c234	90 c2
>c236	fd c2 e1 c2	               .word     dir, dir8, dir9, dir10, dir11, dir12
>c23a	e6 c2 eb c2 f0 c2 f5 c2
>c242	68 c2 6d c2	               .word     woscls, woslow, wosup
>c246	72 c2
>c248	77 c2		               .word     wostest
>c24a	85 c2 97 c2	               .word     wosabout, woshelp
>c24e	a7 c2 ad c2	               .word     wosincback, wosdecback, wosincbrd, wosdecbrd
>c252	9b c2 a1 c2
>c256	b3 c2 b9 c2	               .word     wosincfont, wosdecfont, wosfillcol
>c25a	90 c2
>c25c	fd c2 e1 c2	               .word     dir, dir8, dir9, dir10, dir11, dir12
>c260	e6 c2 eb c2 f0 c2 f5 c2
.c268			cmdcode
.c268	a9 93		woscls         lda  #$93       ; code 147 clear+home
.c26a	4c d2 ff	               jmp  chrout     ;
.c26d	a9 0e		woslow         lda  #$0e
.c26f	4c d2 ff	               jmp  chrout
.c272	a9 8e		wosup          lda  #$8e
.c274	4c d2 ff	               jmp  chrout
.c277			wostest
.c277	20 df c6	               jsr  push
.c27a	a2 89		               ldx  #<tester
.c27c	a0 c2		               ldy  #>tester
.c27e	20 ee c5	               jsr  puts
.c281	20 1e c7	               jsr  pull
.c284	60		               rts
.c285	20 da c0	wosabout       jsr  greetings
.c288	60		               rts
>c289	54 45 53 54	tester         .null "tester"
>c28d	45 52 00
.c290	20 07 c3	wosfillcol     jsr  fillcarcol
.c293	60		               rts
.c294	4c bf c2	               jmp  woscleancol
.c297	20 13 c5	woshelp        jsr  help
.c29a	60		               rts
.c29b	ee 04 c3	wosincbrd      inc  bcol
.c29e	4c bf c2	               jmp  woscleancol
.c2a1	ce 04 c3	wosdecbrd      dec  bcol
.c2a4	4c bf c2	               jmp  woscleancol
.c2a7	ee 05 c3	wosincback     inc  scol
.c2aa	4c bf c2	               jmp  woscleancol
.c2ad	ce 05 c3	wosdecback     dec  scol
.c2b0	4c bf c2	               jmp  woscleancol
.c2b3	ee 06 c3	wosincfont     inc  fcol
.c2b6	4c bf c2	               jmp  woscleancol
.c2b9	ce 06 c3	wosdecfont     dec  fcol
.c2bc	4c bf c2	               jmp  woscleancol
.c2bf	ad 05 c3	woscleancol    lda  scol
.c2c2	29 0f		               and  #$0f
.c2c4	8d 05 c3	               sta  scol
.c2c7	8d 21 d0	               sta  vicbackcol
.c2ca	ad 04 c3	               lda  bcol
.c2cd	29 0f		               and  #$0f
.c2cf	8d 04 c3	               sta  bcol
.c2d2	8d 20 d0	               sta  vicbordcol
.c2d5	ad 06 c3	               lda  fcol
.c2d8	29 0f		               and  #$0f
.c2da	8d 06 c3	               sta  fcol
.c2dd	8d 86 02	               sta  bascol
.c2e0	60		               rts
.c2e1	a9 08		dir8           lda  #$08
.c2e3	4c fa c2	               jmp  dirn
.c2e6	a9 09		dir9           lda  #$09
.c2e8	4c fa c2	               jmp  dirn
.c2eb	a9 0a		dir10          lda  #$0a
.c2ed	4c fa c2	               jmp  dirn
.c2f0	a9 0b		dir11          lda  #$0b
.c2f2	4c fa c2	               jmp  dirn
.c2f5	a9 0c		dir12          lda  #$0c
.c2f7	4c fa c2	               jmp  dirn
.c2fa	8d 1c cb	dirn           sta  dsk_dev
.c2fd	20 0e ca	dir            jsr  diskdir
.c300	20 eb c9	               jsr  diskerror
.c303	60		               rts
>c304	00		bcol           .byte     $00
>c305	00		scol           .byte     $00
>c306	00		fcol           .byte     $00
.c307			fillcarcol
.c307	20 df c6	               jsr  push
.c30a	a2 04		               ldx  #$04
.c30c	a0 00		               ldy  #$00
.c30e	ad 86 02	               lda  bascol
.c311	99 00 d8	nxtcolram      sta  colram0,y
.c314	99 00 d9	               sta  colram1,y
.c317	99 00 da	               sta  colram2,y
.c31a	99 00 db	               sta  colram3,y
.c31d	c8		               iny
.c31e	d0 f1		               bne  nxtcolram
.c320	20 1e c7	               jsr  pop
.c323	60		               rts
>c324	93 0e 00	msg0 .byte 147,14,0
>c327	20 2a 2a 2a	msg1 .null " **************************************"
>c32b	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a
>c33b	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a
>c34b	2a 2a 2a 00
>c34f	0d		msg2 .byte 13
>c350	20 2a 20 20	     .null " *     c64 WOS commandes etendues     *"
>c354	20 20 20 43 36 34 20 d7 cf d3 20 43 4f 4d 4d 41
>c364	4e 44 45 53 20 45 54 45 4e 44 55 45 53 20 20 20
>c374	20 20 2a 00
>c378	0d		msg3 .byte 13
>c379	20 2a 20 20	     .null " *        par Daniel Lafrance         *"
>c37d	20 20 20 20 20 20 50 41 52 20 c4 41 4e 49 45 4c
>c38d	20 cc 41 46 52 41 4e 43 45 20 20 20 20 20 20 20
>c39d	20 20 2a 00
>c3a1	0d		msg4 .byte 13
>c3a2	20 2a 20 20	     .null format(   " *    Version.....: %s   *",version)
>c3a6	20 20 d6 45 52 53 49 4f 4e 2e 2e 2e 2e 2e 3a 20
>c3b6	32 30 32 34 31 31 31 38 2d 32 32 33 30 33 38 20
>c3c6	20 20 2a 00
>c3ca	0d		hlp0           .byte $0d
>c3cb	20 20 40 43	               .null "  @cls  : clear scr  @test :           "
>c3cf	4c 53 20 20 3a 20 43 4c 45 41 52 20 53 43 52 20
>c3df	20 40 54 45 53 54 20 3a 20 20 20 20 20 20 20 20
>c3ef	20 20 20 00
>c3f3	0d		hlp1           .byte $0d
>c3f4	20 20 40 4c	               .null "  @low  : lcase      @up   : ucase     "
>c3f8	4f 57 20 20 3a 20 4c 43 41 53 45 20 20 20 20 20
>c408	20 40 55 50 20 20 20 3a 20 55 43 41 53 45 20 20
>c418	20 20 20 00
>c41c	0d		hlp2           .byte $0d
>c41d	20 20 40 41	               .null "  @about: tell me    @?    : this help "
>c421	42 4f 55 54 3a 20 54 45 4c 4c 20 4d 45 20 20 20
>c431	20 40 3f 20 20 20 20 3a 20 54 48 49 53 20 48 45
>c441	4c 50 20 00
>c445	0d		hlp3           .byte $0d
>c446	20 20 40 53	               .null "  @s+/- : scrn-col   @b+/- : bord-col  "
>c44a	2b 2f 2d 20 3a 20 53 43 52 4e 2d 43 4f 4c 20 20
>c45a	20 40 42 2b 2f 2d 20 3a 20 42 4f 52 44 2d 43 4f
>c46a	4c 20 20 00
>c46e	0d		hlp4           .byte $0d
>c46f	20 20 40 46	               .null "  @f+/- : font-col   @fill : fill-font "
>c473	2b 2f 2d 20 3a 20 46 4f 4e 54 2d 43 4f 4c 20 20
>c483	20 40 46 49 4c 4c 20 3a 20 46 49 4c 4c 2d 46 4f
>c493	4e 54 20 00
>c497	0d		hlp5           .byte $0d
>c498	20 20 40 44	               .null "  @dir  : list disk  @8dir : lst #8    "
>c49c	49 52 20 20 3a 20 4c 49 53 54 20 44 49 53 4b 20
>c4ac	20 40 38 44 49 52 20 3a 20 4c 53 54 20 23 38 20
>c4bc	20 20 20 00
>c4c0	0d		hlp6           .byte $0d
>c4c1	20 20 40 39	               .null "  @9dir : llst #8    @10dir: lst drv 8 "
>c4c5	44 49 52 20 3a 20 4c 4c 53 54 20 23 38 20 20 20
>c4d5	20 40 31 30 44 49 52 3a 20 4c 53 54 20 44 52 56
>c4e5	20 38 20 00
>c4e9	0d		hlp7           .byte $0d
>c4ea	20 20 40 31	               .text "  @11dir: list disk  @12dir: lst drv 8 "
>c4ee	31 44 49 52 3a 20 4c 49 53 54 20 44 49 53 4b 20
>c4fe	20 40 31 32 44 49 52 3a 20 4c 53 54 20 44 52 56
>c50e	20 38 20
>c511	0d 00		               .byte $0d, $00
.c513			help
.c513	20 df c6	               jsr  push
.c516	20 df c6	               jsr  push
.c519	a2 24		               ldx  #<msg0
.c51b	a0 c3		               ldy  #>msg0
.c51d	20 ee c5	               jsr  puts
.c520	20 1e c7	               jsr  pull
.c523	20 df c6	               jsr  push
.c526	a2 27		               ldx  #<msg1
.c528	a0 c3		               ldy  #>msg1
.c52a	20 ee c5	               jsr  puts
.c52d	20 1e c7	               jsr  pull
.c530	20 df c6	               jsr  push
.c533	a2 ca		               ldx  #<hlp0
.c535	a0 c3		               ldy  #>hlp0
.c537	20 ee c5	               jsr  puts
.c53a	20 1e c7	               jsr  pull
.c53d	20 df c6	               jsr  push
.c540	a2 f3		               ldx  #<hlp1
.c542	a0 c3		               ldy  #>hlp1
.c544	20 ee c5	               jsr  puts
.c547	20 1e c7	               jsr  pull
.c54a	20 df c6	               jsr  push
.c54d	a2 1c		               ldx  #<hlp2
.c54f	a0 c4		               ldy  #>hlp2
.c551	20 ee c5	               jsr  puts
.c554	20 1e c7	               jsr  pull
.c557	20 df c6	               jsr  push
.c55a	a2 45		               ldx  #<hlp3
.c55c	a0 c4		               ldy  #>hlp3
.c55e	20 ee c5	               jsr  puts
.c561	20 1e c7	               jsr  pull
.c564	20 df c6	               jsr  push
.c567	a2 6e		               ldx  #<hlp4
.c569	a0 c4		               ldy  #>hlp4
.c56b	20 ee c5	               jsr  puts
.c56e	20 1e c7	               jsr  pull
.c571	20 df c6	               jsr  push
.c574	a2 97		               ldx  #<hlp5
.c576	a0 c4		               ldy  #>hlp5
.c578	20 ee c5	               jsr  puts
.c57b	20 1e c7	               jsr  pull
.c57e	20 df c6	               jsr  push
.c581	a2 c0		               ldx  #<hlp6
.c583	a0 c4		               ldy  #>hlp6
.c585	20 ee c5	               jsr  puts
.c588	20 1e c7	               jsr  pull
.c58b	20 df c6	               jsr  push
.c58e	a2 e9		               ldx  #<hlp7
.c590	a0 c4		               ldy  #>hlp7
.c592	20 ee c5	               jsr  puts
.c595	20 1e c7	               jsr  pull
.c598	20 df c6	               jsr  push
.c59b	a2 27		               ldx  #<msg1
.c59d	a0 c3		               ldy  #>msg1
.c59f	20 ee c5	               jsr  puts
.c5a2	20 1e c7	               jsr  pull
.c5a5	20 1e c7	               jsr  pop
.c5a8	60		               rts

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>c5a9	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>c5ad	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.c5b1			libtart

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.c5b1			scrmaninit
.c5b1	20 df c6	               jsr  push
.c5b4	a9 06		               lda  #vbleu
.c5b6	8d 21 d0	               sta  vicbackcol
.c5b9	a9 05		               lda  #vvert
.c5bb	8d 20 d0	               sta  vicbordcol
.c5be	a9 01		               lda  #vblanc
.c5c0	8d 86 02	               sta  bascol
.c5c3	ad 00 04	               lda  scrnram
.c5c6	8d 00 04	               sta  scrnram
.c5c9	20 d1 c5	               jsr  cls
.c5cc	20 1e c7	               jsr  pop
.c5cf	60		               rts
>c5d0	8e		characterset   .byte b_uppercase
.c5d1			cls
.c5d1	08		               php
.c5d2	48		               pha
.c5d3	a9 93		               lda  #$93
.c5d5	20 e8 c5	               jsr  putch
.c5d8	68		               pla
.c5d9	28		               plp
.c5da	60		               rts
.c5db			putnch
.c5db	08		               php
.c5dc	e0 00		               cpx  #$00
.c5de	f0 06		               beq  out
.c5e0	20 d2 ff	again          jsr  $ffd2
.c5e3	ca		               dex
.c5e4	d0 fa		               bne  again
.c5e6	28		out            plp
.c5e7	60		               rts
.c5e8			putch
.c5e8	08		               php
.c5e9	20 d2 ff	               jsr  $ffd2
.c5ec	28		               plp
.c5ed	60		               rts
.c5ee			puts
.c5ee	20 df c6	               jsr  push
.c5f1	86 fb		               stx  zpage1
.c5f3	84 fc		               sty  zpage1+1
.c5f5	a0 00		               ldy  #0
.c5f7	b1 fb		next           lda  (zpage1),y
.c5f9	f0 09		               beq  exit
.c5fb	20 e8 c5	               jsr  putch
.c5fe	20 e6 c7	               jsr  inczp1
.c601	4c f7 c5	               jmp  next
.c604	20 1e c7	exit           jsr  pop
.c607	60		               rts
.c608			gotoxy
.c608	08		               php
.c609	18		               clc
.c60a	8a		               txa
.c60b	48		               pha
.c60c	98		               tya
.c60d	aa		               tax
.c60e	68		               pla
.c60f	a8		               tay
.c610	20 f0 ff	               jsr  kplot
.c613	28		               plp
.c614	60		               rts
.c615			cursor
=$0286			bascol    =    $0286
.c615	08		               php
.c616	48		               pha
.c617	90 12		               bcc  restore
.c619	20 f0 ff	               jsr  kplot
.c61c	8c 3d c6	               sty  cx
.c61f	8e 3e c6	               stx  cy
.c622	ad 86 02	               lda  bascol
.c625	8d 3f c6	               sta  bcol
.c628	4c 3a c6	               jmp  out
.c62b	ae 3e c6	restore        ldx  cy
.c62e	ac 3d c6	               ldy  cx
.c631	20 f0 ff	               jsr  kplot
.c634	ad 3f c6	               lda  bcol
.c637	8d 86 02	               sta  bascol
.c63a	68		out            pla
.c63b	28		               plp
.c63c	60		               rts
>c63d	00		cx   .byte     $00
>c63e	00		cy   .byte     $00
>c63f	00		bcol .byte     $00
.c640			cursave
.c640	08		               php
.c641	38		               sec
.c642	20 15 c6	               jsr  cursor
.c645	28		               plp
.c646	60		               rts
.c647			curput
.c647	08		               php
.c648	18		               clc
.c649	20 15 c6	               jsr  cursor
.c64c	28		               plp
.c64d	60		               rts
.c64e			putsxy
.c64e	20 df c6	               jsr  push
.c651	86 fb		               stx  zpage1
.c653	84 fc		               sty  zpage1+1
.c655	a0 00		               ldy  #$00
.c657	b1 fb		               lda  (zpage1),y
.c659	aa		               tax
.c65a	20 e6 c7	               jsr  inczp1
.c65d	b1 fb		               lda  (zpage1),y
.c65f	a8		               tay
.c660	20 08 c6	               jsr  gotoxy
.c663	20 e6 c7	               jsr  inczp1
.c666	a6 fb		               ldx  zpage1
.c668	a4 fc		               ldy  zpage1+1
.c66a	20 ee c5	               jsr  puts
.c66d	20 1e c7	               jsr  pop
.c670	60		               rts
>c671	00 00		straddr   .word     $00
>c673	00		px        .byte     $00
>c674	00		py        .byte     $00
>c675	00 00		zp1       .word     $00
.c677			putscxy
.c677	20 df c6	               jsr  push
.c67a	84 fc		               sty  zpage1+1
.c67c	86 fb		               stx  zpage1
.c67e	ad 86 02	               lda  bascol
.c681	8d a1 c6	               sta  bc
.c684	a0 00		               ldy #$00
.c686	b1 fb		               lda  (zpage1),y
.c688	8d 86 02	               sta  bascol
.c68b	20 e6 c7	               jsr  inczp1
.c68e	a6 fb		               ldx  zpage1
.c690	a4 fc		               ldy  zpage1+1
.c692	20 4e c6	               jsr  putsxy
.c695	ad a1 c6	               lda  bc
.c698	8d 86 02	               sta  bascol
.c69b	20 1e c7	               jsr  pop
.c69e	60		               rts
>c69f	00 00		straddr  .word      $00
>c6a1	00		bc       .byte      $00
>c6a2	00 00		zp1      .word      $00
.c6a4			putrahex
.c6a4	08		               php
.c6a5	48		               pha
.c6a6	20 fc c8	               jsr  atohex
.c6a9	a9 9b		               lda  #<a2hexstr
.c6ab	a0 c8		               ldy  #>a2hexstr
.c6ad	20 ee c5	               jsr  puts
.c6b0	68		               pla
.c6b1	28		               plp
.c6b2	60		               rts
.c6b3			kputrahexxy
.c6b3			bputrahexxy
.c6b3			putrahexxy
.c6b3	08		               php
.c6b4	20 fc c8	               jsr  atohex
.c6b7	a9 98		               lda  #<a2hexpos
.c6b9	a0 c8		               ldy  #>a2hexpos
.c6bb	20 4e c6	               jsr  putsxy
.c6be	68		               pla
.c6bf	28		               plp
.c6c0	60		               rts
.c6c1			putrahexcxy
.c6c1	08		               php
.c6c2	20 fc c8	               jsr  atohex
.c6c5	a9 98		               lda  #<a2hexpos
.c6c7	a0 c8		               ldy  #>a2hexpos
.c6c9	20 77 c6	               jsr  putscxy
.c6cc	68		               pla
.c6cd	28		               plp
.c6ce	60		               rts
.c6cf			setinverse
.c6cf	48		               pha
.c6d0	a9 12		               lda  #$12
.c6d2	20 d2 ff	               jsr  $ffd2
.c6d5	68		               pla
.c6d6	60		               rts
.c6d7			clrinverse
.c6d7	48		               pha
.c6d8	a9 92		               lda  #$92
.c6da	20 d2 ff	               jsr  $ffd2
.c6dd	68		               pla
.c6de	60		               rts

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.c6df			push
.c6df	08		          php            ; stack : flg, pcl, pch
.c6e0	78		          sei
.c6e1	8d 1b c7	          sta  ra        ; save a
.c6e4	68		          pla            ; stack : pcl, pch
.c6e5	8d 1a c7	          sta  rp        ; save rp
.c6e8	68		          pla            ; stack : pch
.c6e9	8d 1c c7	          sta  pc        ; save pcl
.c6ec	68		          pla            ; stack : -
.c6ed	8d 1d c7	          sta  pc+1      ; save pch
.c6f0	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c6f2	48		          pha            ; stack : zp1l
.c6f3	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c6f5	48		          pha            ; stack : zp1h, zp1l
.c6f6	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c6f8	48		          pha            ; stack : zp2l, zp1h, zp1l
.c6f9	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c6fb	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c6fc	ad 1a c7	          lda  rp        ; get rp
.c6ff	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c700	ad 1b c7	          lda  ra        ; get a
.c703	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c704	8a		          txa            ; get x
.c705	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c706	98		          tya            ; get y
.c707	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c708	ad 1d c7	          lda  pc+1      ; get pch
.c70b	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c70c	ad 1c c7	          lda  pc        ; get pcl
.c70f	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c710	ad 1a c7	          lda  rp        ; get rp
.c713	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c714	ad 1b c7	          lda  ra        ; get a
.c717	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c718	58		          cli
.c719	60		          rts
>c71a	00		rp        .byte     0
>c71b	00		ra        .byte     0
>c71c	00 00		pc        .word     0
.c71e			pull
.c71e			pop
.c71e	78		          sei
.c71f	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c720	8d 53 c7	          sta  pc        ; save pcl
.c723	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c724	8d 54 c7	          sta  pc+1      ; save pch
.c727	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c728	a8		          tay            ; set y
.c729	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c72a	aa		          tax            ; set x
.c72b	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c72c	8d 52 c7	          sta  ra        ; save a
.c72f	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c730	8d 51 c7	          sta  rp        ; save rp
.c733	68		          pla            ; stack : zp2l, zp1h, zp1l
.c734	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c736	68		          pla            ; stack : zp1h, zp1l
.c737	85 fd		          sta  zpage2    ; get zpage2 High byte
.c739	68		          pla            ; stack : zp1l
.c73a	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c73c	68		          pla            ; stack :
.c73d	85 fb		          sta  zpage1    ; get zpage1 High byte
.c73f	ad 54 c7	          lda  pc+1      ; get pch
.c742	48		          pha            ; stack : pch
.c743	ad 53 c7	          lda  pc
.c746	48		          pha            ; stack : pcl, pch
.c747	ad 51 c7	          lda  rp        ; get rp
.c74a	48		          pha            ; stack : rp, pcl, pch
.c74b	ad 52 c7	          lda  ra        ; set ra
.c74e	58		          cli
.c74f	28		          plp            ; stack : pcl, pch
.c750	60		          rts
>c751	00		rp        .byte     0
>c752	00		ra        .byte     0
>c753	00 00		pc        .word     0

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c755			blkfill
.c755	20 df c6	bf0            jsr  push
.c758	20 16 c8	               jsr  savezp1
.c75b	84 fc		               sty  zpage1+1
.c75d	a0 00		               ldy  #$00
.c75f	84 fb		               sty  zpage1
.c761	91 fb		bf1            sta  (zpage1),y
.c763	c8		               iny
.c764	d0 fb		               bne  bf1
.c766	20 25 c8	               jsr  restzp1
.c769	20 1e c7	               jsr  pop
.c76c	60		               rts
.c76d			memfill
.c76d	20 df c6	               jsr  push
.c770	20 55 c7	mf1            jsr  blkfill
.c773	c8		               iny
.c774	ca		               dex
.c775	d0 f9		               bne  mf1
.c777	20 1e c7	               jsr  pop
.c77a	60		               rts
.c77b			memmove
.c77b	20 df c6	               jsr  push
.c77e	ba		               tsx            ; On se crée un pointeur ...
.c77f	8a		               txa
.c780	18		               clc
.c781	69 0b		               adc  #11
.c783	a8		               tay
.c784	a2 06		               ldx  #$06
.c786	b9 00 01	nextbyte       lda  $0100,y
.c789	99 d5 c7	               sta  words,y
.c78c	c8		               iny
.c78d	ca		               dex
.c78e	d0 f6		               bne  nextbyte
.c790	ad d5 c7	               lda  s
.c793	8d ac c7	               sta  source+1
.c796	ad d6 c7	               lda  s+1
.c799	8d ad c7	               sta  source+2
.c79c	ad d7 c7	               lda  d
.c79f	8d a9 c7	               sta  destin+1
.c7a2	ad d8 c7	               lda  d+1
.c7a5	8d aa c7	               sta  destin+2
.c7a8	ad ff ff	destin         lda  $ffff
.c7ab	8d ff ff	source         sta  $ffff
.c7ae	ee a9 c7	               inc  destin+1
.c7b1	d0 03		               bne  src
.c7b3	ee aa c7	               inc  destin+2
.c7b6	ee ac c7	src            inc  source+1
.c7b9	d0 03		               bne  cnt
.c7bb	ee ad c7	               inc  source+2
.c7be	ad d9 c7	cnt            lda  compte
.c7c1	d0 08		               bne  decit
.c7c3	ad da c7	               lda  compte+1
.c7c6	f0 09		               beq  fini
.c7c8	ce da c7	               dec  compte+1
.c7cb	ce d9 c7	decit          dec  compte
.c7ce	4c a8 c7	               jmp  destin
.c7d1	20 1e c7	fini           jsr  pop
.c7d4	60		               rts
.c7d5			words
>c7d5	00 00		s         .word     $0000
>c7d7	00 00		d         .word     $0000
>c7d9	00 00		compte    .word     $0000
.c7db			decword
.c7db	20 df c6	               jsr  push
.c7de	86 fd		               stx  zpage2
.c7e0	84 fe		               sty  zpage2+1
.c7e2	20 1e c7	               jsr  pop
.c7e5	60		               rts
.c7e6			inczp1
.c7e6	08		               php
.c7e7	48		               pha
.c7e8	e6 fb		               inc  zpage1
.c7ea	a5 fb		               lda  zpage1
.c7ec	d0 02		               bne  nopage
.c7ee	e6 fc		               inc  zpage1+1
.c7f0	68		nopage         pla
.c7f1	28		               plp
.c7f2	60		               rts
.c7f3			deczp1
.c7f3	08		                php
.c7f4	48		                pha
.c7f5	c6 fb		                dec  zpage1
.c7f7	d0 02		                bne  nopage
.c7f9	c6 fc		                dec  zpage1+1
.c7fb	68		nopage          pla
.c7fc	28		                plp
.c7fd	60		                rts
.c7fe			inczp2
.c7fe	08		               php
.c7ff	48		               pha
.c800	e6 fd		               inc  zpage2
.c802	a5 fd		               lda  zpage2
.c804	d0 02		               bne  nopage
.c806	e6 fe		               inc  zpage2+1
.c808	68		nopage         pla
.c809	28		               plp
.c80a	60		               rts
.c80b			deczp2
.c80b	08		               php
.c80c	48		               pha
.c80d	a5 fd		               lda  zpage2
.c80f	d0 02		               bne  nopage
.c811	c6 fe		               dec  zpage2+1
.c813	68		nopage         pla
.c814	28		               plp
.c815	60		               rts
.c816			savezp1
.c816	08		               php
.c817	48		               pha
.c818	a5 fb		               lda  zpage1
.c81a	8d 92 c8	               sta  zp1
.c81d	a5 fc		               lda  zpage1+1
.c81f	8d 93 c8	               sta  zp1+1
.c822	68		               pla
.c823	28		               plp
.c824	60		               rts
.c825			restzp1
.c825	08		               php
.c826	48		               pha
.c827	ad 92 c8	               lda zp1
.c82a	85 fb		               sta zpage1
.c82c	ad 93 c8	               lda zp1+1
.c82f	85 fc		               sta zpage1+1
.c831	68		               pla
.c832	28		               plp
.c833	60		               rts
.c834			savezp2
.c834	08		         php
.c835	48		         pha
.c836	a5 fd		         lda zpage2
.c838	8d 94 c8	         sta zp2
.c83b	a5 fe		         lda zpage2+1
.c83d	8d 95 c8	         sta zp2+1
.c840	68		         pla
.c841	28		         plp
.c842	60		         rts
.c843			restzp2
.c843	08		                php
.c844	48		                pha
.c845	ad 94 c8	                lda  zp2
.c848	85 fd		                sta  zpage2
.c84a	ad 95 c8	                lda  zp2+1
.c84d	85 fe		                sta  zpage2+1
.c84f	68		                pla
.c850	28		                plp
.c851	60		                rts
.c852			xy2addr
.c852	08		                php
.c853	48		                pha
.c854	8a		                txa
.c855	48		                pha
.c856	98		                tya
.c857	48		                pha
.c858	ad 8d c8	                lda     addr1+1
.c85b	8d 8f c8	                sta     addr2+1
.c85e	ad 8c c8	                lda     addr1
.c861	8d 8e c8	                sta     addr2
.c864	c0 00		                cpy     #$00
.c866	f0 0f		                beq     addx
.c868	18		moreline        clc
.c869	6d 8b c8	                adc     ymult
.c86c	90 03		                bcc     norepy
.c86e	ee 8f c8	                inc     addr2+1
.c871	8d 8e c8	norepy          sta     addr2
.c874	88		                dey
.c875	d0 f1		                bne     moreline
.c877	8a		addx            txa
.c878	18		                clc
.c879	6d 8e c8	                adc     addr2
.c87c	90 03		                bcc     thatsit
.c87e	ee 8f c8	                inc     addr2+1
.c881	8d 8e c8	thatsit         sta     addr2
.c884	68		                pla
.c885	a8		                tay
.c886	68		                pla
.c887	aa		                tax
.c888	68		                pla
.c889	28		                plp
.c88a	60		                rts
>c88b	28		ymult          .byte     40
>c88c	00 00		addr1          .word     $0000
>c88e	00 00		addr2          .word     $0000
>c890	00 00		bytecnt        .word     $0000
>c892	00 00		zp1        .word   $0000
>c894	00 00		zp2        .word   $0000

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c896	01		a2hexcol       .byte     1              ; pour aputscxy
>c897	00		a2hexbkcol     .byte     %00000000
.c898			a2hexpos
>c898	00		a2hexpx        .byte     0              ; pour aputsxy
>c899	00		a2hexpy        .byte     0
>c89a	24		a2hexprefix    .byte     "$"            ; pour aputs
>c89b	00 00		a2hexstr       .word     $00
>c89d	00 00		               .word     $00
>c89f	00		               .byte     0              ; 0 end string
>c8a0	30 30 30 30	abin           .null     "00000000"
>c8a4	30 30 30 30 00
>c8a9	20 20 20 00	adec           .null     "   "
.c8ad			putahexfmtxy
.c8ad	20 df c6	               jsr  push
.c8b0	20 fc c8	               jsr  atohex
.c8b3	ae 98 c8	               ldx  a2hexpx
.c8b6	ac 99 c8	               ldy  a2hexpy
.c8b9	20 08 c6	               jsr  gotoxy
.c8bc	a2 9a		               ldx  #<a2hexprefix
.c8be	a0 c8		               ldy  #>a2hexprefix
.c8c0	20 ee c5	               jsr  puts
.c8c3	20 1e c7	               jsr  pop
.c8c6	60		               rts
.c8c7			putahexfmt
.c8c7	20 df c6	               jsr  push
.c8ca	20 fc c8	               jsr  atohex
.c8cd	a2 9a		               ldx  #<a2hexprefix
.c8cf	a0 c8		               ldy  #>a2hexprefix
.c8d1	20 ee c5	               jsr  puts
.c8d4	20 1e c7	               jsr  pop
.c8d7	60		               rts
.c8d8			putahex
.c8d8	20 df c6	               jsr  push
.c8db	20 fc c8	               jsr  atohex
.c8de	a2 9b		               ldx  #<a2hexstr
.c8e0	a0 c8		               ldy  #>a2hexstr
.c8e2	20 ee c5	               jsr  puts
.c8e5	20 1e c7	               jsr  pop
.c8e8	60		               rts
.c8e9			nibtohex
.c8e9	08		               php
.c8ea	29 0f		               and  #$0f
.c8ec	f8		               sed
.c8ed	18		               clc
.c8ee	69 90		               adc  #$90
.c8f0	69 40		               adc  #$40
.c8f2	d8		               cld
.c8f3	28		               plp
.c8f4	60		               rts
.c8f5			lsra4bits
.c8f5	08		               php
.c8f6	4a		               lsr
.c8f7	4a		               lsr
.c8f8	4a		               lsr
.c8f9	4a		               lsr
.c8fa	28		               plp
.c8fb	60		               rts
.c8fc			atohex
.c8fc	08		               php
.c8fd	48		               pha
.c8fe	48		               pha
.c8ff	20 f5 c8	               jsr  lsra4bits
.c902	20 e9 c8	               jsr  nibtohex
.c905	8d 9b c8	               sta  a2hexstr
.c908	68		               pla
.c909	20 e9 c8	               jsr  nibtohex
.c90c	8d 9c c8	               sta  a2hexstr+1
.c90f	a9 00		               lda  #$00                ; set end of string
.c911	8d 9d c8	               sta  a2hexstr+2
.c914	68		               pla
.c915	28		               plp
.c916	60		               rts
.c917			xy2hex
.c917	20 df c6	               jsr  push
.c91a	20 fc c8	               jsr  atohex
.c91d	8a		               txa
.c91e	48		               pha
.c91f	20 f5 c8	               jsr  lsra4bits
.c922	20 e9 c8	               jsr  nibtohex
.c925	8d 9b c8	               sta  a2hexstr
.c928	68		               pla
.c929	20 e9 c8	               jsr  nibtohex
.c92c	8d 9c c8	               sta  a2hexstr+1
.c92f	98		               tya
.c930	48		               pha
.c931	20 f5 c8	               jsr  lsra4bits
.c934	20 e9 c8	               jsr  nibtohex
.c937	8d 9d c8	               sta  a2hexstr+2
.c93a	68		               pla
.c93b	20 e9 c8	               jsr  nibtohex
.c93e	8d 9e c8	               sta  a2hexstr+3
.c941	a9 00		               lda  #$00                ; 0 ended string
.c943	8d 9f c8	               sta  a2hexstr+4
.c946	20 1e c7	               jsr  pop
.c949			atobin
.c949	20 df c6	               jsr  push
.c94c	a2 08		               ldx  #8
.c94e	a0 00		               ldy  #0
.c950	18		               clc
.c951	2a		nextbit        rol
.c952	48		               pha
.c953	69 00		               adc  #$00
.c955	29 01		               and  #$01
.c957	20 e9 c8	               jsr  nibtohex
.c95a	99 a0 c8	               sta  abin,y
.c95d	68		               pla
.c95e	c8		               iny
.c95f	ca		               dex
.c960	d0 ef		               bne  nextbit
.c962	a9 00		               lda  #0
.c964	99 a0 c8	               sta  abin,y
.c967	20 1e c7	               jsr  pull
.c96a	60		               rts
.c96b			putabin
.c96b	20 49 c9	               jsr     atobin
.c96e	20 df c6	               jsr     push
.c971	a2 a0		               ldx     #<abin
.c973	a0 c8		               ldy     #>abin
.c975	20 ee c5	               jsr     puts
.c978	20 1e c7	               jsr     pop
.c97b	60		               rts
.c97c			printabin
.c97c	20 df c6	               jsr     push
.c97f	a2 a0		               ldx     #<abin
.c981	a0 c8		               ldy     #>abin
.c983	20 ee c5	               jsr     puts
.c986	20 1e c7	               jsr     pop
.c989	60		               rts
.c98a			putabinfmt
.c98a	08		               php
.c98b	48		               pha
.c98c	a9 25		               lda     #"%"
.c98e	20 e8 c5	               jsr     putch
.c991	68		               pla
.c992	20 6b c9	               jsr     putabin
.c995	28		               plp
.c996	60		               rts
.c997			putabinxy
.c997	20 08 c6	               jsr     gotoxy
.c99a	20 6b c9	               jsr     putabin
.c99d	60		               rts
.c99e			putabinfmtxy
.c99e	20 08 c6	               jsr     gotoxy
.c9a1	20 8a c9	               jsr     putabinfmt
.c9a4	60		               rts
.c9a5			atodec
.c9a5	20 df c6	               jsr  push
.c9a8	f8		               sed
.c9a9	aa		               tax
.c9aa	a0 00		               ldy  #$00
.c9ac	a9 00		               lda  #$00
.c9ae	18		nextbit        clc
.c9af	69 01		               adc  #$01
.c9b1	90 01		               bcc  decx
.c9b3	c8		               iny
.c9b4	ca		decx           dex
.c9b5	d0 f7		               bne  nextbit
.c9b7	48		               pha
.c9b8	98		               tya
.c9b9	20 e9 c8	               jsr  nibtohex
.c9bc	8d a9 c8	               sta  adec
.c9bf	68		               pla
.c9c0	48		               pha
.c9c1	20 e9 c8	               jsr  nibtohex
.c9c4	8d ab c8	               sta  adec+2
.c9c7	68		               pla
.c9c8	6a		               ror
.c9c9	6a		               ror
.c9ca	6a		               ror
.c9cb	6a		               ror
.c9cc	20 e9 c8	               jsr  nibtohex
.c9cf	8d aa c8	               sta  adec+1
.c9d2	d8		               cld
.c9d3	20 1e c7	               jsr  pull
.c9d6	60		               rts
>c9d7	00 00 00	buffer         .byte     0,0,0
.c9da			putadec
.c9da	20 df c6	               jsr  push
.c9dd	20 a5 c9	               jsr  atodec
.c9e0	a2 a9		               ldx  #<adec
.c9e2	a0 c8		               ldy  #>adec+1
.c9e4	20 ee c5	               jsr  puts
.c9e7	20 1e c7	               jsr  pop
.c9ea	60		               rts

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-disk.asm

.c9eb			diskerror
.c9eb	20 df c6	               jsr  push
.c9ee	ad 1c cb	               lda  dsk_dev   ; Select device 8
.c9f1	85 ba		               sta  $ba       ;
.c9f3	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.c9f6	a9 6f		               lda  #$6f
.c9f8	85 b9		               sta  $b9       ;
.c9fa	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.c9fd	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.ca00	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.ca03	c9 0d		               cmp  #$0d      ; Is it CR ?
.ca05	d0 f6		               bne  nextchar  ; No, get next char
.ca07	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.ca0a	20 1e c7	               jsr  pop
.ca0d	60		               rts
.ca0e			diskdir
.ca0e	20 df c6	               jsr  push
.ca11	a9 24		               lda  #$24      ; L012C - Filename is "$"
.ca13	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.ca15	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.ca17	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.ca19	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.ca1b	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.ca1d	a9 01		               lda  #$01      ; L0138 - set ...
.ca1f	85 b7		               sta  $b7       ; L013A - ... length of current filename
.ca21	ad 1c cb	               lda  dsk_dev   ; L013C - set 8 as ...
.ca24	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.ca26	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.ca28	85 b9		               sta  $b9       ; L0142 - ... secondary address
.ca2a	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.ca2d	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.ca2f	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.ca32	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.ca34	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.ca37	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.ca39	85 90		               sta  $90       ; L0153 - ... kernal status word.
.ca3b	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.ca3d	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.ca3f	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.ca42	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.ca44	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.ca46	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.ca48	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.ca4b	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.ca4d	d0 28		               bne  exit      ; L0167
.ca4f	a4 fb		               ldy  $fb       ; L0169
.ca51	88		               dey            ; L016b
.ca52	d0 e9		               bne  loop1     ; L016C - If not last, loop
.ca54	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.ca56	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.ca59	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.ca5b	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.ca5e	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.ca61	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.ca63	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.ca65	aa		               tax            ; L017F - tfr a in x
.ca66	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.ca68	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.ca6b	4c 5e ca	               jmp  loop3     ; L0185 - get another byte
.ca6e	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.ca70	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.ca73	a0 02		               ldy  #$02      ; L018D - set Y to 2
.ca75	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.ca77	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.ca7a	20 1e c7	               jsr  pop
.ca7d	60		               rts            ; L0194
.ca7e			directory
.ca7e	20 0e ca	               jsr  diskdir
.ca81	20 eb c9	               jsr  diskerror
.ca84	60		               rts
.ca85			memtofile
.ca85	20 f6 ca	               jsr  dsk_putmesg
.ca88	20 df c6	               jsr  push
.ca8b	ad 20 cb	               lda  dsk_fnlen
.ca8e	ae 1e cb	               ldx  dsk_fnptr      ; load fname addr. lbyte
.ca91	ac 1f cb	               ldy  dsk_fnptr+1
.ca94	20 bd ff	               jsr  setnam         ; call setnam
.ca97	ad 1d cb	               lda  dsk_lfsno
.ca9a	ae 1c cb	               ldx  dsk_dev        ; specified device
.ca9d	a0 00		skip           ldy  #$00
.ca9f	20 ba ff	               jsr  setlfs         ; call setlfs
.caa2	ad 18 cb	               lda  dsk_data_s     ; put data start lbyte in stal
.caa5	85 c1		               sta  stal
.caa7	ad 19 cb	               lda  dsk_data_s+1   ; put data start hbyte in stal
.caaa	85 c2		               sta  stal+1
.caac	ae 1a cb	               ldx  dsk_data_e     ; put data end lbyte in x
.caaf	ac 1b cb	               ldy  dsk_data_e+1   ; put data end hbyte in y
.cab2	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.cab4	20 d8 ff	               jsr  save           ; call save
.cab7	90 00		               bcc  noerror        ; if carry set, a load error has happened
.cab9	20 1e c7	noerror        jsr  pop
.cabc	60		               rts
.cabd			filetomem
.cabd	20 df c6	               jsr push
.cac0	ad 20 cb	               lda dsk_fnlen
.cac3	ae 1e cb	               ldx dsk_fnptr
.cac6	ac 1f cb	               ldy dsk_fnptr+1
.cac9	20 bd ff	               jsr setnam     ; call setnam
.cacc	ad 1d cb	               lda dsk_lfsno
.cacf	ae 1c cb	               ldx dsk_dev    ; default to device 8
.cad2	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.cad4	20 ba ff	               jsr setlfs     ; call setlfs
.cad7	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.cad9	20 d5 ff	               jsr load       ; call load
.cadc	90 03		               bcc noerror      ; if carry set, a load error has happened
.cade	20 e5 ca	               jsr  error
.cae1	20 1e c7	noerror        jsr pop
.cae4	60		               rts
.cae5			error
.cae5	60		               rts
.cae6	a2 31		error1         ldx  #<dsk_emsg1
.cae8	a0 cb		               ldy  #>dsk_emsg1
.caea	20 ee c5	               jsr  puts
.caed	60		               rts
.caee	a2 45		error2         ldx #<dsk_emsg2
.caf0	a0 cb		               ldy #>dsk_emsg2
.caf2	20 ee c5	               jsr puts
.caf5	60		               rts
.caf6			dsk_putmesg
.caf6	20 df c6	               jsr push
.caf9	a2 21		               ldx #<dsk_msg0
.cafb	a0 cb		               ldy #>dsk_msg0
.cafd	20 ee c5	               jsr puts
.cb00	a9 20		               lda #$20
.cb02	20 e8 c5	               jsr putch
.cb05	ae 1e cb	               ldx dsk_fnptr
.cb08	ac 1f cb	               ldy dsk_fnptr+1
.cb0b	20 ee c5	               jsr puts
.cb0e	ad 1d cb	               lda dsk_lfsno
.cb11	20 c3 ff	               jsr close
.cb14	20 1e c7	               jsr pop
.cb17	60		               rts
>cb18	00 00		dsk_data_s     .word     $0000    ; example addresses
>cb1a	00 20		dsk_data_e     .word     $2000
>cb1c	08		dsk_dev        .byte     $08
>cb1d	00		dsk_lfsno      .byte     $00
>cb1e	00 00		dsk_fnptr      .word     $00
>cb20	00		dsk_fnlen      .byte     0
>cb21	8d		dsk_msg0       .byte     141
>cb22	53 41 56 49	               .null     "saving"
>cb26	4e 47 00
>cb29	8d		dsk_msg1       .byte     141
>cb2a	53 55 43 43	               .null     "succes"
>cb2e	45 53 00
>cb31	8d		dsk_emsg1      .byte     141
>cb32	46 49 43 48	               .null     "fichier non ouvert"
>cb36	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>cb45	11		dsk_emsg2      .byte     17
>cb46	45 52 52 45	               .null     "erreur d'ecriture"
>cb4a	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: wos2024.asm


;******  End of listing

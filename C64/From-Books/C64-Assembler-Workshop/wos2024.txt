
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L wos2024.txt -o wos2024.prg wos2024.asm
; Fri Nov 22 12:54:53 2024

;Offset	;Hex		;Source

;******  Processing input file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 00 80	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: wos2024.asm

="20241122-124922"	     version = "20241122-124922"
=$a474			     ready     =    $a474
.8000			main
.8000	20 08 c0	               jsr  scrmaninit     ; Initialisation de l'é
.8003	20 da 80	               jsr  greetings
.8006	20 0a 80	               jsr  wedgeos
.8009	60		over           rts
.800a			wedgeos
.800a	a9 08		initwos        lda  #$08
.800c	8d 73 c5	               sta  dsk_dev
.800f	ad 86 02	               lda  bascol
.8012	8d 09 83	               sta  fcol
.8015	ad 20 d0	               lda  vicbordcol
.8018	8d 07 83	               sta  bcol
.801b	ad 21 d0	               lda  vicbackcol
.801e	8d 08 83	               sta  scol
.8021	a9 4c		               lda  #$4c           ; On remplace l’instruction cmp
.8023	85 7c		               sta  $7c            ; ... avec « : » par jmp à
.8025	a9 30		               lda  #<wos          ; ... l’adresse de notre
.8027	85 7d		               sta  $7d            ; ... fonction à la place de
.8029	a9 80		               lda  #>wos          ; ... celle du basic du c64
.802b	85 7e		               sta  $7e            ; ... pour s’insérer.
.802d	4c 74 a4	               jmp  ready          ; Affiche "Ready" et lance basic warm-start.
.8030	c9 40		wos            cmp  #$40           ; Est-ce un "@" (ASCII).
.8032	d0 44		               bne  lnormcmd       ; Laisse Basic interpreter sa commande.
.8034	a5 9d		               lda  $9d            ; Le Z de MSGFLG indique si en mode pgm.
.8036	f0 28		               beq  lmodepgm       ; Oui - branche a lmodepgm.
.8038	ad 00 02	               lda  $0200          ; Non - lecture du tampon clavier.
.803b	c9 40		               cmp  #$40           ; Est-ce un "@" (ASCII).
.803d	d0 1c		               bne  lflushpfx      ; Non, stdcmd, branche a $1c (+28) bytes
.803f	20 8d 80	               jsr  lfindxcmd      ; Oui, cherchons parmis nos commandes.
.8042	a0 00		l290           ldy  #$00           ; Initialise l'index à $00.
.8044	b1 7a		lgetbuffb      lda  ($7a),y        ; Prend un octet du tampon clavier.
.8046	c9 20		               cmp  #$20           ; Est-ce un espace?
.8048	f0 09		               beq  lnoxcmd        ; Oui, On ignore le "@".
.804a	e6 7a		               inc  $7a            ; On incremente le LSB du pointeur.
.804c	d0 f6		               bne  lgetbuffb      ; Pas de report, On lit le prochain octet.
.804e	e6 7b		               inc  $7b            ; On fait un repport au MSB du pointeur.
.8050	38		               sec                 ; On force un branchement par BCS.
.8051	b0 f1		               bcs  lgetbuffb      ; On lit le prochain octet.
.8053	20 74 a4	lnoxcmd        jsr  b_warmstart    ; On retourne à l'interpréteur Basic.
.8056	a9 00		               lda  #$00           ; On place $00 dans Acc.
.8058	38		               sec                 ; On force le C pour BCS et ...
.8059	b0 1d		l410           bcs  lnormcmd       ; ... brancher à lnormcmd.
.805b	a9 40		lflushpfx      lda  #$40           ; Charge "@" dans Acc.
.805d	38		               sec                 ; On force le C pour BCS et ...
.805e	b0 18		               bcs  lnormcmd       ; ... brancher à lnormcmd.
.8060	20 8d 80	lmodepgm       jsr  lfindxcmd      ; On trouve et exécute notre commande
.8063	a0 00		               ldy  #$00           ; On initialise l'indexe.
.8065	b1 7a		lnxtbuffb      lda  ($7a),y        ; On lit un octet de la ligne du programme.
.8067	c9 00		               cmp  #$00           ; Si #$00, Il s'agit de la fin de la ligne.
.8069	f0 0d		               beq  lnormcmd       ; Alors on branche pour traiter une autre commande.
.806b	c9 3a		               cmp  #$3a           ; Est-ce un délimiteur ":"?
.806d	f0 09		               beq  lnormcmd       ; Oui, on branche ranche à $09 ( +9) bytes
.806f	e6 7a		               inc  $7a            ; Incrémente LSB du pointeur.
.8071	d0 f2		               bne  lnxtbuffb      ; Pas de report, on lit le prochaon octet.
.8073	e6 7b		               inc  $7b            ; On fait le report
.8075	38		               sec                 ; On force le branchement par BCS.
.8076	b0 ed		               bcs  lnxtbuffb      ; On lit le prochaon octet.
.8078	c9 3a		lnormcmd       cmp  #$3a           ; Est-ce un délimiteur ":"?
.807a	b0 0a		               bcs  ltbasic        ; Si >= $0a
.807c	c9 20		               cmp  #$20           ; Est-ce un " "?
.807e	f0 0a		               beq  ltochrget      ; On passe au prochain caractère.
.8080	38		               sec                 ; Set Carry pour se préparer à la soustraction.
.8081	e9 30		               sbc  #$30           ; Soustrait la base de l'ascii su chiffre "0"
.8083	38		               sec                 ; set Carry pour se préparer à la soustraction.
.8084	e9 d0		               sbc  #$d0           ; Soustrait ascii et set bit
.8086	60		ltbasic        rts                 ; tbasic - 1 Retourne à Basic
.8087	4c 74 a4	               jmp  ready
.808a	4c 73 00	ltochrget      jmp  $0073          ; tochrget - 3 lance CHARGET
.808d	a9 7e		lfindxcmd      lda  #<cmdtbl       ; On place le (LSB) de l'adresse de la ...
.808f	85 7f		               sta  $7f            ; ... table des commandes a l'adresse $7f ...
.8091	a9 81		               lda  #>cmdtbl       ; ... et le (MSB) ...
.8093	85 80		               sta  $80            ; ... a l'adresse $80.
.8095	e6 7a		               inc  $7a            ; On passe au caractere suivant le @.
.8097	d0 02		               bne  lsetxy         ; Pas de report à faire.
.8099	e6 7b		               inc  $7b            ; On fait le report.
.809b	a0 00		lsetxy         ldy  #$00           ; On initialise les deux index X et Y...
.809d	a2 00		               ldx  #$00           ; ... à $00.
.809f	b1 7f		lgettabcar     lda  ($7f),y        ; Somme nous à la fin de la commande ($00)?
.80a1	f0 24		               beq  lgcmdvct       ; Si oui On récupère le vecteur de la commande.
.80a3	d1 7a		               cmp  ($7a),y        ; Regarde si car = cmd.
.80a5	d0 04		               bne  lnocmdfnd      ; Non, on regarde la commande suivante.
.80a7	c8		               iny                 ; Oui, on compate le prochain caractère.
.80a8	38		               sec                 ; On force un branchement à gettabcar pour ...
.80a9	b0 f4		l820           bcs  lgettabcar     ; ... comparer le prochain car. de la table.
.80ab	b1 7f		lnocmdfnd      lda  ($7f),y        ; La fin commande n'est pas trouvé.
.80ad	f0 04		               beq  lcmdend        ; Avons nous trouver la fin de la commande.
.80af	c8		               iny                 ; Incrémente l'index
.80b0	38		               sec                 ; Met le Carry à 1 pour forcer BCS.
.80b1	b0 f8		               bcs  lnocmdfnd      ; Branche puisqu'aucune commande n'a été trouvée.
.80b3	c8		lcmdend        iny                 ; Incremente index
.80b4	98		               tya                 ; Sauvegarde l'index dans l'acc.
.80b5	18		               clc                 ; Met le Carry à 0 pour préparer l'addition.
.80b6	65 7f		               adc  $7f            ; Aditionne l'Acc. au vecteur de commande.
.80b8	85 7f		               sta  $7f            ; On le replace en mémoire.
.80ba	a9 00		               lda  #$00           ; On ajoute le Carry (C+$00) de la dernière ...
.80bc	65 80		               adc  $80            ; ... addition dans le MSB du vecteur ...
.80be	85 80		               sta  $80            ; ... et le sauvegarder.
.80c0	a0 00		               ldy  #$00           ; nitialise l'index
.80c2	e8		               inx                 ; Ajoute 2 à x pour se déplacer vers la prochaine
.80c3	e8		               inx                 ; ... adresse dans la table des commandes.
.80c4	38		               sec                 ; Force le branchement de BCS.
.80c5	b0 d8		               bcs  lgettabcar     ; Va lire le prochain caractere de la table.
.80c7	bd 1c 82	lgcmdvct       lda  cmdvect,x      ; Récupère le LSB de l'adresse d'exécution.
.80ca	85 80		               sta  $80            ; Le place à 80.
.80cc	e8		               inx                 ; Avance X pour aller chercher le MSB ...
.80cd	bd 1c 82	               lda  cmdvect,x      ; ... de l'adresse d'exécution et ...
.80d0	85 81		               sta  $81            ; ... le sauvegarde.
.80d2	6c 80 00	               jmp  ($0080)        ; Saute vers le vecteur d'exécution.
.80d5	a2 0b		illegal        ldx  #$0b           ; Charge le code d'erreur dans X
.80d7	6c 00 03	               jmp  ($300)         ; Affiche l'erreur.
.80da			greetings
.80da	20 36 c1	               jsr  push
.80dd	a9 06		               lda  #vbleu
.80df	8d 21 d0	               sta  vicbackcol
.80e2	a9 03		               lda  #vcyan
.80e4	8d 20 d0	               sta  vicbordcol
.80e7	20 28 c0	               jsr  cls
.80ea	a9 01		               lda  #vblanc
.80ec	8d 86 02	               sta  bascol
.80ef	20 36 c1	               jsr  push
.80f2	a2 27		               ldx  #<msg0
.80f4	a0 83		               ldy  #>msg0
.80f6	20 45 c0	               jsr  puts
.80f9	20 75 c1	               jsr  pull
.80fc	20 36 c1	               jsr  push
.80ff	a2 2a		               ldx  #<msg1
.8101	a0 83		               ldy  #>msg1
.8103	20 45 c0	               jsr  puts
.8106	20 75 c1	               jsr  pull
.8109	20 36 c1	               jsr  push
.810c	a2 52		               ldx  #<msg2
.810e	a0 83		               ldy  #>msg2
.8110	20 45 c0	               jsr  puts
.8113	20 75 c1	               jsr  pull
.8116	20 36 c1	               jsr  push
.8119	a2 7b		               ldx  #<msg3
.811b	a0 83		               ldy  #>msg3
.811d	20 45 c0	               jsr  puts
.8120	20 75 c1	               jsr  pull
.8123	20 36 c1	               jsr  push
.8126	a2 a4		               ldx  #<msg4
.8128	a0 83		               ldy  #>msg4
.812a	20 45 c0	               jsr  puts
.812d	20 75 c1	               jsr  pull
.8130	a9 0d		               lda  #$0d
.8132	20 3f c0	               jsr  putch
.8135	20 36 c1	               jsr  push
.8138	a2 2a		               ldx  #<msg1
.813a	a0 83		               ldy  #>msg1
.813c	20 45 c0	               jsr  puts
.813f	20 75 c1	               jsr  pull
.8142	a9 0d		               lda  #$0d
.8144	20 3f c0	               jsr  putch
.8147	20 75 c1	               jsr  pop
.814a	60		               rts
.814b			ascii2bintxt
.814b	20 36 c1	               jsr  push           ;p21
.814e	c9 30		               cmp  #$30           ;120
.8150	90 12		               bcc  Lnonum         ;130
.8152	c9 3a		               cmp  #$3a           ;140
.8154	90 08		               bcc  L210           ;150
.8156	e9 07		               sbc  #$07           ;160
.8158	90 0a		               bcc  Lnonum         ;170
.815a	c9 40		               cmp  #$40           ;180
.815c	b0 02		               bcs  L220           ;190
.815e	29 0f		L210           and  #$0f           ;210
.8160	20 75 c1	L220           jsr  pop            ;220 return
.8163	60		               rts                 ;230
.8164	38		Lnonum         sec                 ;nonum
.8165	20 75 c1	               jsr  pop
.8168	60		               rts
.8169			p2tester
.8169	20 36 c1	               jsr  push
.816c	20 e4 ff	lnoxcmd        jsr  getin          ;noxcmd
.816f	f0 fb		               beq  lnoxcmd        ;390
.8171	20 a0 c3	               jsr  atobin          ;aschex2bin;400
.8174	90 02		               bcc  out            ;410
.8176	a9 ff		               lda  #$FF           ;flushpfx
.8178	85 fb		out            sta  $fb            ;430
.817a	20 75 c1	               jsr  pop
.817d	60		               rts            ;modepgm
.817e			cmdtbl
>817e	c3 cc d3 00	               .text     "CLS",0,"LOW",0,"UP",0
>8182	cc cf d7 00 d5 d0 00
>8189	d4 c5 d3 d4	               .text     "TEST",0
>818d	00
>818e	c1 c2 cf d5	               .text     "ABOUT",0,"?",0
>8192	d4 00 3f 00
>8196	d3 2b 00 d3	               .text     "S+",0,"S-",0,"B+",0,"B-",0,"F+",0,"F-",0,"FILL",0
>819a	2d 00 c2 2b 00 c2 2d 00 c6 2b 00 c6 2d 00 c6 c9
>81aa	cc cc 00
>81ad	c4 c9 d2 00	               .text     "DIR",0,"8DIR",0,"9DIR",0,"10DIR",0,"11DIR",0,"12DIR",0
>81b1	38 c4 c9 d2 00 39 c4 c9 d2 00 31 30 c4 c9 d2 00
>81c1	31 31 c4 c9 d2 00 31 32 c4 c9 d2 00
>81cd	43 4c 53 00	               .text     "cls",0,"low",0,"up",0
>81d1	4c 4f 57 00 55 50 00
>81d8	54 45 53 54	               .text     "test",0
>81dc	00
>81dd	41 42 4f 55	               .text     "about",0,"?",0
>81e1	54 00 3f 00
>81e5	53 2b 00 53	               .text     "s+",0,"s-",0,"b+",0,"b-",0,"f+",0,"f-",0,"fill",0
>81e9	2d 00 42 2b 00 42 2d 00 46 2b 00 46 2d 00 46 49
>81f9	4c 4c 00
>81fc	44 49 52 00	               .text     "dir",0,"8dir",0,"9dir",0,"10dir",0,"11dir",0,"12dir",0
>8200	38 44 49 52 00 39 44 49 52 00 31 30 44 49 52 00
>8210	31 31 44 49 52 00 31 32 44 49 52 00
.821c			cmdvect
>821c	68 82 6d 82	               .word     woscls, woslow, wosup
>8220	72 82
>8222	77 82		               .word     wostest
>8224	85 82 97 82	               .word     wosabout, woshelp
>8228	a7 82 ad 82	               .word     wosincback, wosdecback,wosincbrd, wosdecbrd
>822c	9b 82 a1 82
>8230	b3 82 b9 82	               .word     wosincfont, wosdecfont, wosfillcol
>8234	90 82
>8236	fd 82 e1 82	               .word     dir, dir8, dir9, dir10, dir11, dir12
>823a	e6 82 eb 82 f0 82 f5 82
>8242	68 82 6d 82	               .word     woscls, woslow, wosup
>8246	72 82
>8248	77 82		               .word     wostest
>824a	85 82 97 82	               .word     wosabout, woshelp
>824e	a7 82 ad 82	               .word     wosincback, wosdecback, wosincbrd, wosdecbrd
>8252	9b 82 a1 82
>8256	b3 82 b9 82	               .word     wosincfont, wosdecfont, wosfillcol
>825a	90 82
>825c	fd 82 e1 82	               .word     dir, dir8, dir9, dir10, dir11, dir12
>8260	e6 82 eb 82 f0 82 f5 82
.8268			cmdcode
.8268	a9 93		woscls         lda  #$93       ; code 147 clear+home
.826a	4c d2 ff	               jmp  chrout     ;
.826d	a9 0e		woslow         lda  #$0e
.826f	4c d2 ff	               jmp  chrout
.8272	a9 8e		wosup          lda  #$8e
.8274	4c d2 ff	               jmp  chrout
.8277			wostest
.8277	20 36 c1	               jsr  push
.827a	a2 89		               ldx  #<tester
.827c	a0 82		               ldy  #>tester
.827e	20 45 c0	               jsr  puts
.8281	20 75 c1	               jsr  pull
.8284	60		               rts
.8285	20 da 80	wosabout       jsr  greetings
.8288	60		               rts
>8289	54 45 53 54	tester         .null "tester"
>828d	45 52 00
.8290	20 0a 83	wosfillcol     jsr  fillcarcol
.8293	60		               rts
.8294	4c bf 82	               jmp  woscleancol
.8297	20 16 85	woshelp        jsr  help
.829a	60		               rts
.829b	ee 07 83	wosincbrd      inc  bcol
.829e	4c bf 82	               jmp  woscleancol
.82a1	ce 07 83	wosdecbrd      dec  bcol
.82a4	4c bf 82	               jmp  woscleancol
.82a7	ee 08 83	wosincback     inc  scol
.82aa	4c bf 82	               jmp  woscleancol
.82ad	ce 08 83	wosdecback     dec  scol
.82b0	4c bf 82	               jmp  woscleancol
.82b3	ee 09 83	wosincfont     inc  fcol
.82b6	4c bf 82	               jmp  woscleancol
.82b9	ce 09 83	wosdecfont     dec  fcol
.82bc	4c bf 82	               jmp  woscleancol
.82bf	ad 08 83	woscleancol    lda  scol
.82c2	29 0f		               and  #$0f
.82c4	8d 08 83	               sta  scol
.82c7	8d 21 d0	               sta  vicbackcol
.82ca	ad 07 83	               lda  bcol
.82cd	29 0f		               and  #$0f
.82cf	8d 07 83	               sta  bcol
.82d2	8d 20 d0	               sta  vicbordcol
.82d5	ad 09 83	               lda  fcol
.82d8	29 0f		               and  #$0f
.82da	8d 09 83	               sta  fcol
.82dd	8d 86 02	               sta  bascol
.82e0	60		               rts
.82e1	a9 08		dir8           lda  #$08
.82e3	4c fa 82	               jmp  dirn
.82e6	a9 09		dir9           lda  #$09
.82e8	4c fa 82	               jmp  dirn
.82eb	a9 0a		dir10          lda  #$0a
.82ed	4c fa 82	               jmp  dirn
.82f0	a9 0b		dir11          lda  #$0b
.82f2	4c fa 82	               jmp  dirn
.82f5	a9 0c		dir12          lda  #$0c
.82f7	4c fa 82	               jmp  dirn
.82fa	8d 73 c5	dirn           sta  dsk_dev
.82fd	20 42 c4	dir            jsr  diskerror
.8300	20 65 c4	               jsr  diskdir
.8303	20 42 c4	               jsr  diskerror
.8306	60		               rts
>8307	00		bcol           .byte     $00
>8308	00		scol           .byte     $00
>8309	00		fcol           .byte     $00
.830a			fillcarcol
.830a	20 36 c1	               jsr  push
.830d	a2 04		               ldx  #$04
.830f	a0 00		               ldy  #$00
.8311	ad 86 02	               lda  bascol
.8314	99 00 d8	nxtcolram      sta  colram0,y
.8317	99 00 d9	               sta  colram1,y
.831a	99 00 da	               sta  colram2,y
.831d	99 00 db	               sta  colram3,y
.8320	c8		               iny
.8321	d0 f1		               bne  nxtcolram
.8323	20 75 c1	               jsr  pop
.8326	60		               rts
>8327	93 0e 00	msg0 .byte 147,14,0
>832a	20 2a 2a 2a	msg1 .null " **************************************"
>832e	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a
>833e	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a
>834e	2a 2a 2a 00
>8352	0d		msg2 .byte 13
>8353	20 2a 20 20	     .null " *     c64 WOS commandes etendues     *"
>8357	20 20 20 43 36 34 20 d7 cf d3 20 43 4f 4d 4d 41
>8367	4e 44 45 53 20 45 54 45 4e 44 55 45 53 20 20 20
>8377	20 20 2a 00
>837b	0d		msg3 .byte 13
>837c	20 2a 20 50	     .null " * par Daniel Lafrance  (@? for help) *"
>8380	41 52 20 c4 41 4e 49 45 4c 20 cc 41 46 52 41 4e
>8390	43 45 20 20 28 40 3f 20 46 4f 52 20 48 45 4c 50
>83a0	29 20 2a 00
>83a4	0d		msg4 .byte 13
>83a5	20 2a 20 20	     .null format(   " *    Version.....: %s   *",version)
>83a9	20 20 d6 45 52 53 49 4f 4e 2e 2e 2e 2e 2e 3a 20
>83b9	32 30 32 34 31 31 32 32 2d 31 32 34 39 32 32 20
>83c9	20 20 2a 00
>83cd	0d		hlp0           .byte $0d
>83ce	20 20 40 43	               .null "  @cls  = clear scr ; @test =          "
>83d2	4c 53 20 20 3d 20 43 4c 45 41 52 20 53 43 52 20
>83e2	3b 20 40 54 45 53 54 20 3d 20 20 20 20 20 20 20
>83f2	20 20 20 00
>83f6	0d		hlp1           .byte $0d
>83f7	20 20 40 4c	               .null "  @low  = lcase     ; @up   = ucase    "
>83fb	4f 57 20 20 3d 20 4c 43 41 53 45 20 20 20 20 20
>840b	3b 20 40 55 50 20 20 20 3d 20 55 43 41 53 45 20
>841b	20 20 20 00
>841f	0d		hlp2           .byte $0d
>8420	20 20 40 41	               .null "  @about= tell me   ; @?    = this help"
>8424	42 4f 55 54 3d 20 54 45 4c 4c 20 4d 45 20 20 20
>8434	3b 20 40 3f 20 20 20 20 3d 20 54 48 49 53 20 48
>8444	45 4c 50 00
>8448	0d		hlp3           .byte $0d
>8449	20 20 40 53	               .null "  @s+/- = scrn-col  ; @b+/- = bord-col "
>844d	2b 2f 2d 20 3d 20 53 43 52 4e 2d 43 4f 4c 20 20
>845d	3b 20 40 42 2b 2f 2d 20 3d 20 42 4f 52 44 2d 43
>846d	4f 4c 20 00
>8471	0d		hlp4           .byte $0d
>8472	20 20 40 46	               .null "  @f+/- = font-col  ; @fill = fill-font"
>8476	2b 2f 2d 20 3d 20 46 4f 4e 54 2d 43 4f 4c 20 20
>8486	3b 20 40 46 49 4c 4c 20 3d 20 46 49 4c 4c 2d 46
>8496	4f 4e 54 00
>849a	0d		hlp5           .byte $0d
>849b	20 20 40 44	               .null "  @dir  = list disk ; @8dir = disk #8  "
>849f	49 52 20 20 3d 20 4c 49 53 54 20 44 49 53 4b 20
>84af	3b 20 40 38 44 49 52 20 3d 20 44 49 53 4b 20 23
>84bf	38 20 20 00
>84c3	0d		hlp6           .byte $0d
>84c4	20 20 40 39	               .null "  @9dir = disk #9   ; @10dir= disk #10 "
>84c8	44 49 52 20 3d 20 44 49 53 4b 20 23 39 20 20 20
>84d8	3b 20 40 31 30 44 49 52 3d 20 44 49 53 4b 20 23
>84e8	31 30 20 00
>84ec	0d		hlp7           .byte $0d
>84ed	20 20 40 31	               .text "  @11dir= disk #11  ; @12dir= disk #12 "
>84f1	31 44 49 52 3d 20 44 49 53 4b 20 23 31 31 20 20
>8501	3b 20 40 31 32 44 49 52 3d 20 44 49 53 4b 20 23
>8511	31 32 20
>8514	0d 00		               .byte $0d, $00
.8516			help
.8516	20 36 c1	               jsr  push
.8519	20 36 c1	               jsr  push
.851c	a2 27		               ldx  #<msg0
.851e	a0 83		               ldy  #>msg0
.8520	20 45 c0	               jsr  puts
.8523	20 75 c1	               jsr  pull
.8526	20 36 c1	               jsr  push
.8529	a2 2a		               ldx  #<msg1
.852b	a0 83		               ldy  #>msg1
.852d	20 45 c0	               jsr  puts
.8530	20 75 c1	               jsr  pull
.8533	20 36 c1	               jsr  push
.8536	a2 cd		               ldx  #<hlp0
.8538	a0 83		               ldy  #>hlp0
.853a	20 45 c0	               jsr  puts
.853d	20 75 c1	               jsr  pull
.8540	20 36 c1	               jsr  push
.8543	a2 f6		               ldx  #<hlp1
.8545	a0 83		               ldy  #>hlp1
.8547	20 45 c0	               jsr  puts
.854a	20 75 c1	               jsr  pull
.854d	20 36 c1	               jsr  push
.8550	a2 1f		               ldx  #<hlp2
.8552	a0 84		               ldy  #>hlp2
.8554	20 45 c0	               jsr  puts
.8557	20 75 c1	               jsr  pull
.855a	20 36 c1	               jsr  push
.855d	a2 48		               ldx  #<hlp3
.855f	a0 84		               ldy  #>hlp3
.8561	20 45 c0	               jsr  puts
.8564	20 75 c1	               jsr  pull
.8567	20 36 c1	               jsr  push
.856a	a2 71		               ldx  #<hlp4
.856c	a0 84		               ldy  #>hlp4
.856e	20 45 c0	               jsr  puts
.8571	20 75 c1	               jsr  pull
.8574	20 36 c1	               jsr  push
.8577	a2 9a		               ldx  #<hlp5
.8579	a0 84		               ldy  #>hlp5
.857b	20 45 c0	               jsr  puts
.857e	20 75 c1	               jsr  pull
.8581	20 36 c1	               jsr  push
.8584	a2 c3		               ldx  #<hlp6
.8586	a0 84		               ldy  #>hlp6
.8588	20 45 c0	               jsr  puts
.858b	20 75 c1	               jsr  pull
.858e	20 36 c1	               jsr  push
.8591	a2 ec		               ldx  #<hlp7
.8593	a0 84		               ldy  #>hlp7
.8595	20 45 c0	               jsr  puts
.8598	20 75 c1	               jsr  pull
.859b	20 36 c1	               jsr  push
.859e	a2 2a		               ldx  #<msg1
.85a0	a0 83		               ldy  #>msg1
.85a2	20 45 c0	               jsr  puts
.85a5	20 75 c1	               jsr  pull
.85a8	20 75 c1	               jsr  pop
.85ab	60		               rts

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>c000	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>c004	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.c008			libtart

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.c008			scrmaninit
.c008	20 36 c1	               jsr  push
.c00b	a9 06		               lda  #vbleu
.c00d	8d 21 d0	               sta  vicbackcol
.c010	a9 05		               lda  #vvert
.c012	8d 20 d0	               sta  vicbordcol
.c015	a9 01		               lda  #vblanc
.c017	8d 86 02	               sta  bascol
.c01a	ad 00 04	               lda  scrnram
.c01d	8d 00 04	               sta  scrnram
.c020	20 28 c0	               jsr  cls
.c023	20 75 c1	               jsr  pop
.c026	60		               rts
>c027	8e		characterset   .byte b_uppercase
.c028			cls
.c028	08		               php
.c029	48		               pha
.c02a	a9 93		               lda  #$93
.c02c	20 3f c0	               jsr  putch
.c02f	68		               pla
.c030	28		               plp
.c031	60		               rts
.c032			putnch
.c032	08		               php
.c033	e0 00		               cpx  #$00
.c035	f0 06		               beq  out
.c037	20 d2 ff	again          jsr  $ffd2
.c03a	ca		               dex
.c03b	d0 fa		               bne  again
.c03d	28		out            plp
.c03e	60		               rts
.c03f			putch
.c03f	08		               php
.c040	20 d2 ff	               jsr  $ffd2
.c043	28		               plp
.c044	60		               rts
.c045			puts
.c045	20 36 c1	               jsr  push
.c048	86 fb		               stx  zpage1
.c04a	84 fc		               sty  zpage1+1
.c04c	a0 00		               ldy  #0
.c04e	b1 fb		next           lda  (zpage1),y
.c050	f0 09		               beq  exit
.c052	20 3f c0	               jsr  putch
.c055	20 3d c2	               jsr  inczp1
.c058	4c 4e c0	               jmp  next
.c05b	20 75 c1	exit           jsr  pop
.c05e	60		               rts
.c05f			gotoxy
.c05f	08		               php
.c060	18		               clc
.c061	8a		               txa
.c062	48		               pha
.c063	98		               tya
.c064	aa		               tax
.c065	68		               pla
.c066	a8		               tay
.c067	20 f0 ff	               jsr  kplot
.c06a	28		               plp
.c06b	60		               rts
.c06c			cursor
=$0286			bascol    =    $0286
.c06c	08		               php
.c06d	48		               pha
.c06e	90 12		               bcc  restore
.c070	20 f0 ff	               jsr  kplot
.c073	8c 94 c0	               sty  cx
.c076	8e 95 c0	               stx  cy
.c079	ad 86 02	               lda  bascol
.c07c	8d 96 c0	               sta  bcol
.c07f	4c 91 c0	               jmp  out
.c082	ae 95 c0	restore        ldx  cy
.c085	ac 94 c0	               ldy  cx
.c088	20 f0 ff	               jsr  kplot
.c08b	ad 96 c0	               lda  bcol
.c08e	8d 86 02	               sta  bascol
.c091	68		out            pla
.c092	28		               plp
.c093	60		               rts
>c094	00		cx   .byte     $00
>c095	00		cy   .byte     $00
>c096	00		bcol .byte     $00
.c097			cursave
.c097	08		               php
.c098	38		               sec
.c099	20 6c c0	               jsr  cursor
.c09c	28		               plp
.c09d	60		               rts
.c09e			curput
.c09e	08		               php
.c09f	18		               clc
.c0a0	20 6c c0	               jsr  cursor
.c0a3	28		               plp
.c0a4	60		               rts
.c0a5			putsxy
.c0a5	20 36 c1	               jsr  push
.c0a8	86 fb		               stx  zpage1
.c0aa	84 fc		               sty  zpage1+1
.c0ac	a0 00		               ldy  #$00
.c0ae	b1 fb		               lda  (zpage1),y
.c0b0	aa		               tax
.c0b1	20 3d c2	               jsr  inczp1
.c0b4	b1 fb		               lda  (zpage1),y
.c0b6	a8		               tay
.c0b7	20 5f c0	               jsr  gotoxy
.c0ba	20 3d c2	               jsr  inczp1
.c0bd	a6 fb		               ldx  zpage1
.c0bf	a4 fc		               ldy  zpage1+1
.c0c1	20 45 c0	               jsr  puts
.c0c4	20 75 c1	               jsr  pop
.c0c7	60		               rts
>c0c8	00 00		straddr   .word     $00
>c0ca	00		px        .byte     $00
>c0cb	00		py        .byte     $00
>c0cc	00 00		zp1       .word     $00
.c0ce			putscxy
.c0ce	20 36 c1	               jsr  push
.c0d1	84 fc		               sty  zpage1+1
.c0d3	86 fb		               stx  zpage1
.c0d5	ad 86 02	               lda  bascol
.c0d8	8d f8 c0	               sta  bc
.c0db	a0 00		               ldy #$00
.c0dd	b1 fb		               lda  (zpage1),y
.c0df	8d 86 02	               sta  bascol
.c0e2	20 3d c2	               jsr  inczp1
.c0e5	a6 fb		               ldx  zpage1
.c0e7	a4 fc		               ldy  zpage1+1
.c0e9	20 a5 c0	               jsr  putsxy
.c0ec	ad f8 c0	               lda  bc
.c0ef	8d 86 02	               sta  bascol
.c0f2	20 75 c1	               jsr  pop
.c0f5	60		               rts
>c0f6	00 00		straddr  .word      $00
>c0f8	00		bc       .byte      $00
>c0f9	00 00		zp1      .word      $00
.c0fb			putrahex
.c0fb	08		               php
.c0fc	48		               pha
.c0fd	20 53 c3	               jsr  atohex
.c100	a9 f2		               lda  #<a2hexstr
.c102	a0 c2		               ldy  #>a2hexstr
.c104	20 45 c0	               jsr  puts
.c107	68		               pla
.c108	28		               plp
.c109	60		               rts
.c10a			kputrahexxy
.c10a			bputrahexxy
.c10a			putrahexxy
.c10a	08		               php
.c10b	20 53 c3	               jsr  atohex
.c10e	a9 ef		               lda  #<a2hexpos
.c110	a0 c2		               ldy  #>a2hexpos
.c112	20 a5 c0	               jsr  putsxy
.c115	68		               pla
.c116	28		               plp
.c117	60		               rts
.c118			putrahexcxy
.c118	08		               php
.c119	20 53 c3	               jsr  atohex
.c11c	a9 ef		               lda  #<a2hexpos
.c11e	a0 c2		               ldy  #>a2hexpos
.c120	20 ce c0	               jsr  putscxy
.c123	68		               pla
.c124	28		               plp
.c125	60		               rts
.c126			setinverse
.c126	48		               pha
.c127	a9 12		               lda  #$12
.c129	20 d2 ff	               jsr  $ffd2
.c12c	68		               pla
.c12d	60		               rts
.c12e			clrinverse
.c12e	48		               pha
.c12f	a9 92		               lda  #$92
.c131	20 d2 ff	               jsr  $ffd2
.c134	68		               pla
.c135	60		               rts

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.c136			push
.c136	08		          php            ; stack : flg, pcl, pch
.c137	78		          sei
.c138	8d 72 c1	          sta  ra        ; save a
.c13b	68		          pla            ; stack : pcl, pch
.c13c	8d 71 c1	          sta  rp        ; save rp
.c13f	68		          pla            ; stack : pch
.c140	8d 73 c1	          sta  pc        ; save pcl
.c143	68		          pla            ; stack : -
.c144	8d 74 c1	          sta  pc+1      ; save pch
.c147	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c149	48		          pha            ; stack : zp1l
.c14a	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c14c	48		          pha            ; stack : zp1h, zp1l
.c14d	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c14f	48		          pha            ; stack : zp2l, zp1h, zp1l
.c150	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c152	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c153	ad 71 c1	          lda  rp        ; get rp
.c156	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c157	ad 72 c1	          lda  ra        ; get a
.c15a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c15b	8a		          txa            ; get x
.c15c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c15d	98		          tya            ; get y
.c15e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c15f	ad 74 c1	          lda  pc+1      ; get pch
.c162	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c163	ad 73 c1	          lda  pc        ; get pcl
.c166	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c167	ad 71 c1	          lda  rp        ; get rp
.c16a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c16b	ad 72 c1	          lda  ra        ; get a
.c16e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c16f	58		          cli
.c170	60		          rts
>c171	00		rp        .byte     0
>c172	00		ra        .byte     0
>c173	00 00		pc        .word     0
.c175			pull
.c175			pop
.c175	78		          sei
.c176	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c177	8d aa c1	          sta  pc        ; save pcl
.c17a	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c17b	8d ab c1	          sta  pc+1      ; save pch
.c17e	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c17f	a8		          tay            ; set y
.c180	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c181	aa		          tax            ; set x
.c182	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c183	8d a9 c1	          sta  ra        ; save a
.c186	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c187	8d a8 c1	          sta  rp        ; save rp
.c18a	68		          pla            ; stack : zp2l, zp1h, zp1l
.c18b	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c18d	68		          pla            ; stack : zp1h, zp1l
.c18e	85 fd		          sta  zpage2    ; get zpage2 High byte
.c190	68		          pla            ; stack : zp1l
.c191	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c193	68		          pla            ; stack :
.c194	85 fb		          sta  zpage1    ; get zpage1 High byte
.c196	ad ab c1	          lda  pc+1      ; get pch
.c199	48		          pha            ; stack : pch
.c19a	ad aa c1	          lda  pc
.c19d	48		          pha            ; stack : pcl, pch
.c19e	ad a8 c1	          lda  rp        ; get rp
.c1a1	48		          pha            ; stack : rp, pcl, pch
.c1a2	ad a9 c1	          lda  ra        ; set ra
.c1a5	58		          cli
.c1a6	28		          plp            ; stack : pcl, pch
.c1a7	60		          rts
>c1a8	00		rp        .byte     0
>c1a9	00		ra        .byte     0
>c1aa	00 00		pc        .word     0

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c1ac			blkfill
.c1ac	20 36 c1	bf0            jsr  push
.c1af	20 6d c2	               jsr  savezp1
.c1b2	84 fc		               sty  zpage1+1
.c1b4	a0 00		               ldy  #$00
.c1b6	84 fb		               sty  zpage1
.c1b8	91 fb		bf1            sta  (zpage1),y
.c1ba	c8		               iny
.c1bb	d0 fb		               bne  bf1
.c1bd	20 7c c2	               jsr  restzp1
.c1c0	20 75 c1	               jsr  pop
.c1c3	60		               rts
.c1c4			memfill
.c1c4	20 36 c1	               jsr  push
.c1c7	20 ac c1	mf1            jsr  blkfill
.c1ca	c8		               iny
.c1cb	ca		               dex
.c1cc	d0 f9		               bne  mf1
.c1ce	20 75 c1	               jsr  pop
.c1d1	60		               rts
.c1d2			memmove
.c1d2	20 36 c1	               jsr  push
.c1d5	ba		               tsx            ; On se crée un pointeur ...
.c1d6	8a		               txa
.c1d7	18		               clc
.c1d8	69 0b		               adc  #11
.c1da	a8		               tay
.c1db	a2 06		               ldx  #$06
.c1dd	b9 00 01	nextbyte       lda  $0100,y
.c1e0	99 2c c2	               sta  words,y
.c1e3	c8		               iny
.c1e4	ca		               dex
.c1e5	d0 f6		               bne  nextbyte
.c1e7	ad 2c c2	               lda  s
.c1ea	8d 03 c2	               sta  source+1
.c1ed	ad 2d c2	               lda  s+1
.c1f0	8d 04 c2	               sta  source+2
.c1f3	ad 2e c2	               lda  d
.c1f6	8d 00 c2	               sta  destin+1
.c1f9	ad 2f c2	               lda  d+1
.c1fc	8d 01 c2	               sta  destin+2
.c1ff	ad ff ff	destin         lda  $ffff
.c202	8d ff ff	source         sta  $ffff
.c205	ee 00 c2	               inc  destin+1
.c208	d0 03		               bne  src
.c20a	ee 01 c2	               inc  destin+2
.c20d	ee 03 c2	src            inc  source+1
.c210	d0 03		               bne  cnt
.c212	ee 04 c2	               inc  source+2
.c215	ad 30 c2	cnt            lda  compte
.c218	d0 08		               bne  decit
.c21a	ad 31 c2	               lda  compte+1
.c21d	f0 09		               beq  fini
.c21f	ce 31 c2	               dec  compte+1
.c222	ce 30 c2	decit          dec  compte
.c225	4c ff c1	               jmp  destin
.c228	20 75 c1	fini           jsr  pop
.c22b	60		               rts
.c22c			words
>c22c	00 00		s         .word     $0000
>c22e	00 00		d         .word     $0000
>c230	00 00		compte    .word     $0000
.c232			decword
.c232	20 36 c1	               jsr  push
.c235	86 fd		               stx  zpage2
.c237	84 fe		               sty  zpage2+1
.c239	20 75 c1	               jsr  pop
.c23c	60		               rts
.c23d			inczp1
.c23d	08		               php
.c23e	48		               pha
.c23f	e6 fb		               inc  zpage1
.c241	a5 fb		               lda  zpage1
.c243	d0 02		               bne  nopage
.c245	e6 fc		               inc  zpage1+1
.c247	68		nopage         pla
.c248	28		               plp
.c249	60		               rts
.c24a			deczp1
.c24a	08		                php
.c24b	48		                pha
.c24c	c6 fb		                dec  zpage1
.c24e	d0 02		                bne  nopage
.c250	c6 fc		                dec  zpage1+1
.c252	68		nopage          pla
.c253	28		                plp
.c254	60		                rts
.c255			inczp2
.c255	08		               php
.c256	48		               pha
.c257	e6 fd		               inc  zpage2
.c259	a5 fd		               lda  zpage2
.c25b	d0 02		               bne  nopage
.c25d	e6 fe		               inc  zpage2+1
.c25f	68		nopage         pla
.c260	28		               plp
.c261	60		               rts
.c262			deczp2
.c262	08		               php
.c263	48		               pha
.c264	a5 fd		               lda  zpage2
.c266	d0 02		               bne  nopage
.c268	c6 fe		               dec  zpage2+1
.c26a	68		nopage         pla
.c26b	28		               plp
.c26c	60		               rts
.c26d			savezp1
.c26d	08		               php
.c26e	48		               pha
.c26f	a5 fb		               lda  zpage1
.c271	8d e9 c2	               sta  zp1
.c274	a5 fc		               lda  zpage1+1
.c276	8d ea c2	               sta  zp1+1
.c279	68		               pla
.c27a	28		               plp
.c27b	60		               rts
.c27c			restzp1
.c27c	08		               php
.c27d	48		               pha
.c27e	ad e9 c2	               lda zp1
.c281	85 fb		               sta zpage1
.c283	ad ea c2	               lda zp1+1
.c286	85 fc		               sta zpage1+1
.c288	68		               pla
.c289	28		               plp
.c28a	60		               rts
.c28b			savezp2
.c28b	08		         php
.c28c	48		         pha
.c28d	a5 fd		         lda zpage2
.c28f	8d eb c2	         sta zp2
.c292	a5 fe		         lda zpage2+1
.c294	8d ec c2	         sta zp2+1
.c297	68		         pla
.c298	28		         plp
.c299	60		         rts
.c29a			restzp2
.c29a	08		                php
.c29b	48		                pha
.c29c	ad eb c2	                lda  zp2
.c29f	85 fd		                sta  zpage2
.c2a1	ad ec c2	                lda  zp2+1
.c2a4	85 fe		                sta  zpage2+1
.c2a6	68		                pla
.c2a7	28		                plp
.c2a8	60		                rts
.c2a9			xy2addr
.c2a9	08		                php
.c2aa	48		                pha
.c2ab	8a		                txa
.c2ac	48		                pha
.c2ad	98		                tya
.c2ae	48		                pha
.c2af	ad e4 c2	                lda     addr1+1
.c2b2	8d e6 c2	                sta     addr2+1
.c2b5	ad e3 c2	                lda     addr1
.c2b8	8d e5 c2	                sta     addr2
.c2bb	c0 00		                cpy     #$00
.c2bd	f0 0f		                beq     addx
.c2bf	18		moreline        clc
.c2c0	6d e2 c2	                adc     ymult
.c2c3	90 03		                bcc     norepy
.c2c5	ee e6 c2	                inc     addr2+1
.c2c8	8d e5 c2	norepy          sta     addr2
.c2cb	88		                dey
.c2cc	d0 f1		                bne     moreline
.c2ce	8a		addx            txa
.c2cf	18		                clc
.c2d0	6d e5 c2	                adc     addr2
.c2d3	90 03		                bcc     thatsit
.c2d5	ee e6 c2	                inc     addr2+1
.c2d8	8d e5 c2	thatsit         sta     addr2
.c2db	68		                pla
.c2dc	a8		                tay
.c2dd	68		                pla
.c2de	aa		                tax
.c2df	68		                pla
.c2e0	28		                plp
.c2e1	60		                rts
>c2e2	28		ymult          .byte     40
>c2e3	00 00		addr1          .word     $0000
>c2e5	00 00		addr2          .word     $0000
>c2e7	00 00		bytecnt        .word     $0000
>c2e9	00 00		zp1        .word   $0000
>c2eb	00 00		zp2        .word   $0000

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c2ed	01		a2hexcol       .byte     1              ; pour aputscxy
>c2ee	00		a2hexbkcol     .byte     %00000000
.c2ef			a2hexpos
>c2ef	00		a2hexpx        .byte     0              ; pour aputsxy
>c2f0	00		a2hexpy        .byte     0
>c2f1	24		a2hexprefix    .byte     "$"            ; pour aputs
>c2f2	00 00		a2hexstr       .word     $00
>c2f4	00 00		               .word     $00
>c2f6	00		               .byte     0              ; 0 end string
>c2f7	30 30 30 30	abin           .null     "00000000"
>c2fb	30 30 30 30 00
>c300	20 20 20 00	adec           .null     "   "
.c304			putahexfmtxy
.c304	20 36 c1	               jsr  push
.c307	20 53 c3	               jsr  atohex
.c30a	ae ef c2	               ldx  a2hexpx
.c30d	ac f0 c2	               ldy  a2hexpy
.c310	20 5f c0	               jsr  gotoxy
.c313	a2 f1		               ldx  #<a2hexprefix
.c315	a0 c2		               ldy  #>a2hexprefix
.c317	20 45 c0	               jsr  puts
.c31a	20 75 c1	               jsr  pop
.c31d	60		               rts
.c31e			putahexfmt
.c31e	20 36 c1	               jsr  push
.c321	20 53 c3	               jsr  atohex
.c324	a2 f1		               ldx  #<a2hexprefix
.c326	a0 c2		               ldy  #>a2hexprefix
.c328	20 45 c0	               jsr  puts
.c32b	20 75 c1	               jsr  pop
.c32e	60		               rts
.c32f			putahex
.c32f	20 36 c1	               jsr  push
.c332	20 53 c3	               jsr  atohex
.c335	a2 f2		               ldx  #<a2hexstr
.c337	a0 c2		               ldy  #>a2hexstr
.c339	20 45 c0	               jsr  puts
.c33c	20 75 c1	               jsr  pop
.c33f	60		               rts
.c340			nibtohex
.c340	08		               php
.c341	29 0f		               and  #$0f
.c343	f8		               sed
.c344	18		               clc
.c345	69 90		               adc  #$90
.c347	69 40		               adc  #$40
.c349	d8		               cld
.c34a	28		               plp
.c34b	60		               rts
.c34c			lsra4bits
.c34c	08		               php
.c34d	4a		               lsr
.c34e	4a		               lsr
.c34f	4a		               lsr
.c350	4a		               lsr
.c351	28		               plp
.c352	60		               rts
.c353			atohex
.c353	08		               php
.c354	48		               pha
.c355	48		               pha
.c356	20 4c c3	               jsr  lsra4bits
.c359	20 40 c3	               jsr  nibtohex
.c35c	8d f2 c2	               sta  a2hexstr
.c35f	68		               pla
.c360	20 40 c3	               jsr  nibtohex
.c363	8d f3 c2	               sta  a2hexstr+1
.c366	a9 00		               lda  #$00                ; set end of string
.c368	8d f4 c2	               sta  a2hexstr+2
.c36b	68		               pla
.c36c	28		               plp
.c36d	60		               rts
.c36e			xy2hex
.c36e	20 36 c1	               jsr  push
.c371	20 53 c3	               jsr  atohex
.c374	8a		               txa
.c375	48		               pha
.c376	20 4c c3	               jsr  lsra4bits
.c379	20 40 c3	               jsr  nibtohex
.c37c	8d f2 c2	               sta  a2hexstr
.c37f	68		               pla
.c380	20 40 c3	               jsr  nibtohex
.c383	8d f3 c2	               sta  a2hexstr+1
.c386	98		               tya
.c387	48		               pha
.c388	20 4c c3	               jsr  lsra4bits
.c38b	20 40 c3	               jsr  nibtohex
.c38e	8d f4 c2	               sta  a2hexstr+2
.c391	68		               pla
.c392	20 40 c3	               jsr  nibtohex
.c395	8d f5 c2	               sta  a2hexstr+3
.c398	a9 00		               lda  #$00                ; 0 ended string
.c39a	8d f6 c2	               sta  a2hexstr+4
.c39d	20 75 c1	               jsr  pop
.c3a0			atobin
.c3a0	20 36 c1	               jsr  push
.c3a3	a2 08		               ldx  #8
.c3a5	a0 00		               ldy  #0
.c3a7	18		               clc
.c3a8	2a		nextbit        rol
.c3a9	48		               pha
.c3aa	69 00		               adc  #$00
.c3ac	29 01		               and  #$01
.c3ae	20 40 c3	               jsr  nibtohex
.c3b1	99 f7 c2	               sta  abin,y
.c3b4	68		               pla
.c3b5	c8		               iny
.c3b6	ca		               dex
.c3b7	d0 ef		               bne  nextbit
.c3b9	a9 00		               lda  #0
.c3bb	99 f7 c2	               sta  abin,y
.c3be	20 75 c1	               jsr  pull
.c3c1	60		               rts
.c3c2			putabin
.c3c2	20 a0 c3	               jsr     atobin
.c3c5	20 36 c1	               jsr     push
.c3c8	a2 f7		               ldx     #<abin
.c3ca	a0 c2		               ldy     #>abin
.c3cc	20 45 c0	               jsr     puts
.c3cf	20 75 c1	               jsr     pop
.c3d2	60		               rts
.c3d3			printabin
.c3d3	20 36 c1	               jsr     push
.c3d6	a2 f7		               ldx     #<abin
.c3d8	a0 c2		               ldy     #>abin
.c3da	20 45 c0	               jsr     puts
.c3dd	20 75 c1	               jsr     pop
.c3e0	60		               rts
.c3e1			putabinfmt
.c3e1	08		               php
.c3e2	48		               pha
.c3e3	a9 25		               lda     #"%"
.c3e5	20 3f c0	               jsr     putch
.c3e8	68		               pla
.c3e9	20 c2 c3	               jsr     putabin
.c3ec	28		               plp
.c3ed	60		               rts
.c3ee			putabinxy
.c3ee	20 5f c0	               jsr     gotoxy
.c3f1	20 c2 c3	               jsr     putabin
.c3f4	60		               rts
.c3f5			putabinfmtxy
.c3f5	20 5f c0	               jsr     gotoxy
.c3f8	20 e1 c3	               jsr     putabinfmt
.c3fb	60		               rts
.c3fc			atodec
.c3fc	20 36 c1	               jsr  push
.c3ff	f8		               sed
.c400	aa		               tax
.c401	a0 00		               ldy  #$00
.c403	a9 00		               lda  #$00
.c405	18		nextbit        clc
.c406	69 01		               adc  #$01
.c408	90 01		               bcc  decx
.c40a	c8		               iny
.c40b	ca		decx           dex
.c40c	d0 f7		               bne  nextbit
.c40e	48		               pha
.c40f	98		               tya
.c410	20 40 c3	               jsr  nibtohex
.c413	8d 00 c3	               sta  adec
.c416	68		               pla
.c417	48		               pha
.c418	20 40 c3	               jsr  nibtohex
.c41b	8d 02 c3	               sta  adec+2
.c41e	68		               pla
.c41f	6a		               ror
.c420	6a		               ror
.c421	6a		               ror
.c422	6a		               ror
.c423	20 40 c3	               jsr  nibtohex
.c426	8d 01 c3	               sta  adec+1
.c429	d8		               cld
.c42a	20 75 c1	               jsr  pull
.c42d	60		               rts
>c42e	00 00 00	buffer         .byte     0,0,0
.c431			putadec
.c431	20 36 c1	               jsr  push
.c434	20 fc c3	               jsr  atodec
.c437	a2 00		               ldx  #<adec
.c439	a0 c3		               ldy  #>adec+1
.c43b	20 45 c0	               jsr  puts
.c43e	20 75 c1	               jsr  pop
.c441	60		               rts

;******  Return to file: wos2024.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-disk.asm

.c442			diskerror
.c442	20 36 c1	               jsr  push
.c445	ad 73 c5	               lda  dsk_dev   ; Select device 8
.c448	85 ba		               sta  $ba       ;
.c44a	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.c44d	a9 6f		               lda  #$6f
.c44f	85 b9		               sta  $b9       ;
.c451	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.c454	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.c457	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.c45a	c9 0d		               cmp  #$0d      ; Is it CR ?
.c45c	d0 f6		               bne  nextchar  ; No, get next char
.c45e	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.c461	20 75 c1	               jsr  pop
.c464	60		               rts
.c465			diskdir
.c465	20 36 c1	               jsr  push
.c468	a9 24		               lda  #$24      ; L012C - Filename is "$"
.c46a	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.c46c	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.c46e	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.c470	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.c472	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.c474	a9 01		               lda  #$01      ; L0138 - set ...
.c476	85 b7		               sta  $b7       ; L013A - ... length of current filename
.c478	ad 73 c5	               lda  dsk_dev   ; L013C - set 8 as ...
.c47b	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.c47d	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.c47f	85 b9		               sta  $b9       ; L0142 - ... secondary address
.c481	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.c484	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.c486	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.c489	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.c48b	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.c48e	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.c490	85 90		               sta  $90       ; L0153 - ... kernal status word.
.c492	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.c494	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.c496	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.c499	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.c49b	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.c49d	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.c49f	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.c4a2	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.c4a4	d0 28		               bne  exit      ; L0167
.c4a6	a4 fb		               ldy  $fb       ; L0169
.c4a8	88		               dey            ; L016b
.c4a9	d0 e9		               bne  loop1     ; L016C - If not last, loop
.c4ab	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.c4ad	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.c4b0	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.c4b2	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.c4b5	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.c4b8	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.c4ba	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.c4bc	aa		               tax            ; L017F - tfr a in x
.c4bd	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.c4bf	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.c4c2	4c b5 c4	               jmp  loop3     ; L0185 - get another byte
.c4c5	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.c4c7	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.c4ca	a0 02		               ldy  #$02      ; L018D - set Y to 2
.c4cc	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.c4ce	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.c4d1	20 75 c1	               jsr  pop
.c4d4	60		               rts            ; L0194
.c4d5			directory
.c4d5	20 65 c4	               jsr  diskdir
.c4d8	20 42 c4	               jsr  diskerror
.c4db	60		               rts
.c4dc			memtofile
.c4dc	20 4d c5	               jsr  dsk_putmesg
.c4df	20 36 c1	               jsr  push
.c4e2	ad 77 c5	               lda  dsk_fnlen
.c4e5	ae 75 c5	               ldx  dsk_fnptr      ; load fname addr. lbyte
.c4e8	ac 76 c5	               ldy  dsk_fnptr+1
.c4eb	20 bd ff	               jsr  setnam         ; call setnam
.c4ee	ad 74 c5	               lda  dsk_lfsno
.c4f1	ae 73 c5	               ldx  dsk_dev        ; specified device
.c4f4	a0 00		skip           ldy  #$00
.c4f6	20 ba ff	               jsr  setlfs         ; call setlfs
.c4f9	ad 6f c5	               lda  dsk_data_s     ; put data start lbyte in stal
.c4fc	85 c1		               sta  stal
.c4fe	ad 70 c5	               lda  dsk_data_s+1   ; put data start hbyte in stal
.c501	85 c2		               sta  stal+1
.c503	ae 71 c5	               ldx  dsk_data_e     ; put data end lbyte in x
.c506	ac 72 c5	               ldy  dsk_data_e+1   ; put data end hbyte in y
.c509	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.c50b	20 d8 ff	               jsr  save           ; call save
.c50e	90 00		               bcc  noerror        ; if carry set, a load error has happened
.c510	20 75 c1	noerror        jsr  pop
.c513	60		               rts
.c514			filetomem
.c514	20 36 c1	               jsr push
.c517	ad 77 c5	               lda dsk_fnlen
.c51a	ae 75 c5	               ldx dsk_fnptr
.c51d	ac 76 c5	               ldy dsk_fnptr+1
.c520	20 bd ff	               jsr setnam     ; call setnam
.c523	ad 74 c5	               lda dsk_lfsno
.c526	ae 73 c5	               ldx dsk_dev    ; default to device 8
.c529	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.c52b	20 ba ff	               jsr setlfs     ; call setlfs
.c52e	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.c530	20 d5 ff	               jsr load       ; call load
.c533	90 03		               bcc noerror      ; if carry set, a load error has happened
.c535	20 3c c5	               jsr  error
.c538	20 75 c1	noerror        jsr pop
.c53b	60		               rts
.c53c			error
.c53c	60		               rts
.c53d	a2 88		error1         ldx  #<dsk_emsg1
.c53f	a0 c5		               ldy  #>dsk_emsg1
.c541	20 45 c0	               jsr  puts
.c544	60		               rts
.c545	a2 9c		error2         ldx #<dsk_emsg2
.c547	a0 c5		               ldy #>dsk_emsg2
.c549	20 45 c0	               jsr puts
.c54c	60		               rts
.c54d			dsk_putmesg
.c54d	20 36 c1	               jsr push
.c550	a2 78		               ldx #<dsk_msg0
.c552	a0 c5		               ldy #>dsk_msg0
.c554	20 45 c0	               jsr puts
.c557	a9 20		               lda #$20
.c559	20 3f c0	               jsr putch
.c55c	ae 75 c5	               ldx dsk_fnptr
.c55f	ac 76 c5	               ldy dsk_fnptr+1
.c562	20 45 c0	               jsr puts
.c565	ad 74 c5	               lda dsk_lfsno
.c568	20 c3 ff	               jsr close
.c56b	20 75 c1	               jsr pop
.c56e	60		               rts
>c56f	00 00		dsk_data_s     .word     $0000    ; example addresses
>c571	00 20		dsk_data_e     .word     $2000
>c573	08		dsk_dev        .byte     $08
>c574	00		dsk_lfsno      .byte     $00
>c575	00 00		dsk_fnptr      .word     $00
>c577	00		dsk_fnlen      .byte     0
>c578	8d		dsk_msg0       .byte     141
>c579	53 41 56 49	               .null     "saving"
>c57d	4e 47 00
>c580	8d		dsk_msg1       .byte     141
>c581	53 55 43 43	               .null     "succes"
>c585	45 53 00
>c588	8d		dsk_emsg1      .byte     141
>c589	46 49 43 48	               .null     "fichier non ouvert"
>c58d	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>c59c	11		dsk_emsg2      .byte     17
>c59d	45 52 52 45	               .null     "erreur d'ecriture"
>c5a1	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: wos2024.asm


;******  End of listing

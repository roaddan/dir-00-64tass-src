
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib" -i -L diskdir.txt -o diskdir.prg diskdir.asm
; Sun Jan  2 14:44:34 2022

;Offset	;Hex		;Source

;******  Processing input file: diskdir.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_map_kernal.asm"

=$0001			memmapreg = $0001     ; Registre de gestion mémoire du C64
=$90			kiostatus = $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen  = $b7       ; Current filename length (byte)
=$b9			cursecadd = $b9       ; Current secondary address (byte)
=$ba			curdevno  = $ba       ; Current device number (byte)
=$bb			curfptr   = $bb       ; Current file pointer (word)
=$fb			zpage1    = $fb       ; zero page 1 address (word)
=$fd			zpage2    = $fd       ; zero page 2 address (word)
=$fb			zeropage  = zpage1
=$fd			zonepage  = zpage2
=$0286			bascol    = $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram   = $0400     ;video character ram
=$0400			scrram0   = $0400
=$0500			scrram1   = $0500
=$0600			scrram2   = $0600
=$0700			scrram3   = $0700
=$0801			basicsta  = $0801     ;basic start address
=$a000			basicrom  = $a000
=$d000			vic       = $d000     ;vic base address
=$d000			chargen   = vic
=53265			vicreg11  = vic+$11   ;misc vic register
=53266			vicscan   = vic+$12   ;vic raster line number
=53272			viccptr   = vic+$18   ;vic ram/char page ptr
=53280			vborder   = vic+$20   ;video border col.
=53280			framecol  = vic+$20
=53281			backgrnd  = vic+$21
=53281			vbkgrnd   = vic+$21     ;video back col.
=$d400			sid       = $d400     ;sid base address
=$d800			colorram  = $d800     ;video color ram
=$d800			colram0   = $d800
=$d900			colram1   = $d900
=$da00			colram2   = $da00
=$db00			colram3   = $db00
=$dc00			cia1      = $dc00     ;cia1  base address
=$dd00			cia2      = $dd00     ;cia2 base address
=$e000			kernalrom = $e000
=$03			bstop     =    $03      ;stop
=$05			bwhite    =    $05      ;set color white
=$08			block     =    $08      ;lock the charset
=$09			bunlock   =    $09      ;unlock the charset
=$0d			bcarret   =    $0d
=$0e			btext     =    $0e
=$11			bcrsdn    =    $11      ;cursor down 1 line
=$12			brevcol   =    $12
=$13			bhome     =    $13
=$14			bdelete   =    $14
=$1c			bred      =    $1c
=$1d			bcuright  =    $1d
=$1e			bgreen    =    $1e
=$1f			bblue     =    $1f
=$81			borange   =    $81
=$83			blrun     =    $83
=$85			bfkey1    =    $85
=$86			bfkey2    =    $86
=$87			bfkey3    =    $87
=$88			bfkey4    =    $88
=$89			bfkey5    =    $89
=$8a			bfkey6    =    $8a
=$8b			bfkey7    =    $8b
=$8c			bfkey8    =    $8c
=$8d			bcarret1  =    $8d
=$8e			bgraph    =    $8e
=$90			bblack    =    $90
=$91			bcuup     =    $91
=$92			brevoff   =    $92
=$93			bclear    =    $93
=$94			binsert   =    $94
=$95			bbrown    =    $95
=$96			bltred    =    $96
=$97			bdkgrey   =    $97
=$98			bmdgrey   =    $98
=$99			bltgreen  =    $99
=$9a			bltblue   =    $9a
=$9b			bltgrey   =    $9b
=$9c			bmagenta  =    $9c
=$9d			bculeft   =    $9d
=$9e			byellow   =    $9e
=$9f			bcyan     =    $9f
=$0286			carcol  = $0286
=$030a			ieval   = $030a
=$73			chrget  = $73
=$79			chrgot  = $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ff81			cint    = $ff81 ; ($ff5b) Initialize the screen editor and vic-ii chip
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ff8a			restor  = $ff8a ; ($fd15) Restore default I/O vectors.
=$ff8d			vector  = $ff8d ; ($fd1a) Read/set I/O vectors.
=$ff90			setmsg  = $ff90 ; ($fe18) Set kernal message output flag
=$ff93			second  = $ff93 ; ($edb9) Send secondary address after listen
=$ff96			tksa    = $ff96 ; ($edc7) Send a secondary address to a device commanded to talk
=$ff99			memtop  = $ff99 ; ($fe25) Get/Set top of ram
=$ff9c			membot  = $ff9c ; ($fe34) Get/set bottom of memory.
=$ff9f			scankey = $ff9f ; $(ea87) Scan the keyboard
=$ffa2			settmo  = $ffa2 ; ($fe21) Set ieee bus card timeout flag
=$ffa5			acptr   = $ffa5 ; ($ee13) recoit un caractère provenant du port serie
=$ffa8			ciout   = $ffa8 ; ($eddd) Transmit a byte over the serial bus
=$ffab			untlk   = $ffab ; ($edef) Send an untalk command
=$ffae			unlsn   = $ffae ; ($edfe) Send an unlisten command
=$ffb1			listen  = $ffb1 ; ($ed0c) Command a device on the serial bus to listen.
=$ffb4			talk    = $ffb4 ; ($ed09) Command a device on the serial bus to talk
=$ffb7			readst  = $ffb7 ; ($fe07) Read i/o status word
=$ffba			setlfs  = $ffba ; ($fe00) Set up a logical file
=$ffbd			setnam  = $ffbd ; ($fdf9) Set up file name
=$ffc0			open    = $ffc0 ; ($f3a4) Open a logical file
=$ffc3			close   = $ffc3 ; ($f291) Close a logical file
=$ffc6			chkin   = $ffc6 ; ($f20e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; ($f250) Define an output channel.
=$ffcc			clrchn  = $ffcc ; ($f333) - Clear all i/o channels.
=$ffcf			chrin   = $ffcf ; ($f157) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; ($f1ca) Output a character
=$ffd5			load    = $ffd5 ; ($f49e) Load device to RAM.
=$ffd8			save    = $ffd8 ; ($f5dd) Save memory to a device.
=$ffdb			settim  = $ffdb ; ($f6e4) Set the system clock.
=$ffde			rdtim   = $ffde ; ($f6dd) Read system clock
=$ffe1			stop    = $ffe1 ; ($f6ed) Check if stop key is pressed.
=$ffe4			getin   = $ffe4 ; ($f13e) Get a character.
=$ffe7			clall   = $ffe7 ; ($f32f) Close all open files
=$ffea			udtim   = $ffea ; ($f69b) Update the system clock
=$ffed			screen  = $ffed ; ($e505) Return screen format
=$fff0			plot    = $fff0 ; ($e50a) Set or retrieve cursor location x=column, y=line
=$fff3			iobase  = $fff3 ; ($e500) Define i/o memory page
=$ff81			kcint     =    cint      ;   , init vic + ecran.
=$ff84			kioinit   =    ioinit    ;   , init i/o dev.
=$ff87			kramtas   =    ramtas    ;   , test de memoire.
=$ffa8			kciout    =    ciout     ;a  ,tx byte  acia
=$ff8a			krestor   =    restor    ;   , set ram plafond
=$ff8d			kvector   =    vector    ;
=$ff90			ksetmsg   =    setmsg    ;a  , set sys. msg. out
=$ff93			ksecond   =    second    ;a  , tx adresse sec.
=$ff96			ktksa     =    tksa      ;a  , talk adresse sec.
=$ff99			kmemtop   =    memtop    ; yx, (c) get mem high
=$ff9c			kmembot   =    membot    ; yx, (c) get mem low
=$ff9f			kscankey  =    scankey   ;   , scan clavier
=$ffa2			ksettmo   =    settmo    ;a  , set ieee timeout
=$ffa5			kacptr    =    acptr     ;a  ,rx serie.
=$ffab			kuntlk    =    untlk     ;   , iec-cmc stop talk
=$ffae			kunlsn    =    unlsn     ;   , iec-cmd stop lsn
=$ffb1			klisten   =    listen    ;a  , iec-cmd dev ecout
=$ffb4			ktalk     =    talk      ;a  , iec-cmd dev parle
=$ffb7			kreadst   =    readst    ;a  , lecture i/o stats
=$ffba			ksetlfs   =    setlfs    ;ayx, init fich logi.
=$ffbd			ksetnam   =    setnam    ;ayx, init num.nom.fich
=$ffc0			kopen     =    open      ;axy, ouvre fich-nom
=$ffc3			kclose    =    close     ;a  , ferme fichier #a.
=$ffc6			kchkin    =    chkin     ;  x,open canal in.
=$ffc9			kchkout   =    chkout    ;  x,open canal out
=$ffcc			kclrchn   =    clrchn    ;   , ferme canaux i/o.
=$ffcf			kchrin    =    chrin     ;a  ,recup. un car.
=$ffd2			kchrout   =    chrout    ;a  ,sort un car.
=$ffd5			kload     =    load      ;ayx, dev->ram
=$ffd8			ksave     =    save      ;   , sauve mem->dev
=$ffdb			ksettim   =    settim    ;axy, init sysclock
=$ffde			krdtim    =    rdtim     ;axy, lecture sysclock
=$ffe1			kstop     =    stop      ;a  , ret. stopkey stat
=$ffe4			kgetin    =    getin     ;a  , recup. car. #dev.
=$ffe7			kclall    =    clall     ;   , ferme fichiers.
=$ffea			kudtim    =    udtim     ;   , maj sysclock
=$ffed			kscreen   =    screen    ; yx, get format ecran
=$fff0			kplot     =    plot      ; yx, (c) get csr pos.
=$fff3			kiobase   =    iobase    ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.080d	4c c4 0a	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: diskdir.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_map_basic2.asm"

=$a3bb			b_opentxtspc  = $a3bb ;  1) Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ;  2) Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ;  3) ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ;  4) Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ;  5) Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ;  6) Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ;  7) Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ;  8) Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ;  9) Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; 10) Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; 11) Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; 12) Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; 13) Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; 14) Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; 15) Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; 17) Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; 18) Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; 19) Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; 20) Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; 21) Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; 22) Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; 23) Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; 24) Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; 25) Send char in a to device.   ;a--;a--; a = char
=$ad9e			b_evalexpr    = $ad9e ; 26) Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; 27) Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; 28) check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; 29) check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; 30) send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; 31) find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; 32) Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; 33) Float to int in Acc#1.      ;---;---;
=$b391			b_int2float   = $b391 ; 34) Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; 35) Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; 36) Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; 37) Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; 38) Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b867			b_memfloatadd = $b867 ; 39) Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; 40) Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; 41) Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; 42) Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; 43) Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; 44) Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; 45) Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; 46) Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; 47) Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; 48) Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; 49) Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; 50) Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: diskdir.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_basic2.asm"

.0810			scrmaninit
.0810	20 2c 0a	               jsr  push
.0813	a9 05		               lda  #vvert
.0815	8d 21 d0	               sta  backgrnd
.0818	a9 06		               lda  #vbleu
.081a	8d 20 d0	               sta  vborder
.081d	a9 01		               lda  #vblanc
.081f	8d 86 02	               sta  bascol
.0822	ad 18 d0	               lda  vic+$18
.0825	29 fd		               and  #%11111101
.0827	8d 18 d0	               sta  vic+$18
.082a	20 31 08	               jsr  cls
.082d	20 6b 0a	               jsr  pop
.0830	60		               rts
.0831			cls
.0831	08		               php
.0832	48		               pha
.0833	a9 93		               lda  #$93
.0835	20 40 08	               jsr  putch
.0838	a9 0e		               lda  #$0e
.083a	20 40 08	               jsr  putch
.083d	68		               pla
.083e	28		               plp
.083f	60		               rts
.0840			putch
.0840	08		               php
.0841	20 d2 ff	               jsr  $ffd2
.0844	28		               plp
.0845	60		               rts
.0846			puts
.0846	20 2c 0a	               jsr  push
.0849	20 1e ab	               jsr  b_outstr_ay
.084c	20 6b 0a	               jsr  pop
.084f	60		               rts
.0850			gotoxy
.0850	08		               php
.0851	18		               clc
.0852	20 f0 ff	               jsr  kplot
.0855	28		               plp
.0856	60		               rts
.0857			cursor
=$0286			bascol    =    $0286
.0857	08		               php
.0858	48		               pha
.0859	90 12		               bcc  restore
.085b	20 f0 ff	               jsr  kplot
.085e	8c 7f 08	               sty  cx
.0861	8e 80 08	               stx  cy
.0864	ad 86 02	               lda  bascol
.0867	8d 81 08	               sta  bcol
.086a	4c 7c 08	               jmp  out
.086d	ae 80 08	restore        ldx  cy
.0870	ac 7f 08	               ldy  cx
.0873	20 f0 ff	               jsr  kplot
.0876	ad 81 08	               lda  bcol
.0879	8d 86 02	               sta  bascol
.087c	68		out            pla
.087d	28		               plp
.087e	60		               rts
>087f	00		cx   .byte     $00
>0880	00		cy   .byte     $00
>0881	00		bcol .byte     $00
.0882			cursave
.0882	08		               php
.0883	38		               sec
.0884	20 57 08	               jsr  cursor
.0887	28		               plp
.0888	60		               rts
.0889			curput
.0889	08		               php
.088a	18		               clc
.088b	20 57 08	               jsr  cursor
.088e	28		               plp
.088f	60		               rts
.0890			putsxy
.0890	08		               php
.0891	8e f5 08	               stx  straddr
.0894	8c f6 08	               sty  straddr+1
.0897	48		               pha
.0898	98		               tya
.0899	48		               pha
.089a	8a		               txa
.089b	48		               pha
.089c	a5 fb		               lda  zpage1
.089e	8d f9 08	               sta  zp1
.08a1	a5 fc		               lda  zpage1+1
.08a3	8d fa 08	               sta  zp1+1
.08a6	ad f6 08	               lda  straddr+1
.08a9	85 fc		               sta  zpage1+1
.08ab	ad f5 08	               lda  straddr
.08ae	85 fb		               sta  zpage1
.08b0	a0 00		               ldy  #$00
.08b2	b1 fb		               lda  (zpage1),y
.08b4	8d f7 08	               sta  px
.08b7	c8		               iny
.08b8	b1 fb		               lda  (zpage1),y
.08ba	8d f8 08	               sta  py
.08bd	aa		               tax
.08be	ac f7 08	               ldy  px
.08c1	20 50 08	               jsr  gotoxy
.08c4	18		               clc
.08c5	ee f5 08	               inc  straddr
.08c8	ad f5 08	               lda  straddr
.08cb	8d f5 08	               sta  straddr
.08ce	90 03		               bcc  norep1
.08d0	ee f6 08	               inc  straddr+1
.08d3	ee f5 08	norep1         inc  straddr
.08d6	90 03		               bcc  norep2
.08d8	ee f6 08	               inc  straddr+1
.08db	ad f5 08	norep2         lda  straddr
.08de	ac f6 08	               ldy  straddr+1
.08e1	20 46 08	               jsr  puts
.08e4	ad fa 08	               lda  zp1+1
.08e7	85 fc		               sta  zpage1+1
.08e9	ad f9 08	               lda  zp1
.08ec	85 fb		               sta  zpage1
.08ee	68		               pla
.08ef	aa		               tax
.08f0	68		               pla
.08f1	a8		               tay
.08f2	68		               pla
.08f3	28		               plp
.08f4	60		               rts
>08f5	00 00		straddr   .word     $00
>08f7	00		px        .byte     $00
>08f8	00		py        .byte     $00
>08f9	00 00		zp1       .word     $00
.08fb			putscxy
.08fb	08		               php
.08fc	8e 51 09	               stx  straddr
.08ff	8c 52 09	               sty  straddr+1
.0902	48		               pha
.0903	98		               tya
.0904	48		               pha
.0905	8a		               txa
.0906	48		               pha
.0907	a5 fb		               lda  zpage1
.0909	8d 54 09	               sta  zp1
.090c	a5 fc		               lda  zpage1+1
.090e	8d 55 09	               sta  zp1+1
.0911	ad 52 09	               lda  straddr+1
.0914	85 fc		               sta  zpage1+1
.0916	ad 51 09	               lda  straddr
.0919	85 fb		               sta  zpage1
.091b	ad 86 02	               lda  bascol
.091e	8d 53 09	               sta  bc
.0921	a0 00		               ldy #$00
.0923	b1 fb		               lda  (zpage1),y
.0925	8d 86 02	               sta  bascol
.0928	18		               clc
.0929	ee 51 09	               inc  straddr
.092c	90 03		               bcc  norep1
.092e	ee 52 09	               inc  straddr+1
.0931	ad 51 09	norep1         lda  straddr
.0934	ac 52 09	               ldy  straddr+1
.0937	20 90 08	               jsr  putsxy
.093a	ad 53 09	               lda  bc
.093d	8d 86 02	               sta  bascol
.0940	ad 55 09	               lda  zp1+1
.0943	85 fc		               sta  zpage1+1
.0945	ad 54 09	               lda  zp1
.0948	85 fb		               sta  zpage1
.094a	68		               pla
.094b	aa		               tax
.094c	68		               pla
.094d	a8		               tay
.094e	68		               pla
.094f	28		               plp
.0950	60		               rts
>0951	00 00		straddr  .word      $00
>0953	00		bc       .byte      $00
>0954	00 00		zp1      .word      $00
.0956			putrahex
.0956	08		               php
.0957	48		               pha
.0958	20 9d 09	               jsr  a2hex
.095b	a9 84		               lda  #<a2hexstr
.095d	a0 09		               ldy  #>a2hexstr
.095f	20 46 08	               jsr  puts
.0962	68		               pla
.0963	28		               plp
.0964	60		               rts
.0965			kputrahexxy
.0965			bputrahexxy
.0965			putrahexxy
.0965	08		               php
.0966	20 9d 09	               jsr  a2hex
.0969	a9 82		               lda  #<a2hexpos
.096b	a0 09		               ldy  #>a2hexpos
.096d	20 90 08	               jsr  putsxy
.0970	68		               pla
.0971	28		               plp
.0972	60		               rts
.0973			putrahexcxy
.0973	08		               php
.0974	20 9d 09	               jsr  a2hex
.0977	a9 82		               lda  #<a2hexpos
.0979	a0 09		               ldy  #>a2hexpos
.097b	20 fb 08	               jsr  putscxy
.097e	68		               pla
.097f	28		               plp
.0980	60		               rts

;******  Return to file: diskdir.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_hex.asm"

>0981	01		a2hexcol       .byte     1    ; pour aputscxy
.0982			a2hexpos
>0982	00		a2hexpx        .byte     0    ; pour aputsxy
>0983	00		a2hexpy        .byte     0
>0984	24		a2hexstr       .byte     "$"  ; pour aputs
>0985	00 00		               .word     $00
>0987	00 00		               .word     $00
>0989	00		               .byte     0    ; 0 end string
.098a			nib2hex
.098a	08		               php
.098b	29 0f		               and  #$0f
.098d	f8		               sed
.098e	18		               clc
.098f	69 90		               adc  #$90
.0991	69 40		               adc  #$40
.0993	d8		               cld
.0994	28		               plp
.0995	60		               rts
.0996			lsra4bits
.0996	08		               php
.0997	4a		               lsr
.0998	4a		               lsr
.0999	4a		               lsr
.099a	4a		               lsr
.099b	28		               plp
.099c	60		               rts
.099d			a2hex
.099d	08		               php
.099e	48		               pha
.099f	48		               pha
.09a0	20 96 09	               jsr  lsra4bits
.09a3	20 8a 09	               jsr  nib2hex
.09a6	8d 85 09	               sta  a2hexstr+1
.09a9	68		               pla
.09aa	20 8a 09	               jsr  nib2hex
.09ad	8d 86 09	               sta  a2hexstr+2
.09b0	a9 00		               lda  #$00
.09b2	8d 87 09	               sta  a2hexstr+3
.09b5	68		               pla
.09b6	28		               plp
.09b7	60		               rts
.09b8			xy2hex
.09b8	20 2c 0a	               jsr  push
.09bb	20 9d 09	               jsr  a2hex
.09be	98		               tya
.09bf	48		               pha
.09c0	20 96 09	               jsr  lsra4bits
.09c3	20 8a 09	               jsr  nib2hex
.09c6	8d 87 09	               sta  a2hexstr+3
.09c9	68		               pla
.09ca	20 8a 09	               jsr  nib2hex
.09cd	8d 88 09	               sta  a2hexstr+4
.09d0	a9 00		               lda  #$00
.09d2	8d 89 09	               sta  a2hexstr+5
.09d5	20 6b 0a	               jsr  pop
.09d8			atobin
.09d8	20 2c 0a	               jsr     push
.09db	a2 08		               ldx     #8
.09dd	a0 00		               ldy     #0
.09df	2a		nextbit        rol
.09e0	48		               pha
.09e1	29 01		               and     #1
.09e3	20 8a 09	               jsr     nib2hex
.09e6	99 f7 09	               sta     abin,y
.09e9	68		               pla
.09ea	c8		               iny
.09eb	ca		               dex
.09ec	d0 f1		               bne     nextbit
.09ee	a9 00		               lda     #0
.09f0	99 f7 09	               sta     abin,y
.09f3	20 6b 0a	               jsr     pull
.09f6	60		               rts
>09f7	00 00 00 00	abin           .byte 0,0,0,0,0,0,0,0,0
>09fb	00 00 00 00 00
.0a00			putabin
.0a00	20 d8 09	               jsr     atobin
.0a03	20 2c 0a	               jsr     push
.0a06	a2 f7		               ldx     #<abin
.0a08	a0 09		               ldy     #>abin
.0a0a	20 46 08	               jsr     puts
.0a0d	20 6b 0a	               jsr     pop
.0a10	60		               rts
.0a11			putabinfmt
.0a11	08		               php
.0a12	48		               pha
.0a13	a9 25		               lda     #"%"
.0a15	20 40 08	               jsr     putch
.0a18	68		               pla
.0a19	20 00 0a	               jsr     putabin
.0a1c	28		               plp
.0a1d	60		               rts
.0a1e			putabinxy
.0a1e	20 50 08	               jsr     gotoxy
.0a21	20 00 0a	               jsr     putabin
.0a24	60		               rts
.0a25			putabinfmtxy
.0a25	20 50 08	               jsr     gotoxy
.0a28	20 11 0a	               jsr     putabinfmt
.0a2b	60		               rts

;******  Return to file: diskdir.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_pushpop.asm"

.0a2c			push
.0a2c	08		          php            ; stack : flg, pcl, pch
.0a2d	78		          sei
.0a2e	8d 68 0a	          sta  ra        ; save a
.0a31	68		          pla            ; stack : pcl, pch
.0a32	8d 67 0a	          sta  rp        ; save rp
.0a35	68		          pla            ; stack : pch
.0a36	8d 69 0a	          sta  pc        ; save pcl
.0a39	68		          pla            ; stack : -
.0a3a	8d 6a 0a	          sta  pc+1      ; save pch
.0a3d	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0a3f	48		          pha            ; stack : zp1l
.0a40	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0a42	48		          pha            ; stack : zp1h, zp1l
.0a43	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0a45	48		          pha            ; stack : zp2l, zp1h, zp1l
.0a46	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0a48	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0a49	ad 67 0a	          lda  rp        ; get rp
.0a4c	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0a4d	ad 68 0a	          lda  ra        ; get a
.0a50	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a51	8a		          txa            ; get x
.0a52	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a53	98		          tya            ; get y
.0a54	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a55	ad 6a 0a	          lda  pc+1      ; get pch
.0a58	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a59	ad 69 0a	          lda  pc        ; get pcl
.0a5c	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a5d	ad 67 0a	          lda  rp        ; get rp
.0a60	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a61	ad 68 0a	          lda  ra        ; get a
.0a64	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a65	58		          cli
.0a66	60		          rts
>0a67	00		rp        .byte     0
>0a68	00		ra        .byte     0
>0a69	00 00		pc        .word     0
.0a6b			pull
.0a6b			pop
.0a6b	78		          sei
.0a6c	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a6d	8d a0 0a	          sta  pc        ; save pcl
.0a70	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a71	8d a1 0a	          sta  pc+1      ; save pch
.0a74	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a75	a8		          tay            ; set y
.0a76	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a77	aa		          tax            ; set x
.0a78	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0a79	8d 9f 0a	          sta  ra        ; save a
.0a7c	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0a7d	8d 9e 0a	          sta  rp        ; save rp
.0a80	68		          pla            ; stack : zp2l, zp1h, zp1l
.0a81	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0a83	68		          pla            ; stack : zp1h, zp1l
.0a84	85 fd		          sta  zpage2    ; get zpage2 High byte
.0a86	68		          pla            ; stack : zp1l
.0a87	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0a89	68		          pla            ; stack :
.0a8a	85 fb		          sta  zpage1    ; get zpage1 High byte
.0a8c	ad a1 0a	          lda  pc+1      ; get pch
.0a8f	48		          pha            ; stack : pch
.0a90	ad a0 0a	          lda  pc
.0a93	48		          pha            ; stack : pcl, pch
.0a94	ad 9e 0a	          lda  rp        ; get rp
.0a97	48		          pha            ; stack : rp, pcl, pch
.0a98	ad 9f 0a	          lda  ra        ; set ra
.0a9b	58		          cli
.0a9c	28		          plp            ; stack : pcl, pch
.0a9d	60		          rts
>0a9e	00		rp        .byte     0
>0a9f	00		ra        .byte     0
>0aa0	00 00		pc        .word     0

;******  Return to file: diskdir.asm


;******  Processing file: diskerror.asm

.0aa2			diskerror
.0aa2	20 2c 0a	               jsr  push
.0aa5	a9 08		               lda  #$08      ; Select device 8
.0aa7	85 ba		               sta  $ba       ;
.0aa9	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.0aac	a9 6f		               lda  #$6f
.0aae	85 b9		               sta  $b9       ;
.0ab0	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.0ab3	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.0ab6	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.0ab9	c9 0d		               cmp  #$0d      ; Is it CR ?
.0abb	d0 f6		               bne  nextchar  ; No, get next char
.0abd	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.0ac0	20 6b 0a	               jsr  pop
.0ac3	60		               rts

;******  Return to file: diskdir.asm

.0ac4			main
.0ac4			diskdir
.0ac4	20 2c 0a	               jsr  push
.0ac7	a9 24		               lda  #$24      ; L012C - Filename is "$"
.0ac9	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.0acb	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.0acd	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.0acf	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.0ad1	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.0ad3	a9 01		               lda  #$01      ; L0138 - set ...
.0ad5	85 b7		               sta  $b7       ; L013A - ... length of current filename
.0ad7	a9 08		               lda  #$08      ; L013C - set 8 as ...
.0ad9	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.0adb	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.0add	85 b9		               sta  $b9       ; L0142 - ... secondary address
.0adf	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.0ae2	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...
.0ae4	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.0ae7	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.0ae9	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.0aec	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.0aee	85 90		               sta  $90       ; L0153 - ... kernal status word.
.0af0	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.0af2	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.0af4	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.0af7	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.0af9	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.0afb	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.0afd	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.0b00	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.0b02	d0 28		               bne  exit      ; L0167
.0b04	a4 fb		               ldy  $fb       ; L0169
.0b06	88		               dey            ; L016b
.0b07	d0 e9		               bne  loop1     ; L016C - If not last, loop
.0b09	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.0b0b	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.0b0e	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.0b10	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.0b13	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.0b16	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.0b18	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.0b1a	aa		               tax            ; L017F - tfr a in x
.0b1b	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.0b1d	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.0b20	4c 13 0b	               jmp  loop3     ; L0185 - get another byte
.0b23	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.0b25	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.0b28	a0 02		               ldy  #$02      ; L018D - set Y to 2
.0b2a	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.0b2c	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.0b2f	20 6b 0a	               jsr  pop
.0b32	60		               rts            ; L0194

;******  End of listing

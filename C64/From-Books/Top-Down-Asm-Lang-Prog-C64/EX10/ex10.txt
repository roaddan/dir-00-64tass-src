
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L ex10.txt -o ex10.prg ex10.asm
; Wed Jul 10 18:14:43 2024

;Offset	;Hex		;Source

;******  Processing input file: ex10.asm

="20240710-181424-a"	                Version = "20240710-181424-a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: ex10.asm

.080d	20 2e c9	               jsr  push
.0810	20 00 c0	               jsr  main
.0813	20 6d c9	               jsr  pop
.0816	60		               rts
.c000			main
.c000	20 00 c8	               jsr scrmaninit
.c003	08		               php
.c004	48		               pha
.c005	a9 08		               lda  #$08
.c007	20 d2 ff	               jsr  $ffd2
.c00a	68		               pla
.c00b	28		               plp
.c00c	20 43 c0	               jsr help
.c00f	20 35 cd	               jsr anykey
.c012	20 18 c4	               jsr ch3ex10
.c015	08		               php
.c016	48		               pha
.c017	a9 09		               lda  #$09
.c019	20 d2 ff	               jsr  $ffd2
.c01c	68		               pla
.c01d	28		               plp
.c01e	08		               php
.c01f	48		               pha
.c020	a9 8e		               lda  #b_uppercase
.c022	8d 1f c8	               sta  characterset
.c025	20 d2 ff	               jsr  $ffd2
.c028	68		               pla
.c029	28		               plp
.c02a	20 20 c8	               jsr  cls
.c02d	48		               pha
.c02e	a9 0c		               lda  #cgrismoyen
.c030	8d 20 d0	               sta  $d020
.c033	68		               pla
.c034	48		               pha
.c035	a9 0b		               lda  #cgrisfonce
.c037	8d 21 d0	               sta  $d021
.c03a	68		               pla
.c03b	48		               pha
.c03c	a9 0f		               lda  #cgrispale
.c03e	8d 86 02	               sta  bascol
.c041	68		               pla
.c042	60		               rts
.c043			help
.c043	08		               php
.c044	48		               pha
.c045	a9 0e		               lda  #b_lowercase
.c047	8d 1f c8	               sta  characterset
.c04a	20 d2 ff	               jsr  $ffd2
.c04d	68		               pla
.c04e	28		               plp
.c04f	20 20 c8	               jsr cls
.c052	20 2e c9	               jsr  push
.c055	a2 7a		isx            ldx  #<line
.c057	a0 c2		isy            ldy  #>line
.c059	20 3d c8	               jsr  puts
.c05c	20 6d c9	               jsr  pull
.c05f	20 2e c9	               jsr  push
.c062	a2 a1		isx            ldx  #<headera
.c064	a0 c0		isy            ldy  #>headera
.c066	20 3d c8	               jsr  puts
.c069	20 6d c9	               jsr  pull
.c06c	20 2e c9	               jsr  push
.c06f	a2 2c		isx            ldx  #<headerb
.c071	a0 c1		isy            ldy  #>headerb
.c073	20 3d c8	               jsr  puts
.c076	20 6d c9	               jsr  pull
.c079	20 2e c9	               jsr  push
.c07c	a2 b0		isx            ldx  #<shortcuts
.c07e	a0 c1		isy            ldy  #>shortcuts
.c080	20 3d c8	               jsr  puts
.c083	20 6d c9	               jsr  pull
.c086	20 2e c9	               jsr  push
.c089	a2 3e		isx            ldx  #<helptext
.c08b	a0 c2		isy            ldy  #>helptext
.c08d	20 3d c8	               jsr  puts
.c090	20 6d c9	               jsr  pull
.c093	20 2e c9	               jsr  push
.c096	a2 7a		isx            ldx  #<line
.c098	a0 c2		isy            ldy  #>line
.c09a	20 3d c8	               jsr  puts
.c09d	20 6d c9	               jsr  pull
.c0a0	60		               rts
.c0a1			headera
>c0a1	20 d4 4f 50	               .text          " Top-Down assembly language programming"
>c0a5	2d c4 4f 57 4e 20 41 53 53 45 4d 42 4c 59 20 4c
>c0b5	41 4e 47 55 41 47 45 20 50 52 4f 47 52 41 4d 4d
>c0c5	49 4e 47
>c0c8	0d		               .byte   $0d
>c0c9	20 20 20 20	               .text          "     For the Commodore Vic20 and 64"
>c0cd	20 c6 4f 52 20 54 48 45 20 c3 4f 4d 4d 4f 44 4f
>c0dd	52 45 20 d6 49 43 32 30 20 41 4e 44 20 36 34
>c0ec	0d		               .byte   $0d
>c0ed	20 20 20 20	               .text          "           Book by Ken Skier."
>c0f1	20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20 cb
>c101	45 4e 20 d3 4b 49 45 52 2e
>c10a	0d		               .byte   $0d
>c10b	20 20 20 20	               .text          "         ISBN 0-07-057864-8 PBK"
>c10f	20 20 20 20 20 c9 d3 c2 ce 20 30 2d 30 37 2d 30
>c11f	35 37 38 36 34 2d 38 20 d0 c2 cb
>c12a	0d 00		               .byte   $0d,0
>c12c	20 20 20 20	headerb        .text          "             ch3ex10 (p26)"
>c130	20 20 20 20 20 20 20 20 20 43 48 33 45 58 31 30
>c140	20 28 50 32 36 29
>c146	0d		               .byte   $0d
>c147	20 20 20 20	               .text          "        (c) 1979 Brad Templeton"
>c14b	20 20 20 20 28 43 29 20 31 39 37 39 20 c2 52 41
>c15b	44 20 d4 45 4d 50 4c 45 54 4f 4e
>c166	0d		               .byte   $0d
>c167	20 20 20 20	               .text          "     programmed by Daniel Lafrance."
>c16b	20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20 c4
>c17b	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>c18a	0d		               .byte   $0d
>c18b	20 20 20 20	               .text   format("        Version: %s.",Version)
>c18f	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>c19f	34 30 37 31 30 2d 31 38 31 34 32 34 2d 41 2e
>c1ae	0d 00		               .byte   $0d,0
>c1b0	0d		shortcuts      .byte   $0d
>c1b1	20 2d 2d 2d	               .text          " -------- S H O R T - C U T S ---------"
>c1b5	2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4 20
>c1c5	2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d 2d
>c1d5	2d 2d 2d
>c1d8	0d 0d		               .byte   $0d, $0d
>c1da	20 cd 41 49	               .text   format(" Main Run.....: SYS%05d ($%04X)",main, main)
>c1de	4e 20 d2 55 4e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34
>c1ee	39 31 35 32 20 28 24 c3 30 30 30 29
>c1fa	0d		               .byte   $0d
>c1fb	20 d4 48 49	               .text   format(" This help....: SYS%05d ($%04X)",help, help)
>c1ff	53 20 48 45 4c 50 2e 2e 2e 2e 3a 20 d3 d9 d3 34
>c20f	39 32 31 39 20 28 24 c3 30 34 33 29
>c21b	0d		               .byte   $0d
>c21c	20 c3 4c 45	               .text   format(" Clear screen.: SYS%05d ($%04X)",cls, cls)
>c220	41 52 20 53 43 52 45 45 4e 2e 3a 20 d3 d9 d3 35
>c230	31 32 33 32 20 28 24 c3 38 32 30 29
>c23c	0d 00		               .byte   $0d,0
>c23e	20 d2 55 4e	helptext       .text   format(" Run ch3ex10..: SYS%05d ($%04X)",ch3ex10, ch3ex10)
>c242	20 43 48 33 45 58 31 30 2e 2e 3a 20 d3 d9 d3 35
>c252	30 32 30 30 20 28 24 c3 34 31 38 29
>c25e	0d 0d		               .byte   $0d, $0d
>c260	20 c5 58 41	               .text   format(" Example......: SYS%05d",ch3ex10)
>c264	4d 50 4c 45 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 35
>c274	30 32 30 30
>c278	0d 00		               .byte   $0d,0
>c27a	20 2d 2d 2d	line           .text          " --------------------------------------"
>c27e	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>c28e	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>c29e	2d 2d 2d
>c2a1	0d 00		               .byte   $0d,0
=$2200			origin = $2200
=$2210			dest = $2210
.c418			ch3ex10
.c418	48		               pha
.c419	ad 20 d0	               lda vicbordcol
.c41c	8d 3c c4	               sta byte
.c41f	a9 10		               lda #$10
.c421	8d 20 d0	               sta vicbordcol
.c424	a2 00		init           ldx  #0
.c426	bd 00 22	get            lda  origin,x
.c429	9d 10 22	put            sta  dest,x
.c42c	e8		adhust         inx
.c42d	e0 09		test           cpx #9
.c42f	d0 f5		branch         bne get        ; Little bug in the original example stated ...
.c431	20 35 cd	               jsr anykey
.c434	ad 3c c4	               lda byte
.c437	8d 20 d0	               sta vicbordcol
.c43a	68		               pla
.c43b	60		               rts
>c43c	00		byte           .byte 0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.c800			libtart

;******  Return to file: ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.c800			scrmaninit
.c800	20 2e c9	               jsr  push
.c803	a9 06		               lda  #vbleu
.c805	8d 21 d0	               sta  vicbackcol
.c808	a9 05		               lda  #vvert
.c80a	8d 20 d0	               sta  vicbordcol
.c80d	a9 01		               lda  #vblanc
.c80f	8d 86 02	               sta  bascol
.c812	ad 00 04	               lda  scrnram
.c815	8d 00 04	               sta  scrnram
.c818	20 20 c8	               jsr  cls
.c81b	20 6d c9	               jsr  pop
.c81e	60		               rts
>c81f	8e		characterset   .byte b_uppercase
.c820			cls
.c820	08		               php
.c821	48		               pha
.c822	a9 93		               lda  #$93
.c824	20 37 c8	               jsr  putch
.c827	68		               pla
.c828	28		               plp
.c829	60		               rts
.c82a			putnch
.c82a	08		               php
.c82b	e0 00		               cpx  #$00
.c82d	f0 06		               beq  out
.c82f	20 d2 ff	again          jsr  $ffd2
.c832	ca		               dex
.c833	d0 fa		               bne  again
.c835	28		out            plp
.c836	60		               rts
.c837			putch
.c837	08		               php
.c838	20 d2 ff	               jsr  $ffd2
.c83b	28		               plp
.c83c	60		               rts
.c83d			puts
.c83d	20 2e c9	               jsr  push
.c840	86 fb		               stx  zpage1
.c842	84 fc		               sty  zpage1+1
.c844	a0 00		               ldy  #0
.c846	b1 fb		next           lda  (zpage1),y
.c848	f0 09		               beq  exit
.c84a	20 37 c8	               jsr  putch
.c84d	20 35 ca	               jsr  inczp1
.c850	4c 46 c8	               jmp  next
.c853	20 6d c9	exit           jsr  pop
.c856	60		               rts
.c857			gotoxy
.c857	08		               php
.c858	18		               clc
.c859	8a		               txa
.c85a	48		               pha
.c85b	98		               tya
.c85c	aa		               tax
.c85d	68		               pla
.c85e	a8		               tay
.c85f	20 f0 ff	               jsr  kplot
.c862	28		               plp
.c863	60		               rts
.c864			cursor
=$0286			bascol    =    $0286
.c864	08		               php
.c865	48		               pha
.c866	90 12		               bcc  restore
.c868	20 f0 ff	               jsr  kplot
.c86b	8c 8c c8	               sty  cx
.c86e	8e 8d c8	               stx  cy
.c871	ad 86 02	               lda  bascol
.c874	8d 8e c8	               sta  bcol
.c877	4c 89 c8	               jmp  out
.c87a	ae 8d c8	restore        ldx  cy
.c87d	ac 8c c8	               ldy  cx
.c880	20 f0 ff	               jsr  kplot
.c883	ad 8e c8	               lda  bcol
.c886	8d 86 02	               sta  bascol
.c889	68		out            pla
.c88a	28		               plp
.c88b	60		               rts
>c88c	00		cx   .byte     $00
>c88d	00		cy   .byte     $00
>c88e	00		bcol .byte     $00
.c88f			cursave
.c88f	08		               php
.c890	38		               sec
.c891	20 64 c8	               jsr  cursor
.c894	28		               plp
.c895	60		               rts
.c896			curput
.c896	08		               php
.c897	18		               clc
.c898	20 64 c8	               jsr  cursor
.c89b	28		               plp
.c89c	60		               rts
.c89d			putsxy
.c89d	20 2e c9	               jsr  push
.c8a0	86 fb		               stx  zpage1
.c8a2	84 fc		               sty  zpage1+1
.c8a4	a0 00		               ldy  #$00
.c8a6	b1 fb		               lda  (zpage1),y
.c8a8	aa		               tax
.c8a9	20 35 ca	               jsr  inczp1
.c8ac	b1 fb		               lda  (zpage1),y
.c8ae	a8		               tay
.c8af	20 57 c8	               jsr  gotoxy
.c8b2	20 35 ca	               jsr  inczp1
.c8b5	a6 fb		               ldx  zpage1
.c8b7	a4 fc		               ldy  zpage1+1
.c8b9	20 3d c8	               jsr  puts
.c8bc	20 6d c9	               jsr  pop
.c8bf	60		               rts
>c8c0	00 00		straddr   .word     $00
>c8c2	00		px        .byte     $00
>c8c3	00		py        .byte     $00
>c8c4	00 00		zp1       .word     $00
.c8c6			putscxy
.c8c6	20 2e c9	               jsr  push
.c8c9	84 fc		               sty  zpage1+1
.c8cb	86 fb		               stx  zpage1
.c8cd	ad 86 02	               lda  bascol
.c8d0	8d f0 c8	               sta  bc
.c8d3	a0 00		               ldy #$00
.c8d5	b1 fb		               lda  (zpage1),y
.c8d7	8d 86 02	               sta  bascol
.c8da	20 35 ca	               jsr  inczp1
.c8dd	a6 fb		               ldx  zpage1
.c8df	a4 fc		               ldy  zpage1+1
.c8e1	20 9d c8	               jsr  putsxy
.c8e4	ad f0 c8	               lda  bc
.c8e7	8d 86 02	               sta  bascol
.c8ea	20 6d c9	               jsr  pop
.c8ed	60		               rts
>c8ee	00 00		straddr  .word      $00
>c8f0	00		bc       .byte      $00
>c8f1	00 00		zp1      .word      $00
.c8f3			putrahex
.c8f3	08		               php
.c8f4	48		               pha
.c8f5	20 4b cb	               jsr  a2hex
.c8f8	a9 ea		               lda  #<a2hexstr
.c8fa	a0 ca		               ldy  #>a2hexstr
.c8fc	20 3d c8	               jsr  puts
.c8ff	68		               pla
.c900	28		               plp
.c901	60		               rts
.c902			kputrahexxy
.c902			bputrahexxy
.c902			putrahexxy
.c902	08		               php
.c903	20 4b cb	               jsr  a2hex
.c906	a9 e7		               lda  #<a2hexpos
.c908	a0 ca		               ldy  #>a2hexpos
.c90a	20 9d c8	               jsr  putsxy
.c90d	68		               pla
.c90e	28		               plp
.c90f	60		               rts
.c910			putrahexcxy
.c910	08		               php
.c911	20 4b cb	               jsr  a2hex
.c914	a9 e7		               lda  #<a2hexpos
.c916	a0 ca		               ldy  #>a2hexpos
.c918	20 c6 c8	               jsr  putscxy
.c91b	68		               pla
.c91c	28		               plp
.c91d	60		               rts
.c91e			setinverse
.c91e	48		               pha
.c91f	a9 12		               lda  #$12
.c921	20 d2 ff	               jsr  $ffd2
.c924	68		               pla
.c925	60		               rts
.c926			clrinverse
.c926	48		               pha
.c927	a9 92		               lda  #$92
.c929	20 d2 ff	               jsr  $ffd2
.c92c	68		               pla
.c92d	60		               rts

;******  Return to file: ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.c92e			push
.c92e	08		          php            ; stack : flg, pcl, pch
.c92f	78		          sei
.c930	8d 6a c9	          sta  ra        ; save a
.c933	68		          pla            ; stack : pcl, pch
.c934	8d 69 c9	          sta  rp        ; save rp
.c937	68		          pla            ; stack : pch
.c938	8d 6b c9	          sta  pc        ; save pcl
.c93b	68		          pla            ; stack : -
.c93c	8d 6c c9	          sta  pc+1      ; save pch
.c93f	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c941	48		          pha            ; stack : zp1l
.c942	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c944	48		          pha            ; stack : zp1h, zp1l
.c945	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c947	48		          pha            ; stack : zp2l, zp1h, zp1l
.c948	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c94a	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c94b	ad 69 c9	          lda  rp        ; get rp
.c94e	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c94f	ad 6a c9	          lda  ra        ; get a
.c952	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c953	8a		          txa            ; get x
.c954	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c955	98		          tya            ; get y
.c956	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c957	ad 6c c9	          lda  pc+1      ; get pch
.c95a	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c95b	ad 6b c9	          lda  pc        ; get pcl
.c95e	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c95f	ad 69 c9	          lda  rp        ; get rp
.c962	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c963	ad 6a c9	          lda  ra        ; get a
.c966	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c967	58		          cli
.c968	60		          rts
>c969	00		rp        .byte     0
>c96a	00		ra        .byte     0
>c96b	00 00		pc        .word     0
.c96d			pull
.c96d			pop
.c96d	78		          sei
.c96e	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c96f	8d a2 c9	          sta  pc        ; save pcl
.c972	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c973	8d a3 c9	          sta  pc+1      ; save pch
.c976	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c977	a8		          tay            ; set y
.c978	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c979	aa		          tax            ; set x
.c97a	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c97b	8d a1 c9	          sta  ra        ; save a
.c97e	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c97f	8d a0 c9	          sta  rp        ; save rp
.c982	68		          pla            ; stack : zp2l, zp1h, zp1l
.c983	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c985	68		          pla            ; stack : zp1h, zp1l
.c986	85 fd		          sta  zpage2    ; get zpage2 High byte
.c988	68		          pla            ; stack : zp1l
.c989	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c98b	68		          pla            ; stack :
.c98c	85 fb		          sta  zpage1    ; get zpage1 High byte
.c98e	ad a3 c9	          lda  pc+1      ; get pch
.c991	48		          pha            ; stack : pch
.c992	ad a2 c9	          lda  pc
.c995	48		          pha            ; stack : pcl, pch
.c996	ad a0 c9	          lda  rp        ; get rp
.c999	48		          pha            ; stack : rp, pcl, pch
.c99a	ad a1 c9	          lda  ra        ; set ra
.c99d	58		          cli
.c99e	28		          plp            ; stack : pcl, pch
.c99f	60		          rts
>c9a0	00		rp        .byte     0
>c9a1	00		ra        .byte     0
>c9a2	00 00		pc        .word     0

;******  Return to file: ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.c9a4			blkfill
.c9a4	20 2e c9	bf0            jsr  push
.c9a7	20 65 ca	               jsr  savezp1
.c9aa	84 fc		               sty  zpage1+1
.c9ac	a0 00		               ldy  #$00
.c9ae	84 fb		               sty  zpage1
.c9b0	91 fb		bf1            sta  (zpage1),y
.c9b2	c8		               iny
.c9b3	d0 fb		               bne  bf1
.c9b5	20 74 ca	               jsr  restzp1
.c9b8	20 6d c9	               jsr  pop
.c9bb	60		               rts
.c9bc			memfill
.c9bc	20 2e c9	               jsr  push
.c9bf	20 a4 c9	mf1            jsr  blkfill
.c9c2	c8		               iny
.c9c3	ca		               dex
.c9c4	d0 f9		               bne  mf1
.c9c6	20 6d c9	               jsr  pop
.c9c9	60		               rts
.c9ca			memmove
.c9ca	20 2e c9	               jsr  push
.c9cd	ba		               tsx            ; On se crée un pointeur ...
.c9ce	8a		               txa
.c9cf	18		               clc
.c9d0	69 0b		               adc  #11
.c9d2	a8		               tay
.c9d3	a2 06		               ldx  #$06
.c9d5	b9 00 01	nextbyte       lda  $0100,y
.c9d8	99 24 ca	               sta  words,y
.c9db	c8		               iny
.c9dc	ca		               dex
.c9dd	d0 f6		               bne  nextbyte
.c9df	ad 24 ca	               lda  s
.c9e2	8d fb c9	               sta  source+1
.c9e5	ad 25 ca	               lda  s+1
.c9e8	8d fc c9	               sta  source+2
.c9eb	ad 26 ca	               lda  d
.c9ee	8d f8 c9	               sta  destin+1
.c9f1	ad 27 ca	               lda  d+1
.c9f4	8d f9 c9	               sta  destin+2
.c9f7	ad ff ff	destin         lda  $ffff
.c9fa	8d ff ff	source         sta  $ffff
.c9fd	ee f8 c9	               inc  destin+1
.ca00	d0 03		               bne  src
.ca02	ee f9 c9	               inc  destin+2
.ca05	ee fb c9	src            inc  source+1
.ca08	d0 03		               bne  cnt
.ca0a	ee fc c9	               inc  source+2
.ca0d	ad 28 ca	cnt            lda  compte
.ca10	d0 08		               bne  decit
.ca12	ad 29 ca	               lda  compte+1
.ca15	f0 09		               beq  fini
.ca17	ce 29 ca	               dec  compte+1
.ca1a	ce 28 ca	decit          dec  compte
.ca1d	4c f7 c9	               jmp  destin
.ca20	20 6d c9	fini           jsr  pop
.ca23	60		               rts
.ca24			words
>ca24	00 00		s         .word     $0000
>ca26	00 00		d         .word     $0000
>ca28	00 00		compte    .word     $0000
.ca2a			decword
.ca2a	20 2e c9	               jsr  push
.ca2d	86 fd		               stx  zpage2
.ca2f	84 fe		               sty  zpage2+1
.ca31	20 6d c9	               jsr  pop
.ca34	60		               rts
.ca35			inczp1
.ca35	08		               php
.ca36	48		               pha
.ca37	e6 fb		               inc  zpage1
.ca39	a5 fb		               lda  zpage1
.ca3b	d0 02		               bne  nopage
.ca3d	e6 fc		               inc  zpage1+1
.ca3f	68		nopage         pla
.ca40	28		               plp
.ca41	60		               rts
.ca42			deczp1
.ca42	08		                php
.ca43	48		                pha
.ca44	c6 fb		                dec  zpage1
.ca46	d0 02		                bne  nopage
.ca48	c6 fc		                dec  zpage1+1
.ca4a	68		nopage          pla
.ca4b	28		                plp
.ca4c	60		                rts
.ca4d			inczp2
.ca4d	08		               php
.ca4e	48		               pha
.ca4f	e6 fd		               inc  zpage2
.ca51	a5 fd		               lda  zpage2
.ca53	d0 02		               bne  nopage
.ca55	e6 fe		               inc  zpage2+1
.ca57	68		nopage         pla
.ca58	28		               plp
.ca59	60		               rts
.ca5a			deczp2
.ca5a	08		               php
.ca5b	48		               pha
.ca5c	a5 fd		               lda  zpage2
.ca5e	d0 02		               bne  nopage
.ca60	c6 fe		               dec  zpage2+1
.ca62	68		nopage         pla
.ca63	28		               plp
.ca64	60		               rts
.ca65			savezp1
.ca65	08		               php
.ca66	48		               pha
.ca67	a5 fb		               lda  zpage1
.ca69	8d e1 ca	               sta  zp1
.ca6c	a5 fc		               lda  zpage1+1
.ca6e	8d e2 ca	               sta  zp1+1
.ca71	68		               pla
.ca72	28		               plp
.ca73	60		               rts
.ca74			restzp1
.ca74	08		               php
.ca75	48		               pha
.ca76	ad e1 ca	               lda zp1
.ca79	85 fb		               sta zpage1
.ca7b	ad e2 ca	               lda zp1+1
.ca7e	85 fc		               sta zpage1+1
.ca80	68		               pla
.ca81	28		               plp
.ca82	60		               rts
.ca83			savezp2
.ca83	08		         php
.ca84	48		         pha
.ca85	a5 fd		         lda zpage2
.ca87	8d e3 ca	         sta zp2
.ca8a	a5 fe		         lda zpage2+1
.ca8c	8d e4 ca	         sta zp2+1
.ca8f	68		         pla
.ca90	28		         plp
.ca91	60		         rts
.ca92			restzp2
.ca92	08		                php
.ca93	48		                pha
.ca94	ad e3 ca	                lda  zp2
.ca97	85 fd		                sta  zpage2
.ca99	ad e4 ca	                lda  zp2+1
.ca9c	85 fe		                sta  zpage2+1
.ca9e	68		                pla
.ca9f	28		                plp
.caa0	60		                rts
.caa1			xy2addr
.caa1	08		                php
.caa2	48		                pha
.caa3	8a		                txa
.caa4	48		                pha
.caa5	98		                tya
.caa6	48		                pha
.caa7	ad dc ca	                lda     addr1+1
.caaa	8d de ca	                sta     addr2+1
.caad	ad db ca	                lda     addr1
.cab0	8d dd ca	                sta     addr2
.cab3	c0 00		                cpy     #$00
.cab5	f0 0f		                beq     addx
.cab7	18		moreline        clc
.cab8	6d da ca	                adc     ymult
.cabb	90 03		                bcc     norepy
.cabd	ee de ca	                inc     addr2+1
.cac0	8d dd ca	norepy          sta     addr2
.cac3	88		                dey
.cac4	d0 f1		                bne     moreline
.cac6	8a		addx            txa
.cac7	18		                clc
.cac8	6d dd ca	                adc     addr2
.cacb	90 03		                bcc     thatsit
.cacd	ee de ca	                inc     addr2+1
.cad0	8d dd ca	thatsit         sta     addr2
.cad3	68		                pla
.cad4	a8		                tay
.cad5	68		                pla
.cad6	aa		                tax
.cad7	68		                pla
.cad8	28		                plp
.cad9	60		                rts
>cada	28		ymult          .byte     40
>cadb	00 00		addr1          .word     $0000
>cadd	00 00		addr2          .word     $0000
>cadf	00 00		bytecnt        .word     $0000
>cae1	00 00		zp1        .word   $0000
>cae3	00 00		zp2        .word   $0000

;******  Return to file: ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>cae5	01		a2hexcol       .byte     1              ; pour aputscxy
>cae6	00		a2hexbkcol     .byte     %00000000
.cae7			a2hexpos
>cae7	00		a2hexpx        .byte     0              ; pour aputsxy
>cae8	00		a2hexpy        .byte     0
>cae9	24		a2hexprefix    .byte     "$"            ; pour aputs
>caea	00 00		a2hexstr       .word     $00
>caec	00 00		               .word     $00
>caee	00		               .byte     0              ; 0 end string
>caef	30 30 30 30	abin           .null     "00000000"
>caf3	30 30 30 30 00
>caf8	20 20 20 00	adec           .null     "   "
.cafc			putahexfmtxy
.cafc	20 2e c9	               jsr  push
.caff	20 4b cb	               jsr  a2hex
.cb02	ae e7 ca	               ldx  a2hexpx
.cb05	ac e8 ca	               ldy  a2hexpy
.cb08	20 57 c8	               jsr  gotoxy
.cb0b	a2 e9		               ldx  #<a2hexprefix
.cb0d	a0 ca		               ldy  #>a2hexprefix
.cb0f	20 3d c8	               jsr  puts
.cb12	20 6d c9	               jsr  pop
.cb15	60		               rts
.cb16			putahexfmt
.cb16	20 2e c9	               jsr  push
.cb19	20 4b cb	               jsr  a2hex
.cb1c	a2 e9		               ldx  #<a2hexprefix
.cb1e	a0 ca		               ldy  #>a2hexprefix
.cb20	20 3d c8	               jsr  puts
.cb23	20 6d c9	               jsr  pop
.cb26	60		               rts
.cb27			putahex
.cb27	20 2e c9	               jsr  push
.cb2a	20 4b cb	               jsr  a2hex
.cb2d	a2 ea		               ldx  #<a2hexstr
.cb2f	a0 ca		               ldy  #>a2hexstr
.cb31	20 3d c8	               jsr  puts
.cb34	20 6d c9	               jsr  pop
.cb37	60		               rts
.cb38			nib2hex
.cb38	08		               php
.cb39	29 0f		               and  #$0f
.cb3b	f8		               sed
.cb3c	18		               clc
.cb3d	69 90		               adc  #$90
.cb3f	69 40		               adc  #$40
.cb41	d8		               cld
.cb42	28		               plp
.cb43	60		               rts
.cb44			lsra4bits
.cb44	08		               php
.cb45	4a		               lsr
.cb46	4a		               lsr
.cb47	4a		               lsr
.cb48	4a		               lsr
.cb49	28		               plp
.cb4a	60		               rts
.cb4b			a2hex
.cb4b	08		               php
.cb4c	48		               pha
.cb4d	48		               pha
.cb4e	20 44 cb	               jsr  lsra4bits
.cb51	20 38 cb	               jsr  nib2hex
.cb54	8d ea ca	               sta  a2hexstr
.cb57	68		               pla
.cb58	20 38 cb	               jsr  nib2hex
.cb5b	8d eb ca	               sta  a2hexstr+1
.cb5e	a9 00		               lda  #$00                ; set end of string
.cb60	8d ec ca	               sta  a2hexstr+2
.cb63	68		               pla
.cb64	28		               plp
.cb65	60		               rts
.cb66			xy2hex
.cb66	20 2e c9	               jsr  push
.cb69	20 4b cb	               jsr  a2hex
.cb6c	8a		               txa
.cb6d	48		               pha
.cb6e	20 44 cb	               jsr  lsra4bits
.cb71	20 38 cb	               jsr  nib2hex
.cb74	8d ea ca	               sta  a2hexstr
.cb77	68		               pla
.cb78	20 38 cb	               jsr  nib2hex
.cb7b	8d eb ca	               sta  a2hexstr+1
.cb7e	98		               tya
.cb7f	48		               pha
.cb80	20 44 cb	               jsr  lsra4bits
.cb83	20 38 cb	               jsr  nib2hex
.cb86	8d ec ca	               sta  a2hexstr+2
.cb89	68		               pla
.cb8a	20 38 cb	               jsr  nib2hex
.cb8d	8d ed ca	               sta  a2hexstr+3
.cb90	a9 00		               lda  #$00                ; 0 ended string
.cb92	8d ee ca	               sta  a2hexstr+4
.cb95	20 6d c9	               jsr  pop
.cb98			atobin
.cb98	20 2e c9	               jsr  push
.cb9b	a2 08		               ldx  #8
.cb9d	a0 00		               ldy  #0
.cb9f	18		               clc
.cba0	2a		nextbit        rol
.cba1	48		               pha
.cba2	69 00		               adc  #$00
.cba4	29 01		               and  #$01
.cba6	20 38 cb	               jsr  nib2hex
.cba9	99 ef ca	               sta  abin,y
.cbac	68		               pla
.cbad	c8		               iny
.cbae	ca		               dex
.cbaf	d0 ef		               bne  nextbit
.cbb1	a9 00		               lda  #0
.cbb3	99 ef ca	               sta  abin,y
.cbb6	20 6d c9	               jsr  pull
.cbb9	60		               rts
.cbba			putabin
.cbba	20 98 cb	               jsr     atobin
.cbbd	20 2e c9	               jsr     push
.cbc0	a2 ef		               ldx     #<abin
.cbc2	a0 ca		               ldy     #>abin
.cbc4	20 3d c8	               jsr     puts
.cbc7	20 6d c9	               jsr     pop
.cbca	60		               rts
.cbcb			printabin
.cbcb	20 2e c9	               jsr     push
.cbce	a2 ef		               ldx     #<abin
.cbd0	a0 ca		               ldy     #>abin
.cbd2	20 3d c8	               jsr     puts
.cbd5	20 6d c9	               jsr     pop
.cbd8	60		               rts
.cbd9			putabinfmt
.cbd9	08		               php
.cbda	48		               pha
.cbdb	a9 25		               lda     #"%"
.cbdd	20 37 c8	               jsr     putch
.cbe0	68		               pla
.cbe1	20 ba cb	               jsr     putabin
.cbe4	28		               plp
.cbe5	60		               rts
.cbe6			putabinxy
.cbe6	20 57 c8	               jsr     gotoxy
.cbe9	20 ba cb	               jsr     putabin
.cbec	60		               rts
.cbed			putabinfmtxy
.cbed	20 57 c8	               jsr     gotoxy
.cbf0	20 d9 cb	               jsr     putabinfmt
.cbf3	60		               rts
.cbf4			atodec
.cbf4	20 2e c9	               jsr  push
.cbf7	f8		               sed
.cbf8	aa		               tax
.cbf9	a0 00		               ldy  #$00
.cbfb	a9 00		               lda  #$00
.cbfd	18		nextbit        clc
.cbfe	69 01		               adc  #$01
.cc00	90 01		               bcc  decx
.cc02	c8		               iny
.cc03	ca		decx           dex
.cc04	d0 f7		               bne  nextbit
.cc06	48		               pha
.cc07	98		               tya
.cc08	20 38 cb	               jsr  nib2hex
.cc0b	8d f8 ca	               sta  adec
.cc0e	68		               pla
.cc0f	48		               pha
.cc10	20 38 cb	               jsr  nib2hex
.cc13	8d fa ca	               sta  adec+2
.cc16	68		               pla
.cc17	6a		               ror
.cc18	6a		               ror
.cc19	6a		               ror
.cc1a	6a		               ror
.cc1b	20 38 cb	               jsr  nib2hex
.cc1e	8d f9 ca	               sta  adec+1
.cc21	d8		               cld
.cc22	20 6d c9	               jsr  pull
.cc25	60		               rts
>cc26	00 00 00	buffer         .byte     0,0,0

;******  Return to file: ex10.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>cc29	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>cc2d	00 00 00 00 00 00 00 00 00 0d 00 00
>cc39	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>cc3d	00 00 00 00 00 00 00 00 00 00 00 00
>cc49	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>cc4d	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>cc59	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>cc5d	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>cc69	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>cc6d	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>cc79	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>cc7d	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>cc89	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>cc8d	00 00 00 00 00 00 00 00 00 00 00 00
>cc99	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>cc9d	00 00 00 00 00 00 00 00 00 00 00 00
>cca9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>ccad	00 00 00 00 00 00 00 00 00 00 00 00
>ccb9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>ccbd	00 00 00 00 00 00 00 00 00 00 00 00
>ccc9	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>cccd	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>ccd9	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>ccdd	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>cce9	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>cced	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>ccf9	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>ccfd	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>cd09	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>cd0d	00 00 00 00 00 00 00 00 00 00 00 00
>cd19	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>cd1d	00 00 00 00 00 00 00 00 00 00 00 00
.cd29			waitstop
.cd29	20 2e c9	               jsr  push
.cd2c	20 ed f6	wait           jsr  k_stop
.cd2f	d0 fb		               bne  wait
.cd31	20 6d c9	               jsr  pop
.cd34	60		               rts
.cd35			anykey
.cd35	08		               php
.cd36	48		               pha
.cd37	a5 cb		nokey          lda 203
.cd39	c9 40		               cmp #64
.cd3b	f0 fa		               beq nokey
.cd3d	20 43 cd	               jsr releasekey
.cd40	68		               pla
.cd41	28		               plp
.cd42	60		               rts
.cd43			releasekey
.cd43	08		               php
.cd44	48		               pha
.cd45	a5 cb		keypressed     lda 203
.cd47	c9 40		               cmp #64
.cd49	d0 fa		               bne keypressed
.cd4b	68		               pla
.cd4c	28		               plp
.cd4d	60		               rts
.cd4e			getkey
.cd4e	20 e4 ff	again          jsr  getin
.cd51	c9 00		               cmp  #0
.cd53	f0 f9		               beq  again
.cd55	60		               rts
.cd56			waitkey
.cd56	20 2e c9	               jsr  push
.cd59	8d a7 cd	               sta  thekey
.cd5c	20 e4 ff	nope           jsr  getin
.cd5f	20 d2 ff	               jsr  chrout
.cd62	cd a7 cd	               cmp  thekey
.cd65	d0 f5		               bne  nope
.cd67	20 d2 ff	               jsr  chrout
.cd6a	20 6d c9	               jsr  pop
.cd6d	60		               rts
.cd6e			waitspace
.cd6e	20 2e c9	               jsr  push
.cd71	a9 7f		wait           lda  #$7f  ;%01111111
.cd73	8d 00 dc	               sta  $dc00
.cd76	ad 01 dc	               lda  $dc01
.cd79	29 10		               and  #$10  ;mask %00010000
.cd7b	d0 f4		               bne  wait
.cd7d	20 6d c9	               jsr  pop
.cd80			waitsstop
.cd80	20 2e c9	               jsr  push
.cd83	20 ed f6	wait           jsr  k_stop  ;%01111111
.cd86	d0 fb		               bne  wait
.cd88	20 6d c9	               jsr  pop
.cd8b			waitreturn
.cd8b	20 2e c9	               jsr  push
.cd8e	ad a8 cd	               lda  thecount
.cd91	8d 00 04	               sta  scrnram
.cd94	a9 02		               lda  #$02
.cd96	8d 00 d8	               sta  colorram
.cd99	20 e4 ff	nope           jsr  getin
.cd9c	c9 0d		nohex          cmp  #$0d
.cd9e	d0 f9		               bne  nope
.cda0	ee a8 cd	               inc  thecount
.cda3	20 6d c9	               jsr  pop
.cda6	60		               rts
>cda7	00		thekey         .byte   0
>cda8	01		thecount       .byte   $01

;******  Return to file: ex10.asm


;******  End of listing

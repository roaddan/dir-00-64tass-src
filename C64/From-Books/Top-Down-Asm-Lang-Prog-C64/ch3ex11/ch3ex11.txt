
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L ch3ex11.txt -o ch3ex11.prg ch3ex11.asm
; Sun Jul 21 00:11:00 2024

;Offset	;Hex		;Source

;******  Processing input file: ch3ex11.asm

="20240715-221204"	                Version = "20240715-221204"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: ch3ex11.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: ch3ex11.asm

.080d	20 5e c4	               jsr  push
.0810	20 17 08	               jsr  main
.0813	20 9d c4	               jsr  pop
.0816	60		               rts
.0817			main
.0817	20 30 c3	               jsr scrmaninit
.081a	08		               php
.081b	48		               pha
.081c	a9 08		               lda  #$08
.081e	20 d2 ff	               jsr  $ffd2
.0821	68		               pla
.0822	28		               plp
.0823	20 5d 08	               jsr help
.0826	4c 5c 08	               jmp  mainout
.0829	20 76 c8	               jsr anykey
.082c	20 75 0a	               jsr ch3ex11
.082f	08		               php
.0830	48		               pha
.0831	a9 09		               lda  #$09
.0833	20 d2 ff	               jsr  $ffd2
.0836	68		               pla
.0837	28		               plp
.0838	08		               php
.0839	48		               pha
.083a	a9 8e		               lda  #b_uppercase
.083c	8d 4f c3	               sta  characterset
.083f	20 d2 ff	               jsr  $ffd2
.0842	68		               pla
.0843	28		               plp
.0844	20 50 c3	               jsr  cls
.0847	48		               pha
.0848	a9 0c		               lda  #cgrismoyen
.084a	8d 20 d0	               sta  $d020
.084d	68		               pla
.084e	48		               pha
.084f	a9 0b		               lda  #cgrisfonce
.0851	8d 21 d0	               sta  $d021
.0854	68		               pla
.0855	48		               pha
.0856	a9 0f		               lda  #cgrispale
.0858	8d 86 02	               sta  bascol
.085b	68		               pla
.085c	60		mainout        rts
.085d			help
.085d	08		               php
.085e	48		               pha
.085f	a9 0e		               lda  #14
.0861	8d 4f c3	               sta  characterset
.0864	20 d2 ff	               jsr  $ffd2
.0867	68		               pla
.0868	28		               plp
.0869	20 50 c3	               jsr cls
.086c	20 5e c4	               jsr  push
.086f	a2 4d		isx            ldx  #<line
.0871	a0 0a		isy            ldy  #>line
.0873	20 6d c3	               jsr  puts
.0876	20 9d c4	               jsr  pull
.0879	20 5e c4	               jsr  push
.087c	a2 bb		isx            ldx  #<headera
.087e	a0 08		isy            ldy  #>headera
.0880	20 6d c3	               jsr  puts
.0883	20 9d c4	               jsr  pull
.0886	20 5e c4	               jsr  push
.0889	a2 46		isx            ldx  #<headerb
.088b	a0 09		isy            ldy  #>headerb
.088d	20 6d c3	               jsr  puts
.0890	20 9d c4	               jsr  pull
.0893	20 5e c4	               jsr  push
.0896	a2 c3		isx            ldx  #<shortcuts
.0898	a0 09		isy            ldy  #>shortcuts
.089a	20 6d c3	               jsr  puts
.089d	20 9d c4	               jsr  pull
.08a0	20 5e c4	               jsr  push
.08a3	a2 31		isx            ldx  #<helptext
.08a5	a0 0a		isy            ldy  #>helptext
.08a7	20 6d c3	               jsr  puts
.08aa	20 9d c4	               jsr  pull
.08ad	20 5e c4	               jsr  push
.08b0	a2 4d		isx            ldx  #<line
.08b2	a0 0a		isy            ldy  #>line
.08b4	20 6d c3	               jsr  puts
.08b7	20 9d c4	               jsr  pull
.08ba	60		               rts
.08bb			headera
>08bb	0d 20 d4 cf	               .text     $0d,        " TOP-DOWN ASSEMBLY LANGUAGE PROGRAMMING"
>08bf	d0 2d c4 cf d7 ce 20 c1 d3 d3 c5 cd c2 cc d9 20
>08cf	cc c1 ce c7 d5 c1 c7 c5 20 d0 d2 cf c7 d2 c1 cd
>08df	cd c9 ce c7
>08e3	0d 20 20 20	               .text     $0d,        "     For the Commodore Vic20 and 64"
>08e7	20 20 c6 4f 52 20 54 48 45 20 c3 4f 4d 4d 4f 44
>08f7	4f 52 45 20 d6 49 43 32 30 20 41 4e 44 20 36 34
>0907	0d 20 20 20	               .text     $0d,        "           Book by KEN SKIER."
>090b	20 20 20 20 20 20 20 20 c2 4f 4f 4b 20 42 59 20
>091b	cb c5 ce 20 d3 cb c9 c5 d2 2e
>0925	0d 20 20 20	               .null     $0d,        "         ISBN 0-07-057864-8 PBK"
>0929	20 20 20 20 20 20 c9 d3 c2 ce 20 30 2d 30 37 2d
>0939	30 35 37 38 36 34 2d 38 20 d0 c2 cb 00
>0946	0d 20 20 20	headerb        .text     $0d,        "             ch3ex11 (p27)"
>094a	20 20 20 20 20 20 20 20 20 20 43 48 33 45 58 31
>095a	31 20 28 50 32 37 29
>0961	0d 20 20 20	               .text     $0d,        "            (c) McGraw-hill"
>0965	20 20 20 20 20 20 20 20 20 28 43 29 20 cd 43 c7
>0975	52 41 57 2d 48 49 4c 4c
>097d	0d 20 20 20	               .text     $0d,        "     programmed by Daniel Lafrance."
>0981	20 20 50 52 4f 47 52 41 4d 4d 45 44 20 42 59 20
>0991	c4 41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 2e
>09a1	0d 20 20 20	               .null     $0d, format("       Version: %s.",Version)
>09a5	20 20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32
>09b5	34 30 37 31 35 2d 32 32 31 32 30 34 2e 00
>09c3	0d 20 2d 2d	shortcuts      .text     $0d,        " -------- S H O R T - C U T S ---------"
>09c7	2d 2d 2d 2d 2d 2d 20 d3 20 c8 20 cf 20 d2 20 d4
>09d7	20 2d 20 c3 20 d5 20 d4 20 d3 20 2d 2d 2d 2d 2d
>09e7	2d 2d 2d 2d
>09eb	0d 20 d4 48	               .text     $0d, format(" This help.....: SYS%05d ($%04X)",help, help)
>09ef	49 53 20 48 45 4c 50 2e 2e 2e 2e 2e 3a 20 d3 d9
>09ff	d3 30 32 31 34 31 20 28 24 30 38 35 c4 29
>0a0d	0d 20 d2 55	               .null     $0d, format(" Run ch3ex11...: SYS%05d ($%04X)",ch3ex11, ch3ex11),$0d
>0a11	4e 20 43 48 33 45 58 31 31 2e 2e 2e 3a 20 d3 d9
>0a21	d3 30 32 36 37 37 20 28 24 30 c1 37 35 29 0d 00
>0a31	0d 20 c2 41	helptext       .null     $0d, format(" Basic Example.: SYS%05d",ch3ex11), $0d
>0a35	53 49 43 20 c5 58 41 4d 50 4c 45 2e 3a 20 d3 d9
>0a45	d3 30 32 36 37 37 0d 00
>0a4d	20 2d 2d 2d	line           .null                 " --------------------------------------"
>0a51	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0a61	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>0a71	2d 2d 2d 00
.0a75			ch3ex11
.0a75	48		               pha
.0a76	20 50 c3	               jsr  cls
.0a79	20 5e c4	               jsr  push
.0a7c	a2 6e		isx            ldx  #<qhelp
.0a7e	a0 0b		isy            ldy  #>qhelp
.0a80	20 6d c3	               jsr  puts
.0a83	20 9d c4	               jsr  pull
.0a86	ad 20 d0	               lda  vicbordcol
.0a89	8d 6d 0b	               sta  byte
.0a8c	a9 10		               lda  #$10
.0a8e	8d 20 d0	               sta  vicbordcol
.0a91	20 5e c4	               jsr  push
.0a94	a2 bc		isx            ldx  #<header
.0a96	a0 0b		isy            ldy  #>header
.0a98	20 6d c3	               jsr  puts
.0a9b	20 9d c4	               jsr  pull
.0a9e	4c bd 0a	               jmp  another
.0aa1	4c a6 0a	               jmp  init
>0aa4	b5 0a		pointer   .word     printit
.0aa6	a2 00		init           ldx  #0
.0aa8	a9 da		load           lda  #'Z'
.0aaa	6c a4 0a	useptr         jmp  (pointer)
>0aad	00 00 00 00	               .byte 00,00,00,00,00,00,00,00
>0ab1	00 00 00 00
.0ab5	20 d2 ff	printit        jsr  $ffd2
.0ab8	e8		adhust         inx
.0ab9	e0 09		test           cpx #9
.0abb	d0 ed		branch         bne useptr
.0abd	20 8f c8	another        jsr  getkey
.0ac0	48		               pha
.0ac1	38		               sec
.0ac2	20 f0 ff	               jsr  plot
.0ac5	e0 18		               cpx  #24
.0ac7	d0 27		               bne  nohead
.0ac9	20 5e c4	               jsr  push
.0acc	a2 00		               ldx  #0
.0ace	a0 00		               ldy  #0
.0ad0	20 87 c3	               jsr  gotoxy
.0ad3	20 9d c4	               jsr  pop
.0ad6	20 5e c4	               jsr  push
.0ad9	a2 6e		isx            ldx  #<qhelp
.0adb	a0 0b		isy            ldy  #>qhelp
.0add	20 6d c3	               jsr  puts
.0ae0	20 9d c4	               jsr  pull
.0ae3	20 5e c4	               jsr  push
.0ae6	a2 bc		isx            ldx  #<header
.0ae8	a0 0b		isy            ldy  #>header
.0aea	20 6d c3	               jsr  puts
.0aed	20 9d c4	               jsr  pull
.0af0	a9 0d		nohead         lda  #13
.0af2	20 67 c3	               jsr  putch
.0af5	a9 20		               lda  #' '
.0af7	20 67 c3	               jsr  putch
.0afa	a9 20		               lda  #' '
.0afc	20 67 c3	               jsr  putch
.0aff	68		               pla
.0b00	20 67 c3	               jsr  putch
.0b03	48		               pha
.0b04	a9 20		               lda  #' '
.0b06	20 67 c3	               jsr  putch
.0b09	a9 20		               lda  #' '
.0b0b	20 67 c3	               jsr  putch
.0b0e	a9 25		               lda  #'%'
.0b10	20 67 c3	               jsr  putch
.0b13	68		               pla
.0b14	20 ea c6	               jsr  putabin
.0b17	48		               pha
.0b18	a9 20		               lda  #' '
.0b1a	20 67 c3	               jsr  putch
.0b1d	a9 24		               lda  #'$'
.0b1f	20 67 c3	               jsr  putch
.0b22	68		               pla
.0b23	20 57 c6	               jsr  putahex
.0b26	48		               pha
.0b27	a9 20		               lda  #' '
.0b29	20 67 c3	               jsr  putch
.0b2c	68		               pla
.0b2d	20 59 c7	               jsr  putadec
.0b30	c9 08		               cmp  #8             ; Is it CTRL]+[H]
.0b32	d0 1d		               bne  isitqhelp
.0b34	20 50 c3	               jsr  cls
.0b37	20 5e c4	               jsr  push
.0b3a	a2 6e		isx            ldx  #<qhelp
.0b3c	a0 0b		isy            ldy  #>qhelp
.0b3e	20 6d c3	               jsr  puts
.0b41	20 9d c4	               jsr  pull
.0b44	20 5e c4	               jsr  push
.0b47	a2 bc		isx            ldx  #<header
.0b49	a0 0b		isy            ldy  #>header
.0b4b	20 6d c3	               jsr  puts
.0b4e	20 9d c4	               jsr  pull
.0b51	c9 14		isitqhelp      cmp  #$14
.0b53	d0 03		               bne  isitq
.0b55	20 5d 08	               jsr  help
.0b58	c9 11		isitq          cmp  #$11           ; Is it [CTRL]+[Q]
.0b5a	f0 03		               beq  doquit
.0b5c	4c bd 0a	               jmp  another
.0b5f	ad 6d 0b	doquit         lda  byte
.0b62	8d 20 d0	               sta  vicbordcol
.0b65	68		               pla
.0b66	20 50 c3	               jsr  cls
.0b69	20 5d 08	               jsr  help
.0b6c	60		               rts
>0b6d	00		byte           .byte     0
>0b6e	20 d4 59 50	qhelp          .text     " Type a key to see char, bin, hex, dec.", 13
>0b72	45 20 41 20 4b 45 59 20 54 4f 20 53 45 45 20 43
>0b82	48 41 52 2c 20 42 49 4e 2c 20 48 45 58 2c 20 44
>0b92	45 43 2e 0d
>0b96	20 20 20 5b	               .text     "   [CTRL]+[H] help, [CTRL]+[Q] quit.", 13, 0
>0b9a	c3 d4 d2 cc 5d 2b 5b c8 5d 20 48 45 4c 50 2c 20
>0baa	5b c3 d4 d2 cc 5d 2b 5b d1 5d 20 51 55 49 54 2e
>0bba	0d 00
>0bbc	20 43 48 52	header         .text     " chr %[binary] Hex Dec",13
>0bc0	20 25 5b 42 49 4e 41 52 59 5d 20 c8 45 58 20 c4
>0bd0	45 43 0d
>0bd3	2b 2d 2d 2d	               .null     "+---+---------+---+---+"
>0bd7	2b 2d 2d 2d 2d 2d 2d 2d 2d 2d 2b 2d 2d 2d 2b 2d
>0be7	2d 2d 2b 00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.c330			libtart

;******  Return to file: ch3ex11.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: ch3ex11.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: ch3ex11.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.c330			scrmaninit
.c330	20 5e c4	               jsr  push
.c333	a9 06		               lda  #vbleu
.c335	8d 21 d0	               sta  vicbackcol
.c338	a9 05		               lda  #vvert
.c33a	8d 20 d0	               sta  vicbordcol
.c33d	a9 01		               lda  #vblanc
.c33f	8d 86 02	               sta  bascol
.c342	ad 00 04	               lda  scrnram
.c345	8d 00 04	               sta  scrnram
.c348	20 50 c3	               jsr  cls
.c34b	20 9d c4	               jsr  pop
.c34e	60		               rts
>c34f	8e		characterset   .byte b_uppercase
.c350			cls
.c350	08		               php
.c351	48		               pha
.c352	a9 93		               lda  #$93
.c354	20 67 c3	               jsr  putch
.c357	68		               pla
.c358	28		               plp
.c359	60		               rts
.c35a			putnch
.c35a	08		               php
.c35b	e0 00		               cpx  #$00
.c35d	f0 06		               beq  out
.c35f	20 d2 ff	again          jsr  $ffd2
.c362	ca		               dex
.c363	d0 fa		               bne  again
.c365	28		out            plp
.c366	60		               rts
.c367			putch
.c367	08		               php
.c368	20 d2 ff	               jsr  $ffd2
.c36b	28		               plp
.c36c	60		               rts
.c36d			puts
.c36d	20 5e c4	               jsr  push
.c370	86 fb		               stx  zpage1
.c372	84 fc		               sty  zpage1+1
.c374	a0 00		               ldy  #0
.c376	b1 fb		next           lda  (zpage1),y
.c378	f0 09		               beq  exit
.c37a	20 67 c3	               jsr  putch
.c37d	20 65 c5	               jsr  inczp1
.c380	4c 76 c3	               jmp  next
.c383	20 9d c4	exit           jsr  pop
.c386	60		               rts
.c387			gotoxy
.c387	08		               php
.c388	18		               clc
.c389	8a		               txa
.c38a	48		               pha
.c38b	98		               tya
.c38c	aa		               tax
.c38d	68		               pla
.c38e	a8		               tay
.c38f	20 f0 ff	               jsr  kplot
.c392	28		               plp
.c393	60		               rts
.c394			cursor
=$0286			bascol    =    $0286
.c394	08		               php
.c395	48		               pha
.c396	90 12		               bcc  restore
.c398	20 f0 ff	               jsr  kplot
.c39b	8c bc c3	               sty  cx
.c39e	8e bd c3	               stx  cy
.c3a1	ad 86 02	               lda  bascol
.c3a4	8d be c3	               sta  bcol
.c3a7	4c b9 c3	               jmp  out
.c3aa	ae bd c3	restore        ldx  cy
.c3ad	ac bc c3	               ldy  cx
.c3b0	20 f0 ff	               jsr  kplot
.c3b3	ad be c3	               lda  bcol
.c3b6	8d 86 02	               sta  bascol
.c3b9	68		out            pla
.c3ba	28		               plp
.c3bb	60		               rts
>c3bc	00		cx   .byte     $00
>c3bd	00		cy   .byte     $00
>c3be	00		bcol .byte     $00
.c3bf			cursave
.c3bf	08		               php
.c3c0	38		               sec
.c3c1	20 94 c3	               jsr  cursor
.c3c4	28		               plp
.c3c5	60		               rts
.c3c6			curput
.c3c6	08		               php
.c3c7	18		               clc
.c3c8	20 94 c3	               jsr  cursor
.c3cb	28		               plp
.c3cc	60		               rts
.c3cd			putsxy
.c3cd	20 5e c4	               jsr  push
.c3d0	86 fb		               stx  zpage1
.c3d2	84 fc		               sty  zpage1+1
.c3d4	a0 00		               ldy  #$00
.c3d6	b1 fb		               lda  (zpage1),y
.c3d8	aa		               tax
.c3d9	20 65 c5	               jsr  inczp1
.c3dc	b1 fb		               lda  (zpage1),y
.c3de	a8		               tay
.c3df	20 87 c3	               jsr  gotoxy
.c3e2	20 65 c5	               jsr  inczp1
.c3e5	a6 fb		               ldx  zpage1
.c3e7	a4 fc		               ldy  zpage1+1
.c3e9	20 6d c3	               jsr  puts
.c3ec	20 9d c4	               jsr  pop
.c3ef	60		               rts
>c3f0	00 00		straddr   .word     $00
>c3f2	00		px        .byte     $00
>c3f3	00		py        .byte     $00
>c3f4	00 00		zp1       .word     $00
.c3f6			putscxy
.c3f6	20 5e c4	               jsr  push
.c3f9	84 fc		               sty  zpage1+1
.c3fb	86 fb		               stx  zpage1
.c3fd	ad 86 02	               lda  bascol
.c400	8d 20 c4	               sta  bc
.c403	a0 00		               ldy #$00
.c405	b1 fb		               lda  (zpage1),y
.c407	8d 86 02	               sta  bascol
.c40a	20 65 c5	               jsr  inczp1
.c40d	a6 fb		               ldx  zpage1
.c40f	a4 fc		               ldy  zpage1+1
.c411	20 cd c3	               jsr  putsxy
.c414	ad 20 c4	               lda  bc
.c417	8d 86 02	               sta  bascol
.c41a	20 9d c4	               jsr  pop
.c41d	60		               rts
>c41e	00 00		straddr  .word      $00
>c420	00		bc       .byte      $00
>c421	00 00		zp1      .word      $00
.c423			putrahex
.c423	08		               php
.c424	48		               pha
.c425	20 7b c6	               jsr  a2hex
.c428	a9 1a		               lda  #<a2hexstr
.c42a	a0 c6		               ldy  #>a2hexstr
.c42c	20 6d c3	               jsr  puts
.c42f	68		               pla
.c430	28		               plp
.c431	60		               rts
.c432			kputrahexxy
.c432			bputrahexxy
.c432			putrahexxy
.c432	08		               php
.c433	20 7b c6	               jsr  a2hex
.c436	a9 17		               lda  #<a2hexpos
.c438	a0 c6		               ldy  #>a2hexpos
.c43a	20 cd c3	               jsr  putsxy
.c43d	68		               pla
.c43e	28		               plp
.c43f	60		               rts
.c440			putrahexcxy
.c440	08		               php
.c441	20 7b c6	               jsr  a2hex
.c444	a9 17		               lda  #<a2hexpos
.c446	a0 c6		               ldy  #>a2hexpos
.c448	20 f6 c3	               jsr  putscxy
.c44b	68		               pla
.c44c	28		               plp
.c44d	60		               rts
.c44e			setinverse
.c44e	48		               pha
.c44f	a9 12		               lda  #$12
.c451	20 d2 ff	               jsr  $ffd2
.c454	68		               pla
.c455	60		               rts
.c456			clrinverse
.c456	48		               pha
.c457	a9 92		               lda  #$92
.c459	20 d2 ff	               jsr  $ffd2
.c45c	68		               pla
.c45d	60		               rts

;******  Return to file: ch3ex11.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.c45e			push
.c45e	08		          php            ; stack : flg, pcl, pch
.c45f	78		          sei
.c460	8d 9a c4	          sta  ra        ; save a
.c463	68		          pla            ; stack : pcl, pch
.c464	8d 99 c4	          sta  rp        ; save rp
.c467	68		          pla            ; stack : pch
.c468	8d 9b c4	          sta  pc        ; save pcl
.c46b	68		          pla            ; stack : -
.c46c	8d 9c c4	          sta  pc+1      ; save pch
.c46f	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c471	48		          pha            ; stack : zp1l
.c472	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c474	48		          pha            ; stack : zp1h, zp1l
.c475	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c477	48		          pha            ; stack : zp2l, zp1h, zp1l
.c478	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c47a	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c47b	ad 99 c4	          lda  rp        ; get rp
.c47e	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c47f	ad 9a c4	          lda  ra        ; get a
.c482	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c483	8a		          txa            ; get x
.c484	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c485	98		          tya            ; get y
.c486	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c487	ad 9c c4	          lda  pc+1      ; get pch
.c48a	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c48b	ad 9b c4	          lda  pc        ; get pcl
.c48e	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c48f	ad 99 c4	          lda  rp        ; get rp
.c492	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c493	ad 9a c4	          lda  ra        ; get a
.c496	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c497	58		          cli
.c498	60		          rts
>c499	00		rp        .byte     0
>c49a	00		ra        .byte     0
>c49b	00 00		pc        .word     0
.c49d			pull
.c49d			pop
.c49d	78		          sei
.c49e	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c49f	8d d2 c4	          sta  pc        ; save pcl
.c4a2	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4a3	8d d3 c4	          sta  pc+1      ; save pch
.c4a6	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c4a7	a8		          tay            ; set y
.c4a8	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c4a9	aa		          tax            ; set x
.c4aa	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c4ab	8d d1 c4	          sta  ra        ; save a
.c4ae	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c4af	8d d0 c4	          sta  rp        ; save rp
.c4b2	68		          pla            ; stack : zp2l, zp1h, zp1l
.c4b3	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c4b5	68		          pla            ; stack : zp1h, zp1l
.c4b6	85 fd		          sta  zpage2    ; get zpage2 High byte
.c4b8	68		          pla            ; stack : zp1l
.c4b9	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c4bb	68		          pla            ; stack :
.c4bc	85 fb		          sta  zpage1    ; get zpage1 High byte
.c4be	ad d3 c4	          lda  pc+1      ; get pch
.c4c1	48		          pha            ; stack : pch
.c4c2	ad d2 c4	          lda  pc
.c4c5	48		          pha            ; stack : pcl, pch
.c4c6	ad d0 c4	          lda  rp        ; get rp
.c4c9	48		          pha            ; stack : rp, pcl, pch
.c4ca	ad d1 c4	          lda  ra        ; set ra
.c4cd	58		          cli
.c4ce	28		          plp            ; stack : pcl, pch
.c4cf	60		          rts
>c4d0	00		rp        .byte     0
>c4d1	00		ra        .byte     0
>c4d2	00 00		pc        .word     0

;******  Return to file: ch3ex11.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.c4d4			blkfill
.c4d4	20 5e c4	bf0            jsr  push
.c4d7	20 95 c5	               jsr  savezp1
.c4da	84 fc		               sty  zpage1+1
.c4dc	a0 00		               ldy  #$00
.c4de	84 fb		               sty  zpage1
.c4e0	91 fb		bf1            sta  (zpage1),y
.c4e2	c8		               iny
.c4e3	d0 fb		               bne  bf1
.c4e5	20 a4 c5	               jsr  restzp1
.c4e8	20 9d c4	               jsr  pop
.c4eb	60		               rts
.c4ec			memfill
.c4ec	20 5e c4	               jsr  push
.c4ef	20 d4 c4	mf1            jsr  blkfill
.c4f2	c8		               iny
.c4f3	ca		               dex
.c4f4	d0 f9		               bne  mf1
.c4f6	20 9d c4	               jsr  pop
.c4f9	60		               rts
.c4fa			memmove
.c4fa	20 5e c4	               jsr  push
.c4fd	ba		               tsx            ; On se crée un pointeur ...
.c4fe	8a		               txa
.c4ff	18		               clc
.c500	69 0b		               adc  #11
.c502	a8		               tay
.c503	a2 06		               ldx  #$06
.c505	b9 00 01	nextbyte       lda  $0100,y
.c508	99 54 c5	               sta  words,y
.c50b	c8		               iny
.c50c	ca		               dex
.c50d	d0 f6		               bne  nextbyte
.c50f	ad 54 c5	               lda  s
.c512	8d 2b c5	               sta  source+1
.c515	ad 55 c5	               lda  s+1
.c518	8d 2c c5	               sta  source+2
.c51b	ad 56 c5	               lda  d
.c51e	8d 28 c5	               sta  destin+1
.c521	ad 57 c5	               lda  d+1
.c524	8d 29 c5	               sta  destin+2
.c527	ad ff ff	destin         lda  $ffff
.c52a	8d ff ff	source         sta  $ffff
.c52d	ee 28 c5	               inc  destin+1
.c530	d0 03		               bne  src
.c532	ee 29 c5	               inc  destin+2
.c535	ee 2b c5	src            inc  source+1
.c538	d0 03		               bne  cnt
.c53a	ee 2c c5	               inc  source+2
.c53d	ad 58 c5	cnt            lda  compte
.c540	d0 08		               bne  decit
.c542	ad 59 c5	               lda  compte+1
.c545	f0 09		               beq  fini
.c547	ce 59 c5	               dec  compte+1
.c54a	ce 58 c5	decit          dec  compte
.c54d	4c 27 c5	               jmp  destin
.c550	20 9d c4	fini           jsr  pop
.c553	60		               rts
.c554			words
>c554	00 00		s         .word     $0000
>c556	00 00		d         .word     $0000
>c558	00 00		compte    .word     $0000
.c55a			decword
.c55a	20 5e c4	               jsr  push
.c55d	86 fd		               stx  zpage2
.c55f	84 fe		               sty  zpage2+1
.c561	20 9d c4	               jsr  pop
.c564	60		               rts
.c565			inczp1
.c565	08		               php
.c566	48		               pha
.c567	e6 fb		               inc  zpage1
.c569	a5 fb		               lda  zpage1
.c56b	d0 02		               bne  nopage
.c56d	e6 fc		               inc  zpage1+1
.c56f	68		nopage         pla
.c570	28		               plp
.c571	60		               rts
.c572			deczp1
.c572	08		                php
.c573	48		                pha
.c574	c6 fb		                dec  zpage1
.c576	d0 02		                bne  nopage
.c578	c6 fc		                dec  zpage1+1
.c57a	68		nopage          pla
.c57b	28		                plp
.c57c	60		                rts
.c57d			inczp2
.c57d	08		               php
.c57e	48		               pha
.c57f	e6 fd		               inc  zpage2
.c581	a5 fd		               lda  zpage2
.c583	d0 02		               bne  nopage
.c585	e6 fe		               inc  zpage2+1
.c587	68		nopage         pla
.c588	28		               plp
.c589	60		               rts
.c58a			deczp2
.c58a	08		               php
.c58b	48		               pha
.c58c	a5 fd		               lda  zpage2
.c58e	d0 02		               bne  nopage
.c590	c6 fe		               dec  zpage2+1
.c592	68		nopage         pla
.c593	28		               plp
.c594	60		               rts
.c595			savezp1
.c595	08		               php
.c596	48		               pha
.c597	a5 fb		               lda  zpage1
.c599	8d 11 c6	               sta  zp1
.c59c	a5 fc		               lda  zpage1+1
.c59e	8d 12 c6	               sta  zp1+1
.c5a1	68		               pla
.c5a2	28		               plp
.c5a3	60		               rts
.c5a4			restzp1
.c5a4	08		               php
.c5a5	48		               pha
.c5a6	ad 11 c6	               lda zp1
.c5a9	85 fb		               sta zpage1
.c5ab	ad 12 c6	               lda zp1+1
.c5ae	85 fc		               sta zpage1+1
.c5b0	68		               pla
.c5b1	28		               plp
.c5b2	60		               rts
.c5b3			savezp2
.c5b3	08		         php
.c5b4	48		         pha
.c5b5	a5 fd		         lda zpage2
.c5b7	8d 13 c6	         sta zp2
.c5ba	a5 fe		         lda zpage2+1
.c5bc	8d 14 c6	         sta zp2+1
.c5bf	68		         pla
.c5c0	28		         plp
.c5c1	60		         rts
.c5c2			restzp2
.c5c2	08		                php
.c5c3	48		                pha
.c5c4	ad 13 c6	                lda  zp2
.c5c7	85 fd		                sta  zpage2
.c5c9	ad 14 c6	                lda  zp2+1
.c5cc	85 fe		                sta  zpage2+1
.c5ce	68		                pla
.c5cf	28		                plp
.c5d0	60		                rts
.c5d1			xy2addr
.c5d1	08		                php
.c5d2	48		                pha
.c5d3	8a		                txa
.c5d4	48		                pha
.c5d5	98		                tya
.c5d6	48		                pha
.c5d7	ad 0c c6	                lda     addr1+1
.c5da	8d 0e c6	                sta     addr2+1
.c5dd	ad 0b c6	                lda     addr1
.c5e0	8d 0d c6	                sta     addr2
.c5e3	c0 00		                cpy     #$00
.c5e5	f0 0f		                beq     addx
.c5e7	18		moreline        clc
.c5e8	6d 0a c6	                adc     ymult
.c5eb	90 03		                bcc     norepy
.c5ed	ee 0e c6	                inc     addr2+1
.c5f0	8d 0d c6	norepy          sta     addr2
.c5f3	88		                dey
.c5f4	d0 f1		                bne     moreline
.c5f6	8a		addx            txa
.c5f7	18		                clc
.c5f8	6d 0d c6	                adc     addr2
.c5fb	90 03		                bcc     thatsit
.c5fd	ee 0e c6	                inc     addr2+1
.c600	8d 0d c6	thatsit         sta     addr2
.c603	68		                pla
.c604	a8		                tay
.c605	68		                pla
.c606	aa		                tax
.c607	68		                pla
.c608	28		                plp
.c609	60		                rts
>c60a	28		ymult          .byte     40
>c60b	00 00		addr1          .word     $0000
>c60d	00 00		addr2          .word     $0000
>c60f	00 00		bytecnt        .word     $0000
>c611	00 00		zp1        .word   $0000
>c613	00 00		zp2        .word   $0000

;******  Return to file: ch3ex11.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>c615	01		a2hexcol       .byte     1              ; pour aputscxy
>c616	00		a2hexbkcol     .byte     %00000000
.c617			a2hexpos
>c617	00		a2hexpx        .byte     0              ; pour aputsxy
>c618	00		a2hexpy        .byte     0
>c619	24		a2hexprefix    .byte     "$"            ; pour aputs
>c61a	00 00		a2hexstr       .word     $00
>c61c	00 00		               .word     $00
>c61e	00		               .byte     0              ; 0 end string
>c61f	30 30 30 30	abin           .null     "00000000"
>c623	30 30 30 30 00
>c628	20 20 20 00	adec           .null     "   "
.c62c			putahexfmtxy
.c62c	20 5e c4	               jsr  push
.c62f	20 7b c6	               jsr  a2hex
.c632	ae 17 c6	               ldx  a2hexpx
.c635	ac 18 c6	               ldy  a2hexpy
.c638	20 87 c3	               jsr  gotoxy
.c63b	a2 19		               ldx  #<a2hexprefix
.c63d	a0 c6		               ldy  #>a2hexprefix
.c63f	20 6d c3	               jsr  puts
.c642	20 9d c4	               jsr  pop
.c645	60		               rts
.c646			putahexfmt
.c646	20 5e c4	               jsr  push
.c649	20 7b c6	               jsr  a2hex
.c64c	a2 19		               ldx  #<a2hexprefix
.c64e	a0 c6		               ldy  #>a2hexprefix
.c650	20 6d c3	               jsr  puts
.c653	20 9d c4	               jsr  pop
.c656	60		               rts
.c657			putahex
.c657	20 5e c4	               jsr  push
.c65a	20 7b c6	               jsr  a2hex
.c65d	a2 1a		               ldx  #<a2hexstr
.c65f	a0 c6		               ldy  #>a2hexstr
.c661	20 6d c3	               jsr  puts
.c664	20 9d c4	               jsr  pop
.c667	60		               rts
.c668			nib2hex
.c668	08		               php
.c669	29 0f		               and  #$0f
.c66b	f8		               sed
.c66c	18		               clc
.c66d	69 90		               adc  #$90
.c66f	69 40		               adc  #$40
.c671	d8		               cld
.c672	28		               plp
.c673	60		               rts
.c674			lsra4bits
.c674	08		               php
.c675	4a		               lsr
.c676	4a		               lsr
.c677	4a		               lsr
.c678	4a		               lsr
.c679	28		               plp
.c67a	60		               rts
.c67b			a2hex
.c67b	08		               php
.c67c	48		               pha
.c67d	48		               pha
.c67e	20 74 c6	               jsr  lsra4bits
.c681	20 68 c6	               jsr  nib2hex
.c684	8d 1a c6	               sta  a2hexstr
.c687	68		               pla
.c688	20 68 c6	               jsr  nib2hex
.c68b	8d 1b c6	               sta  a2hexstr+1
.c68e	a9 00		               lda  #$00                ; set end of string
.c690	8d 1c c6	               sta  a2hexstr+2
.c693	68		               pla
.c694	28		               plp
.c695	60		               rts
.c696			xy2hex
.c696	20 5e c4	               jsr  push
.c699	20 7b c6	               jsr  a2hex
.c69c	8a		               txa
.c69d	48		               pha
.c69e	20 74 c6	               jsr  lsra4bits
.c6a1	20 68 c6	               jsr  nib2hex
.c6a4	8d 1a c6	               sta  a2hexstr
.c6a7	68		               pla
.c6a8	20 68 c6	               jsr  nib2hex
.c6ab	8d 1b c6	               sta  a2hexstr+1
.c6ae	98		               tya
.c6af	48		               pha
.c6b0	20 74 c6	               jsr  lsra4bits
.c6b3	20 68 c6	               jsr  nib2hex
.c6b6	8d 1c c6	               sta  a2hexstr+2
.c6b9	68		               pla
.c6ba	20 68 c6	               jsr  nib2hex
.c6bd	8d 1d c6	               sta  a2hexstr+3
.c6c0	a9 00		               lda  #$00                ; 0 ended string
.c6c2	8d 1e c6	               sta  a2hexstr+4
.c6c5	20 9d c4	               jsr  pop
.c6c8			atobin
.c6c8	20 5e c4	               jsr  push
.c6cb	a2 08		               ldx  #8
.c6cd	a0 00		               ldy  #0
.c6cf	18		               clc
.c6d0	2a		nextbit        rol
.c6d1	48		               pha
.c6d2	69 00		               adc  #$00
.c6d4	29 01		               and  #$01
.c6d6	20 68 c6	               jsr  nib2hex
.c6d9	99 1f c6	               sta  abin,y
.c6dc	68		               pla
.c6dd	c8		               iny
.c6de	ca		               dex
.c6df	d0 ef		               bne  nextbit
.c6e1	a9 00		               lda  #0
.c6e3	99 1f c6	               sta  abin,y
.c6e6	20 9d c4	               jsr  pull
.c6e9	60		               rts
.c6ea			putabin
.c6ea	20 c8 c6	               jsr     atobin
.c6ed	20 5e c4	               jsr     push
.c6f0	a2 1f		               ldx     #<abin
.c6f2	a0 c6		               ldy     #>abin
.c6f4	20 6d c3	               jsr     puts
.c6f7	20 9d c4	               jsr     pop
.c6fa	60		               rts
.c6fb			printabin
.c6fb	20 5e c4	               jsr     push
.c6fe	a2 1f		               ldx     #<abin
.c700	a0 c6		               ldy     #>abin
.c702	20 6d c3	               jsr     puts
.c705	20 9d c4	               jsr     pop
.c708	60		               rts
.c709			putabinfmt
.c709	08		               php
.c70a	48		               pha
.c70b	a9 25		               lda     #"%"
.c70d	20 67 c3	               jsr     putch
.c710	68		               pla
.c711	20 ea c6	               jsr     putabin
.c714	28		               plp
.c715	60		               rts
.c716			putabinxy
.c716	20 87 c3	               jsr     gotoxy
.c719	20 ea c6	               jsr     putabin
.c71c	60		               rts
.c71d			putabinfmtxy
.c71d	20 87 c3	               jsr     gotoxy
.c720	20 09 c7	               jsr     putabinfmt
.c723	60		               rts
.c724			atodec
.c724	20 5e c4	               jsr  push
.c727	f8		               sed
.c728	aa		               tax
.c729	a0 00		               ldy  #$00
.c72b	a9 00		               lda  #$00
.c72d	18		nextbit        clc
.c72e	69 01		               adc  #$01
.c730	90 01		               bcc  decx
.c732	c8		               iny
.c733	ca		decx           dex
.c734	d0 f7		               bne  nextbit
.c736	48		               pha
.c737	98		               tya
.c738	20 68 c6	               jsr  nib2hex
.c73b	8d 28 c6	               sta  adec
.c73e	68		               pla
.c73f	48		               pha
.c740	20 68 c6	               jsr  nib2hex
.c743	8d 2a c6	               sta  adec+2
.c746	68		               pla
.c747	6a		               ror
.c748	6a		               ror
.c749	6a		               ror
.c74a	6a		               ror
.c74b	20 68 c6	               jsr  nib2hex
.c74e	8d 29 c6	               sta  adec+1
.c751	d8		               cld
.c752	20 9d c4	               jsr  pull
.c755	60		               rts
>c756	00 00 00	buffer         .byte     0,0,0
.c759			putadec
.c759	20 5e c4	               jsr  push
.c75c	20 24 c7	               jsr  atodec
.c75f	a2 28		               ldx  #<adec
.c761	a0 c6		               ldy  #>adec+1
.c763	20 6d c3	               jsr  puts
.c766	20 9d c4	               jsr  pop
.c769	60		               rts

;******  Return to file: ch3ex11.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>c76a	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>c76e	00 00 00 00 00 00 00 00 00 0d 00 00
>c77a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>c77e	00 00 00 00 00 00 00 00 00 00 00 00
>c78a	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>c78e	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>c79a	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>c79e	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>c7aa	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>c7ae	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>c7ba	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>c7be	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>c7ca	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>c7ce	00 00 00 00 00 00 00 00 00 00 00 00
>c7da	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>c7de	00 00 00 00 00 00 00 00 00 00 00 00
>c7ea	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>c7ee	00 00 00 00 00 00 00 00 00 00 00 00
>c7fa	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>c7fe	00 00 00 00 00 00 00 00 00 00 00 00
>c80a	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>c80e	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>c81a	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>c81e	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>c82a	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>c82e	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>c83a	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>c83e	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>c84a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>c84e	00 00 00 00 00 00 00 00 00 00 00 00
>c85a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>c85e	00 00 00 00 00 00 00 00 00 00 00 00
.c86a			waitstop
.c86a	20 5e c4	               jsr  push
.c86d	20 ed f6	wait           jsr  k_stop
.c870	d0 fb		               bne  wait
.c872	20 9d c4	               jsr  pop
.c875	60		               rts
.c876			anykey
.c876	08		               php
.c877	48		               pha
.c878	a5 cb		nokey          lda 203
.c87a	c9 40		               cmp #64
.c87c	f0 fa		               beq nokey
.c87e	20 84 c8	               jsr releasekey
.c881	68		               pla
.c882	28		               plp
.c883	60		               rts
.c884			releasekey
.c884	08		               php
.c885	48		               pha
.c886	a5 cb		keypressed     lda 203
.c888	c9 40		               cmp #64
.c88a	d0 fa		               bne keypressed
.c88c	68		               pla
.c88d	28		               plp
.c88e	60		               rts
.c88f			getkey
.c88f	20 e4 ff	again          jsr  getin
.c892	c9 00		               cmp  #0
.c894	f0 f9		               beq  again
.c896	60		               rts
.c897			waitkey
.c897	20 5e c4	               jsr  push
.c89a	8d e8 c8	               sta  thekey
.c89d	20 e4 ff	nope           jsr  getin
.c8a0	20 d2 ff	               jsr  chrout
.c8a3	cd e8 c8	               cmp  thekey
.c8a6	d0 f5		               bne  nope
.c8a8	20 d2 ff	               jsr  chrout
.c8ab	20 9d c4	               jsr  pop
.c8ae	60		               rts
.c8af			waitspace
.c8af	20 5e c4	               jsr  push
.c8b2	a9 7f		wait           lda  #$7f  ;%01111111
.c8b4	8d 00 dc	               sta  $dc00
.c8b7	ad 01 dc	               lda  $dc01
.c8ba	29 10		               and  #$10  ;mask %00010000
.c8bc	d0 f4		               bne  wait
.c8be	20 9d c4	               jsr  pop
.c8c1			waitsstop
.c8c1	20 5e c4	               jsr  push
.c8c4	20 ed f6	wait           jsr  k_stop  ;%01111111
.c8c7	d0 fb		               bne  wait
.c8c9	20 9d c4	               jsr  pop
.c8cc			waitreturn
.c8cc	20 5e c4	               jsr  push
.c8cf	ad e9 c8	               lda  thecount
.c8d2	8d 00 04	               sta  scrnram
.c8d5	a9 02		               lda  #$02
.c8d7	8d 00 d8	               sta  colorram
.c8da	20 e4 ff	nope           jsr  getin
.c8dd	c9 0d		nohex          cmp  #$0d
.c8df	d0 f9		               bne  nope
.c8e1	ee e9 c8	               inc  thecount
.c8e4	20 9d c4	               jsr  pop
.c8e7	60		               rts
>c8e8	00		thekey         .byte   0
>c8e9	01		thecount       .byte   $01

;******  Return to file: ch3ex11.asm


;******  End of listing

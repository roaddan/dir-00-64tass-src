
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L rvrscharset.txt -o rvrscharset.prg rvrscharset.asm
; Thu Jun 15 23:28:06 2023

;Offset	;Hex		;Source

;******  Processing input file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: rvrscharset.asm

.080d			main
.080d	20 69 0e	               jsr  push
.0810	20 1b 0d	reload         jsr  screendis
.0813	a9 ff		               lda  #$ff           ; We reverse everything
.0815	8d 1a 0d	               sta  xor
.0818	20 c0 0c	               jsr  rom2ram        ; Copy reversed charset to ram
.081b	a9 00		               lda  #$00           ; Set char colour (i.e. Background) to black.
.081d	8d 86 02	               sta  646
.0820	8d 20 d0	               sta  vicbordcol     ; set the border to black
.0823	a9 01		               lda  #$01           ; Background (character)
.0825	8d 21 d0	               sta  vicbackcol
.0828	a9 18		               lda  #%00011000     ;#24 Points the vicII to the
.082a	8d 18 d0	               sta  $d018          ;53272 ram character set.
.082d	a9 93		               lda  #b_clr_home    ; Clear the screen
.082f	20 72 0d	               jsr  putch
.0832	a9 0e		               lda  #b_lowercase   ; Set lowercase characterset
.0834	20 72 0d	               jsr  putch
.0837	20 69 0e	                jsr push
.083a	a2 00		                ldx  #0
.083c	a0 08		                ldy  #8
.083e	20 92 0d	                jsr  gotoxy
.0841	20 a8 0e	                jsr pop
.0844	a2 bc		                ldx  #<mesg00a
.0846	a0 09		                ldy  #>mesg00a
.0848	20 78 0d	                jsr  puts
.084b	a9 0d		                lda  #$0d
.084d	20 72 0d	                jsr  putch
.0850	a2 e6		                ldx  #<mesg00b
.0852	a0 09		                ldy  #>mesg00b
.0854	20 78 0d	                jsr  puts
.0857	a9 0d		                lda  #$0d
.0859	20 72 0d	                jsr  putch
.085c	a2 bc		                ldx  #<mesg00a
.085e	a0 09		                ldy  #>mesg00a
.0860	20 78 0d	                jsr  puts
.0863	a9 0d		                lda  #$0d
.0865	20 72 0d	                jsr  putch
.0868	a2 10		                ldx  #<mesg01a
.086a	a0 0a		                ldy  #>mesg01a
.086c	20 78 0d	                jsr  puts
.086f	a9 0d		                lda  #$0d
.0871	20 72 0d	                jsr  putch
.0874	a2 3a		                ldx  #<mesg01b
.0876	a0 0a		                ldy  #>mesg01b
.0878	20 78 0d	                jsr  puts
.087b	a9 0d		                lda  #$0d
.087d	20 72 0d	                jsr  putch
.0880	a2 64		                ldx  #<mesg02a
.0882	a0 0a		                ldy  #>mesg02a
.0884	20 78 0d	                jsr  puts
.0887	a9 0d		                lda  #$0d
.0889	20 72 0d	                jsr  putch
.088c	a2 8e		                ldx  #<mesg02b
.088e	a0 0a		                ldy  #>mesg02b
.0890	20 78 0d	                jsr  puts
.0893	a9 0d		                lda  #$0d
.0895	20 72 0d	                jsr  putch
.0898	a2 b8		                ldx  #<mesg02c
.089a	a0 0a		                ldy  #>mesg02c
.089c	20 78 0d	                jsr  puts
.089f	a9 0d		                lda  #$0d
.08a1	20 72 0d	                jsr  putch
.08a4	a2 e2		                ldx  #<mesg03a
.08a6	a0 0a		                ldy  #>mesg03a
.08a8	20 78 0d	                jsr  puts
.08ab	a9 0d		                lda  #$0d
.08ad	20 72 0d	                jsr  putch
.08b0	a2 0c		                ldx  #<mesg03b
.08b2	a0 0b		                ldy  #>mesg03b
.08b4	20 78 0d	                jsr  puts
.08b7	a9 0d		                lda  #$0d
.08b9	20 72 0d	                jsr  putch
.08bc	a2 36		                ldx  #<mesg03c
.08be	a0 0b		                ldy  #>mesg03c
.08c0	20 78 0d	                jsr  puts
.08c3	a9 0d		                lda  #$0d
.08c5	20 72 0d	                jsr  putch
.08c8	a2 60		                ldx  #<mesg04a
.08ca	a0 0b		                ldy  #>mesg04a
.08cc	20 78 0d	                jsr  puts
.08cf	a2 75		                ldx  #<mesg04b
.08d1	a0 0b		                ldy  #>mesg04b
.08d3	20 78 0d	                jsr  puts
.08d6	a2 83		                ldx  #<mesg04c
.08d8	a0 0b		                ldy  #>mesg04c
.08da	20 78 0d	                jsr  puts
.08dd	a9 0d		                lda  #$0d
.08df	20 72 0d	                jsr  putch
.08e2	a2 99		                ldx  #<mesg04d
.08e4	a0 0b		                ldy  #>mesg04d
.08e6	20 78 0d	                jsr  puts
.08e9	a9 0d		                lda  #$0d
.08eb	20 72 0d	                jsr  putch
.08ee	a2 c3		                ldx  #<mesg04e
.08f0	a0 0b		                ldy  #>mesg04e
.08f2	20 78 0d	                jsr  puts
.08f5	a9 0d		                lda  #$0d
.08f7	20 72 0d	                jsr  putch
.08fa	a2 ed		                ldx  #<mesg05a
.08fc	a0 0b		                ldy  #>mesg05a
.08fe	20 78 0d	                jsr  puts
.0901	a9 0d		                lda  #$0d
.0903	20 72 0d	                jsr  putch
.0906	a2 17		                ldx  #<mesg05b
.0908	a0 0c		                ldy  #>mesg05b
.090a	20 78 0d	                jsr  puts
.090d	a9 0d		                lda  #$0d
.090f	20 72 0d	                jsr  putch
.0912	a2 bc		                ldx  #<mesg00a
.0914	a0 09		                ldy  #>mesg00a
.0916	20 78 0d	                jsr  puts
.0919	a9 13		               lda  #b_home   ; Goto home position
.091b	20 72 0d	               jsr  putch
.091e	a9 b7		               lda  #183
.0920	a2 27		               ldx  #39
.0922	20 65 0d	               jsr  putnch    ; Print Acc X times
.0925	a2 41		                ldx  #<mesg06a
.0927	a0 0c		                ldy  #>mesg06a
.0929	20 78 0d	                jsr  puts
.092c	a9 0d		                lda  #$0d
.092e	20 72 0d	                jsr  putch
.0931	a2 6c		                ldx  #<mesg06b
.0933	a0 0c		                ldy  #>mesg06b
.0935	20 78 0d	                jsr  puts
.0938	a9 0d		                lda  #$0d
.093a	20 72 0d	                jsr  putch
.093d	a2 96		                ldx  #<mesg06c
.093f	a0 0c		                ldy  #>mesg06c
.0941	20 78 0d	                jsr  puts
.0944	a9 0d		                lda  #$0d
.0946	20 72 0d	                jsr  putch
.0949	a9 af		               lda  #175
.094b	a2 27		               ldx  #39
.094d	20 65 0d	               jsr  putnch
.0950	a9 0d		               lda  #13       ; a simple LF
.0952	20 72 0d	               jsr  putch
.0955	20 28 0d	               jsr  screenena
.0958	20 e4 ff	again          jsr  getin
.095b	c9 00		               cmp  #$00
.095d	f0 f9		               beq  again
.095f	c9 85		               cmp  #b_f1
.0961	f0 2e		               beq  dof1
.0963	c9 89		               cmp  #b_f2
.0965	f0 42		               beq  dof2
.0967	c9 86		               cmp  #b_f3
.0969	f0 1c		               beq  dof3
.096b	c9 8a		               cmp  #b_f4
.096d	f0 30		               beq  dof4
.096f	c9 8c		               cmp  #b_f8
.0971	f0 0d		               beq  out
.0973	c9 88		               cmp  #b_f7
.0975	d0 03		               bne  printit
.0977	4c 10 08	               jmp  reload
.097a	20 72 0d	printit        jsr  putch
.097d	4c 58 09	               jmp  again
.0980	20 56 0d	out            jsr  cls
.0983	20 a8 0e	               jsr  pop
.0986	60		               rts
.0987	48		dof3           pha
.0988	ee ba 09	               inc  couleur
.098b	ad ba 09	               lda  couleur
.098e	4c 98 09	               jmp  doout
.0991	48		dof1           pha
.0992	ce ba 09	               dec  couleur
.0995	ad ba 09	               lda  couleur
.0998	8d 21 d0	doout          sta  $d021
.099b	68		               pla
.099c	4c 58 09	               jmp  again
.099f	48		dof4           pha
.09a0	ee bb 09	               inc  backgnd
.09a3	ad bb 09	               lda  backgnd
.09a6	4c b0 09	               jmp  goout
.09a9	48		dof2           pha
.09aa	ce bb 09	               dec  backgnd
.09ad	ad bb 09	               lda  backgnd
.09b0	8d 20 d0	goout          sta  $d020
.09b3	8d 86 02	               sta  646
.09b6	68		               pla
.09b7	4c 58 09	               jmp  again
>09ba	01		couleur        .byte     $01
>09bb	00		backgnd        .byte     $00
>09bc	9a 20 2d 2d	mesg00a        .null     b_ltblue, " ------------------------------------- ",b_black
>09c0	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09d0	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>09e0	2d 2d 2d 20 90 00
>09e6	9a 20 20 20	mesg00b        .null     b_ltblue, "      Change made by this program.     ",b_black
>09ea	20 20 20 c3 48 41 4e 47 45 20 4d 41 44 45 20 42
>09fa	59 20 54 48 49 53 20 50 52 4f 47 52 41 4d 2e 20
>0a0a	20 20 20 20 90 00
>0a10	1f 20 31 29	mesg01a        .null     b_blue,   " 1) Obviously the lowercase character  ",b_black
>0a14	20 cf 42 56 49 4f 55 53 4c 59 20 54 48 45 20 4c
>0a24	4f 57 45 52 43 41 53 45 20 43 48 41 52 41 43 54
>0a34	45 52 20 20 90 00
>0a3a	1f 20 20 20	mesg01b        .null     b_blue,   "    set is now selected.               ",b_black
>0a3e	20 53 45 54 20 49 53 20 4e 4f 57 20 53 45 4c 45
>0a4e	43 54 45 44 2e 20 20 20 20 20 20 20 20 20 20 20
>0a5e	20 20 20 20 90 00
>0a64	9c 20 32 29	mesg02a        .null     b_purple, " 2) The characterset has been modified ",b_black
>0a68	20 d4 48 45 20 43 48 41 52 41 43 54 45 52 53 45
>0a78	54 20 48 41 53 20 42 45 45 4e 20 4d 4f 44 49 46
>0a88	49 45 44 20 90 00
>0a8e	9c 20 20 20	mesg02b        .null     b_purple, "    so that the reverse characters are ",b_black
>0a92	20 53 4f 20 54 48 41 54 20 54 48 45 20 52 45 56
>0aa2	45 52 53 45 20 43 48 41 52 41 43 54 45 52 53 20
>0ab2	41 52 45 20 90 00
>0ab8	9c 20 20 20	mesg02c        .null     b_purple, "    now displayed by default.          ",b_black
>0abc	20 4e 4f 57 20 44 49 53 50 4c 41 59 45 44 20 42
>0acc	59 20 44 45 46 41 55 4c 54 2e 20 20 20 20 20 20
>0adc	20 20 20 20 90 00
>0ae2	96 20 33 29	mesg03a        .null     b_ltred,  " 3) The background colour now selects  ",b_black
>0ae6	20 d4 48 45 20 42 41 43 4b 47 52 4f 55 4e 44 20
>0af6	43 4f 4c 4f 55 52 20 4e 4f 57 20 53 45 4c 45 43
>0b06	54 53 20 20 90 00
>0b0c	96 20 20 20	mesg03b        .null     b_ltred,  "    the character colour and vice-     ",b_black
>0b10	20 54 48 45 20 43 48 41 52 41 43 54 45 52 20 43
>0b20	4f 4c 4f 55 52 20 41 4e 44 20 56 49 43 45 2d 20
>0b30	20 20 20 20 90 00
>0b36	96 20 20 20	mesg03c        .null     b_ltred,  "    versa.                             ",b_black
>0b3a	20 56 45 52 53 41 2e 20 20 20 20 20 20 20 20 20
>0b4a	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0b5a	20 20 20 20 90 00
>0b60	81 20 34 29	mesg04a        .null     b_orange, " 4) Pros: ",158,"i",28,"n",30,"d",31,"i",129
>0b64	20 d0 52 4f 53 3a 20 9e 49 1c 4e 1e 44 1f 49 81
>0b74	00
>0b75	81 56 90 49	mesg04b        .null     b_orange, "v",144,"i",149,"d",150,"u",151,"a",153,"l",155
>0b79	95 44 96 55 97 41 99 4c 9b 00
>0b83	81 20 43 48	mesg04c        .null     b_orange, " character back-   ",b_black
>0b87	41 52 41 43 54 45 52 20 42 41 43 4b 2d 20 20 20
>0b97	90 00
>0b99	81 20 20 20	mesg04d        .null     b_orange, "    ground colour is now available as  ",b_black
>0b9d	20 47 52 4f 55 4e 44 20 43 4f 4c 4f 55 52 20 49
>0bad	53 20 4e 4f 57 20 41 56 41 49 4c 41 42 4c 45 20
>0bbd	41 53 20 20 90 00
>0bc3	81 20 20 20	mesg04e        .null     b_orange, "    normal text mode.                  ",b_black
>0bc7	20 4e 4f 52 4d 41 4c 20 54 45 58 54 20 4d 4f 44
>0bd7	45 2e 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0be7	20 20 20 20 90 00
>0bed	1c 20 35 29	mesg05a        .null     b_red,    " 5) Cons: Only one character colour at ",b_black
>0bf1	20 c3 4f 4e 53 3a 20 cf 4e 4c 59 20 4f 4e 45 20
>0c01	43 48 41 52 41 43 54 45 52 20 43 4f 4c 4f 55 52
>0c11	20 41 54 20 90 00
>0c17	1c 20 20 20	mesg05b        .null     b_red,    "    the time per screen is available.  ",b_black
>0c1b	20 54 48 45 20 54 49 4d 45 20 50 45 52 20 53 43
>0c2b	52 45 45 4e 20 49 53 20 41 56 41 49 4c 41 42 4c
>0c3b	45 2e 20 20 90 00
>0c41	0d 90 20 20	mesg06a        .null  13,b_black,  "  Try changing character colour with:  ",b_black
>0c45	d4 52 59 20 43 48 41 4e 47 49 4e 47 20 43 48 41
>0c55	52 41 43 54 45 52 20 43 4f 4c 4f 55 52 20 57 49
>0c65	54 48 3a 20 20 90 00
>0c6c	90 20 c3 48	mesg06b        .null     b_black,  " Character F1=Dec <> F3=Inc, F7=Reload ",b_black
>0c70	41 52 41 43 54 45 52 20 c6 31 3d c4 45 43 20 3c
>0c80	3e 20 c6 33 3d c9 4e 43 2c 20 c6 37 3d d2 45 4c
>0c90	4f 41 44 20 90 00
>0c96	90 20 c3 48	mesg06c        .null     b_black,  " Char-Back F2=Dec <> F4=Inc, F8=Exit   ",b_black
>0c9a	41 52 2d c2 41 43 4b 20 c6 32 3d c4 45 43 20 3c
>0caa	3e 20 c6 34 3d c9 4e 43 2c 20 c6 38 3d c5 58 49
>0cba	54 20 20 20 90 00
.0cc0			rom2ram
.0cc0	20 69 0e	               jsr  push
.0cc3	ad 0e dc	               lda  $dc0e          ;56334
.0cc6	29 fe		               and  #%11111110     ;$fe ou 254
.0cc8	8d 0e dc	               sta  $dc0e          ;56334
.0ccb	a5 01		               lda  $01
.0ccd	29 fb		               and  #%11111011     ;$fb ou 251
.0ccf	85 01		               sta  $01
.0cd1	ad 16 0d	               lda  chrom_s
.0cd4	85 fb		               sta  zpage1
.0cd6	ad 17 0d	               lda  chrom_s+1
.0cd9	85 fc		               sta  zpage1+1
.0cdb	ad 18 0d	               lda  chram_s
.0cde	85 fd		               sta  zpage2
.0ce0	ad 19 0d	               lda  chram_s+1
.0ce3	85 fe		               sta  zpage2+1
.0ce5	a2 10		               ldx  #$10           ; copie 8 page de 256 char.
.0ce7	a0 00		               ldy  #$00
.0ce9	78		               sei
.0cea	ad 1a 0d	               lda  xor
.0ced	8d f3 0c	               sta  skip+1
.0cf0	b1 fb		nexty          lda  (zpage1),y
.0cf2	49 00		skip           eor  #%00000000
.0cf4	91 fd		save           sta  (zpage2),y
.0cf6	c8		               iny
.0cf7	d0 f7		               bne  nexty
.0cf9	ca		               dex
.0cfa	f0 07		               beq  out
.0cfc	e6 fc		               inc  zpage1+1
.0cfe	e6 fe		               inc  zpage2+1
.0d00	4c f0 0c	               jmp  nexty
.0d03			out
.0d03	58		               cli
.0d04	a5 01		               lda  $01
.0d06	09 04		               ora  #%00000100     ;#$04
.0d08	85 01		               sta  $01
.0d0a	ad 0e dc	               lda  $dc0e          ;56334
.0d0d	09 01		               ora  #%00000001     ;$01
.0d0f	8d 0e dc	               sta  $dc0e          ;56334
.0d12	20 a8 0e	               jsr  pop
.0d15	60		               rts
>0d16	00 d0		chrom_s        .word     $d000     ;$d000 a $d800 53284
>0d18	00 20		chram_s        .word     $2000     ;$2000 a $2800 8192
>0d1a	00		xor            .byte     $00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr        =       $00     ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map        =       $01     ;   1 6510 port used as memory map reg.
=$02			unused2         =       $02     ;   2 unused.
=$03			adray1          =       $03     ; 3-4 Vector to routine to convert a number ...
=$05			adray2          =       $05     ; 5-6 Vector to routine to convert a number ...
=$07			b_charac        =       $07     ;   7 Search character for scanning ...
=$08			b_endchr        =       $08     ;   8 Search character for scanning ...
=$09			b_trmpos        =       $09     ;   9 Cursor column position before the ...
=$0a			verck           =       $0a     ;  10 Flag: 0=Load or 1=Check
=$0b			b_count         =       $0b     ;  11 Index into the Text Input Buffer ...
=$0c			dimflg          =       $0c     ;  12 Flags for routine that locate or build array.
=$0d			valtyp          =       $0d     ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg          =       $0e     ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl          =       $0f     ;  15 Flag for list, Garbage collection, ...
=$10			subflg          =       $10     ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg          =       $11     ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn          =       $12     ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl          =       $13     ;  19 Current i/o channel # (CMD logical file).
=$14			linnum          =       $14     ;  20-21 Integer line number value.
=$16			temppt          =       $16     ;  22 Ptr to next space in temp. string stack.
=$17			lastpt          =       $17     ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab          =       $2b     ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab          =       $2d     ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab          =       $2f     ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd          =       $31     ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop          =       $33     ;  51-52 Ptr to bottom of string text area.
=$35			frespc          =       $35     ;  53-54 Temp. ptr for string.
=$37			memsiz          =       $37     ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib          =       $39     ;  57-58 Current BASIC line number.
=$3b			oldlin          =       $3b     ;  59-60 Previous BASIC line number.
=$3d			oldtxt          =       $3d     ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin          =       $3f     ;  63-64 Current DATA line number.
=$41			datptr          =       $41     ;  65-66 Current DATA item address ptr.
=$43			impptr          =       $43     ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam          =       $45     ;  69-70 Current BASIC variable name.
=$47			varpnt          =       $47     ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt          =       $49     ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr           =       $4b     ;  75-76 Math operator table displacement.
=$4d			opmask          =       $4d     ;  77 Mask for comparison operation.
=$4e			defpnt          =       $4e     ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt          =       $50     ;  80-82 Tmp ptr to current string descriptor.
=$53			four6           =       $53     ;  83 Constant of garbage collector.
=$54			jmper           =       $54     ;  84-86 Jump to function Instruction.
=$61			fac1            =       $61     ;  97-102 Floating point Accumulator #1
=$73			chrget          =       $73     ; 115
=$79			chrgot          =       $79     ; 121
=$90			kiostatus       =       $90     ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen        =       $b7     ; 183 Current filename length (byte)
=$b9			cursecadd       =       $b9     ; 185 Current secondary address (byte)
=$ba			curdevno        =       $ba     ; 186 Current device number (byte)
=$bb			curfptr         =       $bb     ; 187 Current file pointer (word)
=$c1			stal            =       $c1     ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx            =       $c5     ; 197 matrix coordinate of last key pressed
=$c6			ndx             =       $c6     ; 198 Number of character in keyboard buffer
=$fb			zpage1          =       $fb     ; 251 zero page 1 address (word)
=$fd			zpage2          =       $fd     ; 253 zero page 2 address (word)
=$fb			zeropage        =       zpage1
=$fd			zonepage        =       zpage2
=$277			kbbuff          =       $277    ; 631
=$286			carcol          =       $286    ; 646 basic next chr colscreenram (byte)
=$286			kcarcol         =       carcol
=$286			bascol          =       carcol
=$28d			shflag          =       $28d    ; 653
=$30a			ieval           =       $30a
=$314			cinv            =       $314    ; $314-$315 brk instruction interupt
=$33c			tbuffer         =       $33c    ; 828-1019 Cassette i/o buffer
=$326			ibsout          =       $326    ; 806
=$33c			tpbuff          =       $33c    ; $033c-$03fb (828-1019)
=$400			scrnram         =       $400    ; 1024 video character ram
=$400			scrram0         =       scrnram ; 1024
=$500			scrram1         =       $500    ; 1280
=$600			scrram2         =       $600    ; 1536
=$700			scrram3         =       $700    ; 1792
=$801			basicsta        =       $801    ; 2049  basic start address
=$a000			basicrom        =       $a000   ; 40960 Basic rom base address
=$d400			sid             =       $d400   ; 54272 sid base address
=$d800			colorram        =       $d800   ; 55296 video color ram
=$d800			colram0         =       colorram; 55296
=$d900			colram1         =       $d900   ; 55552
=$da00			colram2         =       $da00   ; 55808
=$db00			colram3         =       $db00   ; 56064
=$dc00			cia1            =       $dc00   ; 56320 cia1 base address
=$dc00			cia1pra         =       $dc00   ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb         =       $dc01   ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra        =       $dc02   ; 56322 cia1 data direction A
=$dc03			cia1ddrb        =       $dc03   ; 56323 cia1 data direction B
=$dc04			cia1tmalo       =       $dc04   ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi       =       $dc05   ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo       =       $dc06   ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi       =       $dc07   ; 56327 cia1 timer B high byte
=$dc08			cia1todten      =       $dc08   ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec      =       $dc09   ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin      =       $dc0a   ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs      =       $dc0b   ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr         =       $dc0c   ; 56332 cia1 serial data port
=$dc0d			cia1icr         =       $dc0d   ; 56333 cia1 Interupt control register
=$dc0e			cia1cra         =       $dc0e   ; 56334 cia1 control register A
=$dc0f			cia1crb         =       $dc0f   ; 56335 cia1 control register B
=$dd00			cia2            =       $dd00   ; 56576 cia2 base address
=$dd00			cia2pra         =       $dd00   ; 56576 cia2 dataport A
=$dd01			cia2prb         =       $dd01   ; 56577 cia2 dataport B
=$dd02			cia2ddra        =       $dd02   ; 56578 cia2 data direction A
=$dd03			cia2ddrb        =       $dd03   ; 56579 cia2 data direction B
=$dd04			cia2tmalo       =       $dd04   ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi       =       $dd05   ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo       =       $dd06   ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi       =       $dd07   ; 56583 cia2 timer B high byte
=$dd08			cia2todten      =       $dd08   ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec      =       $dd09   ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin      =       $dd0a   ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs      =       $dd0b   ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr         =       $dd0c   ; 56588 cia2 serial data port
=$dd0d			cia2icr         =       $dd0d   ; 56589 cia2 Interupt control register
=$dd0e			cia2cra         =       $dd0e   ; 56590 cia2 control register A
=$dd0f			cia2crb         =       $dd0f   ; 56501 cia2 control register B
=$e000			kernalrom       =       $e000   ; 57344 start of kernal rom
=$ea31			irq             =       $ea31   ; 59953 irq entry point
=$03			bstop           =       $03     ;  03 [STOP]
=$05			bwhite          =       $05     ;  05 [CTRL]+[2]        Set colour to WHITE
=$08			block           =       $08     ;  08 [SHIFT]+[C=]      disabled char map switch
=$09			bunlock         =       $09     ;  09 [SHIFT]+[C=]      enabled. char map switch
=$0d			bcarret         =       $0d     ;  11 [RETURN]
=$0e			btext           =       $0e     ;  14 select Uppercase+lowercase charset
=$11			bcrsdn          =       $11     ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol         =       $12     ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome           =       $13     ;  19 [HOME]            Cursor HOME
=$14			bdelete         =       $14     ;  20 [DELETE]          Delete 1 char
=$1c			bred            =       $1c     ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright        =       $1d     ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen          =       $1e     ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue           =       $1f     ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange         =       $81     ; 129 [C=]+[1]          Set colour to ORANGE
=$85			bfkey1          =       $85     ; 133 [F1]
=$86			bfkey2          =       $86     ; 134 [F2]
=$87			bfkey3          =       $87     ; 135 [F3]
=$88			bfkey4          =       $88     ; 136 [F4]
=$89			bfkey5          =       $89     ; 137 [F5]
=$8a			bfkey6          =       $8a     ; 138 [F6]
=$8b			bfkey7          =       $8b     ; 139 [F7]
=$8c			bfkey8          =       $8c     ; 140 [F8]
=$8d			bcarret1        =       $8d     ; 141 [SHIFT]+[RETURN]
=$8e			bgraph          =       $8e     ; 142 select Uppercase+graphics charset
=$90			bblack          =       $90     ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup           =       $91     ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff         =       $92     ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear          =       $93     ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert         =       $94     ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown          =       $95     ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred          =       $96     ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey         =       $97     ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey         =       $98     ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen        =       $99     ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue         =       $9a     ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey         =       $9b     ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta        =       $9c     ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft         =       $9d     ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow         =       $9e     ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan           =       $9f     ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1         =       $a0     ; 169                   space
=$e0			bspace2         =       $e0     ; 224                   space
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$e1d4			setprms = $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr   = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin   = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin   = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint    = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout   = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall   = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close   = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn  = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin   = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase  = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen  = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load    = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot  = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop  = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open    = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot    = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim   = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst  = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor  = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save    = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey  = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen  = $ffed ; jmp $e505 Return screen format
=$ff93			second  = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs  = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg  = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam  = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim  = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo  = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop    = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk    = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa    = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim   = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn   = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk   = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector  = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$f1ca			kd_chrout    =   $f1ca
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scnkey      ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.0d1b			libtart

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$a3bb			b_opentxtspc  = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem    = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg   = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart   = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrget      = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline     = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready    = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline   = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns  = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline    = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new         = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr    = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr         = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget   = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue    = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint      = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr       = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf     = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay   = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts        = b_outstr_ay
=$ab24			b_outstrprep  = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm     = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar    = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$ad8a			b_frmnum      = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr    = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma   = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar    = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar    = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr   = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$b0e7			b_fndfloatvar = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1bf			b_float2int   = $b1bf ; Float to int in Acc#1.      ;---;---;
=$b248			b_fcerr       = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float   = $b391 ; Int to float in Acc#1.      ;---;---;
=$b79e			b_getacc1lsb  = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7b5			b_str2float   = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7eb			b_getpokeprms = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr      = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b867			b_memfloatadd = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bae2			b_acc1mul10   = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bba2			b_memvar2acc1 = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbd7			b_copyacc12xy = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_acc2toacc1  = $bbfc ; Move Acc#2 to Acc#1.        ;---;---;
=$bc0c			b_rndac1ac2   = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2  = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_rndac1      = $bc1b ; Round Acc#1.                ;---;---;
=$bdcd			b_putint      = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat    = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_num2str     = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-vicii.asm

.0d1b			screendis
.0d1b	08		               php
.0d1c	48		               pha
.0d1d	ad 11 d0	               lda  $d011
.0d20	29 ef		               and  #%11101111
.0d22	8d 11 d0	               sta  $d011
.0d25	68		               pla
.0d26	28		               plp
.0d27	60		               rts
.0d28			screenena
.0d28	08		               php
.0d29	48		               pha
.0d2a	ad 11 d0	               lda  $d011
.0d2d	09 10		               ora  #%00010000
.0d2f	8d 11 d0	               sta  $d011
.0d32	68		               pla
.0d33	28		               plp
.0d34	60		               rts

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0d35			scrmaninit
.0d35	20 69 0e	               jsr  push
.0d38	a9 06		               lda  #vbleu
.0d3a	8d 21 d0	               sta  vicbackcol
.0d3d	a9 05		               lda  #vvert
.0d3f	8d 20 d0	               sta  vicbordcol
.0d42	a9 01		               lda  #vblanc
.0d44	8d 86 02	               sta  bascol
.0d47	ad 00 04	               lda  scrnram
.0d4a	29 fd		               and  #%11111101
.0d4c	8d 00 04	               sta  scrnram
.0d4f	20 56 0d	               jsr  cls
.0d52	20 a8 0e	               jsr  pop
.0d55	60		               rts
.0d56			cls
.0d56	08		               php
.0d57	48		               pha
.0d58	a9 93		               lda  #$93
.0d5a	20 72 0d	               jsr  putch
.0d5d	a9 0e		               lda  #$0e
.0d5f	20 72 0d	               jsr  putch
.0d62	68		               pla
.0d63	28		               plp
.0d64	60		               rts
.0d65			putnch
.0d65	08		               php
.0d66	e0 00		               cpx  #$00
.0d68	f0 06		               beq  out
.0d6a	20 d2 ff	again          jsr  $ffd2
.0d6d	ca		               dex
.0d6e	d0 fa		               bne  again
.0d70	28		out            plp
.0d71	60		               rts
.0d72			putch
.0d72	08		               php
.0d73	20 d2 ff	               jsr  $ffd2
.0d76	28		               plp
.0d77	60		               rts
.0d78			puts
.0d78	20 69 0e	               jsr  push
.0d7b	86 fb		               stx  zpage1
.0d7d	84 fc		               sty  zpage1+1
.0d7f	a0 00		               ldy  #0
.0d81	b1 fb		next           lda  (zpage1),y
.0d83	f0 09		               beq  exit
.0d85	20 72 0d	               jsr  putch
.0d88	20 70 0f	               jsr  inczp1
.0d8b	4c 81 0d	               jmp  next
.0d8e	20 a8 0e	exit           jsr  pop
.0d91	60		               rts
.0d92			gotoxy
.0d92	08		               php
.0d93	18		               clc
.0d94	8a		               txa
.0d95	48		               pha
.0d96	98		               tya
.0d97	aa		               tax
.0d98	68		               pla
.0d99	a8		               tay
.0d9a	20 f0 ff	               jsr  kplot
.0d9d	28		               plp
.0d9e	60		               rts
.0d9f			cursor
=$0286			bascol    =    $0286
.0d9f	08		               php
.0da0	48		               pha
.0da1	90 12		               bcc  restore
.0da3	20 f0 ff	               jsr  kplot
.0da6	8c c7 0d	               sty  cx
.0da9	8e c8 0d	               stx  cy
.0dac	ad 86 02	               lda  bascol
.0daf	8d c9 0d	               sta  bcol
.0db2	4c c4 0d	               jmp  out
.0db5	ae c8 0d	restore        ldx  cy
.0db8	ac c7 0d	               ldy  cx
.0dbb	20 f0 ff	               jsr  kplot
.0dbe	ad c9 0d	               lda  bcol
.0dc1	8d 86 02	               sta  bascol
.0dc4	68		out            pla
.0dc5	28		               plp
.0dc6	60		               rts
>0dc7	00		cx   .byte     $00
>0dc8	00		cy   .byte     $00
>0dc9	00		bcol .byte     $00
.0dca			cursave
.0dca	08		               php
.0dcb	38		               sec
.0dcc	20 9f 0d	               jsr  cursor
.0dcf	28		               plp
.0dd0	60		               rts
.0dd1			curput
.0dd1	08		               php
.0dd2	18		               clc
.0dd3	20 9f 0d	               jsr  cursor
.0dd6	28		               plp
.0dd7	60		               rts
.0dd8			putsxy
.0dd8	20 69 0e	               jsr  push
.0ddb	86 fb		               stx  zpage1
.0ddd	84 fc		               sty  zpage1+1
.0ddf	a0 00		               ldy  #$00
.0de1	b1 fb		               lda  (zpage1),y
.0de3	aa		               tax
.0de4	20 70 0f	               jsr  inczp1
.0de7	b1 fb		               lda  (zpage1),y
.0de9	a8		               tay
.0dea	20 92 0d	               jsr  gotoxy
.0ded	20 70 0f	               jsr  inczp1
.0df0	a6 fb		               ldx  zpage1
.0df2	a4 fc		               ldy  zpage1+1
.0df4	20 78 0d	               jsr  puts
.0df7	20 a8 0e	               jsr  pop
.0dfa	60		               rts
>0dfb	00 00		straddr   .word     $00
>0dfd	00		px        .byte     $00
>0dfe	00		py        .byte     $00
>0dff	00 00		zp1       .word     $00
.0e01			putscxy
.0e01	20 69 0e	               jsr  push
.0e04	84 fc		               sty  zpage1+1
.0e06	86 fb		               stx  zpage1
.0e08	ad 86 02	               lda  bascol
.0e0b	8d 2b 0e	               sta  bc
.0e0e	a0 00		               ldy #$00
.0e10	b1 fb		               lda  (zpage1),y
.0e12	8d 86 02	               sta  bascol
.0e15	20 70 0f	               jsr  inczp1
.0e18	a6 fb		               ldx  zpage1
.0e1a	a4 fc		               ldy  zpage1+1
.0e1c	20 d8 0d	               jsr  putsxy
.0e1f	ad 2b 0e	               lda  bc
.0e22	8d 86 02	               sta  bascol
.0e25	20 a8 0e	               jsr  pop
.0e28	60		               rts
>0e29	00 00		straddr  .word      $00
>0e2b	00		bc       .byte      $00
>0e2c	00 00		zp1      .word      $00
.0e2e			putrahex
.0e2e	08		               php
.0e2f	48		               pha
.0e30	20 76 10	               jsr  a2hex
.0e33	a9 22		               lda  #<a2hexstr
.0e35	a0 10		               ldy  #>a2hexstr
.0e37	20 78 0d	               jsr  puts
.0e3a	68		               pla
.0e3b	28		               plp
.0e3c	60		               rts
.0e3d			kputrahexxy
.0e3d			bputrahexxy
.0e3d			putrahexxy
.0e3d	08		               php
.0e3e	20 76 10	               jsr  a2hex
.0e41	a9 1f		               lda  #<a2hexpos
.0e43	a0 10		               ldy  #>a2hexpos
.0e45	20 d8 0d	               jsr  putsxy
.0e48	68		               pla
.0e49	28		               plp
.0e4a	60		               rts
.0e4b			putrahexcxy
.0e4b	08		               php
.0e4c	20 76 10	               jsr  a2hex
.0e4f	a9 1f		               lda  #<a2hexpos
.0e51	a0 10		               ldy  #>a2hexpos
.0e53	20 01 0e	               jsr  putscxy
.0e56	68		               pla
.0e57	28		               plp
.0e58	60		               rts
.0e59			setinverse
.0e59	48		               pha
.0e5a	a9 12		               lda  #$12
.0e5c	20 d2 ff	               jsr  $ffd2
.0e5f	68		               pla
.0e60	60		               rts
.0e61			clrinverse
.0e61	48		               pha
.0e62	a9 92		               lda  #$92
.0e64	20 d2 ff	               jsr  $ffd2
.0e67	68		               pla
.0e68	60		               rts

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0e69			push
.0e69	08		          php            ; stack : flg, pcl, pch
.0e6a	78		          sei
.0e6b	8d a5 0e	          sta  ra        ; save a
.0e6e	68		          pla            ; stack : pcl, pch
.0e6f	8d a4 0e	          sta  rp        ; save rp
.0e72	68		          pla            ; stack : pch
.0e73	8d a6 0e	          sta  pc        ; save pcl
.0e76	68		          pla            ; stack : -
.0e77	8d a7 0e	          sta  pc+1      ; save pch
.0e7a	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0e7c	48		          pha            ; stack : zp1l
.0e7d	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0e7f	48		          pha            ; stack : zp1h, zp1l
.0e80	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0e82	48		          pha            ; stack : zp2l, zp1h, zp1l
.0e83	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0e85	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0e86	ad a4 0e	          lda  rp        ; get rp
.0e89	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0e8a	ad a5 0e	          lda  ra        ; get a
.0e8d	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0e8e	8a		          txa            ; get x
.0e8f	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e90	98		          tya            ; get y
.0e91	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e92	ad a7 0e	          lda  pc+1      ; get pch
.0e95	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e96	ad a6 0e	          lda  pc        ; get pcl
.0e99	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e9a	ad a4 0e	          lda  rp        ; get rp
.0e9d	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e9e	ad a5 0e	          lda  ra        ; get a
.0ea1	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ea2	58		          cli
.0ea3	60		          rts
>0ea4	00		rp        .byte     0
>0ea5	00		ra        .byte     0
>0ea6	00 00		pc        .word     0
.0ea8			pull
.0ea8			pop
.0ea8	78		          sei
.0ea9	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eaa	8d dd 0e	          sta  pc        ; save pcl
.0ead	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eae	8d de 0e	          sta  pc+1      ; save pch
.0eb1	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eb2	a8		          tay            ; set y
.0eb3	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0eb4	aa		          tax            ; set x
.0eb5	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0eb6	8d dc 0e	          sta  ra        ; save a
.0eb9	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0eba	8d db 0e	          sta  rp        ; save rp
.0ebd	68		          pla            ; stack : zp2l, zp1h, zp1l
.0ebe	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0ec0	68		          pla            ; stack : zp1h, zp1l
.0ec1	85 fd		          sta  zpage2    ; get zpage2 High byte
.0ec3	68		          pla            ; stack : zp1l
.0ec4	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0ec6	68		          pla            ; stack :
.0ec7	85 fb		          sta  zpage1    ; get zpage1 High byte
.0ec9	ad de 0e	          lda  pc+1      ; get pch
.0ecc	48		          pha            ; stack : pch
.0ecd	ad dd 0e	          lda  pc
.0ed0	48		          pha            ; stack : pcl, pch
.0ed1	ad db 0e	          lda  rp        ; get rp
.0ed4	48		          pha            ; stack : rp, pcl, pch
.0ed5	ad dc 0e	          lda  ra        ; set ra
.0ed8	58		          cli
.0ed9	28		          plp            ; stack : pcl, pch
.0eda	60		          rts
>0edb	00		rp        .byte     0
>0edc	00		ra        .byte     0
>0edd	00 00		pc        .word     0

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0edf			blkfill
.0edf	20 69 0e	bf0            jsr  push
.0ee2	20 9d 0f	               jsr  savezp1
.0ee5	84 fc		               sty  zpage1+1
.0ee7	a0 00		               ldy  #$00
.0ee9	84 fb		               sty  zpage1
.0eeb	91 fb		bf1            sta  (zpage1),y
.0eed	c8		               iny
.0eee	d0 fb		               bne  bf1
.0ef0	20 ac 0f	               jsr  restzp1
.0ef3	20 a8 0e	               jsr  pop
.0ef6	60		               rts
.0ef7			memfill
.0ef7	20 69 0e	               jsr  push
.0efa	20 df 0e	mf1            jsr  blkfill
.0efd	c8		               iny
.0efe	ca		               dex
.0eff	d0 f9		               bne  mf1
.0f01	20 a8 0e	               jsr  pop
.0f04	60		               rts
.0f05			memmove
.0f05	20 69 0e	               jsr  push
.0f08	ba		               tsx            ; On se crée un pointeur ...
.0f09	8a		               txa
.0f0a	18		               clc
.0f0b	69 0b		               adc  #11
.0f0d	a8		               tay
.0f0e	a2 06		               ldx  #$06
.0f10	b9 00 01	nextbyte       lda  $0100,y
.0f13	99 5f 0f	               sta  words,y
.0f16	c8		               iny
.0f17	ca		               dex
.0f18	d0 f6		               bne  nextbyte
.0f1a	ad 5f 0f	               lda  s
.0f1d	8d 36 0f	               sta  source+1
.0f20	ad 60 0f	               lda  s+1
.0f23	8d 37 0f	               sta  source+2
.0f26	ad 61 0f	               lda  d
.0f29	8d 33 0f	               sta  destin+1
.0f2c	ad 62 0f	               lda  d+1
.0f2f	8d 34 0f	               sta  destin+2
.0f32	ad ff ff	destin         lda  $ffff
.0f35	8d ff ff	source         sta  $ffff
.0f38	ee 33 0f	               inc  destin+1
.0f3b	d0 03		               bne  src
.0f3d	ee 34 0f	               inc  destin+2
.0f40	ee 36 0f	src            inc  source+1
.0f43	d0 03		               bne  cnt
.0f45	ee 37 0f	               inc  source+2
.0f48	ad 63 0f	cnt            lda  compte
.0f4b	d0 08		               bne  decit
.0f4d	ad 64 0f	               lda  compte+1
.0f50	f0 09		               beq  fini
.0f52	ce 64 0f	               dec  compte+1
.0f55	ce 63 0f	decit          dec  compte
.0f58	4c 32 0f	               jmp  destin
.0f5b	20 a8 0e	fini           jsr  pop
.0f5e	60		               rts
.0f5f			words
>0f5f	00 00		s         .word     $0000
>0f61	00 00		d         .word     $0000
>0f63	00 00		compte    .word     $0000
.0f65			decword
.0f65	20 69 0e	               jsr  push
.0f68	86 fd		               stx  zpage2
.0f6a	84 fe		               sty  zpage2+1
.0f6c	20 a8 0e	               jsr  pop
.0f6f	60		               rts
.0f70			inczp1
.0f70	08		               php
.0f71	e6 fb		               inc  zpage1
.0f73	d0 02		               bne  nopage
.0f75	e6 fc		               inc  zpage1+1
.0f77	28		nopage         plp
.0f78	60		               rts
.0f79			deczp1
.0f79	08		                php
.0f7a	48		                pha
.0f7b	c6 fb		                dec  zpage1
.0f7d	d0 02		                bne  nopage
.0f7f	c6 fc		                dec  zpage1+1
.0f81	c6 fb		nopage          dec  zpage1
.0f83	68		                pla
.0f84	28		                plp
.0f85	60		                rts
.0f86			inczp2
.0f86	08		               php
.0f87	48		               pha
.0f88	e6 fd		               inc  zpage2
.0f8a	d0 02		               bne  nopage
.0f8c	e6 fe		               inc  zpage2+1
.0f8e	68		nopage         pla
.0f8f	28		               plp
.0f90	60		               rts
.0f91			deczp2
.0f91	08		               php
.0f92	48		               pha
.0f93	a5 fd		               lda  zpage2
.0f95	d0 02		               bne  nopage
.0f97	c6 fe		               dec  zpage2+1
.0f99	c6 fd		nopage         dec  zpage2
.0f9b	28		               plp
.0f9c	60		               rts
.0f9d			savezp1
.0f9d	08		               php
.0f9e	48		               pha
.0f9f	a5 fb		               lda  zpage1
.0fa1	8d 19 10	               sta  zp1
.0fa4	a5 fc		               lda  zpage1+1
.0fa6	8d 1a 10	               sta  zp1+1
.0fa9	68		               pla
.0faa	28		               plp
.0fab	60		               rts
.0fac			restzp1
.0fac	08		               php
.0fad	48		               pha
.0fae	ad 19 10	               lda zp1
.0fb1	85 fb		               sta zpage1
.0fb3	ad 1a 10	               lda zp1+1
.0fb6	85 fc		               sta zpage1+1
.0fb8	68		               pla
.0fb9	28		               plp
.0fba	60		               rts
.0fbb			savezp2
.0fbb	08		         php
.0fbc	48		         pha
.0fbd	a5 fd		         lda zpage2
.0fbf	8d 1b 10	         sta zp2
.0fc2	a5 fe		         lda zpage2+1
.0fc4	8d 1c 10	         sta zp2+1
.0fc7	68		         pla
.0fc8	28		         plp
.0fc9	60		         rts
.0fca			restzp2
.0fca	08		                php
.0fcb	48		                pha
.0fcc	ad 1b 10	                lda  zp2
.0fcf	85 fd		                sta  zpage2
.0fd1	ad 1c 10	                lda  zp2+1
.0fd4	85 fe		                sta  zpage2+1
.0fd6	68		                pla
.0fd7	28		                plp
.0fd8	60		                rts
.0fd9			xy2addr
.0fd9	08		                php
.0fda	48		                pha
.0fdb	8a		                txa
.0fdc	48		                pha
.0fdd	98		                tya
.0fde	48		                pha
.0fdf	ad 14 10	                lda     addr1+1
.0fe2	8d 16 10	                sta     addr2+1
.0fe5	ad 13 10	                lda     addr1
.0fe8	8d 15 10	                sta     addr2
.0feb	c0 00		                cpy     #$00
.0fed	f0 0f		                beq     addx
.0fef	18		moreline        clc
.0ff0	6d 12 10	                adc     ymult
.0ff3	90 03		                bcc     norepy
.0ff5	ee 16 10	                inc     addr2+1
.0ff8	8d 15 10	norepy          sta     addr2
.0ffb	88		                dey
.0ffc	d0 f1		                bne     moreline
.0ffe	8a		addx            txa
.0fff	18		                clc
.1000	6d 15 10	                adc     addr2
.1003	90 03		                bcc     thatsit
.1005	ee 16 10	                inc     addr2+1
.1008	8d 15 10	thatsit         sta     addr2
.100b	68		                pla
.100c	a8		                tay
.100d	68		                pla
.100e	aa		                tax
.100f	68		                pla
.1010	28		                plp
.1011	60		                rts
>1012	28		ymult          .byte     40
>1013	00 00		addr1          .word     $0000
>1015	00 00		addr2          .word     $0000
>1017	00 00		bytecnt        .word     $0000
>1019	00 00		zp1        .word   $0000
>101b	00 00		zp2        .word   $0000

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>101d	01		a2hexcol       .byte     1              ; pour aputscxy
>101e	00		a2hexbkcol     .byte     %00000000
.101f			a2hexpos
>101f	00		a2hexpx        .byte     0              ; pour aputsxy
>1020	00		a2hexpy        .byte     0
>1021	24		a2hexprefix    .byte     "$"            ; pour aputs
>1022	00 00		a2hexstr       .word     $00
>1024	00 00		               .word     $00
>1026	00		               .byte     0              ; 0 end string
.1027			putahexfmtxy
.1027	20 69 0e	               jsr  push
.102a	20 76 10	               jsr  a2hex
.102d	ae 1f 10	               ldx  a2hexpx
.1030	ac 20 10	               ldy  a2hexpy
.1033	20 92 0d	               jsr  gotoxy
.1036	a2 21		               ldx  #<a2hexprefix
.1038	a0 10		               ldy  #>a2hexprefix
.103a	20 78 0d	               jsr  puts
.103d	20 a8 0e	               jsr  pop
.1040	60		               rts
.1041			putahexfmt
.1041	20 69 0e	               jsr  push
.1044	20 76 10	               jsr  a2hex
.1047	a2 21		               ldx  #<a2hexprefix
.1049	a0 10		               ldy  #>a2hexprefix
.104b	20 78 0d	               jsr  puts
.104e	20 a8 0e	               jsr  pop
.1051	60		               rts
.1052			putahex
.1052	20 69 0e	               jsr  push
.1055	20 76 10	               jsr  a2hex
.1058	a2 22		               ldx  #<a2hexstr
.105a	a0 10		               ldy  #>a2hexstr
.105c	20 78 0d	               jsr  puts
.105f	20 a8 0e	               jsr  pop
.1062	60		               rts
.1063			nib2hex
.1063	08		               php
.1064	29 0f		               and  #$0f
.1066	f8		               sed
.1067	18		               clc
.1068	69 90		               adc  #$90
.106a	69 40		               adc  #$40
.106c	d8		               cld
.106d	28		               plp
.106e	60		               rts
.106f			lsra4bits
.106f	08		               php
.1070	4a		               lsr
.1071	4a		               lsr
.1072	4a		               lsr
.1073	4a		               lsr
.1074	28		               plp
.1075	60		               rts
.1076			a2hex
.1076	08		               php
.1077	48		               pha
.1078	48		               pha
.1079	20 6f 10	               jsr  lsra4bits
.107c	20 63 10	               jsr  nib2hex
.107f	8d 22 10	               sta  a2hexstr
.1082	68		               pla
.1083	20 63 10	               jsr  nib2hex
.1086	8d 23 10	               sta  a2hexstr+1
.1089	a9 00		               lda  #$00                ; set end of string
.108b	8d 24 10	               sta  a2hexstr+2
.108e	68		               pla
.108f	28		               plp
.1090	60		               rts
.1091			xy2hex
.1091	20 69 0e	               jsr  push
.1094	20 76 10	               jsr  a2hex
.1097	8a		               txa
.1098	48		               pha
.1099	20 6f 10	               jsr  lsra4bits
.109c	20 63 10	               jsr  nib2hex
.109f	8d 22 10	               sta  a2hexstr
.10a2	68		               pla
.10a3	20 63 10	               jsr  nib2hex
.10a6	8d 23 10	               sta  a2hexstr+1
.10a9	98		               tya
.10aa	48		               pha
.10ab	20 6f 10	               jsr  lsra4bits
.10ae	20 63 10	               jsr  nib2hex
.10b1	8d 24 10	               sta  a2hexstr+2
.10b4	68		               pla
.10b5	20 63 10	               jsr  nib2hex
.10b8	8d 25 10	               sta  a2hexstr+3
.10bb	a9 00		               lda  #$00                ; 0 ended string
.10bd	8d 26 10	               sta  a2hexstr+4
.10c0	20 a8 0e	               jsr  pop
.10c3			atobin
.10c3	20 69 0e	               jsr     push
.10c6	a2 08		               ldx     #8
.10c8	a0 00		               ldy     #0
.10ca	2a		nextbit        rol
.10cb	48		               pha
.10cc	69 00		               adc     #$00
.10ce	29 01		               and     #$01
.10d0	20 63 10	               jsr     nib2hex
.10d3	99 e4 10	               sta     abin,y
.10d6	68		               pla
.10d7	c8		               iny
.10d8	ca		               dex
.10d9	d0 ef		               bne     nextbit
.10db	a9 00		               lda     #0
.10dd	99 e4 10	               sta     abin,y
.10e0	20 a8 0e	               jsr     pull
.10e3	60		               rts
>10e4	30 30 30 30	abin           .null   "00000000"
>10e8	30 30 30 30 00
.10ed			putabin
.10ed	20 c3 10	               jsr     atobin
.10f0	20 69 0e	               jsr     push
.10f3	a2 e4		               ldx     #<abin
.10f5	a0 10		               ldy     #>abin
.10f7	20 78 0d	               jsr     puts
.10fa	20 a8 0e	               jsr     pop
.10fd	60		               rts
.10fe			putabinfmt
.10fe	08		               php
.10ff	48		               pha
.1100	a9 25		               lda     #"%"
.1102	20 72 0d	               jsr     putch
.1105	68		               pla
.1106	20 ed 10	               jsr     putabin
.1109	28		               plp
.110a	60		               rts
.110b			putabinxy
.110b	20 92 0d	               jsr     gotoxy
.110e	20 ed 10	               jsr     putabin
.1111	60		               rts
.1112			putabinfmtxy
.1112	20 92 0d	               jsr     gotoxy
.1115	20 fe 10	               jsr     putabinfmt
.1118	60		               rts

;******  Return to file: rvrscharset.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-disk.asm

.1119			diskerror
.1119	20 69 0e	               jsr  push
.111c	ad 4a 12	               lda  dsk_dev   ; Select device 8
.111f	85 ba		               sta  $ba       ;
.1121	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.1124	a9 6f		               lda  #$6f
.1126	85 b9		               sta  $b9       ;
.1128	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.112b	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.112e	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.1131	c9 0d		               cmp  #$0d      ; Is it CR ?
.1133	d0 f6		               bne  nextchar  ; No, get next char
.1135	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.1138	20 a8 0e	               jsr  pop
.113b	60		               rts
.113c			diskdir
.113c	20 69 0e	               jsr  push
.113f	a9 24		               lda  #$24      ; L012C - Filename is "$"
.1141	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.1143	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.1145	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.1147	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.1149	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.114b	a9 01		               lda  #$01      ; L0138 - set ...
.114d	85 b7		               sta  $b7       ; L013A - ... length of current filename
.114f	ad 4a 12	               lda  dsk_dev   ; L013C - set 8 as ...
.1152	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.1154	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.1156	85 b9		               sta  $b9       ; L0142 - ... secondary address
.1158	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.115b	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.115d	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.1160	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.1162	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.1165	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.1167	85 90		               sta  $90       ; L0153 - ... kernal status word.
.1169	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.116b	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.116d	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.1170	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.1172	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.1174	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.1176	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.1179	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.117b	d0 28		               bne  exit      ; L0167
.117d	a4 fb		               ldy  $fb       ; L0169
.117f	88		               dey            ; L016b
.1180	d0 e9		               bne  loop1     ; L016C - If not last, loop
.1182	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.1184	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.1187	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.1189	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.118c	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.118f	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.1191	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.1193	aa		               tax            ; L017F - tfr a in x
.1194	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.1196	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.1199	4c 8c 11	               jmp  loop3     ; L0185 - get another byte
.119c	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.119e	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.11a1	a0 02		               ldy  #$02      ; L018D - set Y to 2
.11a3	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.11a5	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.11a8	20 a8 0e	               jsr  pop
.11ab	60		               rts            ; L0194
.11ac			directory
.11ac	20 3c 11	               jsr  diskdir
.11af	20 19 11	               jsr  diskerror
.11b2	60		               rts
.11b3			memtofile
.11b3	20 24 12	               jsr  dsk_putmesg
.11b6	20 69 0e	               jsr  push
.11b9	ad 4e 12	               lda  dsk_fnlen
.11bc	ae 4c 12	               ldx  dsk_fnptr      ; load fname addr. lbyte
.11bf	ac 4d 12	               ldy  dsk_fnptr+1
.11c2	20 bd ff	               jsr  setnam         ; call setnam
.11c5	ad 4b 12	               lda  dsk_lfsno
.11c8	ae 4a 12	               ldx  dsk_dev        ; specified device
.11cb	a0 00		skip           ldy  #$00
.11cd	20 ba ff	               jsr  setlfs         ; call setlfs
.11d0	ad 46 12	               lda  dsk_data_s     ; put data start lbyte in stal
.11d3	85 c1		               sta  stal
.11d5	ad 47 12	               lda  dsk_data_s+1   ; put data start hbyte in stal
.11d8	85 c2		               sta  stal+1
.11da	ae 48 12	               ldx  dsk_data_e     ; put data end lbyte in x
.11dd	ac 49 12	               ldy  dsk_data_e+1   ; put data end hbyte in y
.11e0	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.11e2	20 d8 ff	               jsr  save           ; call save
.11e5	90 00		               bcc  noerror        ; if carry set, a load error has happened
.11e7	20 a8 0e	noerror        jsr  pop
.11ea	60		               rts
.11eb			filetomem
.11eb	20 69 0e	               jsr push
.11ee	ad 4e 12	               lda dsk_fnlen
.11f1	ae 4c 12	               ldx dsk_fnptr
.11f4	ac 4d 12	               ldy dsk_fnptr+1
.11f7	20 bd ff	               jsr setnam     ; call setnam
.11fa	ad 4b 12	               lda dsk_lfsno
.11fd	ae 4a 12	               ldx dsk_dev    ; default to device 8
.1200	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.1202	20 ba ff	               jsr setlfs     ; call setlfs
.1205	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.1207	20 d5 ff	               jsr load       ; call load
.120a	90 03		               bcc noerror      ; if carry set, a load error has happened
.120c	20 13 12	               jsr  error
.120f	20 a8 0e	noerror        jsr pop
.1212	60		               rts
.1213			error
.1213	60		               rts
.1214	a2 5f		error1         ldx  #<dsk_emsg1
.1216	a0 12		               ldy  #>dsk_emsg1
.1218	20 78 0d	               jsr  puts
.121b	60		               rts
.121c	a2 73		error2         ldx #<dsk_emsg2
.121e	a0 12		               ldy #>dsk_emsg2
.1220	20 78 0d	               jsr puts
.1223	60		               rts
.1224			dsk_putmesg
.1224	20 69 0e	               jsr push
.1227	a2 4f		               ldx #<dsk_msg0
.1229	a0 12		               ldy #>dsk_msg0
.122b	20 78 0d	               jsr puts
.122e	a9 20		               lda #$20
.1230	20 72 0d	               jsr putch
.1233	ae 4c 12	               ldx dsk_fnptr
.1236	ac 4d 12	               ldy dsk_fnptr+1
.1239	20 78 0d	               jsr puts
.123c	ad 4b 12	               lda dsk_lfsno
.123f	20 c3 ff	               jsr close
.1242	20 a8 0e	               jsr pop
.1245	60		               rts
>1246	00 00		dsk_data_s     .word     $0000    ; example addresses
>1248	00 20		dsk_data_e     .word     $2000
>124a	08		dsk_dev        .byte     $08
>124b	00		dsk_lfsno      .byte     $00
>124c	00 00		dsk_fnptr      .word     $00
>124e	00		dsk_fnlen      .byte     0
>124f	8d		dsk_msg0       .byte     141
>1250	53 41 56 49	               .null     "saving"
>1254	4e 47 00
>1257	8d		dsk_msg1       .byte     141
>1258	53 55 43 43	               .null     "succes"
>125c	45 53 00
>125f	8d		dsk_emsg1      .byte     141
>1260	46 49 43 48	               .null     "fichier non ouvert"
>1264	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>1273	11		dsk_emsg2      .byte     17
>1274	45 52 52 45	               .null     "erreur d'ecriture"
>1278	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: rvrscharset.asm


;******  End of listing

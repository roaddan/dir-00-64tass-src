
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L libtest03.txt -o libtest03.prg libtest03.asm
; Tue Apr 22 14:09:43 2025

;Offset	;Hex		;Source

;******  Processing input file: libtest03.asm

="20250421-232831"	                Version = "20250421-232831"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: libtest03.asm

.0854			main
.0854	20 5b c2	               jsr scrmaninit
.0857	08		               php
.0858	48		               pha
.0859	a9 8e		               lda  #b_uppercase
.085b	8d 7a c2	               sta  characterset
.085e	20 d2 ff	               jsr  $ffd2
.0861	68		               pla
.0862	28		               plp
.0863	08		               php
.0864	48		               pha
.0865	a9 8e		               lda  #b_uppercase
.0867	20 d2 ff	               jsr  $ffd2
.086a	68		               pla
.086b	28		               plp
.086c	08		               php
.086d	48		               pha
.086e	a9 08		               lda  #$08
.0870	20 d2 ff	               jsr  $ffd2
.0873	68		               pla
.0874	28		               plp
.0875	20 d0 c5	               jsr  push
.0878	48		               pha
.0879	a9 05		               lda  #cvert
.087b	8d 20 d0	               sta  $d020
.087e	68		               pla
.087f	48		               pha
.0880	a9 06		               lda  #cbleu
.0882	8d 21 d0	               sta  $d021
.0885	68		               pla
.0886	48		               pha
.0887	a9 01		               lda  #cblanc
.0889	8d 86 02	               sta  bascol
.088c	68		               pla
.088d	20 0b c6	               jsr  pull
.0890	20 7e c0	               jsr  libtest03
.0893	20 48 ca	               jsr  anykey
.0896	08		               php
.0897	48		               pha
.0898	a9 09		               lda  #$09
.089a	20 d2 ff	               jsr  $ffd2
.089d	68		               pla
.089e	28		               plp
.089f	08		               php
.08a0	48		               pha
.08a1	a9 8e		               lda  #b_uppercase
.08a3	8d 7a c2	               sta  characterset
.08a6	20 d2 ff	               jsr  $ffd2
.08a9	68		               pla
.08aa	28		               plp
.08ab	20 d0 c5	               jsr  push
.08ae	48		               pha
.08af	a9 05		               lda  #cvert
.08b1	8d 20 d0	               sta  $d020
.08b4	68		               pla
.08b5	48		               pha
.08b6	a9 06		               lda  #cbleu
.08b8	8d 21 d0	               sta  $d021
.08bb	68		               pla
.08bc	48		               pha
.08bd	a9 01		               lda  #cblanc
.08bf	8d 86 02	               sta  bascol
.08c2	68		               pla
.08c3	20 0b c6	               jsr  pull
.08c6	60		               rts
.c000			aide
.c000	08		               php
.c001	48		               pha
.c002	a9 0e		               lda  #14
.c004	8d 7a c2	               sta  characterset
.c007	20 d2 ff	               jsr  $ffd2
.c00a	68		               pla
.c00b	28		               plp
.c00c	20 7b c2	               jsr cls
.c00f	20 d0 c5	               jsr  push
.c012	a2 26		               ldx  #<line
.c014	a0 c2		               ldy  #>line
.c016	20 98 c2	               jsr  puts
.c019	20 0b c6	               jsr  pull
.c01c	20 d0 c5	               jsr  push
.c01f	a2 ca		               ldx  #<headera
.c021	a0 c0		               ldy  #>headera
.c023	20 98 c2	               jsr  puts
.c026	20 0b c6	               jsr  pull
.c029	20 d0 c5	               jsr  push
.c02c	a2 f1		               ldx  #<headerb
.c02e	a0 c0		               ldy  #>headerb
.c030	20 98 c2	               jsr  puts
.c033	20 0b c6	               jsr  pull
.c036	20 d0 c5	               jsr  push
.c039	a2 26		               ldx  #<line
.c03b	a0 c2		               ldy  #>line
.c03d	20 98 c2	               jsr  puts
.c040	20 0b c6	               jsr  pull
.c043	20 d0 c5	               jsr  push
.c046	a2 26		               ldx  #<line
.c048	a0 c2		               ldy  #>line
.c04a	20 98 c2	               jsr  puts
.c04d	20 0b c6	               jsr  pull
.c050	20 d0 c5	               jsr  push
.c053	a2 4c		               ldx  #<shortcuts
.c055	a0 c1		               ldy  #>shortcuts
.c057	20 98 c2	               jsr  puts
.c05a	20 0b c6	               jsr  pull
.c05d	20 d0 c5	               jsr  push
.c060	a2 d2		               ldx  #<aidetext
.c062	a0 c1		               ldy  #>aidetext
.c064	20 98 c2	               jsr  puts
.c067	20 0b c6	               jsr  pull
.c06a	20 d0 c5	               jsr  push
.c06d	a2 26		               ldx  #<line
.c06f	a0 c2		               ldy  #>line
.c071	20 98 c2	               jsr  puts
.c074	20 0b c6	               jsr  pull
.c077	20 48 ca	               jsr  anykey
.c07a	20 7b c2	               jsr  cls
.c07d	60		               rts
.c07e			libtest03
.c07e	20 d0 c5	               jsr  push
.c081			nexta
.c081	20 d0 c5	               jsr  push
.c084	a2 4f		               ldx  #<dataloc
.c086	a0 c2		               ldy  #>dataloc
.c088	20 21 c3	               jsr  putscxy
.c08b	20 0b c6	               jsr  pull
.c08e	48		               pha
.c08f	a9 03		               lda  #ccyan
.c091	8d 86 02	               sta  bascol
.c094	68		               pla
.c095			again
.c095	08		               php
.c096	ae fe ff	               ldx  $fffe		; Load lsb od address in X.
.c099	ad ff ff	               lda  $fffe+1		; Load msb od address in A.
.c09c	28		               plp
.c09d	20 c8 ca	               jsr  showregs
.c0a0	20 d0 c5	               jsr  push
.c0a3	a2 00		               ldx  #0
.c0a5	a0 00		               ldy  #0
.c0a7	20 b2 c2	               jsr  gotoxy
.c0aa	20 0b c6	               jsr  pop
.c0ad	20 ad c3	               jsr  b_praxstr
.c0b0	20 17 c4	               jsr  b_readmemfloat
.c0b3	20 d0 c5	               jsr  push
.c0b6	a2 00		               ldx  #0
.c0b8	a0 01		               ldy  #1
.c0ba	20 b2 c2	               jsr  gotoxy
.c0bd	20 0b c6	               jsr  pop
.c0c0	20 a0 c4	               jsr  b_outsub
.c0c3	20 0b c6	out            jsr  pop
.c0c6	60		               rts
>c0c7	a6		car            .byte     166
>c0c8	3a 30		valeur         .word     12346

;******  Processing file: strings_fr.asm

.c0ca			headera
>c0ca	13 1d 1d 1d	               .byte     b_home,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right
>c0ce	1d
>c0cf	20 c3 4f 4d	               .text              " Commodore 64 test de libraries "
>c0d3	4d 4f 44 4f 52 45 20 36 34 20 54 45 53 54 20 44
>c0e3	45 20 4c 49 42 52 41 52 49 45 53 20
>c0ef	0d 00		               .byte     $0d,0
>c0f1	20 20 20 20	headerb        .text          "               libtest03 "
>c0f5	20 20 20 20 20 20 20 20 20 20 20 4c 49 42 54 45
>c105	53 54 30 33 20
>c10a	0d		               .byte     $0d
>c10b	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>c10f	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>c11f	45 4c 20 cc 41 46 52 41 4e 43 45
>c12a	0d		               .byte     $0d
>c12b	20 20 20 20	               .text   format("       Version: %s",Version)
>c12f	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>c13f	30 34 32 31 2d 32 33 32 38 33 31
>c14a	0d 00		               .byte     $0d,0
>c14c	0d		shortcuts      .byte     $0d
>c14d	91 91		               .byte     ucurkey,ucurkey
>c14f	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>c153	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>c157	1d
>c158	20 d2 20 c1	               .text          " R A C C O U R C I S "
>c15c	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>c16c	20
>c16d	0d		               .byte     $0d
>c16e	20 4c 49 42	               .text   format(" libtest03: SYS%05d (jsr $%04X)",main, main)
>c172	54 45 53 54 30 33 3a 20 d3 d9 d3 30 32 31 33 32
>c182	20 28 4a 53 52 20 24 30 38 35 34 29
>c18e	0d		               .byte     $0d
>c18f	20 41 49 44	               .text   format(" aide.....: SYS%05d (jsr $%04X)",aide, aide)
>c193	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34 39 31 35 32
>c1a3	20 28 4a 53 52 20 24 c3 30 30 30 29
>c1af	0d		               .byte     $0d
>c1b0	20 43 4c 53	               .text   format(" cls......: SYS%05d (jsr $%04X)",cls, cls)
>c1b4	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34 39 37 38 37
>c1c4	20 28 4a 53 52 20 24 c3 32 37 c2 29
>c1d0	0d 00		               .byte     $0d,0
>c1d2	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d (jsr $%04X)",libtest03, libtest03)
>c1d6	43 45 4d 45 4e 54 3a 20 d3 d9 d3 34 39 32 37 38
>c1e6	20 28 4a 53 52 20 24 c3 30 37 c5 29
>c1f2	0d 0d		               .byte     $0d, $0d
>c1f4	20 20 20 20	                .text   format("    ex.: SYS%05d",libtest03)
>c1f8	45 58 2e 3a 20 d3 d9 d3 34 39 32 37 38
>c205	0d		                .byte     $0d
>c206	20 20 20 20	                .text   format("    for i=0to100:SYS%05d:next",libtest03)
>c20a	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>c21a	34 39 32 37 38 3a 4e 45 58 54
>c224	0d 00		                .byte     $0d,0
>c226	20 c0 c0 c0	line            .byte     $20,192,192,192,192,192,192,192,192,192
>c22a	c0 c0 c0 c0 c0 c0
>c230	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>c234	c0 c0 c0 c0 c0 c0
>c23a	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>c23e	c0 c0 c0 c0 c0 c0
>c244	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192
>c248	c0 c0 c0 c0 c0
>c24d	0d 00		                .byte     $0d,0
>c24f	01 00 00 00	dataloc         .byte       1,0,0,0

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>c253	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>c257	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.c25b			libtart

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.c25b			scrmaninit
.c25b	20 d0 c5	               jsr  push
.c25e	a9 06		               lda  #vbleu
.c260	8d 21 d0	               sta  vicbackcol
.c263	a9 05		               lda  #vvert
.c265	8d 20 d0	               sta  vicbordcol
.c268	a9 01		               lda  #vblanc
.c26a	8d 86 02	               sta  bascol
.c26d	ad 00 04	               lda  scrnram
.c270	8d 00 04	               sta  scrnram
.c273	20 7b c2	               jsr  cls
.c276	20 0b c6	               jsr  pop
.c279	60		               rts
>c27a	8e		characterset   .byte b_uppercase
.c27b			cls
.c27b	08		               php
.c27c	48		               pha
.c27d	a9 93		               lda  #$93
.c27f	20 92 c2	               jsr  putch
.c282	68		               pla
.c283	28		               plp
.c284	60		               rts
.c285			putnch
.c285	08		               php
.c286	e0 00		               cpx  #$00
.c288	f0 06		               beq  out
.c28a	20 d2 ff	again          jsr  $ffd2
.c28d	ca		               dex
.c28e	d0 fa		               bne  again
.c290	28		out            plp
.c291	60		               rts
.c292			putch
.c292	08		               php
.c293	20 d2 ff	               jsr  $ffd2
.c296	28		               plp
.c297	60		               rts
.c298			puts
.c298	20 d0 c5	               jsr  push
.c29b	86 fb		               stx  zpage1
.c29d	84 fc		               sty  zpage1+1
.c29f	a0 00		               ldy  #0
.c2a1	b1 fb		next           lda  (zpage1),y
.c2a3	f0 09		               beq  exit
.c2a5	20 92 c2	               jsr  putch
.c2a8	20 25 c7	               jsr  inczp1
.c2ab	4c a1 c2	               jmp  next
.c2ae	20 0b c6	exit           jsr  pop
.c2b1	60		               rts
.c2b2			gotoxy
.c2b2	08		               php
.c2b3	18		               clc
.c2b4	8a		               txa
.c2b5	48		               pha
.c2b6	98		               tya
.c2b7	aa		               tax
.c2b8	68		               pla
.c2b9	a8		               tay
.c2ba	20 f0 ff	               jsr  kplot
.c2bd	28		               plp
.c2be	60		               rts
.c2bf			cursor
=$0286			bascol    =    $0286
.c2bf	08		               php            ;tourlou
.c2c0	48		               pha
.c2c1	90 12		               bcc  restore
.c2c3	20 f0 ff	               jsr  kplot
.c2c6	8c e7 c2	               sty  cx
.c2c9	8e e8 c2	               stx  cy
.c2cc	ad 86 02	               lda  bascol
.c2cf	8d e9 c2	               sta  bcol
.c2d2	4c e4 c2	               jmp  out
.c2d5	ae e8 c2	restore        ldx  cy
.c2d8	ac e7 c2	               ldy  cx
.c2db	20 f0 ff	               jsr  kplot
.c2de	ad e9 c2	               lda  bcol
.c2e1	8d 86 02	               sta  bascol
.c2e4	68		out            pla
.c2e5	28		               plp
.c2e6	60		               rts
>c2e7	00		cx   .byte     $00
>c2e8	00		cy   .byte     $00
>c2e9	00		bcol .byte     $00
.c2ea			cursave
.c2ea	08		               php
.c2eb	38		               sec
.c2ec	20 bf c2	               jsr  cursor
.c2ef	28		               plp
.c2f0	60		               rts
.c2f1			curput
.c2f1	08		               php
.c2f2	18		               clc
.c2f3	20 bf c2	               jsr  cursor
.c2f6	28		               plp
.c2f7	60		               rts
.c2f8			putsxy
.c2f8	20 d0 c5	               jsr  push
.c2fb	86 fb		               stx  zpage1
.c2fd	84 fc		               sty  zpage1+1
.c2ff	a0 00		               ldy  #$00
.c301	b1 fb		               lda  (zpage1),y
.c303	aa		               tax
.c304	20 25 c7	               jsr  inczp1
.c307	b1 fb		               lda  (zpage1),y
.c309	a8		               tay
.c30a	20 b2 c2	               jsr  gotoxy
.c30d	20 25 c7	               jsr  inczp1
.c310	a6 fb		               ldx  zpage1
.c312	a4 fc		               ldy  zpage1+1
.c314	20 98 c2	               jsr  puts
.c317	20 0b c6	               jsr  pop
.c31a	60		               rts
>c31b	00 00		straddr   .word     $00
>c31d	00		px        .byte     $00
>c31e	00		py        .byte     $00
>c31f	00 00		zp1       .word     $00
.c321			putscxy
.c321	20 d0 c5	               jsr  push
.c324	84 fc		               sty  zpage1+1
.c326	86 fb		               stx  zpage1
.c328	ad 86 02	               lda  bascol
.c32b	8d 4b c3	               sta  bc
.c32e	a0 00		               ldy #$00
.c330	b1 fb		               lda  (zpage1),y
.c332	8d 86 02	               sta  bascol
.c335	20 25 c7	               jsr  inczp1
.c338	a6 fb		               ldx  zpage1
.c33a	a4 fc		               ldy  zpage1+1
.c33c	20 f8 c2	               jsr  putsxy
.c33f	ad 4b c3	               lda  bc
.c342	8d 86 02	               sta  bascol
.c345	20 0b c6	               jsr  pop
.c348	60		               rts
>c349	00 00		straddr  .word      $00
>c34b	00		bc       .byte      $00
>c34c	00 00		zp1      .word      $00
.c34e			putrahex
.c34e	08		               php
.c34f	48		               pha
.c350	20 50 c8	               jsr  atohex
.c353	a9 ef		               lda  #<a2hexstr
.c355	a0 c7		               ldy  #>a2hexstr
.c357	20 98 c2	               jsr  puts
.c35a	68		               pla
.c35b	28		               plp
.c35c	60		               rts
.c35d			kputrahexxy
.c35d			bputrahexxy
.c35d			putrahexxy
.c35d	08		               php
.c35e	20 50 c8	               jsr  atohex
.c361	a9 ec		               lda  #<a2hexpos
.c363	a0 c7		               ldy  #>a2hexpos
.c365	20 f8 c2	               jsr  putsxy
.c368	68		               pla
.c369	28		               plp
.c36a	60		               rts
.c36b			putrahexcxy
.c36b	08		               php
.c36c	20 50 c8	               jsr  atohex
.c36f	a9 ec		               lda  #<a2hexpos
.c371	a0 c7		               ldy  #>a2hexpos
.c373	20 21 c3	               jsr  putscxy
.c376	68		               pla
.c377	28		               plp
.c378	60		               rts
.c379			setinverse
.c379	48		               pha
.c37a	a9 12		               lda  #$12
.c37c	20 d2 ff	               jsr  $ffd2
.c37f	68		               pla
.c380	60		               rts
.c381			clrinverse
.c381	48		               pha
.c382	a9 92		               lda  #$92
.c384	20 d2 ff	               jsr  $ffd2
.c387	68		               pla
.c388	60		               rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2-math.asm

.c389			b_math_template
.c389	20 3e c6				jsr	pushreg
.c38c	20 6d c6				jsr	popreg
.c38f	60					rts
>c390	00		b_bufflenght	.byte	$00
>c391	00 10 00 10	b_num1		.word	$1000,$1000,$1001
>c395	01 10
>c397	00 00 00 00	b_num2		.word	$0000,$0000,$0000
>c39b	00 00
>c39d	00 00 00 00	b_multresult	.word 	$0000,$0000,$0000
>c3a1	00 00
>c3a3	36 2e 32 38	b_testnum		.null	"6.28e-23 "
>c3a7	45 2d 32 33 20 00
.c3ad			b_praxstr
.c3ad	20 3e c6				jsr	pushreg
.c3b0	20 cd bd				jsr	b_axout
.c3b3	20 6d c6				jsr	popreg
.c3b6	60					rts
.c3b7			b_getascnum
.c3b7	20 3e c6				jsr	pushreg
.c3ba	20 bf e3				jsr	b_intcgt		; Initialyse charget
.c3bd	20 d7 c3				jsr	b_clearbuff	; Clear basic input buffer
.c3c0	20 f9 ab				jsr	b_prompt		; Prompt for ? and fill buffer by reading...
.c3c3	86 7a					stx	$7a			; X and Y points to $01ff on return.
.c3c5	84 7b					sty	$7b
.c3c7	20 73 00				jsr	b_chrget
.c3ca	20 f3 bc				jsr	b_ascflt		; Convert ASCII string at 0200 to FAC1 FP.
.c3cd	20 dd bd				jsr	b_facasc		; Converts FAC1 to ASCII string at 100.
.c3d0	20 8d c4				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.c3d3	20 6d c6				jsr	popreg
.c3d6	60					rts
.c3d7			b_clearbuff
.c3d7	20 3e c6				jsr	pushreg
.c3da	a9 00					lda	#$00
.c3dc	a0 59					ldy	#$59
.c3de	99 00 02	clear		sta	$0200,y		; Clear Basic input buffer
.c3e1	88					dey
.c3e2	d0 fa					bne	clear		; 60 bytes.
.c3e4	20 6d c6				jsr	popreg
.c3e7	60					rts
.c3e8			b_printbuff
.c3e8	20 3e c6				jsr	pushreg
.c3eb	a9 00					lda	#$00			; Set $22 to point to string at 100
.c3ed	85 22					sta	$22
.c3ef	a9 01					lda	#$01
.c3f1	85 23					sta	$23
.c3f3	ad 90 c3				lda	b_bufflenght
.c3f6	20 24 ab				jsr	b_strout
.c3f9	20 6d c6				jsr	popreg
.c3fc	60					rts
.c3fd			b_insub
.c3fd	20 3e c6				jsr	pushreg
.c400	20 bf e3				jsr	b_intcgt	; Initialize CHRGET.
.c403	20 d7 c3				jsr	b_clearbuff
.c406	20 f9 ab				jsr	b_prompt
.c409	86 7a					stx	$7a
.c40b	84 7b					sty	$7b
.c40d	20 73 00				jsr	b_chrget
.c410	20 f3 bc				jsr	b_ascflt	; Convert ascii string to floating point in FAC1.
.c413	20 6d c6				jsr	popreg
.c416	60					rts
.c417			b_readmemfloat
.c417	20 3e c6				jsr	pushreg
.c41a	20 bf e3				jsr	b_intcgt	; Initialize CHRGET.
.c41d	a5 7a					lda	$7a
.c41f	8d 53 c4				sta	b_v7a
.c422	a5 7b					lda	$7b
.c424	8d 54 c4				sta	b_v7b
.c427	a2 a2					ldx	#<(b_testnum-1)  ;#$83		; Set pointer to fvar as location for var minus 1
.c429	a0 c3					ldy	#>(b_testnum-1)  ; #$c5
.c42b	86 7a					stx	$7a
.c42d	84 7b					sty	$7b
.c42f	20 73 00				jsr	b_chrget
.c432	20 f3 bc				jsr	b_ascflt	  ; Convert ascii string to floating point in FAC1.
.c435	a2 91					ldx	#<(b_num1)  ;
.c437	a0 c3					ldy	#>(b_num1)  ;
.c439	20 d4 bb				jsr	b_f1tmem
.c43c	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.c43f	20 8d c4				jsr	b_getbufflen
.c442	ad 53 c4				lda	b_v7a
.c445	85 7a					sta	$7a
.c447	ad 54 c4				lda	b_v7b
.c44a	85 7b					sta	$7b
.c44c	20 d7 c3				jsr	b_clearbuff
.c44f	20 6d c6				jsr	popreg
.c452	60					rts
>c453	00		b_v7a		.byte	$00
>c454	00		b_v7b		.byte	$00
.c455			b_mul2fptomem
.c455	20 3e c6				jsr	pushreg
.c458	20 fd c3				jsr	b_insub		; Input first number.
.c45b	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057.
.c45e	20 fd c3				jsr	b_insub		; Input second number.
.c461	a9 57					lda	#$57
.c463	a0 00					ldy	#$00			; Point to 1st number.
.c465	20 28 ba				jsr	b_f1xfv		; FAC1 = FAC1 X FVAR.
.c468	a2 9d					ldx	#<b_multresult	; Set pointer to area to copy result to.
.c46a	a0 c3					ldy	#>b_multresult
.c46c	20 d4 bb				jsr	b_f1tmem		; Copy FAC1 to memory.
.c46f	20 6d c6				jsr	popreg
.c472	60					rts
.c473			b_mul2fptoasc
.c473	20 3e c6				jsr	pushreg
.c476	20 fd c3				jsr	b_insub		; Get first number.
.c479	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057.
.c47c	20 fd c3				jsr	b_insub	;	 Get second number.
.c47f	a9 57					lda	#$57
.c481	a0 00					ldy	#$00			; Set pointer to FVAR.
.c483	20 28 ba				jsr	b_f1xfv		; FAC1 = FAC1 x FVAR.
.c486	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.c489	20 6d c6				jsr	popreg
.c48c	60					rts
.c48d			b_getbufflen
.c48d	20 3e c6				jsr	pushreg
.c490	a0 ff					ldy	#$ff
.c492	c8		nxtchar		iny				; Determine lenght of string by ...
.c493	b9 00 01				lda	$0100,y		; ... searching for $00 EOS byte.
.c496	d0 fa					bne	nxtchar
.c498	c8					iny
.c499	8c 90 c3				sty	b_bufflenght	; Store buffer lenght in common variable.
.c49c	20 6d c6				jsr	popreg
.c49f	60					rts
.c4a0			b_outsub
.c4a0	20 3e c6				jsr	pushreg
.c4a3	20 8d c4				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.c4a6	20 e8 c3				jsr	b_printbuff	; Print buffer content on output device.
.c4a9	20 d7 c3				jsr	b_clearbuff
.c4ac	20 6d c6				jsr	popreg
.c4af	60					rts
.c4b0			b_fac1x10
.c4b0	20 3e c6				jsr	pushreg
.c4b3	20 fd c3				jsr	b_insub
.c4b6	20 e2 ba				jsr	b_f1x10	; FAC1 = FAC1 X 10
.c4b9	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.c4bc	20 6d c6				jsr	popreg
.c4bf	60					rts
.c4c0			b_fac1d10
.c4c0	20 3e c6				jsr	pushreg
.c4c3	20 fd c3				jsr	b_insub		; Get first number.
.c4c6	20 2b bc				jsr	b_sgnf1
.c4c9	48					pha
.c4ca	20 fe ba				jsr	b_f1d10		; FAC1 = FAC1 / 10
.c4cd	68					pla
.c4ce	aa					tax
.c4cf	e8					inx
.c4d0	d0 04					bne	notneg
.c4d2	a9 80					lda	#$80		; On force le bit de signe ...
.c4d4	85 66					sta	$66		; de FAC1 a 1 (neg)
.c4d6	20 dd bd	notneg		jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.c4d9	20 6d c6				jsr	popreg
.c4dc	60					rts
.c4dd			b_fac1square
.c4dd	20 3e c6				jsr	pushreg
.c4e0	20 fd c3				jsr	b_insub		; Get first number.
.c4e3	20 0c bc				jsr	b_f1tf2		; Copy FAC1 to FAC2.
.c4e6	a5 61					lda	$61			; get exponent of FAC1
.c4e8	20 2b ba				jsr	b_f1xf2		; FAC1 = FAC1 X FAC2
.c4eb	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.c4ee	20 6d c6				jsr	popreg
.c4f1	60					rts
.c4f2			b_fvardfac1
.c4f2	20 3e c6				jsr	pushreg
.c4f5	20 fd c3				jsr	b_insub		; Get first number.
.c4f8	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.c4fb	20 fd c3				jsr	b_insub		; Get second number.
.c4fe	a9 57					lda	#$57
.c500	a0 00					ldy	#$00
.c502	20 0f bb				jsr	b_fvdf1		; FAC1 = FVAR / FAC1
.c505	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.c508	20 6d c6				jsr	popreg
.c50b	60					rts
.c50c			b_fac2dfac1
.c50c	20 3e c6				jsr	pushreg
.c50f	20 fd c3				jsr	b_insub		; Get first number.
.c512	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.c515	20 fd c3				jsr	b_insub		; Get second number.
.c518	a9 57					lda	#$57
.c51a	a0 00					ldy	#$00
.c51c	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.c51f	a5 61					lda	$61			; get exponent of FAC1
.c521	20 12 bb				jsr	b_f2df1		; FAC1 = FAC2 / FAC1
.c524	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.c527	20 6d c6				jsr	popreg
.c52a	60					rts
.c52b			b_fac1pfvar
.c52b	20 3e c6				jsr	pushreg
.c52e	20 fd c3				jsr	b_insub		; Get first number.
.c531	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.c534	20 fd c3				jsr	b_insub		; Get second number.
.c537	a9 57					lda	#$57
.c539	a0 00					ldy	#$00
.c53b	20 67 b8				jsr	b_f1pfv		; FAC1 = FAC1 + FVAR
.c53e	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.c541	20 6d c6				jsr	popreg
.c544	60					rts
.c545			b_fac2sfac1
.c545	20 3e c6				jsr	pushreg
.c548	20 fd c3				jsr	b_insub		; Get first number.
.c54b	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.c54e	20 fd c3				jsr	b_insub		; Get second number.
.c551	a9 57					lda	#$57
.c553	a0 00					ldy	#$00
.c555	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.c558	20 53 b8				jsr	b_f2sf1		; FAC1 = FAC2 + FAC1
.c55b	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.c55e	20 6d c6				jsr	popreg
.c561	60					rts
.c562			b_fvarsfac1
.c562	20 3e c6				jsr	pushreg
.c565	20 fd c3				jsr	b_insub		; Get first number.
.c568	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.c56b	20 fd c3				jsr	b_insub		; Get second number.
.c56e	a9 57					lda	#$57
.c570	a0 00					ldy	#$00
.c572	20 50 b8				jsr	b_fvsf1		; FAC1 = FVAR + FAC1
.c575	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.c578	20 6d c6				jsr	popreg
.c57b	60					rts
.c57c			b_accpfac1
.c57c	20 3e c6				jsr	pushreg
.c57f	48					pha
.c580	20 fd c3				jsr	b_insub		; Get first number.
.c583	68					pla
.c584	20 7e bd				jsr	b_f1pacc
.c587	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.c58a	20 6d c6				jsr	popreg
.c58d	60					rts
.c58e			b_fac2pfac1
.c58e	20 3e c6				jsr	pushreg
.c591	20 fd c3				jsr	b_insub		; Get first number.
.c594	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.c597	20 fd c3				jsr	b_insub		; Get second number.
.c59a	a9 57					lda	#$57
.c59c	a0 00					ldy	#$00
.c59e	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.c5a1	a5 61					lda	$61			; get exponent of FAC1
.c5a3	20 6a b8				jsr	b_f1pf2
.c5a6	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.c5a9	20 6d c6				jsr	popreg
.c5ac	60					rts
.c5ad			b_fac1powfac2
.c5ad	20 3e c6				jsr	pushreg
.c5b0	20 fd c3				jsr	b_insub		; Get first number.
.c5b3	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.c5b6	20 fd c3				jsr	b_insub		; Get second number.
.c5b9	a9 57					lda	#$57
.c5bb	a0 00					ldy	#$00
.c5bd	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.c5c0	a5 61					lda	$61			; get exponent of FAC1
.c5c2	20 7b bf				jsr	b_expon
.c5c5	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.c5c8	20 6d c6				jsr	popreg
.c5cb	60					rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>c5cc	00		rp        .byte     0
>c5cd	00		ra        .byte     0
>c5ce	00 00		pc        .word     0
.c5d0			pushall
.c5d0			push
.c5d0	08		          php            ; stack : flg, pcl, pch
.c5d1	78		          sei
.c5d2	8d cd c5	          sta  ra        ; save a
.c5d5	68		          pla            ; stack : pcl, pch
.c5d6	8d cc c5	          sta  rp        ; save rp
.c5d9	68		          pla            ; stack : pch
.c5da	8d ce c5	          sta  pc        ; save pcl
.c5dd	68		          pla            ; stack : -
.c5de	8d cf c5	          sta  pc+1      ; save pch
.c5e1	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c5e3	48		          pha            ; stack : zp1l
.c5e4	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c5e6	48		          pha            ; stack : zp1h, zp1l
.c5e7	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c5e9	48		          pha            ; stack : zp2l, zp1h, zp1l
.c5ea	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c5ec	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c5ed	ad cc c5	          lda  rp        ; get rp
.c5f0	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c5f1	ad cd c5	          lda  ra        ; get a
.c5f4	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c5f5	8a		          txa            ; get x
.c5f6	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c5f7	98		          tya            ; get y
.c5f8	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c5f9	ad cf c5	          lda  pc+1      ; get pch
.c5fc	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c5fd	ad ce c5	          lda  pc        ; get pcl
.c600	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c601	ad cc c5	          lda  rp        ; get rp
.c604	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c605	ad cd c5	          lda  ra        ; get a
.c608	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c609	58		          cli
.c60a	60		          rts
.c60b			pullall
.c60b			pull
.c60b			popall
.c60b			pop
.c60b	78		          sei
.c60c	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c60d	8d ce c5	          sta  pc        ; save pcl
.c610	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c611	8d cf c5	          sta  pc+1      ; save pch
.c614	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c615	a8		          tay            ; set y
.c616	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c617	aa		          tax            ; set x
.c618	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c619	8d cd c5	          sta  ra        ; save a
.c61c	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c61d	8d cc c5	          sta  rp        ; save rp
.c620	68		          pla            ; stack : zp2l, zp1h, zp1l
.c621	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c623	68		          pla            ; stack : zp1h, zp1l
.c624	85 fd		          sta  zpage2    ; get zpage2 High byte
.c626	68		          pla            ; stack : zp1l
.c627	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c629	68		          pla            ; stack :
.c62a	85 fb		          sta  zpage1    ; get zpage1 High byte
.c62c	ad cf c5	          lda  pc+1      ; get pch
.c62f	48		          pha            ; stack : pch
.c630	ad ce c5	          lda  pc
.c633	48		          pha            ; stack : pcl, pch
.c634	ad cc c5	          lda  rp        ; get rp
.c637	48		          pha            ; stack : rp, pcl, pch
.c638	ad cd c5	          lda  ra        ; set ra
.c63b	58		          cli
.c63c	28		          plp            ; stack : pcl, pch
.c63d	60		          rts
.c63e			pushreg
.c63e	08		          php            ; stack : flg, pcl, pch
.c63f	78		          sei
.c640	8d cd c5	          sta  ra        ; save a
.c643	68		          pla            ; stack : pcl, pch
.c644	8d cc c5	          sta  rp        ; save rp
.c647	68		          pla            ; stack : pch
.c648	8d ce c5	          sta  pc        ; save pcl
.c64b	68		          pla            ; stack : -
.c64c	8d cf c5	          sta  pc+1      ; save pch
.c64f	ad cc c5	          lda  rp        ; get rp
.c652	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c653	ad cd c5	          lda  ra        ; get a
.c656	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c657	8a		          txa            ; get x
.c658	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c659	98		          tya            ; get y
.c65a	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c65b	ad cf c5	          lda  pc+1      ; get pch
.c65e	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c65f	ad ce c5	          lda  pc        ; get pcl
.c662	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c663	ad cc c5	          lda  rp        ; get rp
.c666	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c667	ad cd c5	          lda  ra        ; get a
.c66a	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c66b	58		          cli
.c66c	60		          rts
.c66d			pullreg
.c66d			popreg
.c66d	78		          sei
.c66e	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c66f	8d ce c5	          sta  pc        ; save pcl
.c672	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c673	8d cf c5	          sta  pc+1      ; save pch
.c676	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c677	a8		          tay            ; set y
.c678	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c679	aa		          tax            ; set x
.c67a	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c67b	8d cd c5	          sta  ra        ; save a
.c67e	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c67f	8d cc c5	          sta  rp        ; save rp
.c682	ad cf c5	          lda  pc+1      ; get pch
.c685	48		          pha            ; stack : pch
.c686	ad ce c5	          lda  pc
.c689	48		          pha            ; stack : pcl, pch
.c68a	ad cc c5	          lda  rp        ; get rp
.c68d	48		          pha            ; stack : rp, pcl, pch
.c68e	ad cd c5	          lda  ra        ; set ra
.c691	58		          cli
.c692	28		          plp            ; stack : pcl, pch
.c693	60		          rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c694			blkfill
.c694	20 d0 c5	bf0            jsr  push
.c697	20 53 c7	               jsr  savezp1
.c69a	84 fc		               sty  zpage1+1
.c69c	a0 00		               ldy  #$00
.c69e	84 fb		               sty  zpage1
.c6a0	91 fb		bf1            sta  (zpage1),y
.c6a2	c8		               iny
.c6a3	d0 fb		               bne  bf1
.c6a5	20 62 c7	               jsr  restzp1
.c6a8	20 0b c6	               jsr  pop
.c6ab	60		               rts
.c6ac			memfill
.c6ac	20 d0 c5	               jsr  push
.c6af	20 94 c6	mf1            jsr  blkfill
.c6b2	c8		               iny
.c6b3	ca		               dex
.c6b4	d0 f9		               bne  mf1
.c6b6	20 0b c6	               jsr  pop
.c6b9	60		               rts
.c6ba			memmove
.c6ba	20 d0 c5	               jsr  push
.c6bd	ba		               tsx            ; On se crée un pointeur ...
.c6be	8a		               txa
.c6bf	18		               clc
.c6c0	69 0b		               adc  #11
.c6c2	a8		               tay
.c6c3	a2 06		               ldx  #$06
.c6c5	b9 00 01	nextbyte       lda  $0100,y
.c6c8	99 14 c7	               sta  words,y
.c6cb	c8		               iny
.c6cc	ca		               dex
.c6cd	d0 f6		               bne  nextbyte
.c6cf	ad 14 c7	               lda  s
.c6d2	8d eb c6	               sta  source+1
.c6d5	ad 15 c7	               lda  s+1
.c6d8	8d ec c6	               sta  source+2
.c6db	ad 16 c7	               lda  d
.c6de	8d e8 c6	               sta  destin+1
.c6e1	ad 17 c7	               lda  d+1
.c6e4	8d e9 c6	               sta  destin+2
.c6e7	ad ff ff	destin         lda  $ffff
.c6ea	8d ff ff	source         sta  $ffff
.c6ed	ee e8 c6	               inc  destin+1
.c6f0	d0 03		               bne  src
.c6f2	ee e9 c6	               inc  destin+2
.c6f5	ee eb c6	src            inc  source+1
.c6f8	d0 03		               bne  cnt
.c6fa	ee ec c6	               inc  source+2
.c6fd	ad 18 c7	cnt            lda  compte
.c700	d0 08		               bne  decit
.c702	ad 19 c7	               lda  compte+1
.c705	f0 09		               beq  fini
.c707	ce 19 c7	               dec  compte+1
.c70a	ce 18 c7	decit          dec  compte
.c70d	4c e7 c6	               jmp  destin
.c710	20 0b c6	fini           jsr  pop
.c713	60		               rts
.c714			words
>c714	00 00		s         .word     $0000
>c716	00 00		d         .word     $0000
>c718	00 00		compte    .word     $0000
.c71a			decword
.c71a	20 d0 c5	               jsr  push
.c71d	86 fd		               stx  zpage2
.c71f	84 fe		               sty  zpage2+1
.c721	20 0b c6	               jsr  pop
.c724	60		               rts
.c725			inczpage1
.c725			inczp1
.c725	08		               php
.c726	48		               pha
.c727	e6 fb		               inc  zpage1
.c729	a5 fb		               lda  zpage1
.c72b	d0 02		               bne  nopage
.c72d	e6 fc		               inc  zpage1+1
.c72f	68		nopage         pla
.c730	28		               plp
.c731	60		               rts
.c732			deczpage1
.c732			deczp1
.c732	08		                php
.c733	48		                pha
.c734	c6 fb		                dec  zpage1
.c736	d0 02		                bne  nopage
.c738	c6 fc		                dec  zpage1+1
.c73a	68		nopage          pla
.c73b	28		                plp
.c73c	60		                rts
.c73d			inczpage2
.c73d			inczp2
.c73d	08		               php
.c73e	48		               pha
.c73f	e6 fd		               inc  zpage2
.c741	a5 fd		               lda  zpage2
.c743	d0 02		               bne  nopage
.c745	e6 fe		               inc  zpage2+1
.c747	68		nopage         pla
.c748	28		               plp
.c749	60		               rts
.c74a			deczpage2
.c74a			deczp2
.c74a	08		               php
.c74b	c6 fd		               dec  zpage2
.c74d	d0 02		               bne  nopage
.c74f	c6 fe		               dec  zpage2+1
.c751	28		nopage         plp
.c752	60		               rts
.c753			savezp1
.c753	08		               php
.c754	48		               pha
.c755	a5 fb		               lda  zpage1
.c757	8d e4 c7	               sta  zp1
.c75a	a5 fc		               lda  zpage1+1
.c75c	8d e5 c7	               sta  zp1+1
.c75f	68		               pla
.c760	28		               plp
.c761	60		               rts
.c762			restzp1
.c762	08		               php
.c763	48		               pha
.c764	ad e4 c7	               lda zp1
.c767	85 fb		               sta zpage1
.c769	ad e5 c7	               lda zp1+1
.c76c	85 fc		               sta zpage1+1
.c76e	68		               pla
.c76f	28		               plp
.c770	60		               rts
.c771			savezp2
.c771	08		         php
.c772	48		         pha
.c773	a5 fd		         lda zpage2
.c775	8d e6 c7	         sta zp2
.c778	a5 fe		         lda zpage2+1
.c77a	8d e7 c7	         sta zp2+1
.c77d	68		         pla
.c77e	28		         plp
.c77f	60		         rts
.c780			restzp2
.c780	08		                php
.c781	48		                pha
.c782	ad e6 c7	                lda  zp2
.c785	85 fd		                sta  zpage2
.c787	ad e7 c7	                lda  zp2+1
.c78a	85 fe		                sta  zpage2+1
.c78c	68		                pla
.c78d	28		                plp
.c78e	60		                rts
.c78f			xy2addr
.c78f	08		                php
.c790	48		                pha
.c791	8a		                txa
.c792	48		                pha
.c793	98		                tya
.c794	48		                pha
.c795	ad df c7	                lda     addr1+1
.c798	8d e1 c7	                sta     addr2+1
.c79b	ad de c7	                lda     addr1
.c79e	8d e0 c7	                sta     addr2
.c7a1	c0 00		                cpy     #$00
.c7a3	f0 0f		                beq     addx
.c7a5	18		moreline        clc
.c7a6	6d dd c7	                adc     ymult
.c7a9	90 03		                bcc     norepy
.c7ab	ee e1 c7	                inc     addr2+1
.c7ae	8d e0 c7	norepy          sta     addr2
.c7b1	88		                dey
.c7b2	d0 f1		                bne     moreline
.c7b4	8a		addx            txa
.c7b5	18		                clc
.c7b6	6d e0 c7	                adc     addr2
.c7b9	90 03		                bcc     thatsit
.c7bb	ee e1 c7	                inc     addr2+1
.c7be	8d e0 c7	thatsit         sta     addr2
.c7c1	68		                pla
.c7c2	a8		                tay
.c7c3	68		                pla
.c7c4	aa		                tax
.c7c5	68		                pla
.c7c6	28		                plp
.c7c7	60		                rts
.c7c8			loop
.c7c8	ce e8 c7	               dec  loopcount
.c7cb	d0 03		               bne  norep
.c7cd	ce e9 c7	               dec  loopcount+1
.c7d0	ad e8 c7	norep          lda  loopcount
.c7d3	c9 00		               cmp  #$00
.c7d5	d0 05		               bne  out
.c7d7	4d e9 c7	               eor  loopcount+1
.c7da	c9 ff		               cmp  #$ff
.c7dc	60		out            rts
>c7dd	28		ymult          .byte     40
>c7de	00 00		addr1          .word     $0000
>c7e0	00 00		addr2          .word     $0000
>c7e2	00 00		bytecnt        .word     $0000
>c7e4	00 00		zp1            .word   $0000
>c7e6	00 00		zp2            .word   $0000
>c7e8	00 00		loopcount      .word     $0000

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c7ea	01		a2hexcol       .byte     1              ; pour aputscxy
>c7eb	00		a2hexbkcol     .byte     %00000000
.c7ec			a2hexpos
>c7ec	00		a2hexpx        .byte     0              ; pour aputsxy
>c7ed	00		a2hexpy        .byte     0
>c7ee	24		a2hexprefix    .byte     "$"            ; pour aputs
>c7ef	00 00		a2hexstr       .word     $00
>c7f1	00 00		               .word     $00
>c7f3	00		               .byte     0              ; 0 end string
>c7f4	30 30 30 30	abin           .null     "00000000"
>c7f8	30 30 30 30 00
>c7fd	20 20 20 00	adec           .null     "   "
.c801			putahexfmtxy
.c801	20 d0 c5	               jsr  push
.c804	20 50 c8	               jsr  atohex
.c807	ae ec c7	               ldx  a2hexpx
.c80a	ac ed c7	               ldy  a2hexpy
.c80d	20 b2 c2	               jsr  gotoxy
.c810	a2 ee		               ldx  #<a2hexprefix
.c812	a0 c7		               ldy  #>a2hexprefix
.c814	20 98 c2	               jsr  puts
.c817	20 0b c6	               jsr  pop
.c81a	60		               rts
.c81b			putahexfmt
.c81b	20 d0 c5	               jsr  push
.c81e	20 50 c8	               jsr  atohex
.c821	a2 ee		               ldx  #<a2hexprefix
.c823	a0 c7		               ldy  #>a2hexprefix
.c825	20 98 c2	               jsr  puts
.c828	20 0b c6	               jsr  pop
.c82b	60		               rts
.c82c			putahex
.c82c	20 d0 c5	               jsr  push
.c82f	20 50 c8	               jsr  atohex
.c832	a2 ef		               ldx  #<a2hexstr
.c834	a0 c7		               ldy  #>a2hexstr
.c836	20 98 c2	               jsr  puts
.c839	20 0b c6	               jsr  pop
.c83c	60		               rts
.c83d			nibtohex
.c83d	08		               php
.c83e	29 0f		               and  #$0f
.c840	f8		               sed
.c841	18		               clc
.c842	69 90		               adc  #$90
.c844	69 40		               adc  #$40
.c846	d8		               cld
.c847	28		               plp
.c848	60		               rts
.c849			lsra4bits
.c849	08		               php
.c84a	4a		               lsr
.c84b	4a		               lsr
.c84c	4a		               lsr
.c84d	4a		               lsr
.c84e	28		               plp
.c84f	60		               rts
.c850			atohex
.c850	08		               php
.c851	48		               pha
.c852	48		               pha
.c853	20 49 c8	               jsr  lsra4bits
.c856	20 3d c8	               jsr  nibtohex
.c859	8d ef c7	               sta  a2hexstr
.c85c	68		               pla
.c85d	20 3d c8	               jsr  nibtohex
.c860	8d f0 c7	               sta  a2hexstr+1
.c863	a9 00		               lda  #$00                ; set end of string
.c865	8d f1 c7	               sta  a2hexstr+2
.c868	68		               pla
.c869	28		               plp
.c86a	60		               rts
.c86b			xy2hex
.c86b	20 d0 c5	               jsr  push
.c86e	20 50 c8	               jsr  atohex
.c871	8a		               txa
.c872	48		               pha
.c873	20 49 c8	               jsr  lsra4bits
.c876	20 3d c8	               jsr  nibtohex
.c879	8d ef c7	               sta  a2hexstr
.c87c	68		               pla
.c87d	20 3d c8	               jsr  nibtohex
.c880	8d f0 c7	               sta  a2hexstr+1
.c883	98		               tya
.c884	48		               pha
.c885	20 49 c8	               jsr  lsra4bits
.c888	20 3d c8	               jsr  nibtohex
.c88b	8d f1 c7	               sta  a2hexstr+2
.c88e	68		               pla
.c88f	20 3d c8	               jsr  nibtohex
.c892	8d f2 c7	               sta  a2hexstr+3
.c895	a9 00		               lda  #$00                ; 0 ended string
.c897	8d f3 c7	               sta  a2hexstr+4
.c89a	20 0b c6	               jsr  pop
.c89d			atobin
.c89d	20 d0 c5	               jsr  push
.c8a0	a2 08		               ldx  #8
.c8a2	a0 00		               ldy  #0
.c8a4	18		               clc
.c8a5	2a		nextbit        rol
.c8a6	48		               pha
.c8a7	69 00		               adc  #$00
.c8a9	29 01		               and  #$01
.c8ab	20 3d c8	               jsr  nibtohex
.c8ae	99 f4 c7	               sta  abin,y
.c8b1	68		               pla
.c8b2	c8		               iny
.c8b3	ca		               dex
.c8b4	d0 ef		               bne  nextbit
.c8b6	a9 00		               lda  #0
.c8b8	99 f4 c7	               sta  abin,y
.c8bb	20 0b c6	               jsr  pull
.c8be	60		               rts
.c8bf			putabin
.c8bf	20 9d c8	               jsr     atobin
.c8c2	20 d0 c5	               jsr     push
.c8c5	a2 f4		               ldx     #<abin
.c8c7	a0 c7		               ldy     #>abin
.c8c9	20 98 c2	               jsr     puts
.c8cc	20 0b c6	               jsr     pop
.c8cf	60		               rts
.c8d0			printabin
.c8d0	20 d0 c5	               jsr     push
.c8d3	a2 f4		               ldx     #<abin
.c8d5	a0 c7		               ldy     #>abin
.c8d7	20 98 c2	               jsr     puts
.c8da	20 0b c6	               jsr     pop
.c8dd	60		               rts
.c8de			putabinfmt
.c8de	08		               php
.c8df	48		               pha
.c8e0	a9 25		               lda     #"%"
.c8e2	20 92 c2	               jsr     putch
.c8e5	68		               pla
.c8e6	20 bf c8	               jsr     putabin
.c8e9	28		               plp
.c8ea	60		               rts
.c8eb			putabinxy
.c8eb	20 b2 c2	               jsr     gotoxy
.c8ee	20 bf c8	               jsr     putabin
.c8f1	60		               rts
.c8f2			putabinfmtxy
.c8f2	20 b2 c2	               jsr     gotoxy
.c8f5	20 de c8	               jsr     putabinfmt
.c8f8	60		               rts
.c8f9			atodec
.c8f9	20 d0 c5	               jsr  push
.c8fc	f8		               sed            ; On se place en mode décimal.
.c8fd	aa		               tax            ; On déplace a dans x.
.c8fe	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.c900	a9 00		               lda  #$00      ; 0 dans A.
.c902	18		nextbit        clc            ; Bit carry a 0.
.c903	69 01		               adc  #$01      ; Ajoute 1 a A.
.c905	90 01		               bcc  decx      ; Pas de carry, pas de report.
.c907	c8		               iny            ; On incrémente Y
.c908	ca		decx           dex            ; X=X-1
.c909	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.c90b	48		               pha            ; A sur le stack.
.c90c	98		               tya            ; Y dans A (MSB)
.c90d	20 3d c8	               jsr  nibtohex  ; a hex petsci ...
.c910	8d fd c7	               sta  adec      ; ... dans tampon.
.c913	68		               pla            ; Récupere A
.c914	48		               pha            ;
.c915	20 3d c8	               jsr  nibtohex
.c918	8d ff c7	               sta  adec+2
.c91b	68		               pla
.c91c	6a		               ror
.c91d	6a		               ror
.c91e	6a		               ror
.c91f	6a		               ror
.c920	20 3d c8	               jsr  nibtohex
.c923	8d fe c7	               sta  adec+1
.c926	d8		               cld            ; On revient en mode binaire.
.c927	20 0b c6	               jsr  pull
.c92a	60		               rts
.c92b			putadec
.c92b	20 d0 c5	               jsr  push
.c92e	20 f9 c8	               jsr  atodec
.c931	a2 fd		               ldx  #<adec
.c933	a0 c7		               ldy  #>adec+1
.c935	20 98 c2	               jsr  puts
.c938	20 0b c6	               jsr  pop
.c93b	60		               rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>c93c	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>c940	00 00 00 00 00 00 00 00 00 0d 00 00
>c94c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>c950	00 00 00 00 00 00 00 00 00 00 00 00
>c95c	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>c960	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>c96c	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>c970	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>c97c	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>c980	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>c98c	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>c990	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>c99c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>c9a0	00 00 00 00 00 00 00 00 00 00 00 00
>c9ac	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>c9b0	00 00 00 00 00 00 00 00 00 00 00 00
>c9bc	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>c9c0	00 00 00 00 00 00 00 00 00 00 00 00
>c9cc	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>c9d0	00 00 00 00 00 00 00 00 00 00 00 00
>c9dc	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>c9e0	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>c9ec	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>c9f0	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>c9fc	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>ca00	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>ca0c	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>ca10	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>ca1c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>ca20	00 00 00 00 00 00 00 00 00 00 00 00
>ca2c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>ca30	00 00 00 00 00 00 00 00 00 00 00 00
.ca3c			waitstop
.ca3c	20 d0 c5	               jsr  push
.ca3f	20 ed f6	wait           jsr  k_stop
.ca42	d0 fb		               bne  wait
.ca44	20 0b c6	               jsr  pop
.ca47	60		               rts
.ca48			anykey
.ca48	08		               php
.ca49	48		               pha
.ca4a	a5 cb		nokey          lda 203
.ca4c	c9 40		               cmp #64
.ca4e	f0 fa		               beq nokey
.ca50	20 56 ca	               jsr releasekey
.ca53	68		               pla
.ca54	28		               plp
.ca55	60		               rts
.ca56			releasekey
.ca56	08		               php
.ca57	48		               pha
.ca58	a5 cb		keypressed     lda 203
.ca5a	c9 40		               cmp #64
.ca5c	d0 fa		               bne keypressed
.ca5e	68		               pla
.ca5f	28		               plp
.ca60	60		               rts
.ca61			getkey
.ca61	20 e4 ff	again          jsr  getin
.ca64	c9 00		               cmp  #0
.ca66	f0 f9		               beq  again
.ca68	60		               rts
.ca69			kbflushbuff
.ca69	08		               php
.ca6a	48		               pha
.ca6b	20 e4 ff	again          jsr  getin
.ca6e	c9 00		               cmp  #0
.ca70	d0 f9		               bne  again
.ca72	68		               pla
.ca73	28		               plp
.ca74	60		               rts
.ca75			waitkey
.ca75	20 d0 c5	               jsr  push
.ca78	8d c6 ca	               sta  thekey
.ca7b	20 e4 ff	nope           jsr  getin
.ca7e	20 d2 ff	               jsr  chrout
.ca81	cd c6 ca	               cmp  thekey
.ca84	d0 f5		               bne  nope
.ca86	20 d2 ff	               jsr  chrout
.ca89	20 0b c6	               jsr  pop
.ca8c	60		               rts
.ca8d			waitspace
.ca8d	20 d0 c5	               jsr  push
.ca90	a9 7f		wait           lda  #$7f  ;%01111111
.ca92	8d 00 dc	               sta  $dc00
.ca95	ad 01 dc	               lda  $dc01
.ca98	29 10		               and  #$10  ;mask %00010000
.ca9a	d0 f4		               bne  wait
.ca9c	20 0b c6	               jsr  pop
.ca9f			waitsstop
.ca9f	20 d0 c5	               jsr  push
.caa2	20 ed f6	wait           jsr  k_stop  ;%01111111
.caa5	d0 fb		               bne  wait
.caa7	20 0b c6	               jsr  pop
.caaa			waitreturn
.caaa	20 d0 c5	               jsr  push
.caad	ad c7 ca	               lda  thecount
.cab0	8d 00 04	               sta  scrnram
.cab3	a9 02		               lda  #$02
.cab5	8d 00 d8	               sta  colorram
.cab8	20 e4 ff	nope           jsr  getin
.cabb	c9 0d		nohex          cmp  #$0d
.cabd	d0 f9		               bne  nope
.cabf	ee c7 ca	               inc  thecount
.cac2	20 0b c6	               jsr  pop
.cac5	60		               rts
>cac6	00		thekey         .byte   0
>cac7	01		thecount       .byte   $01

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.cac8			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.cac8	20 d0 c5	                jsr push
.cacb	08		                php
.cacc	8d 8c cc	                sta  rega
.cacf	68		                pla
.cad0	8d 8f cc	                sta  regp
.cad3	8e 8d cc	                stx  regx
.cad6	8c 8e cc	                sty  regy
.cad9	ba		                tsx
.cada	8e 90 cc	                stx  regs
.cadd	68		                pla
.cade	8d 93 cc	                sta  regpcl
.cae1	8d 94 cc	                sta  regpcl2
.cae4	68		                pla
.cae5	8d 91 cc	                sta  regpch
.cae8	8d 92 cc	                sta  regpch2
.caeb	ad 8c cc	                lda  rega
.caee	48		                pha
.caef	20 3d c8	                jsr  nibtohex
.caf2	8d 36 cc	                sta  vala+1
.caf5	68		                pla
.caf6	20 49 c8	                jsr  lsra4bits
.caf9	20 3d c8	                jsr  nibtohex
.cafc	8d 35 cc	                sta  vala
.caff	ad 8e cc	                lda  regy
.cb02	48		                pha
.cb03	20 3d c8	                jsr  nibtohex
.cb06	8d 4a cc	                sta  valy+1
.cb09	68		                pla
.cb0a	20 49 c8	                jsr  lsra4bits
.cb0d	20 3d c8	                jsr  nibtohex
.cb10	8d 49 cc	                sta  valy
.cb13	ad 8d cc	                lda  regx
.cb16	48		                pha
.cb17	20 3d c8	                jsr  nibtohex
.cb1a	8d 40 cc	                sta  valx+1
.cb1d	68		                pla
.cb1e	20 49 c8	                jsr  lsra4bits
.cb21	20 3d c8	                jsr  nibtohex
.cb24	8d 3f cc	                sta  valx
.cb27	ad 8f cc	                lda  regp
.cb2a	48		                pha
.cb2b	20 3d c8	                jsr  nibtohex
.cb2e	8d 54 cc	                sta  valp+1
.cb31	68		                pla
.cb32	20 49 c8	                jsr  lsra4bits
.cb35	20 3d c8	                jsr  nibtohex
.cb38	8d 53 cc	                sta  valp
.cb3b	ad 90 cc	                lda  regs
.cb3e	48		                pha
.cb3f	20 3d c8	                jsr  nibtohex
.cb42	8d 5e cc	                sta  vals+1
.cb45	68		                pla
.cb46	20 49 c8	                jsr  lsra4bits
.cb49	20 3d c8	                jsr  nibtohex
.cb4c	8d 5d cc	                sta  vals
.cb4f	18		                clc
.cb50	ad 94 cc	                lda regpcl2
.cb53	69 01		                adc #$01
.cb55	8d 94 cc	                sta regpcl2
.cb58	ad 94 cc	                lda regpcl2
.cb5b	d0 03		                bne noreport
.cb5d	ee 92 cc	                inc regpch2
.cb60	ad 92 cc	    noreport    lda regpch2
.cb63	48		                pha
.cb64	20 3d c8	                jsr  nibtohex
.cb67	8d 69 cc	                sta  valpch+1
.cb6a	68		                pla
.cb6b	20 49 c8	                jsr  lsra4bits
.cb6e	20 3d c8	                jsr  nibtohex
.cb71	8d 68 cc	                sta  valpch
.cb74	ad 94 cc	                lda  regpcl2
.cb77	48		                pha
.cb78	20 3d c8	                jsr  nibtohex
.cb7b	8d 6b cc	                sta  valpcl+1
.cb7e	68		                pla
.cb7f	20 49 c8	                jsr  lsra4bits
.cb82	20 3d c8	                jsr  nibtohex
.cb85	8d 6a cc	                sta  valpcl
.cb88	a5 fb		                lda  zpage1
.cb8a	48		                pha
.cb8b	20 3d c8	                jsr  nibtohex
.cb8e	8d 79 cc	                sta  valz1l
.cb91	68		                pla
.cb92	20 49 c8	                jsr  lsra4bits
.cb95	20 3d c8	                jsr  nibtohex
.cb98	8d 7a cc	                sta  valz1l+1
.cb9b	a5 fc		                lda  zpage1+1
.cb9d	48		                pha
.cb9e	20 3d c8	                jsr  nibtohex
.cba1	8d 77 cc	                sta  valz1h
.cba4	68		                pla
.cba5	20 49 c8	                jsr  lsra4bits
.cba8	20 3d c8	                jsr  nibtohex
.cbab	8d 78 cc	                sta  valz1h+1
.cbae	a5 fd		                lda  zpage2
.cbb0	48		                pha
.cbb1	20 3d c8	                jsr  nibtohex
.cbb4	8d 88 cc	                sta  valz2l
.cbb7	68		                pla
.cbb8	20 49 c8	                jsr  lsra4bits
.cbbb	20 3d c8	                jsr  nibtohex
.cbbe	8d 89 cc	                sta  valz2l+1
.cbc1	a5 fe		                lda  zpage2+1
.cbc3	48		                pha
.cbc4	20 3d c8	                jsr  nibtohex
.cbc7	8d 86 cc	                sta  valz2h
.cbca	68		                pla
.cbcb	20 49 c8	                jsr  lsra4bits
.cbce	20 3d c8	                jsr  nibtohex
.cbd1	8d 87 cc	                sta  valz2h+1
.cbd4	20 79 c3	                jsr  setinverse
.cbd7	78		                sei
.cbd8	a2 2e		                ldx  #<srega
.cbda	a0 cc		                ldy  #>srega+1
.cbdc	20 21 c3	                jsr  putscxy
.cbdf	a2 38		                ldx  #<sregx
.cbe1	a0 cc		                ldy  #>sregx+1
.cbe3	20 21 c3	                jsr  putscxy
.cbe6	a2 42		                ldx  #<sregy
.cbe8	a0 cc		                ldy  #>sregy+1
.cbea	20 21 c3	                jsr  putscxy
.cbed	a2 4c		                ldx  #<sregp
.cbef	a0 cc		                ldy  #>sregp+1
.cbf1	20 21 c3	                jsr  putscxy
.cbf4	a2 56		                ldx  #<sregs
.cbf6	a0 cc		                ldy  #>sregs+1
.cbf8	20 21 c3	                jsr  putscxy
.cbfb	a2 60		                ldx  #<sregpc
.cbfd	a0 cc		                ldy  #>sregpc+1
.cbff	20 21 c3	                jsr  putscxy
.cc02	a2 6e		                ldx  #<sregz1
.cc04	a0 cc		                ldy  #>sregz1+1
.cc06	20 21 c3	                jsr  putscxy
.cc09	a2 7d		                ldx  #<sregz2
.cc0b	a0 cc		                ldy  #>sregz2+1
.cc0d	20 21 c3	                jsr  putscxy
.cc10	58		                cli
.cc11	20 81 c3	                jsr  clrinverse
.cc14	ad 91 cc	                lda  regpch
.cc17	48		                pha
.cc18	ad 93 cc	                lda  regpcl
.cc1b	48		                pha
.cc1c	ac 8e cc	                ldy  regy
.cc1f	ae 8d cc	                ldx  regx
.cc22	ad 8f cc	                lda  regp
.cc25	48		                pha
.cc26	ad 8c cc	                lda  rega
.cc29	28		                plp
.cc2a	20 0b c6	                jsr pop
.cc2d	60		                rts
>cc2e	01 00 17	srega   .byte   colr,coln,line
>cc31	20 41 3a 24	        .text   ' a:$' ;4,24
>cc35	00 00 00	vala    .byte   0,0,0
>cc38	01 06 17	sregx   .byte   colr,coln+6,line
>cc3b	20 58 3a 24	        .text   ' x:$' ;4,24
>cc3f	00 00 00	valx    .byte   0,0,0
>cc42	01 0c 17	sregy   .byte   colr,coln+12,line
>cc45	20 59 3a 24	        .text   ' y:$' ;4,24
>cc49	00 00 00	valy    .byte   0,0,0
>cc4c	01 12 17	sregp   .byte   colr,coln+18,line
>cc4f	20 50 3a 24	        .text   ' p:$' ;4,24
>cc53	00 00 00	valp    .byte   0,0,0
>cc56	01 18 17	sregs   .byte   colr,coln+24,line
>cc59	20 53 3a 24	        .text   ' s:$' ;4,24
>cc5d	00 00 00	vals    .byte   0,0,0
>cc60	01 1e 17	sregpc  .byte   colr,coln+30,line
>cc63	20 50 43 3a	        .text   ' pc:$' ;4,24
>cc67	24
>cc68	00 00		valpch  .byte   0,0
>cc6a	00 00 20 00	valpcl  .byte   0,0,32,0
>cc6e	01 03 18	sregz1  .byte   colr,coln+3,line+1
>cc71	20 5a 50 31	        .text   ' zp1:$' ;4,24
>cc75	3a 24
>cc77	00 00		valz1h  .byte   0,0
>cc79	00 00 20 00	valz1l  .byte   0,0,32,0
>cc7d	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>cc80	20 5a 50 32	        .text   ' zp2:$' ;4,24
>cc84	3a 24
>cc86	00 00		valz2h  .byte   0,0
>cc88	00 00 20 00	valz2l  .byte   0,0,32,0
>cc8c	00		rega    .byte   0
>cc8d	00		regx    .byte   0
>cc8e	00		regy    .byte   0
>cc8f	00		regp    .byte   0
>cc90	00		regs    .byte   0
>cc91	00		regpch  .byte   0
>cc92	00		regpch2 .byte   0
>cc93	00		regpcl  .byte   0
>cc94	00		regpcl2 .byte   0
>cc95	00		vzp1h   .byte   0
>cc96	00		vzp1l   .byte   0
>cc97	00		vzp2h   .byte   0
>cc98	00		vzp2l   .byte   0

;******  Return to file: libtest03.asm


;******  End of listing

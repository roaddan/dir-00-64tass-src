
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L libtest03.txt -o libtest03.prg libtest03.asm
; Tue Apr 22 20:47:13 2025

;Offset	;Hex		;Source

;******  Processing input file: libtest03.asm

="20250421-232831"	                Version = "20250421-232831"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: libtest03.asm

.0854			main
.0854	20 22 0b	               jsr scrmaninit
.0857	08		               php
.0858	48		               pha
.0859	a9 8e		               lda  #b_uppercase
.085b	8d 41 0b	               sta  characterset
.085e	20 d2 ff	               jsr  $ffd2
.0861	68		               pla
.0862	28		               plp
.0863	08		               php
.0864	48		               pha
.0865	a9 8e		               lda  #b_uppercase
.0867	20 d2 ff	               jsr  $ffd2
.086a	68		               pla
.086b	28		               plp
.086c	08		               php
.086d	48		               pha
.086e	a9 08		               lda  #$08
.0870	20 d2 ff	               jsr  $ffd2
.0873	68		               pla
.0874	28		               plp
.0875	20 f6 0e	               jsr  push
.0878	48		               pha
.0879	a9 05		               lda  #cvert
.087b	8d 20 d0	               sta  $d020
.087e	68		               pla
.087f	48		               pha
.0880	a9 06		               lda  #cbleu
.0882	8d 21 d0	               sta  $d021
.0885	68		               pla
.0886	48		               pha
.0887	a9 01		               lda  #cblanc
.0889	8d 86 02	               sta  bascol
.088c	68		               pla
.088d	20 31 0f	               jsr  pull
.0890	20 45 09	               jsr  libtest03
.0893	20 6e 13	               jsr  anykey
.0896	08		               php
.0897	48		               pha
.0898	a9 09		               lda  #$09
.089a	20 d2 ff	               jsr  $ffd2
.089d	68		               pla
.089e	28		               plp
.089f	08		               php
.08a0	48		               pha
.08a1	a9 8e		               lda  #b_uppercase
.08a3	8d 41 0b	               sta  characterset
.08a6	20 d2 ff	               jsr  $ffd2
.08a9	68		               pla
.08aa	28		               plp
.08ab	20 f6 0e	               jsr  push
.08ae	48		               pha
.08af	a9 05		               lda  #cvert
.08b1	8d 20 d0	               sta  $d020
.08b4	68		               pla
.08b5	48		               pha
.08b6	a9 06		               lda  #cbleu
.08b8	8d 21 d0	               sta  $d021
.08bb	68		               pla
.08bc	48		               pha
.08bd	a9 01		               lda  #cblanc
.08bf	8d 86 02	               sta  bascol
.08c2	68		               pla
.08c3	20 31 0f	               jsr  pull
.08c6	60		               rts
.08c7			aide
.08c7	08		               php
.08c8	48		               pha
.08c9	a9 0e		               lda  #14
.08cb	8d 41 0b	               sta  characterset
.08ce	20 d2 ff	               jsr  $ffd2
.08d1	68		               pla
.08d2	28		               plp
.08d3	20 42 0b	               jsr cls
.08d6	20 f6 0e	               jsr  push
.08d9	a2 ed		               ldx  #<line
.08db	a0 0a		               ldy  #>line
.08dd	20 5f 0b	               jsr  puts
.08e0	20 31 0f	               jsr  pull
.08e3	20 f6 0e	               jsr  push
.08e6	a2 91		               ldx  #<headera
.08e8	a0 09		               ldy  #>headera
.08ea	20 5f 0b	               jsr  puts
.08ed	20 31 0f	               jsr  pull
.08f0	20 f6 0e	               jsr  push
.08f3	a2 b8		               ldx  #<headerb
.08f5	a0 09		               ldy  #>headerb
.08f7	20 5f 0b	               jsr  puts
.08fa	20 31 0f	               jsr  pull
.08fd	20 f6 0e	               jsr  push
.0900	a2 ed		               ldx  #<line
.0902	a0 0a		               ldy  #>line
.0904	20 5f 0b	               jsr  puts
.0907	20 31 0f	               jsr  pull
.090a	20 f6 0e	               jsr  push
.090d	a2 ed		               ldx  #<line
.090f	a0 0a		               ldy  #>line
.0911	20 5f 0b	               jsr  puts
.0914	20 31 0f	               jsr  pull
.0917	20 f6 0e	               jsr  push
.091a	a2 13		               ldx  #<shortcuts
.091c	a0 0a		               ldy  #>shortcuts
.091e	20 5f 0b	               jsr  puts
.0921	20 31 0f	               jsr  pull
.0924	20 f6 0e	               jsr  push
.0927	a2 99		               ldx  #<aidetext
.0929	a0 0a		               ldy  #>aidetext
.092b	20 5f 0b	               jsr  puts
.092e	20 31 0f	               jsr  pull
.0931	20 f6 0e	               jsr  push
.0934	a2 ed		               ldx  #<line
.0936	a0 0a		               ldy  #>line
.0938	20 5f 0b	               jsr  puts
.093b	20 31 0f	               jsr  pull
.093e	20 6e 13	               jsr  anykey
.0941	20 42 0b	               jsr  cls
.0944	60		               rts
.0945			libtest03
.0945	20 f6 0e	               jsr  push
.0948			nexta
.0948	20 f6 0e	               jsr  push
.094b	a2 16		               ldx  #<dataloc
.094d	a0 0b		               ldy  #>dataloc
.094f	20 e8 0b	               jsr  putscxy
.0952	20 31 0f	               jsr  pull
.0955	48		               pha
.0956	a9 03		               lda  #ccyan
.0958	8d 86 02	               sta  bascol
.095b	68		               pla
.095c			again
.095c	08		               php
.095d	ae fe ff	               ldx  $fffe		; Load lsb od address in X.
.0960	ad ff ff	               lda  $fffe+1		; Load msb od address in A.
.0963	28		               plp
.0964	20 ee 13	               jsr  showregs
.0967	20 f6 0e	               jsr  push
.096a	a2 00		               ldx  #0
.096c	a0 00		               ldy  #0
.096e	20 79 0b	               jsr  gotoxy
.0971	20 31 0f	               jsr  pop
.0974	20 6e 0c	               jsr  b_praxstr
.0977	20 d8 0c	               jsr  b_readmemfloat
.097a	20 f6 0e	               jsr  push
.097d	a2 00		               ldx  #0
.097f	a0 01		               ldy  #1
.0981	20 79 0b	               jsr  gotoxy
.0984	20 31 0f	               jsr  pop
.0987	20 7b 0d	               jsr  b_outsub
.098a	20 31 0f	out            jsr  pop
.098d	60		               rts
>098e	a6		car            .byte     166
>098f	3a 30		valeur         .word     12346

;******  Processing file: strings_fr.asm

.0991			headera
>0991	13 1d 1d 1d	               .byte     b_home,b_crsr_right,b_crsr_right,b_crsr_right,b_crsr_right
>0995	1d
>0996	20 c3 4f 4d	               .text              " Commodore 64 test de libraries "
>099a	4d 4f 44 4f 52 45 20 36 34 20 54 45 53 54 20 44
>09aa	45 20 4c 49 42 52 41 52 49 45 53 20
>09b6	0d 00		               .byte     $0d,0
>09b8	20 20 20 20	headerb        .text          "               libtest03 "
>09bc	20 20 20 20 20 20 20 20 20 20 20 4c 49 42 54 45
>09cc	53 54 30 33 20
>09d1	0d		               .byte     $0d
>09d2	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>09d6	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>09e6	45 4c 20 cc 41 46 52 41 4e 43 45
>09f1	0d		               .byte     $0d
>09f2	20 20 20 20	               .text   format("       Version: %s",Version)
>09f6	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>0a06	30 34 32 31 2d 32 33 32 38 33 31
>0a11	0d 00		               .byte     $0d,0
>0a13	0d		shortcuts      .byte     $0d
>0a14	91 91		               .byte     ucurkey,ucurkey
>0a16	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>0a1a	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>0a1e	1d
>0a1f	20 d2 20 c1	               .text          " R A C C O U R C I S "
>0a23	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>0a33	20
>0a34	0d		               .byte     $0d
>0a35	20 4c 49 42	               .text   format(" libtest03: SYS%05d (jsr $%04X)",main, main)
>0a39	54 45 53 54 30 33 3a 20 d3 d9 d3 30 32 31 33 32
>0a49	20 28 4a 53 52 20 24 30 38 35 34 29
>0a55	0d		               .byte     $0d
>0a56	20 41 49 44	               .text   format(" aide.....: SYS%05d (jsr $%04X)",aide, aide)
>0a5a	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 32 34 37
>0a6a	20 28 4a 53 52 20 24 30 38 c3 37 29
>0a76	0d		               .byte     $0d
>0a77	20 43 4c 53	               .text   format(" cls......: SYS%05d (jsr $%04X)",cls, cls)
>0a7b	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 38 38 32
>0a8b	20 28 4a 53 52 20 24 30 c2 34 32 29
>0a97	0d 00		               .byte     $0d,0
>0a99	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d (jsr $%04X)",libtest03, libtest03)
>0a9d	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 33 37 33
>0aad	20 28 4a 53 52 20 24 30 39 34 35 29
>0ab9	0d 0d		               .byte     $0d, $0d
>0abb	20 20 20 20	                .text   format("    ex.: SYS%05d",libtest03)
>0abf	45 58 2e 3a 20 d3 d9 d3 30 32 33 37 33
>0acc	0d		                .byte     $0d
>0acd	20 20 20 20	                .text   format("    for i=0to100:SYS%05d:next",libtest03)
>0ad1	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0ae1	30 32 33 37 33 3a 4e 45 58 54
>0aeb	0d 00		                .byte     $0d,0
>0aed	20 c0 c0 c0	line            .byte     $20,192,192,192,192,192,192,192,192,192
>0af1	c0 c0 c0 c0 c0 c0
>0af7	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>0afb	c0 c0 c0 c0 c0 c0
>0b01	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192,192
>0b05	c0 c0 c0 c0 c0 c0
>0b0b	c0 c0 c0 c0	                .byte     192,192,192,192,192,192,192,192,192
>0b0f	c0 c0 c0 c0 c0
>0b14	0d 00		                .byte     $0d,0
>0b16	01 00 00 00	dataloc         .byte       1,0,0,0

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0b1a	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0b1e	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0b22			libtart

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0b22			scrmaninit
.0b22	20 f6 0e	               jsr  push
.0b25	a9 06		               lda  #vbleu
.0b27	8d 21 d0	               sta  vicbackcol
.0b2a	a9 05		               lda  #vvert
.0b2c	8d 20 d0	               sta  vicbordcol
.0b2f	a9 01		               lda  #vblanc
.0b31	8d 86 02	               sta  bascol
.0b34	ad 00 04	               lda  scrnram
.0b37	8d 00 04	               sta  scrnram
.0b3a	20 42 0b	               jsr  cls
.0b3d	20 31 0f	               jsr  pop
.0b40	60		               rts
>0b41	8e		characterset   .byte b_uppercase
.0b42			cls
.0b42	08		               php
.0b43	48		               pha
.0b44	a9 93		               lda  #$93
.0b46	20 59 0b	               jsr  putch
.0b49	68		               pla
.0b4a	28		               plp
.0b4b	60		               rts
.0b4c			putnch
.0b4c	08		               php
.0b4d	e0 00		               cpx  #$00
.0b4f	f0 06		               beq  out
.0b51	20 d2 ff	again          jsr  $ffd2
.0b54	ca		               dex
.0b55	d0 fa		               bne  again
.0b57	28		out            plp
.0b58	60		               rts
.0b59			putch
.0b59	08		               php
.0b5a	20 d2 ff	               jsr  $ffd2
.0b5d	28		               plp
.0b5e	60		               rts
.0b5f			puts
.0b5f	20 f6 0e	               jsr  push
.0b62	86 fb		               stx  zpage1
.0b64	84 fc		               sty  zpage1+1
.0b66	a0 00		               ldy  #0
.0b68	b1 fb		next           lda  (zpage1),y
.0b6a	f0 09		               beq  exit
.0b6c	20 59 0b	               jsr  putch
.0b6f	20 4b 10	               jsr  inczp1
.0b72	4c 68 0b	               jmp  next
.0b75	20 31 0f	exit           jsr  pop
.0b78	60		               rts
.0b79			gotoxy
.0b79	08		               php
.0b7a	18		               clc
.0b7b	8a		               txa
.0b7c	48		               pha
.0b7d	98		               tya
.0b7e	aa		               tax
.0b7f	68		               pla
.0b80	a8		               tay
.0b81	20 f0 ff	               jsr  kplot
.0b84	28		               plp
.0b85	60		               rts
.0b86			cursor
=$0286			bascol    =    $0286
.0b86	08		               php            ;tourlou
.0b87	48		               pha
.0b88	90 12		               bcc  restore
.0b8a	20 f0 ff	               jsr  kplot
.0b8d	8c ae 0b	               sty  cx
.0b90	8e af 0b	               stx  cy
.0b93	ad 86 02	               lda  bascol
.0b96	8d b0 0b	               sta  bcol
.0b99	4c ab 0b	               jmp  out
.0b9c	ae af 0b	restore        ldx  cy
.0b9f	ac ae 0b	               ldy  cx
.0ba2	20 f0 ff	               jsr  kplot
.0ba5	ad b0 0b	               lda  bcol
.0ba8	8d 86 02	               sta  bascol
.0bab	68		out            pla
.0bac	28		               plp
.0bad	60		               rts
>0bae	00		cx   .byte     $00
>0baf	00		cy   .byte     $00
>0bb0	00		bcol .byte     $00
.0bb1			cursave
.0bb1	08		               php
.0bb2	38		               sec
.0bb3	20 86 0b	               jsr  cursor
.0bb6	28		               plp
.0bb7	60		               rts
.0bb8			curput
.0bb8	08		               php
.0bb9	18		               clc
.0bba	20 86 0b	               jsr  cursor
.0bbd	28		               plp
.0bbe	60		               rts
.0bbf			putsxy
.0bbf	20 f6 0e	               jsr  push
.0bc2	86 fb		               stx  zpage1
.0bc4	84 fc		               sty  zpage1+1
.0bc6	a0 00		               ldy  #$00
.0bc8	b1 fb		               lda  (zpage1),y
.0bca	aa		               tax
.0bcb	20 4b 10	               jsr  inczp1
.0bce	b1 fb		               lda  (zpage1),y
.0bd0	a8		               tay
.0bd1	20 79 0b	               jsr  gotoxy
.0bd4	20 4b 10	               jsr  inczp1
.0bd7	a6 fb		               ldx  zpage1
.0bd9	a4 fc		               ldy  zpage1+1
.0bdb	20 5f 0b	               jsr  puts
.0bde	20 31 0f	               jsr  pop
.0be1	60		               rts
>0be2	00 00		straddr   .word     $00
>0be4	00		px        .byte     $00
>0be5	00		py        .byte     $00
>0be6	00 00		zp1       .word     $00
.0be8			putscxy
.0be8	20 f6 0e	               jsr  push
.0beb	84 fc		               sty  zpage1+1
.0bed	86 fb		               stx  zpage1
.0bef	ad 86 02	               lda  bascol
.0bf2	8d 12 0c	               sta  bc
.0bf5	a0 00		               ldy #$00
.0bf7	b1 fb		               lda  (zpage1),y
.0bf9	8d 86 02	               sta  bascol
.0bfc	20 4b 10	               jsr  inczp1
.0bff	a6 fb		               ldx  zpage1
.0c01	a4 fc		               ldy  zpage1+1
.0c03	20 bf 0b	               jsr  putsxy
.0c06	ad 12 0c	               lda  bc
.0c09	8d 86 02	               sta  bascol
.0c0c	20 31 0f	               jsr  pop
.0c0f	60		               rts
>0c10	00 00		straddr  .word      $00
>0c12	00		bc       .byte      $00
>0c13	00 00		zp1      .word      $00
.0c15			putrahex
.0c15	08		               php
.0c16	48		               pha
.0c17	20 76 11	               jsr  atohex
.0c1a	a9 15		               lda  #<a2hexstr
.0c1c	a0 11		               ldy  #>a2hexstr
.0c1e	20 5f 0b	               jsr  puts
.0c21	68		               pla
.0c22	28		               plp
.0c23	60		               rts
.0c24			kputrahexxy
.0c24			bputrahexxy
.0c24			putrahexxy
.0c24	08		               php
.0c25	20 76 11	               jsr  atohex
.0c28	a9 12		               lda  #<a2hexpos
.0c2a	a0 11		               ldy  #>a2hexpos
.0c2c	20 bf 0b	               jsr  putsxy
.0c2f	68		               pla
.0c30	28		               plp
.0c31	60		               rts
.0c32			putrahexcxy
.0c32	08		               php
.0c33	20 76 11	               jsr  atohex
.0c36	a9 12		               lda  #<a2hexpos
.0c38	a0 11		               ldy  #>a2hexpos
.0c3a	20 e8 0b	               jsr  putscxy
.0c3d	68		               pla
.0c3e	28		               plp
.0c3f	60		               rts
.0c40			setinverse
.0c40	48		               pha
.0c41	a9 12		               lda  #$12
.0c43	20 d2 ff	               jsr  $ffd2
.0c46	68		               pla
.0c47	60		               rts
.0c48			clrinverse
.0c48	48		               pha
.0c49	a9 92		               lda  #$92
.0c4b	20 d2 ff	               jsr  $ffd2
.0c4e	68		               pla
.0c4f	60		               rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2-math.asm

.0c50			b_math_template
.0c50	20 64 0f				jsr	pushreg
.0c53	20 93 0f				jsr	popreg
.0c56	60					rts
>0c57	00		b_bufflenght	.byte	$00
>0c58	00 00 00 00	b_num1		.word	$0000,$0000,$0000
>0c5c	00 00
>0c5e	00 00 00 00	b_num2		.word	$0000,$0000,$0000
>0c62	00 00
.0c64			b_num0
>0c64	00 00 00 00	b_numresult	.word 	$0000,$0000,$0000
>0c68	00 00
>0c6a	31 32 38 00	b_testnum		.null	"128"
.0c6e			b_praxstr
.0c6e	20 64 0f				jsr	pushreg
.0c71	20 cd bd				jsr	b_axout
.0c74	20 93 0f				jsr	popreg
.0c77	60					rts
.0c78			b_getascnum
.0c78	20 64 0f				jsr	pushreg
.0c7b	20 bf e3				jsr	b_intcgt		; Initialyse charget
.0c7e	20 98 0c				jsr	b_clearbuff	; Clear basic input buffer
.0c81	20 f9 ab				jsr	b_prompt		; Prompt for ? and fill buffer by reading...
.0c84	86 7a					stx	$7a			; X and Y points to $01ff on return.
.0c86	84 7b					sty	$7b
.0c88	20 73 00				jsr	b_chrget
.0c8b	20 f3 bc				jsr	b_ascflt		; Convert ASCII string at 0200 to FAC1 FP.
.0c8e	20 dd bd				jsr	b_facasc		; Converts FAC1 to ASCII string at 100.
.0c91	20 68 0d				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.0c94	20 93 0f				jsr	popreg
.0c97	60					rts
.0c98			b_clearbuff
.0c98	20 64 0f				jsr	pushreg
.0c9b	a9 00					lda	#$00
.0c9d	a0 59					ldy	#$59
.0c9f	99 00 02	clear		sta	$0200,y		; Clear Basic input buffer
.0ca2	88					dey
.0ca3	d0 fa					bne	clear		; 60 bytes.
.0ca5	20 93 0f				jsr	popreg
.0ca8	60					rts
.0ca9			b_printbuff
.0ca9	20 64 0f				jsr	pushreg
.0cac	a9 00					lda	#$00			; Set $22 to point to string at 100
.0cae	85 22					sta	$22
.0cb0	a9 01					lda	#$01
.0cb2	85 23					sta	$23
.0cb4	ad 57 0c				lda	b_bufflenght
.0cb7	20 24 ab				jsr	b_strout
.0cba	20 93 0f				jsr	popreg
.0cbd	60					rts
.0cbe			b_insub
.0cbe	20 64 0f				jsr	pushreg
.0cc1	20 bf e3				jsr	b_intcgt	; Initialize CHRGET.
.0cc4	20 98 0c				jsr	b_clearbuff
.0cc7	20 f9 ab				jsr	b_prompt
.0cca	86 7a					stx	$7a
.0ccc	84 7b					sty	$7b
.0cce	20 73 00				jsr	b_chrget
.0cd1	20 f3 bc				jsr	b_ascflt	; Convert ascii string to floating point in FAC1.
.0cd4	20 93 0f				jsr	popreg
.0cd7	60					rts
.0cd8			b_readmemfloat
.0cd8	20 64 0f				jsr	pushreg
.0cdb	20 bf e3				jsr	b_intcgt	; Initialize CHRGET.
.0cde	a5 7a					lda	$7a
.0ce0	8d 2e 0d				sta	b_v7a
.0ce3	a5 7b					lda	$7b
.0ce5	8d 2f 0d				sta	b_v7b
.0ce8	a2 69					ldx	#<(b_testnum-1); #$83		; Set pointer to fvar as location for var minus 1
.0cea	a0 0c					ldy	#>(b_testnum-1); #$c5
.0cec	86 7a					stx	$7a
.0cee	84 7b					sty	$7b
.0cf0	20 73 00				jsr	b_chrget
.0cf3	20 64 0f				jsr	pushreg
.0cf6	a2 58					ldx	#<(b_num1)  	; Copy FAC1 dans la variable ...
.0cf8	a0 0c					ldy	#>(b_num1)  	; ...
.0cfa	20 d4 bb				jsr	b_f1tmem		; b_num1
.0cfd	20 e2 ba				jsr	b_f1x10
.0d00	a2 5e					ldx	#<(b_num2)  	; Copy FAC1 dans la variable ...
.0d02	a0 0c					ldy	#>(b_num2)  	; ...
.0d04	20 d4 bb				jsr	b_f1tmem		; b_num1
.0d07	a2 64					ldx	#<(b_num0)  	; Copy FAC1 dans la variable ...
.0d09	a0 0c					ldy	#>(b_num0)  	; ...
.0d0b	20 d4 bb				jsr	b_f1tmem		; b_num1
.0d0e	20 a7 0e				jsr	b_prhexbnum1
.0d11	20 93 0f				jsr	popreg
.0d14	20 f3 bc				jsr	b_ascflt	  	; Convert ascii string to floating point in FAC1.
.0d17	20 dd bd				jsr	b_facasc		; Convert FAC1 floating point to ascii string at
.0d1a	20 68 0d				jsr	b_getbufflen
.0d1d	ad 2e 0d				lda	b_v7a
.0d20	85 7a					sta	$7a
.0d22	ad 2f 0d				lda	b_v7b
.0d25	85 7b					sta	$7b
.0d27	20 98 0c				jsr	b_clearbuff
.0d2a	20 93 0f				jsr	popreg
.0d2d	60					rts
>0d2e	00		b_v7a		.byte	$00
>0d2f	00		b_v7b		.byte	$00
.0d30			b_mul2fptomem
.0d30	20 64 0f				jsr	pushreg
.0d33	20 be 0c				jsr	b_insub		; Input first number.
.0d36	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057.
.0d39	20 be 0c				jsr	b_insub		; Input second number.
.0d3c	a9 57					lda	#$57
.0d3e	a0 00					ldy	#$00			; Point to 1st number.
.0d40	20 28 ba				jsr	b_f1xfv		; FAC1 = FAC1 X FVAR.
.0d43	a2 64					ldx	#<b_numresult	; Set pointer to area to copy result to.
.0d45	a0 0c					ldy	#>b_numresult
.0d47	20 d4 bb				jsr	b_f1tmem		; Copy FAC1 to memory.
.0d4a	20 93 0f				jsr	popreg
.0d4d	60					rts
.0d4e			b_mul2fptoasc
.0d4e	20 64 0f				jsr	pushreg
.0d51	20 be 0c				jsr	b_insub		; Get first number.
.0d54	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057.
.0d57	20 be 0c				jsr	b_insub	;	 Get second number.
.0d5a	a9 57					lda	#$57
.0d5c	a0 00					ldy	#$00			; Set pointer to FVAR.
.0d5e	20 28 ba				jsr	b_f1xfv		; FAC1 = FAC1 x FVAR.
.0d61	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0d64	20 93 0f				jsr	popreg
.0d67	60					rts
.0d68			b_getbufflen
.0d68	20 64 0f				jsr	pushreg
.0d6b	a0 ff					ldy	#$ff
.0d6d	c8		nxtchar		iny				; Determine lenght of string by ...
.0d6e	b9 00 01				lda	$0100,y		; ... searching for $00 EOS byte.
.0d71	d0 fa					bne	nxtchar
.0d73	c8					iny
.0d74	8c 57 0c				sty	b_bufflenght	; Store buffer lenght in common variable.
.0d77	20 93 0f				jsr	popreg
.0d7a	60					rts
.0d7b			b_outsub
.0d7b	20 64 0f				jsr	pushreg
.0d7e	20 68 0d				jsr	b_getbufflen	; Calculate lenght of buff and store in var.
.0d81	20 a9 0c				jsr	b_printbuff	; Print buffer content on output device.
.0d84	20 98 0c				jsr	b_clearbuff
.0d87	20 93 0f				jsr	popreg
.0d8a	60					rts
.0d8b			b_fac1x10
.0d8b	20 64 0f				jsr	pushreg
.0d8e	20 be 0c				jsr	b_insub
.0d91	20 e2 ba				jsr	b_f1x10	; FAC1 = FAC1 X 10
.0d94	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0d97	20 93 0f				jsr	popreg
.0d9a	60					rts
.0d9b			b_fac1d10
.0d9b	20 64 0f				jsr	pushreg
.0d9e	20 be 0c				jsr	b_insub		; Get first number.
.0da1	20 2b bc				jsr	b_sgnf1
.0da4	48					pha
.0da5	20 fe ba				jsr	b_f1d10		; FAC1 = FAC1 / 10
.0da8	68					pla
.0da9	aa					tax
.0daa	e8					inx
.0dab	d0 04					bne	notneg
.0dad	a9 80					lda	#$80		; On force le bit de signe ...
.0daf	85 66					sta	$66		; de FAC1 a 1 (neg)
.0db1	20 dd bd	notneg		jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0db4	20 93 0f				jsr	popreg
.0db7	60					rts
.0db8			b_fac1square
.0db8	20 64 0f				jsr	pushreg
.0dbb	20 be 0c				jsr	b_insub		; Get first number.
.0dbe	20 0c bc				jsr	b_f1tf2		; Copy FAC1 to FAC2.
.0dc1	a5 61					lda	$61			; get exponent of FAC1
.0dc3	20 2b ba				jsr	b_f1xf2		; FAC1 = FAC1 X FAC2
.0dc6	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0dc9	20 93 0f				jsr	popreg
.0dcc	60					rts
.0dcd			b_fvardfac1
.0dcd	20 64 0f				jsr	pushreg
.0dd0	20 be 0c				jsr	b_insub		; Get first number.
.0dd3	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0dd6	20 be 0c				jsr	b_insub		; Get second number.
.0dd9	a9 57					lda	#$57
.0ddb	a0 00					ldy	#$00
.0ddd	20 0f bb				jsr	b_fvdf1		; FAC1 = FVAR / FAC1
.0de0	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0de3	20 93 0f				jsr	popreg
.0de6	60					rts
.0de7			b_fac2dfac1
.0de7	20 64 0f				jsr	pushreg
.0dea	20 be 0c				jsr	b_insub		; Get first number.
.0ded	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0df0	20 be 0c				jsr	b_insub		; Get second number.
.0df3	a9 57					lda	#$57
.0df5	a0 00					ldy	#$00
.0df7	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.0dfa	a5 61					lda	$61			; get exponent of FAC1
.0dfc	20 12 bb				jsr	b_f2df1		; FAC1 = FAC2 / FAC1
.0dff	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0e02	20 93 0f				jsr	popreg
.0e05	60					rts
.0e06			b_fac1pfvar
.0e06	20 64 0f				jsr	pushreg
.0e09	20 be 0c				jsr	b_insub		; Get first number.
.0e0c	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0e0f	20 be 0c				jsr	b_insub		; Get second number.
.0e12	a9 57					lda	#$57
.0e14	a0 00					ldy	#$00
.0e16	20 67 b8				jsr	b_f1pfv		; FAC1 = FAC1 + FVAR
.0e19	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0e1c	20 93 0f				jsr	popreg
.0e1f	60					rts
.0e20			b_fac2sfac1
.0e20	20 64 0f				jsr	pushreg
.0e23	20 be 0c				jsr	b_insub		; Get first number.
.0e26	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0e29	20 be 0c				jsr	b_insub		; Get second number.
.0e2c	a9 57					lda	#$57
.0e2e	a0 00					ldy	#$00
.0e30	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.0e33	20 53 b8				jsr	b_f2sf1		; FAC1 = FAC2 + FAC1
.0e36	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0e39	20 93 0f				jsr	popreg
.0e3c	60					rts
.0e3d			b_fvarsfac1
.0e3d	20 64 0f				jsr	pushreg
.0e40	20 be 0c				jsr	b_insub		; Get first number.
.0e43	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0e46	20 be 0c				jsr	b_insub		; Get second number.
.0e49	a9 57					lda	#$57
.0e4b	a0 00					ldy	#$00
.0e4d	20 50 b8				jsr	b_fvsf1		; FAC1 = FVAR + FAC1
.0e50	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0e53	20 93 0f				jsr	popreg
.0e56	60					rts
.0e57			b_accpfac1
.0e57	20 64 0f				jsr	pushreg
.0e5a	48					pha
.0e5b	20 be 0c				jsr	b_insub		; Get first number.
.0e5e	68					pla
.0e5f	20 7e bd				jsr	b_f1pacc
.0e62	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0e65	20 93 0f				jsr	popreg
.0e68	60					rts
.0e69			b_fac2pfac1
.0e69	20 64 0f				jsr	pushreg
.0e6c	20 be 0c				jsr	b_insub		; Get first number.
.0e6f	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0e72	20 be 0c				jsr	b_insub		; Get second number.
.0e75	a9 57					lda	#$57
.0e77	a0 00					ldy	#$00
.0e79	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.0e7c	a5 61					lda	$61			; get exponent of FAC1
.0e7e	20 6a b8				jsr	b_f1pf2
.0e81	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0e84	20 93 0f				jsr	popreg
.0e87	60					rts
.0e88			b_fac1powfac2
.0e88	20 64 0f				jsr	pushreg
.0e8b	20 be 0c				jsr	b_insub		; Get first number.
.0e8e	20 ca bb				jsr	b_f1t57		; Copy FAC1 to $0057
.0e91	20 be 0c				jsr	b_insub		; Get second number.
.0e94	a9 57					lda	#$57
.0e96	a0 00					ldy	#$00
.0e98	20 8c ba				jsr	b_memtf2		; copy memory to FAC2
.0e9b	a5 61					lda	$61			; get exponent of FAC1
.0e9d	20 7b bf				jsr	b_expon
.0ea0	20 dd bd				jsr	b_facasc	; Convert FAC1 floating point to ascii string at
.0ea3	20 93 0f				jsr	popreg
.0ea6	60					rts
.0ea7			b_prhexbnum1
.0ea7	20 f6 0e				jsr	pushall		; debug
.0eaa	20 f6 0e	               jsr  push
.0ead	a2 00		               ldx  #0
.0eaf	a0 05		               ldy  #5
.0eb1	20 79 0b	               jsr  gotoxy
.0eb4	20 31 0f	               jsr  pop
.0eb7	a9 58					lda	#<b_num1
.0eb9	85 fb					sta	zpage1
.0ebb	a9 0c					lda	#>b_num1
.0ebd	85 fc					sta	zpage1+1
.0ebf	a0 00					ldy	#$00
.0ec1	a2 12					ldx	#18
.0ec3	b1 fb		more			lda	(zpage1),y
.0ec5	20 52 11				jsr	putahex
.0ec8	c8					iny
.0ec9	c0 06					cpy	#6
.0ecb	d0 0d					bne	is12
.0ecd	20 f6 0e	               jsr  push
.0ed0	a2 00		               ldx  #0
.0ed2	a0 07		               ldy  #7
.0ed4	20 79 0b	               jsr  gotoxy
.0ed7	20 31 0f	               jsr  pop
.0eda	c0 0c		is12			cpy	#12
.0edc	d0 0d					bne	doit
.0ede	20 f6 0e	               jsr  push
.0ee1	a2 00		               ldx  #0
.0ee3	a0 09		               ldy  #9
.0ee5	20 79 0b	               jsr  gotoxy
.0ee8	20 31 0f	               jsr  pop
.0eeb	ca		doit			dex
.0eec	d0 d5					bne	more
.0eee	20 31 0f				jsr	popall
.0ef1	60					rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>0ef2	00		rp        .byte     0
>0ef3	00		ra        .byte     0
>0ef4	00 00		pc        .word     0
.0ef6			pushall
.0ef6			push
.0ef6	08		          php            ; stack : flg, pcl, pch
.0ef7	78		          sei
.0ef8	8d f3 0e	          sta  ra        ; save a
.0efb	68		          pla            ; stack : pcl, pch
.0efc	8d f2 0e	          sta  rp        ; save rp
.0eff	68		          pla            ; stack : pch
.0f00	8d f4 0e	          sta  pc        ; save pcl
.0f03	68		          pla            ; stack : -
.0f04	8d f5 0e	          sta  pc+1      ; save pch
.0f07	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0f09	48		          pha            ; stack : zp1l
.0f0a	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0f0c	48		          pha            ; stack : zp1h, zp1l
.0f0d	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0f0f	48		          pha            ; stack : zp2l, zp1h, zp1l
.0f10	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0f12	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0f13	ad f2 0e	          lda  rp        ; get rp
.0f16	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0f17	ad f3 0e	          lda  ra        ; get a
.0f1a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f1b	8a		          txa            ; get x
.0f1c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f1d	98		          tya            ; get y
.0f1e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f1f	ad f5 0e	          lda  pc+1      ; get pch
.0f22	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f23	ad f4 0e	          lda  pc        ; get pcl
.0f26	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f27	ad f2 0e	          lda  rp        ; get rp
.0f2a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f2b	ad f3 0e	          lda  ra        ; get a
.0f2e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f2f	58		          cli
.0f30	60		          rts
.0f31			pullall
.0f31			pull
.0f31			popall
.0f31			pop
.0f31	78		          sei
.0f32	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f33	8d f4 0e	          sta  pc        ; save pcl
.0f36	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f37	8d f5 0e	          sta  pc+1      ; save pch
.0f3a	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f3b	a8		          tay            ; set y
.0f3c	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f3d	aa		          tax            ; set x
.0f3e	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0f3f	8d f3 0e	          sta  ra        ; save a
.0f42	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0f43	8d f2 0e	          sta  rp        ; save rp
.0f46	68		          pla            ; stack : zp2l, zp1h, zp1l
.0f47	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0f49	68		          pla            ; stack : zp1h, zp1l
.0f4a	85 fd		          sta  zpage2    ; get zpage2 High byte
.0f4c	68		          pla            ; stack : zp1l
.0f4d	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0f4f	68		          pla            ; stack :
.0f50	85 fb		          sta  zpage1    ; get zpage1 High byte
.0f52	ad f5 0e	          lda  pc+1      ; get pch
.0f55	48		          pha            ; stack : pch
.0f56	ad f4 0e	          lda  pc
.0f59	48		          pha            ; stack : pcl, pch
.0f5a	ad f2 0e	          lda  rp        ; get rp
.0f5d	48		          pha            ; stack : rp, pcl, pch
.0f5e	ad f3 0e	          lda  ra        ; set ra
.0f61	58		          cli
.0f62	28		          plp            ; stack : pcl, pch
.0f63	60		          rts
.0f64			pushreg
.0f64	08		          php            ; stack : flg, pcl, pch
.0f65	78		          sei
.0f66	8d f3 0e	          sta  ra        ; save a
.0f69	68		          pla            ; stack : pcl, pch
.0f6a	8d f2 0e	          sta  rp        ; save rp
.0f6d	68		          pla            ; stack : pch
.0f6e	8d f4 0e	          sta  pc        ; save pcl
.0f71	68		          pla            ; stack : -
.0f72	8d f5 0e	          sta  pc+1      ; save pch
.0f75	ad f2 0e	          lda  rp        ; get rp
.0f78	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0f79	ad f3 0e	          lda  ra        ; get a
.0f7c	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f7d	8a		          txa            ; get x
.0f7e	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f7f	98		          tya            ; get y
.0f80	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f81	ad f5 0e	          lda  pc+1      ; get pch
.0f84	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f85	ad f4 0e	          lda  pc        ; get pcl
.0f88	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f89	ad f2 0e	          lda  rp        ; get rp
.0f8c	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f8d	ad f3 0e	          lda  ra        ; get a
.0f90	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f91	58		          cli
.0f92	60		          rts
.0f93			pullreg
.0f93			popreg
.0f93	78		          sei
.0f94	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f95	8d f4 0e	          sta  pc        ; save pcl
.0f98	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f99	8d f5 0e	          sta  pc+1      ; save pch
.0f9c	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0f9d	a8		          tay            ; set y
.0f9e	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0f9f	aa		          tax            ; set x
.0fa0	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0fa1	8d f3 0e	          sta  ra        ; save a
.0fa4	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0fa5	8d f2 0e	          sta  rp        ; save rp
.0fa8	ad f5 0e	          lda  pc+1      ; get pch
.0fab	48		          pha            ; stack : pch
.0fac	ad f4 0e	          lda  pc
.0faf	48		          pha            ; stack : pcl, pch
.0fb0	ad f2 0e	          lda  rp        ; get rp
.0fb3	48		          pha            ; stack : rp, pcl, pch
.0fb4	ad f3 0e	          lda  ra        ; set ra
.0fb7	58		          cli
.0fb8	28		          plp            ; stack : pcl, pch
.0fb9	60		          rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0fba			blkfill
.0fba	20 f6 0e	bf0            jsr  push
.0fbd	20 79 10	               jsr  savezp1
.0fc0	84 fc		               sty  zpage1+1
.0fc2	a0 00		               ldy  #$00
.0fc4	84 fb		               sty  zpage1
.0fc6	91 fb		bf1            sta  (zpage1),y
.0fc8	c8		               iny
.0fc9	d0 fb		               bne  bf1
.0fcb	20 88 10	               jsr  restzp1
.0fce	20 31 0f	               jsr  pop
.0fd1	60		               rts
.0fd2			memfill
.0fd2	20 f6 0e	               jsr  push
.0fd5	20 ba 0f	mf1            jsr  blkfill
.0fd8	c8		               iny
.0fd9	ca		               dex
.0fda	d0 f9		               bne  mf1
.0fdc	20 31 0f	               jsr  pop
.0fdf	60		               rts
.0fe0			memmove
.0fe0	20 f6 0e	               jsr  push
.0fe3	ba		               tsx            ; On se crée un pointeur ...
.0fe4	8a		               txa
.0fe5	18		               clc
.0fe6	69 0b		               adc  #11
.0fe8	a8		               tay
.0fe9	a2 06		               ldx  #$06
.0feb	b9 00 01	nextbyte       lda  $0100,y
.0fee	99 3a 10	               sta  words,y
.0ff1	c8		               iny
.0ff2	ca		               dex
.0ff3	d0 f6		               bne  nextbyte
.0ff5	ad 3a 10	               lda  s
.0ff8	8d 11 10	               sta  source+1
.0ffb	ad 3b 10	               lda  s+1
.0ffe	8d 12 10	               sta  source+2
.1001	ad 3c 10	               lda  d
.1004	8d 0e 10	               sta  destin+1
.1007	ad 3d 10	               lda  d+1
.100a	8d 0f 10	               sta  destin+2
.100d	ad ff ff	destin         lda  $ffff
.1010	8d ff ff	source         sta  $ffff
.1013	ee 0e 10	               inc  destin+1
.1016	d0 03		               bne  src
.1018	ee 0f 10	               inc  destin+2
.101b	ee 11 10	src            inc  source+1
.101e	d0 03		               bne  cnt
.1020	ee 12 10	               inc  source+2
.1023	ad 3e 10	cnt            lda  compte
.1026	d0 08		               bne  decit
.1028	ad 3f 10	               lda  compte+1
.102b	f0 09		               beq  fini
.102d	ce 3f 10	               dec  compte+1
.1030	ce 3e 10	decit          dec  compte
.1033	4c 0d 10	               jmp  destin
.1036	20 31 0f	fini           jsr  pop
.1039	60		               rts
.103a			words
>103a	00 00		s         .word     $0000
>103c	00 00		d         .word     $0000
>103e	00 00		compte    .word     $0000
.1040			decword
.1040	20 f6 0e	               jsr  push
.1043	86 fd		               stx  zpage2
.1045	84 fe		               sty  zpage2+1
.1047	20 31 0f	               jsr  pop
.104a	60		               rts
.104b			inczpage1
.104b			inczp1
.104b	08		               php
.104c	48		               pha
.104d	e6 fb		               inc  zpage1
.104f	a5 fb		               lda  zpage1
.1051	d0 02		               bne  nopage
.1053	e6 fc		               inc  zpage1+1
.1055	68		nopage         pla
.1056	28		               plp
.1057	60		               rts
.1058			deczpage1
.1058			deczp1
.1058	08		                php
.1059	48		                pha
.105a	c6 fb		                dec  zpage1
.105c	d0 02		                bne  nopage
.105e	c6 fc		                dec  zpage1+1
.1060	68		nopage          pla
.1061	28		                plp
.1062	60		                rts
.1063			inczpage2
.1063			inczp2
.1063	08		               php
.1064	48		               pha
.1065	e6 fd		               inc  zpage2
.1067	a5 fd		               lda  zpage2
.1069	d0 02		               bne  nopage
.106b	e6 fe		               inc  zpage2+1
.106d	68		nopage         pla
.106e	28		               plp
.106f	60		               rts
.1070			deczpage2
.1070			deczp2
.1070	08		               php
.1071	c6 fd		               dec  zpage2
.1073	d0 02		               bne  nopage
.1075	c6 fe		               dec  zpage2+1
.1077	28		nopage         plp
.1078	60		               rts
.1079			savezp1
.1079	08		               php
.107a	48		               pha
.107b	a5 fb		               lda  zpage1
.107d	8d 0a 11	               sta  zp1
.1080	a5 fc		               lda  zpage1+1
.1082	8d 0b 11	               sta  zp1+1
.1085	68		               pla
.1086	28		               plp
.1087	60		               rts
.1088			restzp1
.1088	08		               php
.1089	48		               pha
.108a	ad 0a 11	               lda zp1
.108d	85 fb		               sta zpage1
.108f	ad 0b 11	               lda zp1+1
.1092	85 fc		               sta zpage1+1
.1094	68		               pla
.1095	28		               plp
.1096	60		               rts
.1097			savezp2
.1097	08		         php
.1098	48		         pha
.1099	a5 fd		         lda zpage2
.109b	8d 0c 11	         sta zp2
.109e	a5 fe		         lda zpage2+1
.10a0	8d 0d 11	         sta zp2+1
.10a3	68		         pla
.10a4	28		         plp
.10a5	60		         rts
.10a6			restzp2
.10a6	08		                php
.10a7	48		                pha
.10a8	ad 0c 11	                lda  zp2
.10ab	85 fd		                sta  zpage2
.10ad	ad 0d 11	                lda  zp2+1
.10b0	85 fe		                sta  zpage2+1
.10b2	68		                pla
.10b3	28		                plp
.10b4	60		                rts
.10b5			xy2addr
.10b5	08		                php
.10b6	48		                pha
.10b7	8a		                txa
.10b8	48		                pha
.10b9	98		                tya
.10ba	48		                pha
.10bb	ad 05 11	                lda     addr1+1
.10be	8d 07 11	                sta     addr2+1
.10c1	ad 04 11	                lda     addr1
.10c4	8d 06 11	                sta     addr2
.10c7	c0 00		                cpy     #$00
.10c9	f0 0f		                beq     addx
.10cb	18		moreline        clc
.10cc	6d 03 11	                adc     ymult
.10cf	90 03		                bcc     norepy
.10d1	ee 07 11	                inc     addr2+1
.10d4	8d 06 11	norepy          sta     addr2
.10d7	88		                dey
.10d8	d0 f1		                bne     moreline
.10da	8a		addx            txa
.10db	18		                clc
.10dc	6d 06 11	                adc     addr2
.10df	90 03		                bcc     thatsit
.10e1	ee 07 11	                inc     addr2+1
.10e4	8d 06 11	thatsit         sta     addr2
.10e7	68		                pla
.10e8	a8		                tay
.10e9	68		                pla
.10ea	aa		                tax
.10eb	68		                pla
.10ec	28		                plp
.10ed	60		                rts
.10ee			loop
.10ee	ce 0e 11	               dec  loopcount
.10f1	d0 03		               bne  norep
.10f3	ce 0f 11	               dec  loopcount+1
.10f6	ad 0e 11	norep          lda  loopcount
.10f9	c9 00		               cmp  #$00
.10fb	d0 05		               bne  out
.10fd	4d 0f 11	               eor  loopcount+1
.1100	c9 ff		               cmp  #$ff
.1102	60		out            rts
>1103	28		ymult          .byte     40
>1104	00 00		addr1          .word     $0000
>1106	00 00		addr2          .word     $0000
>1108	00 00		bytecnt        .word     $0000
>110a	00 00		zp1            .word   $0000
>110c	00 00		zp2            .word   $0000
>110e	00 00		loopcount      .word     $0000

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1110	01		a2hexcol       .byte     1              ; pour aputscxy
>1111	00		a2hexbkcol     .byte     %00000000
.1112			a2hexpos
>1112	00		a2hexpx        .byte     0              ; pour aputsxy
>1113	00		a2hexpy        .byte     0
>1114	24		a2hexprefix    .byte     "$"            ; pour aputs
>1115	00 00		a2hexstr       .word     $00
>1117	00 00		               .word     $00
>1119	00		               .byte     0              ; 0 end string
>111a	30 30 30 30	abin           .null     "00000000"
>111e	30 30 30 30 00
>1123	20 20 20 00	adec           .null     "   "
.1127			putahexfmtxy
.1127	20 f6 0e	               jsr  push
.112a	20 76 11	               jsr  atohex
.112d	ae 12 11	               ldx  a2hexpx
.1130	ac 13 11	               ldy  a2hexpy
.1133	20 79 0b	               jsr  gotoxy
.1136	a2 14		               ldx  #<a2hexprefix
.1138	a0 11		               ldy  #>a2hexprefix
.113a	20 5f 0b	               jsr  puts
.113d	20 31 0f	               jsr  pop
.1140	60		               rts
.1141			putahexfmt
.1141	20 f6 0e	               jsr  push
.1144	20 76 11	               jsr  atohex
.1147	a2 14		               ldx  #<a2hexprefix
.1149	a0 11		               ldy  #>a2hexprefix
.114b	20 5f 0b	               jsr  puts
.114e	20 31 0f	               jsr  pop
.1151	60		               rts
.1152			putahex
.1152	20 f6 0e	               jsr  push
.1155	20 76 11	               jsr  atohex
.1158	a2 15		               ldx  #<a2hexstr
.115a	a0 11		               ldy  #>a2hexstr
.115c	20 5f 0b	               jsr  puts
.115f	20 31 0f	               jsr  pop
.1162	60		               rts
.1163			nibtohex
.1163	08		               php
.1164	29 0f		               and  #$0f
.1166	f8		               sed
.1167	18		               clc
.1168	69 90		               adc  #$90
.116a	69 40		               adc  #$40
.116c	d8		               cld
.116d	28		               plp
.116e	60		               rts
.116f			lsra4bits
.116f	08		               php
.1170	4a		               lsr
.1171	4a		               lsr
.1172	4a		               lsr
.1173	4a		               lsr
.1174	28		               plp
.1175	60		               rts
.1176			atohex
.1176	08		               php
.1177	48		               pha
.1178	48		               pha
.1179	20 6f 11	               jsr  lsra4bits
.117c	20 63 11	               jsr  nibtohex
.117f	8d 15 11	               sta  a2hexstr
.1182	68		               pla
.1183	20 63 11	               jsr  nibtohex
.1186	8d 16 11	               sta  a2hexstr+1
.1189	a9 00		               lda  #$00                ; set end of string
.118b	8d 17 11	               sta  a2hexstr+2
.118e	68		               pla
.118f	28		               plp
.1190	60		               rts
.1191			xy2hex
.1191	20 f6 0e	               jsr  push
.1194	20 76 11	               jsr  atohex
.1197	8a		               txa
.1198	48		               pha
.1199	20 6f 11	               jsr  lsra4bits
.119c	20 63 11	               jsr  nibtohex
.119f	8d 15 11	               sta  a2hexstr
.11a2	68		               pla
.11a3	20 63 11	               jsr  nibtohex
.11a6	8d 16 11	               sta  a2hexstr+1
.11a9	98		               tya
.11aa	48		               pha
.11ab	20 6f 11	               jsr  lsra4bits
.11ae	20 63 11	               jsr  nibtohex
.11b1	8d 17 11	               sta  a2hexstr+2
.11b4	68		               pla
.11b5	20 63 11	               jsr  nibtohex
.11b8	8d 18 11	               sta  a2hexstr+3
.11bb	a9 00		               lda  #$00                ; 0 ended string
.11bd	8d 19 11	               sta  a2hexstr+4
.11c0	20 31 0f	               jsr  pop
.11c3			atobin
.11c3	20 f6 0e	               jsr  push
.11c6	a2 08		               ldx  #8
.11c8	a0 00		               ldy  #0
.11ca	18		               clc
.11cb	2a		nextbit        rol
.11cc	48		               pha
.11cd	69 00		               adc  #$00
.11cf	29 01		               and  #$01
.11d1	20 63 11	               jsr  nibtohex
.11d4	99 1a 11	               sta  abin,y
.11d7	68		               pla
.11d8	c8		               iny
.11d9	ca		               dex
.11da	d0 ef		               bne  nextbit
.11dc	a9 00		               lda  #0
.11de	99 1a 11	               sta  abin,y
.11e1	20 31 0f	               jsr  pull
.11e4	60		               rts
.11e5			putabin
.11e5	20 c3 11	               jsr     atobin
.11e8	20 f6 0e	               jsr     push
.11eb	a2 1a		               ldx     #<abin
.11ed	a0 11		               ldy     #>abin
.11ef	20 5f 0b	               jsr     puts
.11f2	20 31 0f	               jsr     pop
.11f5	60		               rts
.11f6			printabin
.11f6	20 f6 0e	               jsr     push
.11f9	a2 1a		               ldx     #<abin
.11fb	a0 11		               ldy     #>abin
.11fd	20 5f 0b	               jsr     puts
.1200	20 31 0f	               jsr     pop
.1203	60		               rts
.1204			putabinfmt
.1204	08		               php
.1205	48		               pha
.1206	a9 25		               lda     #"%"
.1208	20 59 0b	               jsr     putch
.120b	68		               pla
.120c	20 e5 11	               jsr     putabin
.120f	28		               plp
.1210	60		               rts
.1211			putabinxy
.1211	20 79 0b	               jsr     gotoxy
.1214	20 e5 11	               jsr     putabin
.1217	60		               rts
.1218			putabinfmtxy
.1218	20 79 0b	               jsr     gotoxy
.121b	20 04 12	               jsr     putabinfmt
.121e	60		               rts
.121f			atodec
.121f	20 f6 0e	               jsr  push
.1222	f8		               sed            ; On se place en mode décimal.
.1223	aa		               tax            ; On déplace a dans x.
.1224	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.1226	a9 00		               lda  #$00      ; 0 dans A.
.1228	18		nextbit        clc            ; Bit carry a 0.
.1229	69 01		               adc  #$01      ; Ajoute 1 a A.
.122b	90 01		               bcc  decx      ; Pas de carry, pas de report.
.122d	c8		               iny            ; On incrémente Y
.122e	ca		decx           dex            ; X=X-1
.122f	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.1231	48		               pha            ; A sur le stack.
.1232	98		               tya            ; Y dans A (MSB)
.1233	20 63 11	               jsr  nibtohex  ; a hex petsci ...
.1236	8d 23 11	               sta  adec      ; ... dans tampon.
.1239	68		               pla            ; Récupere A
.123a	48		               pha            ;
.123b	20 63 11	               jsr  nibtohex
.123e	8d 25 11	               sta  adec+2
.1241	68		               pla
.1242	6a		               ror
.1243	6a		               ror
.1244	6a		               ror
.1245	6a		               ror
.1246	20 63 11	               jsr  nibtohex
.1249	8d 24 11	               sta  adec+1
.124c	d8		               cld            ; On revient en mode binaire.
.124d	20 31 0f	               jsr  pull
.1250	60		               rts
.1251			putadec
.1251	20 f6 0e	               jsr  push
.1254	20 1f 12	               jsr  atodec
.1257	a2 23		               ldx  #<adec
.1259	a0 11		               ldy  #>adec+1
.125b	20 5f 0b	               jsr  puts
.125e	20 31 0f	               jsr  pop
.1261	60		               rts

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1262	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1266	00 00 00 00 00 00 00 00 00 0d 00 00
>1272	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1276	00 00 00 00 00 00 00 00 00 00 00 00
>1282	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1286	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1292	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1296	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>12a2	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>12a6	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>12b2	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>12b6	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>12c2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>12c6	00 00 00 00 00 00 00 00 00 00 00 00
>12d2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>12d6	00 00 00 00 00 00 00 00 00 00 00 00
>12e2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>12e6	00 00 00 00 00 00 00 00 00 00 00 00
>12f2	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>12f6	00 00 00 00 00 00 00 00 00 00 00 00
>1302	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1306	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1312	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1316	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1322	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1326	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1332	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1336	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1342	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1346	00 00 00 00 00 00 00 00 00 00 00 00
>1352	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1356	00 00 00 00 00 00 00 00 00 00 00 00
.1362			waitstop
.1362	20 f6 0e	               jsr  push
.1365	20 ed f6	wait           jsr  k_stop
.1368	d0 fb		               bne  wait
.136a	20 31 0f	               jsr  pop
.136d	60		               rts
.136e			anykey
.136e	08		               php
.136f	48		               pha
.1370	a5 cb		nokey          lda 203
.1372	c9 40		               cmp #64
.1374	f0 fa		               beq nokey
.1376	20 7c 13	               jsr releasekey
.1379	68		               pla
.137a	28		               plp
.137b	60		               rts
.137c			releasekey
.137c	08		               php
.137d	48		               pha
.137e	a5 cb		keypressed     lda 203
.1380	c9 40		               cmp #64
.1382	d0 fa		               bne keypressed
.1384	68		               pla
.1385	28		               plp
.1386	60		               rts
.1387			getkey
.1387	20 e4 ff	again          jsr  getin
.138a	c9 00		               cmp  #0
.138c	f0 f9		               beq  again
.138e	60		               rts
.138f			kbflushbuff
.138f	08		               php
.1390	48		               pha
.1391	20 e4 ff	again          jsr  getin
.1394	c9 00		               cmp  #0
.1396	d0 f9		               bne  again
.1398	68		               pla
.1399	28		               plp
.139a	60		               rts
.139b			waitkey
.139b	20 f6 0e	               jsr  push
.139e	8d ec 13	               sta  thekey
.13a1	20 e4 ff	nope           jsr  getin
.13a4	20 d2 ff	               jsr  chrout
.13a7	cd ec 13	               cmp  thekey
.13aa	d0 f5		               bne  nope
.13ac	20 d2 ff	               jsr  chrout
.13af	20 31 0f	               jsr  pop
.13b2	60		               rts
.13b3			waitspace
.13b3	20 f6 0e	               jsr  push
.13b6	a9 7f		wait           lda  #$7f  ;%01111111
.13b8	8d 00 dc	               sta  $dc00
.13bb	ad 01 dc	               lda  $dc01
.13be	29 10		               and  #$10  ;mask %00010000
.13c0	d0 f4		               bne  wait
.13c2	20 31 0f	               jsr  pop
.13c5			waitsstop
.13c5	20 f6 0e	               jsr  push
.13c8	20 ed f6	wait           jsr  k_stop  ;%01111111
.13cb	d0 fb		               bne  wait
.13cd	20 31 0f	               jsr  pop
.13d0			waitreturn
.13d0	20 f6 0e	               jsr  push
.13d3	ad ed 13	               lda  thecount
.13d6	8d 00 04	               sta  scrnram
.13d9	a9 02		               lda  #$02
.13db	8d 00 d8	               sta  colorram
.13de	20 e4 ff	nope           jsr  getin
.13e1	c9 0d		nohex          cmp  #$0d
.13e3	d0 f9		               bne  nope
.13e5	ee ed 13	               inc  thecount
.13e8	20 31 0f	               jsr  pop
.13eb	60		               rts
>13ec	00		thekey         .byte   0
>13ed	01		thecount       .byte   $01

;******  Return to file: libtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.13ee			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.13ee	20 f6 0e	                jsr push
.13f1	08		                php
.13f2	8d b2 15	                sta  rega
.13f5	68		                pla
.13f6	8d b5 15	                sta  regp
.13f9	8e b3 15	                stx  regx
.13fc	8c b4 15	                sty  regy
.13ff	ba		                tsx
.1400	8e b6 15	                stx  regs
.1403	68		                pla
.1404	8d b9 15	                sta  regpcl
.1407	8d ba 15	                sta  regpcl2
.140a	68		                pla
.140b	8d b7 15	                sta  regpch
.140e	8d b8 15	                sta  regpch2
.1411	ad b2 15	                lda  rega
.1414	48		                pha
.1415	20 63 11	                jsr  nibtohex
.1418	8d 5c 15	                sta  vala+1
.141b	68		                pla
.141c	20 6f 11	                jsr  lsra4bits
.141f	20 63 11	                jsr  nibtohex
.1422	8d 5b 15	                sta  vala
.1425	ad b4 15	                lda  regy
.1428	48		                pha
.1429	20 63 11	                jsr  nibtohex
.142c	8d 70 15	                sta  valy+1
.142f	68		                pla
.1430	20 6f 11	                jsr  lsra4bits
.1433	20 63 11	                jsr  nibtohex
.1436	8d 6f 15	                sta  valy
.1439	ad b3 15	                lda  regx
.143c	48		                pha
.143d	20 63 11	                jsr  nibtohex
.1440	8d 66 15	                sta  valx+1
.1443	68		                pla
.1444	20 6f 11	                jsr  lsra4bits
.1447	20 63 11	                jsr  nibtohex
.144a	8d 65 15	                sta  valx
.144d	ad b5 15	                lda  regp
.1450	48		                pha
.1451	20 63 11	                jsr  nibtohex
.1454	8d 7a 15	                sta  valp+1
.1457	68		                pla
.1458	20 6f 11	                jsr  lsra4bits
.145b	20 63 11	                jsr  nibtohex
.145e	8d 79 15	                sta  valp
.1461	ad b6 15	                lda  regs
.1464	48		                pha
.1465	20 63 11	                jsr  nibtohex
.1468	8d 84 15	                sta  vals+1
.146b	68		                pla
.146c	20 6f 11	                jsr  lsra4bits
.146f	20 63 11	                jsr  nibtohex
.1472	8d 83 15	                sta  vals
.1475	18		                clc
.1476	ad ba 15	                lda regpcl2
.1479	69 01		                adc #$01
.147b	8d ba 15	                sta regpcl2
.147e	ad ba 15	                lda regpcl2
.1481	d0 03		                bne noreport
.1483	ee b8 15	                inc regpch2
.1486	ad b8 15	    noreport    lda regpch2
.1489	48		                pha
.148a	20 63 11	                jsr  nibtohex
.148d	8d 8f 15	                sta  valpch+1
.1490	68		                pla
.1491	20 6f 11	                jsr  lsra4bits
.1494	20 63 11	                jsr  nibtohex
.1497	8d 8e 15	                sta  valpch
.149a	ad ba 15	                lda  regpcl2
.149d	48		                pha
.149e	20 63 11	                jsr  nibtohex
.14a1	8d 91 15	                sta  valpcl+1
.14a4	68		                pla
.14a5	20 6f 11	                jsr  lsra4bits
.14a8	20 63 11	                jsr  nibtohex
.14ab	8d 90 15	                sta  valpcl
.14ae	a5 fb		                lda  zpage1
.14b0	48		                pha
.14b1	20 63 11	                jsr  nibtohex
.14b4	8d 9f 15	                sta  valz1l
.14b7	68		                pla
.14b8	20 6f 11	                jsr  lsra4bits
.14bb	20 63 11	                jsr  nibtohex
.14be	8d a0 15	                sta  valz1l+1
.14c1	a5 fc		                lda  zpage1+1
.14c3	48		                pha
.14c4	20 63 11	                jsr  nibtohex
.14c7	8d 9d 15	                sta  valz1h
.14ca	68		                pla
.14cb	20 6f 11	                jsr  lsra4bits
.14ce	20 63 11	                jsr  nibtohex
.14d1	8d 9e 15	                sta  valz1h+1
.14d4	a5 fd		                lda  zpage2
.14d6	48		                pha
.14d7	20 63 11	                jsr  nibtohex
.14da	8d ae 15	                sta  valz2l
.14dd	68		                pla
.14de	20 6f 11	                jsr  lsra4bits
.14e1	20 63 11	                jsr  nibtohex
.14e4	8d af 15	                sta  valz2l+1
.14e7	a5 fe		                lda  zpage2+1
.14e9	48		                pha
.14ea	20 63 11	                jsr  nibtohex
.14ed	8d ac 15	                sta  valz2h
.14f0	68		                pla
.14f1	20 6f 11	                jsr  lsra4bits
.14f4	20 63 11	                jsr  nibtohex
.14f7	8d ad 15	                sta  valz2h+1
.14fa	20 40 0c	                jsr  setinverse
.14fd	78		                sei
.14fe	a2 54		                ldx  #<srega
.1500	a0 15		                ldy  #>srega+1
.1502	20 e8 0b	                jsr  putscxy
.1505	a2 5e		                ldx  #<sregx
.1507	a0 15		                ldy  #>sregx+1
.1509	20 e8 0b	                jsr  putscxy
.150c	a2 68		                ldx  #<sregy
.150e	a0 15		                ldy  #>sregy+1
.1510	20 e8 0b	                jsr  putscxy
.1513	a2 72		                ldx  #<sregp
.1515	a0 15		                ldy  #>sregp+1
.1517	20 e8 0b	                jsr  putscxy
.151a	a2 7c		                ldx  #<sregs
.151c	a0 15		                ldy  #>sregs+1
.151e	20 e8 0b	                jsr  putscxy
.1521	a2 86		                ldx  #<sregpc
.1523	a0 15		                ldy  #>sregpc+1
.1525	20 e8 0b	                jsr  putscxy
.1528	a2 94		                ldx  #<sregz1
.152a	a0 15		                ldy  #>sregz1+1
.152c	20 e8 0b	                jsr  putscxy
.152f	a2 a3		                ldx  #<sregz2
.1531	a0 15		                ldy  #>sregz2+1
.1533	20 e8 0b	                jsr  putscxy
.1536	58		                cli
.1537	20 48 0c	                jsr  clrinverse
.153a	ad b7 15	                lda  regpch
.153d	48		                pha
.153e	ad b9 15	                lda  regpcl
.1541	48		                pha
.1542	ac b4 15	                ldy  regy
.1545	ae b3 15	                ldx  regx
.1548	ad b5 15	                lda  regp
.154b	48		                pha
.154c	ad b2 15	                lda  rega
.154f	28		                plp
.1550	20 31 0f	                jsr pop
.1553	60		                rts
>1554	01 00 17	srega   .byte   colr,coln,line
>1557	20 41 3a 24	        .text   ' a:$' ;4,24
>155b	00 00 00	vala    .byte   0,0,0
>155e	01 06 17	sregx   .byte   colr,coln+6,line
>1561	20 58 3a 24	        .text   ' x:$' ;4,24
>1565	00 00 00	valx    .byte   0,0,0
>1568	01 0c 17	sregy   .byte   colr,coln+12,line
>156b	20 59 3a 24	        .text   ' y:$' ;4,24
>156f	00 00 00	valy    .byte   0,0,0
>1572	01 12 17	sregp   .byte   colr,coln+18,line
>1575	20 50 3a 24	        .text   ' p:$' ;4,24
>1579	00 00 00	valp    .byte   0,0,0
>157c	01 18 17	sregs   .byte   colr,coln+24,line
>157f	20 53 3a 24	        .text   ' s:$' ;4,24
>1583	00 00 00	vals    .byte   0,0,0
>1586	01 1e 17	sregpc  .byte   colr,coln+30,line
>1589	20 50 43 3a	        .text   ' pc:$' ;4,24
>158d	24
>158e	00 00		valpch  .byte   0,0
>1590	00 00 20 00	valpcl  .byte   0,0,32,0
>1594	01 03 18	sregz1  .byte   colr,coln+3,line+1
>1597	20 5a 50 31	        .text   ' zp1:$' ;4,24
>159b	3a 24
>159d	00 00		valz1h  .byte   0,0
>159f	00 00 20 00	valz1l  .byte   0,0,32,0
>15a3	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>15a6	20 5a 50 32	        .text   ' zp2:$' ;4,24
>15aa	3a 24
>15ac	00 00		valz2h  .byte   0,0
>15ae	00 00 20 00	valz2l  .byte   0,0,32,0
>15b2	00		rega    .byte   0
>15b3	00		regx    .byte   0
>15b4	00		regy    .byte   0
>15b5	00		regp    .byte   0
>15b6	00		regs    .byte   0
>15b7	00		regpch  .byte   0
>15b8	00		regpch2 .byte   0
>15b9	00		regpcl  .byte   0
>15ba	00		regpcl2 .byte   0
>15bb	00		vzp1h   .byte   0
>15bc	00		vzp1l   .byte   0
>15bd	00		vzp2h   .byte   0
>15be	00		vzp2l   .byte   0

;******  Return to file: libtest03.asm


;******  End of listing

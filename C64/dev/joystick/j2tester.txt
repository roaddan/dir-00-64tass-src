
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L j2tester.txt -o j2tester.prg j2tester.asm
; Sun Jun 23 00:41:36 2024

;Offset	;Hex		;Source

;******  Processing input file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: j2tester.asm

.080d			main
.080d	20 63 0d	               jsr       scrmaninit
.0810	20 d1 11	               jsr       js_init
.0813	a9 80		               lda       #$80
.0815	8d 4f 0d	               sta       curcol
.0818	a9 00		               lda       #0
.081a	8d 21 d0	               sta       vicback0col
.081d	a9 02		               lda       #vrouge
.081f	8d 50 0d	               sta       brdcol
.0822	8d 20 d0	               sta       vicbordcol
.0825	20 f3 0d	               jsr       cls
.0828	a9 20		               lda       #$20
.082a	09 00		               ora       #%00000000
.082c	a0 04		               ldy       #$04
.082e	a2 04		               ldx       #$04
.0830	20 de 0a	               jsr       memfill
.0833	a9 00		               lda       #$00
.0835	a0 d8		               ldy       #$d8
.0837	20 de 0a	               jsr       memfill
.083a	20 5d 16	               jsr       sprt_init
.083d	20 50 0e	goagain        jsr       setinverse
.0840	a2 0f		               ldx       #<bstring1
.0842	a0 09		               ldy       #>bstring1
.0844	20 f3 0e	               jsr       putscxy
.0847	a2 3c		               ldx       #<bstring2
.0849	a0 09		               ldy       #>bstring2
.084b	20 f3 0e	               jsr       putscxy
.084e	a2 69		               ldx       #<bstring3
.0850	a0 09		               ldy       #>bstring3
.0852	20 f3 0e	               jsr       putscxy
.0855	a2 96		               ldx       #<bstring4
.0857	a0 09		               ldy       #>bstring4
.0859	20 f3 0e	               jsr       putscxy
.085c	20 5a 0e	               jsr       clrinverse
.085f	a2 ad		               ldx       #<js_status1
.0861	a0 09		               ldy       #>js_status1
.0863	20 f3 0e	               jsr       putscxy
.0866	a2 c5		               ldx       #<js_status2
.0868	a0 09		               ldy       #>js_status2
.086a	20 f3 0e	               jsr       putscxy
.086d	a2 dc		               ldx       #<js_status3
.086f	a0 09		               ldy       #>js_status3
.0871	20 f3 0e	               jsr       putscxy
.0874	a2 f5		               ldx       #<js_status4
.0876	a0 09		               ldy       #>js_status4
.0878	20 f3 0e	               jsr       putscxy
.087b	a2 0e		               ldx       #<js_status5
.087d	a0 0a		               ldy       #>js_status5
.087f	20 f3 0e	               jsr       putscxy
.0882	a2 24		               ldx       #<js_status6
.0884	a0 0a		               ldy       #>js_status6
.0886	20 f3 0e	               jsr       putscxy
.0889	a2 00		               ldx       #$00
.088b	a0 0f		               ldy       #$0f
.088d	20 b6 0e	               jsr       gotoxy
.0890	a9 07		               lda       #vjaune
.0892	20 22 0f	               jsr       setcurcol
.0895	a2 00		               ldx       #$00
.0897	20 37 0f	               jsr       setbkcol
.089a			looper
.089a	20 e8 11	               jsr       js_scan
.089d	20 06 14	               jsr       js_showvals
.08a0	20 e9 16	               jsr       sprt_move
.08a3			loopit
.08a3	a2 16		               ldx       #$16
.08a5	a0 11		               ldy       #$11
.08a7	20 b6 0e	               jsr       gotoxy
.08aa	a9 03		               lda       #3
.08ac	20 22 0f	               jsr       setcurcol
.08af	ee 0e 09	               inc       onebyte
.08b2	ad 0e 09	               lda       onebyte
.08b5	ad ce 15	               lda       js_2fire
.08b8	20 fb 0c	               jsr       putabinfmt
.08bb	48		               pha
.08bc	ad ce 15	               lda       js_2fire
.08bf	f0 42		               beq       nochange
.08c1	ad 20 d0	               lda       vicbordcol
.08c4	18		               clc
.08c5	69 00		               adc       #$0
.08c7	29 0f		               and       #$0f
.08c9	8d 20 d0	               sta       vicbordcol
.08cc	ad cd 15	               lda       js_2y
.08cf	c9 04		               cmp       #$04
.08d1	d0 20		               bne       toborder
.08d3	ad cc 15	               lda       js_2x
.08d6	c9 0b		               cmp       #$0b
.08d8	30 19		               bmi       toborder
.08da	c9 1d		               cmp       #$1d
.08dc	10 15		               bpl       toborder
.08de	ee b2 16	               inc       sprt_ptr
.08e1	ad b2 16	               lda       sprt_ptr
.08e4	20 13 10	               jsr       showregs
.08e7	c9 09		               cmp       #9
.08e9	90 02		               bcc       drawsptr
.08eb	a9 00		               lda       #$00
.08ed	8d b2 16	drawsptr       sta       sprt_ptr
.08f0	20 5d 16	               jsr       sprt_init
.08f3	ad 20 d0	toborder       lda       vicbordcol
.08f6	38		               sec
.08f7	69 00		               adc       #0
.08f9	29 0f		               and       #$0f
.08fb	8d 29 d0	               sta       $d029
.08fe	a9 00		               lda       #$00
.0900	8d ce 15	               sta       js_2fire
.0903			nochange
.0903	e8		               inx
.0904	68		               pla
.0905	20 e1 ff	               jsr       kstop
.0908	d0 90		               bne       looper
.090a	20 66 fe	               jsr       k_warmboot
.090d	60		out            rts
>090e	00		onebyte        .byte     0
>090f	0e 40 00 00	bstring1       .byte     vbleu1,bkcol1,0,0
>0913	20 20 20 20	               .text     "      Visualisation du port jeu #2      "
>0917	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>0927	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>0937	20 20 20 20
>093b	00		               .byte     0
>093c	0b 80 00 01	bstring2       .byte     vgris,bkcol2,0,1
>0940	20 50 12 0f	               .text     " Programme assembleur pour 6502 sur C64 "
>0944	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>0954	12 20 10 0f 15 12 20 36 35 30 32 20 13 15 12 20
>0964	43 36 34 20
>0968	00		               .byte     0
>0969	0a c0 00 02	bstring3       .byte     vrose,bkcol3,0,2
>096d	20 20 20 20	               .text     "     par Daniel Lafrance (2024-06) C    "
>0971	20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06 12
>0981	01 0e 03 05 20 28 32 30 32 34 2d 30 36 29 20 43
>0991	20 20 20 20
>0995	00		               .byte     0
>0996	07 c0 0b 04	bstring4       .byte     vjaune,bkcol3,11,4
>099a	20 43 08 01	               .text     " Changer pointeur "
>099e	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>09ac	00		               .byte     0
>09ad	0d 00 13 16	js_status1     .byte     vvert1,bkcol0,19,22
>09b1	20 20 20 15	               .text     "   up <----1> haut "
>09b5	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>09c4	00		               .byte     0
>09c5	0e 00 13 15	js_status2     .byte     vbleu1,bkcol0,19,21
>09c9	20 04 0f 17	               .text     " down <---2-> bas "
>09cd	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>09db	00		               .byte     0
>09dc	0a 00 13 14	js_status3     .byte     vrose,bkcol0,19,20
>09e0	20 0c 05 06	               .text     " left <--4--> gauche"
>09e4	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>09f4	00		               .byte     0
>09f5	07 00 13 13	js_status4     .byte     vjaune,bkcol0,19,19
>09f9	12 09 07 08	               .text     "right <-8---> droite"
>09fd	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a0d	00		               .byte     0
>0a0e	01 00 13 12	js_status5     .byte     vblanc,bkcol0,19,18
>0a12	20 46 09 12	               .text     " Fire <1----> Feu"
>0a16	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>0a23	00		               .byte     0
>0a24	03 00 01 17	js_status6     .byte     vcyan,bkcol0,1,23
>0a28	2b 2d 3e 20	               .text     "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a2c	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a3c	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0a4c	24 31 46
>0a4f	00		               .byte     0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ;   0 6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ;   1 6510 port used as memory map reg.
=$02			unused2        =    $02       ;   2 unused.
=$03			adray1         =    $03       ; 3-4 Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6 Vector to routine to convert a number ...
=$07			b_charac       =    $07       ;   7 Search character for scanning ...
=$08			b_endchr       =    $08       ;   8 Search character for scanning ...
=$09			b_trmpos       =    $09       ;   9 Cursor column position before the ...
=$0a			verck          =    $0a       ;  10 Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ;  11 Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ;  12 Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ;  13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ;  14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ;  15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ;  16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ;  17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ;  18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ;  19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ;  20-21 Integer line number value.
=$16			temppt         =    $16       ;  22 Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ;  23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ;  43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ;  45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ;  47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ;  49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ;  51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ;  53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ;  55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ;  57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ;  59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ;  61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ;  63-64 Current DATA line number.
=$41			datptr         =    $41       ;  65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ;  67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ;  69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ;  71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ;  73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ;  75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ;  77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ;  78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ;  80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ; 115
=$79			chrgot         =    $79       ; 121
=$90			kiostatus      =    $90       ; 144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ; 183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ; 185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ; 186 Current device number (byte)
=$bb			curfptr        =    $bb       ; 187 Current file pointer (word)
=$c1			stal           =    $c1       ; $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ; 197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ; 198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ; 251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ; 253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ; 631
=$286			carcol         =    $286      ; 646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0a50			libtart

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0a50			push
.0a50	08		          php            ; stack : flg, pcl, pch
.0a51	78		          sei
.0a52	8d 8c 0a	          sta  ra        ; save a
.0a55	68		          pla            ; stack : pcl, pch
.0a56	8d 8b 0a	          sta  rp        ; save rp
.0a59	68		          pla            ; stack : pch
.0a5a	8d 8d 0a	          sta  pc        ; save pcl
.0a5d	68		          pla            ; stack : -
.0a5e	8d 8e 0a	          sta  pc+1      ; save pch
.0a61	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0a63	48		          pha            ; stack : zp1l
.0a64	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0a66	48		          pha            ; stack : zp1h, zp1l
.0a67	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0a69	48		          pha            ; stack : zp2l, zp1h, zp1l
.0a6a	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0a6c	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0a6d	ad 8b 0a	          lda  rp        ; get rp
.0a70	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0a71	ad 8c 0a	          lda  ra        ; get a
.0a74	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a75	8a		          txa            ; get x
.0a76	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a77	98		          tya            ; get y
.0a78	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a79	ad 8e 0a	          lda  pc+1      ; get pch
.0a7c	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a7d	ad 8d 0a	          lda  pc        ; get pcl
.0a80	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a81	ad 8b 0a	          lda  rp        ; get rp
.0a84	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a85	ad 8c 0a	          lda  ra        ; get a
.0a88	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a89	58		          cli
.0a8a	60		          rts
>0a8b	00		rp        .byte     0
>0a8c	00		ra        .byte     0
>0a8d	00 00		pc        .word     0
.0a8f			pull
.0a8f			pop
.0a8f	78		          sei
.0a90	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a91	8d c4 0a	          sta  pc        ; save pcl
.0a94	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a95	8d c5 0a	          sta  pc+1      ; save pch
.0a98	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a99	a8		          tay            ; set y
.0a9a	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a9b	aa		          tax            ; set x
.0a9c	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0a9d	8d c3 0a	          sta  ra        ; save a
.0aa0	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0aa1	8d c2 0a	          sta  rp        ; save rp
.0aa4	68		          pla            ; stack : zp2l, zp1h, zp1l
.0aa5	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0aa7	68		          pla            ; stack : zp1h, zp1l
.0aa8	85 fd		          sta  zpage2    ; get zpage2 High byte
.0aaa	68		          pla            ; stack : zp1l
.0aab	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0aad	68		          pla            ; stack :
.0aae	85 fb		          sta  zpage1    ; get zpage1 High byte
.0ab0	ad c5 0a	          lda  pc+1      ; get pch
.0ab3	48		          pha            ; stack : pch
.0ab4	ad c4 0a	          lda  pc
.0ab7	48		          pha            ; stack : pcl, pch
.0ab8	ad c2 0a	          lda  rp        ; get rp
.0abb	48		          pha            ; stack : rp, pcl, pch
.0abc	ad c3 0a	          lda  ra        ; set ra
.0abf	58		          cli
.0ac0	28		          plp            ; stack : pcl, pch
.0ac1	60		          rts
>0ac2	00		rp        .byte     0
>0ac3	00		ra        .byte     0
>0ac4	00 00		pc        .word     0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0ac6			blkfill
.0ac6	20 50 0a	bf0            jsr  push
.0ac9	20 87 0b	               jsr  savezp1
.0acc	84 fc		               sty  zpage1+1
.0ace	a0 00		               ldy  #$00
.0ad0	84 fb		               sty  zpage1
.0ad2	91 fb		bf1            sta  (zpage1),y
.0ad4	c8		               iny
.0ad5	d0 fb		               bne  bf1
.0ad7	20 96 0b	               jsr  restzp1
.0ada	20 8f 0a	               jsr  pop
.0add	60		               rts
.0ade			memfill
.0ade	20 50 0a	               jsr  push
.0ae1	20 c6 0a	mf1            jsr  blkfill
.0ae4	c8		               iny
.0ae5	ca		               dex
.0ae6	d0 f9		               bne  mf1
.0ae8	20 8f 0a	               jsr  pop
.0aeb	60		               rts
.0aec			memmove
.0aec	20 50 0a	               jsr  push
.0aef	ba		               tsx            ; On se crée un pointeur ...
.0af0	8a		               txa
.0af1	18		               clc
.0af2	69 0b		               adc  #11
.0af4	a8		               tay
.0af5	a2 06		               ldx  #$06
.0af7	b9 00 01	nextbyte       lda  $0100,y
.0afa	99 46 0b	               sta  words,y
.0afd	c8		               iny
.0afe	ca		               dex
.0aff	d0 f6		               bne  nextbyte
.0b01	ad 46 0b	               lda  s
.0b04	8d 1d 0b	               sta  source+1
.0b07	ad 47 0b	               lda  s+1
.0b0a	8d 1e 0b	               sta  source+2
.0b0d	ad 48 0b	               lda  d
.0b10	8d 1a 0b	               sta  destin+1
.0b13	ad 49 0b	               lda  d+1
.0b16	8d 1b 0b	               sta  destin+2
.0b19	ad ff ff	destin         lda  $ffff
.0b1c	8d ff ff	source         sta  $ffff
.0b1f	ee 1a 0b	               inc  destin+1
.0b22	d0 03		               bne  src
.0b24	ee 1b 0b	               inc  destin+2
.0b27	ee 1d 0b	src            inc  source+1
.0b2a	d0 03		               bne  cnt
.0b2c	ee 1e 0b	               inc  source+2
.0b2f	ad 4a 0b	cnt            lda  compte
.0b32	d0 08		               bne  decit
.0b34	ad 4b 0b	               lda  compte+1
.0b37	f0 09		               beq  fini
.0b39	ce 4b 0b	               dec  compte+1
.0b3c	ce 4a 0b	decit          dec  compte
.0b3f	4c 19 0b	               jmp  destin
.0b42	20 8f 0a	fini           jsr  pop
.0b45	60		               rts
.0b46			words
>0b46	00 00		s         .word     $0000
>0b48	00 00		d         .word     $0000
>0b4a	00 00		compte    .word     $0000
.0b4c			decword
.0b4c	20 50 0a	               jsr  push
.0b4f	86 fd		               stx  zpage2
.0b51	84 fe		               sty  zpage2+1
.0b53	20 8f 0a	               jsr  pop
.0b56	60		               rts
.0b57			inczp1
.0b57	08		               php
.0b58	48		               pha
.0b59	e6 fb		               inc  zpage1
.0b5b	a5 fb		               lda  zpage1
.0b5d	d0 02		               bne  nopage
.0b5f	e6 fc		               inc  zpage1+1
.0b61	68		nopage         pla
.0b62	28		               plp
.0b63	60		               rts
.0b64			deczp1
.0b64	08		                php
.0b65	48		                pha
.0b66	c6 fb		                dec  zpage1
.0b68	d0 02		                bne  nopage
.0b6a	c6 fc		                dec  zpage1+1
.0b6c	68		nopage          pla
.0b6d	28		                plp
.0b6e	60		                rts
.0b6f			inczp2
.0b6f	08		               php
.0b70	48		               pha
.0b71	e6 fd		               inc  zpage2
.0b73	a5 fd		               lda  zpage2
.0b75	d0 02		               bne  nopage
.0b77	e6 fe		               inc  zpage2+1
.0b79	68		nopage         pla
.0b7a	28		               plp
.0b7b	60		               rts
.0b7c			deczp2
.0b7c	08		               php
.0b7d	48		               pha
.0b7e	a5 fd		               lda  zpage2
.0b80	d0 02		               bne  nopage
.0b82	c6 fe		               dec  zpage2+1
.0b84	68		nopage         pla
.0b85	28		               plp
.0b86	60		               rts
.0b87			savezp1
.0b87	08		               php
.0b88	48		               pha
.0b89	a5 fb		               lda  zpage1
.0b8b	8d 03 0c	               sta  zp1
.0b8e	a5 fc		               lda  zpage1+1
.0b90	8d 04 0c	               sta  zp1+1
.0b93	68		               pla
.0b94	28		               plp
.0b95	60		               rts
.0b96			restzp1
.0b96	08		               php
.0b97	48		               pha
.0b98	ad 03 0c	               lda zp1
.0b9b	85 fb		               sta zpage1
.0b9d	ad 04 0c	               lda zp1+1
.0ba0	85 fc		               sta zpage1+1
.0ba2	68		               pla
.0ba3	28		               plp
.0ba4	60		               rts
.0ba5			savezp2
.0ba5	08		         php
.0ba6	48		         pha
.0ba7	a5 fd		         lda zpage2
.0ba9	8d 05 0c	         sta zp2
.0bac	a5 fe		         lda zpage2+1
.0bae	8d 06 0c	         sta zp2+1
.0bb1	68		         pla
.0bb2	28		         plp
.0bb3	60		         rts
.0bb4			restzp2
.0bb4	08		                php
.0bb5	48		                pha
.0bb6	ad 05 0c	                lda  zp2
.0bb9	85 fd		                sta  zpage2
.0bbb	ad 06 0c	                lda  zp2+1
.0bbe	85 fe		                sta  zpage2+1
.0bc0	68		                pla
.0bc1	28		                plp
.0bc2	60		                rts
.0bc3			xy2addr
.0bc3	08		                php
.0bc4	48		                pha
.0bc5	8a		                txa
.0bc6	48		                pha
.0bc7	98		                tya
.0bc8	48		                pha
.0bc9	ad fe 0b	                lda     addr1+1
.0bcc	8d 00 0c	                sta     addr2+1
.0bcf	ad fd 0b	                lda     addr1
.0bd2	8d ff 0b	                sta     addr2
.0bd5	c0 00		                cpy     #$00
.0bd7	f0 0f		                beq     addx
.0bd9	18		moreline        clc
.0bda	6d fc 0b	                adc     ymult
.0bdd	90 03		                bcc     norepy
.0bdf	ee 00 0c	                inc     addr2+1
.0be2	8d ff 0b	norepy          sta     addr2
.0be5	88		                dey
.0be6	d0 f1		                bne     moreline
.0be8	8a		addx            txa
.0be9	18		                clc
.0bea	6d ff 0b	                adc     addr2
.0bed	90 03		                bcc     thatsit
.0bef	ee 00 0c	                inc     addr2+1
.0bf2	8d ff 0b	thatsit         sta     addr2
.0bf5	68		                pla
.0bf6	a8		                tay
.0bf7	68		                pla
.0bf8	aa		                tax
.0bf9	68		                pla
.0bfa	28		                plp
.0bfb	60		                rts
>0bfc	28		ymult          .byte     40
>0bfd	00 00		addr1          .word     $0000
>0bff	00 00		addr2          .word     $0000
>0c01	00 00		bytecnt        .word     $0000
>0c03	00 00		zp1        .word   $0000
>0c05	00 00		zp2        .word   $0000

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0c07	01		a2hexcol       .byte     1              ; pour aputscxy
>0c08	00		a2hexbkcol     .byte     %00000000
.0c09			a2hexpos
>0c09	00		a2hexpx        .byte     0              ; pour aputsxy
>0c0a	00		a2hexpy        .byte     0
>0c0b	24		a2hexprefix    .byte     "$"            ; pour aputs
>0c0c	00 00		a2hexstr       .word     $00
>0c0e	00 00		               .word     $00
>0c10	00		               .byte     0              ; 0 end string
>0c11	30 30 30 30	abin           .null     "00000000"
>0c15	30 30 30 30 00
>0c1a	20 20 20 00	adec           .null     "   "
.0c1e			putahexfmtxy
.0c1e	20 50 0a	               jsr  push
.0c21	20 6d 0c	               jsr  a2hex
.0c24	ae 09 0c	               ldx  a2hexpx
.0c27	ac 0a 0c	               ldy  a2hexpy
.0c2a	20 b6 0e	               jsr  gotoxy
.0c2d	a2 0b		               ldx  #<a2hexprefix
.0c2f	a0 0c		               ldy  #>a2hexprefix
.0c31	20 a8 0e	               jsr  puts
.0c34	20 8f 0a	               jsr  pop
.0c37	60		               rts
.0c38			putahexfmt
.0c38	20 50 0a	               jsr  push
.0c3b	20 6d 0c	               jsr  a2hex
.0c3e	a2 0b		               ldx  #<a2hexprefix
.0c40	a0 0c		               ldy  #>a2hexprefix
.0c42	20 a8 0e	               jsr  puts
.0c45	20 8f 0a	               jsr  pop
.0c48	60		               rts
.0c49			putahex
.0c49	20 50 0a	               jsr  push
.0c4c	20 6d 0c	               jsr  a2hex
.0c4f	a2 0c		               ldx  #<a2hexstr
.0c51	a0 0c		               ldy  #>a2hexstr
.0c53	20 a8 0e	               jsr  puts
.0c56	20 8f 0a	               jsr  pop
.0c59	60		               rts
.0c5a			nib2hex
.0c5a	08		               php
.0c5b	29 0f		               and  #$0f
.0c5d	f8		               sed
.0c5e	18		               clc
.0c5f	69 90		               adc  #$90
.0c61	69 40		               adc  #$40
.0c63	d8		               cld
.0c64	28		               plp
.0c65	60		               rts
.0c66			lsra4bits
.0c66	08		               php
.0c67	4a		               lsr
.0c68	4a		               lsr
.0c69	4a		               lsr
.0c6a	4a		               lsr
.0c6b	28		               plp
.0c6c	60		               rts
.0c6d			a2hex
.0c6d	08		               php
.0c6e	48		               pha
.0c6f	48		               pha
.0c70	20 66 0c	               jsr  lsra4bits
.0c73	20 5a 0c	               jsr  nib2hex
.0c76	8d 0c 0c	               sta  a2hexstr
.0c79	68		               pla
.0c7a	20 5a 0c	               jsr  nib2hex
.0c7d	8d 0d 0c	               sta  a2hexstr+1
.0c80	a9 00		               lda  #$00                ; set end of string
.0c82	8d 0e 0c	               sta  a2hexstr+2
.0c85	68		               pla
.0c86	28		               plp
.0c87	60		               rts
.0c88			xy2hex
.0c88	20 50 0a	               jsr  push
.0c8b	20 6d 0c	               jsr  a2hex
.0c8e	8a		               txa
.0c8f	48		               pha
.0c90	20 66 0c	               jsr  lsra4bits
.0c93	20 5a 0c	               jsr  nib2hex
.0c96	8d 0c 0c	               sta  a2hexstr
.0c99	68		               pla
.0c9a	20 5a 0c	               jsr  nib2hex
.0c9d	8d 0d 0c	               sta  a2hexstr+1
.0ca0	98		               tya
.0ca1	48		               pha
.0ca2	20 66 0c	               jsr  lsra4bits
.0ca5	20 5a 0c	               jsr  nib2hex
.0ca8	8d 0e 0c	               sta  a2hexstr+2
.0cab	68		               pla
.0cac	20 5a 0c	               jsr  nib2hex
.0caf	8d 0f 0c	               sta  a2hexstr+3
.0cb2	a9 00		               lda  #$00                ; 0 ended string
.0cb4	8d 10 0c	               sta  a2hexstr+4
.0cb7	20 8f 0a	               jsr  pop
.0cba			atobin
.0cba	20 50 0a	               jsr  push
.0cbd	a2 08		               ldx  #8
.0cbf	a0 00		               ldy  #0
.0cc1	18		               clc
.0cc2	2a		nextbit        rol
.0cc3	48		               pha
.0cc4	69 00		               adc  #$00
.0cc6	29 01		               and  #$01
.0cc8	20 5a 0c	               jsr  nib2hex
.0ccb	99 11 0c	               sta  abin,y
.0cce	68		               pla
.0ccf	c8		               iny
.0cd0	ca		               dex
.0cd1	d0 ef		               bne  nextbit
.0cd3	a9 00		               lda  #0
.0cd5	99 11 0c	               sta  abin,y
.0cd8	20 8f 0a	               jsr  pull
.0cdb	60		               rts
.0cdc			putabin
.0cdc	20 ba 0c	               jsr     atobin
.0cdf	20 50 0a	               jsr     push
.0ce2	a2 11		               ldx     #<abin
.0ce4	a0 0c		               ldy     #>abin
.0ce6	20 a8 0e	               jsr     puts
.0ce9	20 8f 0a	               jsr     pop
.0cec	60		               rts
.0ced			printabin
.0ced	20 50 0a	               jsr     push
.0cf0	a2 11		               ldx     #<abin
.0cf2	a0 0c		               ldy     #>abin
.0cf4	20 a8 0e	               jsr     puts
.0cf7	20 8f 0a	               jsr     pop
.0cfa	60		               rts
.0cfb			putabinfmt
.0cfb	08		               php
.0cfc	48		               pha
.0cfd	a9 25		               lda     #"%"
.0cff	20 64 0e	               jsr     putch
.0d02	68		               pla
.0d03	20 dc 0c	               jsr     putabin
.0d06	28		               plp
.0d07	60		               rts
.0d08			putabinxy
.0d08	20 b6 0e	               jsr     gotoxy
.0d0b	20 dc 0c	               jsr     putabin
.0d0e	60		               rts
.0d0f			putabinfmtxy
.0d0f	20 b6 0e	               jsr     gotoxy
.0d12	20 fb 0c	               jsr     putabinfmt
.0d15	60		               rts
.0d16			atodec
.0d16	20 50 0a	               jsr  push
.0d19	f8		               sed
.0d1a	aa		               tax
.0d1b	a0 00		               ldy  #$00
.0d1d	a9 00		               lda  #$00
.0d1f	18		nextbit        clc
.0d20	69 01		               adc  #$01
.0d22	90 01		               bcc  decx
.0d24	c8		               iny
.0d25	ca		decx           dex
.0d26	d0 f7		               bne  nextbit
.0d28	48		               pha
.0d29	98		               tya
.0d2a	20 5a 0c	               jsr  nib2hex
.0d2d	8d 1a 0c	               sta  adec
.0d30	68		               pla
.0d31	48		               pha
.0d32	20 5a 0c	               jsr  nib2hex
.0d35	8d 1c 0c	               sta  adec+2
.0d38	68		               pla
.0d39	6a		               ror
.0d3a	6a		               ror
.0d3b	6a		               ror
.0d3c	6a		               ror
.0d3d	20 5a 0c	               jsr  nib2hex
.0d40	8d 1b 0c	               sta  adec+1
.0d43	d8		               cld
.0d44	20 8f 0a	               jsr  pull
.0d47	60		               rts
>0d48	00 00 00	buffer         .byte     0,0,0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-text-mc.asm

>0d4b	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>0d4d	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>0d4f	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>0d50	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>0d51	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>0d52	02		vicbkcol1      .byte     vrouge ;$0b    ; 1,
>0d53	05		vicbkcol2      .byte     vvert  ;$0b    ; 2,
>0d54	06		vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
>0d55	00		inverse        .byte     $00
>0d56	00 00 00 00	scraddr        .byte     0,0,0,0,0
>0d5a	00
>0d5b	00 00 00 00	coladdr        .byte     0,0,0,0,0
>0d5f	00
>0d60	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>0d61	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.0d63			scrmaninit
.0d63	08		               php            ; On sauvegarde les registres
.0d64	48		               pha
.0d65	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.0d67	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.0d6a	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.0d6d	09 10		               ora  #%00010000; modifier que le bit 4.
.0d6f	29 ef		               and  #%11101111
.0d71	8d 16 d0	               sta  $d016 ; 53270
.0d74	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.0d77	09 40		               ora  #%01000000; selectionner le md. couleur de
.0d79	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.0d7c	ad 51 0d	               lda  vicbkcol0
.0d7f	8d 21 d0	               sta  $d021     ; 53281
.0d82	ad 52 0d	               lda  vicbkcol1
.0d85	8d 22 d0	               sta  $d022     ; 53282
.0d88	ad 53 0d	               lda  vicbkcol2
.0d8b	8d 23 d0	               sta  $d023     ; 53283
.0d8e	ad 54 0d	               lda  vicbkcol3
.0d91	8d 24 d0	               sta  $d024     ; 54284
.0d94	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.0d96	8d 60 0d	               sta  bkcol     ; ... fond par defaut des caracteres.
.0d99	20 f3 0d	               jsr  cls       ; Finalement on efface l'ecran
.0d9c	68		               pla
.0d9d	28		               plp
.0d9e	60		               rts
.0d9f			curshome
.0d9f	08		               php                      ; Sauvegarde flags ...
.0da0	48		               pha                      ; ... et accumulateur
.0da1	ad 61 0d	               lda  virtaddr            ; In replace le pointeur ...
.0da4	8d 4b 0d	               sta  scrptr              ; ... d'écran virtuel à sa ...
.0da7	ad 62 0d	               lda  virtaddr+1          ; ... position initiale.
.0daa	8d 4c 0d	               sta  scrptr+1
.0dad	20 de 0d	               jsr  synccolptr          ; On synchronise le ptr couleur.
.0db0	ad 51 0d	               lda  vicbkcol0
.0db3	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.0db6	ad 52 0d	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.0db9	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.0dbc	ad 53 0d	               lda  vicbkcol2           ; ... les variables globales.
.0dbf	8d 23 d0	               sta  $d023
.0dc2	ad 54 0d	               lda  vicbkcol3
.0dc5	8d 24 d0	               sta  $d024
.0dc8	68		               pla                      ; Récupère l'accumulateur ...
.0dc9	28		               plp                      ; ... et les flags
.0dca	60		               rts
.0dcb			incscrptr
.0dcb	08		               php                      ; Sauvegarde flags ...
.0dcc	48		               pha                      ; ... et accumulateur
.0dcd	ee 4b 0d	               inc  scrptr              ; Incremente le pointeur
.0dd0	ad 4b 0d	               lda  scrptr              ; Regarde si on doit faire un ...
.0dd3	d0 03		               bne  pasdereport         ; ... report dans le MSB
.0dd5	ee 4c 0d	               inc  scrptr+1            ; Si oui on fait le repport
.0dd8	20 de 0d	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.0ddb	68		               pla                      ; Récupère l'accumulateur ...
.0ddc	28		               plp                      ; ... et les flags
.0ddd	60		               rts
.0dde			synccolptr
.0dde	08		               php                      ; Sauvegarde flags ...
.0ddf	48		               pha                      ; ... et accumulateur
.0de0	ad 4b 0d	               lda  scrptr              ; Récupère le LSB du scrptr ...
.0de3	8d 4d 0d	               sta  colptr              ; ... pour le placer dans le colptr.
.0de6	ad 4c 0d	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.0de9	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.0deb	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.0ded	8d 4e 0d	               sta  colptr+1            ; ... et le sauvegarde.
.0df0	68		               pla                      ; Récupère l'accumulateur ...
.0df1	28		               plp                      ; ... et les flags
.0df2	60		               rts
.0df3			cls
.0df3	20 50 0a	               jsr  push                ; On sauvegarde les registres
.0df6	ad 61 0d	               lda  virtaddr            ; On replace le curseur d'ecran à
.0df9	8d 4b 0d	               sta  scrptr
.0dfc	ad 62 0d	               lda  virtaddr+1          ; sa position initiale, ($0400).
.0dff	8d 4c 0d	               sta  scrptr+1
.0e02	20 de 0d	               jsr  synccolptr          ; On synchronise la couleur.
.0e05	20 aa 0f	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.0e08	ad 50 0d	               lda  brdcol              ; On place la couleur ...
.0e0b	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.0e0e	ad 60 0d	               lda  bkcol               ; Associer couleur pour ...
.0e11	8d 21 d0	               sta  vicbackcol          ; ... remplir l'ecran ...
.0e14	a9 20		               lda  #$20                ; ... de caracteres espace.
.0e16	a2 04		               ldx  #4                  ; Quatre blocs de ...
.0e18	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.0e1a			nextcar
.0e1a	91 fb		               sta  (zpage1),y          ;
.0e1c	a5 fc		               lda  zpage1+1
.0e1e	48		               pha
.0e1f	29 03		               and  #%00000011
.0e21	09 d8		               ora  #%11011000
.0e23	85 fc		               sta  zpage1+1
.0e25	a9 00		               lda  #0
.0e27	91 fb		               sta  (zpage1),y
.0e29	68		               pla
.0e2a	85 fc		               sta  zpage1+1
.0e2c	a9 20		               lda  #$20
.0e2e	88		               dey
.0e2f	d0 e9		               bne  nextcar
.0e31	e6 fc		               inc  zpage1+1
.0e33	ca		               dex
.0e34	d0 e4		               bne  nextcar
.0e36	a9 00		               lda  #$00
.0e38	8d 4b 0d	               sta  scrptr
.0e3b	a9 04		               lda  #$04
.0e3d	8d 4c 0d	               sta  scrptr+1
.0e40	20 de 0d	               jsr  synccolptr
.0e43	20 8f 0a	               jsr  pop
.0e46	60		               rts
.0e47			setborder
.0e47	08		               php
.0e48	8d 50 0d	               sta  brdcol
.0e4b	8d 20 d0	               sta  vicbordcol
.0e4e	28		               plp
.0e4f	60		               rts
.0e50			setinverse
.0e50	08		               php
.0e51	48		               pha
.0e52	a9 80		               lda  #%10000000
.0e54	8d 55 0d	               sta  inverse
.0e57	68		               pla
.0e58	28		               plp
.0e59	60		               rts
.0e5a			clrinverse
.0e5a	08		               php
.0e5b	48		               pha
.0e5c	a9 00		               lda  #%00000000
.0e5e	8d 55 0d	               sta  inverse
.0e61	68		               pla
.0e62	28		               plp
.0e63	60		               rts
.0e64			putch
.0e64	20 50 0a	               jsr  push           ; On sauvegarde les registres
.0e67	20 aa 0f	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.0e6a	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.0e6c	0d 60 0d	               ora  bkcol          ; On y ajoute la couleur du fond.
.0e6f	a0 00		               ldy  #0             ; Met Y à 0
.0e71	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.0e73	ae 4e 0d	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.0e76	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.0e78	ad 4f 0d	               lda  curcol         ; Charge la couleur voulu dans.
.0e7b	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.0e7d	20 cb 0d	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.0e80	20 8f 0a	               jsr  pop            ; Replace tous les registres
.0e83	60		               rts
.0e84			z2putch
.0e84	20 50 0a	               jsr  push           ; On sauvegarde les registres
.0e87	a0 00		               ldy  #$0            ; Met Y à 0
.0e89	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.0e8b	20 64 0e	               jsr  putch          ; Appel pour affichage
.0e8e	20 8f 0a	               jsr  pop            ; Replace tous les registres
.0e91	60		               rts
.0e92			z2puts
.0e92	20 50 0a	               jsr  push           ; On sauvegarde les registres
.0e95	a0 00		               ldy  #$0            ; Met Y à 0
.0e97	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.0e99	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.0e9b	20 84 0e	               jsr  z2putch        ; Appel pour affichage
.0e9e	20 6f 0b	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.0ea1	4c 97 0e	               jmp  nextcar        ; On passe au prochain
.0ea4	20 8f 0a	endstr         jsr  pop            ; Replace tous les registres
.0ea7	60		               rts
.0ea8			puts
.0ea8	20 50 0a	               jsr  push           ; On sauvegarde les registres
.0eab	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.0ead	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.0eaf	20 92 0e	               jsr  z2puts         ; Appel pour affichage
.0eb2	20 8f 0a	               jsr  pop            ; Replace tous les registres
.0eb5	60		               rts
.0eb6			gotoxy
.0eb6	20 50 0a	               jsr  push           ; On sauvegarde les registres
.0eb9	20 9f 0d	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.0ebc	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.0ebe	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.0ec0	a9 28		               lda  #40            ; Si oui on ajoute 40
.0ec2	20 47 0f	               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
.0ec5	88		               dey                 ;  de fois qu'il est spécifié dans y.
.0ec6	4c bc 0e	               jmp  yagain         ; On passe au prochain y.
.0ec9	8a		setx           txa                 ; On ajoute la valeur de X
.0eca	20 47 0f	               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
.0ecd	20 de 0d	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.0ed0	20 8f 0a	               jsr  pop            ; Replace tous les registres
.0ed3	60		               rts
.0ed4			putsxy
.0ed4	20 50 0a	               jsr  push           ; On sauvegarde les registres et le zp2
.0ed7	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.0ed9	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0edb	a0 00		               ldy  #0             ; On place le compteur
.0edd	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0edf	aa		               tax                 ; de A à X
.0ee0	20 6f 0b	               jsr  inczp2         ; On deplace le pointeur
.0ee3	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0ee5	a8		               tay                 ; de A à Y
.0ee6	20 b6 0e	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.0ee9	20 6f 0b	               jsr  inczp2         ; On deplace le pointeur
.0eec	20 92 0e	               jsr  z2puts         ; On imprime la chaine
.0eef	20 8f 0a	               jsr  pop            ; Replace tous les registres
.0ef2	60		               rts
.0ef3			putscxy
.0ef3	20 50 0a	               jsr  push           ; On Sauvegarde registres et zp2
.0ef6	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.0ef8	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0efa	a0 00		               ldy  #0             ; Place le compteur
.0efc	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.0efe	8d 4f 0d	               sta  curcol         ; ... et on la definie
.0f01	20 6f 0b	               jsr  inczp2         ; Pointe le prochain byte
.0f04	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.0f06	8d 60 0d	               sta  bkcol          ; ... l'index de couleur de fond
.0f09	20 6f 0b	               jsr  inczp2         ; Deplace le pointeur
.0f0c	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0f0e	aa		               tax                 ; ... de A à X
.0f0f	20 6f 0b	               jsr  inczp2         ; Deplace le pointeur
.0f12	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0f14	a8		               tay                 ; de A à Y
.0f15	20 b6 0e	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.0f18	20 6f 0b	               jsr  inczp2         ; Place le ptr en début de chaine
.0f1b	20 92 0e	               jsr  z2puts         ; On imprime la chaine
.0f1e	20 8f 0a	               jsr  pop
.0f21	60		               rts
.0f22			setcurcol
.0f22	08		               php
.0f23	8d 4f 0d	               sta  curcol
.0f26	28		               plp
.0f27	60		               rts
.0f28			setvicbkcol
.0f28	08		               php
.0f29	48		               pha
.0f2a	8a		               txa
.0f2b	29 03		               and  #$03
.0f2d	aa		               tax
.0f2e	68		               pla
.0f2f	9d 51 0d	               sta  vicbkcol0,x
.0f32	9d 21 d0	               sta  $d021,x
.0f35	28		               plp
.0f36	60		               rts
.0f37			setbkcol
.0f37	08		               php
.0f38	48		               pha
.0f39	0a		               asl
.0f3a	0a		               asl
.0f3b	0a		               asl
.0f3c	0a		               asl
.0f3d	0a		               asl
.0f3e	0a		               asl
.0f3f	29 c0		               and  #$c0
.0f41	8d 60 0d	               sta  bkcol
.0f44	68		               pla
.0f45	28		               plp
.0f46	60		               rts
.0f47			saddscrptr
.0f47	08		               php
.0f48	48		               pha
.0f49	18		               clc
.0f4a	6d 4b 0d	               adc  scrptr
.0f4d	8d 4b 0d	               sta  scrptr
.0f50	90 03		               bcc  norep
.0f52	ee 4c 0d	               inc  scrptr+1
.0f55	68		norep          pla
.0f56	28		               plp
.0f57	60		               rts
.0f58			scrptr2str
.0f58	20 50 0a	               jsr  push
.0f5b	ad 4c 0d	               lda  scrptr+1
.0f5e	48		               pha
.0f5f	20 66 0c	               jsr  lsra4bits
.0f62	20 5a 0c	               jsr  nib2hex
.0f65	8d 56 0d	               sta  scraddr
.0f68	68		               pla
.0f69	20 66 0c	               jsr  lsra4bits
.0f6c	20 5a 0c	               jsr  nib2hex
.0f6f	8d 57 0d	               sta  scraddr+1
.0f72	ad 4c 0d	               lda  scrptr+1
.0f75	48		               pha
.0f76	20 66 0c	               jsr  lsra4bits
.0f79	20 5a 0c	               jsr  nib2hex
.0f7c	8d 56 0d	               sta  scraddr
.0f7f	68		               pla
.0f80	20 66 0c	               jsr  lsra4bits
.0f83	20 5a 0c	               jsr  nib2hex
.0f86	8d 57 0d	               sta  scraddr+1
.0f89	ad 4b 0d	               lda  scrptr
.0f8c	48		               pha
.0f8d	20 66 0c	               jsr  lsra4bits
.0f90	20 5a 0c	               jsr  nib2hex
.0f93	8d 58 0d	               sta  scraddr+2
.0f96	8d 5d 0d	               sta  coladdr+2
.0f99	68		               pla
.0f9a	20 66 0c	               jsr  lsra4bits
.0f9d	20 5a 0c	               jsr  nib2hex
.0fa0	8d 59 0d	               sta  scraddr+3
.0fa3	8d 5e 0d	               sta  coladdr+3
.0fa6	20 8f 0a	               jsr  pop
.0fa9	60		               rts
.0faa			scrptr2zp1
.0faa	08		               php
.0fab	48		               pha
.0fac	ad 4b 0d	               lda  scrptr
.0faf	85 fb		               sta  zpage1
.0fb1	ad 4c 0d	               lda  scrptr+1
.0fb4	85 fc		               sta  zpage1+1
.0fb6	68		               pla
.0fb7	28		               plp
.0fb8	60		               rts
.0fb9			colptr2zp1
.0fb9	08		               php
.0fba	48		               pha
.0fbb	ad 4d 0d	               lda  colptr
.0fbe	85 fb		               sta  zpage1
.0fc0	ad 4e 0d	               lda  colptr+1
.0fc3	85 fc		               sta  zpage1+1
.0fc5	68		               pla
.0fc6	28		               plp
.0fc7	60		               rts
.0fc8			scrptr2zp2
.0fc8	08		               php
.0fc9	48		               pha
.0fca	ad 4b 0d	               lda  scrptr
.0fcd	85 fd		               sta  zpage2
.0fcf	ad 4c 0d	               lda  scrptr+1
.0fd2	85 fe		               sta  zpage2+1
.0fd4	68		               pla
.0fd5	28		               plp
.0fd6	60		               rts
.0fd7			colptr2zp2
.0fd7	08		               php
.0fd8	48		               pha
.0fd9	ad 4d 0d	               lda  colptr
.0fdc	85 fd		               sta  zpage2
.0fde	ad 4e 0d	               lda  colptr+1
.0fe1	85 fe		               sta  zpage2+1
.0fe3	68		               pla
.0fe4	28		               plp
.0fe5	60		               rts
.0fe6			putrahex
.0fe6	08		               php
.0fe7	48		               pha
.0fe8	20 6d 0c	               jsr     a2hex
.0feb	a2 07		               ldx     #<a2hexcol
.0fed	a0 0c		               ldy     #>a2hexcol
.0fef	20 a8 0e	               jsr     puts
.0ff2	68		               pla
.0ff3	28		               plp
.0ff4	60		               rts
.0ff5			putrahexxy
.0ff5	08		               php
.0ff6	48		               pha
.0ff7	20 6d 0c	               jsr  a2hex
.0ffa	a9 09		               lda  #<a2hexpos
.0ffc	a0 0c		               ldy  #>a2hexpos
.0ffe	20 d4 0e	               jsr  putsxy
.1001	68		               pla
.1002	28		               plp
.1003	60		               rts
.1004			putrahexcxy
.1004	08		               php
.1005	68		               pla
.1006	20 6d 0c	               jsr  a2hex
.1009	a9 09		               lda  #<a2hexpos
.100b	a0 0c		               ldy  #>a2hexpos
.100d	20 f3 0e	               jsr  putscxy
.1010	68		               pla
.1011	28		               plp
.1012	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-showregs.asm

.1013			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=$c0			bkcol   =   bkcol3
.1013	08		                php
.1014	8d c5 11	                sta  rega
.1017	68		                pla
.1018	8d c8 11	                sta  regp
.101b	8e c6 11	                stx  regx
.101e	8c c7 11	                sty  regy
.1021	ba		                tsx
.1022	8e c9 11	                stx  regs
.1025	68		                pla
.1026	8d cb 11	                sta  regpcl
.1029	8d cc 11	                sta  regpcl2
.102c	68		                pla
.102d	8d ca 11	                sta  regpch
.1030	ad c5 11	                lda  rega
.1033	48		                pha
.1034	20 5a 0c	                jsr  nib2hex
.1037	8d 68 11	                sta  vala+1
.103a	68		                pla
.103b	20 66 0c	                jsr  lsra4bits
.103e	20 5a 0c	                jsr  nib2hex
.1041	8d 67 11	                sta  vala
.1044	ad c7 11	                lda  regy
.1047	48		                pha
.1048	20 5a 0c	                jsr  nib2hex
.104b	8d 7e 11	                sta  valy+1
.104e	68		                pla
.104f	20 66 0c	                jsr  lsra4bits
.1052	20 5a 0c	                jsr  nib2hex
.1055	8d 7d 11	                sta  valy
.1058	ad c6 11	                lda  regx
.105b	48		                pha
.105c	20 5a 0c	                jsr  nib2hex
.105f	8d 73 11	                sta  valx+1
.1062	68		                pla
.1063	20 66 0c	                jsr  lsra4bits
.1066	20 5a 0c	                jsr  nib2hex
.1069	8d 72 11	                sta  valx
.106c	ad c8 11	                lda  regp
.106f	48		                pha
.1070	20 5a 0c	                jsr  nib2hex
.1073	8d 89 11	                sta  valp+1
.1076	68		                pla
.1077	20 66 0c	                jsr  lsra4bits
.107a	20 5a 0c	                jsr  nib2hex
.107d	8d 88 11	                sta  valp
.1080	ad c9 11	                lda  regs
.1083	48		                pha
.1084	20 5a 0c	                jsr  nib2hex
.1087	8d 94 11	                sta  vals+1
.108a	68		                pla
.108b	20 66 0c	                jsr  lsra4bits
.108e	20 5a 0c	                jsr  nib2hex
.1091	8d 93 11	                sta  vals
.1094	ad ca 11	                lda  regpch
.1097	48		                pha
.1098	20 5a 0c	                jsr  nib2hex
.109b	8d a0 11	                sta  valpch+1
.109e	68		                pla
.109f	20 66 0c	                jsr  lsra4bits
.10a2	20 5a 0c	                jsr  nib2hex
.10a5	8d 9f 11	                sta  valpch
.10a8	ad cb 11	                lda  regpcl
.10ab	48		                pha
.10ac	20 5a 0c	                jsr  nib2hex
.10af	8d a2 11	                sta  valpcl+1
.10b2	68		                pla
.10b3	20 66 0c	                jsr  lsra4bits
.10b6	20 5a 0c	                jsr  nib2hex
.10b9	8d a1 11	                sta  valpcl
.10bc	a5 fb		                lda  zpage1
.10be	48		                pha
.10bf	20 5a 0c	                jsr  nib2hex
.10c2	8d b1 11	                sta  valz1l
.10c5	68		                pla
.10c6	20 66 0c	                jsr  lsra4bits
.10c9	20 5a 0c	                jsr  nib2hex
.10cc	8d b2 11	                sta  valz1l+1
.10cf	a5 fc		                lda  zpage1+1
.10d1	48		                pha
.10d2	20 5a 0c	                jsr  nib2hex
.10d5	8d af 11	                sta  valz1h
.10d8	68		                pla
.10d9	20 66 0c	                jsr  lsra4bits
.10dc	20 5a 0c	                jsr  nib2hex
.10df	8d b0 11	                sta  valz1h+1
.10e2	a5 fd		                lda  zpage2
.10e4	48		                pha
.10e5	20 5a 0c	                jsr  nib2hex
.10e8	8d c1 11	                sta  valz2l
.10eb	68		                pla
.10ec	20 66 0c	                jsr  lsra4bits
.10ef	20 5a 0c	                jsr  nib2hex
.10f2	8d c2 11	                sta  valz2l+1
.10f5	a5 fe		                lda  zpage2+1
.10f7	48		                pha
.10f8	20 5a 0c	                jsr  nib2hex
.10fb	8d bf 11	                sta  valz2h
.10fe	68		                pla
.10ff	20 66 0c	                jsr  lsra4bits
.1102	20 5a 0c	                jsr  nib2hex
.1105	8d c0 11	                sta  valz2h+1
.1108	20 50 0e	                jsr  setinverse
.110b	78		                sei
.110c	a2 5f		                ldx  #<srega
.110e	a0 11		                ldy  #>srega+1
.1110	20 f3 0e	                jsr  putscxy
.1113	a2 6a		                ldx  #<sregx
.1115	a0 11		                ldy  #>sregx+1
.1117	20 f3 0e	                jsr  putscxy
.111a	a2 75		                ldx  #<sregy
.111c	a0 11		                ldy  #>sregy+1
.111e	20 f3 0e	                jsr  putscxy
.1121	a2 80		                ldx  #<sregp
.1123	a0 11		                ldy  #>sregp+1
.1125	20 f3 0e	                jsr  putscxy
.1128	a2 8b		                ldx  #<sregs
.112a	a0 11		                ldy  #>sregs+1
.112c	20 f3 0e	                jsr  putscxy
.112f	a2 96		                ldx  #<sregpc
.1131	a0 11		                ldy  #>sregpc+1
.1133	20 f3 0e	                jsr  putscxy
.1136	a2 a5		                ldx  #<sregz1
.1138	a0 11		                ldy  #>sregz1+1
.113a	20 f3 0e	                jsr  putscxy
.113d	a2 b5		                ldx  #<sregz2
.113f	a0 11		                ldy  #>sregz2+1
.1141	20 f3 0e	                jsr  putscxy
.1144	58		                cli
.1145	20 5a 0e	                jsr  clrinverse
.1148	ad ca 11	                lda  regpch
.114b	48		                pha
.114c	ad cb 11	                lda  regpcl
.114f	48		                pha
.1150	ac c7 11	                ldy  regy
.1153	ae c6 11	                ldx  regx
.1156	ad c8 11	                lda  regp
.1159	48		                pha
.115a	ad c5 11	                lda  rega
.115d	28		                plp
.115e	60		                rts
>115f	01 c0 00 17	srega   .byte   colr,bkcol,coln,line
>1163	20 01 3a 24	        .text   ' a:$' ;4,24
>1167	00 00 00	vala    .byte   0,0,0
>116a	01 c0 06 17	sregx   .byte   colr,bkcol,coln+6,line
>116e	20 18 3a 24	        .text   ' x:$' ;4,24
>1172	00 00 00	valx    .byte   0,0,0
>1175	01 c0 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>1179	20 19 3a 24	        .text   ' y:$' ;4,24
>117d	00 00 00	valy    .byte   0,0,0
>1180	01 c0 12 17	sregp   .byte   colr,bkcol,coln+18,line
>1184	20 10 3a 24	        .text   ' p:$' ;4,24
>1188	00 00 00	valp    .byte   0,0,0
>118b	01 c0 18 17	sregs   .byte   colr,bkcol,coln+24,line
>118f	20 13 3a 24	        .text   ' s:$' ;4,24
>1193	00 00 00	vals    .byte   0,0,0
>1196	01 c0 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>119a	20 10 03 3a	        .text   ' pc:$' ;4,24
>119e	24
>119f	00 00		valpch  .byte   0,0
>11a1	00 00 20 00	valpcl  .byte   0,0,32,0
>11a5	01 c0 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>11a9	20 1a 10 31	        .text   ' zp1:$' ;4,24
>11ad	3a 24
>11af	00 00		valz1h  .byte   0,0
>11b1	00 00 20 00	valz1l  .byte   0,0,32,0
>11b5	01 c0 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>11b9	20 1a 10 32	        .text   ' zp2:$' ;4,24
>11bd	3a 24
>11bf	00 00		valz2h  .byte   0,0
>11c1	00 00 20 00	valz2l  .byte   0,0,32,0
>11c5	00		rega    .byte   0
>11c6	00		regx    .byte   0
>11c7	00		regy    .byte   0
>11c8	00		regp    .byte   0
>11c9	00		regs    .byte   0
>11ca	00		regpch  .byte   0
>11cb	00		regpcl  .byte   0
>11cc	00		regpcl2 .byte   0
>11cd	00		vzp1h   .byte   0
>11ce	00		vzp1l   .byte   0
>11cf	00		vzp2h   .byte   0
>11d0	00		vzp2l   .byte   0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-joystick.asm

=$dc00			js_2port       =    $dc00
=$dc01			js_1port       =    $dc01
=$dc02			js_2dir        =    $dc02
=$dc03			js_1dir        =    $dc03
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.11d1			js_init
.11d1	20 50 0a	jsr  push
.11d4	ad 03 dc	               lda  js_1dir
.11d7	29 e0		               and  #$e0
.11d9	8d 03 dc	               sta  js_1dir
.11dc	ad 02 dc	               lda  js_2dir
.11df	29 e0		               and  #$e0
.11e1	8d 02 dc	               sta  js_2dir
.11e4	20 8f 0a	               jsr  pop
.11e7	60		               rts
.11e8			js_scan
.11e8	20 ef 11	jsr  js_1scan
.11eb	20 a5 12	               jsr  js_2scan
.11ee	60		               rts
.11ef			js_1scan
.11ef	20 50 0a	               jsr  push
.11f2	ad 01 dc	               lda  js_1port
.11f5	29 1f		               and  #$1f
.11f7	48		               pha
.11f8	49 1f		               eor  #$1f
.11fa	8d 5b 16	               sta  js_1status
.11fd	68		               pla
.11fe	c9 00		               cmp  #$00
.1200	d0 03		               bne  p1scan
.1202	4c 95 12	               jmp  port1_out
.1205	49 1f		p1scan         eor  #$1f
.1207	18		               clc
.1208	4a		js_1b0         lsr
.1209	90 14		               bcc  js_1b1
.120b	48		               pha
.120c	ee c4 15	               inc  js_1flag
.120f	ad c0 15	               lda  js_1pixy
.1212	38		               sec
.1213	e9 02		               sbc  #js_yoffset
.1215	c9 f0		               cmp  #$f0
.1217	90 02		               bcc  sto1ym
.1219	a9 00		               lda  #$00
.121b	8d c0 15	sto1ym         sta  js_1pixy
.121e	68		               pla
.121f	4a		js_1b1         lsr
.1220	90 14		               bcc  js_1b2
.1222	48		               pha
.1223	ee c4 15	               inc  js_1flag
.1226	ad c0 15	               lda  js_1pixy
.1229	18		               clc
.122a	69 02		               adc  #js_yoffset
.122c	c9 c7		               cmp  #199
.122e	90 02		               bcc  sto1yp
.1230	a9 c7		               lda  #199
.1232	8d c0 15	sto1yp         sta  js_1pixy
.1235	68		               pla
.1236	4a		js_1b2         lsr
.1237	90 20		               bcc  js_1b3
.1239	48		               pha
.123a	ee c4 15	               inc  js_1flag
.123d	ad be 15	               lda  js_1pixx
.1240	0d bf 15	               ora  js_1pixx+1
.1243	f0 13		               beq  js_1b2out
.1245	38		               sec
.1246	ad be 15	               lda  js_1pixx
.1249	e9 02		               sbc  #js_xoffset
.124b	8d be 15	               sta  js_1pixx
.124e	b0 08		               bcs  js_1b2out
.1250	ad bf 15	               lda  js_1pixx+1
.1253	f0 03		               beq  js_1b2out
.1255	ce bf 15	               dec  js_1pixx+1
.1258	68		js_1b2out      pla
.1259	4a		js_1b3         lsr
.125a	90 22		               bcc  js_1b4
.125c	48		               pha
.125d	ee c4 15	               inc  js_1flag
.1260	ad bf 15	               lda  js_1pixx+1
.1263	f0 0a		               beq  incj1x
.1265	ad be 15	               lda  js_1pixx
.1268	c9 3c		               cmp  #$40-4
.126a	30 03		               bmi  incj1x
.126c	4c 7d 12	               jmp  js_1b3out
.126f	18		incj1x         clc
.1270	ad be 15	               lda  js_1pixx
.1273	69 02		               adc  #js_xoffset
.1275	8d be 15	               sta  js_1pixx
.1278	90 03		               bcc  js_1b3out
.127a	ee bf 15	               inc  js_1pixx+1
.127d	68		js_1b3out      pla
.127e	4a		js_1b4          lsr                     ;Estce le bbouton fire (F)
.127f	90 14		                bcc     port1_out       ;Oui!
.1281	ee c4 15	                inc     js_1flag
.1284	ee c3 15	                inc     js_1fire        ; on augmente le nombre de tir
.1287	a2 01		js_1wait        ldx     #$01
.1289	a0 ff		                ldy     #$ff
.128b	c8		js_1rel         iny
.128c	ad 01 dc	                lda     js_1port
.128f	49 ff		                eor     #$ff
.1291	29 10		                and     #$10
.1293	d0 f6		                bne     js_1rel         ; des boutons
.1295	ad c4 15	port1_out       lda     js_1flag
.1298	f0 08		                beq     out
.129a	20 9c 13	                jsr     js_1correct
.129d	a9 00		                lda     #0
.129f	8d c4 15	                sta     js_1flag
.12a2	20 8f 0a	out             jsr     pop
.12a5			js_2scan
.12a5	20 50 0a	                jsr     push
.12a8	ad 00 dc	port2           lda     js_2port
.12ab	29 1f		                and     #$1f
.12ad	48		                pha
.12ae	49 1f		                eor     #$1f
.12b0	8d 5c 16	                sta js_2status
.12b3	68		                pla
.12b4	c9 1f		                cmp	#$1f
.12b6	d0 03		                bne     p2scan
.12b8	4c 6d 13	                jmp     port2_out
.12bb	49 1f		p2scan          eor     #$1f
.12bd	18		                clc
.12be	4a		js_2b0          lsr                     ;On decale js_2 bit 0 dans C
.12bf	90 14		                bcc     js_2b1          ;Est-ce vers le haut (U)
.12c1	48		                pha                     ;On stack la valeur
.12c2	ee cf 15	                inc     js_2flag
.12c5	ad cb 15	                lda     js_2pixy        ;Oui!
.12c8	38		                sec                     ;On place la carry a 1
.12c9	e9 02		                sbc     #js_yoffset     ;On reduit
.12cb	c9 f0		                cmp     #$f0
.12cd	90 02		                bcc     sto2ym
.12cf	a9 00		                lda     #$00
.12d1	8d cb 15	sto2ym          sta     js_2pixy        ; le y
.12d4	68		                pla                     ;On recupere la valeur
.12d5	4a		js_2b1          lsr                     ;On decale js_2 bit 0 dans C
.12d6	90 14		                bcc     js_2b2          ;Est-ce vers le bas (D)
.12d8	48		                pha                     ;On stack la valeur
.12d9	ee cf 15	                inc     js_2flag
.12dc	ad cb 15	                lda     js_2pixy        ;Oui!
.12df	18		                clc                     ;On place la carry a 0
.12e0	69 02		                adc     #js_yoffset     ;On augmente
.12e2	c9 c7		                cmp     #199
.12e4	90 02		                bcc     sto2yp
.12e6	a9 c7		                lda     #199
.12e8	8d cb 15	sto2yp          sta     js_2pixy        ; le y
.12eb	68		                pla                     ;On recupere la valeur
.12ec	4a		js_2b2          lsr                     ;On decale js_2 bit 0 dans C
.12ed	90 20		                bcc     js_2b3          ;Est-ce vers la gauche (L)
.12ef	48		                pha                     ;On stack la valeur
.12f0	ee cf 15	                inc     js_2flag
.12f3	ad c9 15	                lda     js_2pixx        ;Oui!
.12f6	0d ca 15	                ora     js_2pixx+1
.12f9	f0 13		                beq     js_2b2out
.12fb	38		                sec                     ;On place la carry a 1
.12fc	ad c9 15	                lda     js_2pixx        ;Oui!
.12ff	e9 02		                sbc     #js_xoffset     ;On diminue
.1301	8d c9 15	                sta     js_2pixx        ; le X
.1304	b0 08		                bcs     js_2b2out       ; de offset
.1306	ad ca 15	                lda     js_2pixx+1
.1309	f0 03		                beq     js_2b2out
.130b	ce ca 15	                dec     js_2pixx+1      ; sur 16 bits
.130e	68		js_2b2out       pla                     ;On recupere la valeur
.130f	4a		js_2b3          lsr                     ;On decale js_2 bit 0 dans C
.1310	90 22		                bcc     js_2b4          ;Est-ce vers la droite (R)
.1312	48		                pha                     ;On stack la valeur
.1313	ee cf 15	                inc     js_2flag
.1316	ad ca 15	                lda     js_2pixx+1
.1319	f0 0a		                beq     incj2x
.131b	ad c9 15	                lda     js_2pixx
.131e	c9 3e		                cmp     #$40-js_xoffset
.1320	30 03		                bmi     incj2x
.1322	4c 33 13	                jmp     js_2b3out
.1325	18		incj2x          clc                     ;On place la carry a 0
.1326	ad c9 15	                lda     js_2pixx        ;Oui!
.1329	69 02		                adc     #js_xoffset     ;On augmente
.132b	8d c9 15	                sta     js_2pixx        ; le X
.132e	90 03		                bcc     js_2b3out       ; de offset
.1330	ee ca 15	                inc     js_2pixx+1      ; sur 16 bits
.1333	68		js_2b3out       pla                     ;On recupere la valeur
.1334	4a		js_2b4          lsr                     ;Estce le bbouton fire (F)
.1335	90 36		                bcc     port2_out       ;Oui!
.1337	ee cf 15	                inc     js_2flag
.133a	ee ce 15	                inc     js_2fire        ; on augmente le nombre de tir
.133d	a9 01		                lda     #%00000001
.133f	8d d3 15	                sta     js_2events
.1342	ad c9 15	                lda     js_2pixx
.1345	8d d0 15	                sta     js_2clickx
.1348	ad ca 15	                lda     js_2pixx+1
.134b	8d d1 15	                sta     js_2clickx+1
.134e	ad cb 15	                lda     js_2pixy
.1351	8d d2 15	                sta     js_2clicky
.1354	ad 35 16	                lda     js_2val16a+1
.1357	49 40		                eor     #%01000000
.1359	8d 35 16	                sta     js_2val16a+1
.135c	a2 00		js_2wait        ldx     #$00
.135e	a0 ff		                ldy     #$ff
.1360	c8		js_2rel         iny
.1361	d0 01		                bne     sr1
.1363	e8		                inx
.1364			sr1
.1364	ad 00 dc	                lda     js_2port
.1367	49 ff		                eor     #$ff
.1369	29 10		                and     #$10
.136b	d0 f3		                bne     js_2rel         ; des boutons
.136d	ad cf 15	port2_out       lda     js_2flag
.1370	f0 08		                beq     out
.1372	20 d1 13	                jsr     js_2correct
.1375	a9 00		                lda     #0
.1377	8d cf 15	                sta     js_2flag
.137a	20 8f 0a	out             jsr     pop
.137d			js_corrector
.137d	08		                php
.137e	48		                pha
.137f	ad c4 15	                lda     js_1flag
.1382	f0 08		                beq     check2
.1384	20 9c 13	                jsr     js_1correct
.1387	a9 00		                lda     #0
.1389	8d c4 15	                sta     js_1flag
.138c	ad cf 15	check2          lda     js_2flag
.138f	f0 08		                beq     no_update
.1391	20 d1 13	                jsr     js_2correct
.1394	a9 00		                lda     #0
.1396	8d cf 15	                sta     js_2flag
.1399	68		no_update       pla
.139a	28		                plp
.139b	60		                rts
.139c			js_1correct
.139c	08		                php
.139d	48		                pha
.139e	ad be 15	                lda     js_1pixx
.13a1	8d cf 13	                sta     vallsb
.13a4	ad bf 15	                lda     js_1pixx+1
.13a7	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.13a8	6e cf 13	                ror     vallsb          ; Cnnnnnnn      On divise par 8 pc les
.13ab	4e cf 13	                lsr     vallsb          ; 0Cnnnnnn      caracteres de 8 pixels
.13ae	4e cf 13	                lsr     vallsb          ; 00Cnnnnn
.13b1	ad cf 13	                lda     vallsb          ; devient = %00100000 = 32
.13b4	8d c1 15	                sta     js_1x
.13b7	ad c0 15	                lda     js_1pixy
.13ba	8d cf 13	                sta     vallsb
.13bd	4e cf 13	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.13c0	4e cf 13	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.13c3	4e cf 13	                lsr     vallsb          ; 00Cnnnnn
.13c6	ad cf 13	                lda     vallsb          ; devient = %00100000 = 32
.13c9	8d c2 15	                sta     js_1y
.13cc	68		                pla
.13cd	28		                plp
.13ce	60		                rts
>13cf	00		vallsb          .byte     0
>13d0	00		regx            .byte     0
.13d1			js_2correct
.13d1	08		                php
.13d2	48		                pha
.13d3	ad c9 15	                lda     js_2pixx
.13d6	8d 04 14	                sta     vallsb
.13d9	ad ca 15	                lda     js_2pixx+1
.13dc	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.13dd	6e 04 14	                ror     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.13e0	4e 04 14	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.13e3	4e 04 14	                lsr     vallsb          ; 00Cnnnnn
.13e6	ad 04 14	                lda     vallsb          ; devient = %00100000 = 32
.13e9	8d cc 15	                sta     js_2x
.13ec	ad cb 15	                lda     js_2pixy
.13ef	8d 04 14	                sta     vallsb
.13f2	4e 04 14	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.13f5	4e 04 14	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.13f8	4e 04 14	                lsr     vallsb          ; 00Cnnnnn
.13fb	ad 04 14	                lda     vallsb          ; devient = %00100000 = 32
.13fe	8d cd 15	                sta     js_2y
.1401	68		                pla
.1402	28		                plp
.1403	60		                rts
>1404	00		vallsb          .byte     0
>1405	00		regx            .byte     0
.1406			js_showvals
.1406	20 96 14	                jsr     js_2showvals
.1409	60		                rts
.140a			js_1showvals
.140a	20 50 0a	                jsr     push
.140d	ad c1 15	                lda     js_1x
.1410	20 6d 0c	                jsr     a2hex
.1413	ad 0d 0c	                lda     a2hexstr+1
.1416	8d e7 15	                sta     js_1val8+19
.1419	ad 0e 0c	                lda     a2hexstr+2
.141c	8d e8 15	                sta     js_1val8+20
.141f	ad be 15	                lda     js_1pixx
.1422	20 6d 0c	                jsr     a2hex
.1425	ad 0d 0c	                lda     a2hexstr+1
.1428	8d 06 16	                sta     js_1val16+14
.142b	ad 0e 0c	                lda     a2hexstr+2
.142e	8d 07 16	                sta     js_1val16+15
.1431	ad bf 15	                lda     js_1pixx+1
.1434	20 6d 0c	                jsr     a2hex
.1437	ad 0d 0c	                lda     a2hexstr+1
.143a	8d 04 16	                sta     js_1val16+12
.143d	ad 0e 0c	                lda     a2hexstr+2
.1440	8d 05 16	                sta     js_1val16+13
.1443	ad c2 15	                lda     js_1y
.1446	20 6d 0c	                jsr     a2hex
.1449	ad 0d 0c	                lda     a2hexstr+1
.144c	8d eb 15	                sta     js_1val8+23
.144f	ad 0e 0c	                lda     a2hexstr+2
.1452	8d ec 15	                sta     js_1val8+24
.1455	ad c0 15	                lda     js_1pixy
.1458	20 6d 0c	                jsr     a2hex
.145b	ad 0d 0c	                lda     a2hexstr+1
.145e	8d 0c 16	                sta     js_1val16+20
.1461	ad 0e 0c	                lda     a2hexstr+2
.1464	8d 0d 16	                sta     js_1val16+21
.1467	a9 00		                lda     #0
.1469	20 6d 0c	                jsr     a2hex
.146c	ad 0d 0c	                lda     a2hexstr+1
.146f	8d 0a 16	                sta     js_1val16+18
.1472	ad 0e 0c	                lda     a2hexstr+2
.1475	8d 0b 16	                sta     js_1val16+19
.1478	ad c3 15	                lda     js_1fire
.147b	20 6d 0c	                jsr     a2hex
.147e	ad 0e 0c	                lda     a2hexstr+2
.1481	8d f5 15	                sta     js_1val8+33
.1484	a2 d4		                ldx     #<js_1val8
.1486	a0 15		                ldy     #>js_1val8
.1488	20 f3 0e	                jsr     putscxy
.148b	a2 f8		                ldx     #<js_1val16
.148d	a0 15		                ldy     #>js_1val16
.148f	20 f3 0e	                jsr     putscxy
.1492	20 8f 0a	                jsr     pop
.1495	60		                rts
.1496			js_2showvals
.1496	20 50 0a	                jsr     push                    ; stack : y, x, a, flg
.1499	ad cc 15	                lda     js_2x
.149c	20 6d 0c	                jsr     a2hex
.149f	ad 0c 0c	                lda     a2hexstr
.14a2	8d 23 16	                sta     js_2val8+19
.14a5	ad 0d 0c	                lda     a2hexstr+1
.14a8	8d 24 16	                sta     js_2val8+20
.14ab	ad d0 15	                lda     js_2clickx
.14ae	20 6d 0c	                jsr     a2hex
.14b1	ad 0c 0c	                lda     a2hexstr
.14b4	8d 51 16	                sta     js_2val16+14
.14b7	ad 0d 0c	                lda     a2hexstr+1
.14ba	8d 52 16	                sta     js_2val16+15
.14bd	ad d1 15	                lda     js_2clickx+1
.14c0	20 6d 0c	                jsr     a2hex
.14c3	ad 0c 0c	                lda     a2hexstr
.14c6	8d 4f 16	                sta     js_2val16+12
.14c9	ad 0d 0c	                lda     a2hexstr+1
.14cc	8d 50 16	                sta     js_2val16+13
.14cf	ad cd 15	                lda     js_2y
.14d2	20 6d 0c	                jsr     a2hex
.14d5	ad 0c 0c	                lda     a2hexstr
.14d8	8d 27 16	                sta     js_2val8+23
.14db	ad 0d 0c	                lda     a2hexstr+1
.14de	8d 28 16	                sta     js_2val8+24
.14e1	ad d2 15	                lda     js_2clicky
.14e4	20 6d 0c	                jsr     a2hex
.14e7	ad 0c 0c	                lda     a2hexstr
.14ea	8d 57 16	                sta     js_2val16+20
.14ed	ad 0d 0c	                lda     a2hexstr+1
.14f0	8d 58 16	                sta     js_2val16+21
.14f3	a9 00		                lda     #0
.14f5	20 6d 0c	                jsr     a2hex
.14f8	ad 0c 0c	                lda     a2hexstr
.14fb	8d 55 16	                sta     js_2val16+18
.14fe	ad 0d 0c	                lda     a2hexstr+1
.1501	8d 56 16	                sta     js_2val16+19
.1504	ad ce 15	                lda     js_2fire
.1507	20 6d 0c	                jsr     a2hex
.150a	ad 0d 0c	                lda     a2hexstr+1
.150d	8d 31 16	                sta     js_2val8+33
.1510	a2 10		                ldx     #<js_2val8
.1512	a0 16		                ldy     #>js_2val8
.1514	20 f3 0e	                jsr     putscxy
.1517	a2 34		                ldx     #<js_2val16a
.1519	a0 16		                ldy     #>js_2val16a
.151b	20 f3 0e	                jsr     putscxy
.151e	a2 43		                ldx     #<js_2val16
.1520	a0 16		                ldy     #>js_2val16
.1522	20 f3 0e	                jsr     putscxy
.1525	20 8f 0a	                jsr     pop
.1528	60		                rts
.1529			js_updatecurs
.1529	20 50 0a	                jsr     push
.152c	ad cc 15	running         lda     js_2x
.152f	cd b8 15	                cmp     js_x
.1532	f0 06		                beq     chky
.1534	8d b8 15	                sta     js_x
.1537	ee 8b 15	                inc     flag
.153a	ad cd 15	chky            lda     js_2y
.153d	cd b9 15	                cmp     js_y
.1540	f0 06		                beq     chkflag
.1542	8d b9 15	                sta     js_y
.1545	ee 8b 15	                inc     flag
.1548	ad 8b 15	chkflag         lda     flag
.154b	f0 1e		                beq     showit
.154d	ae ba 15	                ldx     js_oldx
.1550	ac bb 15	                ldy     js_oldy
.1553	20 8c 15	                jsr     js_eoraddrxy
.1556	ae b8 15	                ldx     js_x
.1559	ac b9 15	                ldy     js_y
.155c	20 8c 15	                jsr     js_eoraddrxy
.155f	ad b8 15	                lda     js_x
.1562	8d ba 15	                sta     js_oldx
.1565	ad b9 15	                lda     js_y
.1568	8d bb 15	                sta     js_oldy
.156b	a9 00		showit          lda     #0
.156d	8d 8b 15	                sta     flag
.1570	8d fd 0b	                sta     addr1
.1573	a9 04		                lda     #$04
.1575	8d fe 0b	                sta     addr1+1
.1578	ae b8 15	                ldx     js_x
.157b	ac b9 15	                ldy     js_y
.157e	20 c3 0b	                jsr     xy2addr
.1581	ac ff 0b	                ldy     addr2
.1584	ae 00 0c	                ldx     addr2+1
.1587	20 8f 0a	                jsr pop
.158a	60		                rts
>158b	00		flag            .byte   0
.158c			js_eoraddrxy
.158c	20 50 0a	                jsr     push
.158f	20 a5 0b	                jsr     savezp2
.1592	a9 04		                lda     #$04
.1594	8d fe 0b	                sta     addr1+1
.1597	a9 00		                lda     #0
.1599	8d fd 0b	                sta     addr1
.159c	20 c3 0b	                jsr     xy2addr
.159f	ac ff 0b	                ldy     addr2
.15a2	84 fd		                sty     zpage2
.15a4	ae 00 0c	                ldx     addr2+1
.15a7	86 fe		                stx     zpage2+1
.15a9	a0 00		                ldy     #0
.15ab	b1 fd		                lda     (zpage2),y
.15ad	49 40		                eor     #%01000000
.15af	91 fd		                sta     (zpage2),y
.15b1	20 b4 0b	                jsr     restzp2
.15b4	20 8f 0a	                jsr     pop
.15b7	60		                rts
>15b8	00		js_x            .byte   0
>15b9	00		js_y            .byte   0
>15ba	ff		js_oldx         .byte   $ff
>15bb	ff		js_oldy         .byte   $ff
>15bc	00		js_oldcar       .byte   0
>15bd	00		js_oldcol       .byte   0
>15be	00 00		js_1pixx        .word   0
>15c0	00		js_1pixy        .byte   0
>15c1	00		js_1x           .byte   0
>15c2	00		js_1y           .byte   0
>15c3	00		js_1fire        .byte   0
>15c4	00		js_1flag        .byte   0
>15c5	00 00		js_1clickx      .word   0
>15c7	00		js_1clicky      .byte   0
>15c8	00		js_1events      .byte   0
>15c9	00 00		js_2pixx        .word   0
>15cb	00		js_2pixy        .byte   0
>15cc	00		js_2x           .byte   0
>15cd	00		js_2y           .byte   0
>15ce	00		js_2fire        .byte   0
>15cf	00		js_2flag        .byte   0
>15d0	00 00		js_2clickx      .word   0
>15d2	00		js_2clicky      .byte   0
>15d3	00		js_2events      .byte   0
=$03			js_txtcol       =       vcyan
=$00			js_txtbak       =       bkcol0
>15d4	03 00 04 05	js_1val8        .byte     js_txtcol,js_txtbak,4,5
>15d8	50 0f 12 14	                .text   "Port 1 (x,y):($00,$00) Fire:(0)"
>15dc	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>15ec	30 29 20 46 09 12 05 3a 28 30 29
>15f7	00		                .byte   0
>15f8	03 00 0b 07	js_1val16       .byte   js_txtcol,js_txtbak,11,7
>15fc	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>1600	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>160f	00		                .byte   0
>1610	03 00 04 0a	js_2val8        .byte   js_txtcol,js_txtbak,4,10
>1614	43 01 12 50	                .text   "CarPos (x,y):($00,$00) Fire:(0)"
>1618	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>1628	30 29 20 46 09 12 05 3a 28 30 29
>1633	00		                .byte   0
>1634	01 00 04 0c	js_2val16a      .byte   vblanc,js_txtbak,4,12
>1638	43 0c 09 03	                .text   "Click pos."
>163c	0b 20 10 0f 13 2e
>1642	00		                .byte   0
>1643	03 00 10 0c	js_2val16       .byte   js_txtcol,js_txtbak,16,12
>1647	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>164b	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>165a	00		                .byte   0
>165b	00		js_1status     .byte 0
>165c	00		js_2status     .byte 0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-spriteman.asm

.165d			sprt_init
.165d	20 50 0a	                jsr     push
.1660	ad b2 16	                lda     sprt_ptr
.1663	20 94 17	                jsr     sprt_loadptr
.1666	20 87 0b	                jsr     savezp1
.1669	20 a5 0b	                jsr     savezp2
.166c	ad 15 d0	                lda     vic+$15 ; enable sprite 2
.166f	09 04		                ora     #%00000100
.1671	8d 15 d0	                sta     vic+$15
.1674	a9 0d		                lda     #$0d
.1676	8d fa 07	                sta     $7fa
.1679	ad 70 1a	                lda     sprt_ptr0
.167c	85 fb		                sta     zpage1
.167e	ad 71 1a	                lda     sprt_ptr0+1
.1681	85 fc		                sta     zpage1+1
.1683	a9 40		                lda     #$40
.1685	85 fd		                sta     zpage2
.1687	a9 03		                lda     #$03
.1689	85 fe		                sta     zpage2+1
.168b	a0 41		                ldy     #65
.168d	b1 fb		                lda     (zpage1),y      ; sprite y offset
.168f	8d d7 17	                sta     sprt_yoffset
.1692	88		                dey
.1693	b1 fb		                lda     (zpage1),y      ; sprite x offset
.1695	8d d6 17	                sta     sprt_xoffset
.1698	88		                dey
.1699	b1 fb		                lda     (zpage1),y      ; sprite color
.169b	8d 29 d0	                sta     $d029
.169e	88		                dey
.169f	a0 3e		                ldy     #62
.16a1	b1 fb		nextbyte        lda     (zpage1),y
.16a3	91 fd		                sta     (zpage2),y
.16a5	88		                dey
.16a6	d0 f9		                bne     nextbyte
.16a8	20 96 0b	                jsr     restzp1
.16ab	20 b4 0b	                jsr     restzp2
.16ae	20 8f 0a	                jsr     pop
.16b1	60		                rts
>16b2	01		sprt_ptr        .byte   $01
.16b3			sprt_calcpos
.16b3	20 50 0a	                jsr     push
.16b6	a9 00		                lda     #0
.16b8	8d d9 17	                sta     sprt_x+1
.16bb	8d db 17	                sta     sprt_y+1
.16be	ad ca 15	                lda     js_2pixx+1
.16c1	18		                clc
.16c2	2a		                rol
.16c3	2a		                rol
.16c4	8d d9 17	                sta     sprt_x+1
.16c7	ad c9 15	                lda     js_2pixx
.16ca	18		                clc
.16cb	6d d6 17	                adc     sprt_xoffset
.16ce	8d d8 17	                sta     sprt_x
.16d1	90 08		                bcc     norepx
.16d3	ad d9 17	                lda     sprt_x+1
.16d6	09 04		                ora     #$04
.16d8	8d d9 17	                sta     sprt_x+1
.16db	ad cb 15	norepx          lda     js_2pixy
.16de	18		                clc
.16df	6d d7 17	                adc     sprt_yoffset
.16e2	8d da 17	                sta     sprt_y
.16e5	20 8f 0a	                jsr     pop
.16e8	60		                rts
.16e9			sprt_move
.16e9	20 50 0a	                jsr     push
.16ec	20 b3 16	                jsr     sprt_calcpos
.16ef	ad d8 17	                lda     sprt_x
.16f2	8d 04 d0	                sta     vic+$04
.16f5	ad d9 17	                lda     sprt_x+1
.16f8	8d 10 d0	                sta     vic+$10
.16fb	ad da 17	                lda     sprt_y
.16fe	8d 05 d0	                sta     vic+$05
.1701	20 08 17	                jsr     sprt_showpos
.1704	20 8f 0a	                jsr     pop
.1707	60		                rts
.1708			sprt_showpos
.1708	20 50 0a	                jsr     push
.170b	ad d8 17	                lda     sprt_x
.170e	20 6d 0c	                jsr     a2hex
.1711	ad 0c 0c	                lda     a2hexstr
.1714	8d 9f 1a	                sta     sprite_pos+26
.1717	ad 0d 0c	                lda     a2hexstr+1
.171a	8d a0 1a	                sta     sprite_pos+27
.171d	ad d9 17	                lda     sprt_x+1
.1720	20 6d 0c	                jsr     a2hex
.1723	ad 0c 0c	                lda     a2hexstr
.1726	8d 9d 1a	                sta     sprite_pos+24
.1729	ad 0d 0c	                lda     a2hexstr+1
.172c	8d 9e 1a	                sta     sprite_pos+25
.172f	ad da 17	                lda     sprt_y
.1732	20 6d 0c	                jsr     a2hex
.1735	ad 0c 0c	                lda     a2hexstr
.1738	8d a5 1a	                sta     sprite_pos+32
.173b	ad 0d 0c	                lda     a2hexstr+1
.173e	8d a6 1a	                sta     sprite_pos+33
.1741	a9 00		                lda     #0
.1743	20 6d 0c	                jsr     a2hex
.1746	ad 0c 0c	                lda     a2hexstr
.1749	8d a3 1a	                sta     sprite_pos+30
.174c	ad 0d 0c	                lda     a2hexstr+1
.174f	8d a4 1a	                sta     sprite_pos+31
.1752	a2 85		                ldx     #<sprite_pos
.1754	a0 1a		                ldy     #>sprite_pos
.1756	20 f3 0e	                jsr     putscxy
.1759	20 8f 0a	                jsr     pop
.175c	60		                rts
.175d			sprt_loadptr2
.175d	20 50 0a	                jsr     push
.1760	aa		                tax
.1761	8e b2 16	                stx     sprt_ptr
.1764	ad 71 1a	                lda     sprt_ptr0+1
.1767	8d 93 17	                sta     calcbuff+1
.176a	ad 70 1a	                lda     sprt_ptr0
.176d	8d 92 17	                sta     calcbuff
.1770	e0 00		                cpx     #0
.1772	f0 11		                beq     addrok
.1774	ad 92 17	                lda     calcbuff
.1777	18		nextx           clc
.1778	69 42		                adc     #66
.177a	90 03		                bcc     nocarry
.177c	ee 93 17	                inc     calcbuff+1
.177f	8d 92 17	nocarry         sta     calcbuff
.1782	ca		                dex
.1783	d0 f2		                bne     nextx
.1785	ac 93 17	addrok          ldy     calcbuff+1
.1788	ae 92 17	                ldx     calcbuff
.178b	20 ae 17	                jsr     sprt_setimage
.178e	20 8f 0a	                jsr     pop
.1791	60		                rts
>1792	00 00		calcbuff        .word   $0
.1794			sprt_loadptr
.1794	20 50 0a	                jsr     push
.1797	ad b2 16	                lda     sprt_ptr
.179a	18		                clc
.179b	2a		                rol
.179c	a8		                tay
.179d	b9 70 1a	                lda     sprt_ptr0,y
.17a0	aa		                tax
.17a1	b9 71 1a	                lda     sprt_ptr0+1,y
.17a4	a8		                tay
.17a5	20 ae 17	                jsr     sprt_setimage
.17a8	20 8f 0a	                jsr     pop
.17ab	60		                rts
>17ac	00 00		calcbuff        .word   $0
.17ae			sprt_setimage
.17ae	20 50 0a	                jsr     push
.17b1	20 87 0b	                jsr     savezp1
.17b4	20 a5 0b	                jsr     savezp2
.17b7	84 fc		                sty     zpage1+1
.17b9	86 fb		                stx     zpage1
.17bb	a0 17		                ldy     #>sprt_image
.17bd	84 fe		                sty     zpage2+1
.17bf	a0 dc		                ldy     #<sprt_image
.17c1	84 fd		                sty     zpage2
.17c3	a0 42		                ldy     #66
.17c5	b1 fb		nextbyte        lda     (zpage1),y
.17c7	91 fd		                sta     (zpage2),y
.17c9	88		                dey
.17ca	d0 f9		                bne     nextbyte
.17cc	20 b4 0b	                jsr     restzp2
.17cf	20 96 0b	                jsr     restzp1
.17d2	20 8f 0a	                jsr     pop
.17d5	60		                rts
>17d6	00		sprt_xoffset    .byte   $00
>17d7	00		sprt_yoffset    .byte   $00
>17d8	00 00		sprt_x          .word   $0000
>17da	00 00		sprt_y          .word   $0000
>17dc			sprt_image      .fill 66
>181e	00 00 00 00	sprt_crxair     .byte $00, $00, $00, $00, $00, $00 ; 6
>1822	00 00
>1824	00 66 00 00	                .byte $00, $66, $00, $00, $3c, $00 ; 12
>1828	3c 00
>182a	00 18 00 00	                .byte $00, $18, $00, $00, $00, $00 ; 18
>182e	00 00
>1830	00 00 00 00	                .byte $00, $00, $00, $00, $18, $00 ; 24
>1834	18 00
>1836	80 00 01 c0	                .byte $80, $00, $01, $c0, $18, $03 ; 30
>183a	18 03
>183c	66 66 66 c0	                .byte $66, $66, $66, $c0, $18, $03 ; 36
>1840	18 03
>1842	80 00 01 00	                .byte $80, $00, $01, $00, $18, $00 ; 42
>1846	18 00
>1848	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 48
>184c	00 00
>184e	00 18 00 00	                .byte $00, $18, $00, $00, $3c, $00 ; 54
>1852	3c 00
>1854	00 66 00 00	                .byte $00, $66, $00, $00, $00, $00 ; 60
>1858	00 00
>185a	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>185e	0c 28
>1860	80 00 00 e0	sprt_mouse      .byte $80, $00, $00, $e0, $00, $00 ; 6
>1864	00 00
>1866	b8 00 00 ce	                .byte $b8, $00, $00, $ce, $00, $00 ; 12
>186a	00 00
>186c	83 80 00 c0	                .byte $83, $80, $00, $c0, $e0, $00 ; 18
>1870	e0 00
>1872	80 18 00 c0	                .byte $80, $18, $00, $c0, $3c, $00 ; 24
>1876	3c 00
>1878	80 e0 00 c0	                .byte $80, $e0, $00, $c0, $60, $00 ; 30
>187c	60 00
>187e	98 30 00 fc	                .byte $98, $30, $00, $fc, $18, $00 ; 36
>1882	18 00
>1884	c6 0c 00 03	                .byte $c6, $0c, $00, $03, $06, $00 ; 42
>1888	06 00
>188a	01 9c 00 00	                .byte $01, $9c, $00, $00, $f0, $00 ; 48
>188e	f0 00
>1890	00 40 00 00	                .byte $00, $40, $00, $00, $00, $00 ; 54
>1894	00 00
>1896	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 60
>189a	00 00
>189c	00 00 00 01	                .byte $00, $00, $00, $01, $18, $31 ; 66, X,X,X color, xoffset, yoffset
>18a0	18 31
>18a2	00 7c 00 01	sprt_pointer    .byte $00, $7c, $00, $01, $83, $00 ; 6
>18a6	83 00
>18a8	06 10 c0 08	                .byte $06, $10, $c0, $08, $00, $30 ; 12
>18ac	00 30
>18ae	12 10 88 20	                .byte $12, $10, $88, $20, $00, $08 ; 18
>18b2	00 08
>18b4	40 ba 04 40	                .byte $40, $ba, $04, $40, $6c, $04 ; 24
>18b8	6c 04
>18ba	80 c6 02 aa	                .byte $80, $c6, $02, $aa, $82, $aa ; 30
>18be	82 aa
>18c0	80 c6 02 40	                .byte $80, $c6, $02, $40, $6c, $04 ; 36
>18c4	6c 04
>18c6	40 ba 04 20	                .byte $40, $ba, $04, $20, $00, $08 ; 42
>18ca	00 08
>18cc	12 10 90 08	                .byte $12, $10, $90, $08, $00, $20 ; 48
>18d0	00 20
>18d2	06 10 c0 01	                .byte $06, $10, $c0, $01, $83, $00 ; 54
>18d6	83 00
>18d8	00 7c 00 00	                .byte $00, $7c, $00, $00, $00, $00 ; 60
>18dc	00 00
>18de	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>18e2	0c 28
>18e4	55 55 55 aa	sprt_pointer2   .byte $55, $55, $55, $aa, $aa, $aa ; 6
>18e8	aa aa
>18ea	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 12
>18ee	aa aa
>18f0	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 18
>18f4	aa aa
>18f6	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 24
>18fa	00 2a
>18fc	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 30
>1900	00 2a
>1902	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 36
>1906	00 2a
>1908	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 42
>190c	00 2a
>190e	54 00 55 aa	                .byte $54, $00, $55, $aa, $aa, $aa ; 48
>1912	aa aa
>1914	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 54
>1918	aa aa
>191a	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 60
>191e	aa aa
>1920	55 55 55 01	                .byte $55, $55, $55, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1924	0c 28
>1926	06 00 00 0f	sprt_hand       .byte $06, $00, $00, $0f, $00, $00 ; 6
>192a	00 00
>192c	19 80 00 10	                .byte $19, $80, $00, $10, $80, $00 ; 12
>1930	80 00
>1932	19 80 00 16	                .byte $19, $80, $00, $16, $b1, $8c ; 18
>1936	b1 8c
>1938	10 ca 52 10	                .byte $10, $ca, $52, $10, $84, $21 ; 24
>193c	84 21
>193e	10 84 21 30	                .byte $10, $84, $21, $30, $84, $21 ; 30
>1942	84 21
>1944	50 84 21 90	                .byte $50, $84, $21, $90, $84, $21 ; 36
>1948	84 21
>194a	90 00 01 90	                .byte $90, $00, $01, $90, $00, $01 ; 42
>194e	00 01
>1950	90 7f c1 90	                .byte $90, $7f, $c1, $90, $00, $01 ; 48
>1954	00 01
>1956	40 ff e2 40	                .byte $40, $ff, $e2, $40, $00, $02 ; 54
>195a	00 02
>195c	3c 00 04 02	                .byte $3c, $00, $04, $02, $00, $08 ; 60
>1960	00 08
>1962	03 ff f8 01	                .byte $03, $ff, $f8, $01, $12, $31 ; 66, X,X,X color, xoffset, yoffset
>1966	12 31
>1968	00 3e 00 01	sprt_ultraman   .byte $00, $3e, $00, $01, $c1, $c0 ; 6
>196c	c1 c0
>196e	0e 3e 30 08	                .byte $0e, $3e, $30, $08, $41, $08 ; 12
>1972	41 08
>1974	10 1c 04 10	                .byte $10, $1c, $04, $10, $22, $04 ; 18
>1978	22 04
>197a	24 1c 12 23	                .byte $24, $1c, $12, $23, $00, $62 ; 24
>197e	00 62
>1980	20 08 02 47	                .byte $20, $08, $02, $47, $c1, $f1 ; 30
>1984	c1 f1
>1986	6a aa ab 47	                .byte $6a, $aa, $ab, $47, $c9, $f1 ; 36
>198a	c9 f1
>198c	20 08 02 20	                .byte $20, $08, $02, $20, $14, $02 ; 42
>1990	14 02
>1992	20 00 02 10	                .byte $20, $00, $02, $10, $00, $04 ; 48
>1996	00 04
>1998	10 7f 04 08	                .byte $10, $7f, $04, $08, $00, $08 ; 54
>199c	00 08
>199e	06 3e 30 01	                .byte $06, $3e, $30, $01, $c1, $c0 ; 60
>19a2	c1 c0
>19a4	00 3e 00 01	                .byte $00, $3e, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>19a8	0c 28
>19aa	00 1c 00 00	sprt_male       .byte $00, $1c, $00, $00, $3e, $00 ; 6
>19ae	3e 00
>19b0	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>19b4	3e 00
>19b6	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>19ba	08 00
>19bc	00 ff 80 00	                .byte $00, $ff, $80, $00, $ff, $80 ; 24
>19c0	ff 80
>19c2	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>19c6	9c 80
>19c8	00 88 80 00	                .byte $00, $88, $80, $00, $be, $80 ; 36
>19cc	be 80
>19ce	00 be 80 01	                .byte $00, $be, $80, $01, $9c, $c0 ; 42
>19d2	9c c0
>19d4	01 94 c0 00	                .byte $01, $94, $c0, $00, $14, $00 ; 48
>19d8	14 00
>19da	00 14 00 00	                .byte $00, $14, $00, $00, $14, $00 ; 54
>19de	14 00
>19e0	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>19e4	77 00
>19e6	00 77 00 01	                .byte $00, $77 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>19ea	0c 2f
>19ec	00 3c 00 00	sprt_robot      .byte $00, $3c, $00, $00, $24, $00 ; 6
>19f0	24 00
>19f2	00 66 18 00	                .byte $00, $66, $18, $00, $66, $38 ; 12
>19f6	66 38
>19f8	00 24 38 00	                .byte $00, $24, $38, $00, $3c, $10 ; 18
>19fc	3c 10
>19fe	00 18 10 00	                .byte $00, $18, $10, $00, $18, $10 ; 24
>1a02	18 10
>1a04	0f ff f0 08	                .byte $0f, $ff, $f0, $08, $7e, $00 ; 30
>1a08	7e 00
>1a0a	08 7e 00 08	                .byte $08, $7e, $00, $08, $18, $00 ; 36
>1a0e	18 00
>1a10	1c 18 00 1c	                .byte $1c, $18, $00, $1c, $18, $00 ; 42
>1a14	18 00
>1a16	18 3c 00 00	                .byte $18, $3c, $00, $00, $3c, $00 ; 48
>1a1a	3c 00
>1a1c	00 24 00 00	                .byte $00, $24, $00, $00, $24, $00 ; 54
>1a20	24 00
>1a22	00 24 00 03	                .byte $00, $24, $00, $03, $e7, $c0 ; 60
>1a26	e7 c0
>1a28	03 e7 c0 01	                .byte $03, $e7, $c0, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1a2c	0c 28
>1a2e	00 1c 00 00	sprt_femme      .byte $00, $1c, $00, $00, $3e, $00 ; 6
>1a32	3e 00
>1a34	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>1a38	3e 00
>1a3a	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>1a3e	08 00
>1a40	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 24
>1a44	ff 80
>1a46	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>1a4a	9c 80
>1a4c	00 88 80 00	                .byte $00, $88, $80, $00, $9c, $80 ; 36
>1a50	9c 80
>1a52	00 be 80 01	                .byte $00, $be, $80, $01, $be, $c0 ; 42
>1a56	be c0
>1a58	01 be c0 00	                .byte $01, $be, $c0, $00, $7f, $00 ; 48
>1a5c	7f 00
>1a5e	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 54
>1a62	ff 80
>1a64	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1a68	77 00
>1a6a	00 55 00 01	                .byte $00, $55 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1a6e	0c 2f
>1a70	dc 17		sprt_ptr0       .word  sprt_image + (0*66)
>1a72	1e 18		sprt_ptr1       .word  sprt_image + (1*66)
>1a74	60 18		sprt_ptr2       .word  sprt_image + (2*66)
>1a76	a2 18		sprt_ptr3       .word  sprt_image + (3*66)
>1a78	e4 18		sprt_ptr4       .word  sprt_image + (4*66)
>1a7a	26 19		sprt_ptr5       .word  sprt_image + (5*66)
>1a7c	68 19		sprt_ptr6       .word  sprt_image + (6*66)
>1a7e	aa 19		sprt_ptr7       .word  sprt_image + (7*66)
>1a80	ec 19		sprt_ptr8       .word  sprt_image + (8*66)
>1a82	2e 1a		sprt_ptr9       .word  sprt_image + (9*66)
>1a84	ff		testbyte        .byte 255
=$07			sprt_txtcol     =       vjaune
=$00			sprt_txtbak     =       bkcol0
=$01			sprt_color      =       vwhite
>1a85	07 00 04 0e	sprite_pos      .byte   sprt_txtcol,sprt_txtbak,4,14
>1a89	53 10 12 09	                .text       "Sprite pos. (x,y):($0000,$0000)"
>1a8d	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>1a9d	30 30 30 30 2c 24 30 30 30 30 29
>1aa8	00		                .byte   0

;******  Return to file: j2tester.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L j2tester.txt -o j2tester.prg j2tester.asm
; Wed Sep 24 15:39:16 2025

;Offset	;Hex		;Source

;******  Processing input file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0000	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0004	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 54 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: j2tester.asm

.0854			main
.0854	20 b0 0a	               jsr  scrmaninit
.0857	20 3e 0f	               jsr  js_init
.085a	a9 80		               lda  #$80
.085c	8d 03 0b	               sta  curcol
.085f	a9 00		               lda  #0
.0861	8d 21 d0	               sta  vicback0col
.0864	a9 02		               lda  #vrouge
.0866	8d 04 0b	               sta  brdcol
.0869	8d 20 d0	               sta  vicbordcol
.086c	20 bc 0a	               jsr  cls
.086f	a9 20		               lda  #$20
.0871	09 00		               ora  #%00000000
.0873	a0 04		               ldy  #$04
.0875	a2 04		               ldx  #$04
.0877	20 ca 1a	               jsr  memfill
.087a	a9 00		               lda  #$00
.087c	a0 d8		               ldy  #$d8
.087e	20 ca 1a	               jsr  memfill
.0881	20 96 13	               jsr  sprt_init
.0884	20 bf 0a	goagain        jsr  setinverse
.0887	20 5c 1a	               jsr  pushreg
.088a	a2 6f		               ldx  #<bstring1
.088c	a0 09		               ldy  #>bstring1
.088e	20 d4 0a	               jsr  putscxy
.0891	20 8b 1a	               jsr  popreg
.0894	20 5c 1a	               jsr  pushreg
.0897	a2 9c		               ldx  #<bstring2
.0899	a0 09		               ldy  #>bstring2
.089b	20 d4 0a	               jsr  putscxy
.089e	20 8b 1a	               jsr  popreg
.08a1	20 5c 1a	               jsr  pushreg
.08a4	a2 c9		               ldx  #<bstring3
.08a6	a0 09		               ldy  #>bstring3
.08a8	20 d4 0a	               jsr  putscxy
.08ab	20 8b 1a	               jsr  popreg
.08ae	20 5c 1a	               jsr  pushreg
.08b1	a2 f6		               ldx  #<bstring4
.08b3	a0 09		               ldy  #>bstring4
.08b5	20 d4 0a	               jsr  putscxy
.08b8	20 8b 1a	               jsr  popreg
.08bb	20 c2 0a	               jsr  clrinverse
.08be	20 5c 1a	               jsr  pushreg
.08c1	a2 0d		               ldx  #<js_status1
.08c3	a0 0a		               ldy  #>js_status1
.08c5	20 d4 0a	               jsr  putscxy
.08c8	20 8b 1a	               jsr  popreg
.08cb	20 5c 1a	               jsr  pushreg
.08ce	a2 25		               ldx  #<js_status2
.08d0	a0 0a		               ldy  #>js_status2
.08d2	20 d4 0a	               jsr  putscxy
.08d5	20 8b 1a	               jsr  popreg
.08d8	20 5c 1a	               jsr  pushreg
.08db	a2 3c		               ldx  #<js_status3
.08dd	a0 0a		               ldy  #>js_status3
.08df	20 d4 0a	               jsr  putscxy
.08e2	20 8b 1a	               jsr  popreg
.08e5	20 5c 1a	               jsr  pushreg
.08e8	a2 55		               ldx  #<js_status4
.08ea	a0 0a		               ldy  #>js_status4
.08ec	20 d4 0a	               jsr  putscxy
.08ef	20 8b 1a	               jsr  popreg
.08f2	20 5c 1a	               jsr  pushreg
.08f5	a2 6e		               ldx  #<js_status5
.08f7	a0 0a		               ldy  #>js_status5
.08f9	20 d4 0a	               jsr  putscxy
.08fc	20 8b 1a	               jsr  popreg
.08ff	20 5c 1a	               jsr  pushreg
.0902	a2 84		               ldx  #<js_status6
.0904	a0 0a		               ldy  #>js_status6
.0906	20 d4 0a	               jsr  putscxy
.0909	20 8b 1a	               jsr  popreg
.090c	20 5c 1a	               jsr  pushreg
.090f	a2 00		               ldx  #$00
.0911	a0 0f		               ldy  #$0f
.0913	20 e0 0a	               jsr  gotoxy
.0916	20 8b 1a	               jsr  popreg
.0919	a9 07		               lda  #vjaune
.091b	20 d7 0a	               jsr  setcurcol
.091e	a2 00		               ldx  #$00
.0920	20 dd 0a	               jsr  setbkcol
.0923	20 53 0f	looper         jsr  js_scan        ; ****** Un prob avec j2scan.
.0926	4c 26 09	INFINIE        jmp  INFINIE          ; Un branchement infinie.
.0929	20 3f 11	               jsr  js_showvals
.092c	20 62 12	               jsr  js_updatecurs
.092f	20 28 14	               jsr  sprt_move
.0932	a2 16		               ldx  #$16
.0934	a0 11		               ldy  #$11
.0936	20 e0 0a	               jsr  gotoxy
.0939	a9 03		               lda  #3
.093b	20 d7 0a	               jsr  setcurcol
.093e	ad 07 13	               lda  js_2fire
.0941	f0 e0		               beq  looper
.0943	ad 06 13	               lda  js_2y
.0946	c9 04		               cmp  #$04
.0948	d0 1d		               bne  nochange
.094a	ad 05 13	               lda  js_2x
.094d	c9 0b		               cmp  #$0b
.094f	30 16		               bmi  nochange
.0951	c9 1d		               cmp  #$1d
.0953	10 12		               bpl  nochange
.0955	ee f1 13	               inc  sprt_ptr
.0958	ad f1 13	               lda  sprt_ptr
.095b	c9 09		               cmp  #9
.095d	90 02		               bcc  drawsptr
.095f	a9 00		               lda  #$00
.0961	8d f1 13	drawsptr       sta  sprt_ptr
.0964	20 96 13	               jsr  sprt_init
.0967	4c 23 09	nochange       jmp  looper
.096a	20 e1 ff	out            jsr  kstop
.096d	60		               rts
>096e	00		onebyte        .byte     0
>096f	0e 40 00 00	bstring1       .byte     vbleu1,bkcol1,0,0
>0973	20 20 20 20	               .text     "      Visualisation du port jeu #2      "
>0977	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>0987	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>0997	20 20 20 20
>099b	00		               .byte     0
>099c	0b 80 00 01	bstring2       .byte     vgris,bkcol2,0,1
>09a0	20 50 12 0f	               .text     " Programme assembleur pour 6510 sur C64 "
>09a4	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>09b4	12 20 10 0f 15 12 20 36 35 31 30 20 13 15 12 20
>09c4	43 36 34 20
>09c8	00		               .byte     0
>09c9	0a c0 00 02	bstring3       .byte     vrose,bkcol3,0,2
>09cd	20 20 20 20	               .text     "     par Daniel Lafrance (2024-06) C    "
>09d1	20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06 12
>09e1	01 0e 03 05 20 28 32 30 32 34 2d 30 36 29 20 43
>09f1	20 20 20 20
>09f5	00		               .byte     0
>09f6	07 c0 0b 04	bstring4       .byte     vjaune,bkcol3,11,4
>09fa	20 43 08 01	               .text     " Changer pointeur "
>09fe	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>0a0c	00		               .byte     0
>0a0d	0d 00 13 16	js_status1     .byte     vvert1,bkcol0,19,22
>0a11	20 20 20 15	               .text     "   up <----1> haut "
>0a15	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>0a24	00		               .byte     0
>0a25	0e 00 13 15	js_status2     .byte     vbleu1,bkcol0,19,21
>0a29	20 04 0f 17	               .text     " down <---2-> bas "
>0a2d	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>0a3b	00		               .byte     0
>0a3c	0a 00 13 14	js_status3     .byte     vrose,bkcol0,19,20
>0a40	20 0c 05 06	               .text     " left <--4--> gauche"
>0a44	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>0a54	00		               .byte     0
>0a55	07 00 13 13	js_status4     .byte     vjaune,bkcol0,19,19
>0a59	12 09 07 08	               .text     "right <-8---> droite"
>0a5d	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a6d	00		               .byte     0
>0a6e	01 00 13 12	js_status5     .byte     vblanc,bkcol0,19,18
>0a72	20 46 09 12	               .text     " Fire <1----> Feu"
>0a76	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>0a83	00		               .byte     0
>0a84	03 00 01 17	js_status6     .byte     vcyan,bkcol0,1,23
>0a88	2b 2d 3e 20	               .text     "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a8c	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a9c	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0aac	24 31 46
>0aaf	00		               .byte     0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-text.asm

=$00			sd_bkcol       =    %00000000
=$00			sd_bkcol0      =    %00000000
=$40			sd_bkcol1      =    %01000000
=$80			sd_bkcol2      =    %10000000
=$c0			sd_bkcol3      =    %11000000
=$00			bkcol          =    sd_bkcol
=$00			bkcol0         =    sd_bkcol0
=$40			bkcol1         =    sd_bkcol1
=$80			bkcol2         =    sd_bkcol2
=$c0			bkcol3         =    sd_bkcol3
.0ab0	4c fe 0a	scrmaninit     jmp     nowhere
.0ab3	4c fe 0a	curshome       jmp     nowhere
.0ab6	4c fe 0a	incscrptr      jmp     nowhere
.0ab9	4c fe 0a	synccolptr     jmp     nowhere
.0abc	4c fe 0a	cls            jmp     nowhere
.0abf	4c fe 0a	setinverse     jmp     nowhere
.0ac2	4c fe 0a	clrinverse     jmp     nowhere
.0ac5	4c fe 0a	z2putch        jmp     nowhere
.0ac8	4c fe 0a	z2puts         jmp     nowhere
.0acb	4c fe 0a	putch          jmp     nowhere
.0ace	4c fe 0a	puts           jmp     nowhere
.0ad1	4c fe 0a	putsxy         jmp     nowhere
.0ad4	4c fe 0a	putscxy        jmp     nowhere
.0ad7	4c fe 0a	setcurcol      jmp     nowhere
.0ada	4c fe 0a	setbakcols     jmp     nowhere
.0add	4c fe 0a	setbkcol       jmp     nowhere
.0ae0	4c fe 0a	gotoxy         jmp     nowhere
.0ae3	4c fe 0a	saddscrptr     jmp     nowhere
.0ae6	4c fe 0a	scrptr2str     jmp     nowhere
.0ae9	4c fe 0a	scrptr2zp1     jmp     nowhere
.0aec	4c fe 0a	colptr2zp1     jmp     nowhere
.0aef	4c fe 0a	scrptr2zp2     jmp     nowhere
.0af2	4c fe 0a	colptr2zp2     jmp     nowhere
.0af5	4c fe 0a	putrahex       jmp     nowhere
.0af8	4c fe 0a	putrahexxy     jmp     nowhere
.0afb	4c fe 0a	putrahexcxy    jmp     nowhere
.0afe	60		nowhere        rts
>0aff	00 00		scrptr          .word   $00
>0b01	00 00		colptr          .word   $00
>0b03	00		curcol          .byte   $00
>0b04	0c		brdcol          .byte   $0c
>0b05	00		bakcol          .byte   $00
>0b06	00		bakcol0         .byte   vnoir           ;$0b
>0b07	02		bakcol1         .byte   vrouge          ;$0b
>0b08	05		bakcol2         .byte   vvert           ;$0b
>0b09	06		bakcol3         .byte   vbleu           ;$0b
>0b0a	00		inverse         .byte   $00
>0b0b	00 00 00 00	scraddr         .byte   0,0,0,0,0
>0b0f	00
>0b10	00 00 00 00	coladdr         .byte   0,0,0,0,0
>0b14	00
=$0aff			sd_scrptr       =    scrptr
=$0b01			sd_colptr       =    colptr
=$0b03			sd_curcol       =    curcol
=$0b04			sd_brdcol       =    brdcol
=$0b05			sd_bakcol       =    bakcol
=$0b06			sd_bakcol0      =    bakcol0
=$0b07			sd_bakcol1      =    bakcol1
=$0b08			sd_bakcol2      =    bakcol2
=$0b09			sd_bakcol3      =    bakcol3
=$0b0a			sd_inverse      =    inverse
=$0b0b			sd_scraddr      =    scraddr
=$0b10			sd_coladdr      =    coladdr
=$0b15			setvectors   =       sd_setvectors
.0b15			sd_setvectors
.0b15	20 ee 19	               jsr  push
.0b18	a9 4c		               lda     #$4c
.0b1a	8d b0 0a	               sta     scrmaninit
.0b1d	a9 a2		               lda     #<sd_scrmaninit
.0b1f	8d b1 0a	               sta     scrmaninit+1
.0b22	a9 0c		               lda     #>sd_scrmaninit
.0b24	8d b2 0a	               sta     scrmaninit+2
.0b27	a9 4c		               lda     #$4c
.0b29	8d b3 0a	               sta     curshome
.0b2c	a9 b0		               lda     #<sd_curshome
.0b2e	8d b4 0a	               sta     curshome+1
.0b31	a9 0c		               lda     #>sd_curshome
.0b33	8d b5 0a	               sta     curshome+2
.0b36	a9 4c		               lda     #$4c
.0b38	8d b6 0a	               sta     incscrptr
.0b3b	a9 da		               lda     #<sd_incscrptr
.0b3d	8d b7 0a	               sta     incscrptr+1
.0b40	a9 0c		               lda     #>sd_incscrptr
.0b42	8d b8 0a	               sta     incscrptr+2
.0b45	a9 4c		               lda     #$4c
.0b47	8d b9 0a	               sta     synccolptr
.0b4a	a9 ed		               lda     #<sd_synccolptr
.0b4c	8d ba 0a	               sta     synccolptr+1
.0b4f	a9 0c		               lda     #>sd_synccolptr
.0b51	8d bb 0a	               sta     synccolptr+2
.0b54	a9 4c		               lda     #$4c
.0b56	8d bc 0a	               sta     cls
.0b59	a9 02		               lda     #<sd_cls
.0b5b	8d bd 0a	               sta     cls+1
.0b5e	a9 0d		               lda     #>sd_cls
.0b60	8d be 0a	               sta     cls+2
.0b63	a9 4c		               lda     #$4c
.0b65	8d bf 0a	               sta     setinverse
.0b68	a9 5a		               lda     #<sd_setinverse
.0b6a	8d c0 0a	               sta     setinverse+1
.0b6d	a9 0d		               lda     #>sd_setinverse
.0b6f	8d c1 0a	               sta     setinverse+2
.0b72	a9 4c		               lda     #$4c
.0b74	8d c2 0a	               sta     clrinverse
.0b77	a9 64		               lda     #<sd_clrinverse
.0b79	8d c3 0a	               sta     clrinverse+1
.0b7c	a9 0d		               lda     #>sd_clrinverse
.0b7e	8d c4 0a	               sta     clrinverse+2
.0b81	a9 4c		               lda     #$4c
.0b83	8d c5 0a	               sta     z2putch
.0b86	a9 6e		               lda     #<sd_z2putch
.0b88	8d c6 0a	               sta     z2putch+1
.0b8b	a9 0d		               lda     #>sd_z2putch
.0b8d	8d c7 0a	               sta     z2putch+2
.0b90	a9 4c		                lda     #$4c
.0b92	8d c8 0a	                sta     z2puts
.0b95	a9 7c		                lda     #<sd_z2puts
.0b97	8d c9 0a	                sta     z2puts+1
.0b9a	a9 0d		                lda     #>sd_z2puts
.0b9c	8d ca 0a	                sta     z2puts+2
.0b9f	a9 4c		                lda     #$4c
.0ba1	8d cb 0a	                sta     putch
.0ba4	a9 92		                lda     #<sd_putch
.0ba6	8d cc 0a	                sta     putch+1
.0ba9	a9 0d		                lda     #>sd_putch
.0bab	8d cd 0a	                sta     putch+2
.0bae	a9 4c		                lda     #$4c
.0bb0	8d ce 0a	                sta     puts
.0bb3	a9 b6		                lda     #<sd_puts
.0bb5	8d cf 0a	                sta     puts+1
.0bb8	a9 0d		                lda     #>sd_puts
.0bba	8d d0 0a	                sta     puts+2
.0bbd	a9 4c		                lda     #$4c
.0bbf	8d d1 0a	                sta     putsxy
.0bc2	a9 ca		                lda     #<sd_putsxy
.0bc4	8d d2 0a	                sta     putsxy+1
.0bc7	a9 0d		                lda     #>sd_putsxy
.0bc9	8d d3 0a	                sta     putsxy+2
.0bcc	a9 4c		                lda     #$4c
.0bce	8d d4 0a	                sta     putscxy
.0bd1	a9 ef		                lda     #<sd_putscxy
.0bd3	8d d5 0a	                sta     putscxy+1
.0bd6	a9 0d		                lda     #>sd_putscxy
.0bd8	8d d6 0a	                sta     putscxy+2
.0bdb	a9 4c		                lda     #$4c
.0bdd	8d d7 0a	                sta     setcurcol
.0be0	a9 25		                lda     #<sd_setcurcol
.0be2	8d d8 0a	                sta     setcurcol+1
.0be5	a9 0e		                lda     #>sd_setcurcol
.0be7	8d d9 0a	                sta     setcurcol+2
.0bea	a9 4c		                lda     #$4c
.0bec	8d da 0a	                sta     setbakcols
.0bef	a9 2b		                lda     #<sd_setbakcols
.0bf1	8d db 0a	                sta     setbakcols+1
.0bf4	a9 0e		                lda     #>sd_setbakcols
.0bf6	8d dc 0a	                sta     setbakcols+2
.0bf9	a9 4c		                lda     #$4c
.0bfb	8d dd 0a	                sta     setbkcol
.0bfe	a9 3c		                lda     #<sd_setbkcol
.0c00	8d de 0a	                sta     setbkcol+1
.0c03	a9 0e		                lda     #>sd_setbkcol
.0c05	8d df 0a	                sta     setbkcol+2
.0c08	a9 4c		                lda     #$4c
.0c0a	8d e0 0a	                sta     gotoxy
.0c0d	a9 54		                lda     #<sd_gotoxy
.0c0f	8d e1 0a	                sta     gotoxy+1
.0c12	a9 0e		                lda     #>sd_gotoxy
.0c14	8d e2 0a	                sta     gotoxy+2
.0c17	a9 4c		                lda     #$4c
.0c19	8d e3 0a	                sta     saddscrptr
.0c1c	a9 72		                lda     #<sd_saddscrptr
.0c1e	8d e4 0a	                sta     saddscrptr+1
.0c21	a9 0e		                lda     #>sd_saddscrptr
.0c23	8d e5 0a	                sta     saddscrptr+2
.0c26	a9 4c		                lda     #$4c
.0c28	8d e6 0a	                sta     scrptr2str
.0c2b	a9 83		                lda     #<sd_scrptr2str
.0c2d	8d e7 0a	                sta     scrptr2str+1
.0c30	a9 0e		                lda     #>sd_scrptr2str
.0c32	8d e8 0a	                sta     scrptr2str+2
.0c35	a9 4c		                lda     #$4c
.0c37	8d e9 0a	                sta     scrptr2zp1
.0c3a	a9 d5		                lda     #<sd_scrptr2zp1
.0c3c	8d ea 0a	                sta     scrptr2zp1+1
.0c3f	a9 0e		                lda     #>sd_scrptr2zp1
.0c41	8d eb 0a	                sta     scrptr2zp1+2
.0c44	a9 4c		                lda     #$4c
.0c46	8d ec 0a	                sta     colptr2zp1
.0c49	a9 e4		                lda     #<sd_colptr2zp1
.0c4b	8d ed 0a	                sta     colptr2zp1+1
.0c4e	a9 0e		                lda     #>sd_colptr2zp1
.0c50	8d ee 0a	                sta     colptr2zp1+2
.0c53	a9 4c		                lda     #$4c
.0c55	8d ef 0a	                sta     scrptr2zp2
.0c58	a9 f3		                lda     #<sd_scrptr2zp2
.0c5a	8d f0 0a	                sta     scrptr2zp2+1
.0c5d	a9 0e		                lda     #>sd_scrptr2zp2
.0c5f	8d f1 0a	                sta     scrptr2zp2+2
.0c62	a9 4c		                lda     #$4c
.0c64	8d f2 0a	                sta     colptr2zp2
.0c67	a9 02		                lda     #<sd_colptr2zp2
.0c69	8d f3 0a	                sta     colptr2zp2+1
.0c6c	a9 0f		                lda     #>sd_colptr2zp2
.0c6e	8d f4 0a	                sta     colptr2zp2+2
.0c71	a9 4c		                lda     #$4c
.0c73	8d f5 0a	                sta     putrahex
.0c76	a9 11		                lda     #<sd_putrahex
.0c78	8d f6 0a	                sta     putrahex+1
.0c7b	a9 0f		                lda     #>sd_putrahex
.0c7d	8d f7 0a	                sta     putrahex+2
.0c80	a9 4c		                lda     #$4c
.0c82	8d f8 0a	                sta     putrahexxy
.0c85	a9 20		                lda     #<sd_putrahexxy
.0c87	8d f9 0a	                sta     putrahexxy+1
.0c8a	a9 0f		                lda     #>sd_putrahexxy
.0c8c	8d fa 0a	                sta     putrahexxy+2
.0c8f	a9 4c		                lda     #$4c
.0c91	8d fb 0a	                sta     putrahexcxy
.0c94	a9 2f		                lda     #<sd_putrahexcxy
.0c96	8d fc 0a	                sta     putrahexcxy+1
.0c99	a9 0f		                lda     #>sd_putrahexcxy
.0c9b	8d fd 0a	                sta     putrahexcxy+2
.0c9e	20 29 1a	                jsr     pop
.0ca1	60		                rts
.0ca2			sd_scrmaninit
.0ca2	08		                php
.0ca3	48		                pha
.0ca4	a9 17		                lda     #%00010111
.0ca6	8d 18 d0	                sta     $d018
.0ca9	ad 11 d0	                lda     $d011
.0cac	29 bf		                and     #%10111111
.0cae	68		                pla
.0caf	28		                plp
.0cb0			sd_curshome
.0cb0	08		                php
.0cb1	48		                pha
.0cb2	a9 00		                lda     #$00
.0cb4	8d ff 0a	                sta     sd_scrptr
.0cb7	a9 04		                lda     #$04
.0cb9	8d 00 0b	                sta     sd_scrptr+1
.0cbc	20 ed 0c	                jsr     sd_synccolptr
.0cbf	ad 06 0b	                lda     sd_bakcol0
.0cc2	8d 21 d0	                sta     $d021
.0cc5	ad 07 0b	                lda     sd_bakcol1
.0cc8	8d 22 d0	                sta     $d022
.0ccb	ad 08 0b	                lda     sd_bakcol2
.0cce	8d 23 d0	                sta     $d023
.0cd1	ad 09 0b	                lda     sd_bakcol3
.0cd4	8d 24 d0	                sta     $d024
.0cd7	68		                pla
.0cd8	28		                plp
.0cd9	60		                rts
.0cda			sd_incscrptr
.0cda	08		                php
.0cdb	48		                pha
.0cdc	ee ff 0a	                inc     sd_scrptr
.0cdf	ad ff 0a	                lda     sd_scrptr
.0ce2	d0 03		                bne     norep
.0ce4	ee 00 0b	                inc     sd_scrptr+1
.0ce7	20 ed 0c	norep           jsr     sd_synccolptr
.0cea	68		                pla
.0ceb	28		                plp
.0cec	60		                rts
.0ced			sd_synccolptr
.0ced	08		                php
.0cee	48		                pha
.0cef	ad ff 0a	                lda     sd_scrptr
.0cf2	8d 01 0b	                sta     sd_colptr
.0cf5	ad 00 0b	                lda     sd_scrptr+1
.0cf8	29 03		                and     #%00000011
.0cfa	09 d8		                ora     #%11011000
.0cfc	8d 02 0b	                sta     sd_colptr+1
.0cff	68		                pla
.0d00	28		                plp
.0d01	60		                rts
.0d02			sd_cls
.0d02	20 ee 19	                jsr     push
.0d05	a9 00		                lda     #$00
.0d07	8d ff 0a	                sta     sd_scrptr
.0d0a	a9 04		                lda     #$04
.0d0c	8d 00 0b	                sta     sd_scrptr+1
.0d0f	20 ed 0c	                jsr     sd_synccolptr
.0d12	20 7d 1b	                jsr     savezp1
.0d15	20 d5 0e	                jsr     sd_scrptr2zp1
.0d18	ad 04 0b	                lda     sd_brdcol
.0d1b	8d 20 d0	                sta     vicbordcol
.0d1e	ad 05 0b	                lda     sd_bakcol
.0d21	8d 21 d0	                sta     vicbackcol
.0d24	a9 20		                lda     #$20
.0d26	a2 04		                ldx     #4
.0d28	a0 00		nextline        ldy     #0
.0d2a	91 fb		nextcar         sta     (zpage1),y
.0d2c	a5 fc		                lda     zpage1+1
.0d2e	48		                pha
.0d2f	29 03		                and     #%00000011
.0d31	09 d8		                ora     #%11011000
.0d33	85 fc		                sta     zpage1+1
.0d35	a9 00		                lda     #0
.0d37	91 fb		                sta     (zpage1),y
.0d39	68		                pla
.0d3a	85 fc		                sta     zpage1+1
.0d3c	a9 20		                lda     #$20
.0d3e	88		                dey
.0d3f	d0 e9		                bne     nextcar
.0d41	e6 fc		                inc     zpage1+1
.0d43	ca		                dex
.0d44	d0 e4		                bne     nextcar
.0d46	a9 00		                lda     #$00
.0d48	8d ff 0a	                sta     sd_scrptr
.0d4b	a9 04		                lda     #$04
.0d4d	8d 00 0b	                sta     sd_scrptr+1
.0d50	20 ed 0c	                jsr     sd_synccolptr
.0d53	20 8c 1b	                jsr     restzp1
.0d56	20 29 1a	                jsr     pop
.0d59	60		                rts
.0d5a			sd_setinverse
.0d5a	08		                php
.0d5b	48		                pha
.0d5c	a9 80		                lda     #%10000000
.0d5e	8d 0a 0b	                sta     sd_inverse
.0d61	68		                pla
.0d62	28		                plp
.0d63	60		                rts
.0d64			sd_clrinverse
.0d64	08		                php
.0d65	48		                pha
.0d66	a9 00		                lda     #%00000000
.0d68	8d 0a 0b	                sta     sd_inverse
.0d6b	68		                pla
.0d6c	28		                plp
.0d6d	60		                rts
.0d6e			sd_z2putch
.0d6e	20 ee 19	                jsr     push
.0d71	a0 00		                ldy     #$0
.0d73	b1 fd		                lda     (zpage2),y
.0d75	20 92 0d	                jsr     sd_putch
.0d78	20 29 1a	                jsr     pop
.0d7b	60		                rts
.0d7c			sd_z2puts
.0d7c	20 ee 19	                jsr     push
.0d7f	a0 00		                ldy     #$0
.0d81	b1 fd		nextcar         lda     (zpage2),y
.0d83	f0 09		                beq     endstr
.0d85	20 6e 0d	                jsr     sd_z2putch
.0d88	20 61 1b	                jsr     inczp2
.0d8b	4c 81 0d	                jmp     nextcar
.0d8e	20 29 1a	endstr          jsr     pop
.0d91	60		                rts
.0d92			sd_putch
.0d92	20 ee 19	                jsr     push            ; On sauvegarde les registres
.0d95	20 7d 1b	                jsr     savezp1         ; On sauve le zp1 du progamme appelant
.0d98	20 d5 0e	                jsr     sd_scrptr2zp1   ; On place le pointeur d'écran sur zp1
.0d9b	a0 00		                ldy     #0              ; On met Y à 0
.0d9d	0d 0a 0b	                ora     sd_inverse
.0da0	91 fb		                sta     (zpage1),y      ; On affiche le caractèere
.0da2	ae 02 0b	                ldx     sd_colptr+1     ; On place le MSB du pointeur de couleur
.0da5	86 fc		                stx     zpage1+1        ; dans le MSB du zp1
.0da7	ad 03 0b	                lda     sd_curcol       ; on charge la couleur voulu dans
.0daa	91 fb		                sta     (zpage1),y      ; la ram de couleur
.0dac	20 da 0c	                jsr     sd_incscrptr    ; On incrémente le pointeur d'écran
.0daf	20 8c 1b	                jsr     restzp1         ; On récupèere le zpe du programme appelant
.0db2	20 29 1a	                jsr     pop             ; on replace tous les registres
.0db5	60		                rts
.0db6			sd_puts
.0db6	20 ee 19	                jsr     push
.0db9	20 9b 1b	                jsr     savezp2
.0dbc	86 fd		                stx     zpage2
.0dbe	84 fe		                sty     zpage2+1
.0dc0	20 7c 0d	                jsr     sd_z2puts
.0dc3	20 aa 1b	getout          jsr     restzp2
.0dc6	20 29 1a	                jsr     pop
.0dc9	60		                rts
.0dca			sd_putsxy
.0dca	20 ee 19	                jsr     push            ; On sauvegarde les registres
.0dcd	20 9b 1b	                jsr     savezp2         ; et le zp2
.0dd0	86 fd		                stx     zpage2          ; On place l'adresse de la
.0dd2	84 fe		                sty     zpage2+1        ; X = MSB, Y = LSB
.0dd4	a0 00		                ldy     #0              ; On place le compteur
.0dd6	b1 fd		                lda     (zpage2),y      ; Lecture de la position X
.0dd8	aa		                tax                     ; de A à X
.0dd9	20 61 1b	                jsr     inczp2       ; On déplace le pointeur
.0ddc	b1 fd		                lda     (zpage2),y      ;
.0dde	a8		                tay                     ; de A à Y
.0ddf	20 54 0e	                jsr     sd_gotoxy       ; sd_gotoxy prend X = colonne,
.0de2	20 61 1b	                jsr     inczp2
.0de5	20 7c 0d	                jsr     sd_z2puts
.0de8	20 aa 1b	                jsr     restzp2
.0deb	20 29 1a	                jsr     pop
.0dee	60		                rts
.0def			sd_putscxy
.0def	20 ee 19	                jsr     push            ; On sauvegarde les registres et le zp2
.0df2	20 9b 1b	                jsr     savezp2
.0df5	86 fd		                stx     zpage2          ; On place l'adresse de la chaine dans le zp2
.0df7	84 fe		                sty     zpage2+1        ; X = MSB, Y = LSB
.0df9	a0 00		                ldy     #0              ; On place le compteur
.0dfb	b1 fd		                lda     (zpage2),y      ; on charge la couleur
.0dfd	20 25 0e	                jsr     sd_setcurcol    ; et on la définie
.0e00	20 61 1b	                jsr     inczp2       ; On pointe le prochain byte
.0e03	b1 fd		                lda     (zpage2),y      ; Lecture de la position X
.0e05	29 c0		                and     #$c0
.0e07	85 00		                sta     sd_bkcol
.0e09	20 61 1b	                jsr     inczp2       ; On déplace le pointeur
.0e0c	b1 fd		                lda     (zpage2),y      ; Lecture de la position X
.0e0e	aa		                tax                     ; de A à X
.0e0f	20 61 1b	                jsr     inczp2       ; On déplace le pointeur
.0e12	b1 fd		                lda     (zpage2),y      ;
.0e14	a8		                tay                     ; de A à Y
.0e15	20 54 0e	                jsr     sd_gotoxy       ; sd_gotoxy prend X = colonne, y = ligne
.0e18	20 61 1b	                jsr     inczp2
.0e1b	20 7c 0d	                jsr     sd_z2puts
.0e1e	20 aa 1b	                jsr     restzp2
.0e21	20 29 1a	                jsr     pop
.0e24	60		                rts
.0e25			sd_setcurcol
.0e25	08		                php
.0e26	8d 03 0b	                sta  sd_curcol
.0e29	28		                plp
.0e2a	60		                rts
.0e2b			sd_setbakcols
.0e2b	08		                php
.0e2c	48		                pha
.0e2d	8a		                txa
.0e2e	29 03		                and     #$3
.0e30	aa		                tax
.0e31	68		                pla
.0e32	48		                pha
.0e33	9d 07 0b	                sta     sd_bakcol1,x
.0e36	9d 21 d0	                sta     $d021,x
.0e39	68		                pla
.0e3a	28		                plp
.0e3b	60		                rts
.0e3c			sd_setbkcol
.0e3c	08		                php
.0e3d	48		                pha
.0e3e	29 c0		                and     #$c0
.0e40	85 00		                sta     sd_bkcol
.0e42	4a		                lsr
.0e43	4a		                lsr
.0e44	4a		                lsr
.0e45	4a		                lsr
.0e46	4a		                lsr
.0e47	4a		                lsr
.0e48	29 03		                and     #%00000011
.0e4a	8a		                txa
.0e4b	bd 07 0b	                lda     sd_bakcol1,x
.0e4e	8d 05 0b	                sta     sd_bakcol
.0e51	68		                pla
.0e52	28		                plp
.0e53	60		                rts
.0e54			sd_gotoxy
.0e54	20 ee 19	                jsr     push
.0e57	20 b0 0c	                jsr     sd_curshome
.0e5a	c0 00		yagain          cpy     #0
.0e5c	f0 09		                beq     setx
.0e5e	a9 28		                lda     #40
.0e60	20 72 0e	                jsr     sd_saddscrptr
.0e63	88		                dey
.0e64	4c 5a 0e	                jmp     yagain
.0e67	8a		setx            txa
.0e68	20 72 0e	                jsr     sd_saddscrptr
.0e6b	20 ed 0c	                jsr     sd_synccolptr
.0e6e	20 29 1a	                jsr     pop
.0e71	60		                rts
.0e72			sd_saddscrptr
.0e72	08		                php
.0e73	48		                pha
.0e74	18		                clc
.0e75	6d ff 0a	                adc     sd_scrptr
.0e78	8d ff 0a	                sta     sd_scrptr
.0e7b	90 03		                bcc     norep
.0e7d	ee 00 0b	                inc     sd_scrptr+1
.0e80	68		norep           pla
.0e81	28		                plp
.0e82	60		                rts
.0e83			sd_scrptr2str
.0e83	20 ee 19	                jsr     push
.0e86	ad 00 0b	                lda     sd_scrptr+1
.0e89	48		                pha
.0e8a	20 75 1c	                jsr     lsra4bits
.0e8d	20 69 1c	                jsr     nibtohex
.0e90	8d 0b 0b	                sta     sd_scraddr
.0e93	68		                pla
.0e94	20 75 1c	                jsr     lsra4bits
.0e97	20 69 1c	                jsr     nibtohex
.0e9a	8d 0c 0b	                sta     sd_scraddr+1
.0e9d	ad 00 0b	                lda     sd_scrptr+1
.0ea0	48		                pha
.0ea1	20 75 1c	                jsr     lsra4bits
.0ea4	20 69 1c	                jsr     nibtohex
.0ea7	8d 0b 0b	                sta     sd_scraddr
.0eaa	68		                pla
.0eab	20 75 1c	                jsr     lsra4bits
.0eae	20 69 1c	                jsr     nibtohex
.0eb1	8d 0c 0b	                sta     sd_scraddr+1
.0eb4	ad ff 0a	                lda     sd_scrptr
.0eb7	48		                pha
.0eb8	20 75 1c	                jsr     lsra4bits
.0ebb	20 69 1c	                jsr     nibtohex
.0ebe	8d 0d 0b	                sta     sd_scraddr+2
.0ec1	8d 12 0b	                sta     sd_coladdr+2
.0ec4	68		                pla
.0ec5	20 75 1c	                jsr     lsra4bits
.0ec8	20 69 1c	                jsr     nibtohex
.0ecb	8d 0e 0b	                sta     sd_scraddr+3
.0ece	8d 13 0b	                sta     sd_coladdr+3
.0ed1	20 29 1a	                jsr     pop
.0ed4	60		                rts
.0ed5			sd_scrptr2zp1
.0ed5	08		                php
.0ed6	48		                pha
.0ed7	ad ff 0a	                lda     sd_scrptr
.0eda	85 fb		                sta     zpage1
.0edc	ad 00 0b	                lda     sd_scrptr+1
.0edf	85 fc		                sta     zpage1+1
.0ee1	68		                pla
.0ee2	28		                plp
.0ee3	60		                rts
.0ee4			sd_colptr2zp1
.0ee4	08		                php
.0ee5	48		                pha
.0ee6	ad 01 0b	                lda     sd_colptr
.0ee9	85 fb		                sta     zpage1
.0eeb	ad 02 0b	                lda     sd_colptr+1
.0eee	85 fc		                sta     zpage1+1
.0ef0	68		                pla
.0ef1	28		                plp
.0ef2	60		                rts
.0ef3			sd_scrptr2zp2
.0ef3	08		                php
.0ef4	48		                pha
.0ef5	ad ff 0a	                lda     sd_scrptr
.0ef8	85 fd		                sta     zpage2
.0efa	ad 00 0b	                lda     sd_scrptr+1
.0efd	85 fe		                sta     zpage2+1
.0eff	68		                pla
.0f00	28		                plp
.0f01	60		                rts
.0f02			sd_colptr2zp2
.0f02	08		                php
.0f03	48		                pha
.0f04	ad 01 0b	                lda     sd_colptr
.0f07	85 fd		                sta     zpage2
.0f09	ad 02 0b	                lda     sd_colptr+1
.0f0c	85 fe		                sta     zpage2+1
.0f0e	68		                pla
.0f0f	28		                plp
.0f10	60		                rts
.0f11			sd_putrahex
.0f11	08		                php
.0f12	48		                pha
.0f13	20 7c 1c	                jsr     atohex
.0f16	a2 14		                ldx     #<a2hexcol
.0f18	a0 1c		                ldy     #>a2hexcol
.0f1a	20 b6 0d	                jsr     sd_puts
.0f1d	68		                pla
.0f1e	28		                plp
.0f1f	60		                rts
.0f20			sd_putrahexxy
.0f20	08		                php
.0f21	48		                pha
.0f22	20 7c 1c	                jsr     atohex
.0f25	a9 16		                lda     #<a2hexpos
.0f27	a0 1c		                ldy     #>a2hexpos
.0f29	20 ca 0d	                jsr     sd_putsxy
.0f2c	68		                pla
.0f2d	28		                plp
.0f2e	60		                rts
.0f2f			sd_putrahexcxy
.0f2f	08		                php
.0f30	68		                pla
.0f31	20 7c 1c	                jsr     atohex
.0f34	a9 16		                lda     #<a2hexpos
.0f36	a0 1c		                ldy     #>a2hexpos
.0f38	20 ef 0d	                jsr     sd_putscxy
.0f3b	68		                pla
.0f3c	28		                plp
.0f3d	60		                rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-joystick.asm

=$dc00			js_2port       =    $dc00          ; CIA #1 Port data A
=$dc01			js_1port       =    $dc01          ; CIA #1 Port data B
=$dc02			js_2dir        =    $dc02          ; CIA #1 Port de direction A
=$dc03			js_1dir        =    $dc03          ; CIA #1 port de direction B
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.0f3e			js_init
.0f3e	08		               php                 ; Sauvegarde le registre de
.0f3f	48		               pha                 ;   status et le registre a.
.0f40	ad 03 dc	               lda  js_1dir        ; Place les bits de direction du port B
.0f43	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.0f45	8d 03 dc	               sta  js_1dir
.0f48	ad 02 dc	               lda  js_2dir        ; Place les bits de direction du port A
.0f4b	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.0f4d	8d 02 dc	               sta  js_2dir
.0f50	68		               pla                 ; Récupère le registre a et
.0f51	28		               plp                 ;   le registre de status.
.0f52	60		               rts
.0f53			js_scan
.0f53	20 5a 0f	               jsr  js_1scan       ; Scan la manette du port B.
.0f56	20 04 10	               jsr  js_2scan       ; Scan la manette du port A.
.0f59	60		               rts
.0f5a			js_1scan
.0f5a	20 5c 1a	               jsr  pushreg        ; Sauvegarde tous les registres.
.0f5d	ad 01 dc	               lda  js_1port       ; Lecture du port d'entrées
.0f60	29 1f		               and  #$1f           ; Masque les bits 7, 6 et 5.
.0f62	48		               pha                 ; Copie sur la pile.
.0f63	49 1f		               eor  #$1f           ; Inverse tous les bits.
.0f65	8d 94 13	               sta  js_1status     ; Sauvegarde le status.
.0f68	68		               pla                 ; Récupère une copie originale.
.0f69	c9 00		               cmp  #$00           ; Si les bits sont tous 0
.0f6b	d0 03		               bne  p1scan         ; On scan le port
.0f6d	4c f3 0f	               jmp  port1_out
.0f70	49 1f		p1scan         eor  #$1f
.0f72	18		               clc
.0f73	4a		js_1b0         lsr                 ; On decale js_2 bit 0 dans C
.0f74	90 14		               bcc  js_1b1         ; Est-ce vers le haut (U)
.0f76	48		               pha                 ; On stock la valeur
.0f77	ee fd 12	               inc  js_1flag
.0f7a	ad f9 12	               lda  js_1pixy       ; Oui!
.0f7d	38		               sec                 ; On place la Carry a 1
.0f7e	e9 02		               sbc  #js_yoffset    ; On reduit
.0f80	c9 f0		               cmp  #$f0
.0f82	90 02		               bcc  sto1ym
.0f84	a9 00		               lda  #$00
.0f86	8d f9 12	sto1ym         sta  js_1pixy       ; le y
.0f89	68		               pla                 ; On recupere la valeur
.0f8a	4a		js_1b1         lsr                 ; On decale js_2 bit 0 dans C
.0f8b	90 14		               bcc  js_1b2         ; Est-ce vers le bas (D)
.0f8d	48		               pha                 ; On stack la valeur
.0f8e	ee fd 12	               inc  js_1flag
.0f91	ad f9 12	               lda  js_1pixy       ; Oui!
.0f94	18		               clc                 ; On place la Carry a 0
.0f95	69 02		               adc  #js_yoffset    ; On augmente
.0f97	c9 c7		               cmp  #199
.0f99	90 02		               bcc  sto1yp
.0f9b	a9 c7		               lda  #199
.0f9d	8d f9 12	sto1yp         sta  js_1pixy       ; le y
.0fa0	68		               pla                 ; On recupere la valeur
.0fa1	4a		js_1b2         lsr                 ; On decale js_1 bit 0 dans C
.0fa2	90 20		               bcc  js_1b3         ; Est-ce vers la gauche (L)
.0fa4	48		               pha                 ; On stack la valeur
.0fa5	ee fd 12	               inc  js_1flag
.0fa8	ad f7 12	               lda  js_1pixx       ; Oui!
.0fab	0d f8 12	               ora  js_1pixx+1
.0fae	f0 13		               beq  js_1b2out
.0fb0	38		               sec                 ; On place la Carry a 1
.0fb1	ad f7 12	               lda  js_1pixx       ; Oui!
.0fb4	e9 02		               sbc  #js_xoffset    ; On diminue
.0fb6	8d f7 12	               sta  js_1pixx       ; le X
.0fb9	b0 08		               bcs  js_1b2out      ; de offset
.0fbb	ad f8 12	               lda  js_1pixx+1
.0fbe	f0 03		               beq  js_1b2out
.0fc0	ce f8 12	               dec  js_1pixx+1     ; sur 16 bits
.0fc3	68		js_1b2out      pla                 ; On recupere la valeur
.0fc4	4a		js_1b3         lsr                 ; On decale js_1 bit 0 dans C
.0fc5	90 22		               bcc  js_1b4         ; Est-ce vers la droite (R)
.0fc7	48		               pha                 ; On stack la valeur
.0fc8	ee fd 12	               inc  js_1flag
.0fcb	ad f8 12	               lda  js_1pixx+1
.0fce	f0 0a		               beq  incj1x
.0fd0	ad f7 12	               lda  js_1pixx
.0fd3	c9 3c		               cmp  #$40-4
.0fd5	30 03		               bmi  incj1x
.0fd7	4c e8 0f	               jmp  js_1b3out
.0fda	18		incj1x         clc                 ; On place la Carry a 0
.0fdb	ad f7 12	               lda  js_1pixx
.0fde	69 02		               adc  #js_xoffset    ; On augmente
.0fe0	8d f7 12	               sta  js_1pixx       ; le X
.0fe3	90 03		               bcc  js_1b3out      ; de offset
.0fe5	ee f8 12	               inc  js_1pixx+1     ; sur 16 bits
.0fe8	68		js_1b3out      pla                 ; On recupere la valeur
.0fe9	68		js_1b4         pla                 ; On recupere la valeur
.0fea	4a		               lsr                 ; Est-ce le bbouton fire (F)
.0feb	90 06		               bcc  port1_out      ; Oui!
.0fed	ee fd 12	               inc  js_1flag
.0ff0	ee fc 12	               inc  js_1fire       ; On augmente le nombre de tir
.0ff3	ad fd 12	port1_out      lda  js_1flag
.0ff6	f0 08		               beq  out
.0ff8	20 d5 10	               jsr  js_1correct
.0ffb	a9 00		               lda  #0
.0ffd	8d fd 12	               sta  js_1flag
.1000	20 8b 1a	out            jsr  popreg         ; Récupère tous les registres.
.1003	60		               rts
.1004			js_2scan
.1004	20 5c 1a	               jsr  pushreg        ; Sauvegarde tous les registres.
.1007	ad 00 dc	port2          lda  js_2port       ; Lecture du port d'entrées.
.100a	29 1f		               and  #$1f           ; Masque les bits 7, 6 et 5.
.100c	49 1f		               eor  #$1f           ; Inverse les bits 4 à 0.
.100e	8d 95 13	               sta  js_2status     ; Sauvegarde le status en mémoire.
.1011	c9 00		               cmp  #$00           ; Si des interrupteurs sont appuyé ...
.1013	d0 03		               bne  p2scan         ; ... on cherche lesquels.
.1015	4c ab 10	               jmp  port2_out      ; Si non on sort.
.1018	ee 08 13	p2scan         inc  js_2flag       ; On incrémente le témoin de changement.
.101b	18		               clc                 ; On met le Carry à 0.
.101c	4a		js_2b0         lsr                 ; On decale js_2 bit 0 dans Carry.
.101d	48		               pha                 ; On stack la valeur décalée.
.101e	90 0f		               bcc  js_2b1         ; Si pas BTNUP, on vérifi le prochain.
.1020	ad 04 13	               lda  js_2pixy       ; Oui!
.1023	38		               sec                 ; On place la Carry a 1.
.1024	e9 02		               sbc  #js_yoffset    ; Déplace le crs vrs le haut de offset.
.1026	c9 f0		               cmp  #$f0           ; Si posy plus basse que Viewport NTSC ...
.1028	90 02		               bcc  sto2ym         ; Si le crs dépasse le bas du viewport ...
.102a	a9 00		               lda  #$00           ; On le replace en haut.
.102c	8d 04 13	sto2ym         sta  js_2pixy       ; Sauvegarde La pos. pixel de Y.
.102f	68		js_2b1         pla                 ; On recupere la valeur du scan décalé.
.1030	4a		               lsr                 ; On decale js_2 bit 0 dans Carry.
.1031	48		               pha                 ; On stack la valeur décalée.
.1032	90 0f		               bcc  js_2b2         ; Si pas BTN-BAS, on vérifi le prochain.
.1034	ad 04 13	               lda  js_2pixy       ; Oui!
.1037	18		               clc                 ; On place la Carry a 0.
.1038	69 02		               adc  #js_yoffset    ; Déplace le crs vrs le bas de offset.
.103a	c9 c7		               cmp  #199           ; Sommes nous dépassé le bas de l'écran?
.103c	90 02		               bcc  sto2yp         ; Non, on sauvegarde la position.
.103e	a9 c7		               lda  #199           ; Oui,
.1040	8d 04 13	sto2yp         sta  js_2pixy       ; On bloque le Y à 199.
.1043	68		js_2b2         pla                 ; On recupere la valeur du scan décalé.
.1044	4a		               lsr                 ; On decale js_2 bit 0 dans C
.1045	48		               pha                 ; On stack la valeur décalée.
.1046	90 1b		               bcc  js_2b3         ; Est-ce le bouton gauche (L)
.1048	ad 02 13	               lda  js_2pixx       ; Oui!
.104b	0d 03 13	               ora  js_2pixx+1
.104e	f0 13		               beq  js_2b2out
.1050	38		               sec                 ; On place la Carry a 1
.1051	ad 02 13	               lda  js_2pixx       ; Oui!
.1054	e9 02		               sbc  #js_xoffset    ; On diminue
.1056	8d 02 13	               sta  js_2pixx       ;  le X
.1059	b0 08		               bcs  js_2b2out      ; de offset
.105b	ad 03 13	               lda  js_2pixx+1
.105e	f0 03		               beq  js_2b2out
.1060	ce 03 13	               dec  js_2pixx+1     ; sur 16 bits
.1063			js_2b2out
.1063	68		js_2b3         pla                 ; On recupere la valeur du scan décalé.
.1064	4a		               lsr                 ; On decale js_2 bit 0 dans C
.1065	48		               pha                 ; On stack la valeur décalée.
.1066	90 1d		               bcc  js_2b4         ; Est-ce vers la droite (R)
.1068	ad 03 13	               lda  js_2pixx+1
.106b	f0 0a		               beq  incj2x
.106d	ad 02 13	               lda  js_2pixx
.1070	c9 3e		               cmp  #$40-js_xoffset
.1072	30 03		               bmi  incj2x
.1074	4c 85 10	               jmp  js_2b3out
.1077	18		incj2x         clc                 ; On place la Carry a 0
.1078	ad 02 13	               lda  js_2pixx       ; Oui!
.107b	69 02		               adc  #js_xoffset    ; On augmente
.107d	8d 02 13	               sta  js_2pixx       ;   le X
.1080	90 03		               bcc  js_2b3out      ; de offset
.1082	ee 03 13	               inc  js_2pixx+1     ; sur 16 bits
.1085			js_2b3out
.1085	68		js_2b4         pla                 ; On recupere la valeur du scan décalé.
.1086	4a		               lsr                 ;Estce le bbouton fire (F)
.1087	90 22		               bcc  port2_out      ;Oui!
.1089	ee 07 13	               inc  js_2fire       ; On augmente le nombre de tir
.108c	a9 01		               lda  #%00000001
.108e	8d 0c 13	               sta  js_2events
.1091	ad 02 13	               lda  js_2pixx
.1094	8d 09 13	               sta  js_2clickx
.1097	ad 03 13	               lda  js_2pixx+1
.109a	8d 0a 13	               sta  js_2clickx+1
.109d	ad 04 13	               lda  js_2pixy
.10a0	8d 0b 13	               sta  js_2clicky
.10a3	ad 6e 13	               lda  js_2val16a+1
.10a6	49 40		               eor  #%01000000
.10a8	8d 6e 13	               sta  js_2val16a+1
.10ab			port2_out
.10ab	20 0a 11	               jsr  js_2correct
.10ae	a9 00		               lda  #0
.10b0	8d 08 13	               sta  js_2flag
.10b3	20 8b 1a	out            jsr  popreg         ; Récupère tous les registres.
.10b6			js_corrector
.10b6	08		               php
.10b7	48		               pha
.10b8	ad fd 12	               lda  js_1flag
.10bb	f0 08		               beq  check2
.10bd	20 d5 10	               jsr  js_1correct
.10c0	a9 00		               lda  #0
.10c2	8d fd 12	               sta  js_1flag
.10c5	ad 08 13	check2         lda  js_2flag
.10c8	f0 08		               beq  no_update
.10ca	20 0a 11	               jsr  js_2correct
.10cd	a9 00		               lda  #0
.10cf	8d 08 13	               sta  js_2flag
.10d2	68		no_update      pla
.10d3	28		               plp
.10d4	60		               rts
.10d5			js_1correct
.10d5	08		               php
.10d6	48		               pha
.10d7	ad f7 12	               lda  js_1pixx
.10da	8d 08 11	               sta  vallsb
.10dd	ad f8 12	               lda  js_1pixx+1
.10e0	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.10e1	6e 08 11	               ror  vallsb         ; Cnnnnnnn      On divise par 8 pc les
.10e4	4e 08 11	               lsr  vallsb         ; 0Cnnnnnn      caracteres de 8 pixels
.10e7	4e 08 11	               lsr  vallsb         ; 00Cnnnnn
.10ea	ad 08 11	               lda  vallsb         ; devient = %00100000 = 32
.10ed	8d fa 12	               sta  js_1x
.10f0	ad f9 12	               lda  js_1pixy
.10f3	8d 08 11	               sta  vallsb
.10f6	4e 08 11	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.10f9	4e 08 11	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.10fc	4e 08 11	               lsr  vallsb         ; 00Cnnnnn
.10ff	ad 08 11	               lda  vallsb         ; devient = %00100000 = 32
.1102	8d fb 12	               sta  js_1y
.1105	68		               pla
.1106	28		               plp
.1107	60		               rts
>1108	00		vallsb          .byte     0
>1109	00		regx            .byte     0
.110a			js_2correct
.110a	08		               php
.110b	48		               pha
.110c	ad 02 13	               lda  js_2pixx
.110f	8d 3d 11	               sta  vallsb
.1112	ad 03 13	               lda  js_2pixx+1
.1115	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.1116	6e 3d 11	               ror  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.1119	4e 3d 11	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.111c	4e 3d 11	               lsr  vallsb         ; 00Cnnnnn
.111f	ad 3d 11	               lda  vallsb         ; devient = %00100000 = 32
.1122	8d 05 13	               sta  js_2x
.1125	ad 04 13	               lda  js_2pixy
.1128	8d 3d 11	               sta  vallsb
.112b	4e 3d 11	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.112e	4e 3d 11	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.1131	4e 3d 11	               lsr  vallsb         ; 00Cnnnnn
.1134	ad 3d 11	               lda  vallsb         ; devient = %00100000 = 32
.1137	8d 06 13	               sta  js_2y
.113a	68		               pla
.113b	28		               plp
.113c	60		               rts
>113d	00		vallsb          .byte     0
>113e	00		regx            .byte     0
.113f			js_showvals
.113f	20 cf 11	               jsr  js_2showvals
.1142	60		               rts
.1143			js_1showvals
.1143	20 5c 1a	               jsr  pushreg        ; Sauvegarde tous les registres.
.1146	ad fa 12	               lda  js_1x
.1149	20 7c 1c	               jsr  atohex
.114c	ad 1a 1c	               lda  a2hexstr+1
.114f	8d 20 13	               sta  js_1val8+19
.1152	ad 1b 1c	               lda  a2hexstr+2
.1155	8d 21 13	               sta  js_1val8+20
.1158	ad f7 12	               lda  js_1pixx
.115b	20 7c 1c	               jsr  atohex
.115e	ad 1a 1c	               lda  a2hexstr+1
.1161	8d 3f 13	               sta  js_1val16+14
.1164	ad 1b 1c	               lda  a2hexstr+2
.1167	8d 40 13	               sta  js_1val16+15
.116a	ad f8 12	               lda  js_1pixx+1
.116d	20 7c 1c	               jsr  atohex
.1170	ad 1a 1c	               lda  a2hexstr+1
.1173	8d 3d 13	               sta  js_1val16+12
.1176	ad 1b 1c	               lda  a2hexstr+2
.1179	8d 3e 13	               sta  js_1val16+13
.117c	ad fb 12	               lda  js_1y
.117f	20 7c 1c	               jsr  atohex
.1182	ad 1a 1c	               lda  a2hexstr+1
.1185	8d 24 13	               sta  js_1val8+23
.1188	ad 1b 1c	               lda  a2hexstr+2
.118b	8d 25 13	               sta  js_1val8+24
.118e	ad f9 12	               lda  js_1pixy
.1191	20 7c 1c	               jsr  atohex
.1194	ad 1a 1c	               lda  a2hexstr+1
.1197	8d 45 13	               sta  js_1val16+20
.119a	ad 1b 1c	               lda  a2hexstr+2
.119d	8d 46 13	               sta  js_1val16+21
.11a0	a9 00		               lda  #0
.11a2	20 7c 1c	               jsr  atohex
.11a5	ad 1a 1c	               lda  a2hexstr+1
.11a8	8d 43 13	               sta  js_1val16+18
.11ab	ad 1b 1c	               lda  a2hexstr+2
.11ae	8d 44 13	               sta  js_1val16+19
.11b1	ad fc 12	               lda  js_1fire
.11b4	20 7c 1c	               jsr  atohex
.11b7	ad 1b 1c	               lda  a2hexstr+2
.11ba	8d 2e 13	               sta  js_1val8+33
.11bd	a2 0d		               ldx  #<js_1val8
.11bf	a0 13		               ldy  #>js_1val8
.11c1	20 d4 0a	               jsr  putscxy
.11c4	a2 31		               ldx  #<js_1val16
.11c6	a0 13		               ldy  #>js_1val16
.11c8	20 d4 0a	               jsr  putscxy
.11cb	20 8b 1a	out            jsr  popreg         ; Récupère tous les registres.
.11ce	60		               rts
.11cf			js_2showvals
.11cf	20 5c 1a	               jsr  pushreg        ; Sauvegarde tous les registres.
.11d2	ad 05 13	               lda  js_2x
.11d5	20 7c 1c	               jsr  atohex
.11d8	ad 19 1c	               lda  a2hexstr
.11db	8d 5c 13	               sta  js_2val8+19
.11de	ad 1a 1c	               lda  a2hexstr+1
.11e1	8d 5d 13	               sta  js_2val8+20
.11e4	ad 09 13	               lda  js_2clickx
.11e7	20 7c 1c	               jsr  atohex
.11ea	ad 19 1c	               lda  a2hexstr
.11ed	8d 8a 13	               sta  js_2val16+14
.11f0	ad 1a 1c	               lda  a2hexstr+1
.11f3	8d 8b 13	               sta  js_2val16+15
.11f6	ad 0a 13	               lda  js_2clickx+1
.11f9	20 7c 1c	               jsr  atohex
.11fc	ad 19 1c	               lda  a2hexstr
.11ff	8d 88 13	               sta  js_2val16+12
.1202	ad 1a 1c	               lda  a2hexstr+1
.1205	8d 89 13	               sta  js_2val16+13
.1208	ad 06 13	               lda  js_2y
.120b	20 7c 1c	               jsr  atohex
.120e	ad 19 1c	               lda  a2hexstr
.1211	8d 60 13	               sta  js_2val8+23
.1214	ad 1a 1c	               lda  a2hexstr+1
.1217	8d 61 13	               sta  js_2val8+24
.121a	ad 0b 13	               lda  js_2clicky
.121d	20 7c 1c	               jsr  atohex
.1220	ad 19 1c	               lda  a2hexstr
.1223	8d 90 13	               sta  js_2val16+20
.1226	ad 1a 1c	               lda  a2hexstr+1
.1229	8d 91 13	               sta  js_2val16+21
.122c	a9 00		               lda  #0
.122e	20 7c 1c	               jsr  atohex
.1231	ad 19 1c	               lda  a2hexstr
.1234	8d 8e 13	               sta  js_2val16+18
.1237	ad 1a 1c	               lda  a2hexstr+1
.123a	8d 8f 13	               sta  js_2val16+19
.123d	ad 07 13	               lda  js_2fire
.1240	20 7c 1c	               jsr  atohex
.1243	ad 1a 1c	               lda  a2hexstr+1
.1246	8d 6a 13	               sta  js_2val8+33
.1249	a2 49		               ldx  #<js_2val8
.124b	a0 13		               ldy  #>js_2val8
.124d	20 d4 0a	               jsr  putscxy
.1250	a2 6d		               ldx  #<js_2val16a
.1252	a0 13		               ldy  #>js_2val16a
.1254	20 d4 0a	               jsr  putscxy
.1257	a2 7c		               ldx  #<js_2val16
.1259	a0 13		               ldy  #>js_2val16
.125b	20 d4 0a	               jsr  putscxy
.125e	20 8b 1a	out            jsr  popreg         ; Récupère tous les registres.
.1261	60		               rts
.1262			js_updatecurs
.1262	20 5c 1a	               jsr  pushreg        ; Sauvegarde tous les registres.
.1265	ad 05 13	running        lda  js_2x
.1268	cd f1 12	               cmp  js_x
.126b	f0 06		               beq     chky
.126d	8d f1 12	               sta  js_x
.1270	ee c4 12	               inc     flag
.1273	ad 06 13	chky           lda  js_2y
.1276	cd f2 12	               cmp  js_y
.1279	f0 06		               beq     chkflag
.127b	8d f2 12	               sta  js_y
.127e	ee c4 12	               inc     flag
.1281	ad c4 12	chkflag        lda  flag
.1284	f0 1e		               beq     showit
.1286	ae f3 12	               ldx  js_oldx
.1289	ac f4 12	               ldy  js_oldy
.128c	20 c5 12	               jsr  js_eoraddrxy
.128f	ae f1 12	               ldx  js_x
.1292	ac f2 12	               ldy  js_y
.1295	20 c5 12	               jsr  js_eoraddrxy
.1298	ad f1 12	               lda  js_x
.129b	8d f3 12	               sta  js_oldx
.129e	ad f2 12	               lda  js_y
.12a1	8d f4 12	               sta  js_oldy
.12a4	a9 00		showit         lda  #0
.12a6	8d c4 12	               sta  flag
.12a9	8d 08 1c	               sta  addr1
.12ac	a9 04		               lda  #$04
.12ae	8d 09 1c	               sta  addr1+1
.12b1	ae f1 12	               ldx  js_x
.12b4	ac f2 12	               ldy  js_y
.12b7	20 b9 1b	               jsr  xy2addr
.12ba	ac 0a 1c	               ldy  addr2
.12bd	ae 0b 1c	               ldx  addr2+1
.12c0	20 8b 1a	out            jsr  popreg         ; Récupère tous les registres.
.12c3	60		               rts
>12c4	00		flag            .byte   0
.12c5			js_eoraddrxy
.12c5	20 ee 19	               jsr  pushall
.12c8	20 9b 1b	               jsr  savezp2
.12cb	a9 04		               lda  #$04
.12cd	8d 09 1c	               sta  addr1+1
.12d0	a9 00		               lda  #0
.12d2	8d 08 1c	               sta  addr1
.12d5	20 b9 1b	               jsr  xy2addr
.12d8	ac 0a 1c	               ldy  addr2
.12db	84 fd		               sty  zpage2
.12dd	ae 0b 1c	               ldx  addr2+1
.12e0	86 fe		               stx  zpage2+1
.12e2	a0 00		               ldy  #0
.12e4	b1 fd		               lda  (zpage2),y
.12e6	49 40		               eor     #%01000000
.12e8	91 fd		               sta  (zpage2),y
.12ea	20 aa 1b	               jsr  restzp2
.12ed	20 29 1a	               jsr  popall
.12f0	60		               rts
>12f1	00		js_x           .byte   0
>12f2	00		js_y           .byte   0
>12f3	ff		js_oldx        .byte   $ff
>12f4	ff		js_oldy        .byte   $ff
>12f5	00		js_oldcar      .byte   0
>12f6	00		js_oldcol      .byte   0
>12f7	00 00		js_1pixx       .word   0
>12f9	00		js_1pixy       .byte   0
>12fa	00		js_1x          .byte   0
>12fb	00		js_1y          .byte   0
>12fc	00		js_1fire       .byte   0
>12fd	00		js_1flag       .byte   0
>12fe	00 00		js_1clickx     .word   0
>1300	00		js_1clicky     .byte   0
>1301	00		js_1events     .byte   0
>1302	00 00		js_2pixx       .word   0
>1304	00		js_2pixy       .byte   0
>1305	00		js_2x          .byte   0
>1306	00		js_2y          .byte   0
>1307	00		js_2fire       .byte   0
>1308	00		js_2flag       .byte   0
>1309	00 00		js_2clickx     .word   0
>130b	00		js_2clicky     .byte   0
>130c	00		js_2events     .byte   0
=$03			js_txtcol      =       vcyan
=$00			js_txtbak      =       bkcol0
>130d	03 00 04 05	js_1val8       .byte     js_txtcol,js_txtbak,4,5
>1311	50 0f 12 14	               .null     "Port 1 (x,y):($00,$00) Fire:(0)"
>1315	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>1325	30 29 20 46 09 12 05 3a 28 30 29 00
>1331	03 00 0b 07	js_1val16      .byte     js_txtcol,js_txtbak,11,7
>1335	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>1339	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>1349	03 00 04 0a	js_2val8       .byte     js_txtcol,js_txtbak,4,10
>134d	43 01 12 50	               .null     "CarPos (x,y):($00,$00) Fire:(0)"
>1351	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>1361	30 29 20 46 09 12 05 3a 28 30 29 00
>136d	01 00 04 0c	js_2val16a     .byte     vblanc,js_txtbak,4,12
>1371	43 0c 09 03	               .null     "Click pos."
>1375	0b 20 10 0f 13 2e 00
>137c	03 00 10 0c	js_2val16      .byte     js_txtcol,js_txtbak,16,12
>1380	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>1384	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>1394	00		js_1status     .byte 0
>1395	00		js_2status     .byte 0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-spriteman.asm

.1396			sprt_init
.1396	20 ee 19	               jsr  pushall
.1399	ac bc 17	               ldy  sprt_ptr6+1
.139c	ae bb 17	               ldx  sprt_ptr6
.139f	ad f1 13	               lda  sprt_ptr
.13a2	20 d3 14	               jsr  sprt_loadptr
.13a5	20 7d 1b	               jsr  savezp1
.13a8	20 9b 1b	               jsr  savezp2
.13ab	ad 15 d0	               lda  vic+$15 ; enable sprite 2
.13ae	09 04		               ora  #%00000100
.13b0	8d 15 d0	               sta  vic+$15
.13b3	a9 0d		               lda  #$0d
.13b5	8d fa 07	               sta  $7fa
.13b8	ad af 17	               lda  sprt_ptr0
.13bb	85 fb		               sta  zpage1
.13bd	ad b0 17	               lda  sprt_ptr0+1
.13c0	85 fc		               sta  zpage1+1
.13c2	a9 40		               lda  #$40
.13c4	85 fd		               sta  zpage2
.13c6	a9 03		               lda  #$03
.13c8	85 fe		               sta  zpage2+1
.13ca	a0 41		               ldy  #65
.13cc	b1 fb		               lda  (zpage1),y      ; sprite y offset
.13ce	8d 16 15	               sta  sprt_yoffset
.13d1	88		               dey
.13d2	b1 fb		               lda  (zpage1),y      ; sprite x offset
.13d4	8d 15 15	               sta  sprt_xoffset
.13d7	88		               dey
.13d8	b1 fb		               lda  (zpage1),y      ; sprite color
.13da	8d 29 d0	               sta  $d029
.13dd	88		               dey
.13de	a0 3e		               ldy  #62
.13e0	b1 fb		nextbyte       lda  (zpage1),y
.13e2	91 fd		               sta  (zpage2),y
.13e4	88		               dey
.13e5	d0 f9		               bne  nextbyte
.13e7	20 8c 1b	               jsr  restzp1
.13ea	20 aa 1b	               jsr  restzp2
.13ed	20 29 1a	               jsr  popall
.13f0	60		               rts
>13f1	01		sprt_ptr       .byte   $01
.13f2			sprt_calcpos
.13f2	20 5c 1a	               jsr  pushreg
.13f5	a9 00		               lda  #0
.13f7	8d 18 15	               sta  sprt_x+1
.13fa	8d 1a 15	               sta  sprt_y+1
.13fd	ad 03 13	               lda  js_2pixx+1
.1400	18		               clc
.1401	2a		               rol
.1402	2a		               rol
.1403	8d 18 15	               sta  sprt_x+1
.1406	ad 02 13	               lda  js_2pixx
.1409	18		               clc
.140a	6d 15 15	               adc  sprt_xoffset
.140d	8d 17 15	               sta  sprt_x
.1410	90 08		               bcc  norepx
.1412	ad 18 15	               lda  sprt_x+1
.1415	09 04		               ora  #$04
.1417	8d 18 15	               sta  sprt_x+1
.141a	ad 04 13	norepx         lda  js_2pixy
.141d	18		               clc
.141e	6d 16 15	               adc  sprt_yoffset
.1421	8d 19 15	               sta  sprt_y
.1424	20 8b 1a	               jsr  popreg
.1427	60		               rts
.1428			sprt_move
.1428	20 5c 1a	               jsr  pushreg
.142b	20 f2 13	               jsr  sprt_calcpos
.142e	ad 17 15	               lda  sprt_x
.1431	8d 04 d0	               sta  vic+$04
.1434	ad 18 15	               lda  sprt_x+1
.1437	8d 10 d0	               sta  vic+$10
.143a	ad 19 15	               lda  sprt_y
.143d	8d 05 d0	               sta  vic+$05
.1440	20 47 14	               jsr  sprt_showpos
.1443	20 8b 1a	               jsr  popreg
.1446	60		               rts
.1447			sprt_showpos
.1447	20 ee 19	               jsr  push
.144a	ad 17 15	               lda  sprt_x
.144d	20 7c 1c	               jsr  atohex
.1450	ad 19 1c	               lda  a2hexstr
.1453	8d de 17	               sta  sprite_pos+26
.1456	ad 1a 1c	               lda  a2hexstr+1
.1459	8d df 17	               sta  sprite_pos+27
.145c	ad 18 15	               lda  sprt_x+1
.145f	20 7c 1c	               jsr  atohex
.1462	ad 19 1c	               lda  a2hexstr
.1465	8d dc 17	               sta  sprite_pos+24
.1468	ad 1a 1c	               lda  a2hexstr+1
.146b	8d dd 17	               sta  sprite_pos+25
.146e	ad 19 15	               lda  sprt_y
.1471	20 7c 1c	               jsr  atohex
.1474	ad 19 1c	               lda  a2hexstr
.1477	8d e4 17	               sta  sprite_pos+32
.147a	ad 1a 1c	               lda  a2hexstr+1
.147d	8d e5 17	               sta  sprite_pos+33
.1480	a9 00		               lda  #0
.1482	20 7c 1c	               jsr  atohex
.1485	ad 19 1c	               lda  a2hexstr
.1488	8d e2 17	               sta  sprite_pos+30
.148b	ad 1a 1c	               lda  a2hexstr+1
.148e	8d e3 17	               sta  sprite_pos+31
.1491	a2 c4		               ldx  #<sprite_pos
.1493	a0 17		               ldy  #>sprite_pos
.1495	20 d4 0a	               jsr  putscxy
.1498	20 29 1a	               jsr  pop
.149b	60		               rts
.149c			sprt_loadptr2
.149c	20 ee 19	               jsr  push
.149f	aa		               tax
.14a0	8e f1 13	               stx  sprt_ptr
.14a3	ad b0 17	               lda  sprt_ptr0+1
.14a6	8d d2 14	               sta  calcbuff+1
.14a9	ad af 17	               lda  sprt_ptr0
.14ac	8d d1 14	               sta  calcbuff
.14af	e0 00		               cpx  #0
.14b1	f0 11		               beq  addrok
.14b3	ad d1 14	               lda  calcbuff
.14b6	18		nextx          clc
.14b7	69 42		               adc  #66
.14b9	90 03		               bcc  nocarry
.14bb	ee d2 14	               inc  calcbuff+1
.14be	8d d1 14	nocarry        sta  calcbuff
.14c1	ca		               dex
.14c2	d0 f2		               bne  nextx
.14c4	ac d2 14	addrok         ldy  calcbuff+1
.14c7	ae d1 14	               ldx  calcbuff
.14ca	20 ed 14	               jsr  sprt_setimage
.14cd	20 29 1a	               jsr  pop
.14d0	60		               rts
>14d1	00 00		calcbuff        .word   $0
.14d3			sprt_loadptr
.14d3	20 ee 19	               jsr  push
.14d6	ad f1 13	               lda  sprt_ptr
.14d9	18		               clc
.14da	2a		               rol
.14db	a8		               tay
.14dc	b9 af 17	               lda  sprt_ptr0,y
.14df	aa		               tax
.14e0	b9 b0 17	               lda  sprt_ptr0+1,y
.14e3	a8		               tay
.14e4	20 ed 14	               jsr  sprt_setimage
.14e7	20 29 1a	               jsr  pop
.14ea	60		               rts
>14eb	00 00		calcbuff        .word   $0
.14ed			sprt_setimage
.14ed	20 ee 19	               jsr  push
.14f0	20 7d 1b	               jsr  savezp1
.14f3	20 9b 1b	               jsr  savezp2
.14f6	84 fc		               sty  zpage1+1
.14f8	86 fb		               stx  zpage1
.14fa	a0 15		               ldy  #>sprt_image
.14fc	84 fe		               sty  zpage2+1
.14fe	a0 1b		               ldy  #<sprt_image
.1500	84 fd		               sty  zpage2
.1502	a0 42		               ldy  #66
.1504	b1 fb		nextbyte       lda  (zpage1),y
.1506	91 fd		               sta  (zpage2),y
.1508	88		               dey
.1509	d0 f9		               bne  nextbyte
.150b	20 aa 1b	               jsr  restzp2
.150e	20 8c 1b	               jsr  restzp1
.1511	20 29 1a	               jsr  pop
.1514	60		               rts
>1515	00		sprt_xoffset   .byte     $00
>1516	00		sprt_yoffset   .byte     $00
>1517	00 00		sprt_x         .word     $0000
>1519	00 00		sprt_y         .word     $0000
>151b			sprt_image      .fill    66
>155d	00 00 00 00	sprt_crxair    .byte     $00, $00, $00, $00, $00, $00 ; 6
>1561	00 00
>1563	00 66 00 00	               .byte     $00, $66, $00, $00, $3c, $00 ; 12
>1567	3c 00
>1569	00 18 00 00	               .byte     $00, $18, $00, $00, $00, $00 ; 18
>156d	00 00
>156f	00 00 00 00	               .byte     $00, $00, $00, $00, $18, $00 ; 24
>1573	18 00
>1575	80 00 01 c0	               .byte     $80, $00, $01, $c0, $18, $03 ; 30
>1579	18 03
>157b	66 66 66 c0	               .byte     $66, $66, $66, $c0, $18, $03 ; 36
>157f	18 03
>1581	80 00 01 00	               .byte     $80, $00, $01, $00, $18, $00 ; 42
>1585	18 00
>1587	00 00 00 00	               .byte     $00, $00, $00, $00, $00, $00 ; 48
>158b	00 00
>158d	00 18 00 00	               .byte     $00, $18, $00, $00, $3c, $00 ; 54
>1591	3c 00
>1593	00 66 00 00	               .byte     $00, $66, $00, $00, $00, $00 ; 60
>1597	00 00
>1599	00 00 00 01	               .byte     $00, $00, $00, $01, $0c, $28 ; 66,
>159d	0c 28
>159f	80 00 00 e0	sprt_mouse     .byte     $80, $00, $00, $e0, $00, $00 ; 6
>15a3	00 00
>15a5	b8 00 00 ce	               .byte     $b8, $00, $00, $ce, $00, $00 ; 12
>15a9	00 00
>15ab	83 80 00 c0	               .byte     $83, $80, $00, $c0, $e0, $00 ; 18
>15af	e0 00
>15b1	80 18 00 c0	               .byte     $80, $18, $00, $c0, $3c, $00 ; 24
>15b5	3c 00
>15b7	80 e0 00 c0	               .byte     $80, $e0, $00, $c0, $60, $00 ; 30
>15bb	60 00
>15bd	98 30 00 fc	               .byte     $98, $30, $00, $fc, $18, $00 ; 36
>15c1	18 00
>15c3	c6 0c 00 03	               .byte     $c6, $0c, $00, $03, $06, $00 ; 42
>15c7	06 00
>15c9	01 9c 00 00	               .byte     $01, $9c, $00, $00, $f0, $00 ; 48
>15cd	f0 00
>15cf	00 40 00 00	               .byte     $00, $40, $00, $00, $00, $00 ; 54
>15d3	00 00
>15d5	00 00 00 00	               .byte     $00, $00, $00, $00, $00, $00 ; 60
>15d9	00 00
>15db	00 00 00 01	               .byte     $00, $00, $00, $01, $18, $31 ; 66
>15df	18 31
>15e1	00 7c 00 01	sprt_pointer   .byte     $00, $7c, $00, $01, $83, $00 ; 6
>15e5	83 00
>15e7	06 10 c0 08	               .byte     $06, $10, $c0, $08, $00, $30 ; 12
>15eb	00 30
>15ed	12 10 88 20	               .byte     $12, $10, $88, $20, $00, $08 ; 18
>15f1	00 08
>15f3	40 ba 04 40	               .byte     $40, $ba, $04, $40, $6c, $04 ; 24
>15f7	6c 04
>15f9	80 c6 02 aa	               .byte     $80, $c6, $02, $aa, $82, $aa ; 30
>15fd	82 aa
>15ff	80 c6 02 40	               .byte     $80, $c6, $02, $40, $6c, $04 ; 36
>1603	6c 04
>1605	40 ba 04 20	               .byte     $40, $ba, $04, $20, $00, $08 ; 42
>1609	00 08
>160b	12 10 90 08	               .byte     $12, $10, $90, $08, $00, $20 ; 48
>160f	00 20
>1611	06 10 c0 01	               .byte     $06, $10, $c0, $01, $83, $00 ; 54
>1615	83 00
>1617	00 7c 00 00	               .byte     $00, $7c, $00, $00, $00, $00 ; 60
>161b	00 00
>161d	00 00 00 01	               .byte     $00, $00, $00, $01, $0c, $28 ; 66
>1621	0c 28
>1623	55 55 55 aa	sprt_pointer2  .byte     $55, $55, $55, $aa, $aa, $aa ; 6
>1627	aa aa
>1629	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 12
>162d	aa aa
>162f	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 18
>1633	aa aa
>1635	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 24
>1639	00 2a
>163b	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 30
>163f	00 2a
>1641	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 36
>1645	00 2a
>1647	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 42
>164b	00 2a
>164d	54 00 55 aa	               .byte     $54, $00, $55, $aa, $aa, $aa ; 48
>1651	aa aa
>1653	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 54
>1657	aa aa
>1659	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 60
>165d	aa aa
>165f	55 55 55 01	               .byte     $55, $55, $55, $01, $0c, $28 ; 66
>1663	0c 28
>1665	06 00 00 0f	sprt_hand      .byte     $06, $00, $00, $0f, $00, $00 ; 6
>1669	00 00
>166b	19 80 00 10	               .byte     $19, $80, $00, $10, $80, $00 ; 12
>166f	80 00
>1671	19 80 00 16	               .byte     $19, $80, $00, $16, $b1, $8c ; 18
>1675	b1 8c
>1677	10 ca 52 10	               .byte     $10, $ca, $52, $10, $84, $21 ; 24
>167b	84 21
>167d	10 84 21 30	               .byte     $10, $84, $21, $30, $84, $21 ; 30
>1681	84 21
>1683	50 84 21 90	               .byte     $50, $84, $21, $90, $84, $21 ; 36
>1687	84 21
>1689	90 00 01 90	               .byte     $90, $00, $01, $90, $00, $01 ; 42
>168d	00 01
>168f	90 7f c1 90	               .byte     $90, $7f, $c1, $90, $00, $01 ; 48
>1693	00 01
>1695	40 ff e2 40	               .byte     $40, $ff, $e2, $40, $00, $02 ; 54
>1699	00 02
>169b	3c 00 04 02	               .byte     $3c, $00, $04, $02, $00, $08 ; 60
>169f	00 08
>16a1	03 ff f8 01	               .byte     $03, $ff, $f8, $01, $12, $31 ; 66
>16a5	12 31
>16a7	00 3e 00 01	sprt_ultraman  .byte     $00, $3e, $00, $01, $c1, $c0 ; 6
>16ab	c1 c0
>16ad	0e 3e 30 08	               .byte     $0e, $3e, $30, $08, $41, $08 ; 12
>16b1	41 08
>16b3	10 1c 04 10	               .byte     $10, $1c, $04, $10, $22, $04 ; 18
>16b7	22 04
>16b9	24 1c 12 23	               .byte     $24, $1c, $12, $23, $00, $62 ; 24
>16bd	00 62
>16bf	20 08 02 47	               .byte     $20, $08, $02, $47, $c1, $f1 ; 30
>16c3	c1 f1
>16c5	6a aa ab 47	               .byte     $6a, $aa, $ab, $47, $c9, $f1 ; 36
>16c9	c9 f1
>16cb	20 08 02 20	               .byte     $20, $08, $02, $20, $14, $02 ; 42
>16cf	14 02
>16d1	20 00 02 10	               .byte     $20, $00, $02, $10, $00, $04 ; 48
>16d5	00 04
>16d7	10 7f 04 08	               .byte     $10, $7f, $04, $08, $00, $08 ; 54
>16db	00 08
>16dd	06 3e 30 01	               .byte     $06, $3e, $30, $01, $c1, $c0 ; 60
>16e1	c1 c0
>16e3	00 3e 00 01	               .byte     $00, $3e, $00, $01, $0c, $28 ; 66
>16e7	0c 28
>16e9	00 1c 00 00	sprt_male      .byte     $00, $1c, $00, $00, $3e, $00 ; 6
>16ed	3e 00
>16ef	00 3e 00 00	               .byte     $00, $3e, $00, $00, $3e, $00 ; 12
>16f3	3e 00
>16f5	00 1c 00 00	               .byte     $00, $1c, $00, $00, $08, $00 ; 18
>16f9	08 00
>16fb	00 ff 80 00	               .byte     $00, $ff, $80, $00, $ff, $80 ; 24
>16ff	ff 80
>1701	00 be 80 00	               .byte     $00, $be, $80, $00, $9c, $80 ; 30
>1705	9c 80
>1707	00 88 80 00	               .byte     $00, $88, $80, $00, $be, $80 ; 36
>170b	be 80
>170d	00 be 80 01	               .byte     $00, $be, $80, $01, $9c, $c0 ; 42
>1711	9c c0
>1713	01 94 c0 00	               .byte     $01, $94, $c0, $00, $14, $00 ; 48
>1717	14 00
>1719	00 14 00 00	               .byte     $00, $14, $00, $00, $14, $00 ; 54
>171d	14 00
>171f	00 36 00 00	               .byte     $00, $36, $00, $00, $77, $00 ; 60
>1723	77 00
>1725	00 77 00 01	               .byte     $00, $77 ,$00, $01, $0c, $2f ; 66
>1729	0c 2f
>172b	00 3c 00 00	sprt_robot     .byte     $00, $3c, $00, $00, $24, $00 ; 6
>172f	24 00
>1731	00 66 18 00	               .byte     $00, $66, $18, $00, $66, $38 ; 12
>1735	66 38
>1737	00 24 38 00	               .byte     $00, $24, $38, $00, $3c, $10 ; 18
>173b	3c 10
>173d	00 18 10 00	               .byte     $00, $18, $10, $00, $18, $10 ; 24
>1741	18 10
>1743	0f ff f0 08	               .byte     $0f, $ff, $f0, $08, $7e, $00 ; 30
>1747	7e 00
>1749	08 7e 00 08	               .byte     $08, $7e, $00, $08, $18, $00 ; 36
>174d	18 00
>174f	1c 18 00 1c	               .byte     $1c, $18, $00, $1c, $18, $00 ; 42
>1753	18 00
>1755	18 3c 00 00	               .byte     $18, $3c, $00, $00, $3c, $00 ; 48
>1759	3c 00
>175b	00 24 00 00	               .byte     $00, $24, $00, $00, $24, $00 ; 54
>175f	24 00
>1761	00 24 00 03	               .byte     $00, $24, $00, $03, $e7, $c0 ; 60
>1765	e7 c0
>1767	03 e7 c0 01	               .byte     $03, $e7, $c0, $01, $0c, $28 ; 66
>176b	0c 28
>176d	00 1c 00 00	sprt_femme     .byte     $00, $1c, $00, $00, $3e, $00 ; 6
>1771	3e 00
>1773	00 3e 00 00	               .byte     $00, $3e, $00, $00, $3e, $00 ; 12
>1777	3e 00
>1779	00 1c 00 00	               .byte     $00, $1c, $00, $00, $08, $00 ; 18
>177d	08 00
>177f	00 7f 00 00	               .byte     $00, $7f, $00, $00, $ff, $80 ; 24
>1783	ff 80
>1785	00 be 80 00	               .byte     $00, $be, $80, $00, $9c, $80 ; 30
>1789	9c 80
>178b	00 88 80 00	               .byte     $00, $88, $80, $00, $9c, $80 ; 36
>178f	9c 80
>1791	00 be 80 01	               .byte     $00, $be, $80, $01, $be, $c0 ; 42
>1795	be c0
>1797	01 be c0 00	               .byte     $01, $be, $c0, $00, $7f, $00 ; 48
>179b	7f 00
>179d	00 7f 00 00	               .byte     $00, $7f, $00, $00, $ff, $80 ; 54
>17a1	ff 80
>17a3	00 36 00 00	               .byte     $00, $36, $00, $00, $77, $00 ; 60
>17a7	77 00
>17a9	00 55 00 01	               .byte     $00, $55 ,$00, $01, $0c, $2f ; 66
>17ad	0c 2f
>17af	1b 15		sprt_ptr0      .word     sprt_image + (0*66)
>17b1	5d 15		sprt_ptr1      .word     sprt_image + (1*66)
>17b3	9f 15		sprt_ptr2      .word     sprt_image + (2*66)
>17b5	e1 15		sprt_ptr3      .word     sprt_image + (3*66)
>17b7	23 16		sprt_ptr4      .word     sprt_image + (4*66)
>17b9	65 16		sprt_ptr5      .word     sprt_image + (5*66)
>17bb	a7 16		sprt_ptr6      .word     sprt_image + (6*66)
>17bd	e9 16		sprt_ptr7      .word     sprt_image + (7*66)
>17bf	2b 17		sprt_ptr8      .word     sprt_image + (8*66)
>17c1	6d 17		sprt_ptr9      .word     sprt_image + (9*66)
>17c3	ff		testbyte       .byte     255
=$07			sprt_txtcol    =         vjaune
=$40			sprt_txtbak    =         bkcol1
=$01			sprt_color     =         vwhite
>17c4	07 40 04 0e	sprite_pos     .byte     sprt_txtcol,sprt_txtbak,4,14
>17c8	53 10 12 09	               .null     "Sprite pos. (x,y):($0000,$0000)"
>17cc	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>17dc	30 30 30 30 2c 24 30 30 30 30 29 00

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-showregs.asm

.17e8			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.17e8	08		               php                 ; Sauvegarde le registre de status sur stack.
.17e9	8d dd 19	               sta  rega           ; Sauvegarde Acc en mémoire.
.17ec	68		               pla                 ; Récupère le registre de status du stack.
.17ed	8d e0 19	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.17f0	8e de 19	               stx  regx           ; Sauvegarde le registre X en mémoire.
.17f3	8c df 19	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.17f6	ba		               tsx                 ; Copie le registre S dans X.
.17f7	8e e1 19	               stx  regs           ; Sauvegarde le registre S en mémoire.
.17fa	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.17fb	8d e3 19	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.17fe	8d e5 19	               sta  regpcl2        ; ... une seconde fois.
.1801	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.1802	8d e2 19	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.1805	8d e4 19	               sta  regpch2        ; ... une seconde fois.
.1808	ad dd 19	               lda  rega           ; On commence par le registre Acc.
.180b	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.180c	20 69 1c	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.180f	8d 7a 19	               sta  vala+1         ; ... et le place dans la chaine.
.1812	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1813	20 75 1c	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1816	20 69 1c	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1819	8d 79 19	               sta  vala           ; ... et le place dans la chaine.
.181c	ad df 19	               lda  regy           ; Ensuite, le registre Y.
.181f	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1820	20 69 1c	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1823	8d 91 19	               sta  valy+1         ; ... et le place dans la chaine.
.1826	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1827	20 75 1c	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.182a	20 69 1c	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.182d	8d 90 19	               sta  valy           ; ... et le place dans la chaine.
.1830	ad de 19	               lda  regx           ; Ensuite, le registre X.
.1833	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1834	20 69 1c	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1837	8d 85 19	               sta  valx+1         ; ... et le place dans la chaine.
.183a	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.183b	20 75 1c	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.183e	20 69 1c	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1841	8d 84 19	               sta  valx           ; ... et le place dans la chaine.
.1844	ad e0 19	               lda  regp           ; Ensuite, le registre de status.
.1847	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1848	20 69 1c	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.184b	8d 9c 19	               sta  valp+1         ; ... et le place dans la chaine.
.184e	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.184f	20 75 1c	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1852	20 69 1c	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1855	8d 9b 19	               sta  valp           ; ... et le place dans la chaine.
.1858	ad e1 19	               lda  regs           ; Ensuite, le pointeur de stack.
.185b	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.185c	20 69 1c	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.185f	8d a7 19	               sta  vals+1         ; ... et le place dans la chaine.
.1862	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1863	20 75 1c	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1866	20 69 1c	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1869	8d a6 19	               sta  vals           ; ... et le place dans la chaine.
.186c	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.186d	ad e5 19	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.1870	69 00		               adc  #$00           ; On y ajoute 1.
.1872	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.1874	ee e4 19	               inc  regpch2        ; ... en incrémentant le MSB.
.1877	8d e5 19	noreport       sta  regpcl2        ; On le sauvegarde.
.187a	ad e5 19	               lda  regpcl2        ; On récupère la partie basse du compteur.
.187d	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.187e	20 69 1c	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1881	8d b7 19	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.1884	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1885	20 75 1c	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1888	20 69 1c	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.188b	8d b6 19	               sta  valpcl         ; ... et lace le code à la position "--X-".
.188e	ad e4 19	               lda regpch2         ; On récupère la partie haute du compteur.
.1891	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1892	20 69 1c	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1895	8d b5 19	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.1898	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1899	20 75 1c	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.189c	20 69 1c	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.189f	8d b4 19	               sta  valpch         ; ... et lace le code à la position "X---".
.18a2	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.18a4	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18a5	20 69 1c	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18a8	8d c8 19	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.18ab	68		               pla
.18ac	20 75 1c	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18af	20 69 1c	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18b2	8d c7 19	               sta  valz1l         ; ... et lace le code à la position "--X-".
.18b5	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.18b7	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18b8	20 69 1c	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18bb	8d c6 19	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.18be	68		               pla
.18bf	20 75 1c	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18c2	20 69 1c	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18c5	8d c5 19	               sta  valz1h         ; ... et lace le code à la position "X---".
.18c8	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.18ca	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18cb	20 69 1c	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18ce	8d d9 19	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.18d1	68		               pla
.18d2	20 75 1c	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18d5	20 69 1c	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18d8	8d d8 19	               sta  valz2l         ; ... et lace le code à la position "--X-".
.18db	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.18dd	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18de	20 69 1c	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18e1	8d d7 19	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.18e4	68		               pla
.18e5	20 75 1c	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18e8	20 69 1c	               jsr  nibtohex
.18eb	8d d6 19	               sta  valz2h         ; ... et lace le code à la position "X---".
.18ee	20 5c 1a	               jsr  pushreg
.18f1	a2 71		               ldx  #<srega
.18f3	a0 19		               ldy  #>srega
.18f5	20 d4 0a	               jsr  putscxy
.18f8	20 8b 1a	               jsr  popreg
.18fb	20 5c 1a	               jsr  pushreg
.18fe	a2 7d		               ldx  #<sregx
.1900	a0 19		               ldy  #>sregx
.1902	20 d4 0a	               jsr  putscxy
.1905	20 8b 1a	               jsr  popreg
.1908	20 5c 1a	               jsr  pushreg
.190b	a2 88		               ldx  #<sregy
.190d	a0 19		               ldy  #>sregy
.190f	20 d4 0a	               jsr  putscxy
.1912	20 8b 1a	               jsr  popreg
.1915	20 5c 1a	               jsr  pushreg
.1918	a2 94		               ldx  #<sregp
.191a	a0 19		               ldy  #>sregp
.191c	20 d4 0a	               jsr  putscxy
.191f	20 8b 1a	               jsr  popreg
.1922	20 5c 1a	               jsr  pushreg
.1925	a2 9f		               ldx  #<sregs
.1927	a0 19		               ldy  #>sregs
.1929	20 d4 0a	               jsr  putscxy
.192c	20 8b 1a	               jsr  popreg
.192f	20 5c 1a	               jsr  pushreg
.1932	a2 ab		               ldx  #<sregpc
.1934	a0 19		               ldy  #>sregpc
.1936	20 d4 0a	               jsr  putscxy
.1939	20 8b 1a	               jsr  popreg
.193c	20 5c 1a	               jsr  pushreg
.193f	a2 bb		               ldx  #<sregz1
.1941	a0 19		               ldy  #>sregz1
.1943	20 d4 0a	               jsr  putscxy
.1946	20 8b 1a	               jsr  popreg
.1949	20 5c 1a	               jsr  pushreg
.194c	a2 cc		               ldx  #<sregz2
.194e	a0 19		               ldy  #>sregz2
.1950	20 d4 0a	               jsr  putscxy
.1953	20 8b 1a	               jsr  popreg
.1956	ad e2 19	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.1959	48		               pha                 ; ... à la bonne position sur la pile.
.195a	ad e3 19	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.195d	48		               pha                 ; ... à la bonne position sur la pile.
.195e	ae e1 19	               ldx  regs           ; On replace tous les registre à leurs ...
.1961	9a		               txs                 ; ...
.1962	ac df 19	               ldy  regy           ; ...
.1965	ae de 19	               ldx  regx           ; ...
.1968	ad e0 19	               lda  regp           ; ...
.196b	48		               pha                 ; ...
.196c	ad dd 19	               lda  rega           ; ...
.196f	28		               plp                 ; ... valeurs initiales
.1970	60		               rts
>1971	07 01 17	srega   .byte   cyellow,coln+1,line
>1974	20 20 01 3a	        .text   '  a:$' ;4,24
>1978	24
>1979	00 00 20 00	vala    .byte   0,0,32,0
>197d	03 09 17	sregx   .byte   ccyan,coln+9,line
>1980	20 18 3a 24	        .text   ' x:$' ;4,24
>1984	00 00 20 00	valx    .byte   0,0,32,0
>1988	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>198b	20 19 3a 20	        .text   ' y: $' ;4,24
>198f	24
>1990	00 00 20 00	valy    .byte   0,0,32,0
>1994	08 18 17	sregp   .byte   corange,coln+24,line
>1997	20 10 3a 24	        .text   ' p:$' ;4,24
>199b	00 00 20 00	valp    .byte   0,0,32,0
>199f	0a 1f 17	sregs   .byte   clightred,coln+31,line
>19a2	20 13 3a 24	        .text   ' s:$' ;4,24
>19a6	00 00 20 20	vals    .byte   0,0,32,32,0
>19aa	00
>19ab	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>19af	20 10 03 3a	        .text   ' pc:$' ;4,24
>19b3	24
>19b4	00 00		valpch  .byte   0,0
>19b6	00 00 20 20	valpcl  .byte   0,0,32,32,0
>19ba	00
>19bb	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>19bf	20 1a 10 31	        .text   ' zp1:$' ;4,24
>19c3	3a 24
>19c5	00 00		valz1h  .byte   0,0
>19c7	00 00 20 20	valz1l  .byte   0,0,32,32,0
>19cb	00
>19cc	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>19d0	20 1a 10 32	        .text   ' zp2:$' ;4,24
>19d4	3a 24
>19d6	00 00		valz2h  .byte   0,0
>19d8	00 00 20 20	valz2l  .byte   0,0,32,32,0
>19dc	00
>19dd	00		rega    .byte   0
>19de	00		regx    .byte   0
>19df	00		regy    .byte   0
>19e0	00		regp    .byte   0
>19e1	00		regs    .byte   0
>19e2	00		regpch  .byte   0
>19e3	00		regpcl  .byte   0
>19e4	00		regpch2 .byte   0
>19e5	00		regpcl2 .byte   0
>19e6	00		vzp1h   .byte   0
>19e7	00		vzp1l   .byte   0
>19e8	00		vzp2h   .byte   0
>19e9	00		vzp2l   .byte   0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>19ea	00		rp        .byte     0
>19eb	00		ra        .byte     0
>19ec	00 00		pc        .word     0
.19ee			pushall
.19ee			push
.19ee	08		          php            ; stack : flg, pcl, pch
.19ef	78		          sei
.19f0	8d eb 19	          sta  ra        ; save a
.19f3	68		          pla            ; stack : pcl, pch
.19f4	8d ea 19	          sta  rp        ; save rp
.19f7	68		          pla            ; stack : pch
.19f8	8d ec 19	          sta  pc        ; save pcl
.19fb	68		          pla            ; stack : -
.19fc	8d ed 19	          sta  pc+1      ; save pch
.19ff	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1a01	48		          pha            ; stack : zp1l
.1a02	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1a04	48		          pha            ; stack : zp1h, zp1l
.1a05	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1a07	48		          pha            ; stack : zp2l, zp1h, zp1l
.1a08	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1a0a	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1a0b	ad ea 19	          lda  rp        ; get rp
.1a0e	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1a0f	ad eb 19	          lda  ra        ; get a
.1a12	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1a13	8a		          txa            ; get x
.1a14	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a15	98		          tya            ; get y
.1a16	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a17	ad ed 19	          lda  pc+1      ; get pch
.1a1a	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a1b	ad ec 19	          lda  pc        ; get pcl
.1a1e	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a1f	ad ea 19	          lda  rp        ; get rp
.1a22	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a23	ad eb 19	          lda  ra        ; get a
.1a26	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a27	58		          cli
.1a28	60		          rts
.1a29			pullall
.1a29			pull
.1a29			popall
.1a29			pop
.1a29	78		          sei
.1a2a	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a2b	8d ec 19	          sta  pc        ; save pcl
.1a2e	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a2f	8d ed 19	          sta  pc+1      ; save pch
.1a32	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a33	a8		          tay            ; set y
.1a34	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1a35	aa		          tax            ; set x
.1a36	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1a37	8d eb 19	          sta  ra        ; save a
.1a3a	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1a3b	8d ea 19	          sta  rp        ; save rp
.1a3e	68		          pla            ; stack : zp2l, zp1h, zp1l
.1a3f	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1a41	68		          pla            ; stack : zp1h, zp1l
.1a42	85 fd		          sta  zpage2    ; get zpage2 High byte
.1a44	68		          pla            ; stack : zp1l
.1a45	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1a47	68		          pla            ; stack :
.1a48	85 fb		          sta  zpage1    ; get zpage1 High byte
.1a4a	ad ed 19	          lda  pc+1      ; get pch
.1a4d	48		          pha            ; stack : pch
.1a4e	ad ec 19	          lda  pc
.1a51	48		          pha            ; stack : pcl, pch
.1a52	ad ea 19	          lda  rp        ; get rp
.1a55	48		          pha            ; stack : rp, pcl, pch
.1a56	ad eb 19	          lda  ra        ; set ra
.1a59	58		          cli
.1a5a	28		          plp            ; stack : pcl, pch
.1a5b	60		          rts
.1a5c			pushreg
.1a5c	08		          php            ; stack : flg, pcl, pch
.1a5d	78		          sei
.1a5e	8d eb 19	          sta  ra        ; save a
.1a61	68		          pla            ; stack : pcl, pch
.1a62	8d ea 19	          sta  rp        ; save rp
.1a65	68		          pla            ; stack : pch
.1a66	8d ec 19	          sta  pc        ; save pcl
.1a69	68		          pla            ; stack : -
.1a6a	8d ed 19	          sta  pc+1      ; save pch
.1a6d	ad ea 19	          lda  rp        ; get rp
.1a70	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1a71	ad eb 19	          lda  ra        ; get a
.1a74	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1a75	8a		          txa            ; get x
.1a76	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a77	98		          tya            ; get y
.1a78	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a79	ad ed 19	          lda  pc+1      ; get pch
.1a7c	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a7d	ad ec 19	          lda  pc        ; get pcl
.1a80	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a81	ad ea 19	          lda  rp        ; get rp
.1a84	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a85	ad eb 19	          lda  ra        ; get a
.1a88	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a89	58		          cli
.1a8a	60		          rts
.1a8b			pullreg
.1a8b			popreg
.1a8b	78		          sei
.1a8c	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a8d	8d ec 19	          sta  pc        ; save pcl
.1a90	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a91	8d ed 19	          sta  pc+1      ; save pch
.1a94	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1a95	a8		          tay            ; set y
.1a96	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1a97	aa		          tax            ; set x
.1a98	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1a99	8d eb 19	          sta  ra        ; save a
.1a9c	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1a9d	8d ea 19	          sta  rp        ; save rp
.1aa0	ad ed 19	          lda  pc+1      ; get pch
.1aa3	48		          pha            ; stack : pch
.1aa4	ad ec 19	          lda  pc
.1aa7	48		          pha            ; stack : pcl, pch
.1aa8	ad ea 19	          lda  rp        ; get rp
.1aab	48		          pha            ; stack : rp, pcl, pch
.1aac	ad eb 19	          lda  ra        ; set ra
.1aaf	58		          cli
.1ab0	28		          plp            ; stack : pcl, pch
.1ab1	60		          rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.1ab2			blkfill
.1ab2	20 ee 19	bf0            jsr  push
.1ab5	20 7d 1b	               jsr  savezp1
.1ab8	84 fc		               sty  zpage1+1
.1aba	a0 00		               ldy  #$00
.1abc	84 fb		               sty  zpage1
.1abe	91 fb		bf1            sta  (zpage1),y
.1ac0	c8		               iny
.1ac1	d0 fb		               bne  bf1
.1ac3	20 8c 1b	               jsr  restzp1
.1ac6	20 29 1a	               jsr  pop
.1ac9	60		               rts
.1aca			memfill
.1aca	20 ee 19	               jsr  push
.1acd	20 b2 1a	mf1            jsr  blkfill
.1ad0	c8		               iny
.1ad1	ca		               dex
.1ad2	d0 f9		               bne  mf1
.1ad4	20 29 1a	               jsr  pop
.1ad7	60		               rts
.1ad8			memmove
.1ad8	20 ee 19	               jsr  push
.1adb	ba		               tsx            ; On se crée un pointeur ...
.1adc	8a		               txa
.1add	18		               clc
.1ade	69 0b		               adc  #11
.1ae0	a8		               tay
.1ae1	a2 06		               ldx  #$06
.1ae3	b9 00 01	nextbyte       lda  $0100,y
.1ae6	99 32 1b	               sta  words,y
.1ae9	c8		               iny
.1aea	ca		               dex
.1aeb	d0 f6		               bne  nextbyte
.1aed	ad 32 1b	               lda  s
.1af0	8d 09 1b	               sta  source+1
.1af3	ad 33 1b	               lda  s+1
.1af6	8d 0a 1b	               sta  source+2
.1af9	ad 34 1b	               lda  d
.1afc	8d 06 1b	               sta  destin+1
.1aff	ad 35 1b	               lda  d+1
.1b02	8d 07 1b	               sta  destin+2
.1b05	ad ff ff	destin         lda  $ffff
.1b08	8d ff ff	source         sta  $ffff
.1b0b	ee 06 1b	               inc  destin+1
.1b0e	d0 03		               bne  src
.1b10	ee 07 1b	               inc  destin+2
.1b13	ee 09 1b	src            inc  source+1
.1b16	d0 03		               bne  cnt
.1b18	ee 0a 1b	               inc  source+2
.1b1b	ad 36 1b	cnt            lda  compte
.1b1e	d0 08		               bne  decit
.1b20	ad 37 1b	               lda  compte+1
.1b23	f0 09		               beq  fini
.1b25	ce 37 1b	               dec  compte+1
.1b28	ce 36 1b	decit          dec  compte
.1b2b	4c 05 1b	               jmp  destin
.1b2e	20 29 1a	fini           jsr  pop
.1b31	60		               rts
.1b32			words
>1b32	00 00		s         .word     $0000
>1b34	00 00		d         .word     $0000
>1b36	00 00		compte    .word     $0000
.1b38			decword
.1b38	20 ee 19	               jsr  push
.1b3b	86 fd		               stx  zpage2
.1b3d	84 fe		               sty  zpage2+1
.1b3f	20 29 1a	               jsr  pop
.1b42	60		               rts
.1b43			inczpage1
.1b43			inczp1
.1b43	08		               php
.1b44	48		               pha
.1b45	e6 fb		               inc  zpage1
.1b47	a5 fb		               lda  zpage1
.1b49	d0 02		               bne  nopage
.1b4b	e6 fc		               inc  zpage1+1
.1b4d	68		nopage         pla
.1b4e	28		               plp
.1b4f	60		               rts
.1b50			deczpage1
.1b50			deczp1
.1b50	08		               php
.1b51	48		               pha
.1b52	c6 fb		               dec  zpage1
.1b54	a5 fb		               lda  zpage1
.1b56	c9 ff		               cmp  #$ff
.1b58	f0 02		               beq  report
.1b5a	d0 02		               bne  nopage
.1b5c	c6 fc		report         dec  zpage1+1
.1b5e	68		nopage         pla
.1b5f	28		               plp
.1b60	60		               rts
.1b61			inczpage2
.1b61			inczp2
.1b61	08		               php
.1b62	48		               pha
.1b63	e6 fd		               inc  zpage2
.1b65	a5 fd		               lda  zpage2
.1b67	d0 02		               bne  nopage
.1b69	e6 fe		               inc  zpage2+1
.1b6b	68		nopage         pla
.1b6c	28		               plp
.1b6d	60		               rts
.1b6e			deczpage2
.1b6e			deczp2
.1b6e	08		               php
.1b6f	c6 fd		               dec  zpage2
.1b71	a5 fd		               lda  zpage2
.1b73	c9 ff		               cmp  #$ff
.1b75	f0 02		               beq  report
.1b77	d0 02		               bne  nopage
.1b79	c6 fe		report         dec  zpage2+1
.1b7b	28		nopage         plp
.1b7c	60		               rts
.1b7d			savezp1
.1b7d	08		               php
.1b7e	48		               pha
.1b7f	a5 fb		               lda  zpage1
.1b81	8d 0e 1c	               sta  zp1
.1b84	a5 fc		               lda  zpage1+1
.1b86	8d 0f 1c	               sta  zp1+1
.1b89	68		               pla
.1b8a	28		               plp
.1b8b	60		               rts
.1b8c			restzp1
.1b8c	08		               php
.1b8d	48		               pha
.1b8e	ad 0e 1c	               lda  zp1
.1b91	85 fb		               sta  zpage1
.1b93	ad 0f 1c	               lda  zp1+1
.1b96	85 fc		               sta  zpage1+1
.1b98	68		               pla
.1b99	28		               plp
.1b9a	60		               rts
.1b9b			savezp2
.1b9b	08		               php
.1b9c	48		               pha
.1b9d	a5 fd		               lda  zpage2
.1b9f	8d 10 1c	               sta  zp2
.1ba2	a5 fe		               lda  zpage2+1
.1ba4	8d 11 1c	               sta  zp2+1
.1ba7	68		               pla
.1ba8	28		               plp
.1ba9	60		               rts
.1baa			restzp2
.1baa	08		               php
.1bab	48		               pha
.1bac	ad 10 1c	               lda  zp2
.1baf	85 fd		               sta  zpage2
.1bb1	ad 11 1c	               lda  zp2+1
.1bb4	85 fe		               sta  zpage2+1
.1bb6	68		               pla
.1bb7	28		               plp
.1bb8	60		               rts
.1bb9			xy2addr
.1bb9	08		               php
.1bba	48		               pha
.1bbb	8a		               txa
.1bbc	48		               pha
.1bbd	98		               tya
.1bbe	48		               pha
.1bbf	ad 09 1c	               lda  addr1+1
.1bc2	8d 0b 1c	               sta  addr2+1
.1bc5	ad 08 1c	               lda  addr1
.1bc8	8d 0a 1c	               sta  addr2
.1bcb	c0 00		               cpy  #$00
.1bcd	f0 0f		               beq  addx
.1bcf	18		moreline       clc
.1bd0	6d 07 1c	               adc  ymult
.1bd3	90 03		               bcc  norepy
.1bd5	ee 0b 1c	               inc  addr2+1
.1bd8	8d 0a 1c	norepy         sta  addr2
.1bdb	88		               dey
.1bdc	d0 f1		               bne  moreline
.1bde	8a		addx           txa
.1bdf	18		               clc
.1be0	6d 0a 1c	               adc  addr2
.1be3	90 03		               bcc  thatsit
.1be5	ee 0b 1c	               inc  addr2+1
.1be8	8d 0a 1c	thatsit        sta  addr2
.1beb	68		               pla
.1bec	a8		               tay
.1bed	68		               pla
.1bee	aa		               tax
.1bef	68		               pla
.1bf0	28		               plp
.1bf1	60		               rts
.1bf2			loop
.1bf2	ce 12 1c	               dec  loopcount
.1bf5	d0 03		               bne  norep
.1bf7	ce 13 1c	               dec  loopcount+1
.1bfa	ad 12 1c	norep          lda  loopcount
.1bfd	c9 00		               cmp  #$00
.1bff	d0 05		               bne  out
.1c01	4d 13 1c	               eor  loopcount+1
.1c04	c9 ff		               cmp  #$ff
.1c06	60		out            rts
>1c07	28		ymult          .byte     40
>1c08	00 00		addr1          .word     $0000
>1c0a	00 00		addr2          .word     $0000
>1c0c	00 00		bytecnt        .word     $0000
>1c0e	00 00		zp1            .word     $0000
>1c10	00 00		zp2            .word     $0000
>1c12	00 00		loopcount      .word     $0000

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1c14	01		a2hexcol       .byte     1              ; pour aputscxy
>1c15	00		a2hexbkcol     .byte     %00000000
.1c16			a2hexpos
>1c16	00		a2hexpx        .byte     0              ; pour aputsxy
>1c17	00		a2hexpy        .byte     0
>1c18	24		a2hexprefix    .byte     "$"            ; pour aputs
>1c19	00 00		a2hexstr       .word     $00
>1c1b	00 00		               .word     $00
>1c1d	00		               .byte     0              ; 0 end string
>1c1e	01		abincol        .byte     1
>1c1f	00		abinbkcol      .byte     %00000000
>1c20	30 30 30 30	abin           .null     "00000000"
>1c24	30 30 30 30 00
>1c29	20 20 20 00	adec           .null     "   "
.1c2d			putahexfmtxy
.1c2d	20 ee 19	               jsr  push
.1c30	20 7c 1c	               jsr  atohex
.1c33	ae 16 1c	               ldx  a2hexpx
.1c36	ac 17 1c	               ldy  a2hexpy
.1c39	20 e0 0a	               jsr  gotoxy
.1c3c	a2 18		               ldx  #<a2hexprefix
.1c3e	a0 1c		               ldy  #>a2hexprefix
.1c40	20 ce 0a	               jsr  puts
.1c43	20 29 1a	               jsr  pop
.1c46	60		               rts
.1c47			putahexfmt
.1c47	20 ee 19	               jsr  push
.1c4a	20 7c 1c	               jsr  atohex
.1c4d	a2 18		               ldx  #<a2hexprefix
.1c4f	a0 1c		               ldy  #>a2hexprefix
.1c51	20 ce 0a	               jsr  puts
.1c54	20 29 1a	               jsr  pop
.1c57	60		               rts
.1c58			putahex
.1c58	20 ee 19	               jsr  push
.1c5b	20 7c 1c	               jsr  atohex
.1c5e	a2 19		               ldx  #<a2hexstr
.1c60	a0 1c		               ldy  #>a2hexstr
.1c62	20 ce 0a	               jsr  puts
.1c65	20 29 1a	               jsr  pop
.1c68	60		               rts
.1c69			nibtohex
.1c69	08		               php
.1c6a	29 0f		               and  #$0f
.1c6c	f8		               sed
.1c6d	18		               clc
.1c6e	69 90		               adc  #$90
.1c70	69 40		               adc  #$40
.1c72	d8		               cld
.1c73	28		               plp
.1c74	60		               rts
.1c75			lsra4bits
.1c75	08		               php
.1c76	4a		               lsr
.1c77	4a		               lsr
.1c78	4a		               lsr
.1c79	4a		               lsr
.1c7a	28		               plp
.1c7b	60		               rts
.1c7c			atohex
.1c7c	08		               php
.1c7d	48		               pha
.1c7e	48		               pha
.1c7f	20 75 1c	               jsr  lsra4bits
.1c82	20 69 1c	               jsr  nibtohex
.1c85	8d 19 1c	               sta  a2hexstr
.1c88	68		               pla
.1c89	20 69 1c	               jsr  nibtohex
.1c8c	8d 1a 1c	               sta  a2hexstr+1
.1c8f	a9 00		               lda  #$00                ; set end of string
.1c91	8d 1b 1c	               sta  a2hexstr+2
.1c94	68		               pla
.1c95	28		               plp
.1c96	60		               rts
.1c97			xy2hex
.1c97	20 ee 19	               jsr  push
.1c9a	20 7c 1c	               jsr  atohex
.1c9d	8a		               txa
.1c9e	48		               pha
.1c9f	20 75 1c	               jsr  lsra4bits
.1ca2	20 69 1c	               jsr  nibtohex
.1ca5	8d 19 1c	               sta  a2hexstr
.1ca8	68		               pla
.1ca9	20 69 1c	               jsr  nibtohex
.1cac	8d 1a 1c	               sta  a2hexstr+1
.1caf	98		               tya
.1cb0	48		               pha
.1cb1	20 75 1c	               jsr  lsra4bits
.1cb4	20 69 1c	               jsr  nibtohex
.1cb7	8d 1b 1c	               sta  a2hexstr+2
.1cba	68		               pla
.1cbb	20 69 1c	               jsr  nibtohex
.1cbe	8d 1c 1c	               sta  a2hexstr+3
.1cc1	a9 00		               lda  #$00                ; 0 ended string
.1cc3	8d 1d 1c	               sta  a2hexstr+4
.1cc6	20 29 1a	               jsr  pop
.1cc9			atobin
.1cc9	20 ee 19	               jsr  push
.1ccc	a2 08		               ldx  #8
.1cce	a0 00		               ldy  #0
.1cd0	18		               clc
.1cd1	2a		nextbit        rol
.1cd2	48		               pha
.1cd3	69 00		               adc  #$00
.1cd5	29 01		               and  #$01
.1cd7	20 69 1c	               jsr  nibtohex
.1cda	99 20 1c	               sta  abin,y
.1cdd	68		               pla
.1cde	c8		               iny
.1cdf	ca		               dex
.1ce0	d0 ef		               bne  nextbit
.1ce2	a9 00		               lda  #0
.1ce4	99 20 1c	               sta  abin,y
.1ce7	20 29 1a	               jsr  pull
.1cea	60		               rts
.1ceb			abinsetmccol
.1ceb	20 5c 1a	               jsr  pushreg
.1cee	20 8b 1a	               jsr  popreg
.1cf1	60		               rts
.1cf2			putabin
.1cf2	20 c9 1c	               jsr     atobin
.1cf5	20 ee 19	               jsr     push
.1cf8	a2 20		               ldx     #<abin
.1cfa	a0 1c		               ldy     #>abin
.1cfc	20 ce 0a	               jsr     puts
.1cff	20 29 1a	               jsr     pop
.1d02	60		               rts
.1d03			printabin
.1d03	20 ee 19	               jsr     push
.1d06	a2 20		               ldx     #<abin
.1d08	a0 1c		               ldy     #>abin
.1d0a	20 ce 0a	               jsr     puts
.1d0d	20 29 1a	               jsr     pop
.1d10	60		               rts
.1d11			putabinfmt
.1d11	08		               php
.1d12	48		               pha
.1d13	a9 25		               lda     #"%"
.1d15	20 cb 0a	               jsr     putch
.1d18	68		               pla
.1d19	20 f2 1c	               jsr     putabin
.1d1c	28		               plp
.1d1d	60		               rts
.1d1e			putabinxy
.1d1e	20 e0 0a	               jsr     gotoxy
.1d21	20 f2 1c	               jsr     putabin
.1d24	60		               rts
.1d25			putabinfmtxy
.1d25	20 e0 0a	               jsr     gotoxy
.1d28	20 11 1d	               jsr     putabinfmt
.1d2b	60		               rts
.1d2c			atodec
.1d2c	20 ee 19	               jsr  push
.1d2f	f8		               sed            ; On se place en mode décimal.
.1d30	aa		               tax            ; On déplace a dans x.
.1d31	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.1d33	a9 00		               lda  #$00      ; 0 dans A.
.1d35	18		nextbit        clc            ; Bit carry a 0.
.1d36	69 01		               adc  #$01      ; Ajoute 1 a A.
.1d38	90 01		               bcc  decx      ; Pas de carry, pas de report.
.1d3a	c8		               iny            ; On incrémente Y
.1d3b	ca		decx           dex            ; X=X-1
.1d3c	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.1d3e	48		               pha            ; A sur le stack.
.1d3f	98		               tya            ; Y dans A (MSB)
.1d40	20 69 1c	               jsr  nibtohex  ; a hex petsci ...
.1d43	8d 29 1c	               sta  adec      ; ... dans tampon.
.1d46	68		               pla            ; Récupere A
.1d47	48		               pha            ;
.1d48	20 69 1c	               jsr  nibtohex
.1d4b	8d 2b 1c	               sta  adec+2
.1d4e	68		               pla
.1d4f	6a		               ror
.1d50	6a		               ror
.1d51	6a		               ror
.1d52	6a		               ror
.1d53	20 69 1c	               jsr  nibtohex
.1d56	8d 2a 1c	               sta  adec+1
.1d59	d8		               cld            ; On revient en mode binaire.
.1d5a	20 29 1a	               jsr  pull
.1d5d	60		               rts
.1d5e			putadec
.1d5e	20 ee 19	               jsr  push
.1d61	20 2c 1d	               jsr  atodec
.1d64	a2 29		               ldx  #<adec
.1d66	a0 1c		               ldy  #>adec+1
.1d68	20 ce 0a	               jsr  puts
.1d6b	20 29 1a	               jsr  pop
.1d6e	60		               rts

;******  Return to file: j2tester.asm


;******  End of listing

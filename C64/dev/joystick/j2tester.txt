
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L j2tester.txt -o j2tester.prg j2tester.asm
; Thu May 29 17:52:48 2025

;Offset	;Hex		;Source

;******  Processing input file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande PRINT du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart     jmp   main           ; Le programme principale doit s'appeler "main"

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: j2tester.asm

.0854			main
.0854	20 9c c3	               jsr       scrmaninit
.0857	20 5e c8	               jsr       js_init
.085a	a9 80		               lda       #$80
.085c	8d 88 c3	               sta       curcol
.085f	a9 00		               lda       #0
.0861	8d 21 d0	               sta       vicback0col
.0864	a9 02		               lda       #vrouge
.0866	8d 89 c3	               sta       brdcol
.0869	8d 20 d0	               sta       vicbordcol
.086c	20 2c c4	               jsr       cls
.086f	a9 20		               lda       #$20
.0871	09 00		               ora       #%00000000
.0873	a0 04		               ldy       #$04
.0875	a2 04		               ldx       #$04
.0877	20 e8 c0	               jsr       memfill
.087a	a9 00		               lda       #$00
.087c	a0 d8		               ldy       #$d8
.087e	20 e8 c0	               jsr       memfill
.0881	20 d8 cc	               jsr       sprt_init
.0884	20 89 c4	goagain        jsr       setinverse
.0887	a2 56		               ldx       #<bstring1
.0889	a0 09		               ldy       #>bstring1
.088b	20 36 c5	               jsr       putscxy
.088e	a2 83		               ldx       #<bstring2
.0890	a0 09		               ldy       #>bstring2
.0892	20 36 c5	               jsr       putscxy
.0895	a2 b0		               ldx       #<bstring3
.0897	a0 09		               ldy       #>bstring3
.0899	20 36 c5	               jsr       putscxy
.089c	a2 dd		               ldx       #<bstring4
.089e	a0 09		               ldy       #>bstring4
.08a0	20 36 c5	               jsr       putscxy
.08a3	20 93 c4	               jsr       clrinverse
.08a6	a2 f4		               ldx       #<js_status1
.08a8	a0 09		               ldy       #>js_status1
.08aa	20 36 c5	               jsr       putscxy
.08ad	a2 0c		               ldx       #<js_status2
.08af	a0 0a		               ldy       #>js_status2
.08b1	20 36 c5	               jsr       putscxy
.08b4	a2 23		               ldx       #<js_status3
.08b6	a0 0a		               ldy       #>js_status3
.08b8	20 36 c5	               jsr       putscxy
.08bb	a2 3c		               ldx       #<js_status4
.08bd	a0 0a		               ldy       #>js_status4
.08bf	20 36 c5	               jsr       putscxy
.08c2	a2 55		               ldx       #<js_status5
.08c4	a0 0a		               ldy       #>js_status5
.08c6	20 36 c5	               jsr       putscxy
.08c9	a2 6b		               ldx       #<js_status6
.08cb	a0 0a		               ldy       #>js_status6
.08cd	20 36 c5	               jsr       putscxy
.08d0	a2 00		               ldx       #$00
.08d2	a0 0f		               ldy       #$0f
.08d4	20 f9 c4	               jsr       gotoxy
.08d7	a9 07		               lda       #vjaune
.08d9	20 65 c5	               jsr       setcurcol
.08dc	a2 00		               ldx       #$00
.08de	20 7a c5	               jsr       setbkcol
.08e1			looper
.08e1	20 73 c8	               jsr       js_scan
.08e4	20 81 ca	               jsr       js_showvals
.08e7	20 64 cd	               jsr       sprt_move
.08ea			loopit
.08ea	a2 16		               ldx       #$16
.08ec	a0 11		               ldy       #$11
.08ee	20 f9 c4	               jsr       gotoxy
.08f1	a9 03		               lda       #3
.08f3	20 65 c5	               jsr       setcurcol
.08f6	ee 55 09	               inc       onebyte
.08f9	ad 55 09	               lda       onebyte
.08fc	ad 49 cc	               lda       js_2fire
.08ff	20 26 c3	               jsr       putabinfmt
.0902	48		               pha
.0903	ad 49 cc	               lda       js_2fire
.0906	f0 42		               beq       nochange
.0908	ad 20 d0	               lda       vicbordcol
.090b	18		               clc
.090c	69 00		               adc       #$0
.090e	29 0f		               and       #$0f
.0910	8d 20 d0	               sta       vicbordcol
.0913	ad 48 cc	               lda       js_2y
.0916	c9 04		               cmp       #$04
.0918	d0 20		               bne       toborder
.091a	ad 47 cc	               lda       js_2x
.091d	c9 0b		               cmp       #$0b
.091f	30 19		               bmi       toborder
.0921	c9 1d		               cmp       #$1d
.0923	10 15		               bpl       toborder
.0925	ee 2d cd	               inc       sprt_ptr
.0928	ad 2d cd	               lda       sprt_ptr
.092b	20 56 c6	               jsr       showregs
.092e	c9 09		               cmp       #9
.0930	90 02		               bcc       drawsptr
.0932	a9 00		               lda       #$00
.0934	8d 2d cd	drawsptr       sta       sprt_ptr
.0937	20 d8 cc	               jsr       sprt_init
.093a	ad 20 d0	toborder       lda       vicbordcol
.093d	38		               sec
.093e	69 00		               adc       #0
.0940	29 0f		               and       #$0f
.0942	8d 29 d0	               sta       $d029
.0945	a9 00		               lda       #$00
.0947	8d 49 cc	               sta       js_2fire
.094a			nochange
.094a	e8		               inx
.094b	68		               pla
.094c	20 e1 ff	               jsr       kstop
.094f	d0 90		               bne       looper
.0951	20 66 fe	               jsr       k_warmboot
.0954	60		out            rts
>0955	00		onebyte        .byte     0
>0956	0e 40 00 00	bstring1       .byte     vbleu1,bkcol1,0,0
>095a	20 20 20 20	               .text     "      Visualisation du port jeu #2      "
>095e	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>096e	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>097e	20 20 20 20
>0982	00		               .byte     0
>0983	0b 80 00 01	bstring2       .byte     vgris,bkcol2,0,1
>0987	20 50 12 0f	               .text     " Programme assembleur pour 6502 sur C64 "
>098b	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>099b	12 20 10 0f 15 12 20 36 35 30 32 20 13 15 12 20
>09ab	43 36 34 20
>09af	00		               .byte     0
>09b0	0a c0 00 02	bstring3       .byte     vrose,bkcol3,0,2
>09b4	20 20 20 20	               .text     "     par Daniel Lafrance (2024-06) C    "
>09b8	20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06 12
>09c8	01 0e 03 05 20 28 32 30 32 34 2d 30 36 29 20 43
>09d8	20 20 20 20
>09dc	00		               .byte     0
>09dd	07 c0 0b 04	bstring4       .byte     vjaune,bkcol3,11,4
>09e1	20 43 08 01	               .text     " Changer pointeur "
>09e5	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>09f3	00		               .byte     0
>09f4	0d 00 13 16	js_status1     .byte     vvert1,bkcol0,19,22
>09f8	20 20 20 15	               .text     "   up <----1> haut "
>09fc	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>0a0b	00		               .byte     0
>0a0c	0e 00 13 15	js_status2     .byte     vbleu1,bkcol0,19,21
>0a10	20 04 0f 17	               .text     " down <---2-> bas "
>0a14	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>0a22	00		               .byte     0
>0a23	0a 00 13 14	js_status3     .byte     vrose,bkcol0,19,20
>0a27	20 0c 05 06	               .text     " left <--4--> gauche"
>0a2b	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>0a3b	00		               .byte     0
>0a3c	07 00 13 13	js_status4     .byte     vjaune,bkcol0,19,19
>0a40	12 09 07 08	               .text     "right <-8---> droite"
>0a44	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a54	00		               .byte     0
>0a55	01 00 13 12	js_status5     .byte     vblanc,bkcol0,19,18
>0a59	20 46 09 12	               .text     " Fire <1----> Feu"
>0a5d	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>0a6a	00		               .byte     0
>0a6b	03 00 01 17	js_status6     .byte     vcyan,bkcol0,1,23
>0a6f	2b 2d 3e 20	               .text     "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a73	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a83	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0a93	24 31 46
>0a96	00		               .byte     0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>c000	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>c004	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.c008			libtart

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>c008	00		rp        .byte     0
>c009	00		ra        .byte     0
>c00a	00 00		pc        .word     0
.c00c			pushall
.c00c			push
.c00c	08		          php            ; stack : flg, pcl, pch
.c00d	78		          sei
.c00e	8d 09 c0	          sta  ra        ; save a
.c011	68		          pla            ; stack : pcl, pch
.c012	8d 08 c0	          sta  rp        ; save rp
.c015	68		          pla            ; stack : pch
.c016	8d 0a c0	          sta  pc        ; save pcl
.c019	68		          pla            ; stack : -
.c01a	8d 0b c0	          sta  pc+1      ; save pch
.c01d	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c01f	48		          pha            ; stack : zp1l
.c020	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c022	48		          pha            ; stack : zp1h, zp1l
.c023	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c025	48		          pha            ; stack : zp2l, zp1h, zp1l
.c026	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c028	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c029	ad 08 c0	          lda  rp        ; get rp
.c02c	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c02d	ad 09 c0	          lda  ra        ; get a
.c030	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c031	8a		          txa            ; get x
.c032	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c033	98		          tya            ; get y
.c034	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c035	ad 0b c0	          lda  pc+1      ; get pch
.c038	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c039	ad 0a c0	          lda  pc        ; get pcl
.c03c	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c03d	ad 08 c0	          lda  rp        ; get rp
.c040	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c041	ad 09 c0	          lda  ra        ; get a
.c044	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c045	58		          cli
.c046	60		          rts
.c047			pullall
.c047			pull
.c047			popall
.c047			pop
.c047	78		          sei
.c048	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c049	8d 0a c0	          sta  pc        ; save pcl
.c04c	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c04d	8d 0b c0	          sta  pc+1      ; save pch
.c050	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c051	a8		          tay            ; set y
.c052	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c053	aa		          tax            ; set x
.c054	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c055	8d 09 c0	          sta  ra        ; save a
.c058	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c059	8d 08 c0	          sta  rp        ; save rp
.c05c	68		          pla            ; stack : zp2l, zp1h, zp1l
.c05d	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c05f	68		          pla            ; stack : zp1h, zp1l
.c060	85 fd		          sta  zpage2    ; get zpage2 High byte
.c062	68		          pla            ; stack : zp1l
.c063	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c065	68		          pla            ; stack :
.c066	85 fb		          sta  zpage1    ; get zpage1 High byte
.c068	ad 0b c0	          lda  pc+1      ; get pch
.c06b	48		          pha            ; stack : pch
.c06c	ad 0a c0	          lda  pc
.c06f	48		          pha            ; stack : pcl, pch
.c070	ad 08 c0	          lda  rp        ; get rp
.c073	48		          pha            ; stack : rp, pcl, pch
.c074	ad 09 c0	          lda  ra        ; set ra
.c077	58		          cli
.c078	28		          plp            ; stack : pcl, pch
.c079	60		          rts
.c07a			pushreg
.c07a	08		          php            ; stack : flg, pcl, pch
.c07b	78		          sei
.c07c	8d 09 c0	          sta  ra        ; save a
.c07f	68		          pla            ; stack : pcl, pch
.c080	8d 08 c0	          sta  rp        ; save rp
.c083	68		          pla            ; stack : pch
.c084	8d 0a c0	          sta  pc        ; save pcl
.c087	68		          pla            ; stack : -
.c088	8d 0b c0	          sta  pc+1      ; save pch
.c08b	ad 08 c0	          lda  rp        ; get rp
.c08e	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c08f	ad 09 c0	          lda  ra        ; get a
.c092	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c093	8a		          txa            ; get x
.c094	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c095	98		          tya            ; get y
.c096	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c097	ad 0b c0	          lda  pc+1      ; get pch
.c09a	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c09b	ad 0a c0	          lda  pc        ; get pcl
.c09e	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c09f	ad 08 c0	          lda  rp        ; get rp
.c0a2	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c0a3	ad 09 c0	          lda  ra        ; get a
.c0a6	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c0a7	58		          cli
.c0a8	60		          rts
.c0a9			pullreg
.c0a9			popreg
.c0a9	78		          sei
.c0aa	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c0ab	8d 0a c0	          sta  pc        ; save pcl
.c0ae	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c0af	8d 0b c0	          sta  pc+1      ; save pch
.c0b2	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c0b3	a8		          tay            ; set y
.c0b4	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c0b5	aa		          tax            ; set x
.c0b6	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c0b7	8d 09 c0	          sta  ra        ; save a
.c0ba	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c0bb	8d 08 c0	          sta  rp        ; save rp
.c0be	ad 0b c0	          lda  pc+1      ; get pch
.c0c1	48		          pha            ; stack : pch
.c0c2	ad 0a c0	          lda  pc
.c0c5	48		          pha            ; stack : pcl, pch
.c0c6	ad 08 c0	          lda  rp        ; get rp
.c0c9	48		          pha            ; stack : rp, pcl, pch
.c0ca	ad 09 c0	          lda  ra        ; set ra
.c0cd	58		          cli
.c0ce	28		          plp            ; stack : pcl, pch
.c0cf	60		          rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c0d0			blkfill
.c0d0	20 0c c0	bf0            jsr  push
.c0d3	20 9b c1	               jsr  savezp1
.c0d6	84 fc		               sty  zpage1+1
.c0d8	a0 00		               ldy  #$00
.c0da	84 fb		               sty  zpage1
.c0dc	91 fb		bf1            sta  (zpage1),y
.c0de	c8		               iny
.c0df	d0 fb		               bne  bf1
.c0e1	20 aa c1	               jsr  restzp1
.c0e4	20 47 c0	               jsr  pop
.c0e7	60		               rts
.c0e8			memfill
.c0e8	20 0c c0	               jsr  push
.c0eb	20 d0 c0	mf1            jsr  blkfill
.c0ee	c8		               iny
.c0ef	ca		               dex
.c0f0	d0 f9		               bne  mf1
.c0f2	20 47 c0	               jsr  pop
.c0f5	60		               rts
.c0f6			memmove
.c0f6	20 0c c0	               jsr  push
.c0f9	ba		               tsx            ; On se crée un pointeur ...
.c0fa	8a		               txa
.c0fb	18		               clc
.c0fc	69 0b		               adc  #11
.c0fe	a8		               tay
.c0ff	a2 06		               ldx  #$06
.c101	b9 00 01	nextbyte       lda  $0100,y
.c104	99 50 c1	               sta  words,y
.c107	c8		               iny
.c108	ca		               dex
.c109	d0 f6		               bne  nextbyte
.c10b	ad 50 c1	               lda  s
.c10e	8d 27 c1	               sta  source+1
.c111	ad 51 c1	               lda  s+1
.c114	8d 28 c1	               sta  source+2
.c117	ad 52 c1	               lda  d
.c11a	8d 24 c1	               sta  destin+1
.c11d	ad 53 c1	               lda  d+1
.c120	8d 25 c1	               sta  destin+2
.c123	ad ff ff	destin         lda  $ffff
.c126	8d ff ff	source         sta  $ffff
.c129	ee 24 c1	               inc  destin+1
.c12c	d0 03		               bne  src
.c12e	ee 25 c1	               inc  destin+2
.c131	ee 27 c1	src            inc  source+1
.c134	d0 03		               bne  cnt
.c136	ee 28 c1	               inc  source+2
.c139	ad 54 c1	cnt            lda  compte
.c13c	d0 08		               bne  decit
.c13e	ad 55 c1	               lda  compte+1
.c141	f0 09		               beq  fini
.c143	ce 55 c1	               dec  compte+1
.c146	ce 54 c1	decit          dec  compte
.c149	4c 23 c1	               jmp  destin
.c14c	20 47 c0	fini           jsr  pop
.c14f	60		               rts
.c150			words
>c150	00 00		s         .word     $0000
>c152	00 00		d         .word     $0000
>c154	00 00		compte    .word     $0000
.c156			decword
.c156	20 0c c0	               jsr  push
.c159	86 fd		               stx  zpage2
.c15b	84 fe		               sty  zpage2+1
.c15d	20 47 c0	               jsr  pop
.c160	60		               rts
.c161			inczpage1
.c161			inczp1
.c161	08		               php
.c162	48		               pha
.c163	e6 fb		               inc  zpage1
.c165	a5 fb		               lda  zpage1
.c167	d0 02		               bne  nopage
.c169	e6 fc		               inc  zpage1+1
.c16b	68		nopage         pla
.c16c	28		               plp
.c16d	60		               rts
.c16e			deczpage1
.c16e			deczp1
.c16e	08		               php
.c16f	48		               pha
.c170	c6 fb		               dec  zpage1
.c172	a5 fb		               lda  zpage1
.c174	c9 ff		               cmp  #$ff
.c176	f0 02		               beq  report
.c178	d0 02		               bne  nopage
.c17a	c6 fc		report         dec  zpage1+1
.c17c	68		nopage         pla
.c17d	28		               plp
.c17e	60		               rts
.c17f			inczpage2
.c17f			inczp2
.c17f	08		               php
.c180	48		               pha
.c181	e6 fd		               inc  zpage2
.c183	a5 fd		               lda  zpage2
.c185	d0 02		               bne  nopage
.c187	e6 fe		               inc  zpage2+1
.c189	68		nopage         pla
.c18a	28		               plp
.c18b	60		               rts
.c18c			deczpage2
.c18c			deczp2
.c18c	08		               php
.c18d	c6 fd		               dec  zpage2
.c18f	a5 fd		               lda  zpage2
.c191	c9 ff		               cmp  #$ff
.c193	f0 02		               beq  report
.c195	d0 02		               bne  nopage
.c197	c6 fe		report         dec  zpage2+1
.c199	28		nopage         plp
.c19a	60		               rts
.c19b			savezp1
.c19b	08		               php
.c19c	48		               pha
.c19d	a5 fb		               lda  zpage1
.c19f	8d 2c c2	               sta  zp1
.c1a2	a5 fc		               lda  zpage1+1
.c1a4	8d 2d c2	               sta  zp1+1
.c1a7	68		               pla
.c1a8	28		               plp
.c1a9	60		               rts
.c1aa			restzp1
.c1aa	08		               php
.c1ab	48		               pha
.c1ac	ad 2c c2	               lda  zp1
.c1af	85 fb		               sta  zpage1
.c1b1	ad 2d c2	               lda  zp1+1
.c1b4	85 fc		               sta  zpage1+1
.c1b6	68		               pla
.c1b7	28		               plp
.c1b8	60		               rts
.c1b9			savezp2
.c1b9	08		               php
.c1ba	48		               pha
.c1bb	a5 fd		               lda  zpage2
.c1bd	8d 2e c2	               sta  zp2
.c1c0	a5 fe		               lda  zpage2+1
.c1c2	8d 2f c2	               sta  zp2+1
.c1c5	68		               pla
.c1c6	28		               plp
.c1c7	60		               rts
.c1c8			restzp2
.c1c8	08		               php
.c1c9	48		               pha
.c1ca	ad 2e c2	               lda  zp2
.c1cd	85 fd		               sta  zpage2
.c1cf	ad 2f c2	               lda  zp2+1
.c1d2	85 fe		               sta  zpage2+1
.c1d4	68		               pla
.c1d5	28		               plp
.c1d6	60		               rts
.c1d7			xy2addr
.c1d7	08		               php
.c1d8	48		               pha
.c1d9	8a		               txa
.c1da	48		               pha
.c1db	98		               tya
.c1dc	48		               pha
.c1dd	ad 27 c2	               lda  addr1+1
.c1e0	8d 29 c2	               sta  addr2+1
.c1e3	ad 26 c2	               lda  addr1
.c1e6	8d 28 c2	               sta  addr2
.c1e9	c0 00		               cpy  #$00
.c1eb	f0 0f		               beq  addx
.c1ed	18		moreline       clc
.c1ee	6d 25 c2	               adc  ymult
.c1f1	90 03		               bcc  norepy
.c1f3	ee 29 c2	               inc  addr2+1
.c1f6	8d 28 c2	norepy         sta  addr2
.c1f9	88		               dey
.c1fa	d0 f1		               bne  moreline
.c1fc	8a		addx           txa
.c1fd	18		               clc
.c1fe	6d 28 c2	               adc  addr2
.c201	90 03		               bcc  thatsit
.c203	ee 29 c2	               inc  addr2+1
.c206	8d 28 c2	thatsit        sta  addr2
.c209	68		               pla
.c20a	a8		               tay
.c20b	68		               pla
.c20c	aa		               tax
.c20d	68		               pla
.c20e	28		               plp
.c20f	60		               rts
.c210			loop
.c210	ce 30 c2	               dec  loopcount
.c213	d0 03		               bne  norep
.c215	ce 31 c2	               dec  loopcount+1
.c218	ad 30 c2	norep          lda  loopcount
.c21b	c9 00		               cmp  #$00
.c21d	d0 05		               bne  out
.c21f	4d 31 c2	               eor  loopcount+1
.c222	c9 ff		               cmp  #$ff
.c224	60		out            rts
>c225	28		ymult          .byte     40
>c226	00 00		addr1          .word     $0000
>c228	00 00		addr2          .word     $0000
>c22a	00 00		bytecnt        .word     $0000
>c22c	00 00		zp1            .word     $0000
>c22e	00 00		zp2            .word     $0000
>c230	00 00		loopcount      .word     $0000

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c232	01		a2hexcol       .byte     1              ; pour aputscxy
>c233	00		a2hexbkcol     .byte     %00000000
.c234			a2hexpos
>c234	00		a2hexpx        .byte     0              ; pour aputsxy
>c235	00		a2hexpy        .byte     0
>c236	24		a2hexprefix    .byte     "$"            ; pour aputs
>c237	00 00		a2hexstr       .word     $00
>c239	00 00		               .word     $00
>c23b	00		               .byte     0              ; 0 end string
>c23c	30 30 30 30	abin           .null     "00000000"
>c240	30 30 30 30 00
>c245	20 20 20 00	adec           .null     "   "
.c249			putahexfmtxy
.c249	20 0c c0	               jsr  push
.c24c	20 98 c2	               jsr  atohex
.c24f	ae 34 c2	               ldx  a2hexpx
.c252	ac 35 c2	               ldy  a2hexpy
.c255	20 f9 c4	               jsr  gotoxy
.c258	a2 36		               ldx  #<a2hexprefix
.c25a	a0 c2		               ldy  #>a2hexprefix
.c25c	20 eb c4	               jsr  puts
.c25f	20 47 c0	               jsr  pop
.c262	60		               rts
.c263			putahexfmt
.c263	20 0c c0	               jsr  push
.c266	20 98 c2	               jsr  atohex
.c269	a2 36		               ldx  #<a2hexprefix
.c26b	a0 c2		               ldy  #>a2hexprefix
.c26d	20 eb c4	               jsr  puts
.c270	20 47 c0	               jsr  pop
.c273	60		               rts
.c274			putahex
.c274	20 0c c0	               jsr  push
.c277	20 98 c2	               jsr  atohex
.c27a	a2 37		               ldx  #<a2hexstr
.c27c	a0 c2		               ldy  #>a2hexstr
.c27e	20 eb c4	               jsr  puts
.c281	20 47 c0	               jsr  pop
.c284	60		               rts
.c285			nibtohex
.c285	08		               php
.c286	29 0f		               and  #$0f
.c288	f8		               sed
.c289	18		               clc
.c28a	69 90		               adc  #$90
.c28c	69 40		               adc  #$40
.c28e	d8		               cld
.c28f	28		               plp
.c290	60		               rts
.c291			lsra4bits
.c291	08		               php
.c292	4a		               lsr
.c293	4a		               lsr
.c294	4a		               lsr
.c295	4a		               lsr
.c296	28		               plp
.c297	60		               rts
.c298			atohex
.c298	08		               php
.c299	48		               pha
.c29a	48		               pha
.c29b	20 91 c2	               jsr  lsra4bits
.c29e	20 85 c2	               jsr  nibtohex
.c2a1	8d 37 c2	               sta  a2hexstr
.c2a4	68		               pla
.c2a5	20 85 c2	               jsr  nibtohex
.c2a8	8d 38 c2	               sta  a2hexstr+1
.c2ab	a9 00		               lda  #$00                ; set end of string
.c2ad	8d 39 c2	               sta  a2hexstr+2
.c2b0	68		               pla
.c2b1	28		               plp
.c2b2	60		               rts
.c2b3			xy2hex
.c2b3	20 0c c0	               jsr  push
.c2b6	20 98 c2	               jsr  atohex
.c2b9	8a		               txa
.c2ba	48		               pha
.c2bb	20 91 c2	               jsr  lsra4bits
.c2be	20 85 c2	               jsr  nibtohex
.c2c1	8d 37 c2	               sta  a2hexstr
.c2c4	68		               pla
.c2c5	20 85 c2	               jsr  nibtohex
.c2c8	8d 38 c2	               sta  a2hexstr+1
.c2cb	98		               tya
.c2cc	48		               pha
.c2cd	20 91 c2	               jsr  lsra4bits
.c2d0	20 85 c2	               jsr  nibtohex
.c2d3	8d 39 c2	               sta  a2hexstr+2
.c2d6	68		               pla
.c2d7	20 85 c2	               jsr  nibtohex
.c2da	8d 3a c2	               sta  a2hexstr+3
.c2dd	a9 00		               lda  #$00                ; 0 ended string
.c2df	8d 3b c2	               sta  a2hexstr+4
.c2e2	20 47 c0	               jsr  pop
.c2e5			atobin
.c2e5	20 0c c0	               jsr  push
.c2e8	a2 08		               ldx  #8
.c2ea	a0 00		               ldy  #0
.c2ec	18		               clc
.c2ed	2a		nextbit        rol
.c2ee	48		               pha
.c2ef	69 00		               adc  #$00
.c2f1	29 01		               and  #$01
.c2f3	20 85 c2	               jsr  nibtohex
.c2f6	99 3c c2	               sta  abin,y
.c2f9	68		               pla
.c2fa	c8		               iny
.c2fb	ca		               dex
.c2fc	d0 ef		               bne  nextbit
.c2fe	a9 00		               lda  #0
.c300	99 3c c2	               sta  abin,y
.c303	20 47 c0	               jsr  pull
.c306	60		               rts
.c307			putabin
.c307	20 e5 c2	               jsr     atobin
.c30a	20 0c c0	               jsr     push
.c30d	a2 3c		               ldx     #<abin
.c30f	a0 c2		               ldy     #>abin
.c311	20 eb c4	               jsr     puts
.c314	20 47 c0	               jsr     pop
.c317	60		               rts
.c318			printabin
.c318	20 0c c0	               jsr     push
.c31b	a2 3c		               ldx     #<abin
.c31d	a0 c2		               ldy     #>abin
.c31f	20 eb c4	               jsr     puts
.c322	20 47 c0	               jsr     pop
.c325	60		               rts
.c326			putabinfmt
.c326	08		               php
.c327	48		               pha
.c328	a9 25		               lda     #"%"
.c32a	20 9d c4	               jsr     putch
.c32d	68		               pla
.c32e	20 07 c3	               jsr     putabin
.c331	28		               plp
.c332	60		               rts
.c333			putabinxy
.c333	20 f9 c4	               jsr     gotoxy
.c336	20 07 c3	               jsr     putabin
.c339	60		               rts
.c33a			putabinfmtxy
.c33a	20 f9 c4	               jsr     gotoxy
.c33d	20 26 c3	               jsr     putabinfmt
.c340	60		               rts
.c341			atodec
.c341	20 0c c0	               jsr  push
.c344	f8		               sed            ; On se place en mode décimal.
.c345	aa		               tax            ; On déplace a dans x.
.c346	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.c348	a9 00		               lda  #$00      ; 0 dans A.
.c34a	18		nextbit        clc            ; Bit carry a 0.
.c34b	69 01		               adc  #$01      ; Ajoute 1 a A.
.c34d	90 01		               bcc  decx      ; Pas de carry, pas de report.
.c34f	c8		               iny            ; On incrémente Y
.c350	ca		decx           dex            ; X=X-1
.c351	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.c353	48		               pha            ; A sur le stack.
.c354	98		               tya            ; Y dans A (MSB)
.c355	20 85 c2	               jsr  nibtohex  ; a hex petsci ...
.c358	8d 45 c2	               sta  adec      ; ... dans tampon.
.c35b	68		               pla            ; Récupere A
.c35c	48		               pha            ;
.c35d	20 85 c2	               jsr  nibtohex
.c360	8d 47 c2	               sta  adec+2
.c363	68		               pla
.c364	6a		               ror
.c365	6a		               ror
.c366	6a		               ror
.c367	6a		               ror
.c368	20 85 c2	               jsr  nibtohex
.c36b	8d 46 c2	               sta  adec+1
.c36e	d8		               cld            ; On revient en mode binaire.
.c36f	20 47 c0	               jsr  pull
.c372	60		               rts
.c373			putadec
.c373	20 0c c0	               jsr  push
.c376	20 41 c3	               jsr  atodec
.c379	a2 45		               ldx  #<adec
.c37b	a0 c2		               ldy  #>adec+1
.c37d	20 eb c4	               jsr  puts
.c380	20 47 c0	               jsr  pop
.c383	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-text-mc.asm

>c384	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>c386	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>c388	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>c389	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>c38a	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>c38b	02		vicbkcol1      .byte     vrouge ;$0b    ; 1,
>c38c	05		vicbkcol2      .byte     vvert  ;$0b    ; 2,
>c38d	06		vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
>c38e	00		inverse        .byte     $00
>c38f	00 00 00 00	scraddr        .byte     0,0,0,0,0
>c393	00
>c394	00 00 00 00	coladdr        .byte     0,0,0,0,0
>c398	00
>c399	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>c39a	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.c39c			scrmaninit
.c39c	08		               php            ; On sauvegarde les registres
.c39d	48		               pha
.c39e	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.c3a0	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.c3a3	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.c3a6	09 10		               ora  #%00010000; modifier que le bit 4.
.c3a8	29 ef		               and  #%11101111
.c3aa	8d 16 d0	               sta  $d016 ; 53270
.c3ad	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.c3b0	09 40		               ora  #%01000000; selectionner le md. couleur de
.c3b2	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.c3b5	ad 8a c3	               lda  vicbkcol0
.c3b8	8d 21 d0	               sta  $d021     ; 53281
.c3bb	ad 8b c3	               lda  vicbkcol1
.c3be	8d 22 d0	               sta  $d022     ; 53282
.c3c1	ad 8c c3	               lda  vicbkcol2
.c3c4	8d 23 d0	               sta  $d023     ; 53283
.c3c7	ad 8d c3	               lda  vicbkcol3
.c3ca	8d 24 d0	               sta  $d024     ; 54284
.c3cd	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.c3cf	8d 99 c3	               sta  bkcol     ; ... fond par defaut des caracteres.
.c3d2	20 2c c4	               jsr  cls       ; Finalement on efface l'ecran
.c3d5	68		               pla
.c3d6	28		               plp
.c3d7	60		               rts
.c3d8			curshome
.c3d8	08		               php                      ; Sauvegarde flags ...
.c3d9	48		               pha                      ; ... et accumulateur
.c3da	ad 9a c3	               lda  virtaddr            ; In replace le pointeur ...
.c3dd	8d 84 c3	               sta  scrptr              ; ... d'écran virtuel à sa ...
.c3e0	ad 9b c3	               lda  virtaddr+1          ; ... position initiale.
.c3e3	8d 85 c3	               sta  scrptr+1
.c3e6	20 17 c4	               jsr  synccolptr          ; On synchronise le ptr couleur.
.c3e9	ad 8a c3	               lda  vicbkcol0
.c3ec	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.c3ef	ad 8b c3	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.c3f2	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.c3f5	ad 8c c3	               lda  vicbkcol2           ; ... les variables globales.
.c3f8	8d 23 d0	               sta  $d023
.c3fb	ad 8d c3	               lda  vicbkcol3
.c3fe	8d 24 d0	               sta  $d024
.c401	68		               pla                      ; Récupère l'accumulateur ...
.c402	28		               plp                      ; ... et les flags
.c403	60		               rts
.c404			incscrptr
.c404	08		               php                      ; Sauvegarde flags ...
.c405	48		               pha                      ; ... et accumulateur
.c406	ee 84 c3	               inc  scrptr              ; Incremente le pointeur
.c409	ad 84 c3	               lda  scrptr              ; Regarde si on doit faire un ...
.c40c	d0 03		               bne  pasdereport         ; ... report dans le MSB
.c40e	ee 85 c3	               inc  scrptr+1            ; Si oui on fait le repport
.c411	20 17 c4	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.c414	68		               pla                      ; Récupère l'accumulateur ...
.c415	28		               plp                      ; ... et les flags
.c416	60		               rts
.c417			synccolptr
.c417	08		               php                      ; Sauvegarde flags ...
.c418	48		               pha                      ; ... et accumulateur
.c419	ad 84 c3	               lda  scrptr              ; Récupère le LSB du scrptr ...
.c41c	8d 86 c3	               sta  colptr              ; ... pour le placer dans le colptr.
.c41f	ad 85 c3	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.c422	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.c424	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.c426	8d 87 c3	               sta  colptr+1            ; ... et le sauvegarde.
.c429	68		               pla                      ; Récupère l'accumulateur ...
.c42a	28		               plp                      ; ... et les flags
.c42b	60		               rts
.c42c			cls
.c42c	20 0c c0	               jsr  push                ; On sauvegarde les registres
.c42f	ad 9a c3	               lda  virtaddr            ; On replace le curseur d'ecran à
.c432	8d 84 c3	               sta  scrptr
.c435	ad 9b c3	               lda  virtaddr+1          ; sa position initiale, ($0400).
.c438	8d 85 c3	               sta  scrptr+1
.c43b	20 17 c4	               jsr  synccolptr          ; On synchronise la couleur.
.c43e	20 ed c5	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.c441	ad 89 c3	               lda  brdcol              ; On place la couleur ...
.c444	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.c447	ad 99 c3	               lda  bkcol               ; Associer couleur pour ...
.c44a	8d 21 d0	               sta  vicbackcol          ; ... remplir l'ecran ...
.c44d	a9 20		               lda  #$20                ; ... de caracteres espace.
.c44f	a2 04		               ldx  #4                  ; Quatre blocs de ...
.c451	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.c453			nextcar
.c453	91 fb		               sta  (zpage1),y          ;
.c455	a5 fc		               lda  zpage1+1
.c457	48		               pha
.c458	29 03		               and  #%00000011
.c45a	09 d8		               ora  #%11011000
.c45c	85 fc		               sta  zpage1+1
.c45e	a9 00		               lda  #0
.c460	91 fb		               sta  (zpage1),y
.c462	68		               pla
.c463	85 fc		               sta  zpage1+1
.c465	a9 20		               lda  #$20
.c467	88		               dey
.c468	d0 e9		               bne  nextcar
.c46a	e6 fc		               inc  zpage1+1
.c46c	ca		               dex
.c46d	d0 e4		               bne  nextcar
.c46f	a9 00		               lda  #$00
.c471	8d 84 c3	               sta  scrptr
.c474	a9 04		               lda  #$04
.c476	8d 85 c3	               sta  scrptr+1
.c479	20 17 c4	               jsr  synccolptr
.c47c	20 47 c0	               jsr  pop
.c47f	60		               rts
.c480			setborder
.c480	08		               php
.c481	8d 89 c3	               sta  brdcol
.c484	8d 20 d0	               sta  vicbordcol
.c487	28		               plp
.c488	60		               rts
.c489			setinverse
.c489	08		               php
.c48a	48		               pha
.c48b	a9 80		               lda  #%10000000
.c48d	8d 8e c3	               sta  inverse
.c490	68		               pla
.c491	28		               plp
.c492	60		               rts
.c493			clrinverse
.c493	08		               php
.c494	48		               pha
.c495	a9 00		               lda  #%00000000
.c497	8d 8e c3	               sta  inverse
.c49a	68		               pla
.c49b	28		               plp
.c49c	60		               rts
.c49d			putch
.c49d	20 0c c0	               jsr  push           ; On sauvegarde les registres
.c4a0	20 ed c5	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.c4a3	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.c4a5	48		               pha
.c4a6	ad 99 c3	               lda  bkcol
.c4a9	29 c0		               and  #%11000000
.c4ab	8d 99 c3	               sta  bkcol
.c4ae	68		               pla
.c4af	0d 99 c3	               ora  bkcol          ; On y ajoute la couleur du fond.
.c4b2	a0 00		               ldy  #$00           ; Met Y à 0
.c4b4	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.c4b6	ae 87 c3	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.c4b9	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.c4bb	ad 88 c3	               lda  curcol         ; Charge la couleur voulu dans.
.c4be	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.c4c0	20 04 c4	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.c4c3	20 47 c0	               jsr  pop            ; Replace tous les registres
.c4c6	60		               rts
.c4c7			z2putch
.c4c7	20 0c c0	               jsr  push           ; On sauvegarde les registres
.c4ca	a0 00		               ldy  #$0            ; Met Y à 0
.c4cc	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.c4ce	20 9d c4	               jsr  putch          ; Appel pour affichage
.c4d1	20 47 c0	               jsr  pop            ; Replace tous les registres
.c4d4	60		               rts
.c4d5			z2puts
.c4d5	20 0c c0	               jsr  push           ; On sauvegarde les registres
.c4d8	a0 00		               ldy  #$0            ; Met Y à 0
.c4da	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.c4dc	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.c4de	20 c7 c4	               jsr  z2putch        ; Appel pour affichage
.c4e1	20 7f c1	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.c4e4	4c da c4	               jmp  nextcar        ; On passe au prochain
.c4e7	20 47 c0	endstr         jsr  pop            ; Replace tous les registres
.c4ea	60		               rts
.c4eb			puts
.c4eb	20 0c c0	               jsr  push           ; On sauvegarde les registres
.c4ee	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.c4f0	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.c4f2	20 d5 c4	               jsr  z2puts         ; Appel pour affichage
.c4f5	20 47 c0	               jsr  pop            ; Replace tous les registres
.c4f8	60		               rts
.c4f9			gotoxy
.c4f9	20 0c c0	               jsr  push           ; On sauvegarde les registres
.c4fc	20 d8 c3	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.c4ff	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.c501	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.c503	a9 28		               lda  #40            ; Si oui on ajoute 40
.c505	20 8a c5	               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
.c508	88		               dey                 ;  de fois qu'il est spécifié dans y.
.c509	4c ff c4	               jmp  yagain         ; On passe au prochain y.
.c50c	8a		setx           txa                 ; On ajoute la valeur de X
.c50d	20 8a c5	               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
.c510	20 17 c4	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.c513	20 47 c0	               jsr  pop            ; Replace tous les registres
.c516	60		               rts
.c517			putsxy
.c517	20 0c c0	               jsr  push           ; On sauvegarde les registres et le zp2
.c51a	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.c51c	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.c51e	a0 00		               ldy  #0             ; On place le compteur
.c520	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.c522	aa		               tax                 ; de A à X
.c523	20 7f c1	               jsr  inczp2         ; On deplace le pointeur
.c526	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.c528	a8		               tay                 ; de A à Y
.c529	20 f9 c4	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.c52c	20 7f c1	               jsr  inczp2         ; On deplace le pointeur
.c52f	20 d5 c4	               jsr  z2puts         ; On imprime la chaine
.c532	20 47 c0	               jsr  pop            ; Replace tous les registres
.c535	60		               rts
.c536			putscxy
.c536	20 0c c0	               jsr  push           ; On Sauvegarde registres et zp2
.c539	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.c53b	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.c53d	a0 00		               ldy  #0             ; Place le compteur
.c53f	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.c541	8d 88 c3	               sta  curcol         ; ... et on la definie
.c544	20 7f c1	               jsr  inczp2         ; Pointe le prochain byte
.c547	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.c549	8d 99 c3	               sta  bkcol          ; ... l'index de couleur de fond
.c54c	20 7f c1	               jsr  inczp2         ; Deplace le pointeur
.c54f	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.c551	aa		               tax                 ; ... de A à X
.c552	20 7f c1	               jsr  inczp2         ; Deplace le pointeur
.c555	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.c557	a8		               tay                 ; de A à Y
.c558	20 f9 c4	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.c55b	20 7f c1	               jsr  inczp2         ; Place le ptr en début de chaine
.c55e	20 d5 c4	               jsr  z2puts         ; On imprime la chaine
.c561	20 47 c0	               jsr  pop
.c564	60		               rts
.c565			setcurcol
.c565	08		               php
.c566	8d 88 c3	               sta  curcol
.c569	28		               plp
.c56a	60		               rts
.c56b			setvicbkcol
.c56b	08		               php
.c56c	48		               pha
.c56d	8a		               txa
.c56e	29 03		               and  #$03
.c570	aa		               tax
.c571	68		               pla
.c572	9d 8a c3	               sta  vicbkcol0,x
.c575	9d 21 d0	               sta  $d021,x
.c578	28		               plp
.c579	60		               rts
.c57a			setbkcol
.c57a	08		               php
.c57b	48		               pha
.c57c	0a		               asl
.c57d	0a		               asl
.c57e	0a		               asl
.c57f	0a		               asl
.c580	0a		               asl
.c581	0a		               asl
.c582	29 c0		               and  #$c0
.c584	8d 99 c3	               sta  bkcol
.c587	68		               pla
.c588	28		               plp
.c589	60		               rts
.c58a			saddscrptr
.c58a	08		               php
.c58b	48		               pha
.c58c	18		               clc
.c58d	6d 84 c3	               adc  scrptr
.c590	8d 84 c3	               sta  scrptr
.c593	90 03		               bcc  norep
.c595	ee 85 c3	               inc  scrptr+1
.c598	68		norep          pla
.c599	28		               plp
.c59a	60		               rts
.c59b			scrptr2str
.c59b	20 0c c0	               jsr  push
.c59e	ad 85 c3	               lda  scrptr+1
.c5a1	48		               pha
.c5a2	20 91 c2	               jsr  lsra4bits
.c5a5	20 85 c2	               jsr  nibtohex
.c5a8	8d 8f c3	               sta  scraddr
.c5ab	68		               pla
.c5ac	20 91 c2	               jsr  lsra4bits
.c5af	20 85 c2	               jsr  nibtohex
.c5b2	8d 90 c3	               sta  scraddr+1
.c5b5	ad 85 c3	               lda  scrptr+1
.c5b8	48		               pha
.c5b9	20 91 c2	               jsr  lsra4bits
.c5bc	20 85 c2	               jsr  nibtohex
.c5bf	8d 8f c3	               sta  scraddr
.c5c2	68		               pla
.c5c3	20 91 c2	               jsr  lsra4bits
.c5c6	20 85 c2	               jsr  nibtohex
.c5c9	8d 90 c3	               sta  scraddr+1
.c5cc	ad 84 c3	               lda  scrptr
.c5cf	48		               pha
.c5d0	20 91 c2	               jsr  lsra4bits
.c5d3	20 85 c2	               jsr  nibtohex
.c5d6	8d 91 c3	               sta  scraddr+2
.c5d9	8d 96 c3	               sta  coladdr+2
.c5dc	68		               pla
.c5dd	20 91 c2	               jsr  lsra4bits
.c5e0	20 85 c2	               jsr  nibtohex
.c5e3	8d 92 c3	               sta  scraddr+3
.c5e6	8d 97 c3	               sta  coladdr+3
.c5e9	20 47 c0	               jsr  pop
.c5ec	60		               rts
.c5ed			scrptr2zp1
.c5ed	08		               php
.c5ee	48		               pha
.c5ef	ad 84 c3	               lda  scrptr
.c5f2	85 fb		               sta  zpage1
.c5f4	ad 85 c3	               lda  scrptr+1
.c5f7	85 fc		               sta  zpage1+1
.c5f9	68		               pla
.c5fa	28		               plp
.c5fb	60		               rts
.c5fc			colptr2zp1
.c5fc	08		               php
.c5fd	48		               pha
.c5fe	ad 86 c3	               lda  colptr
.c601	85 fb		               sta  zpage1
.c603	ad 87 c3	               lda  colptr+1
.c606	85 fc		               sta  zpage1+1
.c608	68		               pla
.c609	28		               plp
.c60a	60		               rts
.c60b			scrptr2zp2
.c60b	08		               php
.c60c	48		               pha
.c60d	ad 84 c3	               lda  scrptr
.c610	85 fd		               sta  zpage2
.c612	ad 85 c3	               lda  scrptr+1
.c615	85 fe		               sta  zpage2+1
.c617	68		               pla
.c618	28		               plp
.c619	60		               rts
.c61a			colptr2zp2
.c61a	08		               php
.c61b	48		               pha
.c61c	ad 86 c3	               lda  colptr
.c61f	85 fd		               sta  zpage2
.c621	ad 87 c3	               lda  colptr+1
.c624	85 fe		               sta  zpage2+1
.c626	68		               pla
.c627	28		               plp
.c628	60		               rts
.c629			putrahex
.c629	08		               php
.c62a	48		               pha
.c62b	20 98 c2	               jsr     atohex
.c62e	a2 32		               ldx     #<a2hexcol
.c630	a0 c2		               ldy     #>a2hexcol
.c632	20 eb c4	               jsr     puts
.c635	68		               pla
.c636	28		               plp
.c637	60		               rts
.c638			putrahexxy
.c638	08		               php
.c639	48		               pha
.c63a	20 98 c2	               jsr  atohex
.c63d	a9 34		               lda  #<a2hexpos
.c63f	a0 c2		               ldy  #>a2hexpos
.c641	20 17 c5	               jsr  putsxy
.c644	68		               pla
.c645	28		               plp
.c646	60		               rts
.c647			putrahexcxy
.c647	08		               php
.c648	68		               pla
.c649	20 98 c2	               jsr  atohex
.c64c	a9 34		               lda  #<a2hexpos
.c64e	a0 c2		               ldy  #>a2hexpos
.c650	20 36 c5	               jsr  putscxy
.c653	68		               pla
.c654	28		               plp
.c655	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.c656			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.c656	08		               php                 ; Sauvegarde le registre de status sur stack.
.c657	8d 51 c8	               sta  rega           ; Sauvegarde Acc en mémoire.
.c65a	68		               pla                 ; Récupère le registre de status du stack.
.c65b	8d 54 c8	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.c65e	8e 52 c8	               stx  regx           ; Sauvegarde le registre X en mémoire.
.c661	8c 53 c8	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.c664	ba		               tsx                 ; Copie le registre S dans X.
.c665	8e 55 c8	               stx  regs           ; Sauvegarde le registre S en mémoire.
.c668	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.c669	8d 57 c8	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.c66c	8d 59 c8	               sta  regpcl2        ; ... une seconde fois.
.c66f	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.c670	8d 56 c8	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.c673	8d 58 c8	               sta  regpch2        ; ... une seconde fois.
.c676	ad 51 c8	               lda  rega           ; On commence par le registre Acc.
.c679	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c67a	20 85 c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c67d	8d ee c7	               sta  vala+1         ; ... et le place dans la chaine.
.c680	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c681	20 91 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c684	20 85 c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c687	8d ed c7	               sta  vala           ; ... et le place dans la chaine.
.c68a	ad 53 c8	               lda  regy           ; Ensuite, le registre Y.
.c68d	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c68e	20 85 c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c691	8d 05 c8	               sta  valy+1         ; ... et le place dans la chaine.
.c694	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c695	20 91 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c698	20 85 c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c69b	8d 04 c8	               sta  valy           ; ... et le place dans la chaine.
.c69e	ad 52 c8	               lda  regx           ; Ensuite, le registre X.
.c6a1	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c6a2	20 85 c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c6a5	8d f9 c7	               sta  valx+1         ; ... et le place dans la chaine.
.c6a8	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c6a9	20 91 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c6ac	20 85 c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c6af	8d f8 c7	               sta  valx           ; ... et le place dans la chaine.
.c6b2	ad 54 c8	               lda  regp           ; Ensuite, le registre de status.
.c6b5	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c6b6	20 85 c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c6b9	8d 10 c8	               sta  valp+1         ; ... et le place dans la chaine.
.c6bc	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c6bd	20 91 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c6c0	20 85 c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c6c3	8d 0f c8	               sta  valp           ; ... et le place dans la chaine.
.c6c6	ad 55 c8	               lda  regs           ; Ensuite, le pointeur de stack.
.c6c9	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c6ca	20 85 c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c6cd	8d 1b c8	               sta  vals+1         ; ... et le place dans la chaine.
.c6d0	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c6d1	20 91 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c6d4	20 85 c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c6d7	8d 1a c8	               sta  vals           ; ... et le place dans la chaine.
.c6da	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.c6db	ad 59 c8	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.c6de	69 00		               adc  #$00           ; On y ajoute 1.
.c6e0	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.c6e2	ee 58 c8	               inc  regpch2        ; ... en incrémentant le MSB.
.c6e5	8d 59 c8	noreport       sta  regpcl2        ; On le sauvegarde.
.c6e8	ad 59 c8	               lda  regpcl2        ; On récupère la partie basse du compteur.
.c6eb	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c6ec	20 85 c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c6ef	8d 2b c8	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.c6f2	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c6f3	20 91 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c6f6	20 85 c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c6f9	8d 2a c8	               sta  valpcl         ; ... et lace le code à la position "--X-".
.c6fc	ad 58 c8	               lda regpch2         ; On récupère la partie haute du compteur.
.c6ff	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c700	20 85 c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c703	8d 29 c8	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.c706	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c707	20 91 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c70a	20 85 c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c70d	8d 28 c8	               sta  valpch         ; ... et lace le code à la position "X---".
.c710	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.c712	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c713	20 85 c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c716	8d 3c c8	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.c719	68		               pla
.c71a	20 91 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c71d	20 85 c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c720	8d 3b c8	               sta  valz1l         ; ... et lace le code à la position "--X-".
.c723	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.c725	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c726	20 85 c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c729	8d 3a c8	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.c72c	68		               pla
.c72d	20 91 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c730	20 85 c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c733	8d 39 c8	               sta  valz1h         ; ... et lace le code à la position "X---".
.c736	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.c738	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c739	20 85 c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c73c	8d 4d c8	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.c73f	68		               pla
.c740	20 91 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c743	20 85 c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c746	8d 4c c8	               sta  valz2l         ; ... et lace le code à la position "--X-".
.c749	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.c74b	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c74c	20 85 c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c74f	8d 4b c8	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.c752	68		               pla
.c753	20 91 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c756	20 85 c2	               jsr  nibtohex
.c759	8d 4a c8	               sta  valz2h         ; ... et lace le code à la position "X---".
.c75c	20 89 c4	               jsr  setinverse     ; On se place en mode inverse vidéo.
.c75f	20 7a c0	               jsr  pushreg
.c762	a2 e5		               ldx  #<srega
.c764	a0 c7		               ldy  #>srega
.c766	20 36 c5	               jsr  putscxy
.c769	20 a9 c0	               jsr  popreg
.c76c	20 7a c0	               jsr  pushreg
.c76f	a2 f1		               ldx  #<sregx
.c771	a0 c7		               ldy  #>sregx
.c773	20 36 c5	               jsr  putscxy
.c776	20 a9 c0	               jsr  popreg
.c779	20 7a c0	               jsr  pushreg
.c77c	a2 fc		               ldx  #<sregy
.c77e	a0 c7		               ldy  #>sregy
.c780	20 36 c5	               jsr  putscxy
.c783	20 a9 c0	               jsr  popreg
.c786	20 7a c0	               jsr  pushreg
.c789	a2 08		               ldx  #<sregp
.c78b	a0 c8		               ldy  #>sregp
.c78d	20 36 c5	               jsr  putscxy
.c790	20 a9 c0	               jsr  popreg
.c793	20 7a c0	               jsr  pushreg
.c796	a2 13		               ldx  #<sregs
.c798	a0 c8		               ldy  #>sregs
.c79a	20 36 c5	               jsr  putscxy
.c79d	20 a9 c0	               jsr  popreg
.c7a0	20 7a c0	               jsr  pushreg
.c7a3	a2 1f		               ldx  #<sregpc
.c7a5	a0 c8		               ldy  #>sregpc
.c7a7	20 36 c5	               jsr  putscxy
.c7aa	20 a9 c0	               jsr  popreg
.c7ad	20 7a c0	               jsr  pushreg
.c7b0	a2 2f		               ldx  #<sregz1
.c7b2	a0 c8		               ldy  #>sregz1
.c7b4	20 36 c5	               jsr  putscxy
.c7b7	20 a9 c0	               jsr  popreg
.c7ba	20 7a c0	               jsr  pushreg
.c7bd	a2 40		               ldx  #<sregz2
.c7bf	a0 c8		               ldy  #>sregz2
.c7c1	20 36 c5	               jsr  putscxy
.c7c4	20 a9 c0	               jsr  popreg
.c7c7	20 93 c4	               jsr  clrinverse     ; On quitte le mode inverse vidéo.
.c7ca	ad 56 c8	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.c7cd	48		               pha                 ; ... à la bonne position sur la pile.
.c7ce	ad 57 c8	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.c7d1	48		               pha                 ; ... à la bonne position sur la pile.
.c7d2	ae 55 c8	               ldx  regs           ; On replace tous les registre à leurs ...
.c7d5	9a		               txs                 ; ...
.c7d6	ac 53 c8	               ldy  regy           ; ...
.c7d9	ae 52 c8	               ldx  regx           ; ...
.c7dc	ad 54 c8	               lda  regp           ; ...
.c7df	48		               pha                 ; ...
.c7e0	ad 51 c8	               lda  rega           ; ...
.c7e3	28		               plp                 ; ... valeurs initiales
.c7e4	60		               rts
>c7e5	07 01 17	srega   .byte   cyellow,coln+1,line
>c7e8	20 20 01 3a	        .text   '  a:$' ;4,24
>c7ec	24
>c7ed	00 00 20 00	vala    .byte   0,0,32,0
>c7f1	03 09 17	sregx   .byte   ccyan,coln+9,line
>c7f4	20 18 3a 24	        .text   ' x:$' ;4,24
>c7f8	00 00 20 00	valx    .byte   0,0,32,0
>c7fc	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>c7ff	20 19 3a 20	        .text   ' y: $' ;4,24
>c803	24
>c804	00 00 20 00	valy    .byte   0,0,32,0
>c808	08 18 17	sregp   .byte   corange,coln+24,line
>c80b	20 10 3a 24	        .text   ' p:$' ;4,24
>c80f	00 00 20 00	valp    .byte   0,0,32,0
>c813	0a 1f 17	sregs   .byte   clightred,coln+31,line
>c816	20 13 3a 24	        .text   ' s:$' ;4,24
>c81a	00 00 20 20	vals    .byte   0,0,32,32,0
>c81e	00
>c81f	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>c823	20 10 03 3a	        .text   ' pc:$' ;4,24
>c827	24
>c828	00 00		valpch  .byte   0,0
>c82a	00 00 20 20	valpcl  .byte   0,0,32,32,0
>c82e	00
>c82f	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>c833	20 1a 10 31	        .text   ' zp1:$' ;4,24
>c837	3a 24
>c839	00 00		valz1h  .byte   0,0
>c83b	00 00 20 20	valz1l  .byte   0,0,32,32,0
>c83f	00
>c840	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>c844	20 1a 10 32	        .text   ' zp2:$' ;4,24
>c848	3a 24
>c84a	00 00		valz2h  .byte   0,0
>c84c	00 00 20 20	valz2l  .byte   0,0,32,32,0
>c850	00
>c851	00		rega    .byte   0
>c852	00		regx    .byte   0
>c853	00		regy    .byte   0
>c854	00		regp    .byte   0
>c855	00		regs    .byte   0
>c856	00		regpch  .byte   0
>c857	00		regpcl  .byte   0
>c858	00		regpch2 .byte   0
>c859	00		regpcl2 .byte   0
>c85a	00		vzp1h   .byte   0
>c85b	00		vzp1l   .byte   0
>c85c	00		vzp2h   .byte   0
>c85d	00		vzp2l   .byte   0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-joystick.asm

=$dc00			js_2port       =    $dc00          ; CIA #1 Port data A
=$dc01			js_1port       =    $dc01          ; CIA #1 Port data B
=$dc02			js_2dir        =    $dc02          ; CIA #1 Port de direction A
=$dc03			js_1dir        =    $dc03          ; CIA #1 port de direction B
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.c85e			js_init
.c85e	08		               php                 ; Sauvegarde le registre de
.c85f	48		               pha                 ;   status et le registre a.
.c860	ad 03 dc	               lda  js_1dir        ; Place les bits de direction du port B
.c863	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.c865	8d 03 dc	               sta  js_1dir
.c868	ad 02 dc	               lda  js_2dir        ; Place les bits de direction du port A
.c86b	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.c86d	8d 02 dc	               sta  js_2dir
.c870	68		               pla                 ; Récupère le registre a et
.c871	28		               plp                 ;   le registre de status.
.c872	60		               rts
.c873			js_scan
.c873	20 7a c8	               jsr  js_1scan       ; Scan la manette du port B.
.c876	20 31 c9	               jsr  js_2scan       ; Scan la manette du port A.
.c879	60		               rts
.c87a			js_1scan
.c87a	20 7a c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.c87d	ad 01 dc	               lda  js_1port       ; Lecture du port d'entrées
.c880	29 1f		               and  #$1f           ; Masque les bits 7, 6 et 5.
.c882	48		               pha                 ; Copie sur la pile.
.c883	49 1f		               eor  #$1f           ; Inverse tous les bits.
.c885	8d d6 cc	               sta  js_1status     ; Sauvegarde le status.
.c888	68		               pla                 ; Récupère une copie originale.
.c889	c9 00		               cmp  #$00           ; Si les bits sont tous 0
.c88b	d0 03		               bne  p1scan         ; On scan le port
.c88d	4c 20 c9	               jmp  port1_out
.c890	49 1f		p1scan         eor  #$1f
.c892	18		               clc
.c893	4a		js_1b0         lsr                 ; On decale js_2 bit 0 dans C
.c894	90 14		               bcc  js_1b1         ; Est-ce vers le haut (U)
.c896	48		               pha                 ; On stock la valeur
.c897	ee 3f cc	               inc  js_1flag
.c89a	ad 3b cc	               lda  js_1pixy       ; Oui!
.c89d	38		               sec                 ; On place la Carry a 1
.c89e	e9 02		               sbc  #js_yoffset    ; On reduit
.c8a0	c9 f0		               cmp  #$f0
.c8a2	90 02		               bcc  sto1ym
.c8a4	a9 00		               lda  #$00
.c8a6	8d 3b cc	sto1ym         sta  js_1pixy       ; le y
.c8a9	68		               pla                 ; On recupere la valeur
.c8aa	4a		js_1b1         lsr                 ; On decale js_2 bit 0 dans C
.c8ab	90 14		               bcc  js_1b2         ; Est-ce vers le bas (D)
.c8ad	48		               pha                 ; On stack la valeur
.c8ae	ee 3f cc	               inc  js_1flag
.c8b1	ad 3b cc	               lda  js_1pixy       ; Oui!
.c8b4	18		               clc                 ; On place la Carry a 0
.c8b5	69 02		               adc  #js_yoffset    ; On augmente
.c8b7	c9 c7		               cmp  #199
.c8b9	90 02		               bcc  sto1yp
.c8bb	a9 c7		               lda  #199
.c8bd	8d 3b cc	sto1yp         sta  js_1pixy       ; le y
.c8c0	68		               pla                 ; On recupere la valeur
.c8c1	4a		js_1b2         lsr                 ; On decale js_1 bit 0 dans C
.c8c2	90 20		               bcc  js_1b3         ; Est-ce vers la gauche (L)
.c8c4	48		               pha                 ; On stack la valeur
.c8c5	ee 3f cc	               inc  js_1flag
.c8c8	ad 39 cc	               lda  js_1pixx       ; Oui!
.c8cb	0d 3a cc	               ora  js_1pixx+1
.c8ce	f0 13		               beq  js_1b2out
.c8d0	38		               sec                 ; On place la Carry a 1
.c8d1	ad 39 cc	               lda  js_1pixx       ; Oui!
.c8d4	e9 02		               sbc  #js_xoffset    ; On diminue
.c8d6	8d 39 cc	               sta  js_1pixx       ; le X
.c8d9	b0 08		               bcs  js_1b2out      ; de offset
.c8db	ad 3a cc	               lda  js_1pixx+1
.c8de	f0 03		               beq  js_1b2out
.c8e0	ce 3a cc	               dec  js_1pixx+1     ; sur 16 bits
.c8e3	68		js_1b2out      pla                 ; On recupere la valeur
.c8e4	4a		js_1b3         lsr                 ; On decale js_1 bit 0 dans C
.c8e5	90 22		               bcc  js_1b4         ; Est-ce vers la droite (R)
.c8e7	48		               pha                 ; On stack la valeur
.c8e8	ee 3f cc	               inc  js_1flag
.c8eb	ad 3a cc	               lda  js_1pixx+1
.c8ee	f0 0a		               beq  incj1x
.c8f0	ad 39 cc	               lda  js_1pixx
.c8f3	c9 3c		               cmp  #$40-4
.c8f5	30 03		               bmi  incj1x
.c8f7	4c 08 c9	               jmp  js_1b3out
.c8fa	18		incj1x         clc                 ; On place la Carry a 0
.c8fb	ad 39 cc	               lda  js_1pixx
.c8fe	69 02		               adc  #js_xoffset    ; On augmente
.c900	8d 39 cc	               sta  js_1pixx       ; le X
.c903	90 03		               bcc  js_1b3out      ; de offset
.c905	ee 3a cc	               inc  js_1pixx+1     ; sur 16 bits
.c908	68		js_1b3out      pla                 ; On recupere la valeur
.c909	4a		js_1b4         lsr                 ; Est-ce le bbouton fire (F)
.c90a	90 14		               bcc  port1_out      ; Oui!
.c90c	ee 3f cc	               inc  js_1flag
.c90f	ee 3e cc	               inc  js_1fire       ; On augmente le nombre de tir
.c912	a2 01		js_1wait       ldx  #$01
.c914	a0 ff		               ldy  #$ff
.c916	c8		js_1rel        iny
.c917	ad 01 dc	               lda  js_1port
.c91a	49 ff		               eor  #$ff
.c91c	29 10		               and  #$10
.c91e	d0 f6		               bne  js_1rel        ;  des boutons
.c920	ad 3f cc	port1_out      lda  js_1flag
.c923	f0 08		               beq  out
.c925	20 17 ca	               jsr  js_1correct
.c928	a9 00		               lda  #0
.c92a	8d 3f cc	               sta  js_1flag
.c92d	20 a9 c0	out            jsr  popreg         ; Récupère tous les registres.
.c930	60		               rts
.c931			js_2scan
.c931	20 7a c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.c934	ad 00 dc	port2          lda  js_2port       ; Lecture du port d'entrées.
.c937	29 1f		               and  #$1f           ; Masque les bits 7, 6 et 5.
.c939	49 1f		               eor  #$1f           ; Inverse les bits 4 à 0.
.c93b	8d d7 cc	               sta  js_2status     ; Sauvegarde le status en mémoire.
.c93e	c9 00		               cmp  #$00           ; Si des interrupteurs sont appuyé ...
.c940	d0 03		               bne  p2scan         ; ... on cherche lesquels.
.c942	4c e8 c9	               jmp  port2_out      ; Si non on sort.
.c945	ee 4a cc	p2scan         inc  js_2flag       ; On incrémente le témoin de changement.
.c948	18		               clc                 ; On met le Carry à 0.
.c949	4a		js_2b0         lsr                 ; On decale js_2 bit 0 dans Carry.
.c94a	48		               pha                 ; On stack la valeur décalée.
.c94b	90 10		               bcc  js_2b1         ; Si pas BTNUP, on vérifi le prochain.
.c94d	ad 46 cc	               lda  js_2pixy       ; Oui!
.c950	38		               sec                 ; On place la Carry a 1.
.c951	e9 02		               sbc  #js_yoffset    ; Déplace le crs vrs le haut de offset.
.c953	c9 f0		               cmp  #$f0           ; Si posy plus basse que Viewport NTSC ...
.c955	90 02		               bcc  sto2ym         ; Si le crs dépasse le bas du viewport ...
.c957	a9 00		               lda  #$00           ; On le replace en haut.
.c959	8d 46 cc	sto2ym         sta  js_2pixy       ; Sauvegarde La pos. pixel de Y.
.c95c	68		               pla                 ; On recupere la valeur du scan décalé.
.c95d	4a		js_2b1         lsr                 ; On decale js_2 bit 0 dans Carry.
.c95e	48		               pha                 ; On stack la valeur décalée.
.c95f	90 10		               bcc  js_2b2         ; Si pas BTN-BAS, on vérifi le prochain.
.c961	ad 46 cc	               lda  js_2pixy       ; Oui!
.c964	18		               clc                 ; On place la Carry a 0.
.c965	69 02		               adc  #js_yoffset    ; Déplace le crs vrs le bas de offset.
.c967	c9 c7		               cmp  #199           ; Sommes nous dépassé le bas de l'écran?
.c969	90 02		               bcc  sto2yp         ; Non, on sauvegarde la position.
.c96b	a9 c7		               lda  #199           ; Oui,
.c96d	8d 46 cc	sto2yp         sta  js_2pixy       ; On bloque le Y à 199.
.c970	68		               pla                 ; On recupere la valeur du scan décalé.
.c971	4a		js_2b2         lsr                 ; On decale js_2 bit 0 dans C
.c972	48		               pha                 ; On stack la valeur décalée.
.c973	90 1b		               bcc  js_2b3         ; Est-ce le bouton gauche (L)
.c975	ad 44 cc	               lda  js_2pixx       ; Oui!
.c978	0d 45 cc	               ora  js_2pixx+1
.c97b	f0 13		               beq  js_2b2out
.c97d	38		               sec                 ; On place la Carry a 1
.c97e	ad 44 cc	               lda  js_2pixx       ; Oui!
.c981	e9 02		               sbc  #js_xoffset    ; On diminue
.c983	8d 44 cc	               sta  js_2pixx       ;  le X
.c986	b0 08		               bcs  js_2b2out      ; de offset
.c988	ad 45 cc	               lda  js_2pixx+1
.c98b	f0 03		               beq  js_2b2out
.c98d	ce 45 cc	               dec  js_2pixx+1     ; sur 16 bits
.c990			js_2b2out
.c990	4a		js_2b3         lsr                 ; On decale js_2 bit 0 dans C
.c991	48		               pha                 ; On stack la valeur décalée.
.c992	90 1e		               bcc  js_2b4         ; Est-ce vers la droite (R)
.c994	ad 45 cc	               lda  js_2pixx+1
.c997	f0 0a		               beq  incj2x
.c999	ad 44 cc	               lda  js_2pixx
.c99c	c9 3e		               cmp  #$40-js_xoffset
.c99e	30 03		               bmi  incj2x
.c9a0	4c b1 c9	               jmp  js_2b3out
.c9a3	18		incj2x         clc                 ; On place la Carry a 0
.c9a4	ad 44 cc	               lda  js_2pixx       ; Oui!
.c9a7	69 02		               adc  #js_xoffset    ; On augmente
.c9a9	8d 44 cc	               sta  js_2pixx       ;   le X
.c9ac	90 03		               bcc  js_2b3out      ; de offset
.c9ae	ee 45 cc	               inc  js_2pixx+1     ; sur 16 bits
.c9b1			js_2b3out
.c9b1	68		               pla                 ; On recupere la valeur du scan décalé.
.c9b2	4a		js_2b4         lsr                 ;Estce le bbouton fire (F)
.c9b3	90 33		               bcc  port2_out      ;Oui!
.c9b5	ee 49 cc	               inc  js_2fire       ; On augmente le nombre de tir
.c9b8	a9 01		               lda  #%00000001
.c9ba	8d 4e cc	               sta  js_2events
.c9bd	ad 44 cc	               lda  js_2pixx
.c9c0	8d 4b cc	               sta  js_2clickx
.c9c3	ad 45 cc	               lda  js_2pixx+1
.c9c6	8d 4c cc	               sta  js_2clickx+1
.c9c9	ad 46 cc	               lda  js_2pixy
.c9cc	8d 4d cc	               sta  js_2clicky
.c9cf	ad b0 cc	               lda  js_2val16a+1
.c9d2	49 40		               eor  #%01000000
.c9d4	8d b0 cc	               sta  js_2val16a+1
.c9d7	a2 00		js_2wait       ldx  #$00
.c9d9	a0 ff		               ldy  #$ff
.c9db	c8		js_2rel        iny
.c9dc	d0 01		               bne  sr1
.c9de	e8		               inx
.c9df	ad 00 dc	sr1            lda  js_2port
.c9e2	49 ff		               eor  #$ff
.c9e4	29 10		               and  #$10
.c9e6	d0 f3		               bne  js_2rel        ; On attend le relachement du bouton FEU.
.c9e8	ad 4a cc	port2_out      lda  js_2flag
.c9eb	f0 08		               beq  out
.c9ed	20 4c ca	               jsr  js_2correct
.c9f0	a9 00		               lda  #0
.c9f2	8d 4a cc	               sta  js_2flag
.c9f5	20 a9 c0	out            jsr  popreg         ; Récupère tous les registres.
.c9f8			js_corrector
.c9f8	08		               php
.c9f9	48		               pha
.c9fa	ad 3f cc	               lda  js_1flag
.c9fd	f0 08		               beq  check2
.c9ff	20 17 ca	               jsr  js_1correct
.ca02	a9 00		               lda  #0
.ca04	8d 3f cc	               sta  js_1flag
.ca07	ad 4a cc	check2         lda  js_2flag
.ca0a	f0 08		               beq  no_update
.ca0c	20 4c ca	               jsr  js_2correct
.ca0f	a9 00		               lda  #0
.ca11	8d 4a cc	               sta  js_2flag
.ca14	68		no_update      pla
.ca15	28		               plp
.ca16	60		               rts
.ca17			js_1correct
.ca17	08		               php
.ca18	48		               pha
.ca19	ad 39 cc	               lda  js_1pixx
.ca1c	8d 4a ca	               sta  vallsb
.ca1f	ad 3a cc	               lda  js_1pixx+1
.ca22	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.ca23	6e 4a ca	               ror  vallsb         ; Cnnnnnnn      On divise par 8 pc les
.ca26	4e 4a ca	               lsr  vallsb         ; 0Cnnnnnn      caracteres de 8 pixels
.ca29	4e 4a ca	               lsr  vallsb         ; 00Cnnnnn
.ca2c	ad 4a ca	               lda  vallsb         ; devient = %00100000 = 32
.ca2f	8d 3c cc	               sta  js_1x
.ca32	ad 3b cc	               lda  js_1pixy
.ca35	8d 4a ca	               sta  vallsb
.ca38	4e 4a ca	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.ca3b	4e 4a ca	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.ca3e	4e 4a ca	               lsr  vallsb         ; 00Cnnnnn
.ca41	ad 4a ca	               lda  vallsb         ; devient = %00100000 = 32
.ca44	8d 3d cc	               sta  js_1y
.ca47	68		               pla
.ca48	28		               plp
.ca49	60		               rts
>ca4a	00		vallsb          .byte     0
>ca4b	00		regx            .byte     0
.ca4c			js_2correct
.ca4c	08		               php
.ca4d	48		               pha
.ca4e	ad 44 cc	               lda  js_2pixx
.ca51	8d 7f ca	               sta  vallsb
.ca54	ad 45 cc	               lda  js_2pixx+1
.ca57	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.ca58	6e 7f ca	               ror  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.ca5b	4e 7f ca	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.ca5e	4e 7f ca	               lsr  vallsb         ; 00Cnnnnn
.ca61	ad 7f ca	               lda  vallsb         ; devient = %00100000 = 32
.ca64	8d 47 cc	               sta  js_2x
.ca67	ad 46 cc	               lda  js_2pixy
.ca6a	8d 7f ca	               sta  vallsb
.ca6d	4e 7f ca	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.ca70	4e 7f ca	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.ca73	4e 7f ca	               lsr  vallsb         ; 00Cnnnnn
.ca76	ad 7f ca	               lda  vallsb         ; devient = %00100000 = 32
.ca79	8d 48 cc	               sta  js_2y
.ca7c	68		               pla
.ca7d	28		               plp
.ca7e	60		               rts
>ca7f	00		vallsb          .byte     0
>ca80	00		regx            .byte     0
.ca81			js_showvals
.ca81	20 11 cb	               jsr  js_2showvals
.ca84	60		               rts
.ca85			js_1showvals
.ca85	20 7a c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.ca88	ad 3c cc	               lda  js_1x
.ca8b	20 98 c2	               jsr  atohex
.ca8e	ad 38 c2	               lda  a2hexstr+1
.ca91	8d 62 cc	               sta  js_1val8+19
.ca94	ad 39 c2	               lda  a2hexstr+2
.ca97	8d 63 cc	               sta  js_1val8+20
.ca9a	ad 39 cc	               lda  js_1pixx
.ca9d	20 98 c2	               jsr  atohex
.caa0	ad 38 c2	               lda  a2hexstr+1
.caa3	8d 81 cc	               sta  js_1val16+14
.caa6	ad 39 c2	               lda  a2hexstr+2
.caa9	8d 82 cc	               sta  js_1val16+15
.caac	ad 3a cc	               lda  js_1pixx+1
.caaf	20 98 c2	               jsr  atohex
.cab2	ad 38 c2	               lda  a2hexstr+1
.cab5	8d 7f cc	               sta  js_1val16+12
.cab8	ad 39 c2	               lda  a2hexstr+2
.cabb	8d 80 cc	               sta  js_1val16+13
.cabe	ad 3d cc	               lda  js_1y
.cac1	20 98 c2	               jsr  atohex
.cac4	ad 38 c2	               lda  a2hexstr+1
.cac7	8d 66 cc	               sta  js_1val8+23
.caca	ad 39 c2	               lda  a2hexstr+2
.cacd	8d 67 cc	               sta  js_1val8+24
.cad0	ad 3b cc	               lda  js_1pixy
.cad3	20 98 c2	               jsr  atohex
.cad6	ad 38 c2	               lda  a2hexstr+1
.cad9	8d 87 cc	               sta  js_1val16+20
.cadc	ad 39 c2	               lda  a2hexstr+2
.cadf	8d 88 cc	               sta  js_1val16+21
.cae2	a9 00		               lda  #0
.cae4	20 98 c2	               jsr  atohex
.cae7	ad 38 c2	               lda  a2hexstr+1
.caea	8d 85 cc	               sta  js_1val16+18
.caed	ad 39 c2	               lda  a2hexstr+2
.caf0	8d 86 cc	               sta  js_1val16+19
.caf3	ad 3e cc	               lda  js_1fire
.caf6	20 98 c2	               jsr  atohex
.caf9	ad 39 c2	               lda  a2hexstr+2
.cafc	8d 70 cc	               sta  js_1val8+33
.caff	a2 4f		               ldx  #<js_1val8
.cb01	a0 cc		               ldy  #>js_1val8
.cb03	20 36 c5	               jsr  putscxy
.cb06	a2 73		               ldx  #<js_1val16
.cb08	a0 cc		               ldy  #>js_1val16
.cb0a	20 36 c5	               jsr  putscxy
.cb0d	20 a9 c0	out            jsr  popreg         ; Récupère tous les registres.
.cb10	60		               rts
.cb11			js_2showvals
.cb11	20 7a c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.cb14	ad 47 cc	               lda  js_2x
.cb17	20 98 c2	               jsr  atohex
.cb1a	ad 37 c2	               lda  a2hexstr
.cb1d	8d 9e cc	               sta  js_2val8+19
.cb20	ad 38 c2	               lda  a2hexstr+1
.cb23	8d 9f cc	               sta  js_2val8+20
.cb26	ad 4b cc	               lda  js_2clickx
.cb29	20 98 c2	               jsr  atohex
.cb2c	ad 37 c2	               lda  a2hexstr
.cb2f	8d cc cc	               sta  js_2val16+14
.cb32	ad 38 c2	               lda  a2hexstr+1
.cb35	8d cd cc	               sta  js_2val16+15
.cb38	ad 4c cc	               lda  js_2clickx+1
.cb3b	20 98 c2	               jsr  atohex
.cb3e	ad 37 c2	               lda  a2hexstr
.cb41	8d ca cc	               sta  js_2val16+12
.cb44	ad 38 c2	               lda  a2hexstr+1
.cb47	8d cb cc	               sta  js_2val16+13
.cb4a	ad 48 cc	               lda  js_2y
.cb4d	20 98 c2	               jsr  atohex
.cb50	ad 37 c2	               lda  a2hexstr
.cb53	8d a2 cc	               sta  js_2val8+23
.cb56	ad 38 c2	               lda  a2hexstr+1
.cb59	8d a3 cc	               sta  js_2val8+24
.cb5c	ad 4d cc	               lda  js_2clicky
.cb5f	20 98 c2	               jsr  atohex
.cb62	ad 37 c2	               lda  a2hexstr
.cb65	8d d2 cc	               sta  js_2val16+20
.cb68	ad 38 c2	               lda  a2hexstr+1
.cb6b	8d d3 cc	               sta  js_2val16+21
.cb6e	a9 00		               lda  #0
.cb70	20 98 c2	               jsr  atohex
.cb73	ad 37 c2	               lda  a2hexstr
.cb76	8d d0 cc	               sta  js_2val16+18
.cb79	ad 38 c2	               lda  a2hexstr+1
.cb7c	8d d1 cc	               sta  js_2val16+19
.cb7f	ad 49 cc	               lda  js_2fire
.cb82	20 98 c2	               jsr  atohex
.cb85	ad 38 c2	               lda  a2hexstr+1
.cb88	8d ac cc	               sta  js_2val8+33
.cb8b	a2 8b		               ldx  #<js_2val8
.cb8d	a0 cc		               ldy  #>js_2val8
.cb8f	20 36 c5	               jsr  putscxy
.cb92	a2 af		               ldx  #<js_2val16a
.cb94	a0 cc		               ldy  #>js_2val16a
.cb96	20 36 c5	               jsr  putscxy
.cb99	a2 be		               ldx  #<js_2val16
.cb9b	a0 cc		               ldy  #>js_2val16
.cb9d	20 36 c5	               jsr  putscxy
.cba0	20 a9 c0	out            jsr  popreg         ; Récupère tous les registres.
.cba3	60		               rts
.cba4			js_updatecurs
.cba4	20 7a c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.cba7	ad 47 cc	running        lda  js_2x
.cbaa	cd 33 cc	               cmp  js_x
.cbad	f0 06		               beq     chky
.cbaf	8d 33 cc	               sta  js_x
.cbb2	ee 06 cc	               inc     flag
.cbb5	ad 48 cc	chky           lda  js_2y
.cbb8	cd 34 cc	               cmp  js_y
.cbbb	f0 06		               beq     chkflag
.cbbd	8d 34 cc	               sta  js_y
.cbc0	ee 06 cc	               inc     flag
.cbc3	ad 06 cc	chkflag        lda  flag
.cbc6	f0 1e		               beq     showit
.cbc8	ae 35 cc	               ldx  js_oldx
.cbcb	ac 36 cc	               ldy  js_oldy
.cbce	20 07 cc	               jsr  js_eoraddrxy
.cbd1	ae 33 cc	               ldx  js_x
.cbd4	ac 34 cc	               ldy  js_y
.cbd7	20 07 cc	               jsr  js_eoraddrxy
.cbda	ad 33 cc	               lda  js_x
.cbdd	8d 35 cc	               sta  js_oldx
.cbe0	ad 34 cc	               lda  js_y
.cbe3	8d 36 cc	               sta  js_oldy
.cbe6	a9 00		showit         lda  #0
.cbe8	8d 06 cc	               sta  flag
.cbeb	8d 26 c2	               sta  addr1
.cbee	a9 04		               lda  #$04
.cbf0	8d 27 c2	               sta  addr1+1
.cbf3	ae 33 cc	               ldx  js_x
.cbf6	ac 34 cc	               ldy  js_y
.cbf9	20 d7 c1	               jsr  xy2addr
.cbfc	ac 28 c2	               ldy  addr2
.cbff	ae 29 c2	               ldx  addr2+1
.cc02	20 a9 c0	out            jsr  popreg         ; Récupère tous les registres.
.cc05	60		               rts
>cc06	00		flag            .byte   0
.cc07			js_eoraddrxy
.cc07	20 0c c0	               jsr  pushall
.cc0a	20 b9 c1	               jsr  savezp2
.cc0d	a9 04		               lda  #$04
.cc0f	8d 27 c2	               sta  addr1+1
.cc12	a9 00		               lda  #0
.cc14	8d 26 c2	               sta  addr1
.cc17	20 d7 c1	               jsr  xy2addr
.cc1a	ac 28 c2	               ldy  addr2
.cc1d	84 fd		               sty  zpage2
.cc1f	ae 29 c2	               ldx  addr2+1
.cc22	86 fe		               stx  zpage2+1
.cc24	a0 00		               ldy  #0
.cc26	b1 fd		               lda  (zpage2),y
.cc28	49 40		               eor     #%01000000
.cc2a	91 fd		               sta  (zpage2),y
.cc2c	20 c8 c1	               jsr  restzp2
.cc2f	20 47 c0	               jsr  popall
.cc32	60		               rts
>cc33	00		js_x           .byte   0
>cc34	00		js_y           .byte   0
>cc35	ff		js_oldx        .byte   $ff
>cc36	ff		js_oldy        .byte   $ff
>cc37	00		js_oldcar      .byte   0
>cc38	00		js_oldcol      .byte   0
>cc39	00 00		js_1pixx       .word   0
>cc3b	00		js_1pixy       .byte   0
>cc3c	00		js_1x          .byte   0
>cc3d	00		js_1y          .byte   0
>cc3e	00		js_1fire       .byte   0
>cc3f	00		js_1flag       .byte   0
>cc40	00 00		js_1clickx     .word   0
>cc42	00		js_1clicky     .byte   0
>cc43	00		js_1events     .byte   0
>cc44	00 00		js_2pixx       .word   0
>cc46	00		js_2pixy       .byte   0
>cc47	00		js_2x          .byte   0
>cc48	00		js_2y          .byte   0
>cc49	00		js_2fire       .byte   0
>cc4a	00		js_2flag       .byte   0
>cc4b	00 00		js_2clickx     .word   0
>cc4d	00		js_2clicky     .byte   0
>cc4e	00		js_2events     .byte   0
=$03			js_txtcol      =       vcyan
=$00			js_txtbak      =       bkcol0
>cc4f	03 00 04 05	js_1val8       .byte     js_txtcol,js_txtbak,4,5
>cc53	50 0f 12 14	               .null     "Port 1 (x,y):($00,$00) Fire:(0)"
>cc57	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>cc67	30 29 20 46 09 12 05 3a 28 30 29 00
>cc73	03 00 0b 07	js_1val16      .byte     js_txtcol,js_txtbak,11,7
>cc77	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>cc7b	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>cc8b	03 00 04 0a	js_2val8       .byte     js_txtcol,js_txtbak,4,10
>cc8f	43 01 12 50	               .null     "CarPos (x,y):($00,$00) Fire:(0)"
>cc93	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>cca3	30 29 20 46 09 12 05 3a 28 30 29 00
>ccaf	01 00 04 0c	js_2val16a     .byte     vblanc,js_txtbak,4,12
>ccb3	43 0c 09 03	               .null     "Click pos."
>ccb7	0b 20 10 0f 13 2e 00
>ccbe	03 00 10 0c	js_2val16      .byte     js_txtcol,js_txtbak,16,12
>ccc2	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>ccc6	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>ccd6	00		js_1status     .byte 0
>ccd7	00		js_2status     .byte 0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-spriteman.asm

.ccd8			sprt_init
.ccd8	20 0c c0	                jsr     push
.ccdb	ad 2d cd	                lda     sprt_ptr
.ccde	20 0f ce	                jsr     sprt_loadptr
.cce1	20 9b c1	                jsr     savezp1
.cce4	20 b9 c1	                jsr     savezp2
.cce7	ad 15 d0	                lda     vic+$15 ; enable sprite 2
.ccea	09 04		                ora     #%00000100
.ccec	8d 15 d0	                sta     vic+$15
.ccef	a9 0d		                lda     #$0d
.ccf1	8d fa 07	                sta     $7fa
.ccf4	ad eb d0	                lda     sprt_ptr0
.ccf7	85 fb		                sta     zpage1
.ccf9	ad ec d0	                lda     sprt_ptr0+1
.ccfc	85 fc		                sta     zpage1+1
.ccfe	a9 40		                lda     #$40
.cd00	85 fd		                sta     zpage2
.cd02	a9 03		                lda     #$03
.cd04	85 fe		                sta     zpage2+1
.cd06	a0 41		                ldy     #65
.cd08	b1 fb		                lda     (zpage1),y      ; sprite y offset
.cd0a	8d 52 ce	                sta     sprt_yoffset
.cd0d	88		                dey
.cd0e	b1 fb		                lda     (zpage1),y      ; sprite x offset
.cd10	8d 51 ce	                sta     sprt_xoffset
.cd13	88		                dey
.cd14	b1 fb		                lda     (zpage1),y      ; sprite color
.cd16	8d 29 d0	                sta     $d029
.cd19	88		                dey
.cd1a	a0 3e		                ldy     #62
.cd1c	b1 fb		nextbyte        lda     (zpage1),y
.cd1e	91 fd		                sta     (zpage2),y
.cd20	88		                dey
.cd21	d0 f9		                bne     nextbyte
.cd23	20 aa c1	                jsr     restzp1
.cd26	20 c8 c1	                jsr     restzp2
.cd29	20 47 c0	                jsr     pop
.cd2c	60		                rts
>cd2d	01		sprt_ptr        .byte   $01
.cd2e			sprt_calcpos
.cd2e	20 0c c0	                jsr     push
.cd31	a9 00		                lda     #0
.cd33	8d 54 ce	                sta     sprt_x+1
.cd36	8d 56 ce	                sta     sprt_y+1
.cd39	ad 45 cc	                lda     js_2pixx+1
.cd3c	18		                clc
.cd3d	2a		                rol
.cd3e	2a		                rol
.cd3f	8d 54 ce	                sta     sprt_x+1
.cd42	ad 44 cc	                lda     js_2pixx
.cd45	18		                clc
.cd46	6d 51 ce	                adc     sprt_xoffset
.cd49	8d 53 ce	                sta     sprt_x
.cd4c	90 08		                bcc     norepx
.cd4e	ad 54 ce	                lda     sprt_x+1
.cd51	09 04		                ora     #$04
.cd53	8d 54 ce	                sta     sprt_x+1
.cd56	ad 46 cc	norepx          lda     js_2pixy
.cd59	18		                clc
.cd5a	6d 52 ce	                adc     sprt_yoffset
.cd5d	8d 55 ce	                sta     sprt_y
.cd60	20 47 c0	                jsr     pop
.cd63	60		                rts
.cd64			sprt_move
.cd64	20 0c c0	                jsr     push
.cd67	20 2e cd	                jsr     sprt_calcpos
.cd6a	ad 53 ce	                lda     sprt_x
.cd6d	8d 04 d0	                sta     vic+$04
.cd70	ad 54 ce	                lda     sprt_x+1
.cd73	8d 10 d0	                sta     vic+$10
.cd76	ad 55 ce	                lda     sprt_y
.cd79	8d 05 d0	                sta     vic+$05
.cd7c	20 83 cd	                jsr     sprt_showpos
.cd7f	20 47 c0	                jsr     pop
.cd82	60		                rts
.cd83			sprt_showpos
.cd83	20 0c c0	                jsr     push
.cd86	ad 53 ce	                lda     sprt_x
.cd89	20 98 c2	                jsr  atohex
.cd8c	ad 37 c2	                lda     a2hexstr
.cd8f	8d 1a d1	                sta     sprite_pos+26
.cd92	ad 38 c2	                lda     a2hexstr+1
.cd95	8d 1b d1	                sta     sprite_pos+27
.cd98	ad 54 ce	                lda     sprt_x+1
.cd9b	20 98 c2	                jsr  atohex
.cd9e	ad 37 c2	                lda     a2hexstr
.cda1	8d 18 d1	                sta     sprite_pos+24
.cda4	ad 38 c2	                lda     a2hexstr+1
.cda7	8d 19 d1	                sta     sprite_pos+25
.cdaa	ad 55 ce	                lda     sprt_y
.cdad	20 98 c2	                jsr  atohex
.cdb0	ad 37 c2	                lda     a2hexstr
.cdb3	8d 20 d1	                sta     sprite_pos+32
.cdb6	ad 38 c2	                lda     a2hexstr+1
.cdb9	8d 21 d1	                sta     sprite_pos+33
.cdbc	a9 00		                lda     #0
.cdbe	20 98 c2	                jsr  atohex
.cdc1	ad 37 c2	                lda     a2hexstr
.cdc4	8d 1e d1	                sta     sprite_pos+30
.cdc7	ad 38 c2	                lda     a2hexstr+1
.cdca	8d 1f d1	                sta     sprite_pos+31
.cdcd	a2 00		                ldx     #<sprite_pos
.cdcf	a0 d1		                ldy     #>sprite_pos
.cdd1	20 36 c5	                jsr     putscxy
.cdd4	20 47 c0	                jsr     pop
.cdd7	60		                rts
.cdd8			sprt_loadptr2
.cdd8	20 0c c0	                jsr     push
.cddb	aa		                tax
.cddc	8e 2d cd	                stx     sprt_ptr
.cddf	ad ec d0	                lda     sprt_ptr0+1
.cde2	8d 0e ce	                sta     calcbuff+1
.cde5	ad eb d0	                lda     sprt_ptr0
.cde8	8d 0d ce	                sta     calcbuff
.cdeb	e0 00		                cpx     #0
.cded	f0 11		                beq     addrok
.cdef	ad 0d ce	                lda     calcbuff
.cdf2	18		nextx           clc
.cdf3	69 42		                adc     #66
.cdf5	90 03		                bcc     nocarry
.cdf7	ee 0e ce	                inc     calcbuff+1
.cdfa	8d 0d ce	nocarry         sta     calcbuff
.cdfd	ca		                dex
.cdfe	d0 f2		                bne     nextx
.ce00	ac 0e ce	addrok          ldy     calcbuff+1
.ce03	ae 0d ce	                ldx     calcbuff
.ce06	20 29 ce	                jsr     sprt_setimage
.ce09	20 47 c0	                jsr     pop
.ce0c	60		                rts
>ce0d	00 00		calcbuff        .word   $0
.ce0f			sprt_loadptr
.ce0f	20 0c c0	                jsr     push
.ce12	ad 2d cd	                lda     sprt_ptr
.ce15	18		                clc
.ce16	2a		                rol
.ce17	a8		                tay
.ce18	b9 eb d0	                lda     sprt_ptr0,y
.ce1b	aa		                tax
.ce1c	b9 ec d0	                lda     sprt_ptr0+1,y
.ce1f	a8		                tay
.ce20	20 29 ce	                jsr     sprt_setimage
.ce23	20 47 c0	                jsr     pop
.ce26	60		                rts
>ce27	00 00		calcbuff        .word   $0
.ce29			sprt_setimage
.ce29	20 0c c0	                jsr     push
.ce2c	20 9b c1	                jsr     savezp1
.ce2f	20 b9 c1	                jsr     savezp2
.ce32	84 fc		                sty     zpage1+1
.ce34	86 fb		                stx     zpage1
.ce36	a0 ce		                ldy     #>sprt_image
.ce38	84 fe		                sty     zpage2+1
.ce3a	a0 57		                ldy     #<sprt_image
.ce3c	84 fd		                sty     zpage2
.ce3e	a0 42		                ldy     #66
.ce40	b1 fb		nextbyte        lda     (zpage1),y
.ce42	91 fd		                sta     (zpage2),y
.ce44	88		                dey
.ce45	d0 f9		                bne     nextbyte
.ce47	20 c8 c1	                jsr     restzp2
.ce4a	20 aa c1	                jsr     restzp1
.ce4d	20 47 c0	                jsr     pop
.ce50	60		                rts
>ce51	00		sprt_xoffset    .byte   $00
>ce52	00		sprt_yoffset    .byte   $00
>ce53	00 00		sprt_x          .word   $0000
>ce55	00 00		sprt_y          .word   $0000
>ce57			sprt_image      .fill 66
>ce99	00 00 00 00	sprt_crxair     .byte $00, $00, $00, $00, $00, $00 ; 6
>ce9d	00 00
>ce9f	00 66 00 00	                .byte $00, $66, $00, $00, $3c, $00 ; 12
>cea3	3c 00
>cea5	00 18 00 00	                .byte $00, $18, $00, $00, $00, $00 ; 18
>cea9	00 00
>ceab	00 00 00 00	                .byte $00, $00, $00, $00, $18, $00 ; 24
>ceaf	18 00
>ceb1	80 00 01 c0	                .byte $80, $00, $01, $c0, $18, $03 ; 30
>ceb5	18 03
>ceb7	66 66 66 c0	                .byte $66, $66, $66, $c0, $18, $03 ; 36
>cebb	18 03
>cebd	80 00 01 00	                .byte $80, $00, $01, $00, $18, $00 ; 42
>cec1	18 00
>cec3	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 48
>cec7	00 00
>cec9	00 18 00 00	                .byte $00, $18, $00, $00, $3c, $00 ; 54
>cecd	3c 00
>cecf	00 66 00 00	                .byte $00, $66, $00, $00, $00, $00 ; 60
>ced3	00 00
>ced5	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>ced9	0c 28
>cedb	80 00 00 e0	sprt_mouse      .byte $80, $00, $00, $e0, $00, $00 ; 6
>cedf	00 00
>cee1	b8 00 00 ce	                .byte $b8, $00, $00, $ce, $00, $00 ; 12
>cee5	00 00
>cee7	83 80 00 c0	                .byte $83, $80, $00, $c0, $e0, $00 ; 18
>ceeb	e0 00
>ceed	80 18 00 c0	                .byte $80, $18, $00, $c0, $3c, $00 ; 24
>cef1	3c 00
>cef3	80 e0 00 c0	                .byte $80, $e0, $00, $c0, $60, $00 ; 30
>cef7	60 00
>cef9	98 30 00 fc	                .byte $98, $30, $00, $fc, $18, $00 ; 36
>cefd	18 00
>ceff	c6 0c 00 03	                .byte $c6, $0c, $00, $03, $06, $00 ; 42
>cf03	06 00
>cf05	01 9c 00 00	                .byte $01, $9c, $00, $00, $f0, $00 ; 48
>cf09	f0 00
>cf0b	00 40 00 00	                .byte $00, $40, $00, $00, $00, $00 ; 54
>cf0f	00 00
>cf11	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 60
>cf15	00 00
>cf17	00 00 00 01	                .byte $00, $00, $00, $01, $18, $31 ; 66, X,X,X color, xoffset, yoffset
>cf1b	18 31
>cf1d	00 7c 00 01	sprt_pointer    .byte $00, $7c, $00, $01, $83, $00 ; 6
>cf21	83 00
>cf23	06 10 c0 08	                .byte $06, $10, $c0, $08, $00, $30 ; 12
>cf27	00 30
>cf29	12 10 88 20	                .byte $12, $10, $88, $20, $00, $08 ; 18
>cf2d	00 08
>cf2f	40 ba 04 40	                .byte $40, $ba, $04, $40, $6c, $04 ; 24
>cf33	6c 04
>cf35	80 c6 02 aa	                .byte $80, $c6, $02, $aa, $82, $aa ; 30
>cf39	82 aa
>cf3b	80 c6 02 40	                .byte $80, $c6, $02, $40, $6c, $04 ; 36
>cf3f	6c 04
>cf41	40 ba 04 20	                .byte $40, $ba, $04, $20, $00, $08 ; 42
>cf45	00 08
>cf47	12 10 90 08	                .byte $12, $10, $90, $08, $00, $20 ; 48
>cf4b	00 20
>cf4d	06 10 c0 01	                .byte $06, $10, $c0, $01, $83, $00 ; 54
>cf51	83 00
>cf53	00 7c 00 00	                .byte $00, $7c, $00, $00, $00, $00 ; 60
>cf57	00 00
>cf59	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>cf5d	0c 28
>cf5f	55 55 55 aa	sprt_pointer2   .byte $55, $55, $55, $aa, $aa, $aa ; 6
>cf63	aa aa
>cf65	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 12
>cf69	aa aa
>cf6b	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 18
>cf6f	aa aa
>cf71	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 24
>cf75	00 2a
>cf77	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 30
>cf7b	00 2a
>cf7d	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 36
>cf81	00 2a
>cf83	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 42
>cf87	00 2a
>cf89	54 00 55 aa	                .byte $54, $00, $55, $aa, $aa, $aa ; 48
>cf8d	aa aa
>cf8f	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 54
>cf93	aa aa
>cf95	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 60
>cf99	aa aa
>cf9b	55 55 55 01	                .byte $55, $55, $55, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>cf9f	0c 28
>cfa1	06 00 00 0f	sprt_hand       .byte $06, $00, $00, $0f, $00, $00 ; 6
>cfa5	00 00
>cfa7	19 80 00 10	                .byte $19, $80, $00, $10, $80, $00 ; 12
>cfab	80 00
>cfad	19 80 00 16	                .byte $19, $80, $00, $16, $b1, $8c ; 18
>cfb1	b1 8c
>cfb3	10 ca 52 10	                .byte $10, $ca, $52, $10, $84, $21 ; 24
>cfb7	84 21
>cfb9	10 84 21 30	                .byte $10, $84, $21, $30, $84, $21 ; 30
>cfbd	84 21
>cfbf	50 84 21 90	                .byte $50, $84, $21, $90, $84, $21 ; 36
>cfc3	84 21
>cfc5	90 00 01 90	                .byte $90, $00, $01, $90, $00, $01 ; 42
>cfc9	00 01
>cfcb	90 7f c1 90	                .byte $90, $7f, $c1, $90, $00, $01 ; 48
>cfcf	00 01
>cfd1	40 ff e2 40	                .byte $40, $ff, $e2, $40, $00, $02 ; 54
>cfd5	00 02
>cfd7	3c 00 04 02	                .byte $3c, $00, $04, $02, $00, $08 ; 60
>cfdb	00 08
>cfdd	03 ff f8 01	                .byte $03, $ff, $f8, $01, $12, $31 ; 66, X,X,X color, xoffset, yoffset
>cfe1	12 31
>cfe3	00 3e 00 01	sprt_ultraman   .byte $00, $3e, $00, $01, $c1, $c0 ; 6
>cfe7	c1 c0
>cfe9	0e 3e 30 08	                .byte $0e, $3e, $30, $08, $41, $08 ; 12
>cfed	41 08
>cfef	10 1c 04 10	                .byte $10, $1c, $04, $10, $22, $04 ; 18
>cff3	22 04
>cff5	24 1c 12 23	                .byte $24, $1c, $12, $23, $00, $62 ; 24
>cff9	00 62
>cffb	20 08 02 47	                .byte $20, $08, $02, $47, $c1, $f1 ; 30
>cfff	c1 f1
>d001	6a aa ab 47	                .byte $6a, $aa, $ab, $47, $c9, $f1 ; 36
>d005	c9 f1
>d007	20 08 02 20	                .byte $20, $08, $02, $20, $14, $02 ; 42
>d00b	14 02
>d00d	20 00 02 10	                .byte $20, $00, $02, $10, $00, $04 ; 48
>d011	00 04
>d013	10 7f 04 08	                .byte $10, $7f, $04, $08, $00, $08 ; 54
>d017	00 08
>d019	06 3e 30 01	                .byte $06, $3e, $30, $01, $c1, $c0 ; 60
>d01d	c1 c0
>d01f	00 3e 00 01	                .byte $00, $3e, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>d023	0c 28
>d025	00 1c 00 00	sprt_male       .byte $00, $1c, $00, $00, $3e, $00 ; 6
>d029	3e 00
>d02b	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>d02f	3e 00
>d031	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>d035	08 00
>d037	00 ff 80 00	                .byte $00, $ff, $80, $00, $ff, $80 ; 24
>d03b	ff 80
>d03d	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>d041	9c 80
>d043	00 88 80 00	                .byte $00, $88, $80, $00, $be, $80 ; 36
>d047	be 80
>d049	00 be 80 01	                .byte $00, $be, $80, $01, $9c, $c0 ; 42
>d04d	9c c0
>d04f	01 94 c0 00	                .byte $01, $94, $c0, $00, $14, $00 ; 48
>d053	14 00
>d055	00 14 00 00	                .byte $00, $14, $00, $00, $14, $00 ; 54
>d059	14 00
>d05b	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>d05f	77 00
>d061	00 77 00 01	                .byte $00, $77 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>d065	0c 2f
>d067	00 3c 00 00	sprt_robot      .byte $00, $3c, $00, $00, $24, $00 ; 6
>d06b	24 00
>d06d	00 66 18 00	                .byte $00, $66, $18, $00, $66, $38 ; 12
>d071	66 38
>d073	00 24 38 00	                .byte $00, $24, $38, $00, $3c, $10 ; 18
>d077	3c 10
>d079	00 18 10 00	                .byte $00, $18, $10, $00, $18, $10 ; 24
>d07d	18 10
>d07f	0f ff f0 08	                .byte $0f, $ff, $f0, $08, $7e, $00 ; 30
>d083	7e 00
>d085	08 7e 00 08	                .byte $08, $7e, $00, $08, $18, $00 ; 36
>d089	18 00
>d08b	1c 18 00 1c	                .byte $1c, $18, $00, $1c, $18, $00 ; 42
>d08f	18 00
>d091	18 3c 00 00	                .byte $18, $3c, $00, $00, $3c, $00 ; 48
>d095	3c 00
>d097	00 24 00 00	                .byte $00, $24, $00, $00, $24, $00 ; 54
>d09b	24 00
>d09d	00 24 00 03	                .byte $00, $24, $00, $03, $e7, $c0 ; 60
>d0a1	e7 c0
>d0a3	03 e7 c0 01	                .byte $03, $e7, $c0, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>d0a7	0c 28
>d0a9	00 1c 00 00	sprt_femme      .byte $00, $1c, $00, $00, $3e, $00 ; 6
>d0ad	3e 00
>d0af	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>d0b3	3e 00
>d0b5	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>d0b9	08 00
>d0bb	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 24
>d0bf	ff 80
>d0c1	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>d0c5	9c 80
>d0c7	00 88 80 00	                .byte $00, $88, $80, $00, $9c, $80 ; 36
>d0cb	9c 80
>d0cd	00 be 80 01	                .byte $00, $be, $80, $01, $be, $c0 ; 42
>d0d1	be c0
>d0d3	01 be c0 00	                .byte $01, $be, $c0, $00, $7f, $00 ; 48
>d0d7	7f 00
>d0d9	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 54
>d0dd	ff 80
>d0df	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>d0e3	77 00
>d0e5	00 55 00 01	                .byte $00, $55 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>d0e9	0c 2f
>d0eb	57 ce		sprt_ptr0       .word  sprt_image + (0*66)
>d0ed	99 ce		sprt_ptr1       .word  sprt_image + (1*66)
>d0ef	db ce		sprt_ptr2       .word  sprt_image + (2*66)
>d0f1	1d cf		sprt_ptr3       .word  sprt_image + (3*66)
>d0f3	5f cf		sprt_ptr4       .word  sprt_image + (4*66)
>d0f5	a1 cf		sprt_ptr5       .word  sprt_image + (5*66)
>d0f7	e3 cf		sprt_ptr6       .word  sprt_image + (6*66)
>d0f9	25 d0		sprt_ptr7       .word  sprt_image + (7*66)
>d0fb	67 d0		sprt_ptr8       .word  sprt_image + (8*66)
>d0fd	a9 d0		sprt_ptr9       .word  sprt_image + (9*66)
>d0ff	ff		testbyte        .byte 255
=$07			sprt_txtcol     =       vjaune
=$00			sprt_txtbak     =       bkcol0
=$01			sprt_color      =       vwhite
>d100	07 00 04 0e	sprite_pos      .byte   sprt_txtcol,sprt_txtbak,4,14
>d104	53 10 12 09	                .text       "Sprite pos. (x,y):($0000,$0000)"
>d108	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>d118	30 30 30 30 2c 24 30 30 30 30 29
>d123	00		                .byte   0

;******  Return to file: j2tester.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L j2tester.txt -o j2tester.prg j2tester.asm
; Tue Jun 24 08:49:05 2025

;Offset	;Hex		;Source

;******  Processing input file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0000	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0004	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0008	20 54 08	libtart        jsr  main           ; Programme principale doit s'appeler "main"

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande PRINT du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart     jmp   main           ; Le programme principale doit s'appeler "main"

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: j2tester.asm

.0854			main
.0854	20 94 13	               jsr  scrmaninit
.0857	4c 57 08	ici            jmp  ici
.085a	20 b3 0a	               jsr  js_init
.085d	a9 80		               lda  #$80
.085f	8d 80 13	               sta  curcol
.0862	a9 00		               lda  #0
.0864	8d 21 d0	               sta  vicback0col
.0867	a9 02		               lda  #vrouge
.0869	8d 81 13	               sta  brdcol
.086c	8d 20 d0	               sta  vicbordcol
.086f	20 24 14	               jsr  cls
.0872	a9 20		               lda  #$20
.0874	09 00		               ora  #%00000000
.0876	a0 04		               ldy  #$04
.0878	a2 04		               ldx  #$04
.087a	20 e0 c0	               jsr  memfill
.087d	a9 00		               lda  #$00
.087f	a0 d8		               ldy  #$d8
.0881	20 e0 c0	               jsr  memfill
.0884	20 2a 0f	               jsr  sprt_init
.0887	20 81 14	goagain        jsr  setinverse
.088a	20 72 c0	               jsr  pushreg
.088d	a2 72		               ldx  #<bstring1
.088f	a0 09		               ldy  #>bstring1
.0891	20 2e 15	               jsr  putscxy
.0894	20 a1 c0	               jsr  popreg
.0897	20 72 c0	               jsr  pushreg
.089a	a2 9f		               ldx  #<bstring2
.089c	a0 09		               ldy  #>bstring2
.089e	20 2e 15	               jsr  putscxy
.08a1	20 a1 c0	               jsr  popreg
.08a4	20 72 c0	               jsr  pushreg
.08a7	a2 cc		               ldx  #<bstring3
.08a9	a0 09		               ldy  #>bstring3
.08ab	20 2e 15	               jsr  putscxy
.08ae	20 a1 c0	               jsr  popreg
.08b1	20 72 c0	               jsr  pushreg
.08b4	a2 f9		               ldx  #<bstring4
.08b6	a0 09		               ldy  #>bstring4
.08b8	20 2e 15	               jsr  putscxy
.08bb	20 a1 c0	               jsr  popreg
.08be	20 8b 14	               jsr  clrinverse
.08c1	20 72 c0	               jsr  pushreg
.08c4	a2 10		               ldx  #<js_status1
.08c6	a0 0a		               ldy  #>js_status1
.08c8	20 2e 15	               jsr  putscxy
.08cb	20 a1 c0	               jsr  popreg
.08ce	20 72 c0	               jsr  pushreg
.08d1	a2 28		               ldx  #<js_status2
.08d3	a0 0a		               ldy  #>js_status2
.08d5	20 2e 15	               jsr  putscxy
.08d8	20 a1 c0	               jsr  popreg
.08db	20 72 c0	               jsr  pushreg
.08de	a2 3f		               ldx  #<js_status3
.08e0	a0 0a		               ldy  #>js_status3
.08e2	20 2e 15	               jsr  putscxy
.08e5	20 a1 c0	               jsr  popreg
.08e8	20 72 c0	               jsr  pushreg
.08eb	a2 58		               ldx  #<js_status4
.08ed	a0 0a		               ldy  #>js_status4
.08ef	20 2e 15	               jsr  putscxy
.08f2	20 a1 c0	               jsr  popreg
.08f5	20 72 c0	               jsr  pushreg
.08f8	a2 71		               ldx  #<js_status5
.08fa	a0 0a		               ldy  #>js_status5
.08fc	20 2e 15	               jsr  putscxy
.08ff	20 a1 c0	               jsr  popreg
.0902	20 72 c0	               jsr  pushreg
.0905	a2 87		               ldx  #<js_status6
.0907	a0 0a		               ldy  #>js_status6
.0909	20 2e 15	               jsr  putscxy
.090c	20 a1 c0	               jsr  popreg
.090f	20 72 c0	               jsr  pushreg
.0912	a2 00		               ldx  #$00
.0914	a0 0f		               ldy  #$0f
.0916	20 f1 14	               jsr  gotoxy
.0919	20 a1 c0	               jsr  popreg
.091c	a9 07		               lda  #vjaune
.091e	20 5d 15	               jsr  setcurcol
.0921	a2 00		               ldx  #$00
.0923	20 72 15	               jsr  setbkcol
.0926	20 c8 0a	looper         jsr  js_scan        ; ****** Un prob avec j2scan.
.0929	4c 29 09	INFINIE        jmp  INFINIE          ; Un branchement infinie.
.092c	20 d3 0c	               jsr  js_showvals
.092f	20 f6 0d	               jsr  js_updatecurs
.0932	20 bc 0f	               jsr  sprt_move
.0935	a2 16		               ldx  #$16
.0937	a0 11		               ldy  #$11
.0939	20 f1 14	               jsr  gotoxy
.093c	a9 03		               lda  #3
.093e	20 5d 15	               jsr  setcurcol
.0941	ad 9b 0e	               lda  js_2fire
.0944	f0 e0		               beq  looper
.0946	ad 9a 0e	               lda  js_2y
.0949	c9 04		               cmp  #$04
.094b	d0 1d		               bne  nochange
.094d	ad 99 0e	               lda  js_2x
.0950	c9 0b		               cmp  #$0b
.0952	30 16		               bmi  nochange
.0954	c9 1d		               cmp  #$1d
.0956	10 12		               bpl  nochange
.0958	ee 85 0f	               inc  sprt_ptr
.095b	ad 85 0f	               lda  sprt_ptr
.095e	c9 09		               cmp  #9
.0960	90 02		               bcc  drawsptr
.0962	a9 00		               lda  #$00
.0964	8d 85 0f	drawsptr       sta  sprt_ptr
.0967	20 2a 0f	               jsr  sprt_init
.096a	4c 26 09	nochange       jmp  looper
.096d	20 e1 ff	out            jsr  kstop
.0970	60		               rts
>0971	00		onebyte        .byte     0
>0972	0e 40 00 00	bstring1       .byte     vbleu1,bkcol1,0,0
>0976	20 20 20 20	               .text     "      Visualisation du port jeu #2      "
>097a	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>098a	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>099a	20 20 20 20
>099e	00		               .byte     0
>099f	0b 80 00 01	bstring2       .byte     vgris,bkcol2,0,1
>09a3	20 50 12 0f	               .text     " Programme assembleur pour 6510 sur C64 "
>09a7	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>09b7	12 20 10 0f 15 12 20 36 35 31 30 20 13 15 12 20
>09c7	43 36 34 20
>09cb	00		               .byte     0
>09cc	0a c0 00 02	bstring3       .byte     vrose,bkcol3,0,2
>09d0	20 20 20 20	               .text     "     par Daniel Lafrance (2024-06) C    "
>09d4	20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06 12
>09e4	01 0e 03 05 20 28 32 30 32 34 2d 30 36 29 20 43
>09f4	20 20 20 20
>09f8	00		               .byte     0
>09f9	07 c0 0b 04	bstring4       .byte     vjaune,bkcol3,11,4
>09fd	20 43 08 01	               .text     " Changer pointeur "
>0a01	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>0a0f	00		               .byte     0
>0a10	0d 00 13 16	js_status1     .byte     vvert1,bkcol0,19,22
>0a14	20 20 20 15	               .text     "   up <----1> haut "
>0a18	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>0a27	00		               .byte     0
>0a28	0e 00 13 15	js_status2     .byte     vbleu1,bkcol0,19,21
>0a2c	20 04 0f 17	               .text     " down <---2-> bas "
>0a30	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>0a3e	00		               .byte     0
>0a3f	0a 00 13 14	js_status3     .byte     vrose,bkcol0,19,20
>0a43	20 0c 05 06	               .text     " left <--4--> gauche"
>0a47	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>0a57	00		               .byte     0
>0a58	07 00 13 13	js_status4     .byte     vjaune,bkcol0,19,19
>0a5c	12 09 07 08	               .text     "right <-8---> droite"
>0a60	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a70	00		               .byte     0
>0a71	01 00 13 12	js_status5     .byte     vblanc,bkcol0,19,18
>0a75	20 46 09 12	               .text     " Fire <1----> Feu"
>0a79	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>0a86	00		               .byte     0
>0a87	03 00 01 17	js_status6     .byte     vcyan,bkcol0,1,23
>0a8b	2b 2d 3e 20	               .text     "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a8f	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a9f	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0aaf	24 31 46
>0ab2	00		               .byte     0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-joystick-mc.asm

=$dc00			js_2port       =    $dc00          ; CIA #1 Port data A
=$dc01			js_1port       =    $dc01          ; CIA #1 Port data B
=$dc02			js_2dir        =    $dc02          ; CIA #1 Port de direction A
=$dc03			js_1dir        =    $dc03          ; CIA #1 port de direction B
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.0ab3			js_init
.0ab3	08		               php                 ; Sauvegarde le registre de
.0ab4	48		               pha                 ;   status et le registre a.
.0ab5	ad 03 dc	               lda  js_1dir        ; Place les bits de direction du port B
.0ab8	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.0aba	8d 03 dc	               sta  js_1dir
.0abd	ad 02 dc	               lda  js_2dir        ; Place les bits de direction du port A
.0ac0	29 e0		               and  #$e0           ; 4-0 en entrées (0).
.0ac2	8d 02 dc	               sta  js_2dir
.0ac5	68		               pla                 ; Récupère le registre a et
.0ac6	28		               plp                 ;   le registre de status.
.0ac7	60		               rts
.0ac8			js_scan
.0ac8	20 cf 0a	               jsr  js_1scan       ; Scan la manette du port B.
.0acb	20 87 0b	               jsr  js_2scan       ; Scan la manette du port A.
.0ace	60		               rts
.0acf			js_1scan
.0acf	20 72 c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.0ad2	ad 01 dc	               lda  js_1port       ; Lecture du port d'entrées
.0ad5	29 1f		               and  #$1f           ; Masque les bits 7, 6 et 5.
.0ad7	48		               pha                 ; Copie sur la pile.
.0ad8	49 1f		               eor  #$1f           ; Inverse tous les bits.
.0ada	8d 28 0f	               sta  js_1status     ; Sauvegarde le status.
.0add	68		               pla                 ; Récupère une copie originale.
.0ade	c9 00		               cmp  #$00           ; Si les bits sont tous 0
.0ae0	d0 03		               bne  p1scan         ; On scan le port
.0ae2	4c 76 0b	               jmp  port1_out
.0ae5	49 1f		p1scan         eor  #$1f
.0ae7	18		               clc
.0ae8	4a		js_1b0         lsr                 ; On decale js_2 bit 0 dans C
.0ae9	90 14		               bcc  js_1b1         ; Est-ce vers le haut (U)
.0aeb	48		               pha                 ; On stock la valeur
.0aec	ee 91 0e	               inc  js_1flag
.0aef	ad 8d 0e	               lda  js_1pixy       ; Oui!
.0af2	38		               sec                 ; On place la Carry a 1
.0af3	e9 02		               sbc  #js_yoffset    ; On reduit
.0af5	c9 f0		               cmp  #$f0
.0af7	90 02		               bcc  sto1ym
.0af9	a9 00		               lda  #$00
.0afb	8d 8d 0e	sto1ym         sta  js_1pixy       ; le y
.0afe	68		               pla                 ; On recupere la valeur
.0aff	4a		js_1b1         lsr                 ; On decale js_2 bit 0 dans C
.0b00	90 14		               bcc  js_1b2         ; Est-ce vers le bas (D)
.0b02	48		               pha                 ; On stack la valeur
.0b03	ee 91 0e	               inc  js_1flag
.0b06	ad 8d 0e	               lda  js_1pixy       ; Oui!
.0b09	18		               clc                 ; On place la Carry a 0
.0b0a	69 02		               adc  #js_yoffset    ; On augmente
.0b0c	c9 c7		               cmp  #199
.0b0e	90 02		               bcc  sto1yp
.0b10	a9 c7		               lda  #199
.0b12	8d 8d 0e	sto1yp         sta  js_1pixy       ; le y
.0b15	68		               pla                 ; On recupere la valeur
.0b16	4a		js_1b2         lsr                 ; On decale js_1 bit 0 dans C
.0b17	90 20		               bcc  js_1b3         ; Est-ce vers la gauche (L)
.0b19	48		               pha                 ; On stack la valeur
.0b1a	ee 91 0e	               inc  js_1flag
.0b1d	ad 8b 0e	               lda  js_1pixx       ; Oui!
.0b20	0d 8c 0e	               ora  js_1pixx+1
.0b23	f0 13		               beq  js_1b2out
.0b25	38		               sec                 ; On place la Carry a 1
.0b26	ad 8b 0e	               lda  js_1pixx       ; Oui!
.0b29	e9 02		               sbc  #js_xoffset    ; On diminue
.0b2b	8d 8b 0e	               sta  js_1pixx       ; le X
.0b2e	b0 08		               bcs  js_1b2out      ; de offset
.0b30	ad 8c 0e	               lda  js_1pixx+1
.0b33	f0 03		               beq  js_1b2out
.0b35	ce 8c 0e	               dec  js_1pixx+1     ; sur 16 bits
.0b38	68		js_1b2out      pla                 ; On recupere la valeur
.0b39	4a		js_1b3         lsr                 ; On decale js_1 bit 0 dans C
.0b3a	90 22		               bcc  js_1b4         ; Est-ce vers la droite (R)
.0b3c	48		               pha                 ; On stack la valeur
.0b3d	ee 91 0e	               inc  js_1flag
.0b40	ad 8c 0e	               lda  js_1pixx+1
.0b43	f0 0a		               beq  incj1x
.0b45	ad 8b 0e	               lda  js_1pixx
.0b48	c9 3c		               cmp  #$40-4
.0b4a	30 03		               bmi  incj1x
.0b4c	4c 5d 0b	               jmp  js_1b3out
.0b4f	18		incj1x         clc                 ; On place la Carry a 0
.0b50	ad 8b 0e	               lda  js_1pixx
.0b53	69 02		               adc  #js_xoffset    ; On augmente
.0b55	8d 8b 0e	               sta  js_1pixx       ; le X
.0b58	90 03		               bcc  js_1b3out      ; de offset
.0b5a	ee 8c 0e	               inc  js_1pixx+1     ; sur 16 bits
.0b5d	68		js_1b3out      pla                 ; On recupere la valeur
.0b5e	68		js_1b4         pla                 ; On recupere la valeur
.0b5f	4a		               lsr                 ; Est-ce le bbouton fire (F)
.0b60	90 14		               bcc  port1_out      ; Oui!
.0b62	ee 91 0e	               inc  js_1flag
.0b65	ee 90 0e	               inc  js_1fire       ; On augmente le nombre de tir
.0b68	a2 01		js_1wait       ldx  #$01
.0b6a	a0 ff		               ldy  #$ff
.0b6c	c8		js_1rel        iny
.0b6d	ad 01 dc	               lda  js_1port
.0b70	49 ff		               eor  #$ff
.0b72	29 10		               and  #$10
.0b74	d0 f6		               bne  js_1rel        ; On attend le relachement des boutons.
.0b76	ad 91 0e	port1_out      lda  js_1flag
.0b79	f0 08		               beq  out
.0b7b	20 69 0c	               jsr  js_1correct
.0b7e	a9 00		               lda  #0
.0b80	8d 91 0e	               sta  js_1flag
.0b83	20 a1 c0	out            jsr  popreg         ; Récupère tous les registres.
.0b86	60		               rts
.0b87			js_2scan
.0b87	20 72 c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.0b8a	ad 00 dc	port2          lda  js_2port       ; Lecture du port d'entrées.
.0b8d	29 1f		               and  #$1f           ; Masque les bits 7, 6 et 5.
.0b8f	49 1f		               eor  #$1f           ; Inverse les bits 4 à 0.
.0b91	8d 29 0f	               sta  js_2status     ; Sauvegarde le status en mémoire.
.0b94	c9 00		               cmp  #$00           ; Si des interrupteurs sont appuyé ...
.0b96	d0 03		               bne  p2scan         ; ... on cherche lesquels.
.0b98	4c 3f 0c	               jmp  port2_out      ; Si non on sort.
.0b9b	ee 9c 0e	p2scan         inc  js_2flag       ; On incrémente le témoin de changement.
.0b9e	18		               clc                 ; On met le Carry à 0.
.0b9f	4a		js_2b0         lsr                 ; On decale js_2 bit 0 dans Carry.
.0ba0	48		               pha                 ; On stack la valeur décalée.
.0ba1	90 0f		               bcc  js_2b1         ; Si pas BTNUP, on vérifi le prochain.
.0ba3	ad 98 0e	               lda  js_2pixy       ; Oui!
.0ba6	38		               sec                 ; On place la Carry a 1.
.0ba7	e9 02		               sbc  #js_yoffset    ; Déplace le crs vrs le haut de offset.
.0ba9	c9 f0		               cmp  #$f0           ; Si posy plus basse que Viewport NTSC ...
.0bab	90 02		               bcc  sto2ym         ; Si le crs dépasse le bas du viewport ...
.0bad	a9 00		               lda  #$00           ; On le replace en haut.
.0baf	8d 98 0e	sto2ym         sta  js_2pixy       ; Sauvegarde La pos. pixel de Y.
.0bb2	68		js_2b1         pla                 ; On recupere la valeur du scan décalé.
.0bb3	4a		               lsr                 ; On decale js_2 bit 0 dans Carry.
.0bb4	48		               pha                 ; On stack la valeur décalée.
.0bb5	90 0f		               bcc  js_2b2         ; Si pas BTN-BAS, on vérifi le prochain.
.0bb7	ad 98 0e	               lda  js_2pixy       ; Oui!
.0bba	18		               clc                 ; On place la Carry a 0.
.0bbb	69 02		               adc  #js_yoffset    ; Déplace le crs vrs le bas de offset.
.0bbd	c9 c7		               cmp  #199           ; Sommes nous dépassé le bas de l'écran?
.0bbf	90 02		               bcc  sto2yp         ; Non, on sauvegarde la position.
.0bc1	a9 c7		               lda  #199           ; Oui,
.0bc3	8d 98 0e	sto2yp         sta  js_2pixy       ; On bloque le Y à 199.
.0bc6	68		js_2b2         pla                 ; On recupere la valeur du scan décalé.
.0bc7	4a		               lsr                 ; On decale js_2 bit 0 dans C
.0bc8	48		               pha                 ; On stack la valeur décalée.
.0bc9	90 1b		               bcc  js_2b3         ; Est-ce le bouton gauche (L)
.0bcb	ad 96 0e	               lda  js_2pixx       ; Oui!
.0bce	0d 97 0e	               ora  js_2pixx+1
.0bd1	f0 13		               beq  js_2b2out
.0bd3	38		               sec                 ; On place la Carry a 1
.0bd4	ad 96 0e	               lda  js_2pixx       ; Oui!
.0bd7	e9 02		               sbc  #js_xoffset    ; On diminue
.0bd9	8d 96 0e	               sta  js_2pixx       ;  le X
.0bdc	b0 08		               bcs  js_2b2out      ; de offset
.0bde	ad 97 0e	               lda  js_2pixx+1
.0be1	f0 03		               beq  js_2b2out
.0be3	ce 97 0e	               dec  js_2pixx+1     ; sur 16 bits
.0be6			js_2b2out
.0be6	68		js_2b3         pla                 ; On recupere la valeur du scan décalé.
.0be7	4a		               lsr                 ; On decale js_2 bit 0 dans C
.0be8	48		               pha                 ; On stack la valeur décalée.
.0be9	90 1d		               bcc  js_2b4         ; Est-ce vers la droite (R)
.0beb	ad 97 0e	               lda  js_2pixx+1
.0bee	f0 0a		               beq  incj2x
.0bf0	ad 96 0e	               lda  js_2pixx
.0bf3	c9 3e		               cmp  #$40-js_xoffset
.0bf5	30 03		               bmi  incj2x
.0bf7	4c 08 0c	               jmp  js_2b3out
.0bfa	18		incj2x         clc                 ; On place la Carry a 0
.0bfb	ad 96 0e	               lda  js_2pixx       ; Oui!
.0bfe	69 02		               adc  #js_xoffset    ; On augmente
.0c00	8d 96 0e	               sta  js_2pixx       ;   le X
.0c03	90 03		               bcc  js_2b3out      ; de offset
.0c05	ee 97 0e	               inc  js_2pixx+1     ; sur 16 bits
.0c08			js_2b3out
.0c08	68		js_2b4         pla                 ; On recupere la valeur du scan décalé.
.0c09	4a		               lsr                 ;Estce le bbouton fire (F)
.0c0a	90 33		               bcc  port2_out      ;Oui!
.0c0c	ee 9b 0e	               inc  js_2fire       ; On augmente le nombre de tir
.0c0f	a9 01		               lda  #%00000001
.0c11	8d a0 0e	               sta  js_2events
.0c14	ad 96 0e	               lda  js_2pixx
.0c17	8d 9d 0e	               sta  js_2clickx
.0c1a	ad 97 0e	               lda  js_2pixx+1
.0c1d	8d 9e 0e	               sta  js_2clickx+1
.0c20	ad 98 0e	               lda  js_2pixy
.0c23	8d 9f 0e	               sta  js_2clicky
.0c26	ad 02 0f	               lda  js_2val16a+1
.0c29	49 40		               eor  #%01000000
.0c2b	8d 02 0f	               sta  js_2val16a+1
.0c2e	a2 00		js_2wait       ldx  #$00
.0c30	a0 ff		               ldy  #$ff
.0c32	c8		js_2rel        iny
.0c33	d0 01		               bne  sr1
.0c35	e8		               inx
.0c36	ad 00 dc	sr1            lda  js_2port
.0c39	49 ff		               eor  #$ff
.0c3b	29 10		               and  #$10
.0c3d	d0 f3		               bne  js_2rel        ; On attend le relachement du bouton FEU.
.0c3f			port2_out
.0c3f	20 9e 0c	               jsr  js_2correct
.0c42	a9 00		               lda  #0
.0c44	8d 9c 0e	               sta  js_2flag
.0c47	20 a1 c0	out            jsr  popreg         ; Récupère tous les registres.
.0c4a			js_corrector
.0c4a	08		               php
.0c4b	48		               pha
.0c4c	ad 91 0e	               lda  js_1flag
.0c4f	f0 08		               beq  check2
.0c51	20 69 0c	               jsr  js_1correct
.0c54	a9 00		               lda  #0
.0c56	8d 91 0e	               sta  js_1flag
.0c59	ad 9c 0e	check2         lda  js_2flag
.0c5c	f0 08		               beq  no_update
.0c5e	20 9e 0c	               jsr  js_2correct
.0c61	a9 00		               lda  #0
.0c63	8d 9c 0e	               sta  js_2flag
.0c66	68		no_update      pla
.0c67	28		               plp
.0c68	60		               rts
.0c69			js_1correct
.0c69	08		               php
.0c6a	48		               pha
.0c6b	ad 8b 0e	               lda  js_1pixx
.0c6e	8d 9c 0c	               sta  vallsb
.0c71	ad 8c 0e	               lda  js_1pixx+1
.0c74	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.0c75	6e 9c 0c	               ror  vallsb         ; Cnnnnnnn      On divise par 8 pc les
.0c78	4e 9c 0c	               lsr  vallsb         ; 0Cnnnnnn      caracteres de 8 pixels
.0c7b	4e 9c 0c	               lsr  vallsb         ; 00Cnnnnn
.0c7e	ad 9c 0c	               lda  vallsb         ; devient = %00100000 = 32
.0c81	8d 8e 0e	               sta  js_1x
.0c84	ad 8d 0e	               lda  js_1pixy
.0c87	8d 9c 0c	               sta  vallsb
.0c8a	4e 9c 0c	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.0c8d	4e 9c 0c	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.0c90	4e 9c 0c	               lsr  vallsb         ; 00Cnnnnn
.0c93	ad 9c 0c	               lda  vallsb         ; devient = %00100000 = 32
.0c96	8d 8f 0e	               sta  js_1y
.0c99	68		               pla
.0c9a	28		               plp
.0c9b	60		               rts
>0c9c	00		vallsb          .byte     0
>0c9d	00		regx            .byte     0
.0c9e			js_2correct
.0c9e	08		               php
.0c9f	48		               pha
.0ca0	ad 96 0e	               lda  js_2pixx
.0ca3	8d d1 0c	               sta  vallsb
.0ca6	ad 97 0e	               lda  js_2pixx+1
.0ca9	6a		               ror                 ; ex = %0000000100000001 = 257 pixel
.0caa	6e d1 0c	               ror  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.0cad	4e d1 0c	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.0cb0	4e d1 0c	               lsr  vallsb         ; 00Cnnnnn
.0cb3	ad d1 0c	               lda  vallsb         ; devient = %00100000 = 32
.0cb6	8d 99 0e	               sta  js_2x
.0cb9	ad 98 0e	               lda  js_2pixy
.0cbc	8d d1 0c	               sta  vallsb
.0cbf	4e d1 0c	               lsr  vallsb         ; Cnnnnnnn     On divise par 8 pc les
.0cc2	4e d1 0c	               lsr  vallsb         ; 0Cnnnnnn     caracteres de 8 pixels
.0cc5	4e d1 0c	               lsr  vallsb         ; 00Cnnnnn
.0cc8	ad d1 0c	               lda  vallsb         ; devient = %00100000 = 32
.0ccb	8d 9a 0e	               sta  js_2y
.0cce	68		               pla
.0ccf	28		               plp
.0cd0	60		               rts
>0cd1	00		vallsb          .byte     0
>0cd2	00		regx            .byte     0
.0cd3			js_showvals
.0cd3	20 63 0d	               jsr  js_2showvals
.0cd6	60		               rts
.0cd7			js_1showvals
.0cd7	20 72 c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.0cda	ad 8e 0e	               lda  js_1x
.0cdd	20 90 c2	               jsr  atohex
.0ce0	ad 30 c2	               lda  a2hexstr+1
.0ce3	8d b4 0e	               sta  js_1val8+19
.0ce6	ad 31 c2	               lda  a2hexstr+2
.0ce9	8d b5 0e	               sta  js_1val8+20
.0cec	ad 8b 0e	               lda  js_1pixx
.0cef	20 90 c2	               jsr  atohex
.0cf2	ad 30 c2	               lda  a2hexstr+1
.0cf5	8d d3 0e	               sta  js_1val16+14
.0cf8	ad 31 c2	               lda  a2hexstr+2
.0cfb	8d d4 0e	               sta  js_1val16+15
.0cfe	ad 8c 0e	               lda  js_1pixx+1
.0d01	20 90 c2	               jsr  atohex
.0d04	ad 30 c2	               lda  a2hexstr+1
.0d07	8d d1 0e	               sta  js_1val16+12
.0d0a	ad 31 c2	               lda  a2hexstr+2
.0d0d	8d d2 0e	               sta  js_1val16+13
.0d10	ad 8f 0e	               lda  js_1y
.0d13	20 90 c2	               jsr  atohex
.0d16	ad 30 c2	               lda  a2hexstr+1
.0d19	8d b8 0e	               sta  js_1val8+23
.0d1c	ad 31 c2	               lda  a2hexstr+2
.0d1f	8d b9 0e	               sta  js_1val8+24
.0d22	ad 8d 0e	               lda  js_1pixy
.0d25	20 90 c2	               jsr  atohex
.0d28	ad 30 c2	               lda  a2hexstr+1
.0d2b	8d d9 0e	               sta  js_1val16+20
.0d2e	ad 31 c2	               lda  a2hexstr+2
.0d31	8d da 0e	               sta  js_1val16+21
.0d34	a9 00		               lda  #0
.0d36	20 90 c2	               jsr  atohex
.0d39	ad 30 c2	               lda  a2hexstr+1
.0d3c	8d d7 0e	               sta  js_1val16+18
.0d3f	ad 31 c2	               lda  a2hexstr+2
.0d42	8d d8 0e	               sta  js_1val16+19
.0d45	ad 90 0e	               lda  js_1fire
.0d48	20 90 c2	               jsr  atohex
.0d4b	ad 31 c2	               lda  a2hexstr+2
.0d4e	8d c2 0e	               sta  js_1val8+33
.0d51	a2 a1		               ldx  #<js_1val8
.0d53	a0 0e		               ldy  #>js_1val8
.0d55	20 2e 15	               jsr  putscxy
.0d58	a2 c5		               ldx  #<js_1val16
.0d5a	a0 0e		               ldy  #>js_1val16
.0d5c	20 2e 15	               jsr  putscxy
.0d5f	20 a1 c0	out            jsr  popreg         ; Récupère tous les registres.
.0d62	60		               rts
.0d63			js_2showvals
.0d63	20 72 c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.0d66	ad 99 0e	               lda  js_2x
.0d69	20 90 c2	               jsr  atohex
.0d6c	ad 2f c2	               lda  a2hexstr
.0d6f	8d f0 0e	               sta  js_2val8+19
.0d72	ad 30 c2	               lda  a2hexstr+1
.0d75	8d f1 0e	               sta  js_2val8+20
.0d78	ad 9d 0e	               lda  js_2clickx
.0d7b	20 90 c2	               jsr  atohex
.0d7e	ad 2f c2	               lda  a2hexstr
.0d81	8d 1e 0f	               sta  js_2val16+14
.0d84	ad 30 c2	               lda  a2hexstr+1
.0d87	8d 1f 0f	               sta  js_2val16+15
.0d8a	ad 9e 0e	               lda  js_2clickx+1
.0d8d	20 90 c2	               jsr  atohex
.0d90	ad 2f c2	               lda  a2hexstr
.0d93	8d 1c 0f	               sta  js_2val16+12
.0d96	ad 30 c2	               lda  a2hexstr+1
.0d99	8d 1d 0f	               sta  js_2val16+13
.0d9c	ad 9a 0e	               lda  js_2y
.0d9f	20 90 c2	               jsr  atohex
.0da2	ad 2f c2	               lda  a2hexstr
.0da5	8d f4 0e	               sta  js_2val8+23
.0da8	ad 30 c2	               lda  a2hexstr+1
.0dab	8d f5 0e	               sta  js_2val8+24
.0dae	ad 9f 0e	               lda  js_2clicky
.0db1	20 90 c2	               jsr  atohex
.0db4	ad 2f c2	               lda  a2hexstr
.0db7	8d 24 0f	               sta  js_2val16+20
.0dba	ad 30 c2	               lda  a2hexstr+1
.0dbd	8d 25 0f	               sta  js_2val16+21
.0dc0	a9 00		               lda  #0
.0dc2	20 90 c2	               jsr  atohex
.0dc5	ad 2f c2	               lda  a2hexstr
.0dc8	8d 22 0f	               sta  js_2val16+18
.0dcb	ad 30 c2	               lda  a2hexstr+1
.0dce	8d 23 0f	               sta  js_2val16+19
.0dd1	ad 9b 0e	               lda  js_2fire
.0dd4	20 90 c2	               jsr  atohex
.0dd7	ad 30 c2	               lda  a2hexstr+1
.0dda	8d fe 0e	               sta  js_2val8+33
.0ddd	a2 dd		               ldx  #<js_2val8
.0ddf	a0 0e		               ldy  #>js_2val8
.0de1	20 2e 15	               jsr  putscxy
.0de4	a2 01		               ldx  #<js_2val16a
.0de6	a0 0f		               ldy  #>js_2val16a
.0de8	20 2e 15	               jsr  putscxy
.0deb	a2 10		               ldx  #<js_2val16
.0ded	a0 0f		               ldy  #>js_2val16
.0def	20 2e 15	               jsr  putscxy
.0df2	20 a1 c0	out            jsr  popreg         ; Récupère tous les registres.
.0df5	60		               rts
.0df6			js_updatecurs
.0df6	20 72 c0	               jsr  pushreg        ; Sauvegarde tous les registres.
.0df9	ad 99 0e	running        lda  js_2x
.0dfc	cd 85 0e	               cmp  js_x
.0dff	f0 06		               beq     chky
.0e01	8d 85 0e	               sta  js_x
.0e04	ee 58 0e	               inc     flag
.0e07	ad 9a 0e	chky           lda  js_2y
.0e0a	cd 86 0e	               cmp  js_y
.0e0d	f0 06		               beq     chkflag
.0e0f	8d 86 0e	               sta  js_y
.0e12	ee 58 0e	               inc     flag
.0e15	ad 58 0e	chkflag        lda  flag
.0e18	f0 1e		               beq     showit
.0e1a	ae 87 0e	               ldx  js_oldx
.0e1d	ac 88 0e	               ldy  js_oldy
.0e20	20 59 0e	               jsr  js_eoraddrxy
.0e23	ae 85 0e	               ldx  js_x
.0e26	ac 86 0e	               ldy  js_y
.0e29	20 59 0e	               jsr  js_eoraddrxy
.0e2c	ad 85 0e	               lda  js_x
.0e2f	8d 87 0e	               sta  js_oldx
.0e32	ad 86 0e	               lda  js_y
.0e35	8d 88 0e	               sta  js_oldy
.0e38	a9 00		showit         lda  #0
.0e3a	8d 58 0e	               sta  flag
.0e3d	8d 1e c2	               sta  addr1
.0e40	a9 04		               lda  #$04
.0e42	8d 1f c2	               sta  addr1+1
.0e45	ae 85 0e	               ldx  js_x
.0e48	ac 86 0e	               ldy  js_y
.0e4b	20 cf c1	               jsr  xy2addr
.0e4e	ac 20 c2	               ldy  addr2
.0e51	ae 21 c2	               ldx  addr2+1
.0e54	20 a1 c0	out            jsr  popreg         ; Récupère tous les registres.
.0e57	60		               rts
>0e58	00		flag            .byte   0
.0e59			js_eoraddrxy
.0e59	20 04 c0	               jsr  pushall
.0e5c	20 b1 c1	               jsr  savezp2
.0e5f	a9 04		               lda  #$04
.0e61	8d 1f c2	               sta  addr1+1
.0e64	a9 00		               lda  #0
.0e66	8d 1e c2	               sta  addr1
.0e69	20 cf c1	               jsr  xy2addr
.0e6c	ac 20 c2	               ldy  addr2
.0e6f	84 fd		               sty  zpage2
.0e71	ae 21 c2	               ldx  addr2+1
.0e74	86 fe		               stx  zpage2+1
.0e76	a0 00		               ldy  #0
.0e78	b1 fd		               lda  (zpage2),y
.0e7a	49 40		               eor     #%01000000
.0e7c	91 fd		               sta  (zpage2),y
.0e7e	20 c0 c1	               jsr  restzp2
.0e81	20 3f c0	               jsr  popall
.0e84	60		               rts
>0e85	00		js_x           .byte   0
>0e86	00		js_y           .byte   0
>0e87	ff		js_oldx        .byte   $ff
>0e88	ff		js_oldy        .byte   $ff
>0e89	00		js_oldcar      .byte   0
>0e8a	00		js_oldcol      .byte   0
>0e8b	00 00		js_1pixx       .word   0
>0e8d	00		js_1pixy       .byte   0
>0e8e	00		js_1x          .byte   0
>0e8f	00		js_1y          .byte   0
>0e90	00		js_1fire       .byte   0
>0e91	00		js_1flag       .byte   0
>0e92	00 00		js_1clickx     .word   0
>0e94	00		js_1clicky     .byte   0
>0e95	00		js_1events     .byte   0
>0e96	00 00		js_2pixx       .word   0
>0e98	00		js_2pixy       .byte   0
>0e99	00		js_2x          .byte   0
>0e9a	00		js_2y          .byte   0
>0e9b	00		js_2fire       .byte   0
>0e9c	00		js_2flag       .byte   0
>0e9d	00 00		js_2clickx     .word   0
>0e9f	00		js_2clicky     .byte   0
>0ea0	00		js_2events     .byte   0
=$03			js_txtcol      =       vcyan
=$00			js_txtbak      =       bkcol0
>0ea1	03 00 04 05	js_1val8       .byte     js_txtcol,js_txtbak,4,5
>0ea5	50 0f 12 14	               .null     "Port 1 (x,y):($00,$00) Fire:(0)"
>0ea9	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>0eb9	30 29 20 46 09 12 05 3a 28 30 29 00
>0ec5	03 00 0b 07	js_1val16      .byte     js_txtcol,js_txtbak,11,7
>0ec9	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>0ecd	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>0edd	03 00 04 0a	js_2val8       .byte     js_txtcol,js_txtbak,4,10
>0ee1	43 01 12 50	               .null     "CarPos (x,y):($00,$00) Fire:(0)"
>0ee5	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>0ef5	30 29 20 46 09 12 05 3a 28 30 29 00
>0f01	01 00 04 0c	js_2val16a     .byte     vblanc,js_txtbak,4,12
>0f05	43 0c 09 03	               .null     "Click pos."
>0f09	0b 20 10 0f 13 2e 00
>0f10	03 00 10 0c	js_2val16      .byte     js_txtcol,js_txtbak,16,12
>0f14	28 18 2c 19	               .null     "(x,y):($0000,$0000)"
>0f18	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29 00
>0f28	00		js_1status     .byte 0
>0f29	00		js_2status     .byte 0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-spriteman-mc.asm

.0f2a			sprt_init
.0f2a	20 04 c0	               jsr  pushall
.0f2d	ac 50 13	               ldy  sprt_ptr6+1
.0f30	ae 4f 13	               ldx  sprt_ptr6
.0f33	ad 85 0f	               lda  sprt_ptr
.0f36	20 67 10	               jsr  sprt_loadptr
.0f39	20 93 c1	               jsr  savezp1
.0f3c	20 b1 c1	               jsr  savezp2
.0f3f	ad 15 d0	               lda  vic+$15 ; enable sprite 2
.0f42	09 04		               ora  #%00000100
.0f44	8d 15 d0	               sta  vic+$15
.0f47	a9 0d		               lda  #$0d
.0f49	8d fa 07	               sta  $7fa
.0f4c	ad 43 13	               lda  sprt_ptr0
.0f4f	85 fb		               sta  zpage1
.0f51	ad 44 13	               lda  sprt_ptr0+1
.0f54	85 fc		               sta  zpage1+1
.0f56	a9 40		               lda  #$40
.0f58	85 fd		               sta  zpage2
.0f5a	a9 03		               lda  #$03
.0f5c	85 fe		               sta  zpage2+1
.0f5e	a0 41		               ldy  #65
.0f60	b1 fb		               lda  (zpage1),y      ; sprite y offset
.0f62	8d aa 10	               sta  sprt_yoffset
.0f65	88		               dey
.0f66	b1 fb		               lda  (zpage1),y      ; sprite x offset
.0f68	8d a9 10	               sta  sprt_xoffset
.0f6b	88		               dey
.0f6c	b1 fb		               lda  (zpage1),y      ; sprite color
.0f6e	8d 29 d0	               sta  $d029
.0f71	88		               dey
.0f72	a0 3e		               ldy  #62
.0f74	b1 fb		nextbyte       lda  (zpage1),y
.0f76	91 fd		               sta  (zpage2),y
.0f78	88		               dey
.0f79	d0 f9		               bne  nextbyte
.0f7b	20 a2 c1	               jsr  restzp1
.0f7e	20 c0 c1	               jsr  restzp2
.0f81	20 3f c0	               jsr  popall
.0f84	60		               rts
>0f85	01		sprt_ptr       .byte   $01
.0f86			sprt_calcpos
.0f86	20 72 c0	               jsr  pushreg
.0f89	a9 00		               lda  #0
.0f8b	8d ac 10	               sta  sprt_x+1
.0f8e	8d ae 10	               sta  sprt_y+1
.0f91	ad 97 0e	               lda  js_2pixx+1
.0f94	18		               clc
.0f95	2a		               rol
.0f96	2a		               rol
.0f97	8d ac 10	               sta  sprt_x+1
.0f9a	ad 96 0e	               lda  js_2pixx
.0f9d	18		               clc
.0f9e	6d a9 10	               adc  sprt_xoffset
.0fa1	8d ab 10	               sta  sprt_x
.0fa4	90 08		               bcc  norepx
.0fa6	ad ac 10	               lda  sprt_x+1
.0fa9	09 04		               ora  #$04
.0fab	8d ac 10	               sta  sprt_x+1
.0fae	ad 98 0e	norepx         lda  js_2pixy
.0fb1	18		               clc
.0fb2	6d aa 10	               adc  sprt_yoffset
.0fb5	8d ad 10	               sta  sprt_y
.0fb8	20 a1 c0	               jsr  popreg
.0fbb	60		               rts
.0fbc			sprt_move
.0fbc	20 72 c0	               jsr  pushreg
.0fbf	20 86 0f	               jsr  sprt_calcpos
.0fc2	ad ab 10	               lda  sprt_x
.0fc5	8d 04 d0	               sta  vic+$04
.0fc8	ad ac 10	               lda  sprt_x+1
.0fcb	8d 10 d0	               sta  vic+$10
.0fce	ad ad 10	               lda  sprt_y
.0fd1	8d 05 d0	               sta  vic+$05
.0fd4	20 db 0f	               jsr  sprt_showpos
.0fd7	20 a1 c0	               jsr  popreg
.0fda	60		               rts
.0fdb			sprt_showpos
.0fdb	20 04 c0	               jsr  push
.0fde	ad ab 10	               lda  sprt_x
.0fe1	20 90 c2	               jsr  atohex
.0fe4	ad 2f c2	               lda  a2hexstr
.0fe7	8d 72 13	               sta  sprite_pos+26
.0fea	ad 30 c2	               lda  a2hexstr+1
.0fed	8d 73 13	               sta  sprite_pos+27
.0ff0	ad ac 10	               lda  sprt_x+1
.0ff3	20 90 c2	               jsr  atohex
.0ff6	ad 2f c2	               lda  a2hexstr
.0ff9	8d 70 13	               sta  sprite_pos+24
.0ffc	ad 30 c2	               lda  a2hexstr+1
.0fff	8d 71 13	               sta  sprite_pos+25
.1002	ad ad 10	               lda  sprt_y
.1005	20 90 c2	               jsr  atohex
.1008	ad 2f c2	               lda  a2hexstr
.100b	8d 78 13	               sta  sprite_pos+32
.100e	ad 30 c2	               lda  a2hexstr+1
.1011	8d 79 13	               sta  sprite_pos+33
.1014	a9 00		               lda  #0
.1016	20 90 c2	               jsr  atohex
.1019	ad 2f c2	               lda  a2hexstr
.101c	8d 76 13	               sta  sprite_pos+30
.101f	ad 30 c2	               lda  a2hexstr+1
.1022	8d 77 13	               sta  sprite_pos+31
.1025	a2 58		               ldx  #<sprite_pos
.1027	a0 13		               ldy  #>sprite_pos
.1029	20 2e 15	               jsr  putscxy
.102c	20 3f c0	               jsr  pop
.102f	60		               rts
.1030			sprt_loadptr2
.1030	20 04 c0	               jsr  push
.1033	aa		               tax
.1034	8e 85 0f	               stx  sprt_ptr
.1037	ad 44 13	               lda  sprt_ptr0+1
.103a	8d 66 10	               sta  calcbuff+1
.103d	ad 43 13	               lda  sprt_ptr0
.1040	8d 65 10	               sta  calcbuff
.1043	e0 00		               cpx  #0
.1045	f0 11		               beq  addrok
.1047	ad 65 10	               lda  calcbuff
.104a	18		nextx          clc
.104b	69 42		               adc  #66
.104d	90 03		               bcc  nocarry
.104f	ee 66 10	               inc  calcbuff+1
.1052	8d 65 10	nocarry        sta  calcbuff
.1055	ca		               dex
.1056	d0 f2		               bne  nextx
.1058	ac 66 10	addrok         ldy  calcbuff+1
.105b	ae 65 10	               ldx  calcbuff
.105e	20 81 10	               jsr  sprt_setimage
.1061	20 3f c0	               jsr  pop
.1064	60		               rts
>1065	00 00		calcbuff        .word   $0
.1067			sprt_loadptr
.1067	20 04 c0	               jsr  push
.106a	ad 85 0f	               lda  sprt_ptr
.106d	18		               clc
.106e	2a		               rol
.106f	a8		               tay
.1070	b9 43 13	               lda  sprt_ptr0,y
.1073	aa		               tax
.1074	b9 44 13	               lda  sprt_ptr0+1,y
.1077	a8		               tay
.1078	20 81 10	               jsr  sprt_setimage
.107b	20 3f c0	               jsr  pop
.107e	60		               rts
>107f	00 00		calcbuff        .word   $0
.1081			sprt_setimage
.1081	20 04 c0	               jsr  push
.1084	20 93 c1	               jsr  savezp1
.1087	20 b1 c1	               jsr  savezp2
.108a	84 fc		               sty  zpage1+1
.108c	86 fb		               stx  zpage1
.108e	a0 10		               ldy  #>sprt_image
.1090	84 fe		               sty  zpage2+1
.1092	a0 af		               ldy  #<sprt_image
.1094	84 fd		               sty  zpage2
.1096	a0 42		               ldy  #66
.1098	b1 fb		nextbyte       lda  (zpage1),y
.109a	91 fd		               sta  (zpage2),y
.109c	88		               dey
.109d	d0 f9		               bne  nextbyte
.109f	20 c0 c1	               jsr  restzp2
.10a2	20 a2 c1	               jsr  restzp1
.10a5	20 3f c0	               jsr  pop
.10a8	60		               rts
>10a9	00		sprt_xoffset   .byte     $00
>10aa	00		sprt_yoffset   .byte     $00
>10ab	00 00		sprt_x         .word     $0000
>10ad	00 00		sprt_y         .word     $0000
>10af			sprt_image      .fill    66
>10f1	00 00 00 00	sprt_crxair    .byte     $00, $00, $00, $00, $00, $00 ; 6
>10f5	00 00
>10f7	00 66 00 00	               .byte     $00, $66, $00, $00, $3c, $00 ; 12
>10fb	3c 00
>10fd	00 18 00 00	               .byte     $00, $18, $00, $00, $00, $00 ; 18
>1101	00 00
>1103	00 00 00 00	               .byte     $00, $00, $00, $00, $18, $00 ; 24
>1107	18 00
>1109	80 00 01 c0	               .byte     $80, $00, $01, $c0, $18, $03 ; 30
>110d	18 03
>110f	66 66 66 c0	               .byte     $66, $66, $66, $c0, $18, $03 ; 36
>1113	18 03
>1115	80 00 01 00	               .byte     $80, $00, $01, $00, $18, $00 ; 42
>1119	18 00
>111b	00 00 00 00	               .byte     $00, $00, $00, $00, $00, $00 ; 48
>111f	00 00
>1121	00 18 00 00	               .byte     $00, $18, $00, $00, $3c, $00 ; 54
>1125	3c 00
>1127	00 66 00 00	               .byte     $00, $66, $00, $00, $00, $00 ; 60
>112b	00 00
>112d	00 00 00 01	               .byte     $00, $00, $00, $01, $0c, $28 ; 66,
>1131	0c 28
>1133	80 00 00 e0	sprt_mouse     .byte     $80, $00, $00, $e0, $00, $00 ; 6
>1137	00 00
>1139	b8 00 00 ce	               .byte     $b8, $00, $00, $ce, $00, $00 ; 12
>113d	00 00
>113f	83 80 00 c0	               .byte     $83, $80, $00, $c0, $e0, $00 ; 18
>1143	e0 00
>1145	80 18 00 c0	               .byte     $80, $18, $00, $c0, $3c, $00 ; 24
>1149	3c 00
>114b	80 e0 00 c0	               .byte     $80, $e0, $00, $c0, $60, $00 ; 30
>114f	60 00
>1151	98 30 00 fc	               .byte     $98, $30, $00, $fc, $18, $00 ; 36
>1155	18 00
>1157	c6 0c 00 03	               .byte     $c6, $0c, $00, $03, $06, $00 ; 42
>115b	06 00
>115d	01 9c 00 00	               .byte     $01, $9c, $00, $00, $f0, $00 ; 48
>1161	f0 00
>1163	00 40 00 00	               .byte     $00, $40, $00, $00, $00, $00 ; 54
>1167	00 00
>1169	00 00 00 00	               .byte     $00, $00, $00, $00, $00, $00 ; 60
>116d	00 00
>116f	00 00 00 01	               .byte     $00, $00, $00, $01, $18, $31 ; 66
>1173	18 31
>1175	00 7c 00 01	sprt_pointer   .byte     $00, $7c, $00, $01, $83, $00 ; 6
>1179	83 00
>117b	06 10 c0 08	               .byte     $06, $10, $c0, $08, $00, $30 ; 12
>117f	00 30
>1181	12 10 88 20	               .byte     $12, $10, $88, $20, $00, $08 ; 18
>1185	00 08
>1187	40 ba 04 40	               .byte     $40, $ba, $04, $40, $6c, $04 ; 24
>118b	6c 04
>118d	80 c6 02 aa	               .byte     $80, $c6, $02, $aa, $82, $aa ; 30
>1191	82 aa
>1193	80 c6 02 40	               .byte     $80, $c6, $02, $40, $6c, $04 ; 36
>1197	6c 04
>1199	40 ba 04 20	               .byte     $40, $ba, $04, $20, $00, $08 ; 42
>119d	00 08
>119f	12 10 90 08	               .byte     $12, $10, $90, $08, $00, $20 ; 48
>11a3	00 20
>11a5	06 10 c0 01	               .byte     $06, $10, $c0, $01, $83, $00 ; 54
>11a9	83 00
>11ab	00 7c 00 00	               .byte     $00, $7c, $00, $00, $00, $00 ; 60
>11af	00 00
>11b1	00 00 00 01	               .byte     $00, $00, $00, $01, $0c, $28 ; 66
>11b5	0c 28
>11b7	55 55 55 aa	sprt_pointer2  .byte     $55, $55, $55, $aa, $aa, $aa ; 6
>11bb	aa aa
>11bd	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 12
>11c1	aa aa
>11c3	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 18
>11c7	aa aa
>11c9	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 24
>11cd	00 2a
>11cf	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 30
>11d3	00 2a
>11d5	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 36
>11d9	00 2a
>11db	54 00 55 aa	               .byte     $54, $00, $55, $aa, $00, $2a ; 42
>11df	00 2a
>11e1	54 00 55 aa	               .byte     $54, $00, $55, $aa, $aa, $aa ; 48
>11e5	aa aa
>11e7	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 54
>11eb	aa aa
>11ed	55 55 55 aa	               .byte     $55, $55, $55, $aa, $aa, $aa ; 60
>11f1	aa aa
>11f3	55 55 55 01	               .byte     $55, $55, $55, $01, $0c, $28 ; 66
>11f7	0c 28
>11f9	06 00 00 0f	sprt_hand      .byte     $06, $00, $00, $0f, $00, $00 ; 6
>11fd	00 00
>11ff	19 80 00 10	               .byte     $19, $80, $00, $10, $80, $00 ; 12
>1203	80 00
>1205	19 80 00 16	               .byte     $19, $80, $00, $16, $b1, $8c ; 18
>1209	b1 8c
>120b	10 ca 52 10	               .byte     $10, $ca, $52, $10, $84, $21 ; 24
>120f	84 21
>1211	10 84 21 30	               .byte     $10, $84, $21, $30, $84, $21 ; 30
>1215	84 21
>1217	50 84 21 90	               .byte     $50, $84, $21, $90, $84, $21 ; 36
>121b	84 21
>121d	90 00 01 90	               .byte     $90, $00, $01, $90, $00, $01 ; 42
>1221	00 01
>1223	90 7f c1 90	               .byte     $90, $7f, $c1, $90, $00, $01 ; 48
>1227	00 01
>1229	40 ff e2 40	               .byte     $40, $ff, $e2, $40, $00, $02 ; 54
>122d	00 02
>122f	3c 00 04 02	               .byte     $3c, $00, $04, $02, $00, $08 ; 60
>1233	00 08
>1235	03 ff f8 01	               .byte     $03, $ff, $f8, $01, $12, $31 ; 66
>1239	12 31
>123b	00 3e 00 01	sprt_ultraman  .byte     $00, $3e, $00, $01, $c1, $c0 ; 6
>123f	c1 c0
>1241	0e 3e 30 08	               .byte     $0e, $3e, $30, $08, $41, $08 ; 12
>1245	41 08
>1247	10 1c 04 10	               .byte     $10, $1c, $04, $10, $22, $04 ; 18
>124b	22 04
>124d	24 1c 12 23	               .byte     $24, $1c, $12, $23, $00, $62 ; 24
>1251	00 62
>1253	20 08 02 47	               .byte     $20, $08, $02, $47, $c1, $f1 ; 30
>1257	c1 f1
>1259	6a aa ab 47	               .byte     $6a, $aa, $ab, $47, $c9, $f1 ; 36
>125d	c9 f1
>125f	20 08 02 20	               .byte     $20, $08, $02, $20, $14, $02 ; 42
>1263	14 02
>1265	20 00 02 10	               .byte     $20, $00, $02, $10, $00, $04 ; 48
>1269	00 04
>126b	10 7f 04 08	               .byte     $10, $7f, $04, $08, $00, $08 ; 54
>126f	00 08
>1271	06 3e 30 01	               .byte     $06, $3e, $30, $01, $c1, $c0 ; 60
>1275	c1 c0
>1277	00 3e 00 01	               .byte     $00, $3e, $00, $01, $0c, $28 ; 66
>127b	0c 28
>127d	00 1c 00 00	sprt_male      .byte     $00, $1c, $00, $00, $3e, $00 ; 6
>1281	3e 00
>1283	00 3e 00 00	               .byte     $00, $3e, $00, $00, $3e, $00 ; 12
>1287	3e 00
>1289	00 1c 00 00	               .byte     $00, $1c, $00, $00, $08, $00 ; 18
>128d	08 00
>128f	00 ff 80 00	               .byte     $00, $ff, $80, $00, $ff, $80 ; 24
>1293	ff 80
>1295	00 be 80 00	               .byte     $00, $be, $80, $00, $9c, $80 ; 30
>1299	9c 80
>129b	00 88 80 00	               .byte     $00, $88, $80, $00, $be, $80 ; 36
>129f	be 80
>12a1	00 be 80 01	               .byte     $00, $be, $80, $01, $9c, $c0 ; 42
>12a5	9c c0
>12a7	01 94 c0 00	               .byte     $01, $94, $c0, $00, $14, $00 ; 48
>12ab	14 00
>12ad	00 14 00 00	               .byte     $00, $14, $00, $00, $14, $00 ; 54
>12b1	14 00
>12b3	00 36 00 00	               .byte     $00, $36, $00, $00, $77, $00 ; 60
>12b7	77 00
>12b9	00 77 00 01	               .byte     $00, $77 ,$00, $01, $0c, $2f ; 66
>12bd	0c 2f
>12bf	00 3c 00 00	sprt_robot     .byte     $00, $3c, $00, $00, $24, $00 ; 6
>12c3	24 00
>12c5	00 66 18 00	               .byte     $00, $66, $18, $00, $66, $38 ; 12
>12c9	66 38
>12cb	00 24 38 00	               .byte     $00, $24, $38, $00, $3c, $10 ; 18
>12cf	3c 10
>12d1	00 18 10 00	               .byte     $00, $18, $10, $00, $18, $10 ; 24
>12d5	18 10
>12d7	0f ff f0 08	               .byte     $0f, $ff, $f0, $08, $7e, $00 ; 30
>12db	7e 00
>12dd	08 7e 00 08	               .byte     $08, $7e, $00, $08, $18, $00 ; 36
>12e1	18 00
>12e3	1c 18 00 1c	               .byte     $1c, $18, $00, $1c, $18, $00 ; 42
>12e7	18 00
>12e9	18 3c 00 00	               .byte     $18, $3c, $00, $00, $3c, $00 ; 48
>12ed	3c 00
>12ef	00 24 00 00	               .byte     $00, $24, $00, $00, $24, $00 ; 54
>12f3	24 00
>12f5	00 24 00 03	               .byte     $00, $24, $00, $03, $e7, $c0 ; 60
>12f9	e7 c0
>12fb	03 e7 c0 01	               .byte     $03, $e7, $c0, $01, $0c, $28 ; 66
>12ff	0c 28
>1301	00 1c 00 00	sprt_femme     .byte     $00, $1c, $00, $00, $3e, $00 ; 6
>1305	3e 00
>1307	00 3e 00 00	               .byte     $00, $3e, $00, $00, $3e, $00 ; 12
>130b	3e 00
>130d	00 1c 00 00	               .byte     $00, $1c, $00, $00, $08, $00 ; 18
>1311	08 00
>1313	00 7f 00 00	               .byte     $00, $7f, $00, $00, $ff, $80 ; 24
>1317	ff 80
>1319	00 be 80 00	               .byte     $00, $be, $80, $00, $9c, $80 ; 30
>131d	9c 80
>131f	00 88 80 00	               .byte     $00, $88, $80, $00, $9c, $80 ; 36
>1323	9c 80
>1325	00 be 80 01	               .byte     $00, $be, $80, $01, $be, $c0 ; 42
>1329	be c0
>132b	01 be c0 00	               .byte     $01, $be, $c0, $00, $7f, $00 ; 48
>132f	7f 00
>1331	00 7f 00 00	               .byte     $00, $7f, $00, $00, $ff, $80 ; 54
>1335	ff 80
>1337	00 36 00 00	               .byte     $00, $36, $00, $00, $77, $00 ; 60
>133b	77 00
>133d	00 55 00 01	               .byte     $00, $55 ,$00, $01, $0c, $2f ; 66
>1341	0c 2f
>1343	af 10		sprt_ptr0      .word     sprt_image + (0*66)
>1345	f1 10		sprt_ptr1      .word     sprt_image + (1*66)
>1347	33 11		sprt_ptr2      .word     sprt_image + (2*66)
>1349	75 11		sprt_ptr3      .word     sprt_image + (3*66)
>134b	b7 11		sprt_ptr4      .word     sprt_image + (4*66)
>134d	f9 11		sprt_ptr5      .word     sprt_image + (5*66)
>134f	3b 12		sprt_ptr6      .word     sprt_image + (6*66)
>1351	7d 12		sprt_ptr7      .word     sprt_image + (7*66)
>1353	bf 12		sprt_ptr8      .word     sprt_image + (8*66)
>1355	01 13		sprt_ptr9      .word     sprt_image + (9*66)
>1357	ff		testbyte       .byte     255
=$07			sprt_txtcol    =         vjaune
=$00			sprt_txtbak    =         bkcol0
=$01			sprt_color     =         vwhite
>1358	07 00 04 0e	sprite_pos     .byte     sprt_txtcol,sprt_txtbak,4,14
>135c	53 10 12 09	               .null     "Sprite pos. (x,y):($0000,$0000)"
>1360	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>1370	30 30 30 30 2c 24 30 30 30 30 29 00

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-text-mc.asm

>137c	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>137e	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>1380	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>1381	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>1382	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>1383	02		vicbkcol1      .byte     vrouge ;$0b    ; 1,
>1384	05		vicbkcol2      .byte     vvert  ;$0b    ; 2,
>1385	06		vicbkcol3      .byte     vbleu  ;$0b    ; et 3.
>1386	00		inverse        .byte     $00
>1387	00 00 00 00	scraddr        .byte     0,0,0,0,0
>138b	00
>138c	00 00 00 00	coladdr        .byte     0,0,0,0,0
>1390	00
>1391	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>1392	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.1394			scrmaninit
.1394	08		               php            ; On sauvegarde les registres
.1395	48		               pha
.1396	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.1398	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.139b	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.139e	09 10		               ora  #%00010000; modifier que le bit 4.
.13a0	29 ef		               and  #%11101111
.13a2	8d 16 d0	               sta  $d016 ; 53270
.13a5	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.13a8	09 40		               ora  #%01000000; selectionner le md. couleur de
.13aa	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.13ad	ad 82 13	               lda  vicbkcol0
.13b0	8d 21 d0	               sta  $d021     ; 53281
.13b3	ad 83 13	               lda  vicbkcol1
.13b6	8d 22 d0	               sta  $d022     ; 53282
.13b9	ad 84 13	               lda  vicbkcol2
.13bc	8d 23 d0	               sta  $d023     ; 53283
.13bf	ad 85 13	               lda  vicbkcol3
.13c2	8d 24 d0	               sta  $d024     ; 54284
.13c5	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.13c7	8d 91 13	               sta  bkcol     ; ... fond par defaut des caracteres.
.13ca	20 24 14	               jsr  cls       ; Finalement on efface l'ecran
.13cd	68		               pla
.13ce	28		               plp
.13cf	60		               rts
.13d0			curshome
.13d0	08		               php                      ; Sauvegarde flags ...
.13d1	48		               pha                      ; ... et accumulateur
.13d2	ad 92 13	               lda  virtaddr            ; In replace le pointeur ...
.13d5	8d 7c 13	               sta  scrptr              ; ... d'écran virtuel à sa ...
.13d8	ad 93 13	               lda  virtaddr+1          ; ... position initiale.
.13db	8d 7d 13	               sta  scrptr+1
.13de	20 0f 14	               jsr  synccolptr          ; On synchronise le ptr couleur.
.13e1	ad 82 13	               lda  vicbkcol0
.13e4	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.13e7	ad 83 13	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.13ea	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.13ed	ad 84 13	               lda  vicbkcol2           ; ... les variables globales.
.13f0	8d 23 d0	               sta  $d023
.13f3	ad 85 13	               lda  vicbkcol3
.13f6	8d 24 d0	               sta  $d024
.13f9	68		               pla                      ; Récupère l'accumulateur ...
.13fa	28		               plp                      ; ... et les flags
.13fb	60		               rts
.13fc			incscrptr
.13fc	08		               php                      ; Sauvegarde flags ...
.13fd	48		               pha                      ; ... et accumulateur
.13fe	ee 7c 13	               inc  scrptr              ; Incremente le pointeur
.1401	ad 7c 13	               lda  scrptr              ; Regarde si on doit faire un ...
.1404	d0 03		               bne  pasdereport         ; ... report dans le MSB
.1406	ee 7d 13	               inc  scrptr+1            ; Si oui on fait le repport
.1409	20 0f 14	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.140c	68		               pla                      ; Récupère l'accumulateur ...
.140d	28		               plp                      ; ... et les flags
.140e	60		               rts
.140f			synccolptr
.140f	08		               php                      ; Sauvegarde flags ...
.1410	48		               pha                      ; ... et accumulateur
.1411	ad 7c 13	               lda  scrptr              ; Récupère le LSB du scrptr ...
.1414	8d 7e 13	               sta  colptr              ; ... pour le placer dans le colptr.
.1417	ad 7d 13	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.141a	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.141c	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.141e	8d 7f 13	               sta  colptr+1            ; ... et le sauvegarde.
.1421	68		               pla                      ; Récupère l'accumulateur ...
.1422	28		               plp                      ; ... et les flags
.1423	60		               rts
.1424			cls
.1424	20 04 c0	               jsr  push                ; On sauvegarde les registres
.1427	ad 92 13	               lda  virtaddr            ; On replace le curseur d'ecran à
.142a	8d 7c 13	               sta  scrptr
.142d	ad 93 13	               lda  virtaddr+1          ; sa position initiale, ($0400).
.1430	8d 7d 13	               sta  scrptr+1
.1433	20 0f 14	               jsr  synccolptr          ; On synchronise la couleur.
.1436	20 e5 15	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.1439	ad 81 13	               lda  brdcol              ; On place la couleur ...
.143c	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.143f	ad 91 13	               lda  bkcol               ; Associer couleur pour ...
.1442	8d 21 d0	               sta  vicbackcol          ; ... remplir l'ecran ...
.1445	a9 20		               lda  #$20                ; ... de caracteres espace.
.1447	a2 04		               ldx  #4                  ; Quatre blocs de ...
.1449	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.144b			nextcar
.144b	91 fb		               sta  (zpage1),y          ;
.144d	a5 fc		               lda  zpage1+1
.144f	48		               pha
.1450	29 03		               and  #%00000011
.1452	09 d8		               ora  #%11011000
.1454	85 fc		               sta  zpage1+1
.1456	a9 00		               lda  #0
.1458	91 fb		               sta  (zpage1),y
.145a	68		               pla
.145b	85 fc		               sta  zpage1+1
.145d	a9 20		               lda  #$20
.145f	88		               dey
.1460	d0 e9		               bne  nextcar
.1462	e6 fc		               inc  zpage1+1
.1464	ca		               dex
.1465	d0 e4		               bne  nextcar
.1467	a9 00		               lda  #$00
.1469	8d 7c 13	               sta  scrptr
.146c	a9 04		               lda  #$04
.146e	8d 7d 13	               sta  scrptr+1
.1471	20 0f 14	               jsr  synccolptr
.1474	20 3f c0	               jsr  pop
.1477	60		               rts
.1478			setborder
.1478	08		               php
.1479	8d 81 13	               sta  brdcol
.147c	8d 20 d0	               sta  vicbordcol
.147f	28		               plp
.1480	60		               rts
.1481			setinverse
.1481	08		               php
.1482	48		               pha
.1483	a9 80		               lda  #%10000000
.1485	8d 86 13	               sta  inverse
.1488	68		               pla
.1489	28		               plp
.148a	60		               rts
.148b			clrinverse
.148b	08		               php
.148c	48		               pha
.148d	a9 00		               lda  #%00000000
.148f	8d 86 13	               sta  inverse
.1492	68		               pla
.1493	28		               plp
.1494	60		               rts
.1495			putch
.1495	20 04 c0	               jsr  push           ; On sauvegarde les registres
.1498	20 e5 15	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.149b	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.149d	48		               pha
.149e	ad 91 13	               lda  bkcol
.14a1	29 c0		               and  #%11000000
.14a3	8d 91 13	               sta  bkcol
.14a6	68		               pla
.14a7	0d 91 13	               ora  bkcol          ; On y ajoute la couleur du fond.
.14aa	a0 00		               ldy  #$00           ; Met Y à 0
.14ac	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.14ae	ae 7f 13	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.14b1	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.14b3	ad 80 13	               lda  curcol         ; Charge la couleur voulu dans.
.14b6	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.14b8	20 fc 13	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.14bb	20 3f c0	               jsr  pop            ; Replace tous les registres
.14be	60		               rts
.14bf			z2putch
.14bf	20 04 c0	               jsr  push           ; On sauvegarde les registres
.14c2	a0 00		               ldy  #$0            ; Met Y à 0
.14c4	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.14c6	20 95 14	               jsr  putch          ; Appel pour affichage
.14c9	20 3f c0	               jsr  pop            ; Replace tous les registres
.14cc	60		               rts
.14cd			z2puts
.14cd	20 04 c0	               jsr  push           ; On sauvegarde les registres
.14d0	a0 00		               ldy  #$0            ; Met Y à 0
.14d2	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.14d4	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.14d6	20 bf 14	               jsr  z2putch        ; Appel pour affichage
.14d9	20 77 c1	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.14dc	4c d2 14	               jmp  nextcar        ; On passe au prochain
.14df	20 3f c0	endstr         jsr  pop            ; Replace tous les registres
.14e2	60		               rts
.14e3			puts
.14e3	20 04 c0	               jsr  push           ; On sauvegarde les registres
.14e6	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.14e8	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.14ea	20 cd 14	               jsr  z2puts         ; Appel pour affichage
.14ed	20 3f c0	               jsr  pop            ; Replace tous les registres
.14f0	60		               rts
.14f1			gotoxy
.14f1	20 04 c0	               jsr  push           ; On sauvegarde les registres
.14f4	20 d0 13	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.14f7	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.14f9	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.14fb	a9 28		               lda  #40            ; Si oui on ajoute 40
.14fd	20 82 15	               jsr  saddscrptr     ;  à l'adresse du pointeur virtuel autant
.1500	88		               dey                 ;  de fois qu'il est spécifié dans y.
.1501	4c f7 14	               jmp  yagain         ; On passe au prochain y.
.1504	8a		setx           txa                 ; On ajoute la valeur de X
.1505	20 82 15	               jsr  saddscrptr     ;  à l'adresse di pointeur virtuel.
.1508	20 0f 14	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.150b	20 3f c0	               jsr  pop            ; Replace tous les registres
.150e	60		               rts
.150f			putsxy
.150f	20 04 c0	               jsr  push           ; On sauvegarde les registres et le zp2
.1512	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.1514	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.1516	a0 00		               ldy  #0             ; On place le compteur
.1518	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.151a	aa		               tax                 ; de A à X
.151b	20 77 c1	               jsr  inczp2         ; On deplace le pointeur
.151e	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.1520	a8		               tay                 ; de A à Y
.1521	20 f1 14	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.1524	20 77 c1	               jsr  inczp2         ; On deplace le pointeur
.1527	20 cd 14	               jsr  z2puts         ; On imprime la chaine
.152a	20 3f c0	               jsr  pop            ; Replace tous les registres
.152d	60		               rts
.152e			putscxy
.152e	20 04 c0	               jsr  push           ; On Sauvegarde registres et zp2
.1531	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.1533	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.1535	a0 00		               ldy  #0             ; Place le compteur
.1537	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.1539	8d 80 13	               sta  curcol         ; ... et on la definie
.153c	20 77 c1	               jsr  inczp2         ; Pointe le prochain byte
.153f	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.1541	8d 91 13	               sta  bkcol          ; ... l'index de couleur de fond
.1544	20 77 c1	               jsr  inczp2         ; Deplace le pointeur
.1547	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.1549	aa		               tax                 ; ... de A à X
.154a	20 77 c1	               jsr  inczp2         ; Deplace le pointeur
.154d	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.154f	a8		               tay                 ; de A à Y
.1550	20 f1 14	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.1553	20 77 c1	               jsr  inczp2         ; Place le ptr en début de chaine
.1556	20 cd 14	               jsr  z2puts         ; On imprime la chaine
.1559	20 3f c0	               jsr  pop
.155c	60		               rts
.155d			setcurcol
.155d	08		               php
.155e	8d 80 13	               sta  curcol
.1561	28		               plp
.1562	60		               rts
.1563			setvicbkcol
.1563	08		               php
.1564	48		               pha
.1565	8a		               txa
.1566	29 03		               and  #$03
.1568	aa		               tax
.1569	68		               pla
.156a	9d 82 13	               sta  vicbkcol0,x
.156d	9d 21 d0	               sta  $d021,x
.1570	28		               plp
.1571	60		               rts
.1572			setbkcol
.1572	08		               php
.1573	48		               pha
.1574	0a		               asl
.1575	0a		               asl
.1576	0a		               asl
.1577	0a		               asl
.1578	0a		               asl
.1579	0a		               asl
.157a	29 c0		               and  #$c0
.157c	8d 91 13	               sta  bkcol
.157f	68		               pla
.1580	28		               plp
.1581	60		               rts
.1582			saddscrptr
.1582	08		               php
.1583	48		               pha
.1584	18		               clc
.1585	6d 7c 13	               adc  scrptr
.1588	8d 7c 13	               sta  scrptr
.158b	90 03		               bcc  norep
.158d	ee 7d 13	               inc  scrptr+1
.1590	68		norep          pla
.1591	28		               plp
.1592	60		               rts
.1593			scrptr2str
.1593	20 04 c0	               jsr  push
.1596	ad 7d 13	               lda  scrptr+1
.1599	48		               pha
.159a	20 89 c2	               jsr  lsra4bits
.159d	20 7d c2	               jsr  nibtohex
.15a0	8d 87 13	               sta  scraddr
.15a3	68		               pla
.15a4	20 89 c2	               jsr  lsra4bits
.15a7	20 7d c2	               jsr  nibtohex
.15aa	8d 88 13	               sta  scraddr+1
.15ad	ad 7d 13	               lda  scrptr+1
.15b0	48		               pha
.15b1	20 89 c2	               jsr  lsra4bits
.15b4	20 7d c2	               jsr  nibtohex
.15b7	8d 87 13	               sta  scraddr
.15ba	68		               pla
.15bb	20 89 c2	               jsr  lsra4bits
.15be	20 7d c2	               jsr  nibtohex
.15c1	8d 88 13	               sta  scraddr+1
.15c4	ad 7c 13	               lda  scrptr
.15c7	48		               pha
.15c8	20 89 c2	               jsr  lsra4bits
.15cb	20 7d c2	               jsr  nibtohex
.15ce	8d 89 13	               sta  scraddr+2
.15d1	8d 8e 13	               sta  coladdr+2
.15d4	68		               pla
.15d5	20 89 c2	               jsr  lsra4bits
.15d8	20 7d c2	               jsr  nibtohex
.15db	8d 8a 13	               sta  scraddr+3
.15de	8d 8f 13	               sta  coladdr+3
.15e1	20 3f c0	               jsr  pop
.15e4	60		               rts
.15e5			scrptr2zp1
.15e5	08		               php
.15e6	48		               pha
.15e7	ad 7c 13	               lda  scrptr
.15ea	85 fb		               sta  zpage1
.15ec	ad 7d 13	               lda  scrptr+1
.15ef	85 fc		               sta  zpage1+1
.15f1	68		               pla
.15f2	28		               plp
.15f3	60		               rts
.15f4			colptr2zp1
.15f4	08		               php
.15f5	48		               pha
.15f6	ad 7e 13	               lda  colptr
.15f9	85 fb		               sta  zpage1
.15fb	ad 7f 13	               lda  colptr+1
.15fe	85 fc		               sta  zpage1+1
.1600	68		               pla
.1601	28		               plp
.1602	60		               rts
.1603			scrptr2zp2
.1603	08		               php
.1604	48		               pha
.1605	ad 7c 13	               lda  scrptr
.1608	85 fd		               sta  zpage2
.160a	ad 7d 13	               lda  scrptr+1
.160d	85 fe		               sta  zpage2+1
.160f	68		               pla
.1610	28		               plp
.1611	60		               rts
.1612			colptr2zp2
.1612	08		               php
.1613	48		               pha
.1614	ad 7e 13	               lda  colptr
.1617	85 fd		               sta  zpage2
.1619	ad 7f 13	               lda  colptr+1
.161c	85 fe		               sta  zpage2+1
.161e	68		               pla
.161f	28		               plp
.1620	60		               rts
.1621			putrahex
.1621	08		               php
.1622	48		               pha
.1623	20 90 c2	               jsr     atohex
.1626	a2 2a		               ldx     #<a2hexcol
.1628	a0 c2		               ldy     #>a2hexcol
.162a	20 e3 14	               jsr     puts
.162d	68		               pla
.162e	28		               plp
.162f	60		               rts
.1630			putrahexxy
.1630	08		               php
.1631	48		               pha
.1632	20 90 c2	               jsr  atohex
.1635	a9 2c		               lda  #<a2hexpos
.1637	a0 c2		               ldy  #>a2hexpos
.1639	20 0f 15	               jsr  putsxy
.163c	68		               pla
.163d	28		               plp
.163e	60		               rts
.163f			putrahexcxy
.163f	08		               php
.1640	68		               pla
.1641	20 90 c2	               jsr  atohex
.1644	a9 2c		               lda  #<a2hexpos
.1646	a0 c2		               ldy  #>a2hexpos
.1648	20 2e 15	               jsr  putscxy
.164b	68		               pla
.164c	28		               plp
.164d	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>c000	00		rp        .byte     0
>c001	00		ra        .byte     0
>c002	00 00		pc        .word     0
.c004			pushall
.c004			push
.c004	08		          php            ; stack : flg, pcl, pch
.c005	78		          sei
.c006	8d 01 c0	          sta  ra        ; save a
.c009	68		          pla            ; stack : pcl, pch
.c00a	8d 00 c0	          sta  rp        ; save rp
.c00d	68		          pla            ; stack : pch
.c00e	8d 02 c0	          sta  pc        ; save pcl
.c011	68		          pla            ; stack : -
.c012	8d 03 c0	          sta  pc+1      ; save pch
.c015	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c017	48		          pha            ; stack : zp1l
.c018	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c01a	48		          pha            ; stack : zp1h, zp1l
.c01b	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c01d	48		          pha            ; stack : zp2l, zp1h, zp1l
.c01e	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c020	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c021	ad 00 c0	          lda  rp        ; get rp
.c024	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c025	ad 01 c0	          lda  ra        ; get a
.c028	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c029	8a		          txa            ; get x
.c02a	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c02b	98		          tya            ; get y
.c02c	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c02d	ad 03 c0	          lda  pc+1      ; get pch
.c030	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c031	ad 02 c0	          lda  pc        ; get pcl
.c034	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c035	ad 00 c0	          lda  rp        ; get rp
.c038	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c039	ad 01 c0	          lda  ra        ; get a
.c03c	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c03d	58		          cli
.c03e	60		          rts
.c03f			pullall
.c03f			pull
.c03f			popall
.c03f			pop
.c03f	78		          sei
.c040	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c041	8d 02 c0	          sta  pc        ; save pcl
.c044	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c045	8d 03 c0	          sta  pc+1      ; save pch
.c048	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c049	a8		          tay            ; set y
.c04a	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c04b	aa		          tax            ; set x
.c04c	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c04d	8d 01 c0	          sta  ra        ; save a
.c050	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c051	8d 00 c0	          sta  rp        ; save rp
.c054	68		          pla            ; stack : zp2l, zp1h, zp1l
.c055	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c057	68		          pla            ; stack : zp1h, zp1l
.c058	85 fd		          sta  zpage2    ; get zpage2 High byte
.c05a	68		          pla            ; stack : zp1l
.c05b	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c05d	68		          pla            ; stack :
.c05e	85 fb		          sta  zpage1    ; get zpage1 High byte
.c060	ad 03 c0	          lda  pc+1      ; get pch
.c063	48		          pha            ; stack : pch
.c064	ad 02 c0	          lda  pc
.c067	48		          pha            ; stack : pcl, pch
.c068	ad 00 c0	          lda  rp        ; get rp
.c06b	48		          pha            ; stack : rp, pcl, pch
.c06c	ad 01 c0	          lda  ra        ; set ra
.c06f	58		          cli
.c070	28		          plp            ; stack : pcl, pch
.c071	60		          rts
.c072			pushreg
.c072	08		          php            ; stack : flg, pcl, pch
.c073	78		          sei
.c074	8d 01 c0	          sta  ra        ; save a
.c077	68		          pla            ; stack : pcl, pch
.c078	8d 00 c0	          sta  rp        ; save rp
.c07b	68		          pla            ; stack : pch
.c07c	8d 02 c0	          sta  pc        ; save pcl
.c07f	68		          pla            ; stack : -
.c080	8d 03 c0	          sta  pc+1      ; save pch
.c083	ad 00 c0	          lda  rp        ; get rp
.c086	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c087	ad 01 c0	          lda  ra        ; get a
.c08a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c08b	8a		          txa            ; get x
.c08c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c08d	98		          tya            ; get y
.c08e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c08f	ad 03 c0	          lda  pc+1      ; get pch
.c092	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c093	ad 02 c0	          lda  pc        ; get pcl
.c096	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c097	ad 00 c0	          lda  rp        ; get rp
.c09a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c09b	ad 01 c0	          lda  ra        ; get a
.c09e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c09f	58		          cli
.c0a0	60		          rts
.c0a1			pullreg
.c0a1			popreg
.c0a1	78		          sei
.c0a2	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c0a3	8d 02 c0	          sta  pc        ; save pcl
.c0a6	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c0a7	8d 03 c0	          sta  pc+1      ; save pch
.c0aa	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c0ab	a8		          tay            ; set y
.c0ac	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c0ad	aa		          tax            ; set x
.c0ae	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c0af	8d 01 c0	          sta  ra        ; save a
.c0b2	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c0b3	8d 00 c0	          sta  rp        ; save rp
.c0b6	ad 03 c0	          lda  pc+1      ; get pch
.c0b9	48		          pha            ; stack : pch
.c0ba	ad 02 c0	          lda  pc
.c0bd	48		          pha            ; stack : pcl, pch
.c0be	ad 00 c0	          lda  rp        ; get rp
.c0c1	48		          pha            ; stack : rp, pcl, pch
.c0c2	ad 01 c0	          lda  ra        ; set ra
.c0c5	58		          cli
.c0c6	28		          plp            ; stack : pcl, pch
.c0c7	60		          rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c0c8			blkfill
.c0c8	20 04 c0	bf0            jsr  push
.c0cb	20 93 c1	               jsr  savezp1
.c0ce	84 fc		               sty  zpage1+1
.c0d0	a0 00		               ldy  #$00
.c0d2	84 fb		               sty  zpage1
.c0d4	91 fb		bf1            sta  (zpage1),y
.c0d6	c8		               iny
.c0d7	d0 fb		               bne  bf1
.c0d9	20 a2 c1	               jsr  restzp1
.c0dc	20 3f c0	               jsr  pop
.c0df	60		               rts
.c0e0			memfill
.c0e0	20 04 c0	               jsr  push
.c0e3	20 c8 c0	mf1            jsr  blkfill
.c0e6	c8		               iny
.c0e7	ca		               dex
.c0e8	d0 f9		               bne  mf1
.c0ea	20 3f c0	               jsr  pop
.c0ed	60		               rts
.c0ee			memmove
.c0ee	20 04 c0	               jsr  push
.c0f1	ba		               tsx            ; On se crée un pointeur ...
.c0f2	8a		               txa
.c0f3	18		               clc
.c0f4	69 0b		               adc  #11
.c0f6	a8		               tay
.c0f7	a2 06		               ldx  #$06
.c0f9	b9 00 01	nextbyte       lda  $0100,y
.c0fc	99 48 c1	               sta  words,y
.c0ff	c8		               iny
.c100	ca		               dex
.c101	d0 f6		               bne  nextbyte
.c103	ad 48 c1	               lda  s
.c106	8d 1f c1	               sta  source+1
.c109	ad 49 c1	               lda  s+1
.c10c	8d 20 c1	               sta  source+2
.c10f	ad 4a c1	               lda  d
.c112	8d 1c c1	               sta  destin+1
.c115	ad 4b c1	               lda  d+1
.c118	8d 1d c1	               sta  destin+2
.c11b	ad ff ff	destin         lda  $ffff
.c11e	8d ff ff	source         sta  $ffff
.c121	ee 1c c1	               inc  destin+1
.c124	d0 03		               bne  src
.c126	ee 1d c1	               inc  destin+2
.c129	ee 1f c1	src            inc  source+1
.c12c	d0 03		               bne  cnt
.c12e	ee 20 c1	               inc  source+2
.c131	ad 4c c1	cnt            lda  compte
.c134	d0 08		               bne  decit
.c136	ad 4d c1	               lda  compte+1
.c139	f0 09		               beq  fini
.c13b	ce 4d c1	               dec  compte+1
.c13e	ce 4c c1	decit          dec  compte
.c141	4c 1b c1	               jmp  destin
.c144	20 3f c0	fini           jsr  pop
.c147	60		               rts
.c148			words
>c148	00 00		s         .word     $0000
>c14a	00 00		d         .word     $0000
>c14c	00 00		compte    .word     $0000
.c14e			decword
.c14e	20 04 c0	               jsr  push
.c151	86 fd		               stx  zpage2
.c153	84 fe		               sty  zpage2+1
.c155	20 3f c0	               jsr  pop
.c158	60		               rts
.c159			inczpage1
.c159			inczp1
.c159	08		               php
.c15a	48		               pha
.c15b	e6 fb		               inc  zpage1
.c15d	a5 fb		               lda  zpage1
.c15f	d0 02		               bne  nopage
.c161	e6 fc		               inc  zpage1+1
.c163	68		nopage         pla
.c164	28		               plp
.c165	60		               rts
.c166			deczpage1
.c166			deczp1
.c166	08		               php
.c167	48		               pha
.c168	c6 fb		               dec  zpage1
.c16a	a5 fb		               lda  zpage1
.c16c	c9 ff		               cmp  #$ff
.c16e	f0 02		               beq  report
.c170	d0 02		               bne  nopage
.c172	c6 fc		report         dec  zpage1+1
.c174	68		nopage         pla
.c175	28		               plp
.c176	60		               rts
.c177			inczpage2
.c177			inczp2
.c177	08		               php
.c178	48		               pha
.c179	e6 fd		               inc  zpage2
.c17b	a5 fd		               lda  zpage2
.c17d	d0 02		               bne  nopage
.c17f	e6 fe		               inc  zpage2+1
.c181	68		nopage         pla
.c182	28		               plp
.c183	60		               rts
.c184			deczpage2
.c184			deczp2
.c184	08		               php
.c185	c6 fd		               dec  zpage2
.c187	a5 fd		               lda  zpage2
.c189	c9 ff		               cmp  #$ff
.c18b	f0 02		               beq  report
.c18d	d0 02		               bne  nopage
.c18f	c6 fe		report         dec  zpage2+1
.c191	28		nopage         plp
.c192	60		               rts
.c193			savezp1
.c193	08		               php
.c194	48		               pha
.c195	a5 fb		               lda  zpage1
.c197	8d 24 c2	               sta  zp1
.c19a	a5 fc		               lda  zpage1+1
.c19c	8d 25 c2	               sta  zp1+1
.c19f	68		               pla
.c1a0	28		               plp
.c1a1	60		               rts
.c1a2			restzp1
.c1a2	08		               php
.c1a3	48		               pha
.c1a4	ad 24 c2	               lda  zp1
.c1a7	85 fb		               sta  zpage1
.c1a9	ad 25 c2	               lda  zp1+1
.c1ac	85 fc		               sta  zpage1+1
.c1ae	68		               pla
.c1af	28		               plp
.c1b0	60		               rts
.c1b1			savezp2
.c1b1	08		               php
.c1b2	48		               pha
.c1b3	a5 fd		               lda  zpage2
.c1b5	8d 26 c2	               sta  zp2
.c1b8	a5 fe		               lda  zpage2+1
.c1ba	8d 27 c2	               sta  zp2+1
.c1bd	68		               pla
.c1be	28		               plp
.c1bf	60		               rts
.c1c0			restzp2
.c1c0	08		               php
.c1c1	48		               pha
.c1c2	ad 26 c2	               lda  zp2
.c1c5	85 fd		               sta  zpage2
.c1c7	ad 27 c2	               lda  zp2+1
.c1ca	85 fe		               sta  zpage2+1
.c1cc	68		               pla
.c1cd	28		               plp
.c1ce	60		               rts
.c1cf			xy2addr
.c1cf	08		               php
.c1d0	48		               pha
.c1d1	8a		               txa
.c1d2	48		               pha
.c1d3	98		               tya
.c1d4	48		               pha
.c1d5	ad 1f c2	               lda  addr1+1
.c1d8	8d 21 c2	               sta  addr2+1
.c1db	ad 1e c2	               lda  addr1
.c1de	8d 20 c2	               sta  addr2
.c1e1	c0 00		               cpy  #$00
.c1e3	f0 0f		               beq  addx
.c1e5	18		moreline       clc
.c1e6	6d 1d c2	               adc  ymult
.c1e9	90 03		               bcc  norepy
.c1eb	ee 21 c2	               inc  addr2+1
.c1ee	8d 20 c2	norepy         sta  addr2
.c1f1	88		               dey
.c1f2	d0 f1		               bne  moreline
.c1f4	8a		addx           txa
.c1f5	18		               clc
.c1f6	6d 20 c2	               adc  addr2
.c1f9	90 03		               bcc  thatsit
.c1fb	ee 21 c2	               inc  addr2+1
.c1fe	8d 20 c2	thatsit        sta  addr2
.c201	68		               pla
.c202	a8		               tay
.c203	68		               pla
.c204	aa		               tax
.c205	68		               pla
.c206	28		               plp
.c207	60		               rts
.c208			loop
.c208	ce 28 c2	               dec  loopcount
.c20b	d0 03		               bne  norep
.c20d	ce 29 c2	               dec  loopcount+1
.c210	ad 28 c2	norep          lda  loopcount
.c213	c9 00		               cmp  #$00
.c215	d0 05		               bne  out
.c217	4d 29 c2	               eor  loopcount+1
.c21a	c9 ff		               cmp  #$ff
.c21c	60		out            rts
>c21d	28		ymult          .byte     40
>c21e	00 00		addr1          .word     $0000
>c220	00 00		addr2          .word     $0000
>c222	00 00		bytecnt        .word     $0000
>c224	00 00		zp1            .word     $0000
>c226	00 00		zp2            .word     $0000
>c228	00 00		loopcount      .word     $0000

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c22a	01		a2hexcol       .byte     1              ; pour aputscxy
>c22b	00		a2hexbkcol     .byte     %00000000
.c22c			a2hexpos
>c22c	00		a2hexpx        .byte     0              ; pour aputsxy
>c22d	00		a2hexpy        .byte     0
>c22e	24		a2hexprefix    .byte     "$"            ; pour aputs
>c22f	00 00		a2hexstr       .word     $00
>c231	00 00		               .word     $00
>c233	00		               .byte     0              ; 0 end string
>c234	30 30 30 30	abin           .null     "00000000"
>c238	30 30 30 30 00
>c23d	20 20 20 00	adec           .null     "   "
.c241			putahexfmtxy
.c241	20 04 c0	               jsr  push
.c244	20 90 c2	               jsr  atohex
.c247	ae 2c c2	               ldx  a2hexpx
.c24a	ac 2d c2	               ldy  a2hexpy
.c24d	20 f1 14	               jsr  gotoxy
.c250	a2 2e		               ldx  #<a2hexprefix
.c252	a0 c2		               ldy  #>a2hexprefix
.c254	20 e3 14	               jsr  puts
.c257	20 3f c0	               jsr  pop
.c25a	60		               rts
.c25b			putahexfmt
.c25b	20 04 c0	               jsr  push
.c25e	20 90 c2	               jsr  atohex
.c261	a2 2e		               ldx  #<a2hexprefix
.c263	a0 c2		               ldy  #>a2hexprefix
.c265	20 e3 14	               jsr  puts
.c268	20 3f c0	               jsr  pop
.c26b	60		               rts
.c26c			putahex
.c26c	20 04 c0	               jsr  push
.c26f	20 90 c2	               jsr  atohex
.c272	a2 2f		               ldx  #<a2hexstr
.c274	a0 c2		               ldy  #>a2hexstr
.c276	20 e3 14	               jsr  puts
.c279	20 3f c0	               jsr  pop
.c27c	60		               rts
.c27d			nibtohex
.c27d	08		               php
.c27e	29 0f		               and  #$0f
.c280	f8		               sed
.c281	18		               clc
.c282	69 90		               adc  #$90
.c284	69 40		               adc  #$40
.c286	d8		               cld
.c287	28		               plp
.c288	60		               rts
.c289			lsra4bits
.c289	08		               php
.c28a	4a		               lsr
.c28b	4a		               lsr
.c28c	4a		               lsr
.c28d	4a		               lsr
.c28e	28		               plp
.c28f	60		               rts
.c290			atohex
.c290	08		               php
.c291	48		               pha
.c292	48		               pha
.c293	20 89 c2	               jsr  lsra4bits
.c296	20 7d c2	               jsr  nibtohex
.c299	8d 2f c2	               sta  a2hexstr
.c29c	68		               pla
.c29d	20 7d c2	               jsr  nibtohex
.c2a0	8d 30 c2	               sta  a2hexstr+1
.c2a3	a9 00		               lda  #$00                ; set end of string
.c2a5	8d 31 c2	               sta  a2hexstr+2
.c2a8	68		               pla
.c2a9	28		               plp
.c2aa	60		               rts
.c2ab			xy2hex
.c2ab	20 04 c0	               jsr  push
.c2ae	20 90 c2	               jsr  atohex
.c2b1	8a		               txa
.c2b2	48		               pha
.c2b3	20 89 c2	               jsr  lsra4bits
.c2b6	20 7d c2	               jsr  nibtohex
.c2b9	8d 2f c2	               sta  a2hexstr
.c2bc	68		               pla
.c2bd	20 7d c2	               jsr  nibtohex
.c2c0	8d 30 c2	               sta  a2hexstr+1
.c2c3	98		               tya
.c2c4	48		               pha
.c2c5	20 89 c2	               jsr  lsra4bits
.c2c8	20 7d c2	               jsr  nibtohex
.c2cb	8d 31 c2	               sta  a2hexstr+2
.c2ce	68		               pla
.c2cf	20 7d c2	               jsr  nibtohex
.c2d2	8d 32 c2	               sta  a2hexstr+3
.c2d5	a9 00		               lda  #$00                ; 0 ended string
.c2d7	8d 33 c2	               sta  a2hexstr+4
.c2da	20 3f c0	               jsr  pop
.c2dd			atobin
.c2dd	20 04 c0	               jsr  push
.c2e0	a2 08		               ldx  #8
.c2e2	a0 00		               ldy  #0
.c2e4	18		               clc
.c2e5	2a		nextbit        rol
.c2e6	48		               pha
.c2e7	69 00		               adc  #$00
.c2e9	29 01		               and  #$01
.c2eb	20 7d c2	               jsr  nibtohex
.c2ee	99 34 c2	               sta  abin,y
.c2f1	68		               pla
.c2f2	c8		               iny
.c2f3	ca		               dex
.c2f4	d0 ef		               bne  nextbit
.c2f6	a9 00		               lda  #0
.c2f8	99 34 c2	               sta  abin,y
.c2fb	20 3f c0	               jsr  pull
.c2fe	60		               rts
.c2ff			putabin
.c2ff	20 dd c2	               jsr     atobin
.c302	20 04 c0	               jsr     push
.c305	a2 34		               ldx     #<abin
.c307	a0 c2		               ldy     #>abin
.c309	20 e3 14	               jsr     puts
.c30c	20 3f c0	               jsr     pop
.c30f	60		               rts
.c310			printabin
.c310	20 04 c0	               jsr     push
.c313	a2 34		               ldx     #<abin
.c315	a0 c2		               ldy     #>abin
.c317	20 e3 14	               jsr     puts
.c31a	20 3f c0	               jsr     pop
.c31d	60		               rts
.c31e			putabinfmt
.c31e	08		               php
.c31f	48		               pha
.c320	a9 25		               lda     #"%"
.c322	20 95 14	               jsr     putch
.c325	68		               pla
.c326	20 ff c2	               jsr     putabin
.c329	28		               plp
.c32a	60		               rts
.c32b			putabinxy
.c32b	20 f1 14	               jsr     gotoxy
.c32e	20 ff c2	               jsr     putabin
.c331	60		               rts
.c332			putabinfmtxy
.c332	20 f1 14	               jsr     gotoxy
.c335	20 1e c3	               jsr     putabinfmt
.c338	60		               rts
.c339			atodec
.c339	20 04 c0	               jsr  push
.c33c	f8		               sed            ; On se place en mode décimal.
.c33d	aa		               tax            ; On déplace a dans x.
.c33e	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.c340	a9 00		               lda  #$00      ; 0 dans A.
.c342	18		nextbit        clc            ; Bit carry a 0.
.c343	69 01		               adc  #$01      ; Ajoute 1 a A.
.c345	90 01		               bcc  decx      ; Pas de carry, pas de report.
.c347	c8		               iny            ; On incrémente Y
.c348	ca		decx           dex            ; X=X-1
.c349	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.c34b	48		               pha            ; A sur le stack.
.c34c	98		               tya            ; Y dans A (MSB)
.c34d	20 7d c2	               jsr  nibtohex  ; a hex petsci ...
.c350	8d 3d c2	               sta  adec      ; ... dans tampon.
.c353	68		               pla            ; Récupere A
.c354	48		               pha            ;
.c355	20 7d c2	               jsr  nibtohex
.c358	8d 3f c2	               sta  adec+2
.c35b	68		               pla
.c35c	6a		               ror
.c35d	6a		               ror
.c35e	6a		               ror
.c35f	6a		               ror
.c360	20 7d c2	               jsr  nibtohex
.c363	8d 3e c2	               sta  adec+1
.c366	d8		               cld            ; On revient en mode binaire.
.c367	20 3f c0	               jsr  pull
.c36a	60		               rts
.c36b			putadec
.c36b	20 04 c0	               jsr  push
.c36e	20 39 c3	               jsr  atodec
.c371	a2 3d		               ldx  #<adec
.c373	a0 c2		               ldy  #>adec+1
.c375	20 e3 14	               jsr  puts
.c378	20 3f c0	               jsr  pop
.c37b	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.c37c			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.c37c	08		               php                 ; Sauvegarde le registre de status sur stack.
.c37d	8d 71 c5	               sta  rega           ; Sauvegarde Acc en mémoire.
.c380	68		               pla                 ; Récupère le registre de status du stack.
.c381	8d 74 c5	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.c384	8e 72 c5	               stx  regx           ; Sauvegarde le registre X en mémoire.
.c387	8c 73 c5	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.c38a	ba		               tsx                 ; Copie le registre S dans X.
.c38b	8e 75 c5	               stx  regs           ; Sauvegarde le registre S en mémoire.
.c38e	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.c38f	8d 77 c5	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.c392	8d 79 c5	               sta  regpcl2        ; ... une seconde fois.
.c395	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.c396	8d 76 c5	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.c399	8d 78 c5	               sta  regpch2        ; ... une seconde fois.
.c39c	ad 71 c5	               lda  rega           ; On commence par le registre Acc.
.c39f	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c3a0	20 7d c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c3a3	8d 0e c5	               sta  vala+1         ; ... et le place dans la chaine.
.c3a6	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c3a7	20 89 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c3aa	20 7d c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c3ad	8d 0d c5	               sta  vala           ; ... et le place dans la chaine.
.c3b0	ad 73 c5	               lda  regy           ; Ensuite, le registre Y.
.c3b3	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c3b4	20 7d c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c3b7	8d 25 c5	               sta  valy+1         ; ... et le place dans la chaine.
.c3ba	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c3bb	20 89 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c3be	20 7d c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c3c1	8d 24 c5	               sta  valy           ; ... et le place dans la chaine.
.c3c4	ad 72 c5	               lda  regx           ; Ensuite, le registre X.
.c3c7	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c3c8	20 7d c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c3cb	8d 19 c5	               sta  valx+1         ; ... et le place dans la chaine.
.c3ce	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c3cf	20 89 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c3d2	20 7d c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c3d5	8d 18 c5	               sta  valx           ; ... et le place dans la chaine.
.c3d8	ad 74 c5	               lda  regp           ; Ensuite, le registre de status.
.c3db	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c3dc	20 7d c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c3df	8d 30 c5	               sta  valp+1         ; ... et le place dans la chaine.
.c3e2	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c3e3	20 89 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c3e6	20 7d c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c3e9	8d 2f c5	               sta  valp           ; ... et le place dans la chaine.
.c3ec	ad 75 c5	               lda  regs           ; Ensuite, le pointeur de stack.
.c3ef	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c3f0	20 7d c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c3f3	8d 3b c5	               sta  vals+1         ; ... et le place dans la chaine.
.c3f6	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c3f7	20 89 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c3fa	20 7d c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c3fd	8d 3a c5	               sta  vals           ; ... et le place dans la chaine.
.c400	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.c401	ad 79 c5	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.c404	69 00		               adc  #$00           ; On y ajoute 1.
.c406	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.c408	ee 78 c5	               inc  regpch2        ; ... en incrémentant le MSB.
.c40b	8d 79 c5	noreport       sta  regpcl2        ; On le sauvegarde.
.c40e	ad 79 c5	               lda  regpcl2        ; On récupère la partie basse du compteur.
.c411	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c412	20 7d c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c415	8d 4b c5	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.c418	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c419	20 89 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c41c	20 7d c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c41f	8d 4a c5	               sta  valpcl         ; ... et lace le code à la position "--X-".
.c422	ad 78 c5	               lda regpch2         ; On récupère la partie haute du compteur.
.c425	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c426	20 7d c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c429	8d 49 c5	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.c42c	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c42d	20 89 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c430	20 7d c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c433	8d 48 c5	               sta  valpch         ; ... et lace le code à la position "X---".
.c436	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.c438	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c439	20 7d c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c43c	8d 5c c5	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.c43f	68		               pla
.c440	20 89 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c443	20 7d c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c446	8d 5b c5	               sta  valz1l         ; ... et lace le code à la position "--X-".
.c449	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.c44b	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c44c	20 7d c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c44f	8d 5a c5	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.c452	68		               pla
.c453	20 89 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c456	20 7d c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c459	8d 59 c5	               sta  valz1h         ; ... et lace le code à la position "X---".
.c45c	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.c45e	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c45f	20 7d c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c462	8d 6d c5	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.c465	68		               pla
.c466	20 89 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c469	20 7d c2	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c46c	8d 6c c5	               sta  valz2l         ; ... et lace le code à la position "--X-".
.c46f	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.c471	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c472	20 7d c2	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c475	8d 6b c5	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.c478	68		               pla
.c479	20 89 c2	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c47c	20 7d c2	               jsr  nibtohex
.c47f	8d 6a c5	               sta  valz2h         ; ... et lace le code à la position "X---".
.c482	20 72 c0	               jsr  pushreg
.c485	a2 05		               ldx  #<srega
.c487	a0 c5		               ldy  #>srega
.c489	20 2e 15	               jsr  putscxy
.c48c	20 a1 c0	               jsr  popreg
.c48f	20 72 c0	               jsr  pushreg
.c492	a2 11		               ldx  #<sregx
.c494	a0 c5		               ldy  #>sregx
.c496	20 2e 15	               jsr  putscxy
.c499	20 a1 c0	               jsr  popreg
.c49c	20 72 c0	               jsr  pushreg
.c49f	a2 1c		               ldx  #<sregy
.c4a1	a0 c5		               ldy  #>sregy
.c4a3	20 2e 15	               jsr  putscxy
.c4a6	20 a1 c0	               jsr  popreg
.c4a9	20 72 c0	               jsr  pushreg
.c4ac	a2 28		               ldx  #<sregp
.c4ae	a0 c5		               ldy  #>sregp
.c4b0	20 2e 15	               jsr  putscxy
.c4b3	20 a1 c0	               jsr  popreg
.c4b6	20 72 c0	               jsr  pushreg
.c4b9	a2 33		               ldx  #<sregs
.c4bb	a0 c5		               ldy  #>sregs
.c4bd	20 2e 15	               jsr  putscxy
.c4c0	20 a1 c0	               jsr  popreg
.c4c3	20 72 c0	               jsr  pushreg
.c4c6	a2 3f		               ldx  #<sregpc
.c4c8	a0 c5		               ldy  #>sregpc
.c4ca	20 2e 15	               jsr  putscxy
.c4cd	20 a1 c0	               jsr  popreg
.c4d0	20 72 c0	               jsr  pushreg
.c4d3	a2 4f		               ldx  #<sregz1
.c4d5	a0 c5		               ldy  #>sregz1
.c4d7	20 2e 15	               jsr  putscxy
.c4da	20 a1 c0	               jsr  popreg
.c4dd	20 72 c0	               jsr  pushreg
.c4e0	a2 60		               ldx  #<sregz2
.c4e2	a0 c5		               ldy  #>sregz2
.c4e4	20 2e 15	               jsr  putscxy
.c4e7	20 a1 c0	               jsr  popreg
.c4ea	ad 76 c5	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.c4ed	48		               pha                 ; ... à la bonne position sur la pile.
.c4ee	ad 77 c5	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.c4f1	48		               pha                 ; ... à la bonne position sur la pile.
.c4f2	ae 75 c5	               ldx  regs           ; On replace tous les registre à leurs ...
.c4f5	9a		               txs                 ; ...
.c4f6	ac 73 c5	               ldy  regy           ; ...
.c4f9	ae 72 c5	               ldx  regx           ; ...
.c4fc	ad 74 c5	               lda  regp           ; ...
.c4ff	48		               pha                 ; ...
.c500	ad 71 c5	               lda  rega           ; ...
.c503	28		               plp                 ; ... valeurs initiales
.c504	60		               rts
>c505	07 01 17	srega   .byte   cyellow,coln+1,line
>c508	20 20 01 3a	        .text   '  a:$' ;4,24
>c50c	24
>c50d	00 00 20 00	vala    .byte   0,0,32,0
>c511	03 09 17	sregx   .byte   ccyan,coln+9,line
>c514	20 18 3a 24	        .text   ' x:$' ;4,24
>c518	00 00 20 00	valx    .byte   0,0,32,0
>c51c	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>c51f	20 19 3a 20	        .text   ' y: $' ;4,24
>c523	24
>c524	00 00 20 00	valy    .byte   0,0,32,0
>c528	08 18 17	sregp   .byte   corange,coln+24,line
>c52b	20 10 3a 24	        .text   ' p:$' ;4,24
>c52f	00 00 20 00	valp    .byte   0,0,32,0
>c533	0a 1f 17	sregs   .byte   clightred,coln+31,line
>c536	20 13 3a 24	        .text   ' s:$' ;4,24
>c53a	00 00 20 20	vals    .byte   0,0,32,32,0
>c53e	00
>c53f	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>c543	20 10 03 3a	        .text   ' pc:$' ;4,24
>c547	24
>c548	00 00		valpch  .byte   0,0
>c54a	00 00 20 20	valpcl  .byte   0,0,32,32,0
>c54e	00
>c54f	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>c553	20 1a 10 31	        .text   ' zp1:$' ;4,24
>c557	3a 24
>c559	00 00		valz1h  .byte   0,0
>c55b	00 00 20 20	valz1l  .byte   0,0,32,32,0
>c55f	00
>c560	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>c564	20 1a 10 32	        .text   ' zp2:$' ;4,24
>c568	3a 24
>c56a	00 00		valz2h  .byte   0,0
>c56c	00 00 20 20	valz2l  .byte   0,0,32,32,0
>c570	00
>c571	00		rega    .byte   0
>c572	00		regx    .byte   0
>c573	00		regy    .byte   0
>c574	00		regp    .byte   0
>c575	00		regs    .byte   0
>c576	00		regpch  .byte   0
>c577	00		regpcl  .byte   0
>c578	00		regpch2 .byte   0
>c579	00		regpcl2 .byte   0
>c57a	00		vzp1h   .byte   0
>c57b	00		vzp1l   .byte   0
>c57c	00		vzp2h   .byte   0
>c57d	00		vzp2l   .byte   0

;******  Return to file: j2tester.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib -i -L j2tester.txt -o j2tester.prg j2tester.asm
; Mon Oct 14 12:06:58 2024

;Offset	;Hex		;Source

;******  Processing input file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/header-c64.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: j2tester.asm

.080d			main
.080d	20 64 0d	               jsr       scrmaninit
.0810	20 b0 13	               jsr       js_init
.0813	a9 80		               lda       #$80
.0815	8d b7 0d	               sta       curcol
.0818	a9 00		               lda       #0
.081a	8d 21 d0	               sta       vicback0col
.081d	a9 02		               lda       #vrouge
.081f	8d b8 0d	               sta       brdcol
.0822	8d 20 d0	               sta       vicbordcol
.0825	20 70 0d	               jsr       cls
.0828	a9 20		               lda       #$20
.082a	09 00		               ora       #%00000000
.082c	a0 04		               ldy       #$04
.082e	a2 04		               ldx       #$04
.0830	20 e6 0a	               jsr       memfill
.0833	a9 00		               lda       #$00
.0835	a0 d8		               ldy       #$d8
.0837	20 e6 0a	               jsr       memfill
.083a	20 3c 18	               jsr       sprt_init
.083d	20 73 0d	goagain        jsr       setinverse
.0840	a2 0f		               ldx       #<bstring1
.0842	a0 09		               ldy       #>bstring1
.0844	20 88 0d	               jsr       putscxy
.0847	a2 3c		               ldx       #<bstring2
.0849	a0 09		               ldy       #>bstring2
.084b	20 88 0d	               jsr       putscxy
.084e	a2 69		               ldx       #<bstring3
.0850	a0 09		               ldy       #>bstring3
.0852	20 88 0d	               jsr       putscxy
.0855	a2 96		               ldx       #<bstring4
.0857	a0 09		               ldy       #>bstring4
.0859	20 88 0d	               jsr       putscxy
.085c	20 76 0d	               jsr       clrinverse
.085f	a2 ad		               ldx       #<js_status1
.0861	a0 09		               ldy       #>js_status1
.0863	20 88 0d	               jsr       putscxy
.0866	a2 c5		               ldx       #<js_status2
.0868	a0 09		               ldy       #>js_status2
.086a	20 88 0d	               jsr       putscxy
.086d	a2 dc		               ldx       #<js_status3
.086f	a0 09		               ldy       #>js_status3
.0871	20 88 0d	               jsr       putscxy
.0874	a2 f5		               ldx       #<js_status4
.0876	a0 09		               ldy       #>js_status4
.0878	20 88 0d	               jsr       putscxy
.087b	a2 0e		               ldx       #<js_status5
.087d	a0 0a		               ldy       #>js_status5
.087f	20 88 0d	               jsr       putscxy
.0882	a2 24		               ldx       #<js_status6
.0884	a0 0a		               ldy       #>js_status6
.0886	20 88 0d	               jsr       putscxy
.0889	a2 00		               ldx       #$00
.088b	a0 0f		               ldy       #$0f
.088d	20 94 0d	               jsr       gotoxy
.0890	a9 07		               lda       #vjaune
.0892	20 8b 0d	               jsr       setcurcol
.0895	a2 00		               ldx       #$00
.0897	20 91 0d	               jsr       setbkcol
.089a			looper
.089a	20 c7 13	               jsr       js_scan
.089d	20 e5 15	               jsr       js_showvals
.08a0	20 c8 18	               jsr       sprt_move
.08a3			loopit
.08a3	a2 16		               ldx       #$16
.08a5	a0 11		               ldy       #$11
.08a7	20 94 0d	               jsr       gotoxy
.08aa	a9 03		               lda       #3
.08ac	20 8b 0d	               jsr       setcurcol
.08af	ee 0e 09	               inc       onebyte
.08b2	ad 0e 09	               lda       onebyte
.08b5	ad ad 17	               lda       js_2fire
.08b8	20 03 0d	               jsr       putabinfmt
.08bb	48		               pha
.08bc	ad ad 17	               lda       js_2fire
.08bf	f0 42		               beq       nochange
.08c1	ad 20 d0	               lda       vicbordcol
.08c4	18		               clc
.08c5	69 00		               adc       #$0
.08c7	29 0f		               and       #$0f
.08c9	8d 20 d0	               sta       vicbordcol
.08cc	ad ac 17	               lda       js_2y
.08cf	c9 04		               cmp       #$04
.08d1	d0 20		               bne       toborder
.08d3	ad ab 17	               lda       js_2x
.08d6	c9 0b		               cmp       #$0b
.08d8	30 19		               bmi       toborder
.08da	c9 1d		               cmp       #$1d
.08dc	10 15		               bpl       toborder
.08de	ee 91 18	               inc       sprt_ptr
.08e1	ad 91 18	               lda       sprt_ptr
.08e4	20 f2 11	               jsr       showregs
.08e7	c9 09		               cmp       #9
.08e9	90 02		               bcc       drawsptr
.08eb	a9 00		               lda       #$00
.08ed	8d 91 18	drawsptr       sta       sprt_ptr
.08f0	20 3c 18	               jsr       sprt_init
.08f3	ad 20 d0	toborder       lda       vicbordcol
.08f6	38		               sec
.08f7	69 00		               adc       #0
.08f9	29 0f		               and       #$0f
.08fb	8d 29 d0	               sta       $d029
.08fe	a9 00		               lda       #$00
.0900	8d ad 17	               sta       js_2fire
.0903			nochange
.0903	e8		               inx
.0904	68		               pla
.0905	20 e1 ff	               jsr       kstop
.0908	d0 90		               bne       looper
.090a	20 66 fe	               jsr       k_warmboot
.090d	60		out            rts
>090e	00		onebyte        .byte     0
>090f	0e 40 00 00	bstring1       .byte     vbleu1,bkcol1,0,0
>0913	20 20 20 20	               .text     "      Visualisation du port jeu #2      "
>0917	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>0927	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>0937	20 20 20 20
>093b	00		               .byte     0
>093c	0b 80 00 01	bstring2       .byte     vgris,bkcol2,0,1
>0940	20 50 12 0f	               .text     " Programme assembleur pour 6502 sur C64 "
>0944	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>0954	12 20 10 0f 15 12 20 36 35 30 32 20 13 15 12 20
>0964	43 36 34 20
>0968	00		               .byte     0
>0969	0a c0 00 02	bstring3       .byte     vrose,bkcol3,0,2
>096d	20 20 20 20	               .text     "     par Daniel Lafrance (2024-06) C    "
>0971	20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06 12
>0981	01 0e 03 05 20 28 32 30 32 34 2d 30 36 29 20 43
>0991	20 20 20 20
>0995	00		               .byte     0
>0996	07 c0 0b 04	bstring4       .byte     vjaune,bkcol3,11,4
>099a	20 43 08 01	               .text     " Changer pointeur "
>099e	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>09ac	00		               .byte     0
>09ad	0d 00 13 16	js_status1     .byte     vvert1,bkcol0,19,22
>09b1	20 20 20 15	               .text     "   up <----1> haut "
>09b5	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>09c4	00		               .byte     0
>09c5	0e 00 13 15	js_status2     .byte     vbleu1,bkcol0,19,21
>09c9	20 04 0f 17	               .text     " down <---2-> bas "
>09cd	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>09db	00		               .byte     0
>09dc	0a 00 13 14	js_status3     .byte     vrose,bkcol0,19,20
>09e0	20 0c 05 06	               .text     " left <--4--> gauche"
>09e4	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>09f4	00		               .byte     0
>09f5	07 00 13 13	js_status4     .byte     vjaune,bkcol0,19,19
>09f9	12 09 07 08	               .text     "right <-8---> droite"
>09fd	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>0a0d	00		               .byte     0
>0a0e	01 00 13 12	js_status5     .byte     vblanc,bkcol0,19,18
>0a12	20 46 09 12	               .text     " Fire <1----> Feu"
>0a16	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>0a23	00		               .byte     0
>0a24	03 00 01 17	js_status6     .byte     vcyan,bkcol0,1,23
>0a28	2b 2d 3e 20	               .text     "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>0a2c	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>0a3c	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>0a4c	24 31 46
>0a4f	00		               .byte     0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0a50	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0a54	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0a58			libtart

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-pushpop.asm

.0a58			push
.0a58	08		          php            ; stack : flg, pcl, pch
.0a59	78		          sei
.0a5a	8d 94 0a	          sta  ra        ; save a
.0a5d	68		          pla            ; stack : pcl, pch
.0a5e	8d 93 0a	          sta  rp        ; save rp
.0a61	68		          pla            ; stack : pch
.0a62	8d 95 0a	          sta  pc        ; save pcl
.0a65	68		          pla            ; stack : -
.0a66	8d 96 0a	          sta  pc+1      ; save pch
.0a69	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0a6b	48		          pha            ; stack : zp1l
.0a6c	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0a6e	48		          pha            ; stack : zp1h, zp1l
.0a6f	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0a71	48		          pha            ; stack : zp2l, zp1h, zp1l
.0a72	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0a74	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0a75	ad 93 0a	          lda  rp        ; get rp
.0a78	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0a79	ad 94 0a	          lda  ra        ; get a
.0a7c	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0a7d	8a		          txa            ; get x
.0a7e	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a7f	98		          tya            ; get y
.0a80	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a81	ad 96 0a	          lda  pc+1      ; get pch
.0a84	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a85	ad 95 0a	          lda  pc        ; get pcl
.0a88	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a89	ad 93 0a	          lda  rp        ; get rp
.0a8c	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a8d	ad 94 0a	          lda  ra        ; get a
.0a90	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a91	58		          cli
.0a92	60		          rts
>0a93	00		rp        .byte     0
>0a94	00		ra        .byte     0
>0a95	00 00		pc        .word     0
.0a97			pull
.0a97			pop
.0a97	78		          sei
.0a98	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a99	8d cc 0a	          sta  pc        ; save pcl
.0a9c	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0a9d	8d cd 0a	          sta  pc+1      ; save pch
.0aa0	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0aa1	a8		          tay            ; set y
.0aa2	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0aa3	aa		          tax            ; set x
.0aa4	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0aa5	8d cb 0a	          sta  ra        ; save a
.0aa8	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0aa9	8d ca 0a	          sta  rp        ; save rp
.0aac	68		          pla            ; stack : zp2l, zp1h, zp1l
.0aad	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0aaf	68		          pla            ; stack : zp1h, zp1l
.0ab0	85 fd		          sta  zpage2    ; get zpage2 High byte
.0ab2	68		          pla            ; stack : zp1l
.0ab3	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0ab5	68		          pla            ; stack :
.0ab6	85 fb		          sta  zpage1    ; get zpage1 High byte
.0ab8	ad cd 0a	          lda  pc+1      ; get pch
.0abb	48		          pha            ; stack : pch
.0abc	ad cc 0a	          lda  pc
.0abf	48		          pha            ; stack : pcl, pch
.0ac0	ad ca 0a	          lda  rp        ; get rp
.0ac3	48		          pha            ; stack : rp, pcl, pch
.0ac4	ad cb 0a	          lda  ra        ; set ra
.0ac7	58		          cli
.0ac8	28		          plp            ; stack : pcl, pch
.0ac9	60		          rts
>0aca	00		rp        .byte     0
>0acb	00		ra        .byte     0
>0acc	00 00		pc        .word     0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-mem.asm

.0ace			blkfill
.0ace	20 58 0a	bf0            jsr  push
.0ad1	20 8f 0b	               jsr  savezp1
.0ad4	84 fc		               sty  zpage1+1
.0ad6	a0 00		               ldy  #$00
.0ad8	84 fb		               sty  zpage1
.0ada	91 fb		bf1            sta  (zpage1),y
.0adc	c8		               iny
.0add	d0 fb		               bne  bf1
.0adf	20 9e 0b	               jsr  restzp1
.0ae2	20 97 0a	               jsr  pop
.0ae5	60		               rts
.0ae6			memfill
.0ae6	20 58 0a	               jsr  push
.0ae9	20 ce 0a	mf1            jsr  blkfill
.0aec	c8		               iny
.0aed	ca		               dex
.0aee	d0 f9		               bne  mf1
.0af0	20 97 0a	               jsr  pop
.0af3	60		               rts
.0af4			memmove
.0af4	20 58 0a	               jsr  push
.0af7	ba		               tsx            ; On se crée un pointeur ...
.0af8	8a		               txa
.0af9	18		               clc
.0afa	69 0b		               adc  #11
.0afc	a8		               tay
.0afd	a2 06		               ldx  #$06
.0aff	b9 00 01	nextbyte       lda  $0100,y
.0b02	99 4e 0b	               sta  words,y
.0b05	c8		               iny
.0b06	ca		               dex
.0b07	d0 f6		               bne  nextbyte
.0b09	ad 4e 0b	               lda  s
.0b0c	8d 25 0b	               sta  source+1
.0b0f	ad 4f 0b	               lda  s+1
.0b12	8d 26 0b	               sta  source+2
.0b15	ad 50 0b	               lda  d
.0b18	8d 22 0b	               sta  destin+1
.0b1b	ad 51 0b	               lda  d+1
.0b1e	8d 23 0b	               sta  destin+2
.0b21	ad ff ff	destin         lda  $ffff
.0b24	8d ff ff	source         sta  $ffff
.0b27	ee 22 0b	               inc  destin+1
.0b2a	d0 03		               bne  src
.0b2c	ee 23 0b	               inc  destin+2
.0b2f	ee 25 0b	src            inc  source+1
.0b32	d0 03		               bne  cnt
.0b34	ee 26 0b	               inc  source+2
.0b37	ad 52 0b	cnt            lda  compte
.0b3a	d0 08		               bne  decit
.0b3c	ad 53 0b	               lda  compte+1
.0b3f	f0 09		               beq  fini
.0b41	ce 53 0b	               dec  compte+1
.0b44	ce 52 0b	decit          dec  compte
.0b47	4c 21 0b	               jmp  destin
.0b4a	20 97 0a	fini           jsr  pop
.0b4d	60		               rts
.0b4e			words
>0b4e	00 00		s         .word     $0000
>0b50	00 00		d         .word     $0000
>0b52	00 00		compte    .word     $0000
.0b54			decword
.0b54	20 58 0a	               jsr  push
.0b57	86 fd		               stx  zpage2
.0b59	84 fe		               sty  zpage2+1
.0b5b	20 97 0a	               jsr  pop
.0b5e	60		               rts
.0b5f			inczp1
.0b5f	08		               php
.0b60	48		               pha
.0b61	e6 fb		               inc  zpage1
.0b63	a5 fb		               lda  zpage1
.0b65	d0 02		               bne  nopage
.0b67	e6 fc		               inc  zpage1+1
.0b69	68		nopage         pla
.0b6a	28		               plp
.0b6b	60		               rts
.0b6c			deczp1
.0b6c	08		                php
.0b6d	48		                pha
.0b6e	c6 fb		                dec  zpage1
.0b70	d0 02		                bne  nopage
.0b72	c6 fc		                dec  zpage1+1
.0b74	68		nopage          pla
.0b75	28		                plp
.0b76	60		                rts
.0b77			inczp2
.0b77	08		               php
.0b78	48		               pha
.0b79	e6 fd		               inc  zpage2
.0b7b	a5 fd		               lda  zpage2
.0b7d	d0 02		               bne  nopage
.0b7f	e6 fe		               inc  zpage2+1
.0b81	68		nopage         pla
.0b82	28		               plp
.0b83	60		               rts
.0b84			deczp2
.0b84	08		               php
.0b85	48		               pha
.0b86	a5 fd		               lda  zpage2
.0b88	d0 02		               bne  nopage
.0b8a	c6 fe		               dec  zpage2+1
.0b8c	68		nopage         pla
.0b8d	28		               plp
.0b8e	60		               rts
.0b8f			savezp1
.0b8f	08		               php
.0b90	48		               pha
.0b91	a5 fb		               lda  zpage1
.0b93	8d 0b 0c	               sta  zp1
.0b96	a5 fc		               lda  zpage1+1
.0b98	8d 0c 0c	               sta  zp1+1
.0b9b	68		               pla
.0b9c	28		               plp
.0b9d	60		               rts
.0b9e			restzp1
.0b9e	08		               php
.0b9f	48		               pha
.0ba0	ad 0b 0c	               lda zp1
.0ba3	85 fb		               sta zpage1
.0ba5	ad 0c 0c	               lda zp1+1
.0ba8	85 fc		               sta zpage1+1
.0baa	68		               pla
.0bab	28		               plp
.0bac	60		               rts
.0bad			savezp2
.0bad	08		         php
.0bae	48		         pha
.0baf	a5 fd		         lda zpage2
.0bb1	8d 0d 0c	         sta zp2
.0bb4	a5 fe		         lda zpage2+1
.0bb6	8d 0e 0c	         sta zp2+1
.0bb9	68		         pla
.0bba	28		         plp
.0bbb	60		         rts
.0bbc			restzp2
.0bbc	08		                php
.0bbd	48		                pha
.0bbe	ad 0d 0c	                lda  zp2
.0bc1	85 fd		                sta  zpage2
.0bc3	ad 0e 0c	                lda  zp2+1
.0bc6	85 fe		                sta  zpage2+1
.0bc8	68		                pla
.0bc9	28		                plp
.0bca	60		                rts
.0bcb			xy2addr
.0bcb	08		                php
.0bcc	48		                pha
.0bcd	8a		                txa
.0bce	48		                pha
.0bcf	98		                tya
.0bd0	48		                pha
.0bd1	ad 06 0c	                lda     addr1+1
.0bd4	8d 08 0c	                sta     addr2+1
.0bd7	ad 05 0c	                lda     addr1
.0bda	8d 07 0c	                sta     addr2
.0bdd	c0 00		                cpy     #$00
.0bdf	f0 0f		                beq     addx
.0be1	18		moreline        clc
.0be2	6d 04 0c	                adc     ymult
.0be5	90 03		                bcc     norepy
.0be7	ee 08 0c	                inc     addr2+1
.0bea	8d 07 0c	norepy          sta     addr2
.0bed	88		                dey
.0bee	d0 f1		                bne     moreline
.0bf0	8a		addx            txa
.0bf1	18		                clc
.0bf2	6d 07 0c	                adc     addr2
.0bf5	90 03		                bcc     thatsit
.0bf7	ee 08 0c	                inc     addr2+1
.0bfa	8d 07 0c	thatsit         sta     addr2
.0bfd	68		                pla
.0bfe	a8		                tay
.0bff	68		                pla
.0c00	aa		                tax
.0c01	68		                pla
.0c02	28		                plp
.0c03	60		                rts
>0c04	28		ymult          .byte     40
>0c05	00 00		addr1          .word     $0000
>0c07	00 00		addr2          .word     $0000
>0c09	00 00		bytecnt        .word     $0000
>0c0b	00 00		zp1        .word   $0000
>0c0d	00 00		zp2        .word   $0000

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-cbm-hex.asm

>0c0f	01		a2hexcol       .byte     1              ; pour aputscxy
>0c10	00		a2hexbkcol     .byte     %00000000
.0c11			a2hexpos
>0c11	00		a2hexpx        .byte     0              ; pour aputsxy
>0c12	00		a2hexpy        .byte     0
>0c13	24		a2hexprefix    .byte     "$"            ; pour aputs
>0c14	00 00		a2hexstr       .word     $00
>0c16	00 00		               .word     $00
>0c18	00		               .byte     0              ; 0 end string
>0c19	30 30 30 30	abin           .null     "00000000"
>0c1d	30 30 30 30 00
>0c22	20 20 20 00	adec           .null     "   "
.0c26			putahexfmtxy
.0c26	20 58 0a	               jsr  push
.0c29	20 75 0c	               jsr  a2hex
.0c2c	ae 11 0c	               ldx  a2hexpx
.0c2f	ac 12 0c	               ldy  a2hexpy
.0c32	20 94 0d	               jsr  gotoxy
.0c35	a2 13		               ldx  #<a2hexprefix
.0c37	a0 0c		               ldy  #>a2hexprefix
.0c39	20 82 0d	               jsr  puts
.0c3c	20 97 0a	               jsr  pop
.0c3f	60		               rts
.0c40			putahexfmt
.0c40	20 58 0a	               jsr  push
.0c43	20 75 0c	               jsr  a2hex
.0c46	a2 13		               ldx  #<a2hexprefix
.0c48	a0 0c		               ldy  #>a2hexprefix
.0c4a	20 82 0d	               jsr  puts
.0c4d	20 97 0a	               jsr  pop
.0c50	60		               rts
.0c51			putahex
.0c51	20 58 0a	               jsr  push
.0c54	20 75 0c	               jsr  a2hex
.0c57	a2 14		               ldx  #<a2hexstr
.0c59	a0 0c		               ldy  #>a2hexstr
.0c5b	20 82 0d	               jsr  puts
.0c5e	20 97 0a	               jsr  pop
.0c61	60		               rts
.0c62			nib2hex
.0c62	08		               php
.0c63	29 0f		               and  #$0f
.0c65	f8		               sed
.0c66	18		               clc
.0c67	69 90		               adc  #$90
.0c69	69 40		               adc  #$40
.0c6b	d8		               cld
.0c6c	28		               plp
.0c6d	60		               rts
.0c6e			lsra4bits
.0c6e	08		               php
.0c6f	4a		               lsr
.0c70	4a		               lsr
.0c71	4a		               lsr
.0c72	4a		               lsr
.0c73	28		               plp
.0c74	60		               rts
.0c75			a2hex
.0c75	08		               php
.0c76	48		               pha
.0c77	48		               pha
.0c78	20 6e 0c	               jsr  lsra4bits
.0c7b	20 62 0c	               jsr  nib2hex
.0c7e	8d 14 0c	               sta  a2hexstr
.0c81	68		               pla
.0c82	20 62 0c	               jsr  nib2hex
.0c85	8d 15 0c	               sta  a2hexstr+1
.0c88	a9 00		               lda  #$00                ; set end of string
.0c8a	8d 16 0c	               sta  a2hexstr+2
.0c8d	68		               pla
.0c8e	28		               plp
.0c8f	60		               rts
.0c90			xy2hex
.0c90	20 58 0a	               jsr  push
.0c93	20 75 0c	               jsr  a2hex
.0c96	8a		               txa
.0c97	48		               pha
.0c98	20 6e 0c	               jsr  lsra4bits
.0c9b	20 62 0c	               jsr  nib2hex
.0c9e	8d 14 0c	               sta  a2hexstr
.0ca1	68		               pla
.0ca2	20 62 0c	               jsr  nib2hex
.0ca5	8d 15 0c	               sta  a2hexstr+1
.0ca8	98		               tya
.0ca9	48		               pha
.0caa	20 6e 0c	               jsr  lsra4bits
.0cad	20 62 0c	               jsr  nib2hex
.0cb0	8d 16 0c	               sta  a2hexstr+2
.0cb3	68		               pla
.0cb4	20 62 0c	               jsr  nib2hex
.0cb7	8d 17 0c	               sta  a2hexstr+3
.0cba	a9 00		               lda  #$00                ; 0 ended string
.0cbc	8d 18 0c	               sta  a2hexstr+4
.0cbf	20 97 0a	               jsr  pop
.0cc2			atobin
.0cc2	20 58 0a	               jsr  push
.0cc5	a2 08		               ldx  #8
.0cc7	a0 00		               ldy  #0
.0cc9	18		               clc
.0cca	2a		nextbit        rol
.0ccb	48		               pha
.0ccc	69 00		               adc  #$00
.0cce	29 01		               and  #$01
.0cd0	20 62 0c	               jsr  nib2hex
.0cd3	99 19 0c	               sta  abin,y
.0cd6	68		               pla
.0cd7	c8		               iny
.0cd8	ca		               dex
.0cd9	d0 ef		               bne  nextbit
.0cdb	a9 00		               lda  #0
.0cdd	99 19 0c	               sta  abin,y
.0ce0	20 97 0a	               jsr  pull
.0ce3	60		               rts
.0ce4			putabin
.0ce4	20 c2 0c	               jsr     atobin
.0ce7	20 58 0a	               jsr     push
.0cea	a2 19		               ldx     #<abin
.0cec	a0 0c		               ldy     #>abin
.0cee	20 82 0d	               jsr     puts
.0cf1	20 97 0a	               jsr     pop
.0cf4	60		               rts
.0cf5			printabin
.0cf5	20 58 0a	               jsr     push
.0cf8	a2 19		               ldx     #<abin
.0cfa	a0 0c		               ldy     #>abin
.0cfc	20 82 0d	               jsr     puts
.0cff	20 97 0a	               jsr     pop
.0d02	60		               rts
.0d03			putabinfmt
.0d03	08		               php
.0d04	48		               pha
.0d05	a9 25		               lda     #"%"
.0d07	20 7f 0d	               jsr     putch
.0d0a	68		               pla
.0d0b	20 e4 0c	               jsr     putabin
.0d0e	28		               plp
.0d0f	60		               rts
.0d10			putabinxy
.0d10	20 94 0d	               jsr     gotoxy
.0d13	20 e4 0c	               jsr     putabin
.0d16	60		               rts
.0d17			putabinfmtxy
.0d17	20 94 0d	               jsr     gotoxy
.0d1a	20 03 0d	               jsr     putabinfmt
.0d1d	60		               rts
.0d1e			atodec
.0d1e	20 58 0a	               jsr  push
.0d21	f8		               sed
.0d22	aa		               tax
.0d23	a0 00		               ldy  #$00
.0d25	a9 00		               lda  #$00
.0d27	18		nextbit        clc
.0d28	69 01		               adc  #$01
.0d2a	90 01		               bcc  decx
.0d2c	c8		               iny
.0d2d	ca		decx           dex
.0d2e	d0 f7		               bne  nextbit
.0d30	48		               pha
.0d31	98		               tya
.0d32	20 62 0c	               jsr  nib2hex
.0d35	8d 22 0c	               sta  adec
.0d38	68		               pla
.0d39	48		               pha
.0d3a	20 62 0c	               jsr  nib2hex
.0d3d	8d 24 0c	               sta  adec+2
.0d40	68		               pla
.0d41	6a		               ror
.0d42	6a		               ror
.0d43	6a		               ror
.0d44	6a		               ror
.0d45	20 62 0c	               jsr  nib2hex
.0d48	8d 23 0c	               sta  adec+1
.0d4b	d8		               cld
.0d4c	20 97 0a	               jsr  pull
.0d4f	60		               rts
>0d50	00 00 00	buffer         .byte     0,0,0
.0d53			putadec
.0d53	20 58 0a	               jsr  push
.0d56	20 1e 0d	               jsr  atodec
.0d59	a2 22		               ldx  #<adec
.0d5b	a0 0c		               ldy  #>adec+1
.0d5d	20 82 0d	               jsr  puts
.0d60	20 97 0a	               jsr  pop
.0d63	60		               rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-text-sd.asm

=$00			sd_bkcol       =    %00000000
=$00			sd_bkcol0      =    %00000000
=$40			sd_bkcol1      =    %01000000
=$80			sd_bkcol2      =    %10000000
=$c0			sd_bkcol3      =    %11000000
=$00			bkcol          =    sd_bkcol
=$00			bkcol0         =    sd_bkcol0
=$40			bkcol1         =    sd_bkcol1
=$80			bkcol2         =    sd_bkcol2
=$c0			bkcol3         =    sd_bkcol3
.0d64	4c b2 0d	scrmaninit     jmp     nowhere
.0d67	4c b2 0d	curshome       jmp     nowhere
.0d6a	4c b2 0d	incscrptr      jmp     nowhere
.0d6d	4c b2 0d	synccolptr     jmp     nowhere
.0d70	4c b2 0d	cls            jmp     nowhere
.0d73	4c b2 0d	setinverse     jmp     nowhere
.0d76	4c b2 0d	clrinverse     jmp     nowhere
.0d79	4c b2 0d	z2putch        jmp     nowhere
.0d7c	4c b2 0d	z2puts         jmp     nowhere
.0d7f	4c b2 0d	putch          jmp     nowhere
.0d82	4c b2 0d	puts           jmp     nowhere
.0d85	4c b2 0d	putsxy         jmp     nowhere
.0d88	4c b2 0d	putscxy        jmp     nowhere
.0d8b	4c b2 0d	setcurcol      jmp     nowhere
.0d8e	4c b2 0d	setbakcols     jmp     nowhere
.0d91	4c b2 0d	setbkcol       jmp     nowhere
.0d94	4c b2 0d	gotoxy         jmp     nowhere
.0d97	4c b2 0d	saddscrptr     jmp     nowhere
.0d9a	4c b2 0d	scrptr2str     jmp     nowhere
.0d9d	4c b2 0d	scrptr2zp1     jmp     nowhere
.0da0	4c b2 0d	colptr2zp1     jmp     nowhere
.0da3	4c b2 0d	scrptr2zp2     jmp     nowhere
.0da6	4c b2 0d	colptr2zp2     jmp     nowhere
.0da9	4c b2 0d	putrahex       jmp     nowhere
.0dac	4c b2 0d	putrahexxy     jmp     nowhere
.0daf	4c b2 0d	putrahexcxy    jmp     nowhere
.0db2	60		nowhere        rts
>0db3	00 00		scrptr          .word   $00
>0db5	00 00		colptr          .word   $00
>0db7	00		curcol          .byte   $00
>0db8	0c		brdcol          .byte   $0c
>0db9	00		bakcol          .byte   $00
>0dba	00		bakcol0         .byte   vnoir           ;$0b
>0dbb	02		bakcol1         .byte   vrouge          ;$0b
>0dbc	05		bakcol2         .byte   vvert           ;$0b
>0dbd	06		bakcol3         .byte   vbleu           ;$0b
>0dbe	00		inverse         .byte   $00
>0dbf	00 00 00 00	scraddr         .byte   0,0,0,0,0
>0dc3	00
>0dc4	00 00 00 00	coladdr         .byte   0,0,0,0,0
>0dc8	00
=$0db3			sd_scrptr       =    scrptr
=$0db5			sd_colptr       =    colptr
=$0db7			sd_curcol       =    curcol
=$0db8			sd_brdcol       =    brdcol
=$0db9			sd_bakcol       =    bakcol
=$0dba			sd_bakcol0      =    bakcol0
=$0dbb			sd_bakcol1      =    bakcol1
=$0dbc			sd_bakcol2      =    bakcol2
=$0dbd			sd_bakcol3      =    bakcol3
=$0dbe			sd_inverse      =    inverse
=$0dbf			sd_scraddr      =    scraddr
=$0dc4			sd_coladdr      =    coladdr
=$0dc9			setvectors   =       sd_setvectors
.0dc9			sd_setvectors
.0dc9	20 58 0a	               jsr  push
.0dcc	a9 4c		               lda     #$4c
.0dce	8d 64 0d	               sta     scrmaninit
.0dd1	a9 56		               lda     #<sd_scrmaninit
.0dd3	8d 65 0d	               sta     scrmaninit+1
.0dd6	a9 0f		               lda     #>sd_scrmaninit
.0dd8	8d 66 0d	               sta     scrmaninit+2
.0ddb	a9 4c		               lda     #$4c
.0ddd	8d 67 0d	               sta     curshome
.0de0	a9 64		               lda     #<sd_curshome
.0de2	8d 68 0d	               sta     curshome+1
.0de5	a9 0f		               lda     #>sd_curshome
.0de7	8d 69 0d	               sta     curshome+2
.0dea	a9 4c		               lda     #$4c
.0dec	8d 6a 0d	               sta     incscrptr
.0def	a9 8e		               lda     #<sd_incscrptr
.0df1	8d 6b 0d	               sta     incscrptr+1
.0df4	a9 0f		               lda     #>sd_incscrptr
.0df6	8d 6c 0d	               sta     incscrptr+2
.0df9	a9 4c		               lda     #$4c
.0dfb	8d 6d 0d	               sta     synccolptr
.0dfe	a9 a1		               lda     #<sd_synccolptr
.0e00	8d 6e 0d	               sta     synccolptr+1
.0e03	a9 0f		               lda     #>sd_synccolptr
.0e05	8d 6f 0d	               sta     synccolptr+2
.0e08	a9 4c		               lda     #$4c
.0e0a	8d 70 0d	               sta     cls
.0e0d	a9 b6		               lda     #<sd_cls
.0e0f	8d 71 0d	               sta     cls+1
.0e12	a9 0f		               lda     #>sd_cls
.0e14	8d 72 0d	               sta     cls+2
.0e17	a9 4c		               lda     #$4c
.0e19	8d 73 0d	               sta     setinverse
.0e1c	a9 0e		               lda     #<sd_setinverse
.0e1e	8d 74 0d	               sta     setinverse+1
.0e21	a9 10		               lda     #>sd_setinverse
.0e23	8d 75 0d	               sta     setinverse+2
.0e26	a9 4c		               lda     #$4c
.0e28	8d 76 0d	               sta     clrinverse
.0e2b	a9 18		               lda     #<sd_clrinverse
.0e2d	8d 77 0d	               sta     clrinverse+1
.0e30	a9 10		               lda     #>sd_clrinverse
.0e32	8d 78 0d	               sta     clrinverse+2
.0e35	a9 4c		               lda     #$4c
.0e37	8d 79 0d	               sta     z2putch
.0e3a	a9 22		               lda     #<sd_z2putch
.0e3c	8d 7a 0d	               sta     z2putch+1
.0e3f	a9 10		               lda     #>sd_z2putch
.0e41	8d 7b 0d	               sta     z2putch+2
.0e44	a9 4c		                lda     #$4c
.0e46	8d 7c 0d	                sta     z2puts
.0e49	a9 30		                lda     #<sd_z2puts
.0e4b	8d 7d 0d	                sta     z2puts+1
.0e4e	a9 10		                lda     #>sd_z2puts
.0e50	8d 7e 0d	                sta     z2puts+2
.0e53	a9 4c		                lda     #$4c
.0e55	8d 7f 0d	                sta     putch
.0e58	a9 46		                lda     #<sd_putch
.0e5a	8d 80 0d	                sta     putch+1
.0e5d	a9 10		                lda     #>sd_putch
.0e5f	8d 81 0d	                sta     putch+2
.0e62	a9 4c		                lda     #$4c
.0e64	8d 82 0d	                sta     puts
.0e67	a9 6a		                lda     #<sd_puts
.0e69	8d 83 0d	                sta     puts+1
.0e6c	a9 10		                lda     #>sd_puts
.0e6e	8d 84 0d	                sta     puts+2
.0e71	a9 4c		                lda     #$4c
.0e73	8d 85 0d	                sta     putsxy
.0e76	a9 7e		                lda     #<sd_putsxy
.0e78	8d 86 0d	                sta     putsxy+1
.0e7b	a9 10		                lda     #>sd_putsxy
.0e7d	8d 87 0d	                sta     putsxy+2
.0e80	a9 4c		                lda     #$4c
.0e82	8d 88 0d	                sta     putscxy
.0e85	a9 a3		                lda     #<sd_putscxy
.0e87	8d 89 0d	                sta     putscxy+1
.0e8a	a9 10		                lda     #>sd_putscxy
.0e8c	8d 8a 0d	                sta     putscxy+2
.0e8f	a9 4c		                lda     #$4c
.0e91	8d 8b 0d	                sta     setcurcol
.0e94	a9 d9		                lda     #<sd_setcurcol
.0e96	8d 8c 0d	                sta     setcurcol+1
.0e99	a9 10		                lda     #>sd_setcurcol
.0e9b	8d 8d 0d	                sta     setcurcol+2
.0e9e	a9 4c		                lda     #$4c
.0ea0	8d 8e 0d	                sta     setbakcols
.0ea3	a9 df		                lda     #<sd_setbakcols
.0ea5	8d 8f 0d	                sta     setbakcols+1
.0ea8	a9 10		                lda     #>sd_setbakcols
.0eaa	8d 90 0d	                sta     setbakcols+2
.0ead	a9 4c		                lda     #$4c
.0eaf	8d 91 0d	                sta     setbkcol
.0eb2	a9 f0		                lda     #<sd_setbkcol
.0eb4	8d 92 0d	                sta     setbkcol+1
.0eb7	a9 10		                lda     #>sd_setbkcol
.0eb9	8d 93 0d	                sta     setbkcol+2
.0ebc	a9 4c		                lda     #$4c
.0ebe	8d 94 0d	                sta     gotoxy
.0ec1	a9 08		                lda     #<sd_gotoxy
.0ec3	8d 95 0d	                sta     gotoxy+1
.0ec6	a9 11		                lda     #>sd_gotoxy
.0ec8	8d 96 0d	                sta     gotoxy+2
.0ecb	a9 4c		                lda     #$4c
.0ecd	8d 97 0d	                sta     saddscrptr
.0ed0	a9 26		                lda     #<sd_saddscrptr
.0ed2	8d 98 0d	                sta     saddscrptr+1
.0ed5	a9 11		                lda     #>sd_saddscrptr
.0ed7	8d 99 0d	                sta     saddscrptr+2
.0eda	a9 4c		                lda     #$4c
.0edc	8d 9a 0d	                sta     scrptr2str
.0edf	a9 37		                lda     #<sd_scrptr2str
.0ee1	8d 9b 0d	                sta     scrptr2str+1
.0ee4	a9 11		                lda     #>sd_scrptr2str
.0ee6	8d 9c 0d	                sta     scrptr2str+2
.0ee9	a9 4c		                lda     #$4c
.0eeb	8d 9d 0d	                sta     scrptr2zp1
.0eee	a9 89		                lda     #<sd_scrptr2zp1
.0ef0	8d 9e 0d	                sta     scrptr2zp1+1
.0ef3	a9 11		                lda     #>sd_scrptr2zp1
.0ef5	8d 9f 0d	                sta     scrptr2zp1+2
.0ef8	a9 4c		                lda     #$4c
.0efa	8d a0 0d	                sta     colptr2zp1
.0efd	a9 98		                lda     #<sd_colptr2zp1
.0eff	8d a1 0d	                sta     colptr2zp1+1
.0f02	a9 11		                lda     #>sd_colptr2zp1
.0f04	8d a2 0d	                sta     colptr2zp1+2
.0f07	a9 4c		                lda     #$4c
.0f09	8d a3 0d	                sta     scrptr2zp2
.0f0c	a9 a7		                lda     #<sd_scrptr2zp2
.0f0e	8d a4 0d	                sta     scrptr2zp2+1
.0f11	a9 11		                lda     #>sd_scrptr2zp2
.0f13	8d a5 0d	                sta     scrptr2zp2+2
.0f16	a9 4c		                lda     #$4c
.0f18	8d a6 0d	                sta     colptr2zp2
.0f1b	a9 b6		                lda     #<sd_colptr2zp2
.0f1d	8d a7 0d	                sta     colptr2zp2+1
.0f20	a9 11		                lda     #>sd_colptr2zp2
.0f22	8d a8 0d	                sta     colptr2zp2+2
.0f25	a9 4c		                lda     #$4c
.0f27	8d a9 0d	                sta     putrahex
.0f2a	a9 c5		                lda     #<sd_putrahex
.0f2c	8d aa 0d	                sta     putrahex+1
.0f2f	a9 11		                lda     #>sd_putrahex
.0f31	8d ab 0d	                sta     putrahex+2
.0f34	a9 4c		                lda     #$4c
.0f36	8d ac 0d	                sta     putrahexxy
.0f39	a9 d4		                lda     #<sd_putrahexxy
.0f3b	8d ad 0d	                sta     putrahexxy+1
.0f3e	a9 11		                lda     #>sd_putrahexxy
.0f40	8d ae 0d	                sta     putrahexxy+2
.0f43	a9 4c		                lda     #$4c
.0f45	8d af 0d	                sta     putrahexcxy
.0f48	a9 e3		                lda     #<sd_putrahexcxy
.0f4a	8d b0 0d	                sta     putrahexcxy+1
.0f4d	a9 11		                lda     #>sd_putrahexcxy
.0f4f	8d b1 0d	                sta     putrahexcxy+2
.0f52	20 97 0a	                jsr     pop
.0f55	60		                rts
.0f56			sd_scrmaninit
.0f56	08		                php
.0f57	48		                pha
.0f58	a9 17		                lda     #%00010111
.0f5a	8d 18 d0	                sta     $d018
.0f5d	ad 11 d0	                lda     $d011
.0f60	29 bf		                and     #%10111111
.0f62	68		                pla
.0f63	28		                plp
.0f64			sd_curshome
.0f64	08		                php
.0f65	48		                pha
.0f66	a9 00		                lda     #$00
.0f68	8d b3 0d	                sta     sd_scrptr
.0f6b	a9 04		                lda     #$04
.0f6d	8d b4 0d	                sta     sd_scrptr+1
.0f70	20 a1 0f	                jsr     sd_synccolptr
.0f73	ad ba 0d	                lda     sd_bakcol0
.0f76	8d 21 d0	                sta     $d021
.0f79	ad bb 0d	                lda     sd_bakcol1
.0f7c	8d 22 d0	                sta     $d022
.0f7f	ad bc 0d	                lda     sd_bakcol2
.0f82	8d 23 d0	                sta     $d023
.0f85	ad bd 0d	                lda     sd_bakcol3
.0f88	8d 24 d0	                sta     $d024
.0f8b	68		                pla
.0f8c	28		                plp
.0f8d	60		                rts
.0f8e			sd_incscrptr
.0f8e	08		                php
.0f8f	48		                pha
.0f90	ee b3 0d	                inc     sd_scrptr
.0f93	ad b3 0d	                lda     sd_scrptr
.0f96	d0 03		                bne     norep
.0f98	ee b4 0d	                inc     sd_scrptr+1
.0f9b	20 a1 0f	norep           jsr     sd_synccolptr
.0f9e	68		                pla
.0f9f	28		                plp
.0fa0	60		                rts
.0fa1			sd_synccolptr
.0fa1	08		                php
.0fa2	48		                pha
.0fa3	ad b3 0d	                lda     sd_scrptr
.0fa6	8d b5 0d	                sta     sd_colptr
.0fa9	ad b4 0d	                lda     sd_scrptr+1
.0fac	29 03		                and     #%00000011
.0fae	09 d8		                ora     #%11011000
.0fb0	8d b6 0d	                sta     sd_colptr+1
.0fb3	68		                pla
.0fb4	28		                plp
.0fb5	60		                rts
.0fb6			sd_cls
.0fb6	20 58 0a	                jsr     push
.0fb9	a9 00		                lda     #$00
.0fbb	8d b3 0d	                sta     sd_scrptr
.0fbe	a9 04		                lda     #$04
.0fc0	8d b4 0d	                sta     sd_scrptr+1
.0fc3	20 a1 0f	                jsr     sd_synccolptr
.0fc6	20 8f 0b	                jsr     savezp1
.0fc9	20 89 11	                jsr     sd_scrptr2zp1
.0fcc	ad b8 0d	                lda     sd_brdcol
.0fcf	8d 20 d0	                sta     vicbordcol
.0fd2	ad b9 0d	                lda     sd_bakcol
.0fd5	8d 21 d0	                sta     vicbackcol
.0fd8	a9 20		                lda     #$20
.0fda	a2 04		                ldx     #4
.0fdc	a0 00		nextline        ldy     #0
.0fde	91 fb		nextcar         sta     (zpage1),y
.0fe0	a5 fc		                lda     zpage1+1
.0fe2	48		                pha
.0fe3	29 03		                and     #%00000011
.0fe5	09 d8		                ora     #%11011000
.0fe7	85 fc		                sta     zpage1+1
.0fe9	a9 00		                lda     #0
.0feb	91 fb		                sta     (zpage1),y
.0fed	68		                pla
.0fee	85 fc		                sta     zpage1+1
.0ff0	a9 20		                lda     #$20
.0ff2	88		                dey
.0ff3	d0 e9		                bne     nextcar
.0ff5	e6 fc		                inc     zpage1+1
.0ff7	ca		                dex
.0ff8	d0 e4		                bne     nextcar
.0ffa	a9 00		                lda     #$00
.0ffc	8d b3 0d	                sta     sd_scrptr
.0fff	a9 04		                lda     #$04
.1001	8d b4 0d	                sta     sd_scrptr+1
.1004	20 a1 0f	                jsr     sd_synccolptr
.1007	20 9e 0b	                jsr     restzp1
.100a	20 97 0a	                jsr     pop
.100d	60		                rts
.100e			sd_setinverse
.100e	08		                php
.100f	48		                pha
.1010	a9 80		                lda     #%10000000
.1012	8d be 0d	                sta     sd_inverse
.1015	68		                pla
.1016	28		                plp
.1017	60		                rts
.1018			sd_clrinverse
.1018	08		                php
.1019	48		                pha
.101a	a9 00		                lda     #%00000000
.101c	8d be 0d	                sta     sd_inverse
.101f	68		                pla
.1020	28		                plp
.1021	60		                rts
.1022			sd_z2putch
.1022	20 58 0a	                jsr     push
.1025	a0 00		                ldy     #$0
.1027	b1 fd		                lda     (zpage2),y
.1029	20 46 10	                jsr     sd_putch
.102c	20 97 0a	                jsr     pop
.102f	60		                rts
.1030			sd_z2puts
.1030	20 58 0a	                jsr     push
.1033	a0 00		                ldy     #$0
.1035	b1 fd		nextcar         lda     (zpage2),y
.1037	f0 09		                beq     endstr
.1039	20 22 10	                jsr     sd_z2putch
.103c	20 77 0b	                jsr     inczp2
.103f	4c 35 10	                jmp     nextcar
.1042	20 97 0a	endstr          jsr     pop
.1045	60		                rts
.1046			sd_putch
.1046	20 58 0a	                jsr     push            ; On sauvegarde les registres
.1049	20 8f 0b	                jsr     savezp1         ; On sauve le zp1 du progamme appelant
.104c	20 89 11	                jsr     sd_scrptr2zp1   ; On place le pointeur d'écran sur zp1
.104f	a0 00		                ldy     #0              ; On met Y à 0
.1051	0d be 0d	                ora     sd_inverse
.1054	91 fb		                sta     (zpage1),y      ; On affiche le caractèere
.1056	ae b6 0d	                ldx     sd_colptr+1     ; On place le MSB du pointeur de couleur
.1059	86 fc		                stx     zpage1+1        ; dans le MSB du zp1
.105b	ad b7 0d	                lda     sd_curcol       ; on charge la couleur voulu dans
.105e	91 fb		                sta     (zpage1),y      ; la ram de couleur
.1060	20 8e 0f	                jsr     sd_incscrptr    ; On incrémente le pointeur d'écran
.1063	20 9e 0b	                jsr     restzp1         ; On récupèere le zpe du programme appelant
.1066	20 97 0a	                jsr     pop             ; on replace tous les registres
.1069	60		                rts
.106a			sd_puts
.106a	20 58 0a	                jsr     push
.106d	20 ad 0b	                jsr     savezp2
.1070	86 fd		                stx     zpage2
.1072	84 fe		                sty     zpage2+1
.1074	20 30 10	                jsr     sd_z2puts
.1077	20 bc 0b	getout          jsr     restzp2
.107a	20 97 0a	                jsr     pop
.107d	60		                rts
.107e			sd_putsxy
.107e	20 58 0a	                jsr     push            ; On sauvegarde les registres
.1081	20 ad 0b	                jsr     savezp2         ; et le zp2
.1084	86 fd		                stx     zpage2          ; On place l'adresse de la
.1086	84 fe		                sty     zpage2+1        ; X = MSB, Y = LSB
.1088	a0 00		                ldy     #0              ; On place le compteur
.108a	b1 fd		                lda     (zpage2),y      ; Lecture de la position X
.108c	aa		                tax                     ; de A à X
.108d	20 77 0b	                jsr     inczp2       ; On déplace le pointeur
.1090	b1 fd		                lda     (zpage2),y      ;
.1092	a8		                tay                     ; de A à Y
.1093	20 08 11	                jsr     sd_gotoxy       ; sd_gotoxy prend X = colonne,
.1096	20 77 0b	                jsr     inczp2
.1099	20 30 10	                jsr     sd_z2puts
.109c	20 bc 0b	                jsr     restzp2
.109f	20 97 0a	                jsr     pop
.10a2	60		                rts
.10a3			sd_putscxy
.10a3	20 58 0a	                jsr     push            ; On sauvegarde les registres et le zp2
.10a6	20 ad 0b	                jsr     savezp2
.10a9	86 fd		                stx     zpage2          ; On place l'adresse de la chaine dans le zp2
.10ab	84 fe		                sty     zpage2+1        ; X = MSB, Y = LSB
.10ad	a0 00		                ldy     #0              ; On place le compteur
.10af	b1 fd		                lda     (zpage2),y      ; on charge la couleur
.10b1	20 d9 10	                jsr     sd_setcurcol    ; et on la définie
.10b4	20 77 0b	                jsr     inczp2       ; On pointe le prochain byte
.10b7	b1 fd		                lda     (zpage2),y      ; Lecture de la position X
.10b9	29 c0		                and     #$c0
.10bb	85 00		                sta     sd_bkcol
.10bd	20 77 0b	                jsr     inczp2       ; On déplace le pointeur
.10c0	b1 fd		                lda     (zpage2),y      ; Lecture de la position X
.10c2	aa		                tax                     ; de A à X
.10c3	20 77 0b	                jsr     inczp2       ; On déplace le pointeur
.10c6	b1 fd		                lda     (zpage2),y      ;
.10c8	a8		                tay                     ; de A à Y
.10c9	20 08 11	                jsr     sd_gotoxy       ; sd_gotoxy prend X = colonne, y = ligne
.10cc	20 77 0b	                jsr     inczp2
.10cf	20 30 10	                jsr     sd_z2puts
.10d2	20 bc 0b	                jsr     restzp2
.10d5	20 97 0a	                jsr     pop
.10d8	60		                rts
.10d9			sd_setcurcol
.10d9	08		                php
.10da	8d b7 0d	                sta  sd_curcol
.10dd	28		                plp
.10de	60		                rts
.10df			sd_setbakcols
.10df	08		                php
.10e0	48		                pha
.10e1	8a		                txa
.10e2	29 03		                and     #$3
.10e4	aa		                tax
.10e5	68		                pla
.10e6	48		                pha
.10e7	9d bb 0d	                sta     sd_bakcol1,x
.10ea	9d 21 d0	                sta     $d021,x
.10ed	68		                pla
.10ee	28		                plp
.10ef	60		                rts
.10f0			sd_setbkcol
.10f0	08		                php
.10f1	48		                pha
.10f2	29 c0		                and     #$c0
.10f4	85 00		                sta     sd_bkcol
.10f6	4a		                lsr
.10f7	4a		                lsr
.10f8	4a		                lsr
.10f9	4a		                lsr
.10fa	4a		                lsr
.10fb	4a		                lsr
.10fc	29 03		                and     #%00000011
.10fe	8a		                txa
.10ff	bd bb 0d	                lda     sd_bakcol1,x
.1102	8d b9 0d	                sta     sd_bakcol
.1105	68		                pla
.1106	28		                plp
.1107	60		                rts
.1108			sd_gotoxy
.1108	20 58 0a	                jsr     push
.110b	20 64 0f	                jsr     sd_curshome
.110e	c0 00		yagain          cpy     #0
.1110	f0 09		                beq     setx
.1112	a9 28		                lda     #40
.1114	20 26 11	                jsr     sd_saddscrptr
.1117	88		                dey
.1118	4c 0e 11	                jmp     yagain
.111b	8a		setx            txa
.111c	20 26 11	                jsr     sd_saddscrptr
.111f	20 a1 0f	                jsr     sd_synccolptr
.1122	20 97 0a	                jsr     pop
.1125	60		                rts
.1126			sd_saddscrptr
.1126	08		                php
.1127	48		                pha
.1128	18		                clc
.1129	6d b3 0d	                adc     sd_scrptr
.112c	8d b3 0d	                sta     sd_scrptr
.112f	90 03		                bcc     norep
.1131	ee b4 0d	                inc     sd_scrptr+1
.1134	68		norep           pla
.1135	28		                plp
.1136	60		                rts
.1137			sd_scrptr2str
.1137	20 58 0a	                jsr     push
.113a	ad b4 0d	                lda     sd_scrptr+1
.113d	48		                pha
.113e	20 6e 0c	                jsr     lsra4bits
.1141	20 62 0c	                jsr     nib2hex
.1144	8d bf 0d	                sta     sd_scraddr
.1147	68		                pla
.1148	20 6e 0c	                jsr     lsra4bits
.114b	20 62 0c	                jsr     nib2hex
.114e	8d c0 0d	                sta     sd_scraddr+1
.1151	ad b4 0d	                lda     sd_scrptr+1
.1154	48		                pha
.1155	20 6e 0c	                jsr     lsra4bits
.1158	20 62 0c	                jsr     nib2hex
.115b	8d bf 0d	                sta     sd_scraddr
.115e	68		                pla
.115f	20 6e 0c	                jsr     lsra4bits
.1162	20 62 0c	                jsr     nib2hex
.1165	8d c0 0d	                sta     sd_scraddr+1
.1168	ad b3 0d	                lda     sd_scrptr
.116b	48		                pha
.116c	20 6e 0c	                jsr     lsra4bits
.116f	20 62 0c	                jsr     nib2hex
.1172	8d c1 0d	                sta     sd_scraddr+2
.1175	8d c6 0d	                sta     sd_coladdr+2
.1178	68		                pla
.1179	20 6e 0c	                jsr     lsra4bits
.117c	20 62 0c	                jsr     nib2hex
.117f	8d c2 0d	                sta     sd_scraddr+3
.1182	8d c7 0d	                sta     sd_coladdr+3
.1185	20 97 0a	                jsr     pop
.1188	60		                rts
.1189			sd_scrptr2zp1
.1189	08		                php
.118a	48		                pha
.118b	ad b3 0d	                lda     sd_scrptr
.118e	85 fb		                sta     zpage1
.1190	ad b4 0d	                lda     sd_scrptr+1
.1193	85 fc		                sta     zpage1+1
.1195	68		                pla
.1196	28		                plp
.1197	60		                rts
.1198			sd_colptr2zp1
.1198	08		                php
.1199	48		                pha
.119a	ad b5 0d	                lda     sd_colptr
.119d	85 fb		                sta     zpage1
.119f	ad b6 0d	                lda     sd_colptr+1
.11a2	85 fc		                sta     zpage1+1
.11a4	68		                pla
.11a5	28		                plp
.11a6	60		                rts
.11a7			sd_scrptr2zp2
.11a7	08		                php
.11a8	48		                pha
.11a9	ad b3 0d	                lda     sd_scrptr
.11ac	85 fd		                sta     zpage2
.11ae	ad b4 0d	                lda     sd_scrptr+1
.11b1	85 fe		                sta     zpage2+1
.11b3	68		                pla
.11b4	28		                plp
.11b5	60		                rts
.11b6			sd_colptr2zp2
.11b6	08		                php
.11b7	48		                pha
.11b8	ad b5 0d	                lda     sd_colptr
.11bb	85 fd		                sta     zpage2
.11bd	ad b6 0d	                lda     sd_colptr+1
.11c0	85 fe		                sta     zpage2+1
.11c2	68		                pla
.11c3	28		                plp
.11c4	60		                rts
.11c5			sd_putrahex
.11c5	08		                php
.11c6	48		                pha
.11c7	20 75 0c	                jsr     a2hex
.11ca	a2 0f		                ldx     #<a2hexcol
.11cc	a0 0c		                ldy     #>a2hexcol
.11ce	20 6a 10	                jsr     sd_puts
.11d1	68		                pla
.11d2	28		                plp
.11d3	60		                rts
.11d4			sd_putrahexxy
.11d4	08		                php
.11d5	48		                pha
.11d6	20 75 0c	                jsr     a2hex
.11d9	a9 11		                lda     #<a2hexpos
.11db	a0 0c		                ldy     #>a2hexpos
.11dd	20 7e 10	                jsr     sd_putsxy
.11e0	68		                pla
.11e1	28		                plp
.11e2	60		                rts
.11e3			sd_putrahexcxy
.11e3	08		                php
.11e4	68		                pla
.11e5	20 75 0c	                jsr     a2hex
.11e8	a9 11		                lda     #<a2hexpos
.11ea	a0 0c		                ldy     #>a2hexpos
.11ec	20 a3 10	                jsr     sd_putscxy
.11ef	68		                pla
.11f0	28		                plp
.11f1	60		                rts

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-showregs.asm

.11f2			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=$c0			bkcol   =   bkcol3
.11f2	08		                php
.11f3	8d a4 13	                sta  rega
.11f6	68		                pla
.11f7	8d a7 13	                sta  regp
.11fa	8e a5 13	                stx  regx
.11fd	8c a6 13	                sty  regy
.1200	ba		                tsx
.1201	8e a8 13	                stx  regs
.1204	68		                pla
.1205	8d aa 13	                sta  regpcl
.1208	8d ab 13	                sta  regpcl2
.120b	68		                pla
.120c	8d a9 13	                sta  regpch
.120f	ad a4 13	                lda  rega
.1212	48		                pha
.1213	20 62 0c	                jsr  nib2hex
.1216	8d 47 13	                sta  vala+1
.1219	68		                pla
.121a	20 6e 0c	                jsr  lsra4bits
.121d	20 62 0c	                jsr  nib2hex
.1220	8d 46 13	                sta  vala
.1223	ad a6 13	                lda  regy
.1226	48		                pha
.1227	20 62 0c	                jsr  nib2hex
.122a	8d 5d 13	                sta  valy+1
.122d	68		                pla
.122e	20 6e 0c	                jsr  lsra4bits
.1231	20 62 0c	                jsr  nib2hex
.1234	8d 5c 13	                sta  valy
.1237	ad a5 13	                lda  regx
.123a	48		                pha
.123b	20 62 0c	                jsr  nib2hex
.123e	8d 52 13	                sta  valx+1
.1241	68		                pla
.1242	20 6e 0c	                jsr  lsra4bits
.1245	20 62 0c	                jsr  nib2hex
.1248	8d 51 13	                sta  valx
.124b	ad a7 13	                lda  regp
.124e	48		                pha
.124f	20 62 0c	                jsr  nib2hex
.1252	8d 68 13	                sta  valp+1
.1255	68		                pla
.1256	20 6e 0c	                jsr  lsra4bits
.1259	20 62 0c	                jsr  nib2hex
.125c	8d 67 13	                sta  valp
.125f	ad a8 13	                lda  regs
.1262	48		                pha
.1263	20 62 0c	                jsr  nib2hex
.1266	8d 73 13	                sta  vals+1
.1269	68		                pla
.126a	20 6e 0c	                jsr  lsra4bits
.126d	20 62 0c	                jsr  nib2hex
.1270	8d 72 13	                sta  vals
.1273	ad a9 13	                lda  regpch
.1276	48		                pha
.1277	20 62 0c	                jsr  nib2hex
.127a	8d 7f 13	                sta  valpch+1
.127d	68		                pla
.127e	20 6e 0c	                jsr  lsra4bits
.1281	20 62 0c	                jsr  nib2hex
.1284	8d 7e 13	                sta  valpch
.1287	ad aa 13	                lda  regpcl
.128a	48		                pha
.128b	20 62 0c	                jsr  nib2hex
.128e	8d 81 13	                sta  valpcl+1
.1291	68		                pla
.1292	20 6e 0c	                jsr  lsra4bits
.1295	20 62 0c	                jsr  nib2hex
.1298	8d 80 13	                sta  valpcl
.129b	a5 fb		                lda  zpage1
.129d	48		                pha
.129e	20 62 0c	                jsr  nib2hex
.12a1	8d 90 13	                sta  valz1l
.12a4	68		                pla
.12a5	20 6e 0c	                jsr  lsra4bits
.12a8	20 62 0c	                jsr  nib2hex
.12ab	8d 91 13	                sta  valz1l+1
.12ae	a5 fc		                lda  zpage1+1
.12b0	48		                pha
.12b1	20 62 0c	                jsr  nib2hex
.12b4	8d 8e 13	                sta  valz1h
.12b7	68		                pla
.12b8	20 6e 0c	                jsr  lsra4bits
.12bb	20 62 0c	                jsr  nib2hex
.12be	8d 8f 13	                sta  valz1h+1
.12c1	a5 fd		                lda  zpage2
.12c3	48		                pha
.12c4	20 62 0c	                jsr  nib2hex
.12c7	8d a0 13	                sta  valz2l
.12ca	68		                pla
.12cb	20 6e 0c	                jsr  lsra4bits
.12ce	20 62 0c	                jsr  nib2hex
.12d1	8d a1 13	                sta  valz2l+1
.12d4	a5 fe		                lda  zpage2+1
.12d6	48		                pha
.12d7	20 62 0c	                jsr  nib2hex
.12da	8d 9e 13	                sta  valz2h
.12dd	68		                pla
.12de	20 6e 0c	                jsr  lsra4bits
.12e1	20 62 0c	                jsr  nib2hex
.12e4	8d 9f 13	                sta  valz2h+1
.12e7	20 73 0d	                jsr  setinverse
.12ea	78		                sei
.12eb	a2 3e		                ldx  #<srega
.12ed	a0 13		                ldy  #>srega+1
.12ef	20 88 0d	                jsr  putscxy
.12f2	a2 49		                ldx  #<sregx
.12f4	a0 13		                ldy  #>sregx+1
.12f6	20 88 0d	                jsr  putscxy
.12f9	a2 54		                ldx  #<sregy
.12fb	a0 13		                ldy  #>sregy+1
.12fd	20 88 0d	                jsr  putscxy
.1300	a2 5f		                ldx  #<sregp
.1302	a0 13		                ldy  #>sregp+1
.1304	20 88 0d	                jsr  putscxy
.1307	a2 6a		                ldx  #<sregs
.1309	a0 13		                ldy  #>sregs+1
.130b	20 88 0d	                jsr  putscxy
.130e	a2 75		                ldx  #<sregpc
.1310	a0 13		                ldy  #>sregpc+1
.1312	20 88 0d	                jsr  putscxy
.1315	a2 84		                ldx  #<sregz1
.1317	a0 13		                ldy  #>sregz1+1
.1319	20 88 0d	                jsr  putscxy
.131c	a2 94		                ldx  #<sregz2
.131e	a0 13		                ldy  #>sregz2+1
.1320	20 88 0d	                jsr  putscxy
.1323	58		                cli
.1324	20 76 0d	                jsr  clrinverse
.1327	ad a9 13	                lda  regpch
.132a	48		                pha
.132b	ad aa 13	                lda  regpcl
.132e	48		                pha
.132f	ac a6 13	                ldy  regy
.1332	ae a5 13	                ldx  regx
.1335	ad a7 13	                lda  regp
.1338	48		                pha
.1339	ad a4 13	                lda  rega
.133c	28		                plp
.133d	60		                rts
>133e	01 c0 00 17	srega   .byte   colr,bkcol,coln,line
>1342	20 01 3a 24	        .text   ' a:$' ;4,24
>1346	00 00 00	vala    .byte   0,0,0
>1349	01 c0 06 17	sregx   .byte   colr,bkcol,coln+6,line
>134d	20 18 3a 24	        .text   ' x:$' ;4,24
>1351	00 00 00	valx    .byte   0,0,0
>1354	01 c0 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>1358	20 19 3a 24	        .text   ' y:$' ;4,24
>135c	00 00 00	valy    .byte   0,0,0
>135f	01 c0 12 17	sregp   .byte   colr,bkcol,coln+18,line
>1363	20 10 3a 24	        .text   ' p:$' ;4,24
>1367	00 00 00	valp    .byte   0,0,0
>136a	01 c0 18 17	sregs   .byte   colr,bkcol,coln+24,line
>136e	20 13 3a 24	        .text   ' s:$' ;4,24
>1372	00 00 00	vals    .byte   0,0,0
>1375	01 c0 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>1379	20 10 03 3a	        .text   ' pc:$' ;4,24
>137d	24
>137e	00 00		valpch  .byte   0,0
>1380	00 00 20 00	valpcl  .byte   0,0,32,0
>1384	01 c0 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>1388	20 1a 10 31	        .text   ' zp1:$' ;4,24
>138c	3a 24
>138e	00 00		valz1h  .byte   0,0
>1390	00 00 20 00	valz1l  .byte   0,0,32,0
>1394	01 c0 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>1398	20 1a 10 32	        .text   ' zp2:$' ;4,24
>139c	3a 24
>139e	00 00		valz2h  .byte   0,0
>13a0	00 00 20 00	valz2l  .byte   0,0,32,0
>13a4	00		rega    .byte   0
>13a5	00		regx    .byte   0
>13a6	00		regy    .byte   0
>13a7	00		regp    .byte   0
>13a8	00		regs    .byte   0
>13a9	00		regpch  .byte   0
>13aa	00		regpcl  .byte   0
>13ab	00		regpcl2 .byte   0
>13ac	00		vzp1h   .byte   0
>13ad	00		vzp1l   .byte   0
>13ae	00		vzp2h   .byte   0
>13af	00		vzp2l   .byte   0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-joystick.asm

=$dc00			js_2port       =    $dc00
=$dc01			js_1port       =    $dc01
=$dc02			js_2dir        =    $dc02
=$dc03			js_1dir        =    $dc03
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.13b0			js_init
.13b0	20 58 0a	jsr  push
.13b3	ad 03 dc	               lda  js_1dir
.13b6	29 e0		               and  #$e0
.13b8	8d 03 dc	               sta  js_1dir
.13bb	ad 02 dc	               lda  js_2dir
.13be	29 e0		               and  #$e0
.13c0	8d 02 dc	               sta  js_2dir
.13c3	20 97 0a	               jsr  pop
.13c6	60		               rts
.13c7			js_scan
.13c7	20 ce 13	jsr  js_1scan
.13ca	20 84 14	               jsr  js_2scan
.13cd	60		               rts
.13ce			js_1scan
.13ce	20 58 0a	               jsr  push
.13d1	ad 01 dc	               lda  js_1port
.13d4	29 1f		               and  #$1f
.13d6	48		               pha
.13d7	49 1f		               eor  #$1f
.13d9	8d 3a 18	               sta  js_1status
.13dc	68		               pla
.13dd	c9 00		               cmp  #$00
.13df	d0 03		               bne  p1scan
.13e1	4c 74 14	               jmp  port1_out
.13e4	49 1f		p1scan         eor  #$1f
.13e6	18		               clc
.13e7	4a		js_1b0         lsr
.13e8	90 14		               bcc  js_1b1
.13ea	48		               pha
.13eb	ee a3 17	               inc  js_1flag
.13ee	ad 9f 17	               lda  js_1pixy
.13f1	38		               sec
.13f2	e9 02		               sbc  #js_yoffset
.13f4	c9 f0		               cmp  #$f0
.13f6	90 02		               bcc  sto1ym
.13f8	a9 00		               lda  #$00
.13fa	8d 9f 17	sto1ym         sta  js_1pixy
.13fd	68		               pla
.13fe	4a		js_1b1         lsr
.13ff	90 14		               bcc  js_1b2
.1401	48		               pha
.1402	ee a3 17	               inc  js_1flag
.1405	ad 9f 17	               lda  js_1pixy
.1408	18		               clc
.1409	69 02		               adc  #js_yoffset
.140b	c9 c7		               cmp  #199
.140d	90 02		               bcc  sto1yp
.140f	a9 c7		               lda  #199
.1411	8d 9f 17	sto1yp         sta  js_1pixy
.1414	68		               pla
.1415	4a		js_1b2         lsr
.1416	90 20		               bcc  js_1b3
.1418	48		               pha
.1419	ee a3 17	               inc  js_1flag
.141c	ad 9d 17	               lda  js_1pixx
.141f	0d 9e 17	               ora  js_1pixx+1
.1422	f0 13		               beq  js_1b2out
.1424	38		               sec
.1425	ad 9d 17	               lda  js_1pixx
.1428	e9 02		               sbc  #js_xoffset
.142a	8d 9d 17	               sta  js_1pixx
.142d	b0 08		               bcs  js_1b2out
.142f	ad 9e 17	               lda  js_1pixx+1
.1432	f0 03		               beq  js_1b2out
.1434	ce 9e 17	               dec  js_1pixx+1
.1437	68		js_1b2out      pla
.1438	4a		js_1b3         lsr
.1439	90 22		               bcc  js_1b4
.143b	48		               pha
.143c	ee a3 17	               inc  js_1flag
.143f	ad 9e 17	               lda  js_1pixx+1
.1442	f0 0a		               beq  incj1x
.1444	ad 9d 17	               lda  js_1pixx
.1447	c9 3c		               cmp  #$40-4
.1449	30 03		               bmi  incj1x
.144b	4c 5c 14	               jmp  js_1b3out
.144e	18		incj1x         clc
.144f	ad 9d 17	               lda  js_1pixx
.1452	69 02		               adc  #js_xoffset
.1454	8d 9d 17	               sta  js_1pixx
.1457	90 03		               bcc  js_1b3out
.1459	ee 9e 17	               inc  js_1pixx+1
.145c	68		js_1b3out      pla
.145d	4a		js_1b4          lsr                     ;Estce le bbouton fire (F)
.145e	90 14		                bcc     port1_out       ;Oui!
.1460	ee a3 17	                inc     js_1flag
.1463	ee a2 17	                inc     js_1fire        ; on augmente le nombre de tir
.1466	a2 01		js_1wait        ldx     #$01
.1468	a0 ff		                ldy     #$ff
.146a	c8		js_1rel         iny
.146b	ad 01 dc	                lda     js_1port
.146e	49 ff		                eor     #$ff
.1470	29 10		                and     #$10
.1472	d0 f6		                bne     js_1rel         ; des boutons
.1474	ad a3 17	port1_out       lda     js_1flag
.1477	f0 08		                beq     out
.1479	20 7b 15	                jsr     js_1correct
.147c	a9 00		                lda     #0
.147e	8d a3 17	                sta     js_1flag
.1481	20 97 0a	out             jsr     pop
.1484			js_2scan
.1484	20 58 0a	                jsr     push
.1487	ad 00 dc	port2           lda     js_2port
.148a	29 1f		                and     #$1f
.148c	48		                pha
.148d	49 1f		                eor     #$1f
.148f	8d 3b 18	                sta js_2status
.1492	68		                pla
.1493	c9 1f		                cmp	#$1f
.1495	d0 03		                bne     p2scan
.1497	4c 4c 15	                jmp     port2_out
.149a	49 1f		p2scan          eor     #$1f
.149c	18		                clc
.149d	4a		js_2b0          lsr                     ;On decale js_2 bit 0 dans C
.149e	90 14		                bcc     js_2b1          ;Est-ce vers le haut (U)
.14a0	48		                pha                     ;On stack la valeur
.14a1	ee ae 17	                inc     js_2flag
.14a4	ad aa 17	                lda     js_2pixy        ;Oui!
.14a7	38		                sec                     ;On place la carry a 1
.14a8	e9 02		                sbc     #js_yoffset     ;On reduit
.14aa	c9 f0		                cmp     #$f0
.14ac	90 02		                bcc     sto2ym
.14ae	a9 00		                lda     #$00
.14b0	8d aa 17	sto2ym          sta     js_2pixy        ; le y
.14b3	68		                pla                     ;On recupere la valeur
.14b4	4a		js_2b1          lsr                     ;On decale js_2 bit 0 dans C
.14b5	90 14		                bcc     js_2b2          ;Est-ce vers le bas (D)
.14b7	48		                pha                     ;On stack la valeur
.14b8	ee ae 17	                inc     js_2flag
.14bb	ad aa 17	                lda     js_2pixy        ;Oui!
.14be	18		                clc                     ;On place la carry a 0
.14bf	69 02		                adc     #js_yoffset     ;On augmente
.14c1	c9 c7		                cmp     #199
.14c3	90 02		                bcc     sto2yp
.14c5	a9 c7		                lda     #199
.14c7	8d aa 17	sto2yp          sta     js_2pixy        ; le y
.14ca	68		                pla                     ;On recupere la valeur
.14cb	4a		js_2b2          lsr                     ;On decale js_2 bit 0 dans C
.14cc	90 20		                bcc     js_2b3          ;Est-ce vers la gauche (L)
.14ce	48		                pha                     ;On stack la valeur
.14cf	ee ae 17	                inc     js_2flag
.14d2	ad a8 17	                lda     js_2pixx        ;Oui!
.14d5	0d a9 17	                ora     js_2pixx+1
.14d8	f0 13		                beq     js_2b2out
.14da	38		                sec                     ;On place la carry a 1
.14db	ad a8 17	                lda     js_2pixx        ;Oui!
.14de	e9 02		                sbc     #js_xoffset     ;On diminue
.14e0	8d a8 17	                sta     js_2pixx        ; le X
.14e3	b0 08		                bcs     js_2b2out       ; de offset
.14e5	ad a9 17	                lda     js_2pixx+1
.14e8	f0 03		                beq     js_2b2out
.14ea	ce a9 17	                dec     js_2pixx+1      ; sur 16 bits
.14ed	68		js_2b2out       pla                     ;On recupere la valeur
.14ee	4a		js_2b3          lsr                     ;On decale js_2 bit 0 dans C
.14ef	90 22		                bcc     js_2b4          ;Est-ce vers la droite (R)
.14f1	48		                pha                     ;On stack la valeur
.14f2	ee ae 17	                inc     js_2flag
.14f5	ad a9 17	                lda     js_2pixx+1
.14f8	f0 0a		                beq     incj2x
.14fa	ad a8 17	                lda     js_2pixx
.14fd	c9 3e		                cmp     #$40-js_xoffset
.14ff	30 03		                bmi     incj2x
.1501	4c 12 15	                jmp     js_2b3out
.1504	18		incj2x          clc                     ;On place la carry a 0
.1505	ad a8 17	                lda     js_2pixx        ;Oui!
.1508	69 02		                adc     #js_xoffset     ;On augmente
.150a	8d a8 17	                sta     js_2pixx        ; le X
.150d	90 03		                bcc     js_2b3out       ; de offset
.150f	ee a9 17	                inc     js_2pixx+1      ; sur 16 bits
.1512	68		js_2b3out       pla                     ;On recupere la valeur
.1513	4a		js_2b4          lsr                     ;Estce le bbouton fire (F)
.1514	90 36		                bcc     port2_out       ;Oui!
.1516	ee ae 17	                inc     js_2flag
.1519	ee ad 17	                inc     js_2fire        ; on augmente le nombre de tir
.151c	a9 01		                lda     #%00000001
.151e	8d b2 17	                sta     js_2events
.1521	ad a8 17	                lda     js_2pixx
.1524	8d af 17	                sta     js_2clickx
.1527	ad a9 17	                lda     js_2pixx+1
.152a	8d b0 17	                sta     js_2clickx+1
.152d	ad aa 17	                lda     js_2pixy
.1530	8d b1 17	                sta     js_2clicky
.1533	ad 14 18	                lda     js_2val16a+1
.1536	49 40		                eor     #%01000000
.1538	8d 14 18	                sta     js_2val16a+1
.153b	a2 00		js_2wait        ldx     #$00
.153d	a0 ff		                ldy     #$ff
.153f	c8		js_2rel         iny
.1540	d0 01		                bne     sr1
.1542	e8		                inx
.1543			sr1
.1543	ad 00 dc	                lda     js_2port
.1546	49 ff		                eor     #$ff
.1548	29 10		                and     #$10
.154a	d0 f3		                bne     js_2rel         ; des boutons
.154c	ad ae 17	port2_out       lda     js_2flag
.154f	f0 08		                beq     out
.1551	20 b0 15	                jsr     js_2correct
.1554	a9 00		                lda     #0
.1556	8d ae 17	                sta     js_2flag
.1559	20 97 0a	out             jsr     pop
.155c			js_corrector
.155c	08		                php
.155d	48		                pha
.155e	ad a3 17	                lda     js_1flag
.1561	f0 08		                beq     check2
.1563	20 7b 15	                jsr     js_1correct
.1566	a9 00		                lda     #0
.1568	8d a3 17	                sta     js_1flag
.156b	ad ae 17	check2          lda     js_2flag
.156e	f0 08		                beq     no_update
.1570	20 b0 15	                jsr     js_2correct
.1573	a9 00		                lda     #0
.1575	8d ae 17	                sta     js_2flag
.1578	68		no_update       pla
.1579	28		                plp
.157a	60		                rts
.157b			js_1correct
.157b	08		                php
.157c	48		                pha
.157d	ad 9d 17	                lda     js_1pixx
.1580	8d ae 15	                sta     vallsb
.1583	ad 9e 17	                lda     js_1pixx+1
.1586	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.1587	6e ae 15	                ror     vallsb          ; Cnnnnnnn      On divise par 8 pc les
.158a	4e ae 15	                lsr     vallsb          ; 0Cnnnnnn      caracteres de 8 pixels
.158d	4e ae 15	                lsr     vallsb          ; 00Cnnnnn
.1590	ad ae 15	                lda     vallsb          ; devient = %00100000 = 32
.1593	8d a0 17	                sta     js_1x
.1596	ad 9f 17	                lda     js_1pixy
.1599	8d ae 15	                sta     vallsb
.159c	4e ae 15	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.159f	4e ae 15	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.15a2	4e ae 15	                lsr     vallsb          ; 00Cnnnnn
.15a5	ad ae 15	                lda     vallsb          ; devient = %00100000 = 32
.15a8	8d a1 17	                sta     js_1y
.15ab	68		                pla
.15ac	28		                plp
.15ad	60		                rts
>15ae	00		vallsb          .byte     0
>15af	00		regx            .byte     0
.15b0			js_2correct
.15b0	08		                php
.15b1	48		                pha
.15b2	ad a8 17	                lda     js_2pixx
.15b5	8d e3 15	                sta     vallsb
.15b8	ad a9 17	                lda     js_2pixx+1
.15bb	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.15bc	6e e3 15	                ror     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.15bf	4e e3 15	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.15c2	4e e3 15	                lsr     vallsb          ; 00Cnnnnn
.15c5	ad e3 15	                lda     vallsb          ; devient = %00100000 = 32
.15c8	8d ab 17	                sta     js_2x
.15cb	ad aa 17	                lda     js_2pixy
.15ce	8d e3 15	                sta     vallsb
.15d1	4e e3 15	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.15d4	4e e3 15	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.15d7	4e e3 15	                lsr     vallsb          ; 00Cnnnnn
.15da	ad e3 15	                lda     vallsb          ; devient = %00100000 = 32
.15dd	8d ac 17	                sta     js_2y
.15e0	68		                pla
.15e1	28		                plp
.15e2	60		                rts
>15e3	00		vallsb          .byte     0
>15e4	00		regx            .byte     0
.15e5			js_showvals
.15e5	20 75 16	                jsr     js_2showvals
.15e8	60		                rts
.15e9			js_1showvals
.15e9	20 58 0a	                jsr     push
.15ec	ad a0 17	                lda     js_1x
.15ef	20 75 0c	                jsr     a2hex
.15f2	ad 15 0c	                lda     a2hexstr+1
.15f5	8d c6 17	                sta     js_1val8+19
.15f8	ad 16 0c	                lda     a2hexstr+2
.15fb	8d c7 17	                sta     js_1val8+20
.15fe	ad 9d 17	                lda     js_1pixx
.1601	20 75 0c	                jsr     a2hex
.1604	ad 15 0c	                lda     a2hexstr+1
.1607	8d e5 17	                sta     js_1val16+14
.160a	ad 16 0c	                lda     a2hexstr+2
.160d	8d e6 17	                sta     js_1val16+15
.1610	ad 9e 17	                lda     js_1pixx+1
.1613	20 75 0c	                jsr     a2hex
.1616	ad 15 0c	                lda     a2hexstr+1
.1619	8d e3 17	                sta     js_1val16+12
.161c	ad 16 0c	                lda     a2hexstr+2
.161f	8d e4 17	                sta     js_1val16+13
.1622	ad a1 17	                lda     js_1y
.1625	20 75 0c	                jsr     a2hex
.1628	ad 15 0c	                lda     a2hexstr+1
.162b	8d ca 17	                sta     js_1val8+23
.162e	ad 16 0c	                lda     a2hexstr+2
.1631	8d cb 17	                sta     js_1val8+24
.1634	ad 9f 17	                lda     js_1pixy
.1637	20 75 0c	                jsr     a2hex
.163a	ad 15 0c	                lda     a2hexstr+1
.163d	8d eb 17	                sta     js_1val16+20
.1640	ad 16 0c	                lda     a2hexstr+2
.1643	8d ec 17	                sta     js_1val16+21
.1646	a9 00		                lda     #0
.1648	20 75 0c	                jsr     a2hex
.164b	ad 15 0c	                lda     a2hexstr+1
.164e	8d e9 17	                sta     js_1val16+18
.1651	ad 16 0c	                lda     a2hexstr+2
.1654	8d ea 17	                sta     js_1val16+19
.1657	ad a2 17	                lda     js_1fire
.165a	20 75 0c	                jsr     a2hex
.165d	ad 16 0c	                lda     a2hexstr+2
.1660	8d d4 17	                sta     js_1val8+33
.1663	a2 b3		                ldx     #<js_1val8
.1665	a0 17		                ldy     #>js_1val8
.1667	20 88 0d	                jsr     putscxy
.166a	a2 d7		                ldx     #<js_1val16
.166c	a0 17		                ldy     #>js_1val16
.166e	20 88 0d	                jsr     putscxy
.1671	20 97 0a	                jsr     pop
.1674	60		                rts
.1675			js_2showvals
.1675	20 58 0a	                jsr     push                    ; stack : y, x, a, flg
.1678	ad ab 17	                lda     js_2x
.167b	20 75 0c	                jsr     a2hex
.167e	ad 14 0c	                lda     a2hexstr
.1681	8d 02 18	                sta     js_2val8+19
.1684	ad 15 0c	                lda     a2hexstr+1
.1687	8d 03 18	                sta     js_2val8+20
.168a	ad af 17	                lda     js_2clickx
.168d	20 75 0c	                jsr     a2hex
.1690	ad 14 0c	                lda     a2hexstr
.1693	8d 30 18	                sta     js_2val16+14
.1696	ad 15 0c	                lda     a2hexstr+1
.1699	8d 31 18	                sta     js_2val16+15
.169c	ad b0 17	                lda     js_2clickx+1
.169f	20 75 0c	                jsr     a2hex
.16a2	ad 14 0c	                lda     a2hexstr
.16a5	8d 2e 18	                sta     js_2val16+12
.16a8	ad 15 0c	                lda     a2hexstr+1
.16ab	8d 2f 18	                sta     js_2val16+13
.16ae	ad ac 17	                lda     js_2y
.16b1	20 75 0c	                jsr     a2hex
.16b4	ad 14 0c	                lda     a2hexstr
.16b7	8d 06 18	                sta     js_2val8+23
.16ba	ad 15 0c	                lda     a2hexstr+1
.16bd	8d 07 18	                sta     js_2val8+24
.16c0	ad b1 17	                lda     js_2clicky
.16c3	20 75 0c	                jsr     a2hex
.16c6	ad 14 0c	                lda     a2hexstr
.16c9	8d 36 18	                sta     js_2val16+20
.16cc	ad 15 0c	                lda     a2hexstr+1
.16cf	8d 37 18	                sta     js_2val16+21
.16d2	a9 00		                lda     #0
.16d4	20 75 0c	                jsr     a2hex
.16d7	ad 14 0c	                lda     a2hexstr
.16da	8d 34 18	                sta     js_2val16+18
.16dd	ad 15 0c	                lda     a2hexstr+1
.16e0	8d 35 18	                sta     js_2val16+19
.16e3	ad ad 17	                lda     js_2fire
.16e6	20 75 0c	                jsr     a2hex
.16e9	ad 15 0c	                lda     a2hexstr+1
.16ec	8d 10 18	                sta     js_2val8+33
.16ef	a2 ef		                ldx     #<js_2val8
.16f1	a0 17		                ldy     #>js_2val8
.16f3	20 88 0d	                jsr     putscxy
.16f6	a2 13		                ldx     #<js_2val16a
.16f8	a0 18		                ldy     #>js_2val16a
.16fa	20 88 0d	                jsr     putscxy
.16fd	a2 22		                ldx     #<js_2val16
.16ff	a0 18		                ldy     #>js_2val16
.1701	20 88 0d	                jsr     putscxy
.1704	20 97 0a	                jsr     pop
.1707	60		                rts
.1708			js_updatecurs
.1708	20 58 0a	                jsr     push
.170b	ad ab 17	running         lda     js_2x
.170e	cd 97 17	                cmp     js_x
.1711	f0 06		                beq     chky
.1713	8d 97 17	                sta     js_x
.1716	ee 6a 17	                inc     flag
.1719	ad ac 17	chky            lda     js_2y
.171c	cd 98 17	                cmp     js_y
.171f	f0 06		                beq     chkflag
.1721	8d 98 17	                sta     js_y
.1724	ee 6a 17	                inc     flag
.1727	ad 6a 17	chkflag         lda     flag
.172a	f0 1e		                beq     showit
.172c	ae 99 17	                ldx     js_oldx
.172f	ac 9a 17	                ldy     js_oldy
.1732	20 6b 17	                jsr     js_eoraddrxy
.1735	ae 97 17	                ldx     js_x
.1738	ac 98 17	                ldy     js_y
.173b	20 6b 17	                jsr     js_eoraddrxy
.173e	ad 97 17	                lda     js_x
.1741	8d 99 17	                sta     js_oldx
.1744	ad 98 17	                lda     js_y
.1747	8d 9a 17	                sta     js_oldy
.174a	a9 00		showit          lda     #0
.174c	8d 6a 17	                sta     flag
.174f	8d 05 0c	                sta     addr1
.1752	a9 04		                lda     #$04
.1754	8d 06 0c	                sta     addr1+1
.1757	ae 97 17	                ldx     js_x
.175a	ac 98 17	                ldy     js_y
.175d	20 cb 0b	                jsr     xy2addr
.1760	ac 07 0c	                ldy     addr2
.1763	ae 08 0c	                ldx     addr2+1
.1766	20 97 0a	                jsr pop
.1769	60		                rts
>176a	00		flag            .byte   0
.176b			js_eoraddrxy
.176b	20 58 0a	                jsr     push
.176e	20 ad 0b	                jsr     savezp2
.1771	a9 04		                lda     #$04
.1773	8d 06 0c	                sta     addr1+1
.1776	a9 00		                lda     #0
.1778	8d 05 0c	                sta     addr1
.177b	20 cb 0b	                jsr     xy2addr
.177e	ac 07 0c	                ldy     addr2
.1781	84 fd		                sty     zpage2
.1783	ae 08 0c	                ldx     addr2+1
.1786	86 fe		                stx     zpage2+1
.1788	a0 00		                ldy     #0
.178a	b1 fd		                lda     (zpage2),y
.178c	49 40		                eor     #%01000000
.178e	91 fd		                sta     (zpage2),y
.1790	20 bc 0b	                jsr     restzp2
.1793	20 97 0a	                jsr     pop
.1796	60		                rts
>1797	00		js_x            .byte   0
>1798	00		js_y            .byte   0
>1799	ff		js_oldx         .byte   $ff
>179a	ff		js_oldy         .byte   $ff
>179b	00		js_oldcar       .byte   0
>179c	00		js_oldcol       .byte   0
>179d	00 00		js_1pixx        .word   0
>179f	00		js_1pixy        .byte   0
>17a0	00		js_1x           .byte   0
>17a1	00		js_1y           .byte   0
>17a2	00		js_1fire        .byte   0
>17a3	00		js_1flag        .byte   0
>17a4	00 00		js_1clickx      .word   0
>17a6	00		js_1clicky      .byte   0
>17a7	00		js_1events      .byte   0
>17a8	00 00		js_2pixx        .word   0
>17aa	00		js_2pixy        .byte   0
>17ab	00		js_2x           .byte   0
>17ac	00		js_2y           .byte   0
>17ad	00		js_2fire        .byte   0
>17ae	00		js_2flag        .byte   0
>17af	00 00		js_2clickx      .word   0
>17b1	00		js_2clicky      .byte   0
>17b2	00		js_2events      .byte   0
=$03			js_txtcol       =       vcyan
=$00			js_txtbak       =       bkcol0
>17b3	03 00 04 05	js_1val8        .byte     js_txtcol,js_txtbak,4,5
>17b7	50 0f 12 14	                .text   "Port 1 (x,y):($00,$00) Fire:(0)"
>17bb	20 31 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>17cb	30 29 20 46 09 12 05 3a 28 30 29
>17d6	00		                .byte   0
>17d7	03 00 0b 07	js_1val16       .byte   js_txtcol,js_txtbak,11,7
>17db	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>17df	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>17ee	00		                .byte   0
>17ef	03 00 04 0a	js_2val8        .byte   js_txtcol,js_txtbak,4,10
>17f3	43 01 12 50	                .text   "CarPos (x,y):($00,$00) Fire:(0)"
>17f7	0f 13 20 28 18 2c 19 29 3a 28 24 30 30 2c 24 30
>1807	30 29 20 46 09 12 05 3a 28 30 29
>1812	00		                .byte   0
>1813	01 00 04 0c	js_2val16a      .byte   vblanc,js_txtbak,4,12
>1817	43 0c 09 03	                .text   "Click pos."
>181b	0b 20 10 0f 13 2e
>1821	00		                .byte   0
>1822	03 00 10 0c	js_2val16       .byte   js_txtcol,js_txtbak,16,12
>1826	28 18 2c 19	                .text   "(x,y):($0000,$0000)"
>182a	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>1839	00		                .byte   0
>183a	00		js_1status     .byte 0
>183b	00		js_2status     .byte 0

;******  Return to file: j2tester.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/dir-00-64tass-src/lib/lib-c64-spriteman.asm

.183c			sprt_init
.183c	20 58 0a	                jsr     push
.183f	ad 91 18	                lda     sprt_ptr
.1842	20 73 19	                jsr     sprt_loadptr
.1845	20 8f 0b	                jsr     savezp1
.1848	20 ad 0b	                jsr     savezp2
.184b	ad 15 d0	                lda     vic+$15 ; enable sprite 2
.184e	09 04		                ora     #%00000100
.1850	8d 15 d0	                sta     vic+$15
.1853	a9 0d		                lda     #$0d
.1855	8d fa 07	                sta     $7fa
.1858	ad 4f 1c	                lda     sprt_ptr0
.185b	85 fb		                sta     zpage1
.185d	ad 50 1c	                lda     sprt_ptr0+1
.1860	85 fc		                sta     zpage1+1
.1862	a9 40		                lda     #$40
.1864	85 fd		                sta     zpage2
.1866	a9 03		                lda     #$03
.1868	85 fe		                sta     zpage2+1
.186a	a0 41		                ldy     #65
.186c	b1 fb		                lda     (zpage1),y      ; sprite y offset
.186e	8d b6 19	                sta     sprt_yoffset
.1871	88		                dey
.1872	b1 fb		                lda     (zpage1),y      ; sprite x offset
.1874	8d b5 19	                sta     sprt_xoffset
.1877	88		                dey
.1878	b1 fb		                lda     (zpage1),y      ; sprite color
.187a	8d 29 d0	                sta     $d029
.187d	88		                dey
.187e	a0 3e		                ldy     #62
.1880	b1 fb		nextbyte        lda     (zpage1),y
.1882	91 fd		                sta     (zpage2),y
.1884	88		                dey
.1885	d0 f9		                bne     nextbyte
.1887	20 9e 0b	                jsr     restzp1
.188a	20 bc 0b	                jsr     restzp2
.188d	20 97 0a	                jsr     pop
.1890	60		                rts
>1891	01		sprt_ptr        .byte   $01
.1892			sprt_calcpos
.1892	20 58 0a	                jsr     push
.1895	a9 00		                lda     #0
.1897	8d b8 19	                sta     sprt_x+1
.189a	8d ba 19	                sta     sprt_y+1
.189d	ad a9 17	                lda     js_2pixx+1
.18a0	18		                clc
.18a1	2a		                rol
.18a2	2a		                rol
.18a3	8d b8 19	                sta     sprt_x+1
.18a6	ad a8 17	                lda     js_2pixx
.18a9	18		                clc
.18aa	6d b5 19	                adc     sprt_xoffset
.18ad	8d b7 19	                sta     sprt_x
.18b0	90 08		                bcc     norepx
.18b2	ad b8 19	                lda     sprt_x+1
.18b5	09 04		                ora     #$04
.18b7	8d b8 19	                sta     sprt_x+1
.18ba	ad aa 17	norepx          lda     js_2pixy
.18bd	18		                clc
.18be	6d b6 19	                adc     sprt_yoffset
.18c1	8d b9 19	                sta     sprt_y
.18c4	20 97 0a	                jsr     pop
.18c7	60		                rts
.18c8			sprt_move
.18c8	20 58 0a	                jsr     push
.18cb	20 92 18	                jsr     sprt_calcpos
.18ce	ad b7 19	                lda     sprt_x
.18d1	8d 04 d0	                sta     vic+$04
.18d4	ad b8 19	                lda     sprt_x+1
.18d7	8d 10 d0	                sta     vic+$10
.18da	ad b9 19	                lda     sprt_y
.18dd	8d 05 d0	                sta     vic+$05
.18e0	20 e7 18	                jsr     sprt_showpos
.18e3	20 97 0a	                jsr     pop
.18e6	60		                rts
.18e7			sprt_showpos
.18e7	20 58 0a	                jsr     push
.18ea	ad b7 19	                lda     sprt_x
.18ed	20 75 0c	                jsr     a2hex
.18f0	ad 14 0c	                lda     a2hexstr
.18f3	8d 7e 1c	                sta     sprite_pos+26
.18f6	ad 15 0c	                lda     a2hexstr+1
.18f9	8d 7f 1c	                sta     sprite_pos+27
.18fc	ad b8 19	                lda     sprt_x+1
.18ff	20 75 0c	                jsr     a2hex
.1902	ad 14 0c	                lda     a2hexstr
.1905	8d 7c 1c	                sta     sprite_pos+24
.1908	ad 15 0c	                lda     a2hexstr+1
.190b	8d 7d 1c	                sta     sprite_pos+25
.190e	ad b9 19	                lda     sprt_y
.1911	20 75 0c	                jsr     a2hex
.1914	ad 14 0c	                lda     a2hexstr
.1917	8d 84 1c	                sta     sprite_pos+32
.191a	ad 15 0c	                lda     a2hexstr+1
.191d	8d 85 1c	                sta     sprite_pos+33
.1920	a9 00		                lda     #0
.1922	20 75 0c	                jsr     a2hex
.1925	ad 14 0c	                lda     a2hexstr
.1928	8d 82 1c	                sta     sprite_pos+30
.192b	ad 15 0c	                lda     a2hexstr+1
.192e	8d 83 1c	                sta     sprite_pos+31
.1931	a2 64		                ldx     #<sprite_pos
.1933	a0 1c		                ldy     #>sprite_pos
.1935	20 88 0d	                jsr     putscxy
.1938	20 97 0a	                jsr     pop
.193b	60		                rts
.193c			sprt_loadptr2
.193c	20 58 0a	                jsr     push
.193f	aa		                tax
.1940	8e 91 18	                stx     sprt_ptr
.1943	ad 50 1c	                lda     sprt_ptr0+1
.1946	8d 72 19	                sta     calcbuff+1
.1949	ad 4f 1c	                lda     sprt_ptr0
.194c	8d 71 19	                sta     calcbuff
.194f	e0 00		                cpx     #0
.1951	f0 11		                beq     addrok
.1953	ad 71 19	                lda     calcbuff
.1956	18		nextx           clc
.1957	69 42		                adc     #66
.1959	90 03		                bcc     nocarry
.195b	ee 72 19	                inc     calcbuff+1
.195e	8d 71 19	nocarry         sta     calcbuff
.1961	ca		                dex
.1962	d0 f2		                bne     nextx
.1964	ac 72 19	addrok          ldy     calcbuff+1
.1967	ae 71 19	                ldx     calcbuff
.196a	20 8d 19	                jsr     sprt_setimage
.196d	20 97 0a	                jsr     pop
.1970	60		                rts
>1971	00 00		calcbuff        .word   $0
.1973			sprt_loadptr
.1973	20 58 0a	                jsr     push
.1976	ad 91 18	                lda     sprt_ptr
.1979	18		                clc
.197a	2a		                rol
.197b	a8		                tay
.197c	b9 4f 1c	                lda     sprt_ptr0,y
.197f	aa		                tax
.1980	b9 50 1c	                lda     sprt_ptr0+1,y
.1983	a8		                tay
.1984	20 8d 19	                jsr     sprt_setimage
.1987	20 97 0a	                jsr     pop
.198a	60		                rts
>198b	00 00		calcbuff        .word   $0
.198d			sprt_setimage
.198d	20 58 0a	                jsr     push
.1990	20 8f 0b	                jsr     savezp1
.1993	20 ad 0b	                jsr     savezp2
.1996	84 fc		                sty     zpage1+1
.1998	86 fb		                stx     zpage1
.199a	a0 19		                ldy     #>sprt_image
.199c	84 fe		                sty     zpage2+1
.199e	a0 bb		                ldy     #<sprt_image
.19a0	84 fd		                sty     zpage2
.19a2	a0 42		                ldy     #66
.19a4	b1 fb		nextbyte        lda     (zpage1),y
.19a6	91 fd		                sta     (zpage2),y
.19a8	88		                dey
.19a9	d0 f9		                bne     nextbyte
.19ab	20 bc 0b	                jsr     restzp2
.19ae	20 9e 0b	                jsr     restzp1
.19b1	20 97 0a	                jsr     pop
.19b4	60		                rts
>19b5	00		sprt_xoffset    .byte   $00
>19b6	00		sprt_yoffset    .byte   $00
>19b7	00 00		sprt_x          .word   $0000
>19b9	00 00		sprt_y          .word   $0000
>19bb			sprt_image      .fill 66
>19fd	00 00 00 00	sprt_crxair     .byte $00, $00, $00, $00, $00, $00 ; 6
>1a01	00 00
>1a03	00 66 00 00	                .byte $00, $66, $00, $00, $3c, $00 ; 12
>1a07	3c 00
>1a09	00 18 00 00	                .byte $00, $18, $00, $00, $00, $00 ; 18
>1a0d	00 00
>1a0f	00 00 00 00	                .byte $00, $00, $00, $00, $18, $00 ; 24
>1a13	18 00
>1a15	80 00 01 c0	                .byte $80, $00, $01, $c0, $18, $03 ; 30
>1a19	18 03
>1a1b	66 66 66 c0	                .byte $66, $66, $66, $c0, $18, $03 ; 36
>1a1f	18 03
>1a21	80 00 01 00	                .byte $80, $00, $01, $00, $18, $00 ; 42
>1a25	18 00
>1a27	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 48
>1a2b	00 00
>1a2d	00 18 00 00	                .byte $00, $18, $00, $00, $3c, $00 ; 54
>1a31	3c 00
>1a33	00 66 00 00	                .byte $00, $66, $00, $00, $00, $00 ; 60
>1a37	00 00
>1a39	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1a3d	0c 28
>1a3f	80 00 00 e0	sprt_mouse      .byte $80, $00, $00, $e0, $00, $00 ; 6
>1a43	00 00
>1a45	b8 00 00 ce	                .byte $b8, $00, $00, $ce, $00, $00 ; 12
>1a49	00 00
>1a4b	83 80 00 c0	                .byte $83, $80, $00, $c0, $e0, $00 ; 18
>1a4f	e0 00
>1a51	80 18 00 c0	                .byte $80, $18, $00, $c0, $3c, $00 ; 24
>1a55	3c 00
>1a57	80 e0 00 c0	                .byte $80, $e0, $00, $c0, $60, $00 ; 30
>1a5b	60 00
>1a5d	98 30 00 fc	                .byte $98, $30, $00, $fc, $18, $00 ; 36
>1a61	18 00
>1a63	c6 0c 00 03	                .byte $c6, $0c, $00, $03, $06, $00 ; 42
>1a67	06 00
>1a69	01 9c 00 00	                .byte $01, $9c, $00, $00, $f0, $00 ; 48
>1a6d	f0 00
>1a6f	00 40 00 00	                .byte $00, $40, $00, $00, $00, $00 ; 54
>1a73	00 00
>1a75	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 60
>1a79	00 00
>1a7b	00 00 00 01	                .byte $00, $00, $00, $01, $18, $31 ; 66, X,X,X color, xoffset, yoffset
>1a7f	18 31
>1a81	00 7c 00 01	sprt_pointer    .byte $00, $7c, $00, $01, $83, $00 ; 6
>1a85	83 00
>1a87	06 10 c0 08	                .byte $06, $10, $c0, $08, $00, $30 ; 12
>1a8b	00 30
>1a8d	12 10 88 20	                .byte $12, $10, $88, $20, $00, $08 ; 18
>1a91	00 08
>1a93	40 ba 04 40	                .byte $40, $ba, $04, $40, $6c, $04 ; 24
>1a97	6c 04
>1a99	80 c6 02 aa	                .byte $80, $c6, $02, $aa, $82, $aa ; 30
>1a9d	82 aa
>1a9f	80 c6 02 40	                .byte $80, $c6, $02, $40, $6c, $04 ; 36
>1aa3	6c 04
>1aa5	40 ba 04 20	                .byte $40, $ba, $04, $20, $00, $08 ; 42
>1aa9	00 08
>1aab	12 10 90 08	                .byte $12, $10, $90, $08, $00, $20 ; 48
>1aaf	00 20
>1ab1	06 10 c0 01	                .byte $06, $10, $c0, $01, $83, $00 ; 54
>1ab5	83 00
>1ab7	00 7c 00 00	                .byte $00, $7c, $00, $00, $00, $00 ; 60
>1abb	00 00
>1abd	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1ac1	0c 28
>1ac3	55 55 55 aa	sprt_pointer2   .byte $55, $55, $55, $aa, $aa, $aa ; 6
>1ac7	aa aa
>1ac9	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 12
>1acd	aa aa
>1acf	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 18
>1ad3	aa aa
>1ad5	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 24
>1ad9	00 2a
>1adb	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 30
>1adf	00 2a
>1ae1	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 36
>1ae5	00 2a
>1ae7	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 42
>1aeb	00 2a
>1aed	54 00 55 aa	                .byte $54, $00, $55, $aa, $aa, $aa ; 48
>1af1	aa aa
>1af3	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 54
>1af7	aa aa
>1af9	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 60
>1afd	aa aa
>1aff	55 55 55 01	                .byte $55, $55, $55, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1b03	0c 28
>1b05	06 00 00 0f	sprt_hand       .byte $06, $00, $00, $0f, $00, $00 ; 6
>1b09	00 00
>1b0b	19 80 00 10	                .byte $19, $80, $00, $10, $80, $00 ; 12
>1b0f	80 00
>1b11	19 80 00 16	                .byte $19, $80, $00, $16, $b1, $8c ; 18
>1b15	b1 8c
>1b17	10 ca 52 10	                .byte $10, $ca, $52, $10, $84, $21 ; 24
>1b1b	84 21
>1b1d	10 84 21 30	                .byte $10, $84, $21, $30, $84, $21 ; 30
>1b21	84 21
>1b23	50 84 21 90	                .byte $50, $84, $21, $90, $84, $21 ; 36
>1b27	84 21
>1b29	90 00 01 90	                .byte $90, $00, $01, $90, $00, $01 ; 42
>1b2d	00 01
>1b2f	90 7f c1 90	                .byte $90, $7f, $c1, $90, $00, $01 ; 48
>1b33	00 01
>1b35	40 ff e2 40	                .byte $40, $ff, $e2, $40, $00, $02 ; 54
>1b39	00 02
>1b3b	3c 00 04 02	                .byte $3c, $00, $04, $02, $00, $08 ; 60
>1b3f	00 08
>1b41	03 ff f8 01	                .byte $03, $ff, $f8, $01, $12, $31 ; 66, X,X,X color, xoffset, yoffset
>1b45	12 31
>1b47	00 3e 00 01	sprt_ultraman   .byte $00, $3e, $00, $01, $c1, $c0 ; 6
>1b4b	c1 c0
>1b4d	0e 3e 30 08	                .byte $0e, $3e, $30, $08, $41, $08 ; 12
>1b51	41 08
>1b53	10 1c 04 10	                .byte $10, $1c, $04, $10, $22, $04 ; 18
>1b57	22 04
>1b59	24 1c 12 23	                .byte $24, $1c, $12, $23, $00, $62 ; 24
>1b5d	00 62
>1b5f	20 08 02 47	                .byte $20, $08, $02, $47, $c1, $f1 ; 30
>1b63	c1 f1
>1b65	6a aa ab 47	                .byte $6a, $aa, $ab, $47, $c9, $f1 ; 36
>1b69	c9 f1
>1b6b	20 08 02 20	                .byte $20, $08, $02, $20, $14, $02 ; 42
>1b6f	14 02
>1b71	20 00 02 10	                .byte $20, $00, $02, $10, $00, $04 ; 48
>1b75	00 04
>1b77	10 7f 04 08	                .byte $10, $7f, $04, $08, $00, $08 ; 54
>1b7b	00 08
>1b7d	06 3e 30 01	                .byte $06, $3e, $30, $01, $c1, $c0 ; 60
>1b81	c1 c0
>1b83	00 3e 00 01	                .byte $00, $3e, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1b87	0c 28
>1b89	00 1c 00 00	sprt_male       .byte $00, $1c, $00, $00, $3e, $00 ; 6
>1b8d	3e 00
>1b8f	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>1b93	3e 00
>1b95	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>1b99	08 00
>1b9b	00 ff 80 00	                .byte $00, $ff, $80, $00, $ff, $80 ; 24
>1b9f	ff 80
>1ba1	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>1ba5	9c 80
>1ba7	00 88 80 00	                .byte $00, $88, $80, $00, $be, $80 ; 36
>1bab	be 80
>1bad	00 be 80 01	                .byte $00, $be, $80, $01, $9c, $c0 ; 42
>1bb1	9c c0
>1bb3	01 94 c0 00	                .byte $01, $94, $c0, $00, $14, $00 ; 48
>1bb7	14 00
>1bb9	00 14 00 00	                .byte $00, $14, $00, $00, $14, $00 ; 54
>1bbd	14 00
>1bbf	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1bc3	77 00
>1bc5	00 77 00 01	                .byte $00, $77 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1bc9	0c 2f
>1bcb	00 3c 00 00	sprt_robot      .byte $00, $3c, $00, $00, $24, $00 ; 6
>1bcf	24 00
>1bd1	00 66 18 00	                .byte $00, $66, $18, $00, $66, $38 ; 12
>1bd5	66 38
>1bd7	00 24 38 00	                .byte $00, $24, $38, $00, $3c, $10 ; 18
>1bdb	3c 10
>1bdd	00 18 10 00	                .byte $00, $18, $10, $00, $18, $10 ; 24
>1be1	18 10
>1be3	0f ff f0 08	                .byte $0f, $ff, $f0, $08, $7e, $00 ; 30
>1be7	7e 00
>1be9	08 7e 00 08	                .byte $08, $7e, $00, $08, $18, $00 ; 36
>1bed	18 00
>1bef	1c 18 00 1c	                .byte $1c, $18, $00, $1c, $18, $00 ; 42
>1bf3	18 00
>1bf5	18 3c 00 00	                .byte $18, $3c, $00, $00, $3c, $00 ; 48
>1bf9	3c 00
>1bfb	00 24 00 00	                .byte $00, $24, $00, $00, $24, $00 ; 54
>1bff	24 00
>1c01	00 24 00 03	                .byte $00, $24, $00, $03, $e7, $c0 ; 60
>1c05	e7 c0
>1c07	03 e7 c0 01	                .byte $03, $e7, $c0, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1c0b	0c 28
>1c0d	00 1c 00 00	sprt_femme      .byte $00, $1c, $00, $00, $3e, $00 ; 6
>1c11	3e 00
>1c13	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>1c17	3e 00
>1c19	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>1c1d	08 00
>1c1f	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 24
>1c23	ff 80
>1c25	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>1c29	9c 80
>1c2b	00 88 80 00	                .byte $00, $88, $80, $00, $9c, $80 ; 36
>1c2f	9c 80
>1c31	00 be 80 01	                .byte $00, $be, $80, $01, $be, $c0 ; 42
>1c35	be c0
>1c37	01 be c0 00	                .byte $01, $be, $c0, $00, $7f, $00 ; 48
>1c3b	7f 00
>1c3d	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 54
>1c41	ff 80
>1c43	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1c47	77 00
>1c49	00 55 00 01	                .byte $00, $55 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1c4d	0c 2f
>1c4f	bb 19		sprt_ptr0       .word  sprt_image + (0*66)
>1c51	fd 19		sprt_ptr1       .word  sprt_image + (1*66)
>1c53	3f 1a		sprt_ptr2       .word  sprt_image + (2*66)
>1c55	81 1a		sprt_ptr3       .word  sprt_image + (3*66)
>1c57	c3 1a		sprt_ptr4       .word  sprt_image + (4*66)
>1c59	05 1b		sprt_ptr5       .word  sprt_image + (5*66)
>1c5b	47 1b		sprt_ptr6       .word  sprt_image + (6*66)
>1c5d	89 1b		sprt_ptr7       .word  sprt_image + (7*66)
>1c5f	cb 1b		sprt_ptr8       .word  sprt_image + (8*66)
>1c61	0d 1c		sprt_ptr9       .word  sprt_image + (9*66)
>1c63	ff		testbyte        .byte 255
=$07			sprt_txtcol     =       vjaune
=$00			sprt_txtbak     =       bkcol0
=$01			sprt_color      =       vwhite
>1c64	07 00 04 0e	sprite_pos      .byte   sprt_txtcol,sprt_txtbak,4,14
>1c68	53 10 12 09	                .text       "Sprite pos. (x,y):($0000,$0000)"
>1c6c	14 05 20 10 0f 13 2e 20 28 18 2c 19 29 3a 28 24
>1c7c	30 30 30 30 2c 24 30 30 30 30 29
>1c87	00		                .byte   0

;******  Return to file: j2tester.asm


;******  End of listing

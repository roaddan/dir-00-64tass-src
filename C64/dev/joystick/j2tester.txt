
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib" -i -L J2tester.txt -o J2tester.prg J2tester.asm
; Tue Nov  8 20:15:39 2022

;Offset	;Hex		;Source

;******  Processing input file: J2tester.asm

>0801	0b 08 0a 00	.word (+), 10
>0805	9e 32 30 36	.null $9e, "2061"
>0809	31 00
>080b	00 00		+ .word 0

;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_map_kernal.asm"

=$90			kiostatus = $90       ; Kernal I/O status word (st) (byte)
=$b7			curfnlen  = $b7       ; Current filename length (byte)
=$b9			cursecadd = $b9       ; Current secondary address (byte)
=$ba			curdevno  = $ba       ; Current device number (byte)
=$bb			curfptr   = $bb       ; Current file pointer (word)
=$fb			zpage1    = $fb       ; zero page 1 address (word)
=$fd			zpage2    = $fd       ; zero page 2 address (word)
=$fb			zeropage  = zpage1
=$fd			zonepage  = zpage2
=$0286			bascol    = $0286     ;basic next chr colscreenram (byte)
=$0400			scrnram   = $0400     ;video character ram
=$0400			scrram0   = $0400
=$0500			scrram1   = $0500
=$0600			scrram2   = $0600
=$0700			scrram3   = $0700
=$0801			basicsta  = $0801     ;basic start address
=$a000			basicrom  = $a000
=$d000			vicii     = $d000
=$d400			sid       = $d400     ;sid base address
=$d800			colorram  = $d800     ;video color ram
=$d800			colram0   = $d800
=$d900			colram1   = $d900
=$da00			colram2   = $da00
=$db00			colram3   = $db00
=$dc00			cia1      = $dc00     ;cia1  base address
=$dd00			cia2      = $dd00     ;cia2 base address
=$e000			kernalrom = $e000
=$03			bstop     =    $03      ;stop
=$05			bwhite    =    $05      ;set color white
=$08			block     =    $08      ;lock the charset
=$09			bunlock   =    $09      ;unlock the charset
=$0d			bcarret   =    $0d
=$0e			btext     =    $0e
=$11			bcrsdn    =    $11      ;cursor down 1 line
=$12			brevcol   =    $12
=$13			bhome     =    $13
=$14			bdelete   =    $14
=$1c			bred      =    $1c
=$1d			bcuright  =    $1d
=$1e			bgreen    =    $1e
=$1f			bblue     =    $1f
=$81			borange   =    $81
=$83			blrun     =    $83
=$85			bfkey1    =    $85
=$86			bfkey2    =    $86
=$87			bfkey3    =    $87
=$88			bfkey4    =    $88
=$89			bfkey5    =    $89
=$8a			bfkey6    =    $8a
=$8b			bfkey7    =    $8b
=$8c			bfkey8    =    $8c
=$8d			bcarret1  =    $8d
=$8e			bgraph    =    $8e
=$90			bblack    =    $90
=$91			bcuup     =    $91
=$92			brevoff   =    $92
=$93			bclear    =    $93
=$94			binsert   =    $94
=$95			bbrown    =    $95
=$96			bltred    =    $96
=$97			bdkgrey   =    $97
=$98			bmdgrey   =    $98
=$99			bltgreen  =    $99
=$9a			bltblue   =    $9a
=$9b			bltgrey   =    $9b
=$9c			bmagenta  =    $9c
=$9d			bculeft   =    $9d
=$9e			byellow   =    $9e
=$9f			bcyan     =    $9f
=$0286			carcol  = $0286
=$030a			ieval   = $030a
=$73			chrget  = $73
=$79			chrgot  = $79
=$0			cnoir       = $0
=$1			cblanc      = $1
=$2			crouge      = $2
=$3			cocean      = $3
=$4			cmauve      = $4
=$5			cvert       = $5
=$6			cbleu       = $6
=$7			cjaune      = $7
=$8			corange     = $8
=$9			cbrun       = $9
=$a			crose       = $a
=$b			cgrisfonce  = $b
=$c			cgrismoyen  = $c
=$d			cvertpale   = $d
=$e			cbleupale   = $e
=$f			cgrispale   = $f
=$0			cblack      = $0
=$1			cwhite      = $1
=$2			cred        = $2
=$3			ccyan       = $3
=$4			cpurple     = $4
=$5			cgreen      = $5
=$6			cblue       = $6
=$7			cyellow     = $7
=$9			cbrown      = $9
=$a			clightred   = $a
=$b			cdarkgray   = $b
=$c			cmidgray    = $c
=$d			clightgreen = $d
=$e			clightblue  = $e
=$f			clightgray  = $f
=$00			vnoir     =    %00000000
=$00			vblack    =    %00000000
=$01			vblanc    =    %00000001
=$01			vwhite    =    %00000001
=$02			vrouge    =    %00000010
=$02			vred      =    %00000010
=$03			vocean    =    %00000011
=$03			vcyan     =    %00000011
=$04			vmauve    =    %00000100
=$04			vpurple   =    %00000100
=$05			vvert     =    %00000101
=$05			vgreen    =    %00000101
=$06			vbleu     =    %00000110
=$06			vblue     =    %00000110
=$07			vjaune    =    %00000111
=$07			vyellow   =    %00000111
=$08			vorange   =    %00001000
=$09			vbrun     =    %00001001
=$09			vbrown    =    %00001001
=$0a			vrose     =    %00001010
=$0a			vpink     =    %00001010
=$0b			vgris     =    %00001011
=$0b			vgray     =    %00001011
=$0b			vgrey     =    %00001011
=$0c			vgris1    =    %00001100
=$0c			vgray1    =    %00001100
=$0c			vgrey1    =    %00001100
=$0d			vvert1    =    %00001101
=$0d			vgreen1   =    %00001101
=$0e			vbleu1    =    %00001110
=$0e			vblue1    =    %00001110
=$0f			vgris2    =    %00001111
=$0f			vgray2    =    %00001111
=$0f			vgrey2    =    %00001111
=$ed09			stalk   = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten = $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush  = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2  = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout   = $eddd ; Write byte to serial bus.
=$edef			sutalk  = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow = $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow = $eea0 ; Set DATA OUT to low
=$eea9			sclkdta = $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread  = $f1ad ; Read one byte from serial port.
=$f237			sstdin  = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout = $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen  = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose = $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ff81			cint    = $ff81 ; ($ff5b) Initialize the screen editor and vic-ii chip
=$ff84			ioinit  = $ff84 ; ($fda3) Initialize i/o devices.
=$ff87			ramtas  = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ff8a			restor  = $ff8a ; ($fd15) Restore default I/O vectors.
=$ff8d			vector  = $ff8d ; ($fd1a) Read/set I/O vectors.
=$ff90			setmsg  = $ff90 ; ($fe18) Set kernal message output flag
=$ff93			second  = $ff93 ; ($edb9) Send secondary address after listen
=$ff96			tksa    = $ff96 ; ($edc7) Send a secondary address to a device commanded to talk
=$ff99			memtop  = $ff99 ; ($fe25) Get/Set top of ram
=$ff9c			membot  = $ff9c ; ($fe34) Get/set bottom of memory.
=$ff9f			scankey = $ff9f ; $(ea87) Scan the keyboard
=$ffa2			settmo  = $ffa2 ; ($fe21) Set ieee bus card timeout flag
=$ffa5			acptr   = $ffa5 ; ($ee13) recoit un caractere provenant du port serie
=$ffa8			ciout   = $ffa8 ; ($eddd) Transmit a byte over the serial bus
=$ffab			untlk   = $ffab ; ($edef) Send an untalk command
=$ffae			unlsn   = $ffae ; ($edfe) Send an unlisten command
=$ffb1			listen  = $ffb1 ; ($ed0c) Command a device on the serial bus to listen.
=$ffb4			talk    = $ffb4 ; ($ed09) Command a device on the serial bus to talk
=$ffb7			readst  = $ffb7 ; ($fe07) Read i/o status word
=$ffba			setlfs  = $ffba ; ($fe00) Set up a logical file
=$ffbd			setnam  = $ffbd ; ($fdf9) Set up file name
=$ffc0			open    = $ffc0 ; ($f3a4) Open a logical file
=$ffc3			close   = $ffc3 ; ($f291) Close a logical file
=$ffc6			chkin   = $ffc6 ; ($f20e) Define an input channel.
=$ffc9			chkout  = $ffc9 ; ($f250) Define an output channel.
=$ffcc			clrchn  = $ffcc ; ($f333) - Clear all i/o channels.
=$ffcf			chrin   = $ffcf ; ($f157) Get a character from the input channel
=$ffd2			chrout  = $ffd2 ; ($f1ca) Output a character
=$ffd5			load    = $ffd5 ; ($f49e) Load device to RAM.
=$ffd8			save    = $ffd8 ; ($f5dd) Save memory to a device.
=$ffdb			settim  = $ffdb ; ($f6e4) Set the system clock.
=$ffde			rdtim   = $ffde ; ($f6dd) Read system clock
=$ffe1			stop    = $ffe1 ; ($f6ed) Check if stop key is pressed.
=$ffe4			getin   = $ffe4 ; ($f13e) Get a character.
=$ffe7			clall   = $ffe7 ; ($f32f) Close all open files
=$ffea			udtim   = $ffea ; ($f69b) Update the system clock
=$ffed			screen  = $ffed ; ($e505) Return screen format
=$fff0			plot    = $fff0 ; ($e50a) Set or retrieve cursor location x=column, y=line
=$fff3			iobase  = $fff3 ; ($e500) Define i/o memory page
=$e043			kd_poly1     =   $e043
=$e059			kd_poly2     =   $e059
=$e08d			kd_rmulc     =   $e08d       ;
=$e092			kd_raddc     =   $e092       ;
=$e097			kd_rnd       =   $e097
=$e12a			kd_sys       =   $e12a
=$e156			kd_save      =   $e156
=$e165			kd_verify    =   $e165
=$e168			kd_load      =   $e168
=$ff81			kcint       =   cint        ;   , init vic + ecran.
=$ff84			kioinit     =   ioinit      ;   , init i/o dev.
=$ff87			kramtas     =   ramtas      ;   , test de memoire.
=$ffa8			kciout      =   ciout       ;a  ,tx byte  acia
=$ff8a			krestor     =   restor      ;   , set ram plafond
=$ff8d			kvector     =   vector      ;
=$ff90			ksetmsg     =   setmsg      ;a  , set sys. msg. out
=$ff93			ksecond     =   second      ;a  , tx adresse sec.
=$ff96			ktksa       =   tksa        ;a  , talk adresse sec.
=$ff99			kmemtop     =   memtop      ; yx, (c) get mem high
=$ff9c			kmembot     =   membot      ; yx, (c) get mem low
=$ff9f			kscankey    =   scankey     ;   , scan clavier
=$ffa2			ksettmo     =   settmo      ;a  , set ieee timeout
=$ffa5			kacptr      =   acptr       ;a  ,rx serie.
=$ffab			kuntlk      =   untlk       ;   , iec-cmc stop talk
=$ffae			kunlsn      =   unlsn       ;   , iec-cmd stop lsn
=$ffb1			klisten     =   listen      ;a  , iec-cmd dev ecout
=$ffb4			ktalk       =   talk        ;a  , iec-cmd dev parle
=$ffb7			kreadst     =   readst      ;a  , lecture i/o stats
=$ffba			ksetlfs     =   setlfs      ;ayx, init fich logi.
=$ffbd			ksetnam     =   setnam      ;ayx, init num.nom.fich
=$ffc0			kopen       =   open        ;axy, ouvre fich-nom
=$ffc3			kclose      =   close       ;a  , ferme fichier #a.
=$ffc6			kchkin      =   chkin       ;  x,open canal in.
=$ffc9			kchkout     =   chkout      ;  x,open canal out
=$ffcc			kclrchn     =   clrchn      ;   , ferme canaux i/o.
=$ffcf			kchrin      =   chrin       ;a  ,recup. un car.
=$ffd2			kchrout     =   chrout      ;a  ,sort un car.
=$f1ca			kd_chrout    =   $f1ca
=$ffd5			kload       =   load        ;ayx, dev->ram
=$ffd8			ksave       =   save        ;   , sauve mem->dev
=$ffdb			ksettim     =   settim      ;axy, init sysclock
=$ffde			krdtim      =   rdtim       ;axy, lecture sysclock
=$ffe1			kstop       =   stop        ;a  , ret. stopkey stat
=$ffe4			kgetin      =   getin       ;a  , recup. car. #dev.
=$ffe7			kclall      =   clall       ;   , ferme fichiers.
=$ffea			kudtim      =   udtim       ;   , maj sysclock
=$ffed			kscreen     =   screen      ; yx, get format ecran
=$fff0			kplot       =   plot        ; yx, (c) get csr pos.
=$fff3			kiobase     =   iobase      ; yx, def. i/o mem page
=$e39a			k_echostartup = $e39a
=$e716			k_putch       = $e716 ; 52) Print a character.          ;a--;---; a = char
=$e7a0			k_cls         = $e7a0
=$e87c			k_cursordown  = $e87c
=$e8ea			k_scrollup    = $e8ea
=$e94e			k_home        = $e94e
=$e965			k_insertline  = $e965
=$e9c8			k_screlldown  = $e9c8
=$ed0c			k_devsndlstn  = $ed0c ; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a = dev #
=$ee13			k_ieeein      = $ee13 ; 60) Input from IEEE/Serial.     ;---;a--; a = Data byte
=$eef6			k_devsndutalk = $eef6 ; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn = $ef04 ; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg   = $f12f ; 53) Print system message.       ;--y;---; y = msg offset
=$f291			k_cloself     = $f291 ; 61) Close logical file .        ;a--;---; a = file #
=$f49e			k_loadsub     = $f49e ; 63) LOAD subroutine.            ;axy;---; a = # start=yyxx
=$f5af			k_prnsrch     = $f5af ; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch  = $f5b3 ; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam     = $f5c1 ; 65) Print filename.             ;---;---;
=$f6ed			k_stop        = $f6ed ; 62) Check for STOP key.         ;---;---; z = 1 pressed
=$f7ea			k_gettaphdblk = $f7ea ; 66) Find a tape hdr blk.        ;a--;---; a = len
=$f7ea			k_fndtaphdblk = $f7ea ; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay = $f817 ; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff = $f841 ; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape    = $f847 ; 70) Read tape.                  ;---;---;
=$f864			k_wrbuff2tape = $f864 ; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape      = $f869 ; 72) write tape.                 ;a--;---; a = ldr len
=$fb8e			k_resettapeio = $fb8e ; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect  = $fcbd ; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart   = $fce2 ; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot    = $fce2 ; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset   = $fe66 ;     Warm resetstart
=$fe66			k_warmboot    = $fe66 ;     Warm resetstart
=$ff93			k_devsndaddr2 = $ff93 ; 56) Send second address.        ;a--;---; a = SA or #$60
=0			kerr00 = 0      ; routine ended by the stop key.
=1			kerr01 = 1      ; too many files open.
=2			kerr02 = 2      ; file already open.
=3			kerr03 = 3      ; file not open.
=4			kerr04 = 4      ; file not found.
=5			kerr05 = 5      ; device not present.
=6			kerr06 = 6      ; file is not an input file.
=7			kerr07 = 7      ; file is not an output file.
=8			kerr08 = 8      ; file name is missing.
=9			kerr09 = 9      ; illegal device number.
=240			kerrf0 = 240    ; top-of-memory change rs-232 buffer allocation.
.080d	4c c8 17	pgmstart        jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: J2tester.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_map_vicii.asm"

=$d000			vic00 		= $d000		; VicII C64 memorymap base address
=$d000			vic 		= $d000		; $d000, 53248 Sprt 0 Horizontal position (X)
=53248			vicsprt0x 	= vic+$00	; --------------------------------------------
=53249			vic01		= vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53249			vicsprt0y 	= vic+$01	; --------------------------------------------
=53250			vic02 		= vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53250			vicsprt1x 	= vic+$02	; --------------------------------------------
=53251			vic03 		= vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53251			vicsprt1y 	= vic+$03	; --------------------------------------------
=53252			vic04 		= vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53252			vicsprt2x 	= vic+$04	; --------------------------------------------
=53253			vic05 		= vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53253			vicsprt2y 	= vic+$05	; --------------------------------------------
=53254			vic06		= vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53254			vicsprt3x 	= vic+$06	; --------------------------------------------
=53255			vic07 		= vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53255			vicsprt3y 	= vic+$07	; --------------------------------------------
=53256			vic08 		= vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53256			vicsprt4x 	= vic+$08	; --------------------------------------------
=53257			vic09 		= vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53257			vicsprt4y 	= vic+$09	; --------------------------------------------
=53258			vic0a 		= vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53258			vicsprt5x 	= vic+$0a	; --------------------------------------------
=53259			vic0b 		= vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53259			vicsprt5y 	= vic+$0b	; --------------------------------------------
=53260			vic0c 		= vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53260			vicsprt6x 	= vic+$0c	; --------------------------------------------
=53261			vic0d 		= vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53261			vicsprt6y 	= vic+$0d	; --------------------------------------------
=53262			vic0e 		= vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53262			vicsprt7x 	= vic+$0e	; --------------------------------------------
=53263			vic0f 		= vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53263			vicsprt7y 	= vic+$0f	; --------------------------------------------
=53264			vicspxmsb   = vic+$10	; MSB sprites horizontal position
=53264			vic10       = vic+$10	; $D010, 53264		 |s7|s6|s5|s4|s3|s2|s1|s0|
=53265			vicctrl0v   = vic+$11	; Miscellaneous Function
=53265			vic11       = vic+$11	; $d011, 53265
=53266			vicraster   = vic+$12	; Raster Register
=53266			vic12       = vic+$12	; $d012, 53266       |b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp   = vic+$13	; Light Pen Horizontal position
=53267			vic13       = vic+$13	; $d013, 53267	     |b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp   = vic+$14	; Light Pen Vertical position
=53268			vic14       = vic+$14	; $d014, 53268	     |b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl   = vic+$15	; Turn ON/OFF sprite (1/0)
=53269			vic15       = vic+$15	; $d015, 53269	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h   = vic+$16	; Miscellaneous Function
=53270			vic16       = vic+$16	; $d016, 53270
=53271			vicsprtexv  = vic+$17	; Expand sprite Vertically.
=53271			vic17       = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr   = vic+$18	; PTR for character display, bitmap and screen
=53272			vic18       = vic+$18	; $d018, 53272 (Bits 7 10 1)
=53273			vicirqreg   = vic+$19	; Interrupt register
=53273			vic19       = vic+$19	; $d019, 53273
=53274			vicirqena   = vic+$1a	; Interrupt enable register
=53274			vic1a       = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; Sprite background priority
=53275			vic1b       = vic+$1b 	; $d01b, 53275		 |s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; Select multi-color mode for sprites
=53276			vic1c       = vic+$1c 	; $d01c, 53276		 |s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh  = vic+$1d 	; Expand sprites Horizontally
=53277			vic1d       = vic+$1d 	; $d01d, 53277		 |s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol  = vic+$1e 	; Sprite to sprite collision
=53278			vic1e       = vic+$1e 	; $d01e, 53278		 |s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbkcol = vic+$1f   ; Sprite to Background collision
=53279			vic1f       = vic+$1f   ; $d01f, 53279		 |s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol  = vic+$20   ; Border Color : $00 to $0f
=53280			vic20       = vic+$20   ; $d020, 53280		 |--|--|--|--|c3|c2|c1|c0|
=53281			vicback0col = vic+$21 	; Background color #0 : $00 to $0f
=53281			vic21       = vic+$21 	; $d021, 53281		 |--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; Background color #1 : $00 to $0f
=53282			vic22       = vic+$22 	; $d022, 53282		 |--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; Background color #2 : $00 to $0f
=53283			vic23       = vic+$23 	; $d023, 53283		 |--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; Background color #3 : $00 to $0f
=53284			vic24       = vic+$24 	; $d024, 53284		 |--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmc0  = vic+$25 	; Sprite multicolor #0 : $00 to $0f
=53285			vic25       = vic+$25 	; $d025, 53285		 |--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmc1  = vic+$26 	; Sprite multicolor #1 : $00 to $0f
=53286			vic26       = vic+$26 	; $d026, 53286		 |--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; Sprite #0 color : $00 to $0f
=53287			vic27       = vic+$27 	; $d027, 53287		 |--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; Sprite #1 color : $00 to $0f
=53288			vic28       = vic+$28 	; $d028, 53288		 |--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; Sprite #2 color : $00 to $0f
=53289			vic29       = vic+$29 	; $d029, 53289		 |--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; Sprite #3 color : $00 to $0f
=53290			vic2a       = vic+$2a 	; $d02a, 53290		 |--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; Sprite #4 color : $00 to $0f
=53291			vic2b       = vic+$2b 	; $d02b, 53291		 |--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; Sprite #5 color : $00 to $0f
=53292			vic2c       = vic+$2c 	; $d02c, 53292		 |--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; Sprite #6 color : $00 to $0f
=53293			vic2d       = vic+$2d 	; $d02d, 53293		 |--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; Sprite #7 color : $00 to $0f
=53294			vic2e       = vic+$2e 	; $d02e, 53294		 |--|--|--|--|c3|c2|c1|c0|

;******  Return to file: J2tester.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_pushpop.asm"

.0810			push
.0810	08		            php             ; stack : flg, pcl, pch
.0811	78		            sei
.0812	8d 4c 08	            sta  ra         ; save a
.0815	68		            pla             ; stack : pcl, pch
.0816	8d 4b 08	            sta  rp         ; save rp
.0819	68		            pla             ; stack : pch
.081a	8d 4d 08	            sta  pc         ; save pcl
.081d	68		            pla             ; stack : -
.081e	8d 4e 08	            sta  pc+1       ; save pch
.0821	a5 fb		            lda  zpage1     ; get zpage1 low byte
.0823	48		            pha             ; stack : zp1l
.0824	a5 fc		            lda  zpage1+1   ; get zpage1 High byte
.0826	48		            pha             ; stack : zp1h, zp1l
.0827	a5 fd		            lda  zpage2     ; get zpage2 low byte
.0829	48		            pha             ; stack : zp2l, zp1h, zp1l
.082a	a5 fe		            lda  zpage2+1   ; get zpage2 High byte
.082c	48		            pha             ; stack : zp2h, zp2l, zp1h, zp1l
.082d	ad 4b 08	            lda  rp         ; get rp
.0830	48		            pha             ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0831	ad 4c 08	            lda  ra         ; get a
.0834	48		            pha             ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0835	8a		            txa             ; get x
.0836	48		            pha             ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0837	98		            tya             ; get y
.0838	48		            pha             ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0839	ad 4e 08	            lda  pc+1       ; get pch
.083c	48		            pha             ; st ack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.083d	ad 4d 08	            lda  pc         ; get pcl
.0840	48		            pha             ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0841	ad 4b 08	            lda  rp         ; get rp
.0844	48		            pha             ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0845	ad 4c 08	            lda  ra         ; get a
.0848	28		            plp             ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0849	58		            cli
.084a	60		            rts
>084b	00		rp          .byte           0
>084c	00		ra          .byte           0
>084d	00 00		pc          .word           0
.084f			pull
.084f			pop
.084f	78		            sei
.0850	68		            pla             ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0851	8d 84 08	            sta  pc         ; save pcl
.0854	68		            pla             ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0855	8d 85 08	            sta  pc+1       ; save pch
.0858	68		            pla             ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0859	a8		            tay             ; set y
.085a	68		            pla             ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.085b	aa		            tax             ; set x
.085c	68		            pla             ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.085d	8d 83 08	            sta  ra         ; save a
.0860	68		            pla             ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0861	8d 82 08	            sta  rp         ; save rp
.0864	68		            pla             ; stack : zp2l, zp1h, zp1l
.0865	85 fe		            sta  zpage2+1   ; get zpage1 low byte
.0867	68		            pla             ; stack : zp1h, zp1l
.0868	85 fd		            sta  zpage2     ; get zpage2 High byte
.086a	68		            pla             ; stack : zp1l
.086b	85 fc		            sta  zpage1+1   ; get zpage2 low byte
.086d	68		            pla             ; stack :
.086e	85 fb		            sta  zpage1     ; get zpage1 High byte
.0870	ad 85 08	            lda  pc+1       ; get pch
.0873	48		            pha             ; stack : pch
.0874	ad 84 08	            lda  pc
.0877	48		            pha             ; stack : pcl, pch
.0878	ad 82 08	            lda  rp         ; get rp
.087b	48		            pha             ; stack : rp, pcl, pch
.087c	ad 83 08	            lda  ra         ; set ra
.087f	58		            cli
.0880	28		            plp             ; stack : pcl, pch
.0881	60		            rts
>0882	00		rp          .byte           0
>0883	00		ra          .byte           0
>0884	00 00		pc          .word           0

;******  Return to file: J2tester.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_mem.asm"

.0886			blkfill
.0886	20 10 08	bf0            jsr  push
.0889	20 45 09	               jsr  savezp1
.088c	84 fc		               sty  zpage1+1
.088e	a0 00		               ldy  #$00
.0890	84 fb		               sty  zpage1
.0892	91 fb		bf1            sta  (zpage1),y
.0894	c8		               iny
.0895	d0 fb		               bne  bf1
.0897	20 54 09	               jsr  restzp1
.089a	20 4f 08	               jsr  pop
.089d	60		               rts
.089e			memfill
.089e	20 10 08	               jsr  push
.08a1	20 86 08	mf1            jsr  blkfill
.08a4	c8		               iny
.08a5	ca		               dex
.08a6	d0 f9		               bne  mf1
.08a8	20 4f 08	               jsr  pop
.08ab	60		               rts
.08ac			memmove
.08ac	20 10 08	               jsr  push
.08af	ba		               tsx            ; On se crée un pointeur ...
.08b0	8a		               txa
.08b1	18		               clc
.08b2	69 0b		               adc  #11
.08b4	a8		               tay
.08b5	a2 06		               ldx  #$06
.08b7	b9 00 01	nextbyte       lda  $0100,y
.08ba	99 06 09	               sta  words,y
.08bd	c8		               iny
.08be	ca		               dex
.08bf	d0 f6		               bne  nextbyte
.08c1	ad 06 09	               lda  s
.08c4	8d dd 08	               sta  source+1
.08c7	ad 07 09	               lda  s+1
.08ca	8d de 08	               sta  source+2
.08cd	ad 08 09	               lda  d
.08d0	8d da 08	               sta  destin+1
.08d3	ad 09 09	               lda  d+1
.08d6	8d db 08	               sta  destin+2
.08d9	ad ff ff	destin         lda  $ffff
.08dc	8d ff ff	source         sta  $ffff
.08df	ee da 08	               inc  destin+1
.08e2	d0 03		               bne  src
.08e4	ee db 08	               inc  destin+2
.08e7	ee dd 08	src            inc  source+1
.08ea	d0 03		               bne  cnt
.08ec	ee de 08	               inc  source+2
.08ef	ad 0a 09	cnt            lda  compte
.08f2	d0 08		               bne  decit
.08f4	ad 0b 09	               lda  compte+1
.08f7	f0 09		               beq  fini
.08f9	ce 0b 09	               dec  compte+1
.08fc	ce 0a 09	decit          dec  compte
.08ff	4c d9 08	               jmp  destin
.0902	20 4f 08	fini           jsr  pop
.0905	60		               rts
.0906			words
>0906	00 00		s         .word     $0000
>0908	00 00		d         .word     $0000
>090a	00 00		compte    .word     $0000
.090c			decword
.090c	20 10 08	               jsr  push
.090f	86 fd		               stx  zpage2
.0911	84 fe		               sty  zpage2+1
.0913	20 4f 08	               jsr  pop
.0916	60		               rts
.0917			inczp1
.0917	08		               php
.0918	48		               pha
.0919	e6 fb		               inc  zpage1
.091b	d0 02		               bne  nopage
.091d	e6 fc		               inc  zpage1+1
.091f	68		nopage         pla
.0920	28		               plp
.0921	60		               rts
.0922			deczp1
.0922	08		               php
.0923	48		               pha
.0924	a5 fb		               lda  zpage1
.0926	d0 02		               bne  nopage
.0928	c6 fc		               dec  zpage1+1
.092a	c6 fb		nopage         dec  zpage1
.092c	28		               plp
.092d	60		               rts
.092e			inczp2
.092e	08		               php
.092f	48		               pha
.0930	e6 fd		               inc  zpage2
.0932	d0 02		               bne  nopage
.0934	e6 fe		               inc  zpage2+1
.0936	68		nopage         pla
.0937	28		               plp
.0938	60		               rts
.0939			deczp2
.0939	08		               php
.093a	48		               pha
.093b	a5 fd		               lda  zpage2
.093d	d0 02		               bne  nopage
.093f	c6 fe		               dec  zpage2+1
.0941	c6 fd		nopage         dec  zpage2
.0943	28		               plp
.0944	60		               rts
.0945			savezp1
.0945	08		               php
.0946	48		               pha
.0947	a5 fb		               lda  zpage1
.0949	8d c1 09	               sta  zp1
.094c	a5 fc		               lda  zpage1+1
.094e	8d c2 09	               sta  zp1+1
.0951	68		               pla
.0952	28		               plp
.0953	60		               rts
.0954			restzp1
.0954	08		               php
.0955	48		               pha
.0956	ad c1 09	               lda zp1
.0959	85 fb		               sta zpage1
.095b	ad c2 09	               lda zp1+1
.095e	85 fc		               sta zpage1+1
.0960	68		               pla
.0961	28		               plp
.0962	60		               rts
.0963			savezp2
.0963	08		         php
.0964	48		         pha
.0965	a5 fd		         lda zpage2
.0967	8d c3 09	         sta zp2
.096a	a5 fe		         lda zpage2+1
.096c	8d c4 09	         sta zp2+1
.096f	68		         pla
.0970	28		         plp
.0971	60		         rts
.0972			restzp2
.0972	08		                php
.0973	48		                pha
.0974	ad c3 09	                lda  zp2
.0977	85 fd		                sta  zpage2
.0979	ad c4 09	                lda  zp2+1
.097c	85 fe		                sta  zpage2+1
.097e	68		                pla
.097f	28		                plp
.0980	60		                rts
.0981			xy2addr
.0981	08		                php
.0982	48		                pha
.0983	8a		                txa
.0984	48		                pha
.0985	98		                tya
.0986	48		                pha
.0987	ad bc 09	                lda     addr1+1
.098a	8d be 09	                sta     addr2+1
.098d	ad bb 09	                lda     addr1
.0990	8d bd 09	                sta     addr2
.0993	c0 00		                cpy     #$00
.0995	f0 0f		                beq     addx
.0997	18		moreline        clc
.0998	6d ba 09	                adc     ymult
.099b	90 03		                bcc     norepy
.099d	ee be 09	                inc     addr2+1
.09a0	8d bd 09	norepy          sta     addr2
.09a3	88		                dey
.09a4	d0 f1		                bne     moreline
.09a6	8a		addx            txa
.09a7	18		                clc
.09a8	6d bd 09	                adc     addr2
.09ab	90 03		                bcc     thatsit
.09ad	ee be 09	                inc     addr2+1
.09b0	8d bd 09	thatsit         sta     addr2
.09b3	68		                pla
.09b4	a8		                tay
.09b5	68		                pla
.09b6	aa		                tax
.09b7	68		                pla
.09b8	28		                plp
.09b9	60		                rts
>09ba	28		ymult          .byte     40
>09bb	00 00		addr1          .word     $0000
>09bd	00 00		addr2          .word     $0000
>09bf	00 00		bytecnt        .word     $0000
>09c1	00 00		zp1        .word   $0000
>09c3	00 00		zp2        .word   $0000

;******  Return to file: J2tester.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_hex.asm"

>09c5	00		a2hexbkcol     .byte     %00000000
>09c6	01		a2hexcol       .byte     1         ; pour aputscxy
.09c7			a2hexpos
>09c7	00		a2hexpx        .byte     0         ; pour aputsxy
>09c8	00		a2hexpy        .byte     0
>09c9	24		a2hexprefix    .byte     "$"       ; pour aputs
>09ca	00 00		a2hexstr       .word     $00
>09cc	00 00		               .word     $00
>09ce	00		               .byte     0         ; 0 end string
>09cf	25		abinprefix     .byte     "%"
>09d0	00 00 00 00	abin           .byte     0,0,0,0
>09d4	00 00 00 00	               .byte     0,0,0,0,0
>09d8	00
.09d9			nib2hex
.09d9	08		               php                 ; Sauvegarde le registre d'état.
.09da	29 0f		               and  #$0f           ; On masque le MSN.
.09dc	f8		               sed                 ; On place le CPU en mode décimal.
.09dd	18		               clc                 ; O -> Carry.
.09de	69 90		               adc  #$90           ; On ajoute 90.
.09e0	69 40		               adc  #$40           ; On ajoute 40.
.09e2	d8		               cld                 ; On place le CPU en mode hexa.
.09e3	28		               plp                 ; Récupère le registre d'état.
.09e4	60		               rts
.09e5			lsra4bits
.09e5	08		               php                 ; Sauvegarde le registre d'état.
.09e6	4a		               lsr                 ; Décale de   ...
.09e7	4a		               lsr                 ; ... 4 bits  ...
.09e8	4a		               lsr                 ; ... vers la ...
.09e9	4a		               lsr                 ; ... droite.
.09ea	28		               plp                 ; Récupère le registre d'état.
.09eb	60		               rts
.09ec			a2hex
.09ec	08		               php                 ; Sauvegarde le registre d'état.
.09ed	48		               pha                 ; Memorise le registre A.
.09ee	48		               pha                 ; On le remémorise encore.
.09ef	20 e5 09	               jsr  lsra4bits      ; On décale le MSN vers le LSN.
.09f2	20 d9 09	               jsr  nib2hex        ; On transforme le LSN en Petsci.
.09f5	8d ca 09	               sta  a2hexstr       ; On le sauvegarde dans la chaine.
.09f8	68		               pla                 ; On récupère le registre A.
.09f9	20 d9 09	               jsr  nib2hex        ; On transforme le LSN en petscii.
.09fc	8d cb 09	               sta  a2hexstr+1     ; On le sauvegarde dans la chaine.
.09ff	a9 00		               lda  #$00           ; On marque la fin de la ...
.0a01	8d cc 09	               sta  a2hexstr+2     ; ... chaine d'un zéro.
.0a04	68		               pla                 ; On récupère le registre A.
.0a05	28		               plp                 ; Récupère le registre d'état.
.0a06	60		               rts
.0a07			xy2hex
.0a07	20 10 08	               jsr  push           ; Sauvegarde le statut du CPU.
.0a0a	98		               tya                 ; On place Y dans A (Le LSB du mot)
.0a0b	20 ec 09	               jsr  a2hex          ; On le converti en hexadécimal.
.0a0e	ad ca 09	               lda  a2hexstr       ; On ...
.0a11	48		               pha                 ; ... sauvegarde ...
.0a12	ad cb 09	               lda  a2hexstr+1     ; ... la chaine  de la ...
.0a15	48		               pha                 ; ... première conversion ...
.0a16	ad cc 09	               lda  a2hexstr+2     ; ... sur la ...
.0a19	48		               pha                 ; ... pile.
.0a1a	8a		               txa                 ; On place X dans A (Le MSB du mot)
.0a1b	20 ec 09	               jsr  a2hex          ; On le converti en hexadécimal.
.0a1e	68		               pla                 ; On ramène ...
.0a1f	8d ce 09	               sta  a2hexstr+4     ; ... la conversion sauvegardée ...
.0a22	68		               pla                 ; ... en prenant soin de la ...
.0a23	8d cd 09	               sta  a2hexstr+3     ; ... placer à la suite de la ...
.0a26	68		               pla                 ; ... conversion ...
.0a27	8d cc 09	               sta  a2hexstr+2     ; ... précédente.
.0a2a	20 4f 08	               jsr  pop            ; Récupère le statut du CPU.
.0a2d			atobin
.0a2d	20 10 08	               jsr  push           ; Sauvegarde le statut du CPU.
.0a30	a2 08		               ldx  #8             ; Il y a 8 bits dans un octets.
.0a32	a0 00		               ldy  #0             ; Initialise le pointeur de chaine.
.0a34	2a		nextbit        rol                 ; A 76543210 -> 65432107.
.0a35	48		               pha                 ; On sauvegarde A.
.0a36	29 01		               and  #1             ; On basque tout sauf le bit 0.
.0a38	20 d9 09	               jsr  nib2hex        ; On le transforme en Hexa.
.0a3b	99 d0 09	               sta  abin,y         ; Place caractères du MSb au LSb.
.0a3e	68		               pla                 ; On rappelle A
.0a3f	c8		               iny                 ; Pointe sur le caractère suivant.
.0a40	ca		               dex                 ; Un bit de fait.
.0a41	d0 f1		               bne  nextbit        ; S'il en reste un continue.
.0a43	a9 00		               lda  #0             ; On place le caractère de fin ...
.0a45	99 d0 09	               sta  abin,y         ; ... à la fin de la chaine.
.0a48	20 4f 08	               jsr  pull           ; Récupère le statut du CPU.
.0a4b	60		               rts
.0a4c			putabin
.0a4c	20 10 08	               jsr  push           ; Sauvegarde le statut du CPU.
.0a4f	20 2d 0a	               jsr  atobin         ; Conversion binaire -> chaine.
.0a52	a2 d0		               ldx  #<abin         ; Pointe X et Y ...
.0a54	a0 09		               ldy  #>abin         ; ... sur l'adresse de la chaine.
.0a56	20 d5 0b	               jsr  puts
.0a59	20 4f 08	               jsr  pop            ; Récupère le statut du CPU.
.0a5c	60		               rts
.0a5d			putabinfmt
.0a5d	08		               php                 ; Sauvegarde le registre d'état.
.0a5e	48		               pha
.0a5f	a9 25		               lda     #"%"
.0a61	20 91 0b	               jsr     putch
.0a64	68		               pla
.0a65	20 4c 0a	               jsr     putabin
.0a68	28		               plp                 ; Récupère le registre d'état.
.0a69	60		               rts
.0a6a			putabinxy
.0a6a	20 e3 0b	               jsr     gotoxy
.0a6d	20 4c 0a	               jsr     putabin
.0a70	60		               rts
.0a71			putabinfmtxy
.0a71	20 e3 0b	               jsr     gotoxy
.0a74	20 5d 0a	               jsr     putabinfmt
.0a77	60		               rts

;******  Return to file: J2tester.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_text_mc.asm"

>0a78	00 00		scrptr         .word     $00            ; ... pointe position ecran, ...
>0a7a	00 00		colptr         .word     $00            ; ... pointe position couleur, ...
>0a7c	01		curcol         .byte     $01            ; ... la couleur du caractère, ...
>0a7d	06		brdcol         .byte     vbleu          ; ... la couleur de la bordure et
>0a7e	00		vicbkcol0      .byte     vnoir  ;$0b    ; 0,
>0a7f	06		vicbkcol1      .byte     vbleu  ;$0b    ; 1,
>0a80	01		vicbkcol2      .byte     vblanc ;$0b    ; 2,
>0a81	02		vicbkcol3      .byte     vrouge ;$0b    ; et 3.
>0a82	00		inverse        .byte     $00
>0a83	00 00 00 00	scraddr        .byte     0,0,0,0,0
>0a87	00
>0a88	00 00 00 00	coladdr        .byte     0,0,0,0,0
>0a8c	00
>0a8d	00		bkcol          .byte     %00000000      ; Pointeur de la couleur actuelle
>0a8e	00 04		virtaddr       .word     $0400          ; L'adresse de l'ecran virtuel
=$00			bkcol0         =         %00000000      ;
=$40			bkcol1         =         %01000000
=$80			bkcol2         =         %10000000
=$c0			bkcol3         =         %11000000
.0a90			scrmaninit
.0a90	08		               php            ; On sauvegarde les registres
.0a91	48		               pha
.0a92	a9 15		               lda  #%00010101; Selectionne la plage memoire video
.0a94	8d 18 d0	               sta  $d018     ; et le jeu de caracteeres.
.0a97	ad 16 d0	               lda  $d016     ; 53270 Lecture valeur actuelle pour ne
.0a9a	09 10		               ora  #%00010000; modifier que le bit 4.
.0a9c	29 ef		               and  #%11101111
.0a9e	8d 16 d0	               sta  $d016 ; 53270
.0aa1	ad 11 d0	               lda  $d011     ; On ne change que le bit 6 pour
.0aa4	09 40		               ora  #%01000000; selectionner le md. couleur de
.0aa6	8d 11 d0	               sta  $d011     ; 53270   ; fond etendu.
.0aa9	ad 7e 0a	               lda  vicbkcol0
.0aac	8d 21 d0	               sta  $d021     ; 53281
.0aaf	ad 7f 0a	               lda  vicbkcol1
.0ab2	8d 22 d0	               sta  $d022     ; 53282
.0ab5	ad 80 0a	               lda  vicbkcol2
.0ab8	8d 23 d0	               sta  $d023     ; 53283
.0abb	ad 81 0a	               lda  vicbkcol3
.0abe	8d 24 d0	               sta  $d024     ; 54284
.0ac1	a5 00		               lda  bkcol0    ; On charge et utilise la couleur de ...
.0ac3	8d 8d 0a	               sta  bkcol     ; ... fond par defaut des caracteres.
.0ac6	20 20 0b	               jsr  cls       ; Finalement on efface l'ecran
.0ac9	68		               pla
.0aca	28		               plp
.0acb	60		               rts
.0acc			curshome
.0acc	08		               php                      ; Sauvegarde flags ...
.0acd	48		               pha                      ; ... et accumulateur
.0ace	ad 8e 0a	               lda  virtaddr            ; In replace le pointeur ...
.0ad1	8d 78 0a	               sta  scrptr              ; ... d'écran virtuel à sa ...
.0ad4	ad 8f 0a	               lda  virtaddr+1          ; ... position initiale.
.0ad7	8d 79 0a	               sta  scrptr+1
.0ada	20 0b 0b	               jsr  synccolptr          ; On synchronise le ptr couleur.
.0add	ad 7e 0a	               lda  vicbkcol0
.0ae0	8d 21 d0	               sta  $d021               ; On recharge les couleurs ...
.0ae3	ad 7f 0a	               lda  vicbkcol1           ; ... de fond par defaut tel ...
.0ae6	8d 22 d0	               sta  $d022               ; ... que specifie dans les ...
.0ae9	ad 80 0a	               lda  vicbkcol2           ; ... les variables globales.
.0aec	8d 23 d0	               sta  $d023
.0aef	ad 81 0a	               lda  vicbkcol3
.0af2	8d 24 d0	               sta  $d024
.0af5	68		               pla                      ; Récupère l'accumulateur ...
.0af6	28		               plp                      ; ... et les flags
.0af7	60		               rts
.0af8			incscrptr
.0af8	08		               php                      ; Sauvegarde flags ...
.0af9	48		               pha                      ; ... et accumulateur
.0afa	ee 78 0a	               inc  scrptr              ; Incremente le pointeur
.0afd	ad 78 0a	               lda  scrptr              ; Regarde si on doit faire un ...
.0b00	d0 03		               bne  pasdereport         ; ... report dans le MSB
.0b02	ee 79 0a	               inc  scrptr+1            ; Si oui on fait le repport
.0b05	20 0b 0b	pasdereport    jsr  synccolptr          ; On synchronise le ptr couleur.
.0b08	68		               pla                      ; Récupère l'accumulateur ...
.0b09	28		               plp                      ; ... et les flags
.0b0a	60		               rts
.0b0b			synccolptr
.0b0b	08		               php                      ; Sauvegarde flags ...
.0b0c	48		               pha                      ; ... et accumulateur
.0b0d	ad 78 0a	               lda  scrptr              ; Récupère le LSB du scrptr ...
.0b10	8d 7a 0a	               sta  colptr              ; ... pour le placer dans le colptr.
.0b13	ad 79 0a	               lda  scrptr+1            ; Récupère le mSB du scrptr, ...
.0b16	29 03		               and  #%00000011          ; ... le converti pour pointer ...
.0b18	09 d8		               ora  #%11011000          ; ... la RAM couleur ...
.0b1a	8d 7b 0a	               sta  colptr+1            ; ... et le sauvegarde.
.0b1d	68		               pla                      ; Récupère l'accumulateur ...
.0b1e	28		               plp                      ; ... et les flags
.0b1f	60		               rts
.0b20			cls
.0b20	20 10 08	               jsr  push                ; On sauvegarde les registres
.0b23	ad 8e 0a	               lda  virtaddr            ; On replace le curseur d'ecran à
.0b26	8d 78 0a	               sta  scrptr
.0b29	ad 8f 0a	               lda  virtaddr+1          ; sa position initiale, ($0400).
.0b2c	8d 79 0a	               sta  scrptr+1
.0b2f	20 0b 0b	               jsr  synccolptr          ; On synchronise la couleur.
.0b32	20 d7 0c	               jsr  scrptr2zp1          ; L'adresse actuelle dans le ZP1.
.0b35	ad 7d 0a	               lda  brdcol              ; On place la couleur ...
.0b38	8d 20 d0	               sta  vicbordcol          ; ... de la bordure.
.0b3b	ad 8d 0a	               lda  bkcol               ; Associer couleur pour ...
.0b3e	8d 21 d0	               sta  vicback0col         ; ... remplir l'ecran ...
.0b41	a9 20		               lda  #$20                ; ... de caracteres espace.
.0b43	a2 04		               ldx  #4                  ; Quatre blocs de ...
.0b45	a0 00		nextline       ldy  #0                  ; ... 256 caracteres.
.0b47			nextcar
.0b47	91 fb		               sta  (zpage1),y          ;
.0b49	a5 fc		               lda  zpage1+1
.0b4b	48		               pha
.0b4c	29 03		               and  #%00000011
.0b4e	09 d8		               ora  #%11011000
.0b50	85 fc		               sta  zpage1+1
.0b52	a9 00		               lda  #0
.0b54	91 fb		               sta  (zpage1),y
.0b56	68		               pla
.0b57	85 fc		               sta  zpage1+1
.0b59	a9 20		               lda  #$20
.0b5b	88		               dey
.0b5c	d0 e9		               bne  nextcar
.0b5e	e6 fc		               inc  zpage1+1
.0b60	ca		               dex
.0b61	d0 e4		               bne  nextcar
.0b63	a9 00		               lda  #$00
.0b65	8d 78 0a	               sta  scrptr
.0b68	a9 04		               lda  #$04
.0b6a	8d 79 0a	               sta  scrptr+1
.0b6d	20 0b 0b	               jsr  synccolptr
.0b70	20 4f 08	               jsr  pop
.0b73	60		               rts
.0b74			setborder
.0b74	08		               php
.0b75	8d 7d 0a	               sta  brdcol
.0b78	8d 20 d0	               sta  vicbordcol
.0b7b	28		               plp
.0b7c	60		               rts
.0b7d			setinverse
.0b7d	08		               php
.0b7e	48		               pha
.0b7f	a9 80		               lda  #%10000000
.0b81	8d 82 0a	               sta  inverse
.0b84	68		               pla
.0b85	28		               plp
.0b86	60		               rts
.0b87			clrinverse
.0b87	08		               php
.0b88	48		               pha
.0b89	a9 00		               lda  #%00000000
.0b8b	8d 82 0a	               sta  inverse
.0b8e	68		               pla
.0b8f	28		               plp
.0b90	60		               rts
.0b91			putch
.0b91	20 10 08	               jsr  push           ; On sauvegarde les registres
.0b94	20 d7 0c	               jsr  scrptr2zp1     ; Place le ptr d'ecran sur zp1
.0b97	29 3f		               and  #%00111111     ; Masque des bits 6 et 7 pour la ouleur.
.0b99	0d 8d 0a	               ora  bkcol          ; On y ajoute la couleur du fond.
.0b9c	a0 00		               ldy  #0             ; Met Y à 0
.0b9e	91 fb		               sta  (zpage1),y     ; Affiche le caractere
.0ba0	ae 7b 0a	               ldx  colptr+1       ; Place le MSB du ptr de couleur
.0ba3	86 fc		               stx  zpage1+1       ; ... dans le MSB du zp1.
.0ba5	ad 7c 0a	               lda  curcol         ; Charge la couleur voulu dans.
.0ba8	91 fb		               sta  (zpage1),y     ; ... la ram de couleur.
.0baa	20 f8 0a	               jsr  incscrptr      ; Incremente le pointeur d'ecran.
.0bad	20 4f 08	               jsr  pop            ; Replace tous les registres
.0bb0	60		               rts
.0bb1			z2putch
.0bb1	20 10 08	               jsr  push           ; On sauvegarde les registres
.0bb4	a0 00		               ldy  #$0            ; Met Y à 0
.0bb6	b1 fd		               lda  (zpage2),y     ; Charge le caractere
.0bb8	20 91 0b	               jsr  putch          ; Appel pour affichage
.0bbb	20 4f 08	               jsr  pop            ; Replace tous les registres
.0bbe	60		               rts
.0bbf			z2puts
.0bbf	20 10 08	               jsr  push           ; On sauvegarde les registres
.0bc2	a0 00		               ldy  #$0            ; Met Y à 0
.0bc4	b1 fd		nextcar        lda  (zpage2),y     ; Charge le caractere
.0bc6	f0 09		               beq  endstr         ; Est-ce le 0 de fin de chaine ?
.0bc8	20 b1 0b	               jsr  z2putch        ; Appel pour affichage
.0bcb	20 2e 09	               jsr  inczp2         ; On pointe zp2 sur le prochain caractere.
.0bce	4c c4 0b	               jmp  nextcar        ; On passe au prochain
.0bd1	20 4f 08	endstr         jsr  pop            ; Replace tous les registres
.0bd4	60		               rts
.0bd5			puts
.0bd5	20 10 08	               jsr  push           ; On sauvegarde les registres
.0bd8	86 fd		               stx  zpage2         ; On positionne xp2 en fonction de
.0bda	84 fe		               sty  zpage2+1       ; l'adresse reçcu dans X et Y
.0bdc	20 bf 0b	               jsr  z2puts         ; Appel pour affichage
.0bdf	20 4f 08	               jsr  pop            ; Replace tous les registres
.0be2	60		               rts
.0be3			gotoxy
.0be3	20 10 08	               jsr  push           ; On sauvegarde les registres
.0be6	20 cc 0a	               jsr  curshome       ;  retourne le curseur virtuel a 0,0.
.0be9	c0 00		yagain         cpy  #0             ; Devons nous changer de ligne ?
.0beb	f0 09		               beq  setx           ; Si non, on verifi les colonnes.
.0bed	a9 28		               lda  #40            ; Si oui on ajoute 40
.0bef	20 74 0c	               jsr  setaddscrptr   ;  à l'adresse du pointeur virtuel autant
.0bf2	88		               dey                 ;  de fois qu'il est spécifié dans y.
.0bf3	4c e9 0b	               jmp  yagain         ; On passe au prochain y.
.0bf6	8a		setx           txa                 ; On ajoute la valeur de X
.0bf7	20 74 0c	               jsr  setaddscrptr   ;  à l'adresse di pointeur virtuel.
.0bfa	20 0b 0b	               jsr  synccolptr     ; Synchro du pointeur des couleurs
.0bfd	20 4f 08	               jsr  pop            ; Replace tous les registres
.0c00	60		               rts
.0c01			putsxy
.0c01	20 10 08	               jsr  push           ; On sauvegarde les registres et le zp2
.0c04	86 fd		               stx  zpage2         ; Place l'adr de chaine dans zp2
.0c06	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0c08	a0 00		               ldy  #0             ; On place le compteur
.0c0a	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0c0c	aa		               tax                 ; de A à X
.0c0d	20 2e 09	               jsr  inczp2         ; On deplace le pointeur
.0c10	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0c12	a8		               tay                 ; de A à Y
.0c13	20 e3 0b	               jsr  gotoxy         ; gotoxy : X=col, Y=ligne
.0c16	20 2e 09	               jsr  inczp2         ; On deplace le pointeur
.0c19	20 bf 0b	               jsr  z2puts         ; On imprime la chaine
.0c1c	20 4f 08	               jsr  pop            ; Replace tous les registres
.0c1f	60		               rts
.0c20			putscxy
.0c20	20 10 08	               jsr  push           ; On Sauvegarde registres et zp2
.0c23	86 fd		               stx  zpage2         ; On place l'adresse de chaine dans zp2
.0c25	84 fe		               sty  zpage2+1       ; X = MSB, Y = LSB
.0c27	a0 00		               ldy  #0             ; Place le compteur
.0c29	b1 fd		               lda  (zpage2),y     ; Charge la couleur
.0c2b	8d 7c 0a	               sta  curcol         ; ... et on la definie
.0c2e	20 2e 09	               jsr  inczp2         ; Pointe le prochain byte
.0c31	b1 fd		               lda  (zpage2),y     ; Récupere et sauvegarde ...
.0c33	8d 8d 0a	               sta  bkcol          ; ... l'index de couleur de fond
.0c36	20 2e 09	               jsr  inczp2         ; Deplace le pointeur
.0c39	b1 fd		               lda  (zpage2),y     ; Lecture de la position X
.0c3b	aa		               tax                 ; ... de A à X
.0c3c	20 2e 09	               jsr  inczp2         ; Deplace le pointeur
.0c3f	b1 fd		               lda  (zpage2),y     ; Lecture de la position Y
.0c41	a8		               tay                 ; de A à Y
.0c42	20 e3 0b	               jsr  gotoxy         ; gotoxy : X=col, y=ligne
.0c45	20 2e 09	               jsr  inczp2         ; Place le ptr en début de chaine
.0c48	20 bf 0b	               jsr  z2puts         ; On imprime la chaine
.0c4b	20 4f 08	               jsr  pop
.0c4e	60		               rts
.0c4f			setcurcol
.0c4f	08		               php
.0c50	8d 7c 0a	               sta  curcol
.0c53	28		               plp
.0c54	60		               rts
.0c55			setvicbkcol
.0c55	08		               php
.0c56	48		               pha
.0c57	8a		               txa
.0c58	29 03		               and  #$03
.0c5a	aa		               tax
.0c5b	68		               pla
.0c5c	9d 7e 0a	               sta  vicbkcol0,x
.0c5f	9d 21 d0	               sta  $d021,x
.0c62	28		               plp
.0c63	60		               rts
.0c64			setbkcol
.0c64	08		               php
.0c65	48		               pha
.0c66	0a		               asl
.0c67	0a		               asl
.0c68	0a		               asl
.0c69	0a		               asl
.0c6a	0a		               asl
.0c6b	0a		               asl
.0c6c	29 c0		               and  #$c0
.0c6e	8d 8d 0a	               sta  bkcol
.0c71	68		               pla
.0c72	28		               plp
.0c73	60		               rts
.0c74			setaddscrptr
.0c74	08		               php
.0c75	48		               pha
.0c76	18		               clc
.0c77	6d 78 0a	               adc  scrptr
.0c7a	8d 78 0a	               sta  scrptr
.0c7d	90 03		               bcc  norep
.0c7f	ee 79 0a	               inc  scrptr+1
.0c82	68		norep          pla
.0c83	28		               plp
.0c84	60		               rts
.0c85			scrptr2str
.0c85	20 10 08	               jsr  push
.0c88	ad 79 0a	               lda  scrptr+1
.0c8b	48		               pha
.0c8c	20 e5 09	               jsr  lsra4bits
.0c8f	20 d9 09	               jsr  nib2hex
.0c92	8d 83 0a	               sta  scraddr
.0c95	68		               pla
.0c96	20 e5 09	               jsr  lsra4bits
.0c99	20 d9 09	               jsr  nib2hex
.0c9c	8d 84 0a	               sta  scraddr+1
.0c9f	ad 79 0a	               lda  scrptr+1
.0ca2	48		               pha
.0ca3	20 e5 09	               jsr  lsra4bits
.0ca6	20 d9 09	               jsr  nib2hex
.0ca9	8d 83 0a	               sta  scraddr
.0cac	68		               pla
.0cad	20 e5 09	               jsr  lsra4bits
.0cb0	20 d9 09	               jsr  nib2hex
.0cb3	8d 84 0a	               sta  scraddr+1
.0cb6	ad 78 0a	               lda  scrptr
.0cb9	48		               pha
.0cba	20 e5 09	               jsr  lsra4bits
.0cbd	20 d9 09	               jsr  nib2hex
.0cc0	8d 85 0a	               sta  scraddr+2
.0cc3	8d 8a 0a	               sta  coladdr+2
.0cc6	68		               pla
.0cc7	20 e5 09	               jsr  lsra4bits
.0cca	20 d9 09	               jsr  nib2hex
.0ccd	8d 86 0a	               sta  scraddr+3
.0cd0	8d 8b 0a	               sta  coladdr+3
.0cd3	20 4f 08	               jsr  pop
.0cd6	60		               rts
.0cd7			scrptr2zp1
.0cd7	08		               php
.0cd8	48		               pha
.0cd9	ad 78 0a	               lda  scrptr
.0cdc	85 fb		               sta  zpage1
.0cde	ad 79 0a	               lda  scrptr+1
.0ce1	85 fc		               sta  zpage1+1
.0ce3	68		               pla
.0ce4	28		               plp
.0ce5	60		               rts
.0ce6			colptr2zp1
.0ce6	08		               php
.0ce7	48		               pha
.0ce8	ad 7a 0a	               lda  colptr
.0ceb	85 fb		               sta  zpage1
.0ced	ad 7b 0a	               lda  colptr+1
.0cf0	85 fc		               sta  zpage1+1
.0cf2	68		               pla
.0cf3	28		               plp
.0cf4	60		               rts
.0cf5			scrptr2zp2
.0cf5	08		               php
.0cf6	48		               pha
.0cf7	ad 78 0a	               lda  scrptr
.0cfa	85 fd		               sta  zpage2
.0cfc	ad 79 0a	               lda  scrptr+1
.0cff	85 fe		               sta  zpage2+1
.0d01	68		               pla
.0d02	28		               plp
.0d03	60		               rts
.0d04			colptr2zp2
.0d04	08		               php
.0d05	48		               pha
.0d06	ad 7a 0a	               lda  colptr
.0d09	85 fd		               sta  zpage2
.0d0b	ad 7b 0a	               lda  colptr+1
.0d0e	85 fe		               sta  zpage2+1
.0d10	68		               pla
.0d11	28		               plp
.0d12	60		               rts
.0d13			putrahex
.0d13	08		               php
.0d14	48		               pha
.0d15	20 ec 09	               jsr     a2hex
.0d18	a2 c6		               ldx     #<a2hexcol
.0d1a	a0 09		               ldy     #>a2hexcol
.0d1c	20 d5 0b	               jsr     puts
.0d1f	68		               pla
.0d20	28		               plp
.0d21	60		               rts
.0d22			putrahexxy
.0d22	08		               php
.0d23	48		               pha
.0d24	20 ec 09	               jsr  a2hex
.0d27	a9 c7		               lda  #<a2hexpos
.0d29	a0 09		               ldy  #>a2hexpos
.0d2b	20 01 0c	               jsr  putsxy
.0d2e	68		               pla
.0d2f	28		               plp
.0d30	60		               rts
.0d31			putrahexcxy
.0d31	08		               php
.0d32	68		               pla
.0d33	20 ec 09	               jsr  a2hex
.0d36	a9 c7		               lda  #<a2hexpos
.0d38	a0 09		               ldy  #>a2hexpos
.0d3a	20 20 0c	               jsr  putscxy
.0d3d	68		               pla
.0d3e	28		               plp
.0d3f	60		               rts

;******  Return to file: J2tester.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_showregs.asm"

.0d40			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=$c0			bkcol   =   bkcol3
.0d40	08		                php
.0d41	8d f2 0e	                sta  rega
.0d44	68		                pla
.0d45	8d f5 0e	                sta  regp
.0d48	8e f3 0e	                stx  regx
.0d4b	8c f4 0e	                sty  regy
.0d4e	ba		                tsx
.0d4f	8e f6 0e	                stx  regs
.0d52	68		                pla
.0d53	8d f8 0e	                sta  regpcl
.0d56	8d f9 0e	                sta  regpcl2
.0d59	68		                pla
.0d5a	8d f7 0e	                sta  regpch
.0d5d	ad f2 0e	                lda  rega
.0d60	48		                pha
.0d61	20 d9 09	                jsr  nib2hex
.0d64	8d 95 0e	                sta  vala+1
.0d67	68		                pla
.0d68	20 e5 09	                jsr  lsra4bits
.0d6b	20 d9 09	                jsr  nib2hex
.0d6e	8d 94 0e	                sta  vala
.0d71	ad f4 0e	                lda  regy
.0d74	48		                pha
.0d75	20 d9 09	                jsr  nib2hex
.0d78	8d ab 0e	                sta  valy+1
.0d7b	68		                pla
.0d7c	20 e5 09	                jsr  lsra4bits
.0d7f	20 d9 09	                jsr  nib2hex
.0d82	8d aa 0e	                sta  valy
.0d85	ad f3 0e	                lda  regx
.0d88	48		                pha
.0d89	20 d9 09	                jsr  nib2hex
.0d8c	8d a0 0e	                sta  valx+1
.0d8f	68		                pla
.0d90	20 e5 09	                jsr  lsra4bits
.0d93	20 d9 09	                jsr  nib2hex
.0d96	8d 9f 0e	                sta  valx
.0d99	ad f5 0e	                lda  regp
.0d9c	48		                pha
.0d9d	20 d9 09	                jsr  nib2hex
.0da0	8d b6 0e	                sta  valp+1
.0da3	68		                pla
.0da4	20 e5 09	                jsr  lsra4bits
.0da7	20 d9 09	                jsr  nib2hex
.0daa	8d b5 0e	                sta  valp
.0dad	ad f6 0e	                lda  regs
.0db0	48		                pha
.0db1	20 d9 09	                jsr  nib2hex
.0db4	8d c1 0e	                sta  vals+1
.0db7	68		                pla
.0db8	20 e5 09	                jsr  lsra4bits
.0dbb	20 d9 09	                jsr  nib2hex
.0dbe	8d c0 0e	                sta  vals
.0dc1	ad f7 0e	                lda  regpch
.0dc4	48		                pha
.0dc5	20 d9 09	                jsr  nib2hex
.0dc8	8d cd 0e	                sta  valpch+1
.0dcb	68		                pla
.0dcc	20 e5 09	                jsr  lsra4bits
.0dcf	20 d9 09	                jsr  nib2hex
.0dd2	8d cc 0e	                sta  valpch
.0dd5	ad f8 0e	                lda  regpcl
.0dd8	48		                pha
.0dd9	20 d9 09	                jsr  nib2hex
.0ddc	8d cf 0e	                sta  valpcl+1
.0ddf	68		                pla
.0de0	20 e5 09	                jsr  lsra4bits
.0de3	20 d9 09	                jsr  nib2hex
.0de6	8d ce 0e	                sta  valpcl
.0de9	a5 fb		                lda  zpage1
.0deb	48		                pha
.0dec	20 d9 09	                jsr  nib2hex
.0def	8d de 0e	                sta  valz1l
.0df2	68		                pla
.0df3	20 e5 09	                jsr  lsra4bits
.0df6	20 d9 09	                jsr  nib2hex
.0df9	8d df 0e	                sta  valz1l+1
.0dfc	a5 fc		                lda  zpage1+1
.0dfe	48		                pha
.0dff	20 d9 09	                jsr  nib2hex
.0e02	8d dc 0e	                sta  valz1h
.0e05	68		                pla
.0e06	20 e5 09	                jsr  lsra4bits
.0e09	20 d9 09	                jsr  nib2hex
.0e0c	8d dd 0e	                sta  valz1h+1
.0e0f	a5 fd		                lda  zpage2
.0e11	48		                pha
.0e12	20 d9 09	                jsr  nib2hex
.0e15	8d ee 0e	                sta  valz2l
.0e18	68		                pla
.0e19	20 e5 09	                jsr  lsra4bits
.0e1c	20 d9 09	                jsr  nib2hex
.0e1f	8d ef 0e	                sta  valz2l+1
.0e22	a5 fe		                lda  zpage2+1
.0e24	48		                pha
.0e25	20 d9 09	                jsr  nib2hex
.0e28	8d ec 0e	                sta  valz2h
.0e2b	68		                pla
.0e2c	20 e5 09	                jsr  lsra4bits
.0e2f	20 d9 09	                jsr  nib2hex
.0e32	8d ed 0e	                sta  valz2h+1
.0e35	20 7d 0b	                jsr  setinverse
.0e38	78		                sei
.0e39	a2 8c		                ldx  #<srega
.0e3b	a0 0e		                ldy  #>srega+1
.0e3d	20 20 0c	                jsr  putscxy
.0e40	a2 97		                ldx  #<sregx
.0e42	a0 0e		                ldy  #>sregx+1
.0e44	20 20 0c	                jsr  putscxy
.0e47	a2 a2		                ldx  #<sregy
.0e49	a0 0e		                ldy  #>sregy+1
.0e4b	20 20 0c	                jsr  putscxy
.0e4e	a2 ad		                ldx  #<sregp
.0e50	a0 0e		                ldy  #>sregp+1
.0e52	20 20 0c	                jsr  putscxy
.0e55	a2 b8		                ldx  #<sregs
.0e57	a0 0e		                ldy  #>sregs+1
.0e59	20 20 0c	                jsr  putscxy
.0e5c	a2 c3		                ldx  #<sregpc
.0e5e	a0 0e		                ldy  #>sregpc+1
.0e60	20 20 0c	                jsr  putscxy
.0e63	a2 d2		                ldx  #<sregz1
.0e65	a0 0e		                ldy  #>sregz1+1
.0e67	20 20 0c	                jsr  putscxy
.0e6a	a2 e2		                ldx  #<sregz2
.0e6c	a0 0e		                ldy  #>sregz2+1
.0e6e	20 20 0c	                jsr  putscxy
.0e71	58		                cli
.0e72	20 87 0b	                jsr  clrinverse
.0e75	ad f7 0e	                lda  regpch
.0e78	48		                pha
.0e79	ad f8 0e	                lda  regpcl
.0e7c	48		                pha
.0e7d	ac f4 0e	                ldy  regy
.0e80	ae f3 0e	                ldx  regx
.0e83	ad f5 0e	                lda  regp
.0e86	48		                pha
.0e87	ad f2 0e	                lda  rega
.0e8a	28		                plp
.0e8b	60		                rts
>0e8c	01 c0 00 17	srega   .byte   colr,bkcol,coln,line
>0e90	20 41 3a 24	        .text   ' a:$' ;4,24
>0e94	00 00 00	vala    .byte   0,0,0
>0e97	01 c0 06 17	sregx   .byte   colr,bkcol,coln+6,line
>0e9b	20 58 3a 24	        .text   ' x:$' ;4,24
>0e9f	00 00 00	valx    .byte   0,0,0
>0ea2	01 c0 0c 17	sregy   .byte   colr,bkcol,coln+12,line
>0ea6	20 59 3a 24	        .text   ' y:$' ;4,24
>0eaa	00 00 00	valy    .byte   0,0,0
>0ead	01 c0 12 17	sregp   .byte   colr,bkcol,coln+18,line
>0eb1	20 50 3a 24	        .text   ' p:$' ;4,24
>0eb5	00 00 00	valp    .byte   0,0,0
>0eb8	01 c0 18 17	sregs   .byte   colr,bkcol,coln+24,line
>0ebc	20 53 3a 24	        .text   ' s:$' ;4,24
>0ec0	00 00 00	vals    .byte   0,0,0
>0ec3	01 c0 1e 17	sregpc  .byte   colr,bkcol,coln+30,line
>0ec7	20 50 43 3a	        .text   ' pc:$' ;4,24
>0ecb	24
>0ecc	00 00		valpch  .byte   0,0
>0ece	00 00 20 00	valpcl  .byte   0,0,32,0
>0ed2	01 c0 03 18	sregz1  .byte   colr,bkcol,coln+3,line+1
>0ed6	20 5a 50 31	        .text   ' zp1:$' ;4,24
>0eda	3a 24
>0edc	00 00		valz1h  .byte   0,0
>0ede	00 00 20 00	valz1l  .byte   0,0,32,0
>0ee2	01 c0 0f 18	sregz2  .byte   colr,bkcol,coln+15,line+1
>0ee6	20 5a 50 32	        .text   ' zp2:$' ;4,24
>0eea	3a 24
>0eec	00 00		valz2h  .byte   0,0
>0eee	00 00 20 00	valz2l  .byte   0,0,32,0
>0ef2	00		rega    .byte   0
>0ef3	00		regx    .byte   0
>0ef4	00		regy    .byte   0
>0ef5	00		regp    .byte   0
>0ef6	00		regs    .byte   0
>0ef7	00		regpch  .byte   0
>0ef8	00		regpcl  .byte   0
>0ef9	00		regpcl2 .byte   0
>0efa	00		vzp1h   .byte   0
>0efb	00		vzp1l   .byte   0
>0efc	00		vzp2h   .byte   0
>0efd	00		vzp2l   .byte   0

;******  Return to file: J2tester.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_joystick.asm"

=$dc00			js_2port       =    $dc00
=$dc01			js_1port       =    $dc01
=$dc02			js_2dir        =    $dc02
=$dc03			js_1dir        =    $dc03
=2			js_xoffset     =    2
=2			js_yoffset     =    2
=0			js_location    =    0
.0efe			js_init
.0efe	20 10 08	               jsr  push
.0f01	ad 03 dc	               lda  js_1dir
.0f04	29 e0		               and  #$e0
.0f06	8d 03 dc	               sta  js_1dir
.0f09	ad 02 dc	               lda  js_2dir
.0f0c	29 e0		               and  #$e0
.0f0e	8d 02 dc	               sta  js_2dir
.0f11	20 4f 08	               jsr  pop
.0f14	60		               rts
.0f15			js_scan
.0f15	20 1c 0f	               jsr  js_1scan
.0f18	20 cb 0f	               jsr  js_2scan
.0f1b	60		               rts
.0f1c			js_1scan
.0f1c	20 10 08	               jsr  push
.0f1f	ad 01 dc	               lda  js_1port
.0f22	29 1f		               and  #$1f
.0f24	c9 00		               cmp  #$00
.0f26	d0 03		               bne  p1scan
.0f28	4c bb 0f	               jmp  port1_out
.0f2b	49 1f		p1scan         eor  #$1f
.0f2d	18		               clc
.0f2e	4a		js_1b0         lsr
.0f2f	90 14		               bcc  js_1b1
.0f31	48		               pha
.0f32	ee e5 12	               inc  js_1flag
.0f35	ad e1 12	               lda  js_1pixy
.0f38	38		               sec
.0f39	e9 02		               sbc  #js_yoffset
.0f3b	c9 f0		               cmp  #$f0
.0f3d	90 02		               bcc  sto1ym
.0f3f	a9 00		               lda  #$00
.0f41	8d e1 12	sto1ym         sta  js_1pixy
.0f44	68		               pla
.0f45	4a		js_1b1         lsr
.0f46	90 14		               bcc  js_1b2
.0f48	48		               pha
.0f49	ee e5 12	               inc  js_1flag
.0f4c	ad e1 12	               lda  js_1pixy
.0f4f	18		               clc
.0f50	69 02		               adc  #js_yoffset
.0f52	c9 c7		               cmp  #199
.0f54	90 02		               bcc  sto1yp
.0f56	a9 c7		               lda  #199
.0f58	8d e1 12	sto1yp         sta  js_1pixy
.0f5b	68		               pla
.0f5c	4a		js_1b2         lsr
.0f5d	90 20		               bcc  js_1b3
.0f5f	48		               pha
.0f60	ee e5 12	               inc  js_1flag
.0f63	ad df 12	               lda  js_1pixx
.0f66	0d e0 12	               ora  js_1pixx+1
.0f69	f0 13		               beq  js_1b2out
.0f6b	38		               sec
.0f6c	ad df 12	               lda  js_1pixx
.0f6f	e9 02		               sbc  #js_xoffset
.0f71	8d df 12	               sta  js_1pixx
.0f74	b0 08		               bcs  js_1b2out
.0f76	ad e0 12	               lda  js_1pixx+1
.0f79	f0 03		               beq  js_1b2out
.0f7b	ce e0 12	               dec  js_1pixx+1
.0f7e	68		js_1b2out      pla
.0f7f	4a		js_1b3         lsr
.0f80	90 22		               bcc  js_1b4
.0f82	48		               pha
.0f83	ee e5 12	               inc  js_1flag
.0f86	ad e0 12	               lda  js_1pixx+1
.0f89	f0 0a		               beq  incj1x
.0f8b	ad df 12	               lda  js_1pixx
.0f8e	c9 3c		               cmp  #$40-4
.0f90	30 03		               bmi  incj1x
.0f92	4c a3 0f	               jmp  js_1b3out
.0f95	18		incj1x         clc
.0f96	ad df 12	               lda  js_1pixx
.0f99	69 02		               adc  #js_xoffset
.0f9b	8d df 12	               sta  js_1pixx
.0f9e	90 03		               bcc  js_1b3out
.0fa0	ee e0 12	               inc  js_1pixx+1
.0fa3	68		js_1b3out      pla
.0fa4	4a		js_1b4          lsr                     ;Estce le bbouton fire (F)
.0fa5	90 14		                bcc     port1_out       ;Oui!
.0fa7	ee e5 12	                inc     js_1flag
.0faa	ee e4 12	                inc     js_1fire        ; on augmente le nombre de tir
.0fad	a2 01		js_1wait        ldx     #$01
.0faf	a0 ff		                ldy     #$ff
.0fb1	c8		js_1rel         iny
.0fb2	ad 01 dc	                lda     js_1port
.0fb5	49 ff		                eor     #$ff
.0fb7	29 10		                and     #$10
.0fb9	d0 f6		                bne     js_1rel         ; des boutons
.0fbb	ad e5 12	port1_out       lda     js_1flag
.0fbe	f0 08		                beq     out
.0fc0	20 bd 10	                jsr     js_1correct
.0fc3	a9 00		                lda     #0
.0fc5	8d e5 12	                sta     js_1flag
.0fc8	20 4f 08	out             jsr     pop
.0fcb			js_2scan
.0fcb	20 10 08	                jsr     push
.0fce	ad 00 dc	port2           lda     js_2port
.0fd1	29 1f		                and     #$1f
.0fd3	c9 1f		                cmp	#$1f
.0fd5	d0 03		                bne     p2scan
.0fd7	4c 8e 10	                jmp     port2_out
.0fda	49 1f		p2scan          eor     #$1f
.0fdc	a2 02		                ldx     #$02
.0fde	18		                clc
.0fdf	4a		js_2b0          lsr                     ;On decale js_2 bit 0 dans C
.0fe0	90 14		                bcc     js_2b1          ;Est-ce vers le haut (U)
.0fe2	48		                pha                     ;On stack la valeur
.0fe3	ee f0 12	                inc     js_2flag
.0fe6	ad ec 12	                lda     js_2pixy        ;Oui!
.0fe9	38		                sec                     ;On place la carry a 1
.0fea	e9 02		                sbc     #js_yoffset     ;On reduit
.0fec	c9 f0		                cmp     #$f0
.0fee	90 02		                bcc     sto2ym
.0ff0	a9 00		                lda     #$00
.0ff2	8d ec 12	sto2ym          sta     js_2pixy        ; le y
.0ff5	68		                pla                     ;On recupere la valeur
.0ff6	4a		js_2b1          lsr                     ;On decale js_2 bit 0 dans C
.0ff7	90 14		                bcc     js_2b2          ;Est-ce vers le bas (D)
.0ff9	48		                pha                     ;On stack la valeur
.0ffa	ee f0 12	                inc     js_2flag
.0ffd	ad ec 12	                lda     js_2pixy        ;Oui!
.1000	18		                clc                     ;On place la carry a 0
.1001	69 02		                adc     #js_yoffset     ;On augmente
.1003	c9 c7		                cmp     #199
.1005	90 02		                bcc     sto2yp
.1007	a9 c7		                lda     #199
.1009	8d ec 12	sto2yp          sta     js_2pixy        ; le y
.100c	68		                pla                     ;On recupere la valeur
.100d	4a		js_2b2          lsr                     ;On decale js_2 bit 0 dans C
.100e	90 20		                bcc     js_2b3          ;Est-ce vers la gauche (L)
.1010	48		                pha                     ;On stack la valeur
.1011	ee f0 12	                inc     js_2flag
.1014	ad ea 12	                lda     js_2pixx        ;Oui!
.1017	0d eb 12	                ora     js_2pixx+1
.101a	f0 13		                beq     js_2b2out
.101c	38		                sec                     ;On place la carry a 1
.101d	ad ea 12	                lda     js_2pixx        ;Oui!
.1020	e9 02		                sbc     #js_xoffset     ;On diminue
.1022	8d ea 12	                sta     js_2pixx        ; le X
.1025	b0 08		                bcs     js_2b2out       ; de offset
.1027	ad eb 12	                lda     js_2pixx+1
.102a	f0 03		                beq     js_2b2out
.102c	ce eb 12	                dec     js_2pixx+1      ; sur 16 bits
.102f	68		js_2b2out       pla                     ;On recupere la valeur
.1030	4a		js_2b3          lsr                     ;On decale js_2 bit 0 dans C
.1031	90 22		                bcc     js_2b4          ;Est-ce vers la droite (R)
.1033	48		                pha                     ;On stack la valeur
.1034	ee f0 12	                inc     js_2flag
.1037	ad eb 12	                lda     js_2pixx+1
.103a	f0 0a		                beq     incj2x
.103c	ad ea 12	                lda     js_2pixx
.103f	c9 3e		                cmp     #$40-js_xoffset
.1041	30 03		                bmi     incj2x
.1043	4c 54 10	                jmp     js_2b3out
.1046	18		incj2x          clc                     ;On place la carry a 0
.1047	ad ea 12	                lda     js_2pixx        ;Oui!
.104a	69 02		                adc     #js_xoffset     ;On augmente
.104c	8d ea 12	                sta     js_2pixx        ; le X
.104f	90 03		                bcc     js_2b3out       ; de offset
.1051	ee eb 12	                inc     js_2pixx+1      ; sur 16 bits
.1054	68		js_2b3out       pla                     ;On recupere la valeur
.1055	4a		js_2b4          lsr                     ;Estce le bbouton fire (F)
.1056	90 36		                bcc     port2_out       ;Oui!
.1058	ee f0 12	                inc     js_2flag
.105b	ee ef 12	                inc     js_2fire        ; on augmente le nombre de tir
.105e	a9 01		                lda     #%00000001
.1060	8d f4 12	                sta     js_2events
.1063	ad ea 12	                lda     js_2pixx
.1066	8d f1 12	                sta     js_2clickx
.1069	ad eb 12	                lda     js_2pixx+1
.106c	8d f2 12	                sta     js_2clickx+1
.106f	ad ec 12	                lda     js_2pixy
.1072	8d f3 12	                sta     js_2clicky
.1075	ad 56 13	                lda     js_2val16a+1
.1078	49 40		                eor     #%01000000
.107a	8d 56 13	                sta     js_2val16a+1
.107d	a2 00		js_2wait        ldx     #$00
.107f	a0 ff		                ldy     #$ff
.1081	c8		js_2rel         iny
.1082	d0 01		                bne     sr1
.1084	e8		                inx
.1085			sr1
.1085	ad 00 dc	                lda     js_2port
.1088	49 ff		                eor     #$ff
.108a	29 10		                and     #$10
.108c	d0 f3		                bne     js_2rel         ; des boutons
.108e	ad f0 12	port2_out       lda     js_2flag
.1091	f0 08		                beq     out
.1093	20 f2 10	                jsr     js_2correct
.1096	a9 00		                lda     #0
.1098	8d f0 12	                sta     js_2flag
.109b	20 4f 08	out             jsr     pop
.109e			js_corrector
.109e	08		                php
.109f	48		                pha
.10a0	ad e5 12	                lda     js_1flag
.10a3	f0 08		                beq     check2
.10a5	20 bd 10	                jsr     js_1correct
.10a8	a9 00		                lda     #0
.10aa	8d e5 12	                sta     js_1flag
.10ad	ad f0 12	check2          lda     js_2flag
.10b0	f0 08		                beq     no_update
.10b2	20 f2 10	                jsr     js_2correct
.10b5	a9 00		                lda     #0
.10b7	8d f0 12	                sta     js_2flag
.10ba	68		no_update       pla
.10bb	28		                plp
.10bc	60		                rts
.10bd			js_1correct
.10bd	08		                php
.10be	48		                pha
.10bf	ad df 12	                lda     js_1pixx
.10c2	8d f0 10	                sta     vallsb
.10c5	ad e0 12	                lda     js_1pixx+1
.10c8	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.10c9	6e f0 10	                ror     vallsb          ; Cnnnnnnn      On divise par 8 pc les
.10cc	4e f0 10	                lsr     vallsb          ; 0Cnnnnnn      caracteres de 8 pixels
.10cf	4e f0 10	                lsr     vallsb          ; 00Cnnnnn
.10d2	ad f0 10	                lda     vallsb          ; devient = %00100000 = 32
.10d5	8d e2 12	                sta     js_1x
.10d8	ad e1 12	                lda     js_1pixy
.10db	8d f0 10	                sta     vallsb
.10de	4e f0 10	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.10e1	4e f0 10	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.10e4	4e f0 10	                lsr     vallsb          ; 00Cnnnnn
.10e7	ad f0 10	                lda     vallsb          ; devient = %00100000 = 32
.10ea	8d e3 12	                sta     js_1y
.10ed	68		                pla
.10ee	28		                plp
.10ef	60		                rts
>10f0	00		vallsb          .byte     0
>10f1	00		regx            .byte     0
.10f2			js_2correct
.10f2	08		                php
.10f3	48		                pha
.10f4	ad ea 12	                lda     js_2pixx
.10f7	8d 25 11	                sta     vallsb
.10fa	ad eb 12	                lda     js_2pixx+1
.10fd	6a		                ror                     ; ex = %0000000100000001 = 257 pixel
.10fe	6e 25 11	                ror     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.1101	4e 25 11	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.1104	4e 25 11	                lsr     vallsb          ; 00Cnnnnn
.1107	ad 25 11	                lda     vallsb          ; devient = %00100000 = 32
.110a	8d ed 12	                sta     js_2x
.110d	ad ec 12	                lda     js_2pixy
.1110	8d 25 11	                sta     vallsb
.1113	4e 25 11	                lsr     vallsb          ; Cnnnnnnn     On divise par 8 pc les
.1116	4e 25 11	                lsr     vallsb          ; 0Cnnnnnn     caracteres de 8 pixels
.1119	4e 25 11	                lsr     vallsb          ; 00Cnnnnn
.111c	ad 25 11	                lda     vallsb          ; devient = %00100000 = 32
.111f	8d ee 12	                sta     js_2y
.1122	68		                pla
.1123	28		                plp
.1124	60		                rts
>1125	00		vallsb          .byte     0
>1126	00		regx            .byte     0
.1127			js_showvals
.1127	20 b7 11	                jsr     js_2showvals
.112a	60		                rts
.112b			js_1showvals
.112b	20 10 08	                jsr     push
.112e	ad e2 12	                lda     js_1x
.1131	20 ec 09	                jsr     a2hex
.1134	ad cb 09	                lda     a2hexstr+1
.1137	8d 08 13	                sta     js_1val8+19
.113a	ad cc 09	                lda     a2hexstr+2
.113d	8d 09 13	                sta     js_1val8+20
.1140	ad df 12	                lda     js_1pixx
.1143	20 ec 09	                jsr     a2hex
.1146	ad cb 09	                lda     a2hexstr+1
.1149	8d 27 13	                sta     js_1val16+14
.114c	ad cc 09	                lda     a2hexstr+2
.114f	8d 28 13	                sta     js_1val16+15
.1152	ad e0 12	                lda     js_1pixx+1
.1155	20 ec 09	                jsr     a2hex
.1158	ad cb 09	                lda     a2hexstr+1
.115b	8d 25 13	                sta     js_1val16+12
.115e	ad cc 09	                lda     a2hexstr+2
.1161	8d 26 13	                sta     js_1val16+13
.1164	ad e3 12	                lda     js_1y
.1167	20 ec 09	                jsr     a2hex
.116a	ad cb 09	                lda     a2hexstr+1
.116d	8d 0c 13	                sta     js_1val8+23
.1170	ad cc 09	                lda     a2hexstr+2
.1173	8d 0d 13	                sta     js_1val8+24
.1176	ad e1 12	                lda     js_1pixy
.1179	20 ec 09	                jsr     a2hex
.117c	ad cb 09	                lda     a2hexstr+1
.117f	8d 2d 13	                sta     js_1val16+20
.1182	ad cc 09	                lda     a2hexstr+2
.1185	8d 2e 13	                sta     js_1val16+21
.1188	a9 00		                lda     #0
.118a	20 ec 09	                jsr     a2hex
.118d	ad cb 09	                lda     a2hexstr+1
.1190	8d 2b 13	                sta     js_1val16+18
.1193	ad cc 09	                lda     a2hexstr+2
.1196	8d 2c 13	                sta     js_1val16+19
.1199	ad e4 12	                lda     js_1fire
.119c	20 ec 09	                jsr     a2hex
.119f	ad cc 09	                lda     a2hexstr+2
.11a2	8d 16 13	                sta     js_1val8+33
.11a5	a2 f5		                ldx     #<js_1val8
.11a7	a0 12		                ldy     #>js_1val8
.11a9	20 20 0c	                jsr     putscxy
.11ac	a2 19		                ldx     #<js_1val16
.11ae	a0 13		                ldy     #>js_1val16
.11b0	20 20 0c	                jsr     putscxy
.11b3	20 4f 08	                jsr     pop
.11b6	60		                rts
.11b7			js_2showvals
.11b7	20 10 08	                jsr     push                    ; stack : y, x, a, flg
.11ba	ad ed 12	                lda     js_2x
.11bd	20 ec 09	                jsr     a2hex
.11c0	ad ca 09	                lda     a2hexstr
.11c3	8d 44 13	                sta     js_2val8+19
.11c6	ad cb 09	                lda     a2hexstr+1
.11c9	8d 45 13	                sta     js_2val8+20
.11cc	ad f1 12	                lda     js_2clickx
.11cf	20 ec 09	                jsr     a2hex
.11d2	ad ca 09	                lda     a2hexstr
.11d5	8d 72 13	                sta     js_2val16+14
.11d8	ad cb 09	                lda     a2hexstr+1
.11db	8d 73 13	                sta     js_2val16+15
.11de	ad f2 12	                lda     js_2clickx+1
.11e1	20 ec 09	                jsr     a2hex
.11e4	ad ca 09	                lda     a2hexstr
.11e7	8d 70 13	                sta     js_2val16+12
.11ea	ad cb 09	                lda     a2hexstr+1
.11ed	8d 71 13	                sta     js_2val16+13
.11f0	ad ee 12	                lda     js_2y
.11f3	20 ec 09	                jsr     a2hex
.11f6	ad ca 09	                lda     a2hexstr
.11f9	8d 48 13	                sta     js_2val8+23
.11fc	ad cb 09	                lda     a2hexstr+1
.11ff	8d 49 13	                sta     js_2val8+24
.1202	ad f3 12	                lda     js_2clicky
.1205	20 ec 09	                jsr     a2hex
.1208	ad ca 09	                lda     a2hexstr
.120b	8d 78 13	                sta     js_2val16+20
.120e	ad cb 09	                lda     a2hexstr+1
.1211	8d 79 13	                sta     js_2val16+21
.1214	a9 00		                lda     #0
.1216	20 ec 09	                jsr     a2hex
.1219	ad ca 09	                lda     a2hexstr
.121c	8d 76 13	                sta     js_2val16+18
.121f	ad cb 09	                lda     a2hexstr+1
.1222	8d 77 13	                sta     js_2val16+19
.1225	ad ef 12	                lda     js_2fire
.1228	20 ec 09	                jsr     a2hex
.122b	ad cb 09	                lda     a2hexstr+1
.122e	8d 52 13	                sta     js_2val8+33
.1231	a2 31		                ldx     #<js_2val8
.1233	a0 13		                ldy     #>js_2val8
.1235	20 20 0c	                jsr     putscxy
.1238	a2 55		                ldx     #<js_2val16a
.123a	a0 13		                ldy     #>js_2val16a
.123c	20 20 0c	                jsr     putscxy
.123f	a2 64		                ldx     #<js_2val16
.1241	a0 13		                ldy     #>js_2val16
.1243	20 20 0c	                jsr     putscxy
.1246	20 4f 08	                jsr     pop
.1249	60		                rts
.124a			js_updatecurs
.124a	20 10 08	                jsr     push
.124d	ad ed 12	running         lda     js_2x
.1250	cd d9 12	                cmp     js_x
.1253	f0 06		                beq     chky
.1255	8d d9 12	                sta     js_x
.1258	ee ac 12	                inc     flag
.125b	ad ee 12	chky            lda     js_2y
.125e	cd da 12	                cmp     js_y
.1261	f0 06		                beq     chkflag
.1263	8d da 12	                sta     js_y
.1266	ee ac 12	                inc     flag
.1269	ad ac 12	chkflag         lda     flag
.126c	f0 1e		                beq     showit
.126e	ae db 12	                ldx     js_oldx
.1271	ac dc 12	                ldy     js_oldy
.1274	20 ad 12	                jsr     js_eoraddrxy
.1277	ae d9 12	                ldx     js_x
.127a	ac da 12	                ldy     js_y
.127d	20 ad 12	                jsr     js_eoraddrxy
.1280	ad d9 12	                lda     js_x
.1283	8d db 12	                sta     js_oldx
.1286	ad da 12	                lda     js_y
.1289	8d dc 12	                sta     js_oldy
.128c	a9 00		showit          lda     #0
.128e	8d ac 12	                sta     flag
.1291	8d bb 09	                sta     addr1
.1294	a9 04		                lda     #$04
.1296	8d bc 09	                sta     addr1+1
.1299	ae d9 12	                ldx     js_x
.129c	ac da 12	                ldy     js_y
.129f	20 81 09	                jsr     xy2addr
.12a2	ac bd 09	                ldy     addr2
.12a5	ae be 09	                ldx     addr2+1
.12a8	20 4f 08	                jsr pop
.12ab	60		                rts
>12ac	00		flag            .byte   0
.12ad			js_eoraddrxy
.12ad	20 10 08	                jsr     push
.12b0	20 63 09	                jsr     savezp2
.12b3	a9 04		                lda     #$04
.12b5	8d bc 09	                sta     addr1+1
.12b8	a9 00		                lda     #0
.12ba	8d bb 09	                sta     addr1
.12bd	20 81 09	                jsr     xy2addr
.12c0	ac bd 09	                ldy     addr2
.12c3	84 fd		                sty     zpage2
.12c5	ae be 09	                ldx     addr2+1
.12c8	86 fe		                stx     zpage2+1
.12ca	a0 00		                ldy     #0
.12cc	b1 fd		                lda     (zpage2),y
.12ce	49 40		                eor     #%01000000
.12d0	91 fd		                sta     (zpage2),y
.12d2	20 72 09	                jsr     restzp2
.12d5	20 4f 08	                jsr     pop
.12d8	60		                rts
>12d9	00		js_x            .byte   0
>12da	00		js_y            .byte   0
>12db	ff		js_oldx         .byte   $ff
>12dc	ff		js_oldy         .byte   $ff
>12dd	00		js_oldcar       .byte   0
>12de	00		js_oldcol       .byte   0
>12df	00 00		js_1pixx        .word   0
>12e1	00		js_1pixy        .byte   0
>12e2	00		js_1x           .byte   0
>12e3	00		js_1y           .byte   0
>12e4	00		js_1fire        .byte   0
>12e5	00		js_1flag        .byte   0
>12e6	00 00		js_1clickx      .word   0
>12e8	00		js_1clicky      .byte   0
>12e9	00		js_1events      .byte   0
>12ea	00 00		js_2pixx        .word   0
>12ec	00		js_2pixy        .byte   0
>12ed	00		js_2x           .byte   0
>12ee	00		js_2y           .byte   0
>12ef	00		js_2fire        .byte   0
>12f0	00		js_2flag        .byte   0
>12f1	00 00		js_2clickx      .word   0
>12f3	00		js_2clicky      .byte   0
>12f4	00		js_2events      .byte   0
=$03			js_txtcol       =       vcyan
=$00			js_txtbak       =       bkcol0
>12f5	03 00 04 05	js_1val8        .byte     js_txtcol,js_txtbak,4,5
>12f9	d0 4f 52 54	                .text   "Port 1 (x,y):($00,$00) Fire:(0)"
>12fd	20 31 20 28 58 2c 59 29 3a 28 24 30 30 2c 24 30
>130d	30 29 20 c6 49 52 45 3a 28 30 29
>1318	00		                .byte   0
>1319	03 00 0b 07	js_1val16       .byte   js_txtcol,js_txtbak,11,7
>131d	28 58 2c 59	                .text   "(x,y):($0000,$0000)"
>1321	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>1330	00		                .byte   0
>1331	03 00 04 0a	js_2val8        .byte   js_txtcol,js_txtbak,4,10
>1335	c3 41 52 d0	                .text   "CarPos (x,y):($00,$00) Fire:(0)"
>1339	4f 53 20 28 58 2c 59 29 3a 28 24 30 30 2c 24 30
>1349	30 29 20 c6 49 52 45 3a 28 30 29
>1354	00		                .byte   0
>1355	01 00 04 0c	js_2val16a      .byte   vblanc,js_txtbak,4,12
>1359	c3 4c 49 43	                .text   "Click pos."
>135d	4b 20 50 4f 53 2e
>1363	00		                .byte   0
>1364	03 00 10 0c	js_2val16       .byte   js_txtcol,js_txtbak,16,12
>1368	28 58 2c 59	                .text   "(x,y):($0000,$0000)"
>136c	29 3a 28 24 30 30 30 30 2c 24 30 30 30 30 29
>137b	00		                .byte   0

;******  Return to file: J2tester.asm


;******  Processing file: "/Users/daniel/Documents/Mes Sources/C64/Assembleur/64tass/Sources/lib/c64_lib_spriteman.asm"

.137c			sprt_init
.137c	20 10 08	                jsr     push
.137f	ad d1 13	                lda     sprt_ptr
.1382	20 b3 14	                jsr     sprt_loadptr
.1385	20 45 09	                jsr     savezp1
.1388	20 63 09	                jsr     savezp2
.138b	ad 15 d0	                lda     vic+$15 ; enable sprite 2
.138e	09 04		                ora     #%00000100
.1390	8d 15 d0	                sta     vic+$15
.1393	a9 0d		                lda     #$0d
.1395	8d fa 07	                sta     $7fa
.1398	ad 8f 17	                lda     sprt_ptr0
.139b	85 fb		                sta     zpage1
.139d	ad 90 17	                lda     sprt_ptr0+1
.13a0	85 fc		                sta     zpage1+1
.13a2	a9 40		                lda     #$40
.13a4	85 fd		                sta     zpage2
.13a6	a9 03		                lda     #$03
.13a8	85 fe		                sta     zpage2+1
.13aa	a0 41		                ldy     #65
.13ac	b1 fb		                lda     (zpage1),y      ; sprite y offset
.13ae	8d f6 14	                sta     sprt_yoffset
.13b1	88		                dey
.13b2	b1 fb		                lda     (zpage1),y      ; sprite x offset
.13b4	8d f5 14	                sta     sprt_xoffset
.13b7	88		                dey
.13b8	b1 fb		                lda     (zpage1),y      ; sprite color
.13ba	8d 29 d0	                sta     $d029
.13bd	88		                dey
.13be	a0 3e		                ldy     #62
.13c0	b1 fb		nextbyte        lda     (zpage1),y
.13c2	91 fd		                sta     (zpage2),y
.13c4	88		                dey
.13c5	d0 f9		                bne     nextbyte
.13c7	20 54 09	                jsr     restzp1
.13ca	20 72 09	                jsr     restzp2
.13cd	20 4f 08	                jsr     pop
.13d0	60		                rts
>13d1	01		sprt_ptr        .byte   $01
.13d2			sprt_calcpos
.13d2	20 10 08	                jsr     push
.13d5	a9 00		                lda     #0
.13d7	8d f8 14	                sta     sprt_x+1
.13da	8d fa 14	                sta     sprt_y+1
.13dd	ad eb 12	                lda     js_2pixx+1
.13e0	18		                clc
.13e1	2a		                rol
.13e2	2a		                rol
.13e3	8d f8 14	                sta     sprt_x+1
.13e6	ad ea 12	                lda     js_2pixx
.13e9	18		                clc
.13ea	6d f5 14	                adc     sprt_xoffset
.13ed	8d f7 14	                sta     sprt_x
.13f0	90 08		                bcc     norepx
.13f2	ad f8 14	                lda     sprt_x+1
.13f5	09 04		                ora     #$04
.13f7	8d f8 14	                sta     sprt_x+1
.13fa	ad ec 12	norepx          lda     js_2pixy
.13fd	18		                clc
.13fe	6d f6 14	                adc     sprt_yoffset
.1401	8d f9 14	                sta     sprt_y
.1404	20 4f 08	                jsr     pop
.1407	60		                rts
.1408			sprt_move
.1408	20 10 08	                jsr     push
.140b	20 d2 13	                jsr     sprt_calcpos
.140e	ad f7 14	                lda     sprt_x
.1411	8d 04 d0	                sta     vic+$04
.1414	ad f8 14	                lda     sprt_x+1
.1417	8d 10 d0	                sta     vic+$10
.141a	ad f9 14	                lda     sprt_y
.141d	8d 05 d0	                sta     vic+$05
.1420	20 27 14	                jsr     sprt_showpos
.1423	20 4f 08	                jsr     pop
.1426	60		                rts
.1427			sprt_showpos
.1427	20 10 08	                jsr     push
.142a	ad f7 14	                lda     sprt_x
.142d	20 ec 09	                jsr     a2hex
.1430	ad ca 09	                lda     a2hexstr
.1433	8d be 17	                sta     sprite_pos+26
.1436	ad cb 09	                lda     a2hexstr+1
.1439	8d bf 17	                sta     sprite_pos+27
.143c	ad f8 14	                lda     sprt_x+1
.143f	20 ec 09	                jsr     a2hex
.1442	ad ca 09	                lda     a2hexstr
.1445	8d bc 17	                sta     sprite_pos+24
.1448	ad cb 09	                lda     a2hexstr+1
.144b	8d bd 17	                sta     sprite_pos+25
.144e	ad f9 14	                lda     sprt_y
.1451	20 ec 09	                jsr     a2hex
.1454	ad ca 09	                lda     a2hexstr
.1457	8d c4 17	                sta     sprite_pos+32
.145a	ad cb 09	                lda     a2hexstr+1
.145d	8d c5 17	                sta     sprite_pos+33
.1460	a9 00		                lda     #0
.1462	20 ec 09	                jsr     a2hex
.1465	ad ca 09	                lda     a2hexstr
.1468	8d c2 17	                sta     sprite_pos+30
.146b	ad cb 09	                lda     a2hexstr+1
.146e	8d c3 17	                sta     sprite_pos+31
.1471	a2 a4		                ldx     #<sprite_pos
.1473	a0 17		                ldy     #>sprite_pos
.1475	20 20 0c	                jsr     putscxy
.1478	20 4f 08	                jsr     pop
.147b	60		                rts
.147c			sprt_loadptr2
.147c	20 10 08	                jsr     push
.147f	aa		                tax
.1480	8e d1 13	                stx     sprt_ptr
.1483	ad 90 17	                lda     sprt_ptr0+1
.1486	8d b2 14	                sta     calcbuff+1
.1489	ad 8f 17	                lda     sprt_ptr0
.148c	8d b1 14	                sta     calcbuff
.148f	e0 00		                cpx     #0
.1491	f0 11		                beq     addrok
.1493	ad b1 14	                lda     calcbuff
.1496	18		nextx           clc
.1497	69 42		                adc     #66
.1499	90 03		                bcc     nocarry
.149b	ee b2 14	                inc     calcbuff+1
.149e	8d b1 14	nocarry         sta     calcbuff
.14a1	ca		                dex
.14a2	d0 f2		                bne     nextx
.14a4	ac b2 14	addrok          ldy     calcbuff+1
.14a7	ae b1 14	                ldx     calcbuff
.14aa	20 cd 14	                jsr     sprt_setimage
.14ad	20 4f 08	                jsr     pop
.14b0	60		                rts
>14b1	00 00		calcbuff        .word   $0
.14b3			sprt_loadptr
.14b3	20 10 08	                jsr     push
.14b6	ad d1 13	                lda     sprt_ptr
.14b9	18		                clc
.14ba	2a		                rol
.14bb	a8		                tay
.14bc	b9 8f 17	                lda     sprt_ptr0,y
.14bf	aa		                tax
.14c0	b9 90 17	                lda     sprt_ptr0+1,y
.14c3	a8		                tay
.14c4	20 cd 14	                jsr     sprt_setimage
.14c7	20 4f 08	                jsr     pop
.14ca	60		                rts
>14cb	00 00		calcbuff        .word   $0
.14cd			sprt_setimage
.14cd	20 10 08	                jsr     push
.14d0	20 45 09	                jsr     savezp1
.14d3	20 63 09	                jsr     savezp2
.14d6	84 fc		                sty     zpage1+1
.14d8	86 fb		                stx     zpage1
.14da	a0 14		                ldy     #>sprt_image
.14dc	84 fe		                sty     zpage2+1
.14de	a0 fb		                ldy     #<sprt_image
.14e0	84 fd		                sty     zpage2
.14e2	a0 42		                ldy     #66
.14e4	b1 fb		nextbyte        lda     (zpage1),y
.14e6	91 fd		                sta     (zpage2),y
.14e8	88		                dey
.14e9	d0 f9		                bne     nextbyte
.14eb	20 72 09	                jsr     restzp2
.14ee	20 54 09	                jsr     restzp1
.14f1	20 4f 08	                jsr     pop
.14f4	60		                rts
>14f5	00		sprt_xoffset    .byte   $00
>14f6	00		sprt_yoffset    .byte   $00
>14f7	00 00		sprt_x          .word   $0000
>14f9	00 00		sprt_y          .word   $0000
>14fb			sprt_image      .fill 66
>153d	00 00 00 00	sprt_crxair     .byte $00, $00, $00, $00, $00, $00 ; 6
>1541	00 00
>1543	00 66 00 00	                .byte $00, $66, $00, $00, $3c, $00 ; 12
>1547	3c 00
>1549	00 18 00 00	                .byte $00, $18, $00, $00, $00, $00 ; 18
>154d	00 00
>154f	00 00 00 00	                .byte $00, $00, $00, $00, $18, $00 ; 24
>1553	18 00
>1555	80 00 01 c0	                .byte $80, $00, $01, $c0, $18, $03 ; 30
>1559	18 03
>155b	66 66 66 c0	                .byte $66, $66, $66, $c0, $18, $03 ; 36
>155f	18 03
>1561	80 00 01 00	                .byte $80, $00, $01, $00, $18, $00 ; 42
>1565	18 00
>1567	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 48
>156b	00 00
>156d	00 18 00 00	                .byte $00, $18, $00, $00, $3c, $00 ; 54
>1571	3c 00
>1573	00 66 00 00	                .byte $00, $66, $00, $00, $00, $00 ; 60
>1577	00 00
>1579	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>157d	0c 28
>157f	80 00 00 e0	sprt_mouse      .byte $80, $00, $00, $e0, $00, $00 ; 6
>1583	00 00
>1585	b8 00 00 ce	                .byte $b8, $00, $00, $ce, $00, $00 ; 12
>1589	00 00
>158b	83 80 00 c0	                .byte $83, $80, $00, $c0, $e0, $00 ; 18
>158f	e0 00
>1591	80 18 00 c0	                .byte $80, $18, $00, $c0, $3c, $00 ; 24
>1595	3c 00
>1597	80 e0 00 c0	                .byte $80, $e0, $00, $c0, $60, $00 ; 30
>159b	60 00
>159d	98 30 00 fc	                .byte $98, $30, $00, $fc, $18, $00 ; 36
>15a1	18 00
>15a3	c6 0c 00 03	                .byte $c6, $0c, $00, $03, $06, $00 ; 42
>15a7	06 00
>15a9	01 9c 00 00	                .byte $01, $9c, $00, $00, $f0, $00 ; 48
>15ad	f0 00
>15af	00 40 00 00	                .byte $00, $40, $00, $00, $00, $00 ; 54
>15b3	00 00
>15b5	00 00 00 00	                .byte $00, $00, $00, $00, $00, $00 ; 60
>15b9	00 00
>15bb	00 00 00 01	                .byte $00, $00, $00, $01, $18, $31 ; 66, X,X,X color, xoffset, yoffset
>15bf	18 31
>15c1	00 7c 00 01	sprt_pointer    .byte $00, $7c, $00, $01, $83, $00 ; 6
>15c5	83 00
>15c7	06 10 c0 08	                .byte $06, $10, $c0, $08, $00, $30 ; 12
>15cb	00 30
>15cd	12 10 88 20	                .byte $12, $10, $88, $20, $00, $08 ; 18
>15d1	00 08
>15d3	40 ba 04 40	                .byte $40, $ba, $04, $40, $6c, $04 ; 24
>15d7	6c 04
>15d9	80 c6 02 aa	                .byte $80, $c6, $02, $aa, $82, $aa ; 30
>15dd	82 aa
>15df	80 c6 02 40	                .byte $80, $c6, $02, $40, $6c, $04 ; 36
>15e3	6c 04
>15e5	40 ba 04 20	                .byte $40, $ba, $04, $20, $00, $08 ; 42
>15e9	00 08
>15eb	12 10 90 08	                .byte $12, $10, $90, $08, $00, $20 ; 48
>15ef	00 20
>15f1	06 10 c0 01	                .byte $06, $10, $c0, $01, $83, $00 ; 54
>15f5	83 00
>15f7	00 7c 00 00	                .byte $00, $7c, $00, $00, $00, $00 ; 60
>15fb	00 00
>15fd	00 00 00 01	                .byte $00, $00, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1601	0c 28
>1603	55 55 55 aa	sprt_pointer2   .byte $55, $55, $55, $aa, $aa, $aa ; 6
>1607	aa aa
>1609	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 12
>160d	aa aa
>160f	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 18
>1613	aa aa
>1615	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 24
>1619	00 2a
>161b	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 30
>161f	00 2a
>1621	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 36
>1625	00 2a
>1627	54 00 55 aa	                .byte $54, $00, $55, $aa, $00, $2a ; 42
>162b	00 2a
>162d	54 00 55 aa	                .byte $54, $00, $55, $aa, $aa, $aa ; 48
>1631	aa aa
>1633	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 54
>1637	aa aa
>1639	55 55 55 aa	                .byte $55, $55, $55, $aa, $aa, $aa ; 60
>163d	aa aa
>163f	55 55 55 01	                .byte $55, $55, $55, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>1643	0c 28
>1645	06 00 00 0f	sprt_hand       .byte $06, $00, $00, $0f, $00, $00 ; 6
>1649	00 00
>164b	19 80 00 10	                .byte $19, $80, $00, $10, $80, $00 ; 12
>164f	80 00
>1651	19 80 00 16	                .byte $19, $80, $00, $16, $b1, $8c ; 18
>1655	b1 8c
>1657	10 ca 52 10	                .byte $10, $ca, $52, $10, $84, $21 ; 24
>165b	84 21
>165d	10 84 21 30	                .byte $10, $84, $21, $30, $84, $21 ; 30
>1661	84 21
>1663	50 84 21 90	                .byte $50, $84, $21, $90, $84, $21 ; 36
>1667	84 21
>1669	90 00 01 90	                .byte $90, $00, $01, $90, $00, $01 ; 42
>166d	00 01
>166f	90 7f c1 90	                .byte $90, $7f, $c1, $90, $00, $01 ; 48
>1673	00 01
>1675	40 ff e2 40	                .byte $40, $ff, $e2, $40, $00, $02 ; 54
>1679	00 02
>167b	3c 00 04 02	                .byte $3c, $00, $04, $02, $00, $08 ; 60
>167f	00 08
>1681	03 ff f8 01	                .byte $03, $ff, $f8, $01, $12, $31 ; 66, X,X,X color, xoffset, yoffset
>1685	12 31
>1687	00 3e 00 01	sprt_ultraman   .byte $00, $3e, $00, $01, $c1, $c0 ; 6
>168b	c1 c0
>168d	0e 3e 30 08	                .byte $0e, $3e, $30, $08, $41, $08 ; 12
>1691	41 08
>1693	10 1c 04 10	                .byte $10, $1c, $04, $10, $22, $04 ; 18
>1697	22 04
>1699	24 1c 12 23	                .byte $24, $1c, $12, $23, $00, $62 ; 24
>169d	00 62
>169f	20 08 02 47	                .byte $20, $08, $02, $47, $c1, $f1 ; 30
>16a3	c1 f1
>16a5	6a aa ab 47	                .byte $6a, $aa, $ab, $47, $c9, $f1 ; 36
>16a9	c9 f1
>16ab	20 08 02 20	                .byte $20, $08, $02, $20, $14, $02 ; 42
>16af	14 02
>16b1	20 00 02 10	                .byte $20, $00, $02, $10, $00, $04 ; 48
>16b5	00 04
>16b7	10 7f 04 08	                .byte $10, $7f, $04, $08, $00, $08 ; 54
>16bb	00 08
>16bd	06 3e 30 01	                .byte $06, $3e, $30, $01, $c1, $c0 ; 60
>16c1	c1 c0
>16c3	00 3e 00 01	                .byte $00, $3e, $00, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>16c7	0c 28
>16c9	00 1c 00 00	sprt_male       .byte $00, $1c, $00, $00, $3e, $00 ; 6
>16cd	3e 00
>16cf	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>16d3	3e 00
>16d5	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>16d9	08 00
>16db	00 ff 80 00	                .byte $00, $ff, $80, $00, $ff, $80 ; 24
>16df	ff 80
>16e1	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>16e5	9c 80
>16e7	00 88 80 00	                .byte $00, $88, $80, $00, $be, $80 ; 36
>16eb	be 80
>16ed	00 be 80 01	                .byte $00, $be, $80, $01, $9c, $c0 ; 42
>16f1	9c c0
>16f3	01 94 c0 00	                .byte $01, $94, $c0, $00, $14, $00 ; 48
>16f7	14 00
>16f9	00 14 00 00	                .byte $00, $14, $00, $00, $14, $00 ; 54
>16fd	14 00
>16ff	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1703	77 00
>1705	00 77 00 01	                .byte $00, $77 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>1709	0c 2f
>170b	00 3c 00 00	sprt_robot      .byte $00, $3c, $00, $00, $24, $00 ; 6
>170f	24 00
>1711	00 66 18 00	                .byte $00, $66, $18, $00, $66, $38 ; 12
>1715	66 38
>1717	00 24 38 00	                .byte $00, $24, $38, $00, $3c, $10 ; 18
>171b	3c 10
>171d	00 18 10 00	                .byte $00, $18, $10, $00, $18, $10 ; 24
>1721	18 10
>1723	0f ff f0 08	                .byte $0f, $ff, $f0, $08, $7e, $00 ; 30
>1727	7e 00
>1729	08 7e 00 08	                .byte $08, $7e, $00, $08, $18, $00 ; 36
>172d	18 00
>172f	1c 18 00 1c	                .byte $1c, $18, $00, $1c, $18, $00 ; 42
>1733	18 00
>1735	18 3c 00 00	                .byte $18, $3c, $00, $00, $3c, $00 ; 48
>1739	3c 00
>173b	00 24 00 00	                .byte $00, $24, $00, $00, $24, $00 ; 54
>173f	24 00
>1741	00 24 00 03	                .byte $00, $24, $00, $03, $e7, $c0 ; 60
>1745	e7 c0
>1747	03 e7 c0 01	                .byte $03, $e7, $c0, $01, $0c, $28 ; 66, X,X,X color, xoffset, yoffset
>174b	0c 28
>174d	00 1c 00 00	sprt_femme      .byte $00, $1c, $00, $00, $3e, $00 ; 6
>1751	3e 00
>1753	00 3e 00 00	                .byte $00, $3e, $00, $00, $3e, $00 ; 12
>1757	3e 00
>1759	00 1c 00 00	                .byte $00, $1c, $00, $00, $08, $00 ; 18
>175d	08 00
>175f	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 24
>1763	ff 80
>1765	00 be 80 00	                .byte $00, $be, $80, $00, $9c, $80 ; 30
>1769	9c 80
>176b	00 88 80 00	                .byte $00, $88, $80, $00, $9c, $80 ; 36
>176f	9c 80
>1771	00 be 80 01	                .byte $00, $be, $80, $01, $be, $c0 ; 42
>1775	be c0
>1777	01 be c0 00	                .byte $01, $be, $c0, $00, $7f, $00 ; 48
>177b	7f 00
>177d	00 7f 00 00	                .byte $00, $7f, $00, $00, $ff, $80 ; 54
>1781	ff 80
>1783	00 36 00 00	                .byte $00, $36, $00, $00, $77, $00 ; 60
>1787	77 00
>1789	00 55 00 01	                .byte $00, $55 ,$00, $01, $0c, $2f ; 66, X,X,X color, xoffset, yoffset
>178d	0c 2f
>178f	fb 14		sprt_ptr0       .word  sprt_image + (0*66)
>1791	3d 15		sprt_ptr1       .word  sprt_image + (1*66)
>1793	7f 15		sprt_ptr2       .word  sprt_image + (2*66)
>1795	c1 15		sprt_ptr3       .word  sprt_image + (3*66)
>1797	03 16		sprt_ptr4       .word  sprt_image + (4*66)
>1799	45 16		sprt_ptr5       .word  sprt_image + (5*66)
>179b	87 16		sprt_ptr6       .word  sprt_image + (6*66)
>179d	c9 16		sprt_ptr7       .word  sprt_image + (7*66)
>179f	0b 17		sprt_ptr8       .word  sprt_image + (8*66)
>17a1	4d 17		sprt_ptr9       .word  sprt_image + (9*66)
>17a3	ff		testbyte        .byte 255
=$07			sprt_txtcol     =       vjaune
=$00			sprt_txtbak     =       bkcol0
=$01			sprt_color      =       vwhite
>17a4	07 00 04 0e	sprite_pos      .byte   sprt_txtcol,sprt_txtbak,4,14
>17a8	d3 50 52 49	                .text       "Sprite pos. (x,y):($0000,$0000)"
>17ac	54 45 20 50 4f 53 2e 20 28 58 2c 59 29 3a 28 24
>17bc	30 30 30 30 2c 24 30 30 30 30 29
>17c7	00		                .byte   0

;******  Return to file: J2tester.asm

.17c8			main
.17c8	20 90 0a	               jsr       scrmaninit
.17cb	20 fe 0e	               jsr       js_init
.17ce	a9 80		               lda       #$80
.17d0	8d 7c 0a	               sta       curcol
.17d3	a9 00		               lda       #0
.17d5	8d 21 d0	               sta       vicback0col
.17d8	a9 02		               lda       #vrouge
.17da	8d 7d 0a	               sta       brdcol
.17dd	8d 20 d0	               sta       vicbordcol
.17e0	20 20 0b	               jsr       cls
.17e3	a9 20		               lda       #$20
.17e5	09 00		               ora       #%00000000
.17e7	a0 04		               ldy       #$04
.17e9	a2 04		               ldx       #$04
.17eb	20 9e 08	               jsr       memfill
.17ee	a9 00		               lda       #$00
.17f0	a0 d8		               ldy       #$d8
.17f2	20 9e 08	               jsr       memfill
.17f5	20 7c 13	               jsr       sprt_init
.17f8	20 7d 0b	goagain        jsr       setinverse
.17fb	a2 ca		               ldx       #<bstring1
.17fd	a0 18		               ldy       #>bstring1
.17ff	20 20 0c	               jsr       putscxy
.1802	a2 f7		               ldx       #<bstring2
.1804	a0 18		               ldy       #>bstring2
.1806	20 20 0c	               jsr       putscxy
.1809	a2 24		               ldx       #<bstring3
.180b	a0 19		               ldy       #>bstring3
.180d	20 20 0c	               jsr       putscxy
.1810	a2 51		               ldx       #<bstring4
.1812	a0 19		               ldy       #>bstring4
.1814	20 20 0c	               jsr       putscxy
.1817	20 87 0b	               jsr       clrinverse
.181a	a2 68		               ldx       #<js_status1
.181c	a0 19		               ldy       #>js_status1
.181e	20 20 0c	               jsr       putscxy
.1821	a2 80		               ldx       #<js_status2
.1823	a0 19		               ldy       #>js_status2
.1825	20 20 0c	               jsr       putscxy
.1828	a2 97		               ldx       #<js_status3
.182a	a0 19		               ldy       #>js_status3
.182c	20 20 0c	               jsr       putscxy
.182f	a2 b0		               ldx       #<js_status4
.1831	a0 19		               ldy       #>js_status4
.1833	20 20 0c	               jsr       putscxy
.1836	a2 c9		               ldx       #<js_status5
.1838	a0 19		               ldy       #>js_status5
.183a	20 20 0c	               jsr       putscxy
.183d	a2 df		               ldx       #<js_status6
.183f	a0 19		               ldy       #>js_status6
.1841	20 20 0c	               jsr       putscxy
.1844	a2 00		               ldx       #$00
.1846	a0 0f		               ldy       #$0f
.1848	20 e3 0b	               jsr       gotoxy
.184b	a9 07		               lda       #vjaune
.184d	20 4f 0c	               jsr       setcurcol
.1850	a2 00		               ldx       #$00
.1852	20 64 0c	               jsr       setbkcol
.1855			looper
.1855	20 15 0f	               jsr       js_scan
.1858	20 27 11	               jsr       js_showvals
.185b	20 08 14	               jsr       sprt_move
.185e			loopit
.185e	a2 16		               ldx       #$16
.1860	a0 11		               ldy       #$11
.1862	20 e3 0b	               jsr       gotoxy
.1865	a9 03		               lda       #3
.1867	20 4f 0c	               jsr       setcurcol
.186a	ee c9 18	               inc       onebyte
.186d	ad c9 18	               lda       onebyte
.1870	ad ef 12	               lda       js_2fire
.1873	20 5d 0a	               jsr       putabinfmt
.1876	48		               pha
.1877	ad ef 12	               lda       js_2fire
.187a	f0 42		               beq       nochange
.187c	ad 20 d0	               lda       vicbordcol
.187f	18		               clc
.1880	69 00		               adc       #$0
.1882	29 0f		               and       #$0f
.1884	8d 20 d0	               sta       vicbordcol
.1887	ad ee 12	               lda       js_2y
.188a	c9 04		               cmp       #$04
.188c	d0 20		               bne       toborder
.188e	ad ed 12	               lda       js_2x
.1891	c9 0b		               cmp       #$0b
.1893	30 19		               bmi       toborder
.1895	c9 1d		               cmp       #$1d
.1897	10 15		               bpl       toborder
.1899	ee d1 13	               inc       sprt_ptr
.189c	ad d1 13	               lda       sprt_ptr
.189f	20 40 0d	               jsr       showregs
.18a2	c9 09		               cmp       #9
.18a4	90 02		               bcc       drawsptr
.18a6	a9 00		               lda       #$00
.18a8	8d d1 13	drawsptr       sta       sprt_ptr
.18ab	20 7c 13	               jsr       sprt_init
.18ae	ad 20 d0	toborder       lda       vicbordcol
.18b1	38		               sec
.18b2	69 00		               adc       #0
.18b4	29 0f		               and       #$0f
.18b6	8d 29 d0	               sta       $d029
.18b9	a9 00		               lda       #$00
.18bb	8d ef 12	               sta       js_2fire
.18be			nochange
.18be	e8		               inx
.18bf	68		               pla
.18c0	20 e1 ff	               jsr       kstop
.18c3	d0 90		               bne       looper
.18c5	20 66 fe	               jsr       k_warmboot
.18c8	60		out            rts
>18c9	00		onebyte        .byte     0
>18ca	0e 40 00 00	bstring1       .byte     vbleu1,bkcol1,0,0
>18ce	20 20 20 20	               .text     "      Visualisation du port jeu #2      "
>18d2	20 20 56 09 13 15 01 0c 09 13 01 14 09 0f 0e 20
>18e2	04 15 20 10 0f 12 14 20 0a 05 15 20 23 32 20 20
>18f2	20 20 20 20
>18f6	00		               .byte     0
>18f7	0b 80 00 01	bstring2       .byte     vgris,bkcol2,0,1
>18fb	20 50 12 0f	               .text     " Programme assembleur pour 6502 sur C64 "
>18ff	07 12 01 0d 0d 05 20 01 13 13 05 0d 02 0c 05 15
>190f	12 20 10 0f 15 12 20 36 35 30 32 20 13 15 12 20
>191f	43 36 34 20
>1923	00		               .byte     0
>1924	0a c0 00 02	bstring3       .byte     vrose,bkcol3,0,2
>1928	20 20 20 20	               .text     "      par Daniel Lafrance (2021) C      "
>192c	20 20 10 01 12 20 44 01 0e 09 05 0c 20 4c 01 06
>193c	12 01 0e 03 05 20 28 32 30 32 31 29 20 43 20 20
>194c	20 20 20 20
>1950	00		               .byte     0
>1951	07 c0 0b 04	bstring4       .byte     vjaune,bkcol3,11,4
>1955	20 43 08 01	               .text     " Changer pointeur "
>1959	0e 07 05 12 20 10 0f 09 0e 14 05 15 12 20
>1967	00		               .byte     0
>1968	0d 00 13 16	js_status1     .byte     vvert1,bkcol0,19,22
>196c	20 20 20 15	               .text     "   up <----1> haut "
>1970	10 20 3c 2d 2d 2d 2d 31 3e 20 08 01 15 14 20
>197f	00		               .byte     0
>1980	0e 00 13 15	js_status2     .byte     vbleu1,bkcol0,19,21
>1984	20 04 0f 17	               .text     " down <---2-> bas "
>1988	0e 20 3c 2d 2d 2d 32 2d 3e 20 02 01 13 20
>1996	00		               .byte     0
>1997	0a 00 13 14	js_status3     .byte     vrose,bkcol0,19,20
>199b	20 0c 05 06	               .text     " left <--4--> gauche"
>199f	14 20 3c 2d 2d 34 2d 2d 3e 20 07 01 15 03 08 05
>19af	00		               .byte     0
>19b0	07 00 13 13	js_status4     .byte     vjaune,bkcol0,19,19
>19b4	12 09 07 08	               .text     "right <-8---> droite"
>19b8	14 20 3c 2d 38 2d 2d 2d 3e 20 04 12 0f 09 14 05
>19c8	00		               .byte     0
>19c9	01 00 13 12	js_status5     .byte     vblanc,bkcol0,19,18
>19cd	20 46 09 12	               .text     " Fire <1----> Feu"
>19d1	05 20 3c 31 2d 2d 2d 2d 3e 20 46 05 15
>19de	00		               .byte     0
>19df	03 00 01 17	js_status6     .byte     vcyan,bkcol0,1,23
>19e3	2b 2d 3e 20	               .text     "+-> Etat de JS2:     %---FRLDU EOR #$1F"
>19e7	45 14 01 14 20 04 05 20 4a 53 32 3a 20 20 20 20
>19f7	20 25 2d 2d 2d 46 52 4c 44 55 20 45 4f 52 20 23
>1a07	24 31 46
>1a0a	00		               .byte     0

;******  End of listing

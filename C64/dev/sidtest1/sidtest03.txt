
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/ -i -L sidtest03.txt -o sidtest03.prg sidtest03.asm
; Wed Oct 22 17:44:17 2025

;Offset	;Hex		;Source

;******  Processing input file: sidtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	20 50 52 4f	               .text " programmation assembleur sur c64."
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2e
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	20 50 41 52	               .text " par daniel lafrance."
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2e
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 55 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"
.0854	60		              rts                  ; ... doit se rerminer par un RTS.

;******  Return to file: sidtest03.asm

=0			noir    =   0
=1			blanc   =   1
=2			rouge   =   2
=3			cyan    =   3
=4			mauve   =   4
=5			vert    =   5
=6			bleu    =   6
=7			jaune   =   7
=8			orange  =   8
=9			brun    =   9
=10			rose    =   10
=11			grisf   =   11
=12			gris    =   12
=13			vertp   =   13
=14			bleup   =   14
=15			grisp   =   15
=$d020			border  =   $d020
=$d021			back    =   $d021
=$0286			charcol =   $0286
=$0400			vidram  =   $0400
.0855			main
.0855	20 6b 0c	            jsr pushall
.0858	a9 03		            lda #cyan       ; Bleu ocean pour ...
.085a	8d 20 d0	            sta border      ; ... la bordure, ...
.085d	a9 01		            lda #blanc      ; ... blanc pour  ...
.085f	8d 21 d0	            sta back        ; ... le fond et  ...
.0862	a9 00		            lda #noir       ; ... noir pour   ...
.0864	8d 86 02	            sta charcol     ; ... les caractères.
.0867	a9 93		            lda #147        ; 147 = Effacement d'éctan.
.0869	20 d2 ff	            jsr $ffd2       ; On efface l'écran
.086c	20 d9 0c	               jsr  pushreg
.086f	a2 ec		               ldx  #<titre
.0871	a0 0f		               ldy  #>titre
.0873	20 75 0b	               jsr  puts
.0876	20 08 0d	               jsr  popreg
.0879	20 d9 0c	               jsr  pushreg
.087c	a2 13		               ldx  #<startcmd
.087e	a0 10		               ldy  #>startcmd
.0880	20 75 0b	               jsr  puts
.0883	20 08 0d	               jsr  popreg
.0886	20 37 09	            jsr sid_tada
.0889	20 a6 0c	maindone    jsr popall
.088c	60		            rts

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-timer.asm

.088d			delai
.088d	98		            tya
.088e	48		            pha
.088f	a0 ff		 delaix     ldy #$ff
.0891	ea		 delaiy     nop
.0892	ea		            nop
.0893	ea		            nop
.0894	ea		            nop
.0895	ea		            nop
.0896	ea		            nop
.0897	88		            dey
.0898	d0 f7		            bne delaiy
.089a	ca		            dex
.089b	d0 f2		            bne delaix
.089d	68		            pla
.089e	a8		            tay
.089f	60		            rts

;******  Return to file: sidtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-sid.asm

=0			sid_v1offset     =  0
=7			sid_v2offset     =  7
=14			sid_v3offset     =  14
>08a0	18 08		vic_son         .byte   sid_v1offset + 24,  8        ; sid+24=54296,  15 Volume.
>08a2	05 be		                .byte   sid_v1offset +  5,  190      ; sid+ 5=54277, 190 A.D.S = 0.
>08a4	06 f8		                .byte   sid_v1offset +  6,  248      ; sid+ 6=54278, 248 S=Max, r=15
>08a6	01 10		                .byte   sid_v1offset +  1,  $10      ;
>08a8	00 c4		                .byte   sid_v1offset +  0,  $c4      ;
>08aa	04 11		                .byte   sid_v1offset +  4,  %00010001; sid+ 4=54276,  17 V1S = Triangle.
>08ac	ff ff		                .byte   $ff,  $ff
>08ae	0b 08		vic_son2        .byte   sid_v2offset + 4,    8      ; sid+24=54296,  15   Volume.
>08b0	0c be		                .byte   sid_v2offset + 5,  190      ; sid+ 5=54277, 190   A.D.S = 0.
>08b2	0d f8		                .byte   sid_v2offset + 6,  248      ; sid+ 6=54278, 248   S=Max, r=15
>08b4	08 15		                .byte   sid_v2offset + 1,  $15      ; sid+ 1=54273,  20   Frequence = 40 * 256
>08b6	07 20		                .byte   sid_v2offset + 0,  $20      ; sid+ 1=54273,  20   Frequence = 40 * 256
>08b8	0b 21		                .byte   sid_v2offset + 4,  %00100001; sid+ 4=54276,  17   V1S = Triangle.
>08ba	ff ff		                .byte   $ff,  $ff
>08bc	12 08		vic_son3        .byte   sid_v3offset + 4,    8      ; sid+24=54296,  15   Volume.
>08be	13 be		                .byte   sid_v3offset + 5,  190      ; sid+ 5=54277, 190   A.D.S = 0.
>08c0	14 f8		                .byte   sid_v3offset + 6,  248      ; sid+ 6=54278, 248   S=Max, r=15
>08c2	0f 19		                .byte   sid_v3offset + 1,  $19      ; sid+ 1=54273,  20   Frequence = 40 * 256
>08c4	0e 1f		                .byte   sid_v3offset + 0,  $1f      ; sid+ 1=54273,  20   Frequence = 40 * 256
>08c6	10 ff		                .byte   sid_v3offset + 2,  %11111111; sid+ 4=54276,  17   V1S = Triangle.
>08c8	12 41		                .byte   sid_v3offset + 4,  %01000001; sid+ 4=54276,  17   V1S = Triangle.
>08ca	ff ff		                .byte   $ff,  $ff
.08cc			sid_progtest
.08cc	20 6b 0c	                jsr pushall
.08cf	a2 a0		                ldx #<vic_son
.08d1	a0 08		                ldy #>vic_son
.08d3	20 da 08	                jsr sid_progdata
.08d6	20 a6 0c	                jsr popall
.08d9	60		                rts
.08da			sid_progdata
.08da	86 fb		                stx $fb
.08dc	84 fc		                sty $fc
.08de	a9 00		                lda #$00
.08e0	aa		                tax
.08e1	a8		                tay
.08e2	b1 fb		sid_progcmd     lda ($fb),y        ; On programme le SID pour le son.
.08e4	aa		                tax
.08e5	c8		                iny
.08e6	b1 fb		                lda ($fb),y
.08e8	c8		                iny
.08e9	e0 ff		                cpx #$ff
.08eb	f0 06		                beq sid_progout
.08ed	9d 00 d4	                sta sid,x
.08f0	4c e2 08	                jmp sid_progcmd
.08f3			sid_progout
.08f3	60		                rts
.08f4			sid_clear
.08f4	08		                php
.08f5	48		                pha
.08f6	98		                tya
.08f7	48		                pha
.08f8	a9 00		                lda #$00
.08fa	a0 1d		                ldy #$1d
.08fc	88		sidclrreg       dey
.08fd	08		                php
.08fe	99 00 d4	                sta sid,y
.0901	28		                plp
.0902	d0 f8		                bne sidclrreg
.0904	68		                pla
.0905	a8		                tay
.0906	68		                pla
.0907	28		                plp
.0908	60		                rts
.0909			sid_v1off
.0909	08		                php
.090a	48		                pha
.090b	a9 10		                lda #%00010000
.090d	8d 04 d4	                sta vcreg1
.0910	68		                pla
.0911	28		                plp
.0912	60		                rts
.0913			sid_v2off
.0913	08		                php
.0914	48		                pha
.0915	a9 10		                lda #%00010000
.0917	8d 0b d4	                sta vcreg2
.091a	68		                pla
.091b	28		                plp
.091c	60		                rts
.091d			sid_v3off
.091d	08		                php
.091e	48		                pha
.091f	a9 10		                lda #%00010000
.0921	8d 12 d4	                sta vcreg3
.0924	68		                pla
.0925	28		                plp
.0926	60		                rts
.0927			sid_alloff
.0927	08		                php
.0928	48		                pha
.0929	a9 10		                lda #%00010000
.092b	8d 04 d4	                sta vcreg1
.092e	8d 0b d4	                sta vcreg2
.0931	8d 12 d4	                sta vcreg3
.0934	68		                pla
.0935	28		                plp
.0936	60		                rts
.0937			sid_tada
.0937	20 6b 0c	                jsr pushall
.093a	a2 a0		                ldx #<vic_son
.093c	a0 08		                ldy #>vic_son
.093e	20 da 08	                jsr sid_progdata
.0941	20 a6 0c	                jsr popall
.0944	20 f0 09	                jsr ti_dcroche
.0947	20 d9 0c	                jsr pushreg
.094a	a9 d1		                lda #<re4
.094c	8d 00 d4	                sta sid+0
.094f	a9 12		                lda #>re4
.0951	8d 01 d4	                sta sid+1
.0954	20 08 0d	                jsr popreg
.0957	20 f0 09	                jsr ti_dcroche
.095a	20 d9 0c	                jsr pushreg
.095d	a9 20		                lda #<mi4
.095f	8d 00 d4	                sta sid+0
.0962	a9 15		                lda #>mi4
.0964	8d 01 d4	                sta sid+1
.0967	20 08 0d	                jsr popreg
.096a	20 f0 09	                jsr ti_dcroche
.096d	20 d9 0c	                jsr pushreg
.0970	a9 61		                lda #<fa4
.0972	8d 00 d4	                sta sid+0
.0975	a9 16		                lda #>fa4
.0977	8d 01 d4	                sta sid+1
.097a	20 08 0d	                jsr popreg
.097d	20 f0 09	                jsr ti_dcroche
.0980	20 d9 0c	                jsr pushreg
.0983	a9 1f		                lda #<sol4
.0985	8d 00 d4	                sta sid+0
.0988	a9 19		                lda #>sol4
.098a	8d 01 d4	                sta sid+1
.098d	20 08 0d	                jsr popreg
.0990	20 f0 09	                jsr ti_dcroche
.0993	20 d9 0c	                jsr pushreg
.0996	a9 32		                lda #<la4
.0998	8d 00 d4	                sta sid+0
.099b	a9 1c		                lda #>la4
.099d	8d 01 d4	                sta sid+1
.09a0	20 08 0d	                jsr popreg
.09a3	20 f0 09	                jsr ti_dcroche
.09a6	20 d9 0c	                jsr pushreg
.09a9	a9 a6		                lda #<si4
.09ab	8d 00 d4	                sta sid+0
.09ae	a9 1f		                lda #>si4
.09b0	8d 01 d4	                sta sid+1
.09b3	20 08 0d	                jsr popreg
.09b6	20 f0 09	                jsr ti_dcroche
.09b9	20 d9 0c	                jsr pushreg
.09bc	a9 88		                lda #<do5
.09be	8d 00 d4	                sta sid+0
.09c1	a9 21		                lda #>do5
.09c3	8d 01 d4	                sta sid+1
.09c6	20 08 0d	                jsr popreg
.09c9	20 6b 0c	                jsr pushall
.09cc	a2 ae		                ldx #<vic_son2
.09ce	a0 08		                ldy #>vic_son2
.09d0	20 da 08	                jsr sid_progdata
.09d3	20 a6 0c	                jsr popall
.09d6	20 6b 0c	                jsr pushall
.09d9	a2 bc		                ldx #<vic_son3
.09db	a0 08		                ldy #>vic_son3
.09dd	20 da 08	                jsr sid_progdata
.09e0	20 a6 0c	                jsr popall
.09e3	20 0c 0a	                jsr ti_blanche
.09e6	20 27 09	                jsr sid_alloff
.09e9	60		                rts
>09ea	09 09 13 09	sid_lib_vector  .word   sid_v1off,sid_v2off,sid_v3off
>09ee	1d 09
.09f0			ti_dcroche
.09f0	08		            php
.09f1	48		            pha
.09f2	8a		            txa
.09f3	48		            pha
.09f4	a2 10		            ldx #$10
.09f6	20 8d 08	            jsr delai
.09f9	68		            pla
.09fa	aa		            tax
.09fb	68		            pla
.09fc	28		            plp
.09fd	60		            rts
.09fe			ti_croche
.09fe	20 f0 09	            jsr ti_dcroche
.0a01	20 f0 09	            jsr ti_dcroche
.0a04	60		            rts
.0a05			ti_noire
.0a05	20 fe 09	            jsr ti_croche
.0a08	20 fe 09	            jsr ti_croche
.0a0b	60		            rts
.0a0c			ti_blanche
.0a0c	20 05 0a	            jsr ti_noire
.0a0f	20 05 0a	            jsr ti_noire
.0a12	60		            rts
.0a13			ti_ronde
.0a13	20 0c 0a	            jsr ti_blanche
.0a16	20 0c 0a	            jsr ti_blanche
.0a19	60		            rts
>0a1a	20 f0 09	ti_vector   .byte   $20, <ti_dcroche,>ti_dcroche
>0a1d	20 fe 09	            .byte   $20, <ti_croche,>ti_croche
>0a20	20 05 0a	            .byte   $20, <ti_noire,>ti_noire
>0a23	20 0c 0a	            .byte   $20, <ti_blanche,>ti_blanche
>0a26	20 13 0a	            .byte   $20, <ti_ronde,>ti_ronde
.0a29	20 1a 0a	            jsr ti_vector

;******  Return to file: sidtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.0a2c			screendis
.0a2c	08		               php
.0a2d	48		               pha
.0a2e	ad 11 d0	               lda  $d011
.0a31	29 ef		               and  #%11101111
.0a33	8d 11 d0	               sta  $d011
.0a36	68		               pla
.0a37	28		               plp
.0a38	60		               rts
.0a39			screenena
.0a39	08		               php
.0a3a	48		               pha
.0a3b	ad 11 d0	               lda  $d011
.0a3e	09 10		               ora  #%00010000
.0a40	8d 11 d0	               sta  $d011
.0a43	68		               pla
.0a44	28		               plp
.0a45	60		               rts
=8192			bmpram = 8192
.0a46			victohighres
.0a46	08		               php
.0a47	48		               pha
.0a48	ad 11 d0	               lda  vicmiscfnc
.0a4b	09 20		               ora  #%00100000     ; 32
.0a4d	8d 11 d0	               sta  vicmiscfnc
.0a50	ad 18 d0	               lda  vicmemptr
.0a53	09 08		               ora  #%00001000     ; $08
.0a55	8d 18 d0	               sta  vicmemptr
.0a58	a9 ff		               lda  #$ff           ; 255
.0a5a	85 37		               sta  $0037
.0a5c	a9 1f		               lda  #$1f           ; 31
.0a5e	85 38		               sta  $0038
.0a60	68		               pla
.0a61	28		               plp
.0a62	60		               rts
.0a63			victonormal
.0a63	08		               php
.0a64	48		               pha
.0a65	ad 11 d0	               lda  vicmiscfnc
.0a68	29 df		               and  #%11011111     ; 233
.0a6a	8d 11 d0	               sta  vicmiscfnc
.0a6d	ad 18 d0	               lda  vicmemptr
.0a70	29 f7		               and  #%11110111     ; $08
.0a72	8d 18 d0	               sta  vicmemptr
.0a75	a9 00		               lda  #$00
.0a77	85 37		               sta  $0037
.0a79	a9 a0		               lda  #$a0
.0a7b	85 38		               sta  $0038
.0a7d	20 58 0b	               jsr  cls
.0a80	68		               pla
.0a81	28		               plp
.0a82	60		               rts
.0a83			vicbmpclear
.0a83	20 6b 0c	               jsr  push
.0a86	a9 04		               lda  #cmauve
.0a88	20 b1 0a	               jsr  setvicbmpbackcol
.0a8b	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.0a8d	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.0a8f	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.0a91	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.0a93	48		               pha
.0a94	a9 ff		               lda  #<$0000+(8191)
.0a96	8d ea 0f	               sta  loopcount
.0a99	a9 1f		               lda  #>$0000+(8191)
.0a9b	8d eb 0f	               sta  loopcount+1
.0a9e	68		               pla
.0a9f	a0 00		               ldy  #$00
.0aa1	a9 0f		next           lda  #$0f
.0aa3	91 fb		               sta  (zpage1),y
.0aa5	20 1b 0f	               jsr  inczpage1
.0aa8	20 ca 0f	               jsr  loop
.0aab	d0 f4		               bne  next
.0aad	20 a6 0c	               jsr  pop
.0ab0	60		               rts
.0ab1			setvicbmpbackcol
.0ab1	20 6b 0c	               jsr  push
.0ab4	29 0f		               and  #$0f
.0ab6	8d e4 0a	               sta  vicbmpbackcol
.0ab9	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.0abb	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.0abd	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.0abf	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.0ac1	48		               pha
.0ac2	a9 00		               lda  #<$0000+(1024)
.0ac4	8d ea 0f	               sta  loopcount
.0ac7	a9 04		               lda  #>$0000+(1024)
.0ac9	8d eb 0f	               sta  loopcount+1
.0acc	68		               pla
.0acd	a0 00		               ldy  #$00
.0acf	b1 fb		next           lda  (zpage1),y
.0ad1	29 f0		               and  #$f0
.0ad3	0d e4 0a	               ora  vicbmpbackcol
.0ad6	91 fb		               sta  (zpage1),y
.0ad8	20 1b 0f	               jsr  inczpage1
.0adb	20 ca 0f	               jsr  loop
.0ade	d0 ef		               bne  next
.0ae0	20 a6 0c	               jsr  pop
.0ae3	60		               rts
>0ae4	00		vicbmpbackcol  .byte     $00
.0ae5			setvicbmpforecol
.0ae5	20 6b 0c	               jsr  push
.0ae8	2a		               rol
.0ae9	2a		               rol
.0aea	2a		               rol
.0aeb	2a		               rol
.0aec	29 f0		               and  #$f0
.0aee	8d 1c 0b	               sta  vicbmpforecol
.0af1	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.0af3	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.0af5	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.0af7	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.0af9	48		               pha
.0afa	a9 00		               lda  #<$0000+(1024)
.0afc	8d ea 0f	               sta  loopcount
.0aff	a9 04		               lda  #>$0000+(1024)
.0b01	8d eb 0f	               sta  loopcount+1
.0b04	68		               pla
.0b05	a0 00		               ldy  #$00
.0b07	b1 fb		next           lda  (zpage1),y
.0b09	29 0f		               and  #$0f
.0b0b	0d 1c 0b	               ora  vicbmpforecol
.0b0e	91 fb		               sta  (zpage1),y
.0b10	20 1b 0f	               jsr  inczpage1
.0b13	20 ca 0f	               jsr  loop
.0b16	d0 ef		               bne  next
.0b18	20 a6 0c	               jsr  pop
.0b1b	60		               rts
>0b1c	00		vicbmpforecol  .byte     $00
.0b1d			bmphrcalccoords
.0b1d	20 6b 0c	               jsr  push
.0b20	18		               clc       ; On met Carry à 0
.0b21	6a		               ror       ; le bit 0 de a dans carry  ?/2
.0b22	8a		               txa       ; x dans a
.0b23	4a		               lsr       ; ?/4
.0b24	4a		               lsr       ; ?/8 a = (ax)/8
.0b25	8d 36 0b	               sta  bmphrcol
.0b28	98		               tya       ; Y dans a
.0b29	4a		               lsr       ; ?/2
.0b2a	4a		               lsr       ; ?/4
.0b2b	4a		               lsr       ; ?/8 a=Y/8
.0b2c	8d 35 0b	               sta  bmphrrow
.0b2f	48		               pha
.0b30	98		               tya
.0b31	20 a6 0c	               jsr  pop
.0b34	60		               rts
.0b35			vicbmpfill
>0b35	00		bmphrrow       .byte     $00
>0b36	00		bmphrcol       .byte     $00
>0b37	00		bmphrmask      .byte     $00

;******  Return to file: sidtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.0b38			scrmaninit
.0b38	20 d9 0c	               jsr  pushreg        ; Sauvegarde tous les registres
.0b3b	20 2c 0a	               jsr  screendis      ; Disable screen
.0b3e	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.0b40	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.0b43	a9 05		               lda  #vvert         ; vert pour la couleur
.0b45	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.0b48	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.0b4a	8d 86 02	               sta  bascol         ; texte.
.0b4d	20 58 0b	               jsr  cls            ; Efface l'écran.
.0b50	20 39 0a	               jsr  screenena      ; enable screen
.0b53	20 08 0d	               jsr  popreg         ; Récupère tous les registres.
.0b56	60		               rts
>0b57	8e		characterset   .byte b_uppercase
.0b58			cls
.0b58	08		               php                 ; Sauvegarde les registres
.0b59	48		               pha                 ;   modifiés.
.0b5a	a9 93		               lda  #$93           ; Affiche le code basic de
.0b5c	20 d2 ff	               jsr  chrout         ;   d'effacement d'écran.
.0b5f	68		               pla                 ; Récupère les registres
.0b60	28		               plp                 ;   modifiés.
.0b61	60		               rts
.0b62			putnch
.0b62	20 d9 0c	               jsr  pushreg        ; Sauvegarde tous les registres.
.0b65	20 d2 ff	again          jsr  chrout         ; On affiche A.
.0b68	ca		               dex                 ; Un de moins à faire.
.0b69	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.0b6b	20 08 0d	out            jsr  popreg         ; Récupère tous les registres.
.0b6e	60		               rts
.0b6f			putch
.0b6f	08		               php                 ; Sauvegarde le registre de status.
.0b70	20 d2 ff	               jsr  chrout         ; Affiche le caractère de Acc.
.0b73	28		               plp                 ; Récupère le registre de status.
.0b74	60		               rts
.0b75			puts
.0b75	20 6b 0c	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.0b78	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.0b7a	84 fc		               sty  zpage1+1       ;   dans ZP1.
.0b7c	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.0b7e	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.0b80	f0 09		               beq  exit           ; Si $00 on sort.
.0b82	20 d2 ff	               jsr  chrout         ; Affiche le caractères.
.0b85	20 1b 0f	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.0b88	4c 7e 0b	               jmp  next           ; Saute chercher le prochain carac.
.0b8b	20 a6 0c	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.0b8e	60		               rts
.0b8f			gotoxy
.0b8f	08		               php                 ; Sauvegarde le registre de
.0b90	48		               pha                 ;   status et le registre a.
.0b91	18		               clc                 ; Carry = 1 pour que kplot
.0b92	8a		               txa                 ;   positionne le curseur.
.0b93	48		               pha                 ; On inverse X et Y pcq kplot
.0b94	98		               tya                 ;
.0b95	aa		               tax                 ;   prend X comme la ligne
.0b96	68		               pla                 ;
.0b97	a8		               tay                 ;   et Y comme la colonne.
.0b98	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.0b9b	68		               pla                 ; Récupère le registre a et
.0b9c	28		               plp                 ;   le registre de status.
.0b9d	60		               rts
.0b9e			cursor
=$0286			bascol    =    $0286               ; debugme
.0b9e	20 d9 0c	               jsr  pushreg        ; Sauvegarde tous les registres.
.0ba1	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.0ba3	20 f0 ff	               jsr  kplot          ; On récupère la position du
.0ba6	8c c8 0b	               sty  cx             ;   curseur et on la sauvegarde
.0ba9	8e c9 0b	               stx  cy             ;   dans les vars locales.
.0bac	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.0baf	8d ca 0b	               sta  bcol           ; BASIC du texte.
.0bb2	4c c4 0b	               jmp  out            ; c'est fini on sort.
.0bb5	ae c9 0b	restore        ldx  cy             ; Comme C=1, On charge x avec
.0bb8	ac c8 0b	               ldy  cx             ;   la ligne, y ace  la col.
.0bbb	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.0bbe	ad ca 0b	               lda  bcol           ; On replace la couleur par basic
.0bc1	8d 86 02	               sta  bascol         ;   sauvegardé.
.0bc4	20 08 0d	out            jsr  popreg         ; Récupère tous les registres.
.0bc7	60		               rts
>0bc8	00		cx   .byte     $00
>0bc9	00		cy   .byte     $00
>0bca	00		bcol .byte     $00
.0bcb			cursave
.0bcb	08		               php
.0bcc	38		               sec
.0bcd	20 9e 0b	               jsr  cursor         ; Voir cette fonction plus haut.
.0bd0	28		               plp
.0bd1	60		               rts
.0bd2			curput
.0bd2	08		               php
.0bd3	18		               clc
.0bd4	20 9e 0b	               jsr  cursor         ; Voir cette fonction plus haut.
.0bd7	28		               plp
.0bd8	60		               rts
.0bd9			putsxy
.0bd9	20 6b 0c	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.0bdc	86 fb		               stx  zpage1         ; On place la position de la
.0bde	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.0be0	a0 00		               ldy  #$00           ; On charge l'index à 0.
.0be2	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.0be4	aa		               tax                 ;   dans X.
.0be5	20 1b 0f	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.0be8	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.0bea	a8		               tay                 ; dans Y.
.0beb	20 8f 0b	               jsr  gotoxy         ; on positionne le curseur.
.0bee	20 1b 0f	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.0bf1	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.0bf3	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.0bf5	20 75 0b	               jsr  puts           ;   l'affiche.
.0bf8	20 a6 0c	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.0bfb	60		               rts
>0bfc	00 00		straddr   .word     $00
>0bfe	00		px        .byte     $00
>0bff	00		py        .byte     $00
>0c00	00 00		zp1       .word     $00
.0c02			putscxy
.0c02	20 6b 0c	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.0c05	86 fb		               stx  zpage1         ; On place la position de la
.0c07	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.0c09	a0 00		               ldy  #$00           ; On charge l'index à 0.
.0c0b	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.0c0e	48		               pha                 ;   actuelle de basic.
.0c0f	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.0c11	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.0c14	20 1b 0f	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.0c17	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.0c19	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.0c1b	20 d9 0b	               jsr  putsxy         ;   l'affiche.
.0c1e	68		               pla                 ; On replace la couleur basic
.0c1f	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.0c22	20 a6 0c	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.0c25	60		               rts
.0c26			putrahex
.0c26	20 d9 0c	               jsr  pushreg        ; Sauvegarde tous les registres.
.0c29	20 97 0d	               jsr  atohex         ; Conversion de a chaîne hexa.
.0c2c	a2 34		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.0c2e	a0 0d		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.0c30	20 75 0b	               jsr  puts           ; Affiche la chaîne.
.0c33	20 08 0d	               jsr  popreg         ; Récupère tous les registres.
.0c36	60		               rts
.0c37			kputrahexxy
.0c37			bputrahexxy
.0c37			putrahexxy
.0c37	08		               php                 ; Sauvegarde le registre de
.0c38	48		               pha                 ;   status et le registre a.
.0c39	20 97 0d	               jsr  atohex         ; Convertion de a en hexadécimal.
.0c3c	a2 31		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.0c3e	a0 0d		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.0c40	20 d9 0b	               jsr  putsxy         ; Positionne et affiche la chaîne.
.0c43	68		               pla                 ; Récupère le registre a et
.0c44	28		               plp                 ;   le registre de status.
.0c45	60		               rts
.0c46			putrahexcxy
.0c46	20 d9 0c	               jsr  pushreg        ; Sauvegarde tous les registres.
.0c49	20 97 0d	               jsr  atohex         ; Convertion de a en hexadécimal.
.0c4c	a2 31		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.0c4e	a0 0d		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.0c50	20 d9 0b	               jsr  putsxy         ; Colore, positionne et affiche la
.0c53	20 08 0d	               jsr  popreg         ; Récupère tous les registres.
.0c56	60		               rts
.0c57			setinverse
.0c57	48		               pha
.0c58	a9 12		               lda  #$12
.0c5a	20 d2 ff	               jsr  chrout
.0c5d	68		               pla
.0c5e	60		               rts
.0c5f			clrinverse
.0c5f	48		               pha
.0c60	a9 92		               lda  #$92
.0c62	20 d2 ff	               jsr  chrout
.0c65	68		               pla
.0c66	60		               rts

;******  Return to file: sidtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>0c67	00		rp        .byte     0
>0c68	00		ra        .byte     0
>0c69	00 00		pc        .word     0
.0c6b			pushall
.0c6b			push
.0c6b	08		          php            ; stack : flg, pcl, pch
.0c6c	78		          sei
.0c6d	8d 68 0c	          sta  ra        ; save a
.0c70	68		          pla            ; stack : pcl, pch
.0c71	8d 67 0c	          sta  rp        ; save rp
.0c74	68		          pla            ; stack : pch
.0c75	8d 69 0c	          sta  pc        ; save pcl
.0c78	68		          pla            ; stack : -
.0c79	8d 6a 0c	          sta  pc+1      ; save pch
.0c7c	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0c7e	48		          pha            ; stack : zp1l
.0c7f	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0c81	48		          pha            ; stack : zp1h, zp1l
.0c82	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0c84	48		          pha            ; stack : zp2l, zp1h, zp1l
.0c85	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0c87	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0c88	ad 67 0c	          lda  rp        ; get rp
.0c8b	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0c8c	ad 68 0c	          lda  ra        ; get a
.0c8f	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0c90	8a		          txa            ; get x
.0c91	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c92	98		          tya            ; get y
.0c93	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c94	ad 6a 0c	          lda  pc+1      ; get pch
.0c97	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c98	ad 69 0c	          lda  pc        ; get pcl
.0c9b	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0c9c	ad 67 0c	          lda  rp        ; get rp
.0c9f	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ca0	ad 68 0c	          lda  ra        ; get a
.0ca3	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ca4	58		          cli
.0ca5	60		          rts
.0ca6			pullall
.0ca6			pull
.0ca6			popall
.0ca6			pop
.0ca6	78		          sei
.0ca7	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ca8	8d 69 0c	          sta  pc        ; save pcl
.0cab	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cac	8d 6a 0c	          sta  pc+1      ; save pch
.0caf	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cb0	a8		          tay            ; set y
.0cb1	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0cb2	aa		          tax            ; set x
.0cb3	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0cb4	8d 68 0c	          sta  ra        ; save a
.0cb7	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0cb8	8d 67 0c	          sta  rp        ; save rp
.0cbb	68		          pla            ; stack : zp2l, zp1h, zp1l
.0cbc	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0cbe	68		          pla            ; stack : zp1h, zp1l
.0cbf	85 fd		          sta  zpage2    ; get zpage2 High byte
.0cc1	68		          pla            ; stack : zp1l
.0cc2	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0cc4	68		          pla            ; stack :
.0cc5	85 fb		          sta  zpage1    ; get zpage1 High byte
.0cc7	ad 6a 0c	          lda  pc+1      ; get pch
.0cca	48		          pha            ; stack : pch
.0ccb	ad 69 0c	          lda  pc
.0cce	48		          pha            ; stack : pcl, pch
.0ccf	ad 67 0c	          lda  rp        ; get rp
.0cd2	48		          pha            ; stack : rp, pcl, pch
.0cd3	ad 68 0c	          lda  ra        ; set ra
.0cd6	58		          cli
.0cd7	28		          plp            ; stack : pcl, pch
.0cd8	60		          rts
.0cd9			pushreg
.0cd9	08		          php            ; stack : flg, pcl, pch
.0cda	78		          sei
.0cdb	8d 68 0c	          sta  ra        ; save a
.0cde	68		          pla            ; stack : pcl, pch
.0cdf	8d 67 0c	          sta  rp        ; save rp
.0ce2	68		          pla            ; stack : pch
.0ce3	8d 69 0c	          sta  pc        ; save pcl
.0ce6	68		          pla            ; stack : -
.0ce7	8d 6a 0c	          sta  pc+1      ; save pch
.0cea	ad 67 0c	          lda  rp        ; get rp
.0ced	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0cee	ad 68 0c	          lda  ra        ; get a
.0cf1	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0cf2	8a		          txa            ; get x
.0cf3	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cf4	98		          tya            ; get y
.0cf5	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cf6	ad 6a 0c	          lda  pc+1      ; get pch
.0cf9	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cfa	ad 69 0c	          lda  pc        ; get pcl
.0cfd	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cfe	ad 67 0c	          lda  rp        ; get rp
.0d01	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d02	ad 68 0c	          lda  ra        ; get a
.0d05	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d06	58		          cli
.0d07	60		          rts
.0d08			pullreg
.0d08			popreg
.0d08	78		          sei
.0d09	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d0a	8d 69 0c	          sta  pc        ; save pcl
.0d0d	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d0e	8d 6a 0c	          sta  pc+1      ; save pch
.0d11	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d12	a8		          tay            ; set y
.0d13	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0d14	aa		          tax            ; set x
.0d15	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0d16	8d 68 0c	          sta  ra        ; save a
.0d19	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0d1a	8d 67 0c	          sta  rp        ; save rp
.0d1d	ad 6a 0c	          lda  pc+1      ; get pch
.0d20	48		          pha            ; stack : pch
.0d21	ad 69 0c	          lda  pc
.0d24	48		          pha            ; stack : pcl, pch
.0d25	ad 67 0c	          lda  rp        ; get rp
.0d28	48		          pha            ; stack : rp, pcl, pch
.0d29	ad 68 0c	          lda  ra        ; set ra
.0d2c	58		          cli
.0d2d	28		          plp            ; stack : pcl, pch
.0d2e	60		          rts

;******  Return to file: sidtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0d2f	01		a2hexcol       .byte     1              ; pour aputscxy
>0d30	00		a2hexbkcol     .byte     %00000000
.0d31			a2hexpos
>0d31	00		a2hexpx        .byte     0              ; pour aputsxy
>0d32	00		a2hexpy        .byte     0
>0d33	24		a2hexprefix    .byte     "$"            ; pour aputs
>0d34	00 00		a2hexstr       .word     $00
>0d36	00 00		               .word     $00
>0d38	00		               .byte     0              ; 0 end string
>0d39	01		abincol        .byte     1
>0d3a	00		abinbkcol      .byte     %00000000
>0d3b	30 30 30 30	abin           .null     "00000000"
>0d3f	30 30 30 30 00
>0d44	20 20 20 00	adec           .null     "   "
.0d48			putahexfmtxy
.0d48	20 6b 0c	               jsr  push
.0d4b	20 97 0d	               jsr  atohex
.0d4e	ae 31 0d	               ldx  a2hexpx
.0d51	ac 32 0d	               ldy  a2hexpy
.0d54	20 8f 0b	               jsr  gotoxy
.0d57	a2 33		               ldx  #<a2hexprefix
.0d59	a0 0d		               ldy  #>a2hexprefix
.0d5b	20 75 0b	               jsr  puts
.0d5e	20 a6 0c	               jsr  pop
.0d61	60		               rts
.0d62			putahexfmt
.0d62	20 6b 0c	               jsr  push
.0d65	20 97 0d	               jsr  atohex
.0d68	a2 33		               ldx  #<a2hexprefix
.0d6a	a0 0d		               ldy  #>a2hexprefix
.0d6c	20 75 0b	               jsr  puts
.0d6f	20 a6 0c	               jsr  pop
.0d72	60		               rts
.0d73			putahex
.0d73	20 6b 0c	               jsr  push
.0d76	20 97 0d	               jsr  atohex
.0d79	a2 34		               ldx  #<a2hexstr
.0d7b	a0 0d		               ldy  #>a2hexstr
.0d7d	20 75 0b	               jsr  puts
.0d80	20 a6 0c	               jsr  pop
.0d83	60		               rts
.0d84			nibtohex
.0d84	08		               php
.0d85	29 0f		               and  #$0f
.0d87	f8		               sed
.0d88	18		               clc
.0d89	69 90		               adc  #$90
.0d8b	69 40		               adc  #$40
.0d8d	d8		               cld
.0d8e	28		               plp
.0d8f	60		               rts
.0d90			lsra4bits
.0d90	08		               php
.0d91	4a		               lsr
.0d92	4a		               lsr
.0d93	4a		               lsr
.0d94	4a		               lsr
.0d95	28		               plp
.0d96	60		               rts
.0d97			atohex
.0d97	08		               php
.0d98	48		               pha
.0d99	48		               pha
.0d9a	20 90 0d	               jsr  lsra4bits
.0d9d	20 84 0d	               jsr  nibtohex
.0da0	8d 34 0d	               sta  a2hexstr
.0da3	68		               pla
.0da4	20 84 0d	               jsr  nibtohex
.0da7	8d 35 0d	               sta  a2hexstr+1
.0daa	a9 00		               lda  #$00                ; set end of string
.0dac	8d 36 0d	               sta  a2hexstr+2
.0daf	68		               pla
.0db0	28		               plp
.0db1	60		               rts
.0db2			xy2hex
.0db2	20 6b 0c	               jsr  push
.0db5	20 97 0d	               jsr  atohex
.0db8	8a		               txa
.0db9	48		               pha
.0dba	20 90 0d	               jsr  lsra4bits
.0dbd	20 84 0d	               jsr  nibtohex
.0dc0	8d 34 0d	               sta  a2hexstr
.0dc3	68		               pla
.0dc4	20 84 0d	               jsr  nibtohex
.0dc7	8d 35 0d	               sta  a2hexstr+1
.0dca	98		               tya
.0dcb	48		               pha
.0dcc	20 90 0d	               jsr  lsra4bits
.0dcf	20 84 0d	               jsr  nibtohex
.0dd2	8d 36 0d	               sta  a2hexstr+2
.0dd5	68		               pla
.0dd6	20 84 0d	               jsr  nibtohex
.0dd9	8d 37 0d	               sta  a2hexstr+3
.0ddc	a9 00		               lda  #$00                ; 0 ended string
.0dde	8d 38 0d	               sta  a2hexstr+4
.0de1	20 a6 0c	               jsr  pop
.0de4			atobin
.0de4	20 6b 0c	               jsr  push
.0de7	a2 08		               ldx  #8
.0de9	a0 00		               ldy  #0
.0deb	18		               clc
.0dec	2a		nextbit        rol
.0ded	48		               pha
.0dee	69 00		               adc  #$00
.0df0	29 01		               and  #$01
.0df2	20 84 0d	               jsr  nibtohex
.0df5	99 3b 0d	               sta  abin,y
.0df8	68		               pla
.0df9	c8		               iny
.0dfa	ca		               dex
.0dfb	d0 ef		               bne  nextbit
.0dfd	a9 00		               lda  #0
.0dff	99 3b 0d	               sta  abin,y
.0e02	20 a6 0c	               jsr  pull
.0e05	60		               rts
.0e06			abinsetmccol
.0e06	20 d9 0c	               jsr  pushreg
.0e09	20 08 0d	               jsr  popreg
.0e0c	60		               rts
.0e0d			putabin
.0e0d	20 e4 0d	               jsr     atobin
.0e10	20 6b 0c	               jsr     push
.0e13	a2 3b		               ldx     #<abin
.0e15	a0 0d		               ldy     #>abin
.0e17	20 75 0b	               jsr     puts
.0e1a	20 a6 0c	               jsr     pop
.0e1d	60		               rts
.0e1e			printabin
.0e1e	20 6b 0c	               jsr     push
.0e21	a2 3b		               ldx     #<abin
.0e23	a0 0d		               ldy     #>abin
.0e25	20 75 0b	               jsr     puts
.0e28	20 a6 0c	               jsr     pop
.0e2b	60		               rts
.0e2c			putabinfmt
.0e2c	08		               php
.0e2d	48		               pha
.0e2e	a9 25		               lda     #"%"
.0e30	20 6f 0b	               jsr     putch
.0e33	68		               pla
.0e34	20 0d 0e	               jsr     putabin
.0e37	28		               plp
.0e38	60		               rts
.0e39			putabinxy
.0e39	20 8f 0b	               jsr     gotoxy
.0e3c	20 0d 0e	               jsr     putabin
.0e3f	60		               rts
.0e40			putabinfmtxy
.0e40	20 8f 0b	               jsr     gotoxy
.0e43	20 2c 0e	               jsr     putabinfmt
.0e46	60		               rts
.0e47			atodec
.0e47	20 6b 0c	               jsr  push
.0e4a	f8		               sed            ; On se place en mode décimal.
.0e4b	aa		               tax            ; On déplace a dans x.
.0e4c	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.0e4e	a9 00		               lda  #$00      ; 0 dans A.
.0e50	18		nextbit        clc            ; Bit carry a 0.
.0e51	69 01		               adc  #$01      ; Ajoute 1 a A.
.0e53	90 01		               bcc  decx      ; Pas de carry, pas de report.
.0e55	c8		               iny            ; On incrémente Y
.0e56	ca		decx           dex            ; X=X-1
.0e57	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.0e59	48		               pha            ; A sur le stack.
.0e5a	98		               tya            ; Y dans A (MSB)
.0e5b	20 84 0d	               jsr  nibtohex  ; a hex petsci ...
.0e5e	8d 44 0d	               sta  adec      ; ... dans tampon.
.0e61	68		               pla            ; Récupere A
.0e62	48		               pha            ;
.0e63	20 84 0d	               jsr  nibtohex
.0e66	8d 46 0d	               sta  adec+2
.0e69	68		               pla
.0e6a	6a		               ror
.0e6b	6a		               ror
.0e6c	6a		               ror
.0e6d	6a		               ror
.0e6e	20 84 0d	               jsr  nibtohex
.0e71	8d 45 0d	               sta  adec+1
.0e74	d8		               cld            ; On revient en mode binaire.
.0e75	20 a6 0c	               jsr  pull
.0e78	60		               rts
.0e79			putadec
.0e79	20 6b 0c	               jsr  push
.0e7c	20 47 0e	               jsr  atodec
.0e7f	a2 44		               ldx  #<adec
.0e81	a0 0d		               ldy  #>adec+1
.0e83	20 75 0b	               jsr  puts
.0e86	20 a6 0c	               jsr  pop
.0e89	60		               rts

;******  Return to file: sidtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0e8a			blkfill
.0e8a	20 6b 0c	bf0            jsr  push
.0e8d	20 55 0f	               jsr  savezp1
.0e90	84 fc		               sty  zpage1+1
.0e92	a0 00		               ldy  #$00
.0e94	84 fb		               sty  zpage1
.0e96	91 fb		bf1            sta  (zpage1),y
.0e98	c8		               iny
.0e99	d0 fb		               bne  bf1
.0e9b	20 64 0f	               jsr  restzp1
.0e9e	20 a6 0c	               jsr  pop
.0ea1	60		               rts
.0ea2			memfill
.0ea2	20 6b 0c	               jsr  push
.0ea5	20 8a 0e	mf1            jsr  blkfill
.0ea8	c8		               iny
.0ea9	ca		               dex
.0eaa	d0 f9		               bne  mf1
.0eac	20 a6 0c	               jsr  pop
.0eaf	60		               rts
.0eb0			memmove
.0eb0	20 6b 0c	               jsr  push
.0eb3	ba		               tsx            ; On se crée un pointeur ...
.0eb4	8a		               txa
.0eb5	18		               clc
.0eb6	69 0b		               adc  #11
.0eb8	a8		               tay
.0eb9	a2 06		               ldx  #$06
.0ebb	b9 00 01	nextbyte       lda  $0100,y
.0ebe	99 0a 0f	               sta  words,y
.0ec1	c8		               iny
.0ec2	ca		               dex
.0ec3	d0 f6		               bne  nextbyte
.0ec5	ad 0a 0f	               lda  s
.0ec8	8d e1 0e	               sta  source+1
.0ecb	ad 0b 0f	               lda  s+1
.0ece	8d e2 0e	               sta  source+2
.0ed1	ad 0c 0f	               lda  d
.0ed4	8d de 0e	               sta  destin+1
.0ed7	ad 0d 0f	               lda  d+1
.0eda	8d df 0e	               sta  destin+2
.0edd	ad ff ff	destin         lda  $ffff
.0ee0	8d ff ff	source         sta  $ffff
.0ee3	ee de 0e	               inc  destin+1
.0ee6	d0 03		               bne  src
.0ee8	ee df 0e	               inc  destin+2
.0eeb	ee e1 0e	src            inc  source+1
.0eee	d0 03		               bne  cnt
.0ef0	ee e2 0e	               inc  source+2
.0ef3	ad 0e 0f	cnt            lda  compte
.0ef6	d0 08		               bne  decit
.0ef8	ad 0f 0f	               lda  compte+1
.0efb	f0 09		               beq  fini
.0efd	ce 0f 0f	               dec  compte+1
.0f00	ce 0e 0f	decit          dec  compte
.0f03	4c dd 0e	               jmp  destin
.0f06	20 a6 0c	fini           jsr  pop
.0f09	60		               rts
.0f0a			words
>0f0a	00 00		s         .word     $0000
>0f0c	00 00		d         .word     $0000
>0f0e	00 00		compte    .word     $0000
.0f10			decword
.0f10	20 6b 0c	               jsr  push
.0f13	86 fd		               stx  zpage2
.0f15	84 fe		               sty  zpage2+1
.0f17	20 a6 0c	               jsr  pop
.0f1a	60		               rts
.0f1b			inczpage1
.0f1b			inczp1
.0f1b	08		               php
.0f1c	48		               pha
.0f1d	e6 fb		               inc  zpage1
.0f1f	a5 fb		               lda  zpage1
.0f21	d0 02		               bne  nopage
.0f23	e6 fc		               inc  zpage1+1
.0f25	68		nopage         pla
.0f26	28		               plp
.0f27	60		               rts
.0f28			deczpage1
.0f28			deczp1
.0f28	08		               php
.0f29	48		               pha
.0f2a	c6 fb		               dec  zpage1
.0f2c	a5 fb		               lda  zpage1
.0f2e	c9 ff		               cmp  #$ff
.0f30	f0 02		               beq  report
.0f32	d0 02		               bne  nopage
.0f34	c6 fc		report         dec  zpage1+1
.0f36	68		nopage         pla
.0f37	28		               plp
.0f38	60		               rts
.0f39			inczpage2
.0f39			inczp2
.0f39	08		               php
.0f3a	48		               pha
.0f3b	e6 fd		               inc  zpage2
.0f3d	a5 fd		               lda  zpage2
.0f3f	d0 02		               bne  nopage
.0f41	e6 fe		               inc  zpage2+1
.0f43	68		nopage         pla
.0f44	28		               plp
.0f45	60		               rts
.0f46			deczpage2
.0f46			deczp2
.0f46	08		               php
.0f47	c6 fd		               dec  zpage2
.0f49	a5 fd		               lda  zpage2
.0f4b	c9 ff		               cmp  #$ff
.0f4d	f0 02		               beq  report
.0f4f	d0 02		               bne  nopage
.0f51	c6 fe		report         dec  zpage2+1
.0f53	28		nopage         plp
.0f54	60		               rts
.0f55			savezp1
.0f55	08		               php
.0f56	48		               pha
.0f57	a5 fb		               lda  zpage1
.0f59	8d e6 0f	               sta  zp1
.0f5c	a5 fc		               lda  zpage1+1
.0f5e	8d e7 0f	               sta  zp1+1
.0f61	68		               pla
.0f62	28		               plp
.0f63	60		               rts
.0f64			restzp1
.0f64	08		               php
.0f65	48		               pha
.0f66	ad e6 0f	               lda  zp1
.0f69	85 fb		               sta  zpage1
.0f6b	ad e7 0f	               lda  zp1+1
.0f6e	85 fc		               sta  zpage1+1
.0f70	68		               pla
.0f71	28		               plp
.0f72	60		               rts
.0f73			savezp2
.0f73	08		               php
.0f74	48		               pha
.0f75	a5 fd		               lda  zpage2
.0f77	8d e8 0f	               sta  zp2
.0f7a	a5 fe		               lda  zpage2+1
.0f7c	8d e9 0f	               sta  zp2+1
.0f7f	68		               pla
.0f80	28		               plp
.0f81	60		               rts
.0f82			restzp2
.0f82	08		               php
.0f83	48		               pha
.0f84	ad e8 0f	               lda  zp2
.0f87	85 fd		               sta  zpage2
.0f89	ad e9 0f	               lda  zp2+1
.0f8c	85 fe		               sta  zpage2+1
.0f8e	68		               pla
.0f8f	28		               plp
.0f90	60		               rts
.0f91			xy2addr
.0f91	08		               php
.0f92	48		               pha
.0f93	8a		               txa
.0f94	48		               pha
.0f95	98		               tya
.0f96	48		               pha
.0f97	ad e1 0f	               lda  addr1+1
.0f9a	8d e3 0f	               sta  addr2+1
.0f9d	ad e0 0f	               lda  addr1
.0fa0	8d e2 0f	               sta  addr2
.0fa3	c0 00		               cpy  #$00
.0fa5	f0 0f		               beq  addx
.0fa7	18		moreline       clc
.0fa8	6d df 0f	               adc  ymult
.0fab	90 03		               bcc  norepy
.0fad	ee e3 0f	               inc  addr2+1
.0fb0	8d e2 0f	norepy         sta  addr2
.0fb3	88		               dey
.0fb4	d0 f1		               bne  moreline
.0fb6	8a		addx           txa
.0fb7	18		               clc
.0fb8	6d e2 0f	               adc  addr2
.0fbb	90 03		               bcc  thatsit
.0fbd	ee e3 0f	               inc  addr2+1
.0fc0	8d e2 0f	thatsit        sta  addr2
.0fc3	68		               pla
.0fc4	a8		               tay
.0fc5	68		               pla
.0fc6	aa		               tax
.0fc7	68		               pla
.0fc8	28		               plp
.0fc9	60		               rts
.0fca			loop
.0fca	ce ea 0f	               dec  loopcount
.0fcd	d0 03		               bne  norep
.0fcf	ce eb 0f	               dec  loopcount+1
.0fd2	ad ea 0f	norep          lda  loopcount
.0fd5	c9 00		               cmp  #$00
.0fd7	d0 05		               bne  out
.0fd9	4d eb 0f	               eor  loopcount+1
.0fdc	c9 ff		               cmp  #$ff
.0fde	60		out            rts
>0fdf	28		ymult          .byte     40
>0fe0	00 00		addr1          .word     $0000
>0fe2	00 00		addr2          .word     $0000
>0fe4	00 00		bytecnt        .word     $0000
>0fe6	00 00		zp1            .word     $0000
>0fe8	00 00		zp2            .word     $0000
>0fea	00 00		loopcount      .word     $0000

;******  Return to file: sidtest03.asm


;******  Processing file: chaines_fr.asm

>0fec	20 20 5b 20	titre       .null   "  [  sid tester par daniel lafrance  ]"
>0ff0	20 53 49 44 20 54 45 53 54 45 52 20 50 41 52 20
>1000	44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45 20
>1010	20 5d 00
>1013	0d 0d		startcmd    .byte   $0d,$0d
>1015	2f 22 53 49	            .text   '/"sidtest03"'
>1019	44 54 45 53 54 30 33 22
>1021	91 91 91 00	            .byte   145,145,145,$00

;******  Return to file: sidtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black         =   144  ;0,  ctrl-1
=5			b_white         =   5    ;1,  ctrl-2
=28			b_red           =   28   ;2,  ctrl-3
=159			b_cyan          =   159  ;3,  ctrl-4
=156			b_purple        =   156  ;4,  ctrl-5
=30			b_green         =   30   ;5,  ctrl-6
=31			b_blue          =   31   ;6,  ctrl-7
=158			b_yellow        =   158  ;7,  ctrl-8
=129			b_orange        =   129  ;8,  C=-1
=149			b_brown         =   149  ;9,  C=-2
=150			b_ltred         =   150  ;10, C=-3
=155			b_gray3         =   155  ;11, C=-4
=155			b_grey3         =   155  ;11, C=-4
=152			b_gray2         =   152  ;12, C=-5
=152			b_grey2         =   152  ;13, C=-5
=153			b_ltgreen       =   153  ;13, C=-6
=154			b_ltblue        =   154  ;14, C=-7
=151			b_gray1         =   151  ;15, C=-8
=151			b_grey1         =   151  ;15, C=-8
=144			b_noir          =   144  ;0,  ctrl-1
=5			b_blanc         =   5    ;1,  ctrl-2
=28			b_rouge         =   28   ;2,  ctrl-3
=156			b_mauve         =   156  ;4,  ctrl-5
=30			b_vert          =   30   ;5,  ctrl-6
=31			b_bleu          =   31   ;6,  ctrl-7
=158			b_jaune         =   158  ;7,  ctrl-8
=149			b_brun          =   149  ;9,  C=-2
=150			b_rose          =   150  ;10, C=-3
=155			b_gris3         =   155  ;11, C=-4
=152			b_gris2         =   152  ;12, C=-5
=153			b_vert2         =   153  ;13, C=-6
=154			b_blue2         =   154  ;14, C=-7
=151			b_gris1         =   151  ;15, C=-8
=151			b_gris          =   151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: sidtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>1025	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>1029	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: sidtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-sid-2.asm

=$d400			sidbase =   $d400
=$d400			frelo1  =   $d400 ; 54272 - Voice 1 frequency control (low byte).
=$d401			frehi1  =   $d401 ; 54273 - Voice 1 frequency control (high byte).
=$d402			pwlo1   =   $d402 ; 54274 - Voice 1 pulse waveform width (low byte).
=$d403			pwhi1   =   $d403 ; 54275 - Voice 1 pulse waveform width (high byte).
=$d404			vcreg1  =   $d404 ; 54276 - Voice 1 control register.
=$d405			atdcy1  =   $d405 ; 54277 - Voive 1 attack/decay register.
=$d406			surel1  =   $d406 ; 54278 - Voice 1 Sustain/Release control register.
=$d407			frelo2  =   $d407 ; 54279 - Voice 2 frequency control (low byte).
=$d408			frehi2  =   $d408 ; 54280 - Voice 2 frequency control (high byte).
=$d409			pwlo2   =   $d409 ; 54281 - Voice 2 pulse waveform width (low byte).
=$d40a			pwhi2   =   $d40a ; 54282 - Voice 2 pulse waveform width (high byte).
=$d40b			vcreg2  =   $d40b ; 54283 - Voice 2 control register.
=$d40c			atdcy2  =   $d40c ; 54284 - Voive 2 attack/decay register.
=$d40d			surel2  =   $d40d ; 54285 - Voice 2 Sustain/Release control register.
=$d40e			frelo3  =   $d40e ; 54286 - Voice 2 frequency control (low byte).
=$d40f			frehi3  =   $d40f ; 54287 - Voice 2 frequency control (high byte).
=$d410			pwlo3   =   $d410 ; 54288 - Voice 2 pulse waveform width (low byte).
=$d411			pwhi3   =   $d411 ; 54289 - Voice 2 pulse waveform width (high byte).
=$d412			vcreg3  =   $d412 ; 54290 - Voice 2 control register.
=$d413			atdcy3  =   $d413 ; 54291 - Voive 2 attack/decay register.
=$d414			surel3  =   $d414 ; 54292 - Voice 2 Sustain/Release control register.
=$d415			cutlo   =   $d415 ; 54293 - Bits 0-2 = low portion of filter cutoff frequency.
=$d416			cuthi   =   $d416 ; 54294 - Filter cutoff frequency (high byte).
=$d417			reson   =   $d417 ; 54295 - Filter resonnance control register.
=$d418			sigvol  =   $d418 ; 54296 - Volume and Filter selectv register
=$d419			potx    =   $d419 ; 54297 - Read game paddle 1 (or 3) X position.
=$d41a			poty    =   $d41a ; 54298 - Read game paddle 1 (or 3) Y position.
=$d41b			random  =   $d41b ; 54299 - Read oscillator/Random number generator.
=$d41c			env3    =   $d41c ; 54300 - Envelope Generator 3 output.

;******  Return to file: sidtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-sid-notes-ntsc.asm

=$0000			silence     = $0000 ; Silence (no frequency)
=$010c			do0   = $010C ;   16,35Hz NTSC (hex): hi: $01, lo: $0C ; (dec): lo: 12, Hi:  1
=$011c			dod0  = $011C ;   17,33Hz NTSC (hex): hi: $01, lo: $1C ; (dec): lo: 28, Hi:  1
=$012d			re0   = $012D ;   18,35Hz NTSC (hex): hi: $01, lo: $2D ; (dec): lo: 45, Hi:  1
=$013f			red0  = $013F ;   19,45Hz NTSC (hex): hi: $01, lo: $3F ; (dec): lo: 63, Hi:  1
=$0152			mi0   = $0152 ;   20,60Hz NTSC (hex): hi: $01, lo: $52 ; (dec): lo: 82, Hi:  1
=$0166			fa0   = $0166 ;   21,83Hz NTSC (hex): hi: $01, lo: $66 ; (dec): lo:102, Hi:  1
=$017b			fad0  = $017B ;   23,13Hz NTSC (hex): hi: $01, lo: $7B ; (dec): lo:123, Hi:  1
=$0192			sol0  = $0192 ;   24,50Hz NTSC (hex): hi: $01, lo: $92 ; (dec): lo:146, Hi:  1
=$01aa			sold0 = $01AA ;   25,96Hz NTSC (hex): hi: $01, lo: $AA ; (dec): lo:170, Hi:  1
=$01c3			la0   = $01C3 ;   27,50Hz NTSC (hex): hi: $01, lo: $C3 ; (dec): lo:195, Hi:  1
=$01de			lad0  = $01DE ;   29,14Hz NTSC (hex): hi: $01, lo: $DE ; (dec): lo:222, Hi:  1
=$01fa			si0   = $01FA ;   30,87Hz NTSC (hex): hi: $01, lo: $FA ; (dec): lo:250, Hi:  1
=$0219			do1   = $0219 ;   32,71Hz NTSC (hex): hi: $02, lo: $19 ; (dec): lo: 25, Hi:  2
=$0238			dod1  = $0238 ;   34,65Hz NTSC (hex): hi: $02, lo: $38 ; (dec): lo: 56, Hi:  2
=$025a			re1   = $025A ;   36,71Hz NTSC (hex): hi: $02, lo: $5A ; (dec): lo: 90, Hi:  2
=$027e			red1  = $027E ;   38,89Hz NTSC (hex): hi: $02, lo: $7E ; (dec): lo:126, Hi:  2
=$02a4			mi1   = $02A4 ;   41,21Hz NTSC (hex): hi: $02, lo: $A4 ; (dec): lo:164, Hi:  2
=$02cc			fa1   = $02CC ;   43,66Hz NTSC (hex): hi: $02, lo: $CC ; (dec): lo:204, Hi:  2
=$02f7			fad1  = $02F7 ;   46,25Hz NTSC (hex): hi: $02, lo: $F7 ; (dec): lo:247, Hi:  2
=$0324			sol1  = $0324 ;   49,00Hz NTSC (hex): hi: $03, lo: $24 ; (dec): lo: 36, Hi:  3
=$0354			sold1 = $0354 ;   51,91Hz NTSC (hex): hi: $03, lo: $54 ; (dec): lo: 84, Hi:  3
=$0386			la1   = $0386 ;   55,00Hz NTSC (hex): hi: $03, lo: $86 ; (dec): lo:134, Hi:  3
=$03bc			lad1  = $03BC ;   58,28Hz NTSC (hex): hi: $03, lo: $BC ; (dec): lo:188, Hi:  3
=$03f5			si1   = $03F5 ;   61,74Hz NTSC (hex): hi: $03, lo: $F5 ; (dec): lo:245, Hi:  3
=$0431			do2   = $0431 ;   65,41Hz NTSC (hex): hi: $04, lo: $31 ; (dec): lo: 49, Hi:  4
=$0471			dod2  = $0471 ;   69,30Hz NTSC (hex): hi: $04, lo: $71 ; (dec): lo:113, Hi:  4
=$04b4			re2   = $04B4 ;   73,41Hz NTSC (hex): hi: $04, lo: $B4 ; (dec): lo:180, Hi:  4
=$04fc			red2  = $04FC ;   77,79Hz NTSC (hex): hi: $04, lo: $FC ; (dec): lo:252, Hi:  4
=$0548			mi2   = $0548 ;   82,41Hz NTSC (hex): hi: $05, lo: $48 ; (dec): lo: 72, Hi:  5
=$0598			fa2   = $0598 ;   87,31Hz NTSC (hex): hi: $05, lo: $98 ; (dec): lo:152, Hi:  5
=$05ed			fad2  = $05ED ;   92,50Hz NTSC (hex): hi: $05, lo: $ED ; (dec): lo:237, Hi:  5
=$0648			sol2  = $0648 ;   98,00Hz NTSC (hex): hi: $06, lo: $48 ; (dec): lo: 72, Hi:  6
=$06a7			sold2 = $06A7 ;  103,83Hz NTSC (hex): hi: $06, lo: $A7 ; (dec): lo:167, Hi:  6
=$070c			la2   = $070C ;  110,00Hz NTSC (hex): hi: $07, lo: $0C ; (dec): lo: 12, Hi:  7
=$0778			lad2  = $0778 ;  116,55Hz NTSC (hex): hi: $07, lo: $78 ; (dec): lo:120, Hi:  7
=$07ea			si2   = $07EA ;  123,48Hz NTSC (hex): hi: $07, lo: $EA ; (dec): lo:234, Hi:  7
=$0862			do3   = $0862 ;  130,83Hz NTSC (hex): hi: $08, lo: $62 ; (dec): lo: 98, Hi:  8
=$08e2			dod3  = $08E2 ;  138,60Hz NTSC (hex): hi: $08, lo: $E2 ; (dec): lo:226, Hi:  8
=$0969			re3   = $0969 ;  146,83Hz NTSC (hex): hi: $09, lo: $69 ; (dec): lo:105, Hi:  9
=$09f8			red3  = $09F8 ;  155,58Hz NTSC (hex): hi: $09, lo: $F8 ; (dec): lo:248, Hi:  9
=$0a90			mi3   = $0A90 ;  164,83Hz NTSC (hex): hi: $0A, lo: $90 ; (dec): lo:144, Hi: 10
=$0b31			fa3   = $0B31 ;  174,63Hz NTSC (hex): hi: $0B, lo: $31 ; (dec): lo: 49, Hi: 11
=$0bdb			fad3  = $0BDB ;  185,00Hz NTSC (hex): hi: $0B, lo: $DB ; (dec): lo:219, Hi: 11
=$0c8f			sol3  = $0C8F ;  196,00Hz NTSC (hex): hi: $0C, lo: $8F ; (dec): lo:143, Hi: 12
=$0d4e			sold3 = $0D4E ;  207,65Hz NTSC (hex): hi: $0D, lo: $4E ; (dec): lo: 78, Hi: 13
=$0e19			la3   = $0E19 ;  220,00Hz NTSC (hex): hi: $0E, lo: $19 ; (dec): lo: 25, Hi: 14
=$0ef0			lad3  = $0EF0 ;  233,10Hz NTSC (hex): hi: $0E, lo: $F0 ; (dec): lo:240, Hi: 14
=$0fd3			si3   = $0FD3 ;  246,95Hz NTSC (hex): hi: $0F, lo: $D3 ; (dec): lo:211, Hi: 15
=$10c4			do4   = $10C4 ;  261,65Hz NTSC (hex): hi: $10, lo: $C4 ; (dec): lo:196, Hi: 16
=$11c3			dod4  = $11C3 ;  277,20Hz NTSC (hex): hi: $11, lo: $C3 ; (dec): lo:195, Hi: 17
=$12d1			re4   = $12D1 ;  293,65Hz NTSC (hex): hi: $12, lo: $D1 ; (dec): lo:209, Hi: 18
=$13f0			red4  = $13F0 ;  311,15Hz NTSC (hex): hi: $13, lo: $F0 ; (dec): lo:240, Hi: 19
=$1520			mi4   = $1520 ;  329,65Hz NTSC (hex): hi: $15, lo: $20 ; (dec): lo: 32, Hi: 21
=$1661			fa4   = $1661 ;  349,25Hz NTSC (hex): hi: $16, lo: $61 ; (dec): lo: 97, Hi: 22
=$17b6			fad4  = $17B6 ;  370,00Hz NTSC (hex): hi: $17, lo: $B6 ; (dec): lo:182, Hi: 23
=$191f			sol4  = $191F ;  392,00Hz NTSC (hex): hi: $19, lo: $1F ; (dec): lo: 31, Hi: 25
=$1a9d			sold4 = $1A9D ;  415,30Hz NTSC (hex): hi: $1A, lo: $9D ; (dec): lo:157, Hi: 26
=$1c32			la4   = $1C32 ;  440,00Hz NTSC (hex): hi: $1C, lo: $32 ; (dec): lo: 50, Hi: 28
=$1de0			lad4  = $1DE0 ;  466,20Hz NTSC (hex): hi: $1D, lo: $E0 ; (dec): lo:224, Hi: 29
=$1fa6			si4   = $1FA6 ;  493,90Hz NTSC (hex): hi: $1F, lo: $A6 ; (dec): lo:166, Hi: 31
=$2188			do5   = $2188 ;  523,30Hz NTSC (hex): hi: $21, lo: $88 ; (dec): lo:136, Hi: 33
=$2387			dod5  = $2387 ;  554,40Hz NTSC (hex): hi: $23, lo: $87 ; (dec): lo:135, Hi: 35
=$25a2			re5   = $25A2 ;  587,30Hz NTSC (hex): hi: $25, lo: $A2 ; (dec): lo:162, Hi: 37
=$27e0			red5  = $27E0 ;  622,30Hz NTSC (hex): hi: $27, lo: $E0 ; (dec): lo:224, Hi: 39
=$2a3f			mi5   = $2A3F ;  659,30Hz NTSC (hex): hi: $2A, lo: $3F ; (dec): lo: 63, Hi: 42
=$2cc2			fa5   = $2CC2 ;  698,50Hz NTSC (hex): hi: $2C, lo: $C2 ; (dec): lo:194, Hi: 44
=$2f6b			fad5  = $2F6B ;  740,00Hz NTSC (hex): hi: $2F, lo: $6B ; (dec): lo:107, Hi: 47
=$323d			sol5  = $323D ;  784,00Hz NTSC (hex): hi: $32, lo: $3D ; (dec): lo: 61, Hi: 50
=$3539			sold5 = $3539 ;  830,60Hz NTSC (hex): hi: $35, lo: $39 ; (dec): lo: 57, Hi: 53
=$3864			la5   = $3864 ;  880,00Hz NTSC (hex): hi: $38, lo: $64 ; (dec): lo:100, Hi: 56
=$3bbf			lad5  = $3BBF ;  932,40Hz NTSC (hex): hi: $3B, lo: $BF ; (dec): lo:191, Hi: 59
=$3f4c			si5   = $3F4C ;  987,80Hz NTSC (hex): hi: $3F, lo: $4C ; (dec): lo: 76, Hi: 63
=$4311			do6   = $4311 ; 1046,60Hz NTSC (hex): hi: $43, lo: $11 ; (dec): lo: 17, Hi: 67
=$470d			dod6  = $470D ; 1108,80Hz NTSC (hex): hi: $47, lo: $0D ; (dec): lo: 13, Hi: 71
=$4b45			re6   = $4B45 ; 1174,60Hz NTSC (hex): hi: $4B, lo: $45 ; (dec): lo: 69, Hi: 75
=$4fc1			red6  = $4FC1 ; 1244,60Hz NTSC (hex): hi: $4F, lo: $C1 ; (dec): lo:193, Hi: 79
=$547f			mi6   = $547F ; 1318,60Hz NTSC (hex): hi: $54, lo: $7F ; (dec): lo:127, Hi: 84
=$5985			fa6   = $5985 ; 1397,00Hz NTSC (hex): hi: $59, lo: $85 ; (dec): lo:133, Hi: 89
=$5ed7			fad6  = $5ED7 ; 1480,00Hz NTSC (hex): hi: $5E, lo: $D7 ; (dec): lo:215, Hi: 94
=$647a			sol6  = $647A ; 1568,00Hz NTSC (hex): hi: $64, lo: $7A ; (dec): lo:122, Hi:100
=$6a73			sold6 = $6A73 ; 1661,20Hz NTSC (hex): hi: $6A, lo: $73 ; (dec): lo:115, Hi:106
=$70c8			la6   = $70C8 ; 1760,00Hz NTSC (hex): hi: $70, lo: $C8 ; (dec): lo:200, Hi:112
=$777f			lad6  = $777F ; 1864,80Hz NTSC (hex): hi: $77, lo: $7F ; (dec): lo:127, Hi:119
=$7e99			si6   = $7E99 ; 1975,60Hz NTSC (hex): hi: $7E, lo: $99 ; (dec): lo:153, Hi:126
=$8622			do7   = $8622 ; 2093,20Hz NTSC (hex): hi: $86, lo: $22 ; (dec): lo: 34, Hi:134
=$8e1a			dod7  = $8E1A ; 2217,60Hz NTSC (hex): hi: $8E, lo: $1A ; (dec): lo: 26, Hi:142
=$9689			re7   = $9689 ; 2349,20Hz NTSC (hex): hi: $96, lo: $89 ; (dec): lo:137, Hi:150
=$9f82			red7  = $9F82 ; 2489,20Hz NTSC (hex): hi: $9F, lo: $82 ; (dec): lo:130, Hi:159
=$a8fe			mi7   = $A8FE ; 2637,20Hz NTSC (hex): hi: $A8, lo: $FE ; (dec): lo:254, Hi:168
=$b30a			fa7   = $B30A ; 2794,00Hz NTSC (hex): hi: $B3, lo: $0A ; (dec): lo: 10, Hi:179
=$bdad			fad7  = $BDAD ; 2960,00Hz NTSC (hex): hi: $BD, lo: $AD ; (dec): lo:173, Hi:189
=$c8f4			sol7  = $C8F4 ; 3136,00Hz NTSC (hex): hi: $C8, lo: $F4 ; (dec): lo:244, Hi:200
=$d4e6			sold7 = $D4E6 ; 3322,40Hz NTSC (hex): hi: $D4, lo: $E6 ; (dec): lo:230, Hi:212
=$e18f			la7   = $E18F ; 3520,00Hz NTSC (hex): hi: $E1, lo: $8F ; (dec): lo:143, Hi:225
=$eefe			lad7  = $EEFE ; 3729,60Hz NTSC (hex): hi: $EE, lo: $FE ; (dec): lo:254, Hi:238
=$fd31			si7   = $FD31 ; 3951,20Hz NTSC (hex): hi: $FD, lo: $31 ; (dec): lo: 49, Hi:253

;******  Return to file: sidtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: sidtest03.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: sidtest03.asm


;******  End of listing

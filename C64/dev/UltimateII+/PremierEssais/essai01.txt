
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L essai01.txt -o essai01.prg essai01.asm
; Sun Apr  6 00:31:10 2025

;Offset	;Hex		;Source

;******  Processing input file: essai01.asm

="20250405-231555 a"	                Version = "20250405-231555 a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c fa 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macro-c64-ultimateii.asm


;******  Return to file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm

=$df1c			uiictrlreg	=	$df1c	;(Write)
=$df1c			uiistatreg	=	$df1c	;(Read)	default $00
=$df1d			uiicmddata	=	$df1d	;(Write)
=$df1d			uiiidenreg	=	$df1d	;(Read)	default $c9
=$df1e			uiirspdata	=	$df1e	;(Read only)
=$df1f			uiistadata	=	$df1f	;(Read only)
=$00			uiiidle		=	$00
=$01			uiicmdbusy	=	$01
=$02			uiidatalast	=	$02
=$03			uiidatamore	=	$03
=$01			uii_identify	=	$01	; $01 $01 -> Read Id String as "ULTIMATE-II DOS V1.0"
=$02			uii_file_open	=	$02	; Open file for ...
=$01			uii_fa_read	=	$01	; $01 $02 $01 <filename> -> ... reading.
=$02			uii_fa_write	=	$02	; $01 $02 $02 <filename> -> ... writing.
=$04			uii_fa_new	=	$04	; $01 $02 $04 <filename> -> ... creating/writing.
=$08			uii_fa_ovwri	=	$08	; $01 $02 $08 <filename> -> ... overwriting.
=$03			uii_file_close	=	$03	; $01 $03 -> close opened file.
=$04			uii_read_data	= 	$04  ; $01 $04 [len_lo] [len_hi]
=$05			uii_writ_data	=	$05	; $01 $05 [dummy] [dummy] [data...]
=$06			uii_file_seek	=	$06	; $01 $06 [posl] [posml] [posmh] [posh].
=$07			uii_file_info 	=	$07	; $01 $07 -> returns current open file info.
=$08			uii_file_stat  = 	$08	; $01 $08 <filename> -> returns file info.
=$09			uii_file_del	=	$09	; $01 $09 <filename> -> delete/scratch file.
=$0a			uii_file_ren	=	$0a	; $01 $0a <filename> $00 <newname>
=$0b			uii_file_copy	=	$0b	; $01 $0b <source> $00 <destination>
=$11			uii_dir_change = 	$11	; $01 $11 <directory name>
=$12			uii_dir_pwd	=	$12	; $01 $12
=$13			uii_dir_open	=	$13	; $01 $13
=$14			uii_dir_read	=	$14  ; $01 $14
=$15			uii_dir_cp_ui	=	$15	; $01 $15 -> makes UI current path as API current path.
=$16			uii_dir_mkdir	=	$16	; $01 $16 <dirname> -> Create directory under current.
=$17			uii_dir_home	=	$17	; $01 $17 -> makes UI home path as API current path.
=$21			uii_reu_load	=	$21
=$22			uii_reu_save	=	$22
=$23			uii_dsk_mount	=	$23	; $01 $23 <id> <filename>
=$24			uii_dsk_umount = 	$24	; $01 $24 <id>
=$25			uii_dsk_swap 	= 	$25	; $01 $25 <id>
=$26			uii_time_get	=	$26	; $01 $26 [id] -> returns current RTC time/date.
=$27			uii_time_set	=	$27	; $01 $27 <Y> <M> <D> <H> <M> <S>
=$f0			uii_dos_echo	= 	$f0	; $01 $f0
.0854			isuiibusy
.0854	48					pha	; Bit 0
.0855	18					clc
.0856	ad 1c df				lda	uiistatreg
.0859	29 01					and	#%00000001
.085b	c9 01					cmp	#%00000001
.085d	d0 01					bne  out
.085f	38					sec
.0860	68		out			pla
.0861	60					rts
.0862			isuiidataacc
.0862	48					pha ; Bit 1
.0863	18					clc
.0864	ad 1c df				lda	uiistatreg
.0867	29 04					and	#%00000100
.0869	c9 04					cmp	#%00000100
.086b	d0 01					bne	out
.086d	38					sec
.086e	68		out			pla
.086f	60					rts
.0870			isuiiabort
.0870	48					pha ; Bit 2
.0871	18					clc
.0872	ad 1c df				lda	uiistatreg
.0875	29 04					and	#%00000100
.0877	c9 04					cmp	#%00000100
.0879	d0 01					bne	out
.087b	38					sec
.087c	68		out			pla
.087d	60					rts
.087e			isuiierror
.087e	48					pha ; Bit 3
.087f	18					clc
.0880	ad 1c df				lda	uiistatreg
.0883	29 08					and	#%00001000
.0885	c9 08					cmp	#%00001000
.0887	d0 01					bne	out
.0889	38					sec
.088a	68		out			pla
.088b	60					rts
.088c			getuiistate
.088c	08					php	; Bits 5,4
.088d	ad 1c df				lda	uiistatreg
.0890	4a					lsr
.0891	4a					lsr
.0892	4a					lsr
.0893	4a					lsr
.0894	29 03					and	#%00000011
.0896	28					plp
.0897	60					rts
.0898			isuiidataavail
.0898	48					pha			;tourlou
.0899	18					clc
.089a	ad 1f df				lda	uiistadata
.089d	29 80					and	#%10000000
.089f	c9 80					cmp	#%10000000
.08a1	d0 01					bne	out
.08a3	38					sec
.08a4	68		out			pla
.08a5	60					rts
.08a6			waituiiidle
.08a6	08					php
.08a7	48					pha
.08a8	20 8c 08	notyet		jsr	getuiistate
.08ab	c9 00					cmp  #$00
.08ad	d0 f9					bne	notyet
.08af	68					pla
.08b0	28					plp
.08b1	60					rts
.08b2			isuiimoredata
.08b2	08					php
.08b3	48					pha
.08b4	20 8c 08	notyet		jsr	getuiistate
.08b7	c9 00					cmp  #$00
.08b9	d0 f9					bne	notyet
.08bb	68					pla
.08bc	28					plp
.08bd	60					rts
.08be			waituiinotbusy
.08be	08					php
.08bf	20 54 08	wait			jsr	isuiibusy
.08c2	b0 fb					bcs	wait
.08c4	28					plp
.08c5	60					rts
.08c6			uiiputcmdbyte
.08c6	20 be 08				jsr 	waituiinotbusy
.08c9	8d 1d df				sta	uiicmddata
.08cc	60					rts
.08cd			uiisndcmd
.08cd	20 82 0e				jsr	push
.08d0	86 fb					stx	zpage1
.08d2	84 fc					sty	zpage1+1
.08d4	a0 00					ldy	#$00
.08d6	b1 fb		next			lda	(zpage1),y
.08d8	f0 07					beq	finish
.08da	20 c6 08				jsr	uiiputcmdbyte
.08dd	c8					iny
.08de	4c d6 08				jmp	next
.08e1	a9 01		finish		lda	#$01
.08e3	8d 1c df				sta	uiictrlreg
.08e6	20 c1 0e				jsr	pop
.08e9	60					rts
.08ea			uiireaddata
.08ea	08					php
.08eb	20 98 08				jsr	isuiidataavail
.08ee	b0 06					bcs	nodata
.08f0	ad 1e df				lda	uiirspdata
.08f3	4c f8 08				jmp	outdata
.08f6	a9 00		nodata		lda	#$00
.08f8	28		outdata		plp
.08f9	60					rts
.08fa			uiigettime

;******  Return to file: essai01.asm

.08fa			main
.08fa	20 54 0d	               jsr scrmaninit
.08fd	08		               php
.08fe	48		               pha
.08ff	a9 0e		               lda  #14
.0901	8d 73 0d	               sta  characterset
.0904	20 d2 ff	               jsr  $ffd2
.0907	68		               pla
.0908	28		               plp
.0909	08		               php
.090a	48		               pha
.090b	a9 08		               lda  #$08
.090d	20 d2 ff	               jsr  $ffd2
.0910	68		               pla
.0911	28		               plp
.0912	20 c0 09	               jsr essai01
.0915	08		               php
.0916	48		               pha
.0917	a9 09		               lda  #$09
.0919	20 d2 ff	               jsr  $ffd2
.091c	68		               pla
.091d	28		               plp
.091e	08		               php
.091f	48		               pha
.0920	a9 8e		               lda  #b_uppercase
.0922	8d 73 0d	               sta  characterset
.0925	20 d2 ff	               jsr  $ffd2
.0928	68		               pla
.0929	28		               plp
.092a	20 74 0d	               jsr  cls
.092d	20 82 0e	               jsr  push
.0930	48		               pha
.0931	a9 0c		               lda  #cgrismoyen
.0933	8d 20 d0	               sta  $d020
.0936	68		               pla
.0937	48		               pha
.0938	a9 0b		               lda  #cgrisfonce
.093a	8d 21 d0	               sta  $d021
.093d	68		               pla
.093e	48		               pha
.093f	a9 0f		               lda  #cgrispale
.0941	8d 86 02	               sta  bascol
.0944	68		               pla
.0945	20 c1 0e	               jsr  pull
.0948			aide
.0948	08		               php
.0949	48		               pha
.094a	a9 0e		               lda  #14
.094c	8d 73 0d	               sta  characterset
.094f	20 d2 ff	               jsr  $ffd2
.0952	68		               pla
.0953	28		               plp
.0954	20 74 0d	               jsr cls
.0957	20 82 0e	               jsr  push
.095a	a2 4c		               ldx  #<line
.095c	a0 0c		               ldy  #>line
.095e	20 91 0d	               jsr  puts
.0961	20 c1 0e	               jsr  pull
.0964	20 82 0e	               jsr  push
.0967	a2 b3		               ldx  #<headera
.0969	a0 0a		               ldy  #>headera
.096b	20 91 0d	               jsr  puts
.096e	20 c1 0e	               jsr  pull
.0971	20 82 0e	               jsr  push
.0974	a2 27		               ldx  #<headerb
.0976	a0 0b		               ldy  #>headerb
.0978	20 91 0d	               jsr  puts
.097b	20 c1 0e	               jsr  pull
.097e	20 82 0e	               jsr  push
.0981	a2 4c		               ldx  #<line
.0983	a0 0c		               ldy  #>line
.0985	20 91 0d	               jsr  puts
.0988	20 c1 0e	               jsr  pull
.098b	20 82 0e	               jsr  push
.098e	a2 4c		               ldx  #<line
.0990	a0 0c		               ldy  #>line
.0992	20 91 0d	               jsr  puts
.0995	20 c1 0e	               jsr  pull
.0998	20 82 0e	               jsr  push
.099b	a2 82		               ldx  #<shortcuts
.099d	a0 0b		               ldy  #>shortcuts
.099f	20 91 0d	               jsr  puts
.09a2	20 c1 0e	               jsr  pull
.09a5	20 82 0e	               jsr  push
.09a8	a2 fc		               ldx  #<aidetext
.09aa	a0 0b		               ldy  #>aidetext
.09ac	20 91 0d	               jsr  puts
.09af	20 c1 0e	               jsr  pull
.09b2	20 82 0e	               jsr  push
.09b5	a2 4c		               ldx  #<line
.09b7	a0 0c		               ldy  #>line
.09b9	20 91 0d	               jsr  puts
.09bc	20 c1 0e	               jsr  pull
.09bf	60		               rts
.09c0			essai01
.09c0	08		               php
.09c1	48		               pha
.09c2	20 74 0d	               jsr  cls
.09c5	20 0b 0a	               jsr  printstatic
.09c8	20 82 0e	               jsr  push
.09cb	a2 9d		               ldx  #<lbluiiidenreg
.09cd	a0 0c		               ldy  #>lbluiiidenreg
.09cf	20 1a 0e	               jsr  putscxy
.09d2	20 c1 0e	               jsr  pull
.09d5	ad 1d df	               lda  uiiidenreg
.09d8	20 6a 10	               jsr  putahexfmt
.09db			sendcommand
.09db	20 82 0e	               jsr  push
.09de	a2 49		               ldx  #<uiiidcmd
.09e0	a0 0d		               ldy  #>uiiidcmd
.09e2	20 cd 08	               jsr  uiisndcmd
.09e5	20 c1 0e	               jsr  pull
.09e8	20 82 0e	               jsr  push
.09eb	a2 45		               ldx  #<txtrespponse
.09ed	a0 0d		               ldy  #>txtrespponse
.09ef	20 1a 0e	               jsr  putscxy
.09f2	20 c1 0e	               jsr  pull
.09f5	20 ea 08	moredata       jsr  uiireaddata
.09f8	c9 00		               cmp  #$00
.09fa	f0 09		               beq  nodata
.09fc	20 8b 0d	               jsr  putch
.09ff	4c f5 09	               jmp  moredata
.0a02	20 1a 13	               jsr  showregs
.0a05	20 9a 12	nodata         jsr  anykey
.0a08	68		               pla
.0a09	28		               plp
.0a0a	60		               rts
.0a0b			printstatic
.0a0b	20 82 0e	               jsr  push
.0a0e	20 82 0e	               jsr  push
.0a11	a2 84		               ldx  #<lbluiititle
.0a13	a0 0c		               ldy  #>lbluiititle
.0a15	20 1a 0e	               jsr  putscxy
.0a18	20 c1 0e	               jsr  pull
.0a1b	20 82 0e	               jsr  push
.0a1e	a2 9d		               ldx  #<lbluiiidenreg
.0a20	a0 0c		               ldy  #>lbluiiidenreg
.0a22	20 1a 0e	               jsr  putscxy
.0a25	20 c1 0e	               jsr  pull
.0a28	20 82 0e	               jsr  push
.0a2b	a2 bd		               ldx  #<lbluiistatreg
.0a2d	a0 0c		               ldy  #>lbluiistatreg
.0a2f	20 1a 0e	               jsr  putscxy
.0a32	20 c1 0e	               jsr  pull
.0a35	20 82 0e	               jsr  push
.0a38	a2 21		               ldx  #<defuiistatreg
.0a3a	a0 0d		               ldy  #>defuiistatreg
.0a3c	20 1a 0e	               jsr  putscxy
.0a3f	20 c1 0e	               jsr  pull
.0a42	20 82 0e	               jsr  push
.0a45	a2 fd		               ldx  #<lbluiirspdata
.0a47	a0 0c		               ldy  #>lbluiirspdata
.0a49	20 1a 0e	               jsr  putscxy
.0a4c	20 c1 0e	               jsr  pull
.0a4f	20 82 0e	               jsr  push
.0a52	a2 dd		               ldx  #<lbluiistadata
.0a54	a0 0c		               ldy  #>lbluiistadata
.0a56	20 1a 0e	               jsr  putscxy
.0a59	20 c1 0e	               jsr  pull
.0a5c	20 82 0e	               jsr  push
.0a5f	a2 35		               ldx  #<defuiistadata
.0a61	a0 0d		               ldy  #>defuiistadata
.0a63	20 1a 0e	               jsr  putscxy
.0a66	20 c1 0e	               jsr  pull
.0a69	20 c1 0e	               jsr  pop
.0a6c	60		               rts
.0a6d			updatestatus
.0a6d	20 82 0e	               jsr  push
.0a70	a9 03		               lda  #$03
.0a72	8d 39 10	               sta  a2hexcol
.0a75	20 82 0e	               jsr  push
.0a78	a2 2d		               ldx  #<txtuiistatreg
.0a7a	a0 0d		               ldy  #>txtuiistatreg
.0a7c	20 1a 0e	               jsr  putscxy
.0a7f	20 c1 0e	               jsr  pull
.0a82	ad 1c df	               lda  uiistatreg
.0a85	20 2d 11	               jsr  putabinfmt
.0a88	20 82 0e	               jsr  push
.0a8b	a2 31		               ldx  #<txtuiirspdata
.0a8d	a0 0d		               ldy  #>txtuiirspdata
.0a8f	20 1a 0e	               jsr  putscxy
.0a92	20 c1 0e	               jsr  pull
.0a95	ad 1e df	               lda  uiirspdata
.0a98	20 2d 11	               jsr  putabinfmt
.0a9b	20 82 0e	               jsr  push
.0a9e	a2 41		               ldx  #<txtuiistadata
.0aa0	a0 0d		               ldy  #>txtuiistadata
.0aa2	20 1a 0e	               jsr  putscxy
.0aa5	20 c1 0e	               jsr  pull
.0aa8	ad 1f df	               lda  uiistadata
.0aab	20 2d 11	               jsr  putabinfmt
.0aae	20 c1 0e	               jsr  pop
.0ab1	60		               rts
>0ab2	00		byte           .byte 0

;******  Processing file: ./strings_fr.asm

.0ab3			headera
>0ab3	20 31 35 34	               .text          " 1541 Ultimate II + Gestion de fichiers"
>0ab7	31 20 d5 4c 54 49 4d 41 54 45 20 c9 c9 20 2b 20
>0ac7	c7 45 53 54 49 4f 4e 20 44 45 20 46 49 43 48 49
>0ad7	45 52 53
>0ada	0d		               .byte     $0d
>0adb	20 c3 41 52	               .text          " Cartouche et API par Gideon Zweijtzer."
>0adf	54 4f 55 43 48 45 20 45 54 20 c1 d0 c9 20 50 41
>0aef	52 20 c7 49 44 45 4f 4e 20 da 57 45 49 4a 54 5a
>0aff	45 52 2e
>0b02	0d		               .byte     $0d
>0b03	20 20 20 20	               .text          "     API Version 1.0, 1er Feb 2013"
>0b07	20 c1 d0 c9 20 d6 45 52 53 49 4f 4e 20 31 2e 30
>0b17	2c 20 31 45 52 20 c6 45 42 20 32 30 31 33
>0b25	0d 00		               .byte     $0d,0
>0b27	20 20 20 20	headerb        .text          "               essai01 "
>0b2b	20 20 20 20 20 20 20 20 20 20 20 45 53 53 41 49
>0b3b	30 31 20
>0b3e	0d		               .byte     $0d
>0b3f	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0b43	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>0b53	45 4c 20 cc 41 46 52 41 4e 43 45
>0b5e	0d		               .byte     $0d
>0b5f	20 20 20 20	               .text   format("       Version: %s",Version)
>0b63	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>0b73	30 34 30 35 2d 32 33 31 35 35 35 20 41
>0b80	0d 00		               .byte     $0d,0
>0b82	0d		shortcuts      .byte     $0d
>0b83	91 91		               .byte     ucurkey,ucurkey
>0b85	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>0b89	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>0b8d	1d
>0b8e	20 d2 20 c1	               .text          " R A C C O U R C I S "
>0b92	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>0ba2	20
>0ba3	0d		               .byte     $0d
>0ba4	20 45 53 53	               .text   format(" essai01..: SYS%05d ($%04X)",main, main)
>0ba8	41 49 30 31 2e 2e 3a 20 d3 d9 d3 30 32 32 39 38
>0bb8	20 28 24 30 38 c6 c1 29
>0bc0	0d		               .byte     $0d
>0bc1	20 41 49 44	               .text   format(" aide.....: SYS%05d ($%04X)",aide, aide)
>0bc5	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 33 37 36
>0bd5	20 28 24 30 39 34 38 29
>0bdd	0d		               .byte     $0d
>0bde	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0be2	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 33 34 34 34
>0bf2	20 28 24 30 c4 37 34 29
>0bfa	0d 00		               .byte     $0d,0
>0bfc	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d ($%04X)",essai01, essai01)
>0c00	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 34 39 36
>0c10	20 28 24 30 39 c3 30 29
>0c18	0d 0d		               .byte     $0d, $0d
>0c1a	20 20 20 20	               .text   format("    ex.: SYS%05d",essai01)
>0c1e	45 58 2e 3a 20 d3 d9 d3 30 32 34 39 36
>0c2b	0d		               .byte     $0d
>0c2c	20 20 20 20	               .text   format("    for i=0to100:SYS%05d:next",essai01)
>0c30	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0c40	30 32 34 39 36 3a 4e 45 58 54
>0c4a	0d 00		               .byte     $0d,0
>0c4c	20 c0 c0 c0	line           .byte     $20,192,192,192,192,192,192,192,192,192
>0c50	c0 c0 c0 c0 c0 c0
>0c56	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0c5a	c0 c0 c0 c0 c0 c0
>0c60	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0c64	c0 c0 c0 c0 c0 c0
>0c6a	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192
>0c6e	c0 c0 c0 c0 c0
>0c73	0d 00		               .byte     $0d,0
>0c75	50 52 45 53	uiiconnected   .null     "present"
>0c79	45 4e 54 00
>0c7d	41 42 53 45	uiiunconnected .null     "absent"
>0c81	4e 54 00

;******  Return to file: essai01.asm

=1			uiiy           =    1
=1			uiix           =    1
>0c84	01 0a 01 12	lbluiititle    .byte     1,uiix+9,uiiy,18
>0c88	20 31 35 34	               .text     " 1541 Ultimate II+ "
>0c8c	31 20 d5 4c 54 49 4d 41 54 45 20 c9 c9 2b 20
>0c9b	92 00		               .byte     146,0
>0c9d	01 01 03	lbluiiidenreg  .byte     1,uiix ,uiiy+2
>0ca0	c9 44 20 52	               .null     format("Id register ------ $%04X -> ", uiiidenreg)
>0ca4	45 47 49 53 54 45 52 20 2d 2d 2d 2d 2d 2d 20 24
>0cb4	c4 c6 31 c4 20 2d 3e 20 00
>0cbd	01 01 05	lbluiistatreg  .byte     1,uiix ,uiiy+4
>0cc0	c3 4d 44 20	               .null     format("Cmd status reg. -- $%04X -> ", uiistatreg)
>0cc4	53 54 41 54 55 53 20 52 45 47 2e 20 2d 2d 20 24
>0cd4	c4 c6 31 c3 20 2d 3e 20 00
>0cdd	01 01 07	lbluiistadata  .byte     1,uiix ,uiiy+6
>0ce0	d2 45 53 50	               .null     format("Response data reg. $%04X -> ", uiirspdata)
>0ce4	4f 4e 53 45 20 44 41 54 41 20 52 45 47 2e 20 24
>0cf4	c4 c6 31 c5 20 2d 3e 20 00
>0cfd	01 01 09	lbluiirspdata  .byte     1,uiix ,uiiy+8.
>0d00	c4 41 54 41	               .null     format("Data status reg. - $%04X -> ", uiistadata)
>0d04	20 53 54 41 54 55 53 20 52 45 47 2e 20 2d 20 24
>0d14	c4 c6 31 c6 20 2d 3e 20 00
>0d1d	03 1d 03 00	txtuiiidenreg  .byte     3,uiix+28,uiiy+2,0
>0d21	03 1e 04	defuiistatreg  .byte     3,uiix+29,uiiy+3
>0d24	c1 c1 d3 d3	               .null     "AASSEPCB"
>0d28	c5 d0 c3 c2 00
>0d2d	03 1d 05 00	txtuiistatreg  .byte     3,uiix+28,uiiy+4,0
>0d31	03 1d 07 00	txtuiirspdata  .byte     3,uiix+28,uiiy+6,0
>0d35	03 1e 08	defuiistadata  .byte     3,uiix+29,uiiy+7
>0d38	c1 c1 d3 d3	               .null     "AASSEPCB"
>0d3c	c5 d0 c3 c2 00
>0d41	03 1d 09 00	txtuiistadata  .byte     3,uiix+28,uiiy+8,0
>0d45	03 06 0d 00	txtrespponse   .byte     3,uiix+5,uiiy+12,0
>0d49	01 01 00	uiiidcmd       .byte     $01,$01,$00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0d4c	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0d50	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0d54			libtart

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0d54			scrmaninit
.0d54	20 82 0e	               jsr  push
.0d57	a9 06		               lda  #vbleu
.0d59	8d 21 d0	               sta  vicbackcol
.0d5c	a9 05		               lda  #vvert
.0d5e	8d 20 d0	               sta  vicbordcol
.0d61	a9 01		               lda  #vblanc
.0d63	8d 86 02	               sta  bascol
.0d66	ad 00 04	               lda  scrnram
.0d69	8d 00 04	               sta  scrnram
.0d6c	20 74 0d	               jsr  cls
.0d6f	20 c1 0e	               jsr  pop
.0d72	60		               rts
>0d73	8e		characterset   .byte b_uppercase
.0d74			cls
.0d74	08		               php
.0d75	48		               pha
.0d76	a9 93		               lda  #$93
.0d78	20 8b 0d	               jsr  putch
.0d7b	68		               pla
.0d7c	28		               plp
.0d7d	60		               rts
.0d7e			putnch
.0d7e	08		               php
.0d7f	e0 00		               cpx  #$00
.0d81	f0 06		               beq  out
.0d83	20 d2 ff	again          jsr  $ffd2
.0d86	ca		               dex
.0d87	d0 fa		               bne  again
.0d89	28		out            plp
.0d8a	60		               rts
.0d8b			putch
.0d8b	08		               php
.0d8c	20 d2 ff	               jsr  $ffd2
.0d8f	28		               plp
.0d90	60		               rts
.0d91			puts
.0d91	20 82 0e	               jsr  push
.0d94	86 fb		               stx  zpage1
.0d96	84 fc		               sty  zpage1+1
.0d98	a0 00		               ldy  #0
.0d9a	b1 fb		next           lda  (zpage1),y
.0d9c	f0 09		               beq  exit
.0d9e	20 8b 0d	               jsr  putch
.0da1	20 89 0f	               jsr  inczp1
.0da4	4c 9a 0d	               jmp  next
.0da7	20 c1 0e	exit           jsr  pop
.0daa	60		               rts
.0dab			gotoxy
.0dab	08		               php
.0dac	18		               clc
.0dad	8a		               txa
.0dae	48		               pha
.0daf	98		               tya
.0db0	aa		               tax
.0db1	68		               pla
.0db2	a8		               tay
.0db3	20 f0 ff	               jsr  kplot
.0db6	28		               plp
.0db7	60		               rts
.0db8			cursor
=$0286			bascol    =    $0286
.0db8	08		               php            ;tourlou
.0db9	48		               pha
.0dba	90 12		               bcc  restore
.0dbc	20 f0 ff	               jsr  kplot
.0dbf	8c e0 0d	               sty  cx
.0dc2	8e e1 0d	               stx  cy
.0dc5	ad 86 02	               lda  bascol
.0dc8	8d e2 0d	               sta  bcol
.0dcb	4c dd 0d	               jmp  out
.0dce	ae e1 0d	restore        ldx  cy
.0dd1	ac e0 0d	               ldy  cx
.0dd4	20 f0 ff	               jsr  kplot
.0dd7	ad e2 0d	               lda  bcol
.0dda	8d 86 02	               sta  bascol
.0ddd	68		out            pla
.0dde	28		               plp
.0ddf	60		               rts
>0de0	00		cx   .byte     $00
>0de1	00		cy   .byte     $00
>0de2	00		bcol .byte     $00
.0de3			cursave
.0de3	08		               php
.0de4	38		               sec
.0de5	20 b8 0d	               jsr  cursor
.0de8	28		               plp
.0de9	60		               rts
.0dea			curput
.0dea	08		               php
.0deb	18		               clc
.0dec	20 b8 0d	               jsr  cursor
.0def	28		               plp
.0df0	60		               rts
.0df1			putsxy
.0df1	20 82 0e	               jsr  push
.0df4	86 fb		               stx  zpage1
.0df6	84 fc		               sty  zpage1+1
.0df8	a0 00		               ldy  #$00
.0dfa	b1 fb		               lda  (zpage1),y
.0dfc	aa		               tax
.0dfd	20 89 0f	               jsr  inczp1
.0e00	b1 fb		               lda  (zpage1),y
.0e02	a8		               tay
.0e03	20 ab 0d	               jsr  gotoxy
.0e06	20 89 0f	               jsr  inczp1
.0e09	a6 fb		               ldx  zpage1
.0e0b	a4 fc		               ldy  zpage1+1
.0e0d	20 91 0d	               jsr  puts
.0e10	20 c1 0e	               jsr  pop
.0e13	60		               rts
>0e14	00 00		straddr   .word     $00
>0e16	00		px        .byte     $00
>0e17	00		py        .byte     $00
>0e18	00 00		zp1       .word     $00
.0e1a			putscxy
.0e1a	20 82 0e	               jsr  push
.0e1d	84 fc		               sty  zpage1+1
.0e1f	86 fb		               stx  zpage1
.0e21	ad 86 02	               lda  bascol
.0e24	8d 44 0e	               sta  bc
.0e27	a0 00		               ldy #$00
.0e29	b1 fb		               lda  (zpage1),y
.0e2b	8d 86 02	               sta  bascol
.0e2e	20 89 0f	               jsr  inczp1
.0e31	a6 fb		               ldx  zpage1
.0e33	a4 fc		               ldy  zpage1+1
.0e35	20 f1 0d	               jsr  putsxy
.0e38	ad 44 0e	               lda  bc
.0e3b	8d 86 02	               sta  bascol
.0e3e	20 c1 0e	               jsr  pop
.0e41	60		               rts
>0e42	00 00		straddr  .word      $00
>0e44	00		bc       .byte      $00
>0e45	00 00		zp1      .word      $00
.0e47			putrahex
.0e47	08		               php
.0e48	48		               pha
.0e49	20 9f 10	               jsr  atohex
.0e4c	a9 3e		               lda  #<a2hexstr
.0e4e	a0 10		               ldy  #>a2hexstr
.0e50	20 91 0d	               jsr  puts
.0e53	68		               pla
.0e54	28		               plp
.0e55	60		               rts
.0e56			kputrahexxy
.0e56			bputrahexxy
.0e56			putrahexxy
.0e56	08		               php
.0e57	20 9f 10	               jsr  atohex
.0e5a	a9 3b		               lda  #<a2hexpos
.0e5c	a0 10		               ldy  #>a2hexpos
.0e5e	20 f1 0d	               jsr  putsxy
.0e61	68		               pla
.0e62	28		               plp
.0e63	60		               rts
.0e64			putrahexcxy
.0e64	08		               php
.0e65	20 9f 10	               jsr  atohex
.0e68	a9 3b		               lda  #<a2hexpos
.0e6a	a0 10		               ldy  #>a2hexpos
.0e6c	20 1a 0e	               jsr  putscxy
.0e6f	68		               pla
.0e70	28		               plp
.0e71	60		               rts
.0e72			setinverse
.0e72	48		               pha
.0e73	a9 12		               lda  #$12
.0e75	20 d2 ff	               jsr  $ffd2
.0e78	68		               pla
.0e79	60		               rts
.0e7a			clrinverse
.0e7a	48		               pha
.0e7b	a9 92		               lda  #$92
.0e7d	20 d2 ff	               jsr  $ffd2
.0e80	68		               pla
.0e81	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0e82			push
.0e82	08		          php            ; stack : flg, pcl, pch
.0e83	78		          sei
.0e84	8d be 0e	          sta  ra        ; save a
.0e87	68		          pla            ; stack : pcl, pch
.0e88	8d bd 0e	          sta  rp        ; save rp
.0e8b	68		          pla            ; stack : pch
.0e8c	8d bf 0e	          sta  pc        ; save pcl
.0e8f	68		          pla            ; stack : -
.0e90	8d c0 0e	          sta  pc+1      ; save pch
.0e93	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0e95	48		          pha            ; stack : zp1l
.0e96	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0e98	48		          pha            ; stack : zp1h, zp1l
.0e99	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0e9b	48		          pha            ; stack : zp2l, zp1h, zp1l
.0e9c	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0e9e	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0e9f	ad bd 0e	          lda  rp        ; get rp
.0ea2	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0ea3	ad be 0e	          lda  ra        ; get a
.0ea6	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ea7	8a		          txa            ; get x
.0ea8	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ea9	98		          tya            ; get y
.0eaa	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eab	ad c0 0e	          lda  pc+1      ; get pch
.0eae	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eaf	ad bf 0e	          lda  pc        ; get pcl
.0eb2	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eb3	ad bd 0e	          lda  rp        ; get rp
.0eb6	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0eb7	ad be 0e	          lda  ra        ; get a
.0eba	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ebb	58		          cli
.0ebc	60		          rts
>0ebd	00		rp        .byte     0
>0ebe	00		ra        .byte     0
>0ebf	00 00		pc        .word     0
.0ec1			pull
.0ec1			pop
.0ec1	78		          sei
.0ec2	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec3	8d f6 0e	          sta  pc        ; save pcl
.0ec6	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ec7	8d f7 0e	          sta  pc+1      ; save pch
.0eca	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ecb	a8		          tay            ; set y
.0ecc	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ecd	aa		          tax            ; set x
.0ece	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0ecf	8d f5 0e	          sta  ra        ; save a
.0ed2	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0ed3	8d f4 0e	          sta  rp        ; save rp
.0ed6	68		          pla            ; stack : zp2l, zp1h, zp1l
.0ed7	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0ed9	68		          pla            ; stack : zp1h, zp1l
.0eda	85 fd		          sta  zpage2    ; get zpage2 High byte
.0edc	68		          pla            ; stack : zp1l
.0edd	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0edf	68		          pla            ; stack :
.0ee0	85 fb		          sta  zpage1    ; get zpage1 High byte
.0ee2	ad f7 0e	          lda  pc+1      ; get pch
.0ee5	48		          pha            ; stack : pch
.0ee6	ad f6 0e	          lda  pc
.0ee9	48		          pha            ; stack : pcl, pch
.0eea	ad f4 0e	          lda  rp        ; get rp
.0eed	48		          pha            ; stack : rp, pcl, pch
.0eee	ad f5 0e	          lda  ra        ; set ra
.0ef1	58		          cli
.0ef2	28		          plp            ; stack : pcl, pch
.0ef3	60		          rts
>0ef4	00		rp        .byte     0
>0ef5	00		ra        .byte     0
>0ef6	00 00		pc        .word     0

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0ef8			blkfill
.0ef8	20 82 0e	bf0            jsr  push
.0efb	20 b9 0f	               jsr  savezp1
.0efe	84 fc		               sty  zpage1+1
.0f00	a0 00		               ldy  #$00
.0f02	84 fb		               sty  zpage1
.0f04	91 fb		bf1            sta  (zpage1),y
.0f06	c8		               iny
.0f07	d0 fb		               bne  bf1
.0f09	20 c8 0f	               jsr  restzp1
.0f0c	20 c1 0e	               jsr  pop
.0f0f	60		               rts
.0f10			memfill
.0f10	20 82 0e	               jsr  push
.0f13	20 f8 0e	mf1            jsr  blkfill
.0f16	c8		               iny
.0f17	ca		               dex
.0f18	d0 f9		               bne  mf1
.0f1a	20 c1 0e	               jsr  pop
.0f1d	60		               rts
.0f1e			memmove
.0f1e	20 82 0e	               jsr  push
.0f21	ba		               tsx            ; On se crée un pointeur ...
.0f22	8a		               txa
.0f23	18		               clc
.0f24	69 0b		               adc  #11
.0f26	a8		               tay
.0f27	a2 06		               ldx  #$06
.0f29	b9 00 01	nextbyte       lda  $0100,y
.0f2c	99 78 0f	               sta  words,y
.0f2f	c8		               iny
.0f30	ca		               dex
.0f31	d0 f6		               bne  nextbyte
.0f33	ad 78 0f	               lda  s
.0f36	8d 4f 0f	               sta  source+1
.0f39	ad 79 0f	               lda  s+1
.0f3c	8d 50 0f	               sta  source+2
.0f3f	ad 7a 0f	               lda  d
.0f42	8d 4c 0f	               sta  destin+1
.0f45	ad 7b 0f	               lda  d+1
.0f48	8d 4d 0f	               sta  destin+2
.0f4b	ad ff ff	destin         lda  $ffff
.0f4e	8d ff ff	source         sta  $ffff
.0f51	ee 4c 0f	               inc  destin+1
.0f54	d0 03		               bne  src
.0f56	ee 4d 0f	               inc  destin+2
.0f59	ee 4f 0f	src            inc  source+1
.0f5c	d0 03		               bne  cnt
.0f5e	ee 50 0f	               inc  source+2
.0f61	ad 7c 0f	cnt            lda  compte
.0f64	d0 08		               bne  decit
.0f66	ad 7d 0f	               lda  compte+1
.0f69	f0 09		               beq  fini
.0f6b	ce 7d 0f	               dec  compte+1
.0f6e	ce 7c 0f	decit          dec  compte
.0f71	4c 4b 0f	               jmp  destin
.0f74	20 c1 0e	fini           jsr  pop
.0f77	60		               rts
.0f78			words
>0f78	00 00		s         .word     $0000
>0f7a	00 00		d         .word     $0000
>0f7c	00 00		compte    .word     $0000
.0f7e			decword
.0f7e	20 82 0e	               jsr  push
.0f81	86 fd		               stx  zpage2
.0f83	84 fe		               sty  zpage2+1
.0f85	20 c1 0e	               jsr  pop
.0f88	60		               rts
.0f89			inczp1
.0f89	08		               php
.0f8a	48		               pha
.0f8b	e6 fb		               inc  zpage1
.0f8d	a5 fb		               lda  zpage1
.0f8f	d0 02		               bne  nopage
.0f91	e6 fc		               inc  zpage1+1
.0f93	68		nopage         pla
.0f94	28		               plp
.0f95	60		               rts
.0f96			deczp1
.0f96	08		                php
.0f97	48		                pha
.0f98	c6 fb		                dec  zpage1
.0f9a	d0 02		                bne  nopage
.0f9c	c6 fc		                dec  zpage1+1
.0f9e	68		nopage          pla
.0f9f	28		                plp
.0fa0	60		                rts
.0fa1			inczp2
.0fa1	08		               php
.0fa2	48		               pha
.0fa3	e6 fd		               inc  zpage2
.0fa5	a5 fd		               lda  zpage2
.0fa7	d0 02		               bne  nopage
.0fa9	e6 fe		               inc  zpage2+1
.0fab	68		nopage         pla
.0fac	28		               plp
.0fad	60		               rts
.0fae			deczp2
.0fae	08		               php
.0faf	48		               pha
.0fb0	a5 fd		               lda  zpage2
.0fb2	d0 02		               bne  nopage
.0fb4	c6 fe		               dec  zpage2+1
.0fb6	68		nopage         pla
.0fb7	28		               plp
.0fb8	60		               rts
.0fb9			savezp1
.0fb9	08		               php
.0fba	48		               pha
.0fbb	a5 fb		               lda  zpage1
.0fbd	8d 35 10	               sta  zp1
.0fc0	a5 fc		               lda  zpage1+1
.0fc2	8d 36 10	               sta  zp1+1
.0fc5	68		               pla
.0fc6	28		               plp
.0fc7	60		               rts
.0fc8			restzp1
.0fc8	08		               php
.0fc9	48		               pha
.0fca	ad 35 10	               lda zp1
.0fcd	85 fb		               sta zpage1
.0fcf	ad 36 10	               lda zp1+1
.0fd2	85 fc		               sta zpage1+1
.0fd4	68		               pla
.0fd5	28		               plp
.0fd6	60		               rts
.0fd7			savezp2
.0fd7	08		         php
.0fd8	48		         pha
.0fd9	a5 fd		         lda zpage2
.0fdb	8d 37 10	         sta zp2
.0fde	a5 fe		         lda zpage2+1
.0fe0	8d 38 10	         sta zp2+1
.0fe3	68		         pla
.0fe4	28		         plp
.0fe5	60		         rts
.0fe6			restzp2
.0fe6	08		                php
.0fe7	48		                pha
.0fe8	ad 37 10	                lda  zp2
.0feb	85 fd		                sta  zpage2
.0fed	ad 38 10	                lda  zp2+1
.0ff0	85 fe		                sta  zpage2+1
.0ff2	68		                pla
.0ff3	28		                plp
.0ff4	60		                rts
.0ff5			xy2addr
.0ff5	08		                php
.0ff6	48		                pha
.0ff7	8a		                txa
.0ff8	48		                pha
.0ff9	98		                tya
.0ffa	48		                pha
.0ffb	ad 30 10	                lda     addr1+1
.0ffe	8d 32 10	                sta     addr2+1
.1001	ad 2f 10	                lda     addr1
.1004	8d 31 10	                sta     addr2
.1007	c0 00		                cpy     #$00
.1009	f0 0f		                beq     addx
.100b	18		moreline        clc
.100c	6d 2e 10	                adc     ymult
.100f	90 03		                bcc     norepy
.1011	ee 32 10	                inc     addr2+1
.1014	8d 31 10	norepy          sta     addr2
.1017	88		                dey
.1018	d0 f1		                bne     moreline
.101a	8a		addx            txa
.101b	18		                clc
.101c	6d 31 10	                adc     addr2
.101f	90 03		                bcc     thatsit
.1021	ee 32 10	                inc     addr2+1
.1024	8d 31 10	thatsit         sta     addr2
.1027	68		                pla
.1028	a8		                tay
.1029	68		                pla
.102a	aa		                tax
.102b	68		                pla
.102c	28		                plp
.102d	60		                rts
>102e	28		ymult          .byte     40
>102f	00 00		addr1          .word     $0000
>1031	00 00		addr2          .word     $0000
>1033	00 00		bytecnt        .word     $0000
>1035	00 00		zp1        .word   $0000
>1037	00 00		zp2        .word   $0000

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1039	01		a2hexcol       .byte     1              ; pour aputscxy
>103a	00		a2hexbkcol     .byte     %00000000
.103b			a2hexpos
>103b	00		a2hexpx        .byte     0              ; pour aputsxy
>103c	00		a2hexpy        .byte     0
>103d	24		a2hexprefix    .byte     "$"            ; pour aputs
>103e	00 00		a2hexstr       .word     $00
>1040	00 00		               .word     $00
>1042	00		               .byte     0              ; 0 end string
>1043	30 30 30 30	abin           .null     "00000000"
>1047	30 30 30 30 00
>104c	20 20 20 00	adec           .null     "   "
.1050			putahexfmtxy
.1050	20 82 0e	               jsr  push
.1053	20 9f 10	               jsr  atohex
.1056	ae 3b 10	               ldx  a2hexpx
.1059	ac 3c 10	               ldy  a2hexpy
.105c	20 ab 0d	               jsr  gotoxy
.105f	a2 3d		               ldx  #<a2hexprefix
.1061	a0 10		               ldy  #>a2hexprefix
.1063	20 91 0d	               jsr  puts
.1066	20 c1 0e	               jsr  pop
.1069	60		               rts
.106a			putahexfmt
.106a	20 82 0e	               jsr  push
.106d	20 9f 10	               jsr  atohex
.1070	a2 3d		               ldx  #<a2hexprefix
.1072	a0 10		               ldy  #>a2hexprefix
.1074	20 91 0d	               jsr  puts
.1077	20 c1 0e	               jsr  pop
.107a	60		               rts
.107b			putahex
.107b	20 82 0e	               jsr  push
.107e	20 9f 10	               jsr  atohex
.1081	a2 3e		               ldx  #<a2hexstr
.1083	a0 10		               ldy  #>a2hexstr
.1085	20 91 0d	               jsr  puts
.1088	20 c1 0e	               jsr  pop
.108b	60		               rts
.108c			nibtohex
.108c	08		               php
.108d	29 0f		               and  #$0f
.108f	f8		               sed
.1090	18		               clc
.1091	69 90		               adc  #$90
.1093	69 40		               adc  #$40
.1095	d8		               cld
.1096	28		               plp
.1097	60		               rts
.1098			lsra4bits
.1098	08		               php
.1099	4a		               lsr
.109a	4a		               lsr
.109b	4a		               lsr
.109c	4a		               lsr
.109d	28		               plp
.109e	60		               rts
.109f			atohex
.109f	08		               php
.10a0	48		               pha
.10a1	48		               pha
.10a2	20 98 10	               jsr  lsra4bits
.10a5	20 8c 10	               jsr  nibtohex
.10a8	8d 3e 10	               sta  a2hexstr
.10ab	68		               pla
.10ac	20 8c 10	               jsr  nibtohex
.10af	8d 3f 10	               sta  a2hexstr+1
.10b2	a9 00		               lda  #$00                ; set end of string
.10b4	8d 40 10	               sta  a2hexstr+2
.10b7	68		               pla
.10b8	28		               plp
.10b9	60		               rts
.10ba			xy2hex
.10ba	20 82 0e	               jsr  push
.10bd	20 9f 10	               jsr  atohex
.10c0	8a		               txa
.10c1	48		               pha
.10c2	20 98 10	               jsr  lsra4bits
.10c5	20 8c 10	               jsr  nibtohex
.10c8	8d 3e 10	               sta  a2hexstr
.10cb	68		               pla
.10cc	20 8c 10	               jsr  nibtohex
.10cf	8d 3f 10	               sta  a2hexstr+1
.10d2	98		               tya
.10d3	48		               pha
.10d4	20 98 10	               jsr  lsra4bits
.10d7	20 8c 10	               jsr  nibtohex
.10da	8d 40 10	               sta  a2hexstr+2
.10dd	68		               pla
.10de	20 8c 10	               jsr  nibtohex
.10e1	8d 41 10	               sta  a2hexstr+3
.10e4	a9 00		               lda  #$00                ; 0 ended string
.10e6	8d 42 10	               sta  a2hexstr+4
.10e9	20 c1 0e	               jsr  pop
.10ec			atobin
.10ec	20 82 0e	               jsr  push
.10ef	a2 08		               ldx  #8
.10f1	a0 00		               ldy  #0
.10f3	18		               clc
.10f4	2a		nextbit        rol
.10f5	48		               pha
.10f6	69 00		               adc  #$00
.10f8	29 01		               and  #$01
.10fa	20 8c 10	               jsr  nibtohex
.10fd	99 43 10	               sta  abin,y
.1100	68		               pla
.1101	c8		               iny
.1102	ca		               dex
.1103	d0 ef		               bne  nextbit
.1105	a9 00		               lda  #0
.1107	99 43 10	               sta  abin,y
.110a	20 c1 0e	               jsr  pull
.110d	60		               rts
.110e			putabin
.110e	20 ec 10	               jsr     atobin
.1111	20 82 0e	               jsr     push
.1114	a2 43		               ldx     #<abin
.1116	a0 10		               ldy     #>abin
.1118	20 91 0d	               jsr     puts
.111b	20 c1 0e	               jsr     pop
.111e	60		               rts
.111f			printabin
.111f	20 82 0e	               jsr     push
.1122	a2 43		               ldx     #<abin
.1124	a0 10		               ldy     #>abin
.1126	20 91 0d	               jsr     puts
.1129	20 c1 0e	               jsr     pop
.112c	60		               rts
.112d			putabinfmt
.112d	08		               php
.112e	48		               pha
.112f	a9 25		               lda     #"%"
.1131	20 8b 0d	               jsr     putch
.1134	68		               pla
.1135	20 0e 11	               jsr     putabin
.1138	28		               plp
.1139	60		               rts
.113a			putabinxy
.113a	20 ab 0d	               jsr     gotoxy
.113d	20 0e 11	               jsr     putabin
.1140	60		               rts
.1141			putabinfmtxy
.1141	20 ab 0d	               jsr     gotoxy
.1144	20 2d 11	               jsr     putabinfmt
.1147	60		               rts
.1148			atodec
.1148	20 82 0e	               jsr  push
.114b	f8		               sed
.114c	aa		               tax
.114d	a0 00		               ldy  #$00
.114f	a9 00		               lda  #$00
.1151	18		nextbit        clc
.1152	69 01		               adc  #$01
.1154	90 01		               bcc  decx
.1156	c8		               iny
.1157	ca		decx           dex
.1158	d0 f7		               bne  nextbit
.115a	48		               pha
.115b	98		               tya
.115c	20 8c 10	               jsr  nibtohex
.115f	8d 4c 10	               sta  adec
.1162	68		               pla
.1163	48		               pha
.1164	20 8c 10	               jsr  nibtohex
.1167	8d 4e 10	               sta  adec+2
.116a	68		               pla
.116b	6a		               ror
.116c	6a		               ror
.116d	6a		               ror
.116e	6a		               ror
.116f	20 8c 10	               jsr  nibtohex
.1172	8d 4d 10	               sta  adec+1
.1175	d8		               cld
.1176	20 c1 0e	               jsr  pull
.1179	60		               rts
>117a	00 00 00	buffer         .byte     0,0,0
.117d			putadec
.117d	20 82 0e	               jsr  push
.1180	20 48 11	               jsr  atodec
.1183	a2 4c		               ldx  #<adec
.1185	a0 10		               ldy  #>adec+1
.1187	20 91 0d	               jsr  puts
.118a	20 c1 0e	               jsr  pop
.118d	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>118e	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1192	00 00 00 00 00 00 00 00 00 0d 00 00
>119e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>11a2	00 00 00 00 00 00 00 00 00 00 00 00
>11ae	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>11b2	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>11be	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>11c2	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>11ce	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>11d2	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>11de	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>11e2	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>11ee	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>11f2	00 00 00 00 00 00 00 00 00 00 00 00
>11fe	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1202	00 00 00 00 00 00 00 00 00 00 00 00
>120e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1212	00 00 00 00 00 00 00 00 00 00 00 00
>121e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1222	00 00 00 00 00 00 00 00 00 00 00 00
>122e	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1232	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>123e	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1242	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>124e	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1252	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>125e	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1262	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>126e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1272	00 00 00 00 00 00 00 00 00 00 00 00
>127e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1282	00 00 00 00 00 00 00 00 00 00 00 00
.128e			waitstop
.128e	20 82 0e	               jsr  push
.1291	20 ed f6	wait           jsr  k_stop
.1294	d0 fb		               bne  wait
.1296	20 c1 0e	               jsr  pop
.1299	60		               rts
.129a			anykey
.129a	08		               php
.129b	48		               pha
.129c	a5 cb		nokey          lda 203
.129e	c9 40		               cmp #64
.12a0	f0 fa		               beq nokey
.12a2	20 a8 12	               jsr releasekey
.12a5	68		               pla
.12a6	28		               plp
.12a7	60		               rts
.12a8			releasekey
.12a8	08		               php
.12a9	48		               pha
.12aa	a5 cb		keypressed     lda 203
.12ac	c9 40		               cmp #64
.12ae	d0 fa		               bne keypressed
.12b0	68		               pla
.12b1	28		               plp
.12b2	60		               rts
.12b3			getkey
.12b3	20 e4 ff	again          jsr  getin
.12b6	c9 00		               cmp  #0
.12b8	f0 f9		               beq  again
.12ba	60		               rts
.12bb			kbflushbuff
.12bb	08		               php
.12bc	48		               pha
.12bd	20 e4 ff	again          jsr  getin
.12c0	c9 00		               cmp  #0
.12c2	d0 f9		               bne  again
.12c4	68		               pla
.12c5	28		               plp
.12c6	60		               rts
.12c7			waitkey
.12c7	20 82 0e	               jsr  push
.12ca	8d 18 13	               sta  thekey
.12cd	20 e4 ff	nope           jsr  getin
.12d0	20 d2 ff	               jsr  chrout
.12d3	cd 18 13	               cmp  thekey
.12d6	d0 f5		               bne  nope
.12d8	20 d2 ff	               jsr  chrout
.12db	20 c1 0e	               jsr  pop
.12de	60		               rts
.12df			waitspace
.12df	20 82 0e	               jsr  push
.12e2	a9 7f		wait           lda  #$7f  ;%01111111
.12e4	8d 00 dc	               sta  $dc00
.12e7	ad 01 dc	               lda  $dc01
.12ea	29 10		               and  #$10  ;mask %00010000
.12ec	d0 f4		               bne  wait
.12ee	20 c1 0e	               jsr  pop
.12f1			waitsstop
.12f1	20 82 0e	               jsr  push
.12f4	20 ed f6	wait           jsr  k_stop  ;%01111111
.12f7	d0 fb		               bne  wait
.12f9	20 c1 0e	               jsr  pop
.12fc			waitreturn
.12fc	20 82 0e	               jsr  push
.12ff	ad 19 13	               lda  thecount
.1302	8d 00 04	               sta  scrnram
.1305	a9 02		               lda  #$02
.1307	8d 00 d8	               sta  colorram
.130a	20 e4 ff	nope           jsr  getin
.130d	c9 0d		nohex          cmp  #$0d
.130f	d0 f9		               bne  nope
.1311	ee 19 13	               inc  thecount
.1314	20 c1 0e	               jsr  pop
.1317	60		               rts
>1318	00		thekey         .byte   0
>1319	01		thecount       .byte   $01

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.131a			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.131a	08		                php
.131b	8d d8 14	                sta  rega
.131e	68		                pla
.131f	8d db 14	                sta  regp
.1322	8e d9 14	                stx  regx
.1325	8c da 14	                sty  regy
.1328	ba		                tsx
.1329	8e dc 14	                stx  regs
.132c	68		                pla
.132d	8d df 14	                sta  regpcl
.1330	8d e0 14	                sta  regpcl2
.1333	68		                pla
.1334	8d dd 14	                sta  regpch
.1337	8d de 14	                sta  regpch2
.133a	ad d8 14	                lda  rega
.133d	48		                pha
.133e	20 8c 10	                jsr  nibtohex
.1341	8d 82 14	                sta  vala+1
.1344	68		                pla
.1345	20 98 10	                jsr  lsra4bits
.1348	20 8c 10	                jsr  nibtohex
.134b	8d 81 14	                sta  vala
.134e	ad da 14	                lda  regy
.1351	48		                pha
.1352	20 8c 10	                jsr  nibtohex
.1355	8d 96 14	                sta  valy+1
.1358	68		                pla
.1359	20 98 10	                jsr  lsra4bits
.135c	20 8c 10	                jsr  nibtohex
.135f	8d 95 14	                sta  valy
.1362	ad d9 14	                lda  regx
.1365	48		                pha
.1366	20 8c 10	                jsr  nibtohex
.1369	8d 8c 14	                sta  valx+1
.136c	68		                pla
.136d	20 98 10	                jsr  lsra4bits
.1370	20 8c 10	                jsr  nibtohex
.1373	8d 8b 14	                sta  valx
.1376	ad db 14	                lda  regp
.1379	48		                pha
.137a	20 8c 10	                jsr  nibtohex
.137d	8d a0 14	                sta  valp+1
.1380	68		                pla
.1381	20 98 10	                jsr  lsra4bits
.1384	20 8c 10	                jsr  nibtohex
.1387	8d 9f 14	                sta  valp
.138a	ad dc 14	                lda  regs
.138d	48		                pha
.138e	20 8c 10	                jsr  nibtohex
.1391	8d aa 14	                sta  vals+1
.1394	68		                pla
.1395	20 98 10	                jsr  lsra4bits
.1398	20 8c 10	                jsr  nibtohex
.139b	8d a9 14	                sta  vals
.139e	18		                clc
.139f	ad e0 14	                lda regpcl2
.13a2	69 01		                adc #$01
.13a4	8d e0 14	                sta regpcl2
.13a7	ad e0 14	                lda regpcl2
.13aa	d0 03		                bne noreport
.13ac	ee de 14	                inc regpch2
.13af	ad de 14	    noreport    lda regpch2
.13b2	48		                pha
.13b3	20 8c 10	                jsr  nibtohex
.13b6	8d b5 14	                sta  valpch+1
.13b9	68		                pla
.13ba	20 98 10	                jsr  lsra4bits
.13bd	20 8c 10	                jsr  nibtohex
.13c0	8d b4 14	                sta  valpch
.13c3	ad e0 14	                lda  regpcl2
.13c6	48		                pha
.13c7	20 8c 10	                jsr  nibtohex
.13ca	8d b7 14	                sta  valpcl+1
.13cd	68		                pla
.13ce	20 98 10	                jsr  lsra4bits
.13d1	20 8c 10	                jsr  nibtohex
.13d4	8d b6 14	                sta  valpcl
.13d7	a5 fb		                lda  zpage1
.13d9	48		                pha
.13da	20 8c 10	                jsr  nibtohex
.13dd	8d c5 14	                sta  valz1l
.13e0	68		                pla
.13e1	20 98 10	                jsr  lsra4bits
.13e4	20 8c 10	                jsr  nibtohex
.13e7	8d c6 14	                sta  valz1l+1
.13ea	a5 fc		                lda  zpage1+1
.13ec	48		                pha
.13ed	20 8c 10	                jsr  nibtohex
.13f0	8d c3 14	                sta  valz1h
.13f3	68		                pla
.13f4	20 98 10	                jsr  lsra4bits
.13f7	20 8c 10	                jsr  nibtohex
.13fa	8d c4 14	                sta  valz1h+1
.13fd	a5 fd		                lda  zpage2
.13ff	48		                pha
.1400	20 8c 10	                jsr  nibtohex
.1403	8d d4 14	                sta  valz2l
.1406	68		                pla
.1407	20 98 10	                jsr  lsra4bits
.140a	20 8c 10	                jsr  nibtohex
.140d	8d d5 14	                sta  valz2l+1
.1410	a5 fe		                lda  zpage2+1
.1412	48		                pha
.1413	20 8c 10	                jsr  nibtohex
.1416	8d d2 14	                sta  valz2h
.1419	68		                pla
.141a	20 98 10	                jsr  lsra4bits
.141d	20 8c 10	                jsr  nibtohex
.1420	8d d3 14	                sta  valz2h+1
.1423	20 72 0e	                jsr  setinverse
.1426	78		                sei
.1427	a2 7a		                ldx  #<srega
.1429	a0 14		                ldy  #>srega+1
.142b	20 1a 0e	                jsr  putscxy
.142e	a2 84		                ldx  #<sregx
.1430	a0 14		                ldy  #>sregx+1
.1432	20 1a 0e	                jsr  putscxy
.1435	a2 8e		                ldx  #<sregy
.1437	a0 14		                ldy  #>sregy+1
.1439	20 1a 0e	                jsr  putscxy
.143c	a2 98		                ldx  #<sregp
.143e	a0 14		                ldy  #>sregp+1
.1440	20 1a 0e	                jsr  putscxy
.1443	a2 a2		                ldx  #<sregs
.1445	a0 14		                ldy  #>sregs+1
.1447	20 1a 0e	                jsr  putscxy
.144a	a2 ac		                ldx  #<sregpc
.144c	a0 14		                ldy  #>sregpc+1
.144e	20 1a 0e	                jsr  putscxy
.1451	a2 ba		                ldx  #<sregz1
.1453	a0 14		                ldy  #>sregz1+1
.1455	20 1a 0e	                jsr  putscxy
.1458	a2 c9		                ldx  #<sregz2
.145a	a0 14		                ldy  #>sregz2+1
.145c	20 1a 0e	                jsr  putscxy
.145f	58		                cli
.1460	20 7a 0e	                jsr  clrinverse
.1463	ad dd 14	                lda  regpch
.1466	48		                pha
.1467	ad df 14	                lda  regpcl
.146a	48		                pha
.146b	ac da 14	                ldy  regy
.146e	ae d9 14	                ldx  regx
.1471	ad db 14	                lda  regp
.1474	48		                pha
.1475	ad d8 14	                lda  rega
.1478	28		                plp
.1479	60		                rts
>147a	01 00 17	srega   .byte   colr,coln,line
>147d	20 41 3a 24	        .text   ' a:$' ;4,24
>1481	00 00 00	vala    .byte   0,0,0
>1484	01 06 17	sregx   .byte   colr,coln+6,line
>1487	20 58 3a 24	        .text   ' x:$' ;4,24
>148b	00 00 00	valx    .byte   0,0,0
>148e	01 0c 17	sregy   .byte   colr,coln+12,line
>1491	20 59 3a 24	        .text   ' y:$' ;4,24
>1495	00 00 00	valy    .byte   0,0,0
>1498	01 12 17	sregp   .byte   colr,coln+18,line
>149b	20 50 3a 24	        .text   ' p:$' ;4,24
>149f	00 00 00	valp    .byte   0,0,0
>14a2	01 18 17	sregs   .byte   colr,coln+24,line
>14a5	20 53 3a 24	        .text   ' s:$' ;4,24
>14a9	00 00 00	vals    .byte   0,0,0
>14ac	01 1e 17	sregpc  .byte   colr,coln+30,line
>14af	20 50 43 3a	        .text   ' pc:$' ;4,24
>14b3	24
>14b4	00 00		valpch  .byte   0,0
>14b6	00 00 20 00	valpcl  .byte   0,0,32,0
>14ba	01 03 18	sregz1  .byte   colr,coln+3,line+1
>14bd	20 5a 50 31	        .text   ' zp1:$' ;4,24
>14c1	3a 24
>14c3	00 00		valz1h  .byte   0,0
>14c5	00 00 20 00	valz1l  .byte   0,0,32,0
>14c9	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>14cc	20 5a 50 32	        .text   ' zp2:$' ;4,24
>14d0	3a 24
>14d2	00 00		valz2h  .byte   0,0
>14d4	00 00 20 00	valz2l  .byte   0,0,32,0
>14d8	00		rega    .byte   0
>14d9	00		regx    .byte   0
>14da	00		regy    .byte   0
>14db	00		regp    .byte   0
>14dc	00		regs    .byte   0
>14dd	00		regpch  .byte   0
>14de	00		regpch2 .byte   0
>14df	00		regpcl  .byte   0
>14e0	00		regpcl2 .byte   0
>14e1	00		vzp1h   .byte   0
>14e2	00		vzp1l   .byte   0
>14e3	00		vzp2h   .byte   0
>14e4	00		vzp2l   .byte   0

;******  Return to file: essai01.asm


;******  End of listing

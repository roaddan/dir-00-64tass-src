
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L essai01.txt -o essai01.prg essai01.asm
; Sat Apr  5 23:12:24 2025

;Offset	;Hex		;Source

;******  Processing input file: essai01.asm

="20250403-233302"	                Version = "20250403-233302"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 05 09	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macro-c64-ultimateii.asm


;******  Return to file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm

=$df1c			uiictrlreg	=	$df1c	;(Write)
=$df1c			uiistatreg	=	$df1c	;(Read)	default $00
=$df1d			uiicmddata	=	$df1d	;(Write)
=$df1d			uiiidenreg	=	$df1d	;(Read)	default $c9
=$df1e			uiirspdata	=	$df1e	;(Read only)
=$df1f			uiistadata	=	$df1f	;(Read only)
=$00			uiiidle		=	$00
=$01			uiicmdbusy	=	$01
=$02			uiidatalast	=	$02
=$03			uiidatamore	=	$03
=$01			uii_identify	=	$01	; $01 $01 -> Read Id String as "ULTIMATE-II DOS V1.0"
=$02			uii_file_open	=	$02	; Open file for ...
=$01			uii_fa_read	=	$01	; $01 $02 $01 <filename> -> ... reading.
=$02			uii_fa_write	=	$02	; $01 $02 $02 <filename> -> ... writing.
=$04			uii_fa_new	=	$04	; $01 $02 $04 <filename> -> ... creating/writing.
=$08			uii_fa_ovwri	=	$08	; $01 $02 $08 <filename> -> ... overwriting.
=$03			uii_file_close	=	$03	; $01 $03 -> close opened file.
=$04			uii_read_data	= 	$04  ; $01 $04 [len_lo] [len_hi]
=$05			uii_writ_data	=	$05	; $01 $05 [dummy] [dummy] [data...]
=$06			uii_file_seek	=	$06	; $01 $06 [posl] [posml] [posmh] [posh].
=$07			uii_file_info 	=	$07	; $01 $07 -> returns current open file info.
=$08			uii_file_stat  = 	$08	; $01 $08 <filename> -> returns file info.
=$09			uii_file_del	=	$09	; $01 $09 <filename> -> delete/scratch file.
=$0a			uii_file_ren	=	$0a	; $01 $0a <filename> $00 <newname>
=$0b			uii_file_copy	=	$0b	; $01 $0b <source> $00 <destination>
=$11			uii_dir_change = 	$11	; $01 $11 <directory name>
=$12			uii_dir_pwd	=	$12	; $01 $12
=$13			uii_dir_open	=	$13	; $01 $13
=$14			uii_dir_read	=	$14  ; $01 $14
=$15			uii_dir_cp_ui	=	$15	; $01 $15 -> makes UI current path as API current path.
=$16			uii_dir_mkdir	=	$16	; $01 $16 <dirname> -> Create directory under current.
=$17			uii_dir_home	=	$17	; $01 $17 -> makes UI home path as API current path.
=$21			uii_reu_load	=	$21
=$22			uii_reu_save	=	$22
=$23			uii_dsk_mount	=	$23	; $01 $23 <id> <filename>
=$24			uii_dsk_umount = 	$24	; $01 $24 <id>
=$25			uii_dsk_swap 	= 	$25	; $01 $25 <id>
=$26			uii_time_get	=	$26	; $01 $26 [id] -> returns current RTC time/date.
=$27			uii_time_set	=	$27	; $01 $27 <Y> <M> <D> <H> <M> <S>
=$f0			uii_dos_echo	= 	$f0	; $01 $f0
.0854			isuiibusy
.0854	48					pha	; Bit 0
.0855	18					clc
.0856	ad 1c df				lda	uiistatreg
.0859	29 01					and	#%00000001
.085b	c9 01					cmp	#%00000001
.085d	d0 01					bne  out
.085f	38					sec
.0860	68		out			pla
.0861	60					rts
.0862			isuiidataacc
.0862	48					pha ; Bit 1
.0863	18					clc
.0864	ad 1c df				lda	uiistatreg
.0867	29 04					and	#%00000100
.0869	c9 04					cmp	#%00000100
.086b	d0 01					bne	out
.086d	38					sec
.086e	68		out			pla
.086f	60					rts
.0870			isuiiabort
.0870	48					pha ; Bit 2
.0871	18					clc
.0872	ad 1c df				lda	uiistatreg
.0875	29 04					and	#%00000100
.0877	c9 04					cmp	#%00000100
.0879	d0 01					bne	out
.087b	38					sec
.087c	68		out			pla
.087d	60					rts
.087e			isuiierror
.087e	48					pha ; Bit 3
.087f	18					clc
.0880	ad 1c df				lda	uiistatreg
.0883	29 08					and	#%00001000
.0885	c9 08					cmp	#%00001000
.0887	d0 01					bne	out
.0889	38					sec
.088a	68		out			pla
.088b	60					rts
.088c			getuiistate
.088c	08					php	; Bits 5,4
.088d	ad 1c df				lda	uiistatreg
.0890	4a					lsr
.0891	4a					lsr
.0892	4a					lsr
.0893	4a					lsr
.0894	29 03					and	#%00000011
.0896	28					plp
.0897	60					rts
.0898			isuiidataavail
.0898	48					pha
.0899	18					clc
.089a	ad 1c df				lda	uiistatreg
.089d	29 80					and	#%10000000
.089f	c9 80					cmp	#%10000000
.08a1	d0 01					bne	out
.08a3	38					sec
.08a4	68		out			pla
.08a5						rta
.08a5			waituiiidle
.08a5	08					php
.08a6	48					pha
.08a7	20 8c 08	notyet		jsr	getuiistate
.08aa	c9 00					cmp  #$00
.08ac	d0 f9					bne	notyet
.08ae	68					pla
.08af	28					plp
.08b0	60					rts
.08b1			isuiimoredata
.08b1	08					php
.08b2	48					pha
.08b3	20 8c 08	notyet		jsr	getuiistate
.08b6	c9 00					cmp  #$00
.08b8	d0 f9					bne	notyet
.08ba	68					pla
.08bb	28					plp
.08bc	60					rts
.08bd			waituiinotbusy
.08bd	08					php
.08be	20 54 08	wait			jsr	isuiibusy
.08c1	b0 fb					bcs	wait
.08c3	28					plp
.08c4	60					rts
.08c5			uiiputcmdbyte
.08c5	20 bd 08				jsr 	waituiinotbusy
.08c8	8d 1d df				sta	uiicmddata
.08cb	60					rts
.08cc			uiisndcmd
.08cc	20 17 0e				jsr	push
.08cf	86 fb					stx	zpage1
.08d1	84 fc					sty	zpage1+1
.08d3	a0 00					ldy	#$00
.08d5	b1 fb		next			lda	(zpage1),y
.08d7	f0 0d					beq	finish
.08d9	20 c5 08				jsr	uiiputcmdbyte
.08dc	c8					iny
.08dd	20 af 12			jsr	showregs
.08e0	20 41 0a			jsr	updatestatus
.08e3	4c d5 08				jmp	next
.08e6	a9 01		finish		lda	#$01
.08e8	8d 1c df				sta	uiictrlreg
.08eb	20 af 12			jsr	showregs
.08ee	20 41 0a			jsr	updatestatus
.08f1	20 56 0e				jsr	pop
.08f4	60					rts
.08f5			uiireaddata
.08f5	08					php
.08f6	20 98 08				jsr	isuiidataavail
.08f9	b0 06					bcs	nodata
.08fb	ad 1e df				lda	uiirspdata
.08fe	4c 03 09				jmp	outdata
.0901	a9 00		nodata		lda	#$00
.0903	28		outdata		plp
.0904	60					rts
.0905			uiigettime

;******  Return to file: essai01.asm

.0905			main
.0905	20 e9 0c	               jsr scrmaninit
.0908	08		               php
.0909	48		               pha
.090a	a9 0e		               lda  #14
.090c	8d 08 0d	               sta  characterset
.090f	20 d2 ff	               jsr  $ffd2
.0912	68		               pla
.0913	28		               plp
.0914	08		               php
.0915	48		               pha
.0916	a9 08		               lda  #$08
.0918	20 d2 ff	               jsr  $ffd2
.091b	68		               pla
.091c	28		               plp
.091d	20 cb 09	               jsr essai01
.0920	08		               php
.0921	48		               pha
.0922	a9 09		               lda  #$09
.0924	20 d2 ff	               jsr  $ffd2
.0927	68		               pla
.0928	28		               plp
.0929	08		               php
.092a	48		               pha
.092b	a9 8e		               lda  #b_uppercase
.092d	8d 08 0d	               sta  characterset
.0930	20 d2 ff	               jsr  $ffd2
.0933	68		               pla
.0934	28		               plp
.0935	20 09 0d	               jsr  cls
.0938	20 17 0e	               jsr  push
.093b	48		               pha
.093c	a9 0c		               lda  #cgrismoyen
.093e	8d 20 d0	               sta  $d020
.0941	68		               pla
.0942	48		               pha
.0943	a9 0b		               lda  #cgrisfonce
.0945	8d 21 d0	               sta  $d021
.0948	68		               pla
.0949	48		               pha
.094a	a9 0f		               lda  #cgrispale
.094c	8d 86 02	               sta  bascol
.094f	68		               pla
.0950	20 56 0e	               jsr  pull
.0953			aide
.0953	08		               php
.0954	48		               pha
.0955	a9 0e		               lda  #14
.0957	8d 08 0d	               sta  characterset
.095a	20 d2 ff	               jsr  $ffd2
.095d	68		               pla
.095e	28		               plp
.095f	20 09 0d	               jsr cls
.0962	20 17 0e	               jsr  push
.0965	a2 19		               ldx  #<line
.0967	a0 0c		               ldy  #>line
.0969	20 26 0d	               jsr  puts
.096c	20 56 0e	               jsr  pull
.096f	20 17 0e	               jsr  push
.0972	a2 82		               ldx  #<headera
.0974	a0 0a		               ldy  #>headera
.0976	20 26 0d	               jsr  puts
.0979	20 56 0e	               jsr  pull
.097c	20 17 0e	               jsr  push
.097f	a2 f6		               ldx  #<headerb
.0981	a0 0a		               ldy  #>headerb
.0983	20 26 0d	               jsr  puts
.0986	20 56 0e	               jsr  pull
.0989	20 17 0e	               jsr  push
.098c	a2 19		               ldx  #<line
.098e	a0 0c		               ldy  #>line
.0990	20 26 0d	               jsr  puts
.0993	20 56 0e	               jsr  pull
.0996	20 17 0e	               jsr  push
.0999	a2 19		               ldx  #<line
.099b	a0 0c		               ldy  #>line
.099d	20 26 0d	               jsr  puts
.09a0	20 56 0e	               jsr  pull
.09a3	20 17 0e	               jsr  push
.09a6	a2 4f		               ldx  #<shortcuts
.09a8	a0 0b		               ldy  #>shortcuts
.09aa	20 26 0d	               jsr  puts
.09ad	20 56 0e	               jsr  pull
.09b0	20 17 0e	               jsr  push
.09b3	a2 c9		               ldx  #<aidetext
.09b5	a0 0b		               ldy  #>aidetext
.09b7	20 26 0d	               jsr  puts
.09ba	20 56 0e	               jsr  pull
.09bd	20 17 0e	               jsr  push
.09c0	a2 19		               ldx  #<line
.09c2	a0 0c		               ldy  #>line
.09c4	20 26 0d	               jsr  puts
.09c7	20 56 0e	               jsr  pull
.09ca	60		               rts
.09cb			essai01
.09cb	08		               php
.09cc	48		               pha
.09cd	20 09 0d	               jsr  cls
.09d0	20 f9 09	               jsr  printstatic
.09d3	20 17 0e	               jsr  push
.09d6	a2 66		               ldx  #<lbluiiidenreg
.09d8	a0 0c		               ldy  #>lbluiiidenreg
.09da	20 af 0d	               jsr  putscxy
.09dd	20 56 0e	               jsr  pull
.09e0	ad 1d df	               lda  uiiidenreg
.09e3	20 ff 0f	               jsr  putahexfmt
.09e6			sendcommand
.09e6	20 17 0e	               jsr  push
.09e9	a2 de		               ldx  #<uiiidcmd
.09eb	a0 0c		               ldy  #>uiiidcmd
.09ed	20 cc 08	               jsr  uiisndcmd
.09f0	20 56 0e	               jsr  pull
.09f3	20 41 0a	               jsr  updatestatus
.09f6			nodata
.09f6	68		               pla
.09f7	28		               plp
.09f8	60		               rts
.09f9			printstatic
.09f9	20 17 0e	               jsr  push
.09fc	20 17 0e	               jsr  push
.09ff	a2 51		               ldx  #<lbluiititle
.0a01	a0 0c		               ldy  #>lbluiititle
.0a03	20 af 0d	               jsr  putscxy
.0a06	20 56 0e	               jsr  pull
.0a09	20 17 0e	               jsr  push
.0a0c	a2 66		               ldx  #<lbluiiidenreg
.0a0e	a0 0c		               ldy  #>lbluiiidenreg
.0a10	20 af 0d	               jsr  putscxy
.0a13	20 56 0e	               jsr  pull
.0a16	20 17 0e	               jsr  push
.0a19	a2 80		               ldx  #<lbluiistatreg
.0a1b	a0 0c		               ldy  #>lbluiistatreg
.0a1d	20 af 0d	               jsr  putscxy
.0a20	20 56 0e	               jsr  pull
.0a23	20 17 0e	               jsr  push
.0a26	a2 9a		               ldx  #<lbluiirspdata
.0a28	a0 0c		               ldy  #>lbluiirspdata
.0a2a	20 af 0d	               jsr  putscxy
.0a2d	20 56 0e	               jsr  pull
.0a30	20 17 0e	               jsr  push
.0a33	a2 b4		               ldx  #<lbluiistadata
.0a35	a0 0c		               ldy  #>lbluiistadata
.0a37	20 af 0d	               jsr  putscxy
.0a3a	20 56 0e	               jsr  pull
.0a3d	20 56 0e	               jsr  pop
.0a40	60		               rts
.0a41			updatestatus
.0a41	20 17 0e	               jsr  push
.0a44	20 17 0e	               jsr  push
.0a47	a2 d2		               ldx  #<txtuiistatreg
.0a49	a0 0c		               ldy  #>txtuiistatreg
.0a4b	20 af 0d	               jsr  putscxy
.0a4e	20 56 0e	               jsr  pull
.0a51	ad 1c df	               lda  uiistatreg
.0a54	20 c2 10	               jsr  putabinfmt
.0a57	20 17 0e	               jsr  push
.0a5a	a2 d6		               ldx  #<txtuiirspdata
.0a5c	a0 0c		               ldy  #>txtuiirspdata
.0a5e	20 af 0d	               jsr  putscxy
.0a61	20 56 0e	               jsr  pull
.0a64	ad 1e df	               lda  uiirspdata
.0a67	20 c2 10	               jsr  putabinfmt
.0a6a	20 17 0e	               jsr  push
.0a6d	a2 da		               ldx  #<txtuiistadata
.0a6f	a0 0c		               ldy  #>txtuiistadata
.0a71	20 af 0d	               jsr  putscxy
.0a74	20 56 0e	               jsr  pull
.0a77	ad 1f df	               lda  uiistadata
.0a7a	20 c2 10	               jsr  putabinfmt
.0a7d	20 56 0e	               jsr  pop
.0a80	60		               rts
>0a81	00		byte           .byte 0

;******  Processing file: ./strings_fr.asm

.0a82			headera
>0a82	20 31 35 34	               .text          " 1541 Ultimate II + Gestion de fichiers"
>0a86	31 20 d5 4c 54 49 4d 41 54 45 20 c9 c9 20 2b 20
>0a96	c7 45 53 54 49 4f 4e 20 44 45 20 46 49 43 48 49
>0aa6	45 52 53
>0aa9	0d		               .byte     $0d
>0aaa	20 c3 41 52	               .text          " Cartouche et API par Gideon Zweijtzer."
>0aae	54 4f 55 43 48 45 20 45 54 20 c1 d0 c9 20 50 41
>0abe	52 20 c7 49 44 45 4f 4e 20 da 57 45 49 4a 54 5a
>0ace	45 52 2e
>0ad1	0d		               .byte     $0d
>0ad2	20 20 20 20	               .text          "     API Version 1.0, 1er Feb 2013"
>0ad6	20 c1 d0 c9 20 d6 45 52 53 49 4f 4e 20 31 2e 30
>0ae6	2c 20 31 45 52 20 c6 45 42 20 32 30 31 33
>0af4	0d 00		               .byte     $0d,0
>0af6	20 20 20 20	headerb        .text          "               essai01 "
>0afa	20 20 20 20 20 20 20 20 20 20 20 45 53 53 41 49
>0b0a	30 31 20
>0b0d	0d		               .byte     $0d
>0b0e	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0b12	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>0b22	45 4c 20 cc 41 46 52 41 4e 43 45
>0b2d	0d		               .byte     $0d
>0b2e	20 20 20 20	               .text   format("       Version: %s",Version)
>0b32	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>0b42	30 34 30 33 2d 32 33 33 33 30 32
>0b4d	0d 00		               .byte     $0d,0
>0b4f	0d		shortcuts      .byte     $0d
>0b50	91 91		               .byte     ucurkey,ucurkey
>0b52	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>0b56	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>0b5a	1d
>0b5b	20 d2 20 c1	               .text          " R A C C O U R C I S "
>0b5f	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>0b6f	20
>0b70	0d		               .byte     $0d
>0b71	20 45 53 53	               .text   format(" essai01..: SYS%05d ($%04X)",main, main)
>0b75	41 49 30 31 2e 2e 3a 20 d3 d9 d3 30 32 33 30 39
>0b85	20 28 24 30 39 30 35 29
>0b8d	0d		               .byte     $0d
>0b8e	20 41 49 44	               .text   format(" aide.....: SYS%05d ($%04X)",aide, aide)
>0b92	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 33 38 37
>0ba2	20 28 24 30 39 35 33 29
>0baa	0d		               .byte     $0d
>0bab	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0baf	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 33 33 33 37
>0bbf	20 28 24 30 c4 30 39 29
>0bc7	0d 00		               .byte     $0d,0
>0bc9	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d ($%04X)",essai01, essai01)
>0bcd	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 35 30 37
>0bdd	20 28 24 30 39 c3 c2 29
>0be5	0d 0d		               .byte     $0d, $0d
>0be7	20 20 20 20	               .text   format("    ex.: SYS%05d",essai01)
>0beb	45 58 2e 3a 20 d3 d9 d3 30 32 35 30 37
>0bf8	0d		               .byte     $0d
>0bf9	20 20 20 20	               .text   format("    for i=0to100:SYS%05d:next",essai01)
>0bfd	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0c0d	30 32 35 30 37 3a 4e 45 58 54
>0c17	0d 00		               .byte     $0d,0
>0c19	20 c0 c0 c0	line           .byte     $20,192,192,192,192,192,192,192,192,192
>0c1d	c0 c0 c0 c0 c0 c0
>0c23	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0c27	c0 c0 c0 c0 c0 c0
>0c2d	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0c31	c0 c0 c0 c0 c0 c0
>0c37	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192
>0c3b	c0 c0 c0 c0 c0
>0c40	0d 00		               .byte     $0d,0
>0c42	50 52 45 53	uiiconnected   .null     "present"
>0c46	45 4e 54 00
>0c4a	41 42 53 45	uiiunconnected .null     "absent"
>0c4e	4e 54 00

;******  Return to file: essai01.asm

=0			uiiy           =    0
=1			uiix           =    1
>0c51	01 08 00	lbluiititle    .byte     1,uiix+7,uiiy
>0c54	31 35 34 31	               .null     "1541 Ultimate II+"
>0c58	20 d5 4c 54 49 4d 41 54 45 20 c9 c9 2b 00
>0c66	01 04 02	lbluiiidenreg  .byte     1,uiix+3 ,uiiy+2
>0c69	49 44 20 52	               .null     "id register --------> "
>0c6d	45 47 49 53 54 45 52 20 2d 2d 2d 2d 2d 2d 2d 2d
>0c7d	3e 20 00
>0c80	01 04 03	lbluiistatreg  .byte    1,uiix+3 ,uiiy+3
>0c83	43 4d 44 20	               .null     "cmd status reg. ----> "
>0c87	53 54 41 54 55 53 20 52 45 47 2e 20 2d 2d 2d 2d
>0c97	3e 20 00
>0c9a	01 04 04	lbluiirspdata  .byte     1,uiix+3 ,uiiy+4.
>0c9d	44 41 54 41	               .null     "data status reg. ---> "
>0ca1	20 53 54 41 54 55 53 20 52 45 47 2e 20 2d 2d 2d
>0cb1	3e 20 00
>0cb4	01 04 05	lbluiistadata  .byte     1,uiix+3 ,uiiy+5
>0cb7	52 45 53 50	               .null     "response data reg. -> "
>0cbb	4f 4e 53 45 20 44 41 54 41 20 52 45 47 2e 20 2d
>0ccb	3e 20 00
>0cce	03 1a 02 00	txtuiiidenreg  .byte     3,uiix+25,uiiy+2,0
>0cd2	03 1a 03 00	txtuiistatreg  .byte     3,uiix+25,uiiy+3,0
>0cd6	03 1a 04 00	txtuiirspdata  .byte     3,uiix+25,uiiy+4,0
>0cda	03 1a 05 00	txtuiistadata  .byte     3,uiix+25,uiiy+5,0
>0cde	01 01 00	uiiidcmd       .byte     $01,$01,$00

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0ce1	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0ce5	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0ce9			libtart

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0ce9			scrmaninit
.0ce9	20 17 0e	               jsr  push
.0cec	a9 06		               lda  #vbleu
.0cee	8d 21 d0	               sta  vicbackcol
.0cf1	a9 05		               lda  #vvert
.0cf3	8d 20 d0	               sta  vicbordcol
.0cf6	a9 01		               lda  #vblanc
.0cf8	8d 86 02	               sta  bascol
.0cfb	ad 00 04	               lda  scrnram
.0cfe	8d 00 04	               sta  scrnram
.0d01	20 09 0d	               jsr  cls
.0d04	20 56 0e	               jsr  pop
.0d07	60		               rts
>0d08	8e		characterset   .byte b_uppercase
.0d09			cls
.0d09	08		               php
.0d0a	48		               pha
.0d0b	a9 93		               lda  #$93
.0d0d	20 20 0d	               jsr  putch
.0d10	68		               pla
.0d11	28		               plp
.0d12	60		               rts
.0d13			putnch
.0d13	08		               php
.0d14	e0 00		               cpx  #$00
.0d16	f0 06		               beq  out
.0d18	20 d2 ff	again          jsr  $ffd2
.0d1b	ca		               dex
.0d1c	d0 fa		               bne  again
.0d1e	28		out            plp
.0d1f	60		               rts
.0d20			putch
.0d20	08		               php
.0d21	20 d2 ff	               jsr  $ffd2
.0d24	28		               plp
.0d25	60		               rts
.0d26			puts
.0d26	20 17 0e	               jsr  push
.0d29	86 fb		               stx  zpage1
.0d2b	84 fc		               sty  zpage1+1
.0d2d	a0 00		               ldy  #0
.0d2f	b1 fb		next           lda  (zpage1),y
.0d31	f0 09		               beq  exit
.0d33	20 20 0d	               jsr  putch
.0d36	20 1e 0f	               jsr  inczp1
.0d39	4c 2f 0d	               jmp  next
.0d3c	20 56 0e	exit           jsr  pop
.0d3f	60		               rts
.0d40			gotoxy
.0d40	08		               php
.0d41	18		               clc
.0d42	8a		               txa
.0d43	48		               pha
.0d44	98		               tya
.0d45	aa		               tax
.0d46	68		               pla
.0d47	a8		               tay
.0d48	20 f0 ff	               jsr  kplot
.0d4b	28		               plp
.0d4c	60		               rts
.0d4d			cursor
=$0286			bascol    =    $0286
.0d4d	08		               php
.0d4e	48		               pha
.0d4f	90 12		               bcc  restore
.0d51	20 f0 ff	               jsr  kplot
.0d54	8c 75 0d	               sty  cx
.0d57	8e 76 0d	               stx  cy
.0d5a	ad 86 02	               lda  bascol
.0d5d	8d 77 0d	               sta  bcol
.0d60	4c 72 0d	               jmp  out
.0d63	ae 76 0d	restore        ldx  cy
.0d66	ac 75 0d	               ldy  cx
.0d69	20 f0 ff	               jsr  kplot
.0d6c	ad 77 0d	               lda  bcol
.0d6f	8d 86 02	               sta  bascol
.0d72	68		out            pla
.0d73	28		               plp
.0d74	60		               rts
>0d75	00		cx   .byte     $00
>0d76	00		cy   .byte     $00
>0d77	00		bcol .byte     $00
.0d78			cursave
.0d78	08		               php
.0d79	38		               sec
.0d7a	20 4d 0d	               jsr  cursor
.0d7d	28		               plp
.0d7e	60		               rts
.0d7f			curput
.0d7f	08		               php
.0d80	18		               clc
.0d81	20 4d 0d	               jsr  cursor
.0d84	28		               plp
.0d85	60		               rts
.0d86			putsxy
.0d86	20 17 0e	               jsr  push
.0d89	86 fb		               stx  zpage1
.0d8b	84 fc		               sty  zpage1+1
.0d8d	a0 00		               ldy  #$00
.0d8f	b1 fb		               lda  (zpage1),y
.0d91	aa		               tax
.0d92	20 1e 0f	               jsr  inczp1
.0d95	b1 fb		               lda  (zpage1),y
.0d97	a8		               tay
.0d98	20 40 0d	               jsr  gotoxy
.0d9b	20 1e 0f	               jsr  inczp1
.0d9e	a6 fb		               ldx  zpage1
.0da0	a4 fc		               ldy  zpage1+1
.0da2	20 26 0d	               jsr  puts
.0da5	20 56 0e	               jsr  pop
.0da8	60		               rts
>0da9	00 00		straddr   .word     $00
>0dab	00		px        .byte     $00
>0dac	00		py        .byte     $00
>0dad	00 00		zp1       .word     $00
.0daf			putscxy
.0daf	20 17 0e	               jsr  push
.0db2	84 fc		               sty  zpage1+1
.0db4	86 fb		               stx  zpage1
.0db6	ad 86 02	               lda  bascol
.0db9	8d d9 0d	               sta  bc
.0dbc	a0 00		               ldy #$00
.0dbe	b1 fb		               lda  (zpage1),y
.0dc0	8d 86 02	               sta  bascol
.0dc3	20 1e 0f	               jsr  inczp1
.0dc6	a6 fb		               ldx  zpage1
.0dc8	a4 fc		               ldy  zpage1+1
.0dca	20 86 0d	               jsr  putsxy
.0dcd	ad d9 0d	               lda  bc
.0dd0	8d 86 02	               sta  bascol
.0dd3	20 56 0e	               jsr  pop
.0dd6	60		               rts
>0dd7	00 00		straddr  .word      $00
>0dd9	00		bc       .byte      $00
>0dda	00 00		zp1      .word      $00
.0ddc			putrahex
.0ddc	08		               php
.0ddd	48		               pha
.0dde	20 34 10	               jsr  atohex
.0de1	a9 d3		               lda  #<a2hexstr
.0de3	a0 0f		               ldy  #>a2hexstr
.0de5	20 26 0d	               jsr  puts
.0de8	68		               pla
.0de9	28		               plp
.0dea	60		               rts
.0deb			kputrahexxy
.0deb			bputrahexxy
.0deb			putrahexxy
.0deb	08		               php
.0dec	20 34 10	               jsr  atohex
.0def	a9 d0		               lda  #<a2hexpos
.0df1	a0 0f		               ldy  #>a2hexpos
.0df3	20 86 0d	               jsr  putsxy
.0df6	68		               pla
.0df7	28		               plp
.0df8	60		               rts
.0df9			putrahexcxy
.0df9	08		               php
.0dfa	20 34 10	               jsr  atohex
.0dfd	a9 d0		               lda  #<a2hexpos
.0dff	a0 0f		               ldy  #>a2hexpos
.0e01	20 af 0d	               jsr  putscxy
.0e04	68		               pla
.0e05	28		               plp
.0e06	60		               rts
.0e07			setinverse
.0e07	48		               pha
.0e08	a9 12		               lda  #$12
.0e0a	20 d2 ff	               jsr  $ffd2
.0e0d	68		               pla
.0e0e	60		               rts
.0e0f			clrinverse
.0e0f	48		               pha
.0e10	a9 92		               lda  #$92
.0e12	20 d2 ff	               jsr  $ffd2
.0e15	68		               pla
.0e16	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0e17			push
.0e17	08		          php            ; stack : flg, pcl, pch
.0e18	78		          sei
.0e19	8d 53 0e	          sta  ra        ; save a
.0e1c	68		          pla            ; stack : pcl, pch
.0e1d	8d 52 0e	          sta  rp        ; save rp
.0e20	68		          pla            ; stack : pch
.0e21	8d 54 0e	          sta  pc        ; save pcl
.0e24	68		          pla            ; stack : -
.0e25	8d 55 0e	          sta  pc+1      ; save pch
.0e28	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0e2a	48		          pha            ; stack : zp1l
.0e2b	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0e2d	48		          pha            ; stack : zp1h, zp1l
.0e2e	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0e30	48		          pha            ; stack : zp2l, zp1h, zp1l
.0e31	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0e33	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0e34	ad 52 0e	          lda  rp        ; get rp
.0e37	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0e38	ad 53 0e	          lda  ra        ; get a
.0e3b	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0e3c	8a		          txa            ; get x
.0e3d	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e3e	98		          tya            ; get y
.0e3f	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e40	ad 55 0e	          lda  pc+1      ; get pch
.0e43	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e44	ad 54 0e	          lda  pc        ; get pcl
.0e47	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e48	ad 52 0e	          lda  rp        ; get rp
.0e4b	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e4c	ad 53 0e	          lda  ra        ; get a
.0e4f	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e50	58		          cli
.0e51	60		          rts
>0e52	00		rp        .byte     0
>0e53	00		ra        .byte     0
>0e54	00 00		pc        .word     0
.0e56			pull
.0e56			pop
.0e56	78		          sei
.0e57	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e58	8d 8b 0e	          sta  pc        ; save pcl
.0e5b	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e5c	8d 8c 0e	          sta  pc+1      ; save pch
.0e5f	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0e60	a8		          tay            ; set y
.0e61	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0e62	aa		          tax            ; set x
.0e63	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0e64	8d 8a 0e	          sta  ra        ; save a
.0e67	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0e68	8d 89 0e	          sta  rp        ; save rp
.0e6b	68		          pla            ; stack : zp2l, zp1h, zp1l
.0e6c	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0e6e	68		          pla            ; stack : zp1h, zp1l
.0e6f	85 fd		          sta  zpage2    ; get zpage2 High byte
.0e71	68		          pla            ; stack : zp1l
.0e72	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0e74	68		          pla            ; stack :
.0e75	85 fb		          sta  zpage1    ; get zpage1 High byte
.0e77	ad 8c 0e	          lda  pc+1      ; get pch
.0e7a	48		          pha            ; stack : pch
.0e7b	ad 8b 0e	          lda  pc
.0e7e	48		          pha            ; stack : pcl, pch
.0e7f	ad 89 0e	          lda  rp        ; get rp
.0e82	48		          pha            ; stack : rp, pcl, pch
.0e83	ad 8a 0e	          lda  ra        ; set ra
.0e86	58		          cli
.0e87	28		          plp            ; stack : pcl, pch
.0e88	60		          rts
>0e89	00		rp        .byte     0
>0e8a	00		ra        .byte     0
>0e8b	00 00		pc        .word     0

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0e8d			blkfill
.0e8d	20 17 0e	bf0            jsr  push
.0e90	20 4e 0f	               jsr  savezp1
.0e93	84 fc		               sty  zpage1+1
.0e95	a0 00		               ldy  #$00
.0e97	84 fb		               sty  zpage1
.0e99	91 fb		bf1            sta  (zpage1),y
.0e9b	c8		               iny
.0e9c	d0 fb		               bne  bf1
.0e9e	20 5d 0f	               jsr  restzp1
.0ea1	20 56 0e	               jsr  pop
.0ea4	60		               rts
.0ea5			memfill
.0ea5	20 17 0e	               jsr  push
.0ea8	20 8d 0e	mf1            jsr  blkfill
.0eab	c8		               iny
.0eac	ca		               dex
.0ead	d0 f9		               bne  mf1
.0eaf	20 56 0e	               jsr  pop
.0eb2	60		               rts
.0eb3			memmove
.0eb3	20 17 0e	               jsr  push
.0eb6	ba		               tsx            ; On se crée un pointeur ...
.0eb7	8a		               txa
.0eb8	18		               clc
.0eb9	69 0b		               adc  #11
.0ebb	a8		               tay
.0ebc	a2 06		               ldx  #$06
.0ebe	b9 00 01	nextbyte       lda  $0100,y
.0ec1	99 0d 0f	               sta  words,y
.0ec4	c8		               iny
.0ec5	ca		               dex
.0ec6	d0 f6		               bne  nextbyte
.0ec8	ad 0d 0f	               lda  s
.0ecb	8d e4 0e	               sta  source+1
.0ece	ad 0e 0f	               lda  s+1
.0ed1	8d e5 0e	               sta  source+2
.0ed4	ad 0f 0f	               lda  d
.0ed7	8d e1 0e	               sta  destin+1
.0eda	ad 10 0f	               lda  d+1
.0edd	8d e2 0e	               sta  destin+2
.0ee0	ad ff ff	destin         lda  $ffff
.0ee3	8d ff ff	source         sta  $ffff
.0ee6	ee e1 0e	               inc  destin+1
.0ee9	d0 03		               bne  src
.0eeb	ee e2 0e	               inc  destin+2
.0eee	ee e4 0e	src            inc  source+1
.0ef1	d0 03		               bne  cnt
.0ef3	ee e5 0e	               inc  source+2
.0ef6	ad 11 0f	cnt            lda  compte
.0ef9	d0 08		               bne  decit
.0efb	ad 12 0f	               lda  compte+1
.0efe	f0 09		               beq  fini
.0f00	ce 12 0f	               dec  compte+1
.0f03	ce 11 0f	decit          dec  compte
.0f06	4c e0 0e	               jmp  destin
.0f09	20 56 0e	fini           jsr  pop
.0f0c	60		               rts
.0f0d			words
>0f0d	00 00		s         .word     $0000
>0f0f	00 00		d         .word     $0000
>0f11	00 00		compte    .word     $0000
.0f13			decword
.0f13	20 17 0e	               jsr  push
.0f16	86 fd		               stx  zpage2
.0f18	84 fe		               sty  zpage2+1
.0f1a	20 56 0e	               jsr  pop
.0f1d	60		               rts
.0f1e			inczp1
.0f1e	08		               php
.0f1f	48		               pha
.0f20	e6 fb		               inc  zpage1
.0f22	a5 fb		               lda  zpage1
.0f24	d0 02		               bne  nopage
.0f26	e6 fc		               inc  zpage1+1
.0f28	68		nopage         pla
.0f29	28		               plp
.0f2a	60		               rts
.0f2b			deczp1
.0f2b	08		                php
.0f2c	48		                pha
.0f2d	c6 fb		                dec  zpage1
.0f2f	d0 02		                bne  nopage
.0f31	c6 fc		                dec  zpage1+1
.0f33	68		nopage          pla
.0f34	28		                plp
.0f35	60		                rts
.0f36			inczp2
.0f36	08		               php
.0f37	48		               pha
.0f38	e6 fd		               inc  zpage2
.0f3a	a5 fd		               lda  zpage2
.0f3c	d0 02		               bne  nopage
.0f3e	e6 fe		               inc  zpage2+1
.0f40	68		nopage         pla
.0f41	28		               plp
.0f42	60		               rts
.0f43			deczp2
.0f43	08		               php
.0f44	48		               pha
.0f45	a5 fd		               lda  zpage2
.0f47	d0 02		               bne  nopage
.0f49	c6 fe		               dec  zpage2+1
.0f4b	68		nopage         pla
.0f4c	28		               plp
.0f4d	60		               rts
.0f4e			savezp1
.0f4e	08		               php
.0f4f	48		               pha
.0f50	a5 fb		               lda  zpage1
.0f52	8d ca 0f	               sta  zp1
.0f55	a5 fc		               lda  zpage1+1
.0f57	8d cb 0f	               sta  zp1+1
.0f5a	68		               pla
.0f5b	28		               plp
.0f5c	60		               rts
.0f5d			restzp1
.0f5d	08		               php
.0f5e	48		               pha
.0f5f	ad ca 0f	               lda zp1
.0f62	85 fb		               sta zpage1
.0f64	ad cb 0f	               lda zp1+1
.0f67	85 fc		               sta zpage1+1
.0f69	68		               pla
.0f6a	28		               plp
.0f6b	60		               rts
.0f6c			savezp2
.0f6c	08		         php
.0f6d	48		         pha
.0f6e	a5 fd		         lda zpage2
.0f70	8d cc 0f	         sta zp2
.0f73	a5 fe		         lda zpage2+1
.0f75	8d cd 0f	         sta zp2+1
.0f78	68		         pla
.0f79	28		         plp
.0f7a	60		         rts
.0f7b			restzp2
.0f7b	08		                php
.0f7c	48		                pha
.0f7d	ad cc 0f	                lda  zp2
.0f80	85 fd		                sta  zpage2
.0f82	ad cd 0f	                lda  zp2+1
.0f85	85 fe		                sta  zpage2+1
.0f87	68		                pla
.0f88	28		                plp
.0f89	60		                rts
.0f8a			xy2addr
.0f8a	08		                php
.0f8b	48		                pha
.0f8c	8a		                txa
.0f8d	48		                pha
.0f8e	98		                tya
.0f8f	48		                pha
.0f90	ad c5 0f	                lda     addr1+1
.0f93	8d c7 0f	                sta     addr2+1
.0f96	ad c4 0f	                lda     addr1
.0f99	8d c6 0f	                sta     addr2
.0f9c	c0 00		                cpy     #$00
.0f9e	f0 0f		                beq     addx
.0fa0	18		moreline        clc
.0fa1	6d c3 0f	                adc     ymult
.0fa4	90 03		                bcc     norepy
.0fa6	ee c7 0f	                inc     addr2+1
.0fa9	8d c6 0f	norepy          sta     addr2
.0fac	88		                dey
.0fad	d0 f1		                bne     moreline
.0faf	8a		addx            txa
.0fb0	18		                clc
.0fb1	6d c6 0f	                adc     addr2
.0fb4	90 03		                bcc     thatsit
.0fb6	ee c7 0f	                inc     addr2+1
.0fb9	8d c6 0f	thatsit         sta     addr2
.0fbc	68		                pla
.0fbd	a8		                tay
.0fbe	68		                pla
.0fbf	aa		                tax
.0fc0	68		                pla
.0fc1	28		                plp
.0fc2	60		                rts
>0fc3	28		ymult          .byte     40
>0fc4	00 00		addr1          .word     $0000
>0fc6	00 00		addr2          .word     $0000
>0fc8	00 00		bytecnt        .word     $0000
>0fca	00 00		zp1        .word   $0000
>0fcc	00 00		zp2        .word   $0000

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0fce	01		a2hexcol       .byte     1              ; pour aputscxy
>0fcf	00		a2hexbkcol     .byte     %00000000
.0fd0			a2hexpos
>0fd0	00		a2hexpx        .byte     0              ; pour aputsxy
>0fd1	00		a2hexpy        .byte     0
>0fd2	24		a2hexprefix    .byte     "$"            ; pour aputs
>0fd3	00 00		a2hexstr       .word     $00
>0fd5	00 00		               .word     $00
>0fd7	00		               .byte     0              ; 0 end string
>0fd8	30 30 30 30	abin           .null     "00000000"
>0fdc	30 30 30 30 00
>0fe1	20 20 20 00	adec           .null     "   "
.0fe5			putahexfmtxy
.0fe5	20 17 0e	               jsr  push
.0fe8	20 34 10	               jsr  atohex
.0feb	ae d0 0f	               ldx  a2hexpx
.0fee	ac d1 0f	               ldy  a2hexpy
.0ff1	20 40 0d	               jsr  gotoxy
.0ff4	a2 d2		               ldx  #<a2hexprefix
.0ff6	a0 0f		               ldy  #>a2hexprefix
.0ff8	20 26 0d	               jsr  puts
.0ffb	20 56 0e	               jsr  pop
.0ffe	60		               rts
.0fff			putahexfmt
.0fff	20 17 0e	               jsr  push
.1002	20 34 10	               jsr  atohex
.1005	a2 d2		               ldx  #<a2hexprefix
.1007	a0 0f		               ldy  #>a2hexprefix
.1009	20 26 0d	               jsr  puts
.100c	20 56 0e	               jsr  pop
.100f	60		               rts
.1010			putahex
.1010	20 17 0e	               jsr  push
.1013	20 34 10	               jsr  atohex
.1016	a2 d3		               ldx  #<a2hexstr
.1018	a0 0f		               ldy  #>a2hexstr
.101a	20 26 0d	               jsr  puts
.101d	20 56 0e	               jsr  pop
.1020	60		               rts
.1021			nibtohex
.1021	08		               php
.1022	29 0f		               and  #$0f
.1024	f8		               sed
.1025	18		               clc
.1026	69 90		               adc  #$90
.1028	69 40		               adc  #$40
.102a	d8		               cld
.102b	28		               plp
.102c	60		               rts
.102d			lsra4bits
.102d	08		               php
.102e	4a		               lsr
.102f	4a		               lsr
.1030	4a		               lsr
.1031	4a		               lsr
.1032	28		               plp
.1033	60		               rts
.1034			atohex
.1034	08		               php
.1035	48		               pha
.1036	48		               pha
.1037	20 2d 10	               jsr  lsra4bits
.103a	20 21 10	               jsr  nibtohex
.103d	8d d3 0f	               sta  a2hexstr
.1040	68		               pla
.1041	20 21 10	               jsr  nibtohex
.1044	8d d4 0f	               sta  a2hexstr+1
.1047	a9 00		               lda  #$00                ; set end of string
.1049	8d d5 0f	               sta  a2hexstr+2
.104c	68		               pla
.104d	28		               plp
.104e	60		               rts
.104f			xy2hex
.104f	20 17 0e	               jsr  push
.1052	20 34 10	               jsr  atohex
.1055	8a		               txa
.1056	48		               pha
.1057	20 2d 10	               jsr  lsra4bits
.105a	20 21 10	               jsr  nibtohex
.105d	8d d3 0f	               sta  a2hexstr
.1060	68		               pla
.1061	20 21 10	               jsr  nibtohex
.1064	8d d4 0f	               sta  a2hexstr+1
.1067	98		               tya
.1068	48		               pha
.1069	20 2d 10	               jsr  lsra4bits
.106c	20 21 10	               jsr  nibtohex
.106f	8d d5 0f	               sta  a2hexstr+2
.1072	68		               pla
.1073	20 21 10	               jsr  nibtohex
.1076	8d d6 0f	               sta  a2hexstr+3
.1079	a9 00		               lda  #$00                ; 0 ended string
.107b	8d d7 0f	               sta  a2hexstr+4
.107e	20 56 0e	               jsr  pop
.1081			atobin
.1081	20 17 0e	               jsr  push
.1084	a2 08		               ldx  #8
.1086	a0 00		               ldy  #0
.1088	18		               clc
.1089	2a		nextbit        rol
.108a	48		               pha
.108b	69 00		               adc  #$00
.108d	29 01		               and  #$01
.108f	20 21 10	               jsr  nibtohex
.1092	99 d8 0f	               sta  abin,y
.1095	68		               pla
.1096	c8		               iny
.1097	ca		               dex
.1098	d0 ef		               bne  nextbit
.109a	a9 00		               lda  #0
.109c	99 d8 0f	               sta  abin,y
.109f	20 56 0e	               jsr  pull
.10a2	60		               rts
.10a3			putabin
.10a3	20 81 10	               jsr     atobin
.10a6	20 17 0e	               jsr     push
.10a9	a2 d8		               ldx     #<abin
.10ab	a0 0f		               ldy     #>abin
.10ad	20 26 0d	               jsr     puts
.10b0	20 56 0e	               jsr     pop
.10b3	60		               rts
.10b4			printabin
.10b4	20 17 0e	               jsr     push
.10b7	a2 d8		               ldx     #<abin
.10b9	a0 0f		               ldy     #>abin
.10bb	20 26 0d	               jsr     puts
.10be	20 56 0e	               jsr     pop
.10c1	60		               rts
.10c2			putabinfmt
.10c2	08		               php
.10c3	48		               pha
.10c4	a9 25		               lda     #"%"
.10c6	20 20 0d	               jsr     putch
.10c9	68		               pla
.10ca	20 a3 10	               jsr     putabin
.10cd	28		               plp
.10ce	60		               rts
.10cf			putabinxy
.10cf	20 40 0d	               jsr     gotoxy
.10d2	20 a3 10	               jsr     putabin
.10d5	60		               rts
.10d6			putabinfmtxy
.10d6	20 40 0d	               jsr     gotoxy
.10d9	20 c2 10	               jsr     putabinfmt
.10dc	60		               rts
.10dd			atodec
.10dd	20 17 0e	               jsr  push
.10e0	f8		               sed
.10e1	aa		               tax
.10e2	a0 00		               ldy  #$00
.10e4	a9 00		               lda  #$00
.10e6	18		nextbit        clc
.10e7	69 01		               adc  #$01
.10e9	90 01		               bcc  decx
.10eb	c8		               iny
.10ec	ca		decx           dex
.10ed	d0 f7		               bne  nextbit
.10ef	48		               pha
.10f0	98		               tya
.10f1	20 21 10	               jsr  nibtohex
.10f4	8d e1 0f	               sta  adec
.10f7	68		               pla
.10f8	48		               pha
.10f9	20 21 10	               jsr  nibtohex
.10fc	8d e3 0f	               sta  adec+2
.10ff	68		               pla
.1100	6a		               ror
.1101	6a		               ror
.1102	6a		               ror
.1103	6a		               ror
.1104	20 21 10	               jsr  nibtohex
.1107	8d e2 0f	               sta  adec+1
.110a	d8		               cld
.110b	20 56 0e	               jsr  pull
.110e	60		               rts
>110f	00 00 00	buffer         .byte     0,0,0
.1112			putadec
.1112	20 17 0e	               jsr  push
.1115	20 dd 10	               jsr  atodec
.1118	a2 e1		               ldx  #<adec
.111a	a0 0f		               ldy  #>adec+1
.111c	20 26 0d	               jsr  puts
.111f	20 56 0e	               jsr  pop
.1122	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>1123	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1127	00 00 00 00 00 00 00 00 00 0d 00 00
>1133	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1137	00 00 00 00 00 00 00 00 00 00 00 00
>1143	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1147	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1153	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1157	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1163	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1167	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1173	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1177	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1183	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1187	00 00 00 00 00 00 00 00 00 00 00 00
>1193	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1197	00 00 00 00 00 00 00 00 00 00 00 00
>11a3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>11a7	00 00 00 00 00 00 00 00 00 00 00 00
>11b3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>11b7	00 00 00 00 00 00 00 00 00 00 00 00
>11c3	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>11c7	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>11d3	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>11d7	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>11e3	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>11e7	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>11f3	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>11f7	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1203	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1207	00 00 00 00 00 00 00 00 00 00 00 00
>1213	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1217	00 00 00 00 00 00 00 00 00 00 00 00
.1223			waitstop
.1223	20 17 0e	               jsr  push
.1226	20 ed f6	wait           jsr  k_stop
.1229	d0 fb		               bne  wait
.122b	20 56 0e	               jsr  pop
.122e	60		               rts
.122f			anykey
.122f	08		               php
.1230	48		               pha
.1231	a5 cb		nokey          lda 203
.1233	c9 40		               cmp #64
.1235	f0 fa		               beq nokey
.1237	20 3d 12	               jsr releasekey
.123a	68		               pla
.123b	28		               plp
.123c	60		               rts
.123d			releasekey
.123d	08		               php
.123e	48		               pha
.123f	a5 cb		keypressed     lda 203
.1241	c9 40		               cmp #64
.1243	d0 fa		               bne keypressed
.1245	68		               pla
.1246	28		               plp
.1247	60		               rts
.1248			getkey
.1248	20 e4 ff	again          jsr  getin
.124b	c9 00		               cmp  #0
.124d	f0 f9		               beq  again
.124f	60		               rts
.1250			kbflushbuff
.1250	08		               php
.1251	48		               pha
.1252	20 e4 ff	again          jsr  getin
.1255	c9 00		               cmp  #0
.1257	d0 f9		               bne  again
.1259	68		               pla
.125a	28		               plp
.125b	60		               rts
.125c			waitkey
.125c	20 17 0e	               jsr  push
.125f	8d ad 12	               sta  thekey
.1262	20 e4 ff	nope           jsr  getin
.1265	20 d2 ff	               jsr  chrout
.1268	cd ad 12	               cmp  thekey
.126b	d0 f5		               bne  nope
.126d	20 d2 ff	               jsr  chrout
.1270	20 56 0e	               jsr  pop
.1273	60		               rts
.1274			waitspace
.1274	20 17 0e	               jsr  push
.1277	a9 7f		wait           lda  #$7f  ;%01111111
.1279	8d 00 dc	               sta  $dc00
.127c	ad 01 dc	               lda  $dc01
.127f	29 10		               and  #$10  ;mask %00010000
.1281	d0 f4		               bne  wait
.1283	20 56 0e	               jsr  pop
.1286			waitsstop
.1286	20 17 0e	               jsr  push
.1289	20 ed f6	wait           jsr  k_stop  ;%01111111
.128c	d0 fb		               bne  wait
.128e	20 56 0e	               jsr  pop
.1291			waitreturn
.1291	20 17 0e	               jsr  push
.1294	ad ae 12	               lda  thecount
.1297	8d 00 04	               sta  scrnram
.129a	a9 02		               lda  #$02
.129c	8d 00 d8	               sta  colorram
.129f	20 e4 ff	nope           jsr  getin
.12a2	c9 0d		nohex          cmp  #$0d
.12a4	d0 f9		               bne  nope
.12a6	ee ae 12	               inc  thecount
.12a9	20 56 0e	               jsr  pop
.12ac	60		               rts
>12ad	00		thekey         .byte   0
>12ae	01		thecount       .byte   $01

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.12af			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.12af	08		                php
.12b0	8d 70 14	                sta  rega
.12b3	68		                pla
.12b4	8d 73 14	                sta  regp
.12b7	8e 71 14	                stx  regx
.12ba	8c 72 14	                sty  regy
.12bd	ba		                tsx
.12be	8e 74 14	                stx  regs
.12c1	68		                pla
.12c2	8d 77 14	                sta  regpcl
.12c5	8d 78 14	                sta  regpcl2
.12c8	68		                pla
.12c9	8d 75 14	                sta  regpch
.12cc	8d 76 14	                sta  regpch2
.12cf	ad 70 14	                lda  rega
.12d2	48		                pha
.12d3	20 21 10	                jsr  nibtohex
.12d6	8d 1a 14	                sta  vala+1
.12d9	68		                pla
.12da	20 2d 10	                jsr  lsra4bits
.12dd	20 21 10	                jsr  nibtohex
.12e0	8d 19 14	                sta  vala
.12e3	ad 72 14	                lda  regy
.12e6	48		                pha
.12e7	20 21 10	                jsr  nibtohex
.12ea	8d 2e 14	                sta  valy+1
.12ed	68		                pla
.12ee	20 2d 10	                jsr  lsra4bits
.12f1	20 21 10	                jsr  nibtohex
.12f4	8d 2d 14	                sta  valy
.12f7	ad 71 14	                lda  regx
.12fa	48		                pha
.12fb	20 21 10	                jsr  nibtohex
.12fe	8d 24 14	                sta  valx+1
.1301	68		                pla
.1302	20 2d 10	                jsr  lsra4bits
.1305	20 21 10	                jsr  nibtohex
.1308	8d 23 14	                sta  valx
.130b	ad 73 14	                lda  regp
.130e	48		                pha
.130f	20 21 10	                jsr  nibtohex
.1312	8d 38 14	                sta  valp+1
.1315	68		                pla
.1316	20 2d 10	                jsr  lsra4bits
.1319	20 21 10	                jsr  nibtohex
.131c	8d 37 14	                sta  valp
.131f	ad 74 14	                lda  regs
.1322	48		                pha
.1323	20 21 10	                jsr  nibtohex
.1326	8d 42 14	                sta  vals+1
.1329	68		                pla
.132a	20 2d 10	                jsr  lsra4bits
.132d	20 21 10	                jsr  nibtohex
.1330	8d 41 14	                sta  vals
.1333	18		                clc
.1334	ad 78 14	                lda regpcl2
.1337	69 01		                adc #$01
.1339	8d 78 14	                sta regpcl2
.133c	ad 78 14	                lda regpcl2
.133f	d0 03		                bne noreport
.1341	ee 76 14	                inc regpch2
.1344	ad 76 14	    noreport    lda regpch2
.1347	48		                pha
.1348	20 21 10	                jsr  nibtohex
.134b	8d 4d 14	                sta  valpch+1
.134e	68		                pla
.134f	20 2d 10	                jsr  lsra4bits
.1352	20 21 10	                jsr  nibtohex
.1355	8d 4c 14	                sta  valpch
.1358	ad 78 14	                lda  regpcl2
.135b	48		                pha
.135c	20 21 10	                jsr  nibtohex
.135f	8d 4f 14	                sta  valpcl+1
.1362	68		                pla
.1363	20 2d 10	                jsr  lsra4bits
.1366	20 21 10	                jsr  nibtohex
.1369	8d 4e 14	                sta  valpcl
.136c	a5 fb		                lda  zpage1
.136e	48		                pha
.136f	20 21 10	                jsr  nibtohex
.1372	8d 5d 14	                sta  valz1l
.1375	68		                pla
.1376	20 2d 10	                jsr  lsra4bits
.1379	20 21 10	                jsr  nibtohex
.137c	8d 5e 14	                sta  valz1l+1
.137f	a5 fc		                lda  zpage1+1
.1381	48		                pha
.1382	20 21 10	                jsr  nibtohex
.1385	8d 5b 14	                sta  valz1h
.1388	68		                pla
.1389	20 2d 10	                jsr  lsra4bits
.138c	20 21 10	                jsr  nibtohex
.138f	8d 5c 14	                sta  valz1h+1
.1392	a5 fd		                lda  zpage2
.1394	48		                pha
.1395	20 21 10	                jsr  nibtohex
.1398	8d 6c 14	                sta  valz2l
.139b	68		                pla
.139c	20 2d 10	                jsr  lsra4bits
.139f	20 21 10	                jsr  nibtohex
.13a2	8d 6d 14	                sta  valz2l+1
.13a5	a5 fe		                lda  zpage2+1
.13a7	48		                pha
.13a8	20 21 10	                jsr  nibtohex
.13ab	8d 6a 14	                sta  valz2h
.13ae	68		                pla
.13af	20 2d 10	                jsr  lsra4bits
.13b2	20 21 10	                jsr  nibtohex
.13b5	8d 6b 14	                sta  valz2h+1
.13b8	20 07 0e	                jsr  setinverse
.13bb	78		                sei
.13bc	a2 12		                ldx  #<srega
.13be	a0 14		                ldy  #>srega+1
.13c0	20 af 0d	                jsr  putscxy
.13c3	a2 1c		                ldx  #<sregx
.13c5	a0 14		                ldy  #>sregx+1
.13c7	20 af 0d	                jsr  putscxy
.13ca	a2 26		                ldx  #<sregy
.13cc	a0 14		                ldy  #>sregy+1
.13ce	20 af 0d	                jsr  putscxy
.13d1	a2 30		                ldx  #<sregp
.13d3	a0 14		                ldy  #>sregp+1
.13d5	20 af 0d	                jsr  putscxy
.13d8	a2 3a		                ldx  #<sregs
.13da	a0 14		                ldy  #>sregs+1
.13dc	20 af 0d	                jsr  putscxy
.13df	a2 44		                ldx  #<sregpc
.13e1	a0 14		                ldy  #>sregpc+1
.13e3	20 af 0d	                jsr  putscxy
.13e6	a2 52		                ldx  #<sregz1
.13e8	a0 14		                ldy  #>sregz1+1
.13ea	20 af 0d	                jsr  putscxy
.13ed	a2 61		                ldx  #<sregz2
.13ef	a0 14		                ldy  #>sregz2+1
.13f1	20 af 0d	                jsr  putscxy
.13f4	58		                cli
.13f5	20 0f 0e	                jsr  clrinverse
.13f8	ad 75 14	                lda  regpch
.13fb	48		                pha
.13fc	ad 77 14	                lda  regpcl
.13ff	48		                pha
.1400	ac 72 14	                ldy  regy
.1403	ae 71 14	                ldx  regx
.1406	ad 73 14	                lda  regp
.1409	48		                pha
.140a	ad 70 14	                lda  rega
.140d	28		                plp
.140e	20 2f 12	    jsr anykey
.1411	60		                rts
>1412	01 00 17	srega   .byte   colr,coln,line
>1415	20 41 3a 24	        .text   ' a:$' ;4,24
>1419	00 00 00	vala    .byte   0,0,0
>141c	01 06 17	sregx   .byte   colr,coln+6,line
>141f	20 58 3a 24	        .text   ' x:$' ;4,24
>1423	00 00 00	valx    .byte   0,0,0
>1426	01 0c 17	sregy   .byte   colr,coln+12,line
>1429	20 59 3a 24	        .text   ' y:$' ;4,24
>142d	00 00 00	valy    .byte   0,0,0
>1430	01 12 17	sregp   .byte   colr,coln+18,line
>1433	20 50 3a 24	        .text   ' p:$' ;4,24
>1437	00 00 00	valp    .byte   0,0,0
>143a	01 18 17	sregs   .byte   colr,coln+24,line
>143d	20 53 3a 24	        .text   ' s:$' ;4,24
>1441	00 00 00	vals    .byte   0,0,0
>1444	01 1e 17	sregpc  .byte   colr,coln+30,line
>1447	20 50 43 3a	        .text   ' pc:$' ;4,24
>144b	24
>144c	00 00		valpch  .byte   0,0
>144e	00 00 20 00	valpcl  .byte   0,0,32,0
>1452	01 03 18	sregz1  .byte   colr,coln+3,line+1
>1455	20 5a 50 31	        .text   ' zp1:$' ;4,24
>1459	3a 24
>145b	00 00		valz1h  .byte   0,0
>145d	00 00 20 00	valz1l  .byte   0,0,32,0
>1461	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>1464	20 5a 50 32	        .text   ' zp2:$' ;4,24
>1468	3a 24
>146a	00 00		valz2h  .byte   0,0
>146c	00 00 20 00	valz2l  .byte   0,0,32,0
>1470	00		rega    .byte   0
>1471	00		regx    .byte   0
>1472	00		regy    .byte   0
>1473	00		regp    .byte   0
>1474	00		regs    .byte   0
>1475	00		regpch  .byte   0
>1476	00		regpch2 .byte   0
>1477	00		regpcl  .byte   0
>1478	00		regpcl2 .byte   0
>1479	00		vzp1h   .byte   0
>147a	00		vzp1l   .byte   0
>147b	00		vzp2h   .byte   0
>147c	00		vzp2l   .byte   0

;******  Return to file: essai01.asm


;******  End of listing

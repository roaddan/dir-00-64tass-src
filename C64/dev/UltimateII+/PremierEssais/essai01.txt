
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L essai01.txt -o essai01.prg essai01.asm
; Thu Apr  3 10:42:42 2025

;Offset	;Hex		;Source

;******  Processing input file: essai01.asm

="20250402-233301"	                Version = "20250402-233301"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: essai01.asm

.0854			main
.0854	20 8e 0b	               jsr scrmaninit
.0857	08		               php
.0858	48		               pha
.0859	a9 0e		               lda  #14
.085b	8d ad 0b	               sta  characterset
.085e	20 d2 ff	               jsr  $ffd2
.0861	68		               pla
.0862	28		               plp
.0863	08		               php
.0864	48		               pha
.0865	a9 08		               lda  #$08
.0867	20 d2 ff	               jsr  $ffd2
.086a	68		               pla
.086b	28		               plp
.086c	20 1a 09	               jsr essai01
.086f	08		               php
.0870	48		               pha
.0871	a9 09		               lda  #$09
.0873	20 d2 ff	               jsr  $ffd2
.0876	68		               pla
.0877	28		               plp
.0878	08		               php
.0879	48		               pha
.087a	a9 8e		               lda  #b_uppercase
.087c	8d ad 0b	               sta  characterset
.087f	20 d2 ff	               jsr  $ffd2
.0882	68		               pla
.0883	28		               plp
.0884	20 ae 0b	               jsr  cls
.0887	20 bc 0c	               jsr  push
.088a	48		               pha
.088b	a9 0c		               lda  #cgrismoyen
.088d	8d 20 d0	               sta  $d020
.0890	68		               pla
.0891	48		               pha
.0892	a9 0b		               lda  #cgrisfonce
.0894	8d 21 d0	               sta  $d021
.0897	68		               pla
.0898	48		               pha
.0899	a9 0f		               lda  #cgrispale
.089b	8d 86 02	               sta  bascol
.089e	68		               pla
.089f	20 fb 0c	               jsr  pull
.08a2			aide
.08a2	08		               php
.08a3	48		               pha
.08a4	a9 0e		               lda  #14
.08a6	8d ad 0b	               sta  characterset
.08a9	20 d2 ff	               jsr  $ffd2
.08ac	68		               pla
.08ad	28		               plp
.08ae	20 ae 0b	               jsr cls
.08b1	20 bc 0c	               jsr  push
.08b4	a2 d1		               ldx  #<line
.08b6	a0 0a		               ldy  #>line
.08b8	20 cb 0b	               jsr  puts
.08bb	20 fb 0c	               jsr  pull
.08be	20 bc 0c	               jsr  push
.08c1	a2 3a		               ldx  #<headera
.08c3	a0 09		               ldy  #>headera
.08c5	20 cb 0b	               jsr  puts
.08c8	20 fb 0c	               jsr  pull
.08cb	20 bc 0c	               jsr  push
.08ce	a2 ae		               ldx  #<headerb
.08d0	a0 09		               ldy  #>headerb
.08d2	20 cb 0b	               jsr  puts
.08d5	20 fb 0c	               jsr  pull
.08d8	20 bc 0c	               jsr  push
.08db	a2 d1		               ldx  #<line
.08dd	a0 0a		               ldy  #>line
.08df	20 cb 0b	               jsr  puts
.08e2	20 fb 0c	               jsr  pull
.08e5	20 bc 0c	               jsr  push
.08e8	a2 d1		               ldx  #<line
.08ea	a0 0a		               ldy  #>line
.08ec	20 cb 0b	               jsr  puts
.08ef	20 fb 0c	               jsr  pull
.08f2	20 bc 0c	               jsr  push
.08f5	a2 07		               ldx  #<shortcuts
.08f7	a0 0a		               ldy  #>shortcuts
.08f9	20 cb 0b	               jsr  puts
.08fc	20 fb 0c	               jsr  pull
.08ff	20 bc 0c	               jsr  push
.0902	a2 81		               ldx  #<aidetext
.0904	a0 0a		               ldy  #>aidetext
.0906	20 cb 0b	               jsr  puts
.0909	20 fb 0c	               jsr  pull
.090c	20 bc 0c	               jsr  push
.090f	a2 d1		               ldx  #<line
.0911	a0 0a		               ldy  #>line
.0913	20 cb 0b	               jsr  puts
.0916	20 fb 0c	               jsr  pull
.0919	60		               rts
.091a			essai01
.091a	48		               pha
.091b	20 ae 0b	               jsr  cls
.091e	20 bc 0c	               jsr  push
.0921	a2 fa		               ldx  #<uiistatustxt
.0923	a0 0a		               ldy  #>uiistatustxt
.0925	20 54 0c	               jsr  putscxy
.0928	20 fb 0c	               jsr  pull
.092b	20 7e 0b	               jsr  waituiinotbusy
.092e	ad 1d df	               lda  uiiidenreg
.0931	20 a4 0e	               jsr  putahexfmt
.0934	20 d4 10	               jsr anykey
.0937	68		               pla
.0938	60		               rts
>0939	00		byte           .byte 0

;******  Processing file: ./strings_fr.asm

.093a			headera
>093a	20 31 35 34	               .text          " 1541 Ultimate II + Gestion de fichiers"
>093e	31 20 d5 4c 54 49 4d 41 54 45 20 c9 c9 20 2b 20
>094e	c7 45 53 54 49 4f 4e 20 44 45 20 46 49 43 48 49
>095e	45 52 53
>0961	0d		               .byte     $0d
>0962	20 c3 41 52	               .text          " Cartouche et API par Gideon Zweijtzer."
>0966	54 4f 55 43 48 45 20 45 54 20 c1 d0 c9 20 50 41
>0976	52 20 c7 49 44 45 4f 4e 20 da 57 45 49 4a 54 5a
>0986	45 52 2e
>0989	0d		               .byte     $0d
>098a	20 20 20 20	               .text          "     API Version 1.0, 1er Feb 2013"
>098e	20 c1 d0 c9 20 d6 45 52 53 49 4f 4e 20 31 2e 30
>099e	2c 20 31 45 52 20 c6 45 42 20 32 30 31 33
>09ac	0d 00		               .byte     $0d,0
>09ae	20 20 20 20	headerb        .text          "               essai01 "
>09b2	20 20 20 20 20 20 20 20 20 20 20 45 53 53 41 49
>09c2	30 31 20
>09c5	0d		               .byte     $0d
>09c6	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>09ca	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>09da	45 4c 20 cc 41 46 52 41 4e 43 45
>09e5	0d		               .byte     $0d
>09e6	20 20 20 20	               .text   format("       Version: %s",Version)
>09ea	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>09fa	30 34 30 32 2d 32 33 33 33 30 31
>0a05	0d 00		               .byte     $0d,0
>0a07	0d		shortcuts      .byte     $0d
>0a08	91 91		               .byte     ucurkey,ucurkey
>0a0a	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>0a0e	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>0a12	1d
>0a13	20 d2 20 c1	               .text          " R A C C O U R C I S "
>0a17	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>0a27	20
>0a28	0d		               .byte     $0d
>0a29	20 45 53 53	               .text   format(" essai01..: SYS%05d ($%04X)",main, main)
>0a2d	41 49 30 31 2e 2e 3a 20 d3 d9 d3 30 32 31 33 32
>0a3d	20 28 24 30 38 35 34 29
>0a45	0d		               .byte     $0d
>0a46	20 41 49 44	               .text   format(" aide.....: SYS%05d ($%04X)",aide, aide)
>0a4a	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 32 31 30
>0a5a	20 28 24 30 38 c1 32 29
>0a62	0d		               .byte     $0d
>0a63	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0a67	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 39 39 30
>0a77	20 28 24 30 c2 c1 c5 29
>0a7f	0d 00		               .byte     $0d,0
>0a81	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d ($%04X)",essai01, essai01)
>0a85	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 32 33 33 30
>0a95	20 28 24 30 39 31 c1 29
>0a9d	0d 0d		               .byte     $0d, $0d
>0a9f	20 20 20 20	               .text   format("    ex.: SYS%05d",essai01)
>0aa3	45 58 2e 3a 20 d3 d9 d3 30 32 33 33 30
>0ab0	0d		               .byte     $0d
>0ab1	20 20 20 20	               .text   format("    for i=0to100:SYS%05d:next",essai01)
>0ab5	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0ac5	30 32 33 33 30 3a 4e 45 58 54
>0acf	0d 00		               .byte     $0d,0
>0ad1	20 c0 c0 c0	line           .byte     $20,192,192,192,192,192,192,192,192,192
>0ad5	c0 c0 c0 c0 c0 c0
>0adb	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0adf	c0 c0 c0 c0 c0 c0
>0ae5	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0ae9	c0 c0 c0 c0 c0 c0
>0aef	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192
>0af3	c0 c0 c0 c0 c0
>0af8	0d 00		               .byte     $0d,0
>0afa	01 01 02	uiistatustxt   .byte     1,1,2
>0afd	d5 4c 54 49	               .null     "Ultimate II + status: "
>0b01	4d 41 54 45 20 c9 c9 20 2b 20 53 54 41 54 55 53
>0b11	3a 20 00
>0b14	50 52 45 53	uiiconnected   .null     "present"
>0b18	45 4e 54 00
>0b1c	41 42 53 45	uiiunconnected .null     "absent"
>0b20	4e 54 00

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm

=$df1c			uiictrlreg	=	$df1c
=$df1c			uiistatreg	=	$df1c
=$df1d			uiicomddta	=	$df1d
=$df1d			uiiidenreg	=	$df1d
=$df1e			uiirspdtaa	=	$df1e
=$df1e			uiistatdta	=	$df1e
=$00			uiiidle		=	$00
=$01			uiicmdbusy	=	$01
=$02			uiidatalast	=	$02
=$03			uiidatamore	=	$03
=$01			uii_identify	=	$01	; $01 $01 -> Read Id String as "ULTIMATE-II DOS V1.0"
=$02			uii_file_open	=	$02	; Open file for ...
=$01			uii_fa_read	=	$01	; $01 $02 $01 <filename> -> ... reading.
=$02			uii_fa_write	=	$02	; $01 $02 $02 <filename> -> ... writing.
=$04			uii_fa_new	=	$04	; $01 $02 $04 <filename> -> ... creating/writing.
=$08			uii_fa_ovwri	=	$08	; $01 $02 $08 <filename> -> ... overwriting.
=$03			uii_file_close	=	$03	; $01 $03 -> close opened file.
=$04			uii_read_data	= 	$04  ; $01 $04 [len_lo] [len_hi]
=$05			uii_writ_data	=	$05	; $01 $05 [dummy] [dummy] [data...]
=$06			uii_file_seek	=	$06	; $01 $06 [posl] [posml] [posmh] [posh].
=$07			uii_file_info 	=	$07	; $01 $07 -> returns current open file info.
=$08			uii_file_stat  = 	$08	; $01 $08 <filename> -> returns file info.
=$09			uii_file_del	=	$09	; $01 $09 <filename> -> delete/scratch file.
=$0a			uii_file_ren	=	$0a	; $01 $0a <filename> $00 <newname>
=$0b			uii_file_copy	=	$0b	; $01 $0b <source> $00 <destination>
=$11			uii_dir_change = 	$11	; $01 $11 <directory name>
=$12			uii_dir_pwd	=	$12	; $01 $12
=$13			uii_dir_open	=	$13	; $01 $13
=$14			uii_dir_read	=	$14  ; $01 $14
=$15			uii_dir_cp_ui	=	$15	; $01 $15 -> makes UI current path as API current path.
=$16			uii_dir_mkdir	=	$16	; $01 $16 <dirname> -> Create directory under current.
=$17			uii_dir_home	=	$17	; $01 $17 -> makes UI home path as API current path.
=$21			uii_reu_load	=	$21
=$22			uii_reu_save	=	$22
=$23			uii_dsk_mount	=	$23	; $01 $23 <id> <filename>
=$24			uii_dsk_umount = 	$24	; $01 $24 <id>
=$25			uii_dsk_swap 	= 	$25	; $01 $25 <id>
=$26			uii_time_get	=	$26	; $01 $26 [id] -> returns current RTC time/date.
=$27			uii_time_set	=	$27	; $01 $27 <Y> <M> <D> <H> <M> <S>
=$f0			uii_dos_echo	= 	$f0	; $01 $f0
.0b23			isuiibusy
.0b23	48					pha	; Bit 0
.0b24	18					clc
.0b25	ad 1c df				lda	uiistatreg
.0b28	29 01					and	#%00000001
.0b2a	c9 01					cmp	#%00000001
.0b2c	d0 01					bne  out
.0b2e	38					sec
.0b2f	68		out			pla
.0b30	60					rts
.0b31			isuiidataacc
.0b31	48					pha ; Bit 1
.0b32	18					clc
.0b33	ad 1c df				lda	uiistatreg
.0b36	29 04					and	#%00000100
.0b38	c9 04					cmp	#%00000100
.0b3a	d0 01					bne	out
.0b3c	38					sec
.0b3d	68		out			pla
.0b3e	60					rts
.0b3f			isuiiabort
.0b3f	48					pha ; Bit 2
.0b40	18					clc
.0b41	ad 1c df				lda	uiistatreg
.0b44	29 04					and	#%00000100
.0b46	c9 04					cmp	#%00000100
.0b48	d0 01					bne	out
.0b4a	38					sec
.0b4b	68		out			pla
.0b4c	60					rts
.0b4d			isuiierror
.0b4d	48					pha ; Bit 3
.0b4e	ad 1c df				lda	uiistatreg
.0b51	29 08					and	#%00001000
.0b53	c9 08					cmp	#%00001000
.0b55	d0 01					bne	out
.0b57	38					sec
.0b58	68		out			pla
.0b59	60					rts
.0b5a			getuiistate
.0b5a	08					php	; Bita 5,4
.0b5b	ad 1c df				lda	uiistatreg
.0b5e	4a					lsr
.0b5f	4a					lsr
.0b60	4a					lsr
.0b61	4a					lsr
.0b62	29 03					and	#%00000011
.0b64	28					plp
.0b65	60					rts
.0b66			waituiiidle
.0b66	08					php
.0b67	48					pha
.0b68	20 5a 0b	notyet		jsr	getuiistate
.0b6b	c9 00					cmp  #$00
.0b6d	d0 f9					bne	notyet
.0b6f	68					pla
.0b70	28					plp
.0b71	60					rts
.0b72			isuiimoredata
.0b72	08					php
.0b73	48					pha
.0b74	20 5a 0b	notyet		jsr	getuiistate
.0b77	c9 00					cmp  #$00
.0b79	d0 f9					bne	notyet
.0b7b	68					pla
.0b7c	28					plp
.0b7d	60					rts
.0b7e			waituiinotbusy
.0b7e	08					php
.0b7f	20 23 0b	wait			jsr	isuiibusy
.0b82	b0 fb					bcs	wait
.0b84	28					plp
.0b85	60					rts
.0b86			uiigettime

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0b86	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0b8a	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0b8e			libtart

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0b8e			scrmaninit
.0b8e	20 bc 0c	               jsr  push
.0b91	a9 06		               lda  #vbleu
.0b93	8d 21 d0	               sta  vicbackcol
.0b96	a9 05		               lda  #vvert
.0b98	8d 20 d0	               sta  vicbordcol
.0b9b	a9 01		               lda  #vblanc
.0b9d	8d 86 02	               sta  bascol
.0ba0	ad 00 04	               lda  scrnram
.0ba3	8d 00 04	               sta  scrnram
.0ba6	20 ae 0b	               jsr  cls
.0ba9	20 fb 0c	               jsr  pop
.0bac	60		               rts
>0bad	8e		characterset   .byte b_uppercase
.0bae			cls
.0bae	08		               php
.0baf	48		               pha
.0bb0	a9 93		               lda  #$93
.0bb2	20 c5 0b	               jsr  putch
.0bb5	68		               pla
.0bb6	28		               plp
.0bb7	60		               rts
.0bb8			putnch
.0bb8	08		               php
.0bb9	e0 00		               cpx  #$00
.0bbb	f0 06		               beq  out
.0bbd	20 d2 ff	again          jsr  $ffd2
.0bc0	ca		               dex
.0bc1	d0 fa		               bne  again
.0bc3	28		out            plp
.0bc4	60		               rts
.0bc5			putch
.0bc5	08		               php
.0bc6	20 d2 ff	               jsr  $ffd2
.0bc9	28		               plp
.0bca	60		               rts
.0bcb			puts
.0bcb	20 bc 0c	               jsr  push
.0bce	86 fb		               stx  zpage1
.0bd0	84 fc		               sty  zpage1+1
.0bd2	a0 00		               ldy  #0
.0bd4	b1 fb		next           lda  (zpage1),y
.0bd6	f0 09		               beq  exit
.0bd8	20 c5 0b	               jsr  putch
.0bdb	20 c3 0d	               jsr  inczp1
.0bde	4c d4 0b	               jmp  next
.0be1	20 fb 0c	exit           jsr  pop
.0be4	60		               rts
.0be5			gotoxy
.0be5	08		               php
.0be6	18		               clc
.0be7	8a		               txa
.0be8	48		               pha
.0be9	98		               tya
.0bea	aa		               tax
.0beb	68		               pla
.0bec	a8		               tay
.0bed	20 f0 ff	               jsr  kplot
.0bf0	28		               plp
.0bf1	60		               rts
.0bf2			cursor
=$0286			bascol    =    $0286
.0bf2	08		               php
.0bf3	48		               pha
.0bf4	90 12		               bcc  restore
.0bf6	20 f0 ff	               jsr  kplot
.0bf9	8c 1a 0c	               sty  cx
.0bfc	8e 1b 0c	               stx  cy
.0bff	ad 86 02	               lda  bascol
.0c02	8d 1c 0c	               sta  bcol
.0c05	4c 17 0c	               jmp  out
.0c08	ae 1b 0c	restore        ldx  cy
.0c0b	ac 1a 0c	               ldy  cx
.0c0e	20 f0 ff	               jsr  kplot
.0c11	ad 1c 0c	               lda  bcol
.0c14	8d 86 02	               sta  bascol
.0c17	68		out            pla
.0c18	28		               plp
.0c19	60		               rts
>0c1a	00		cx   .byte     $00
>0c1b	00		cy   .byte     $00
>0c1c	00		bcol .byte     $00
.0c1d			cursave
.0c1d	08		               php
.0c1e	38		               sec
.0c1f	20 f2 0b	               jsr  cursor
.0c22	28		               plp
.0c23	60		               rts
.0c24			curput
.0c24	08		               php
.0c25	18		               clc
.0c26	20 f2 0b	               jsr  cursor
.0c29	28		               plp
.0c2a	60		               rts
.0c2b			putsxy
.0c2b	20 bc 0c	               jsr  push
.0c2e	86 fb		               stx  zpage1
.0c30	84 fc		               sty  zpage1+1
.0c32	a0 00		               ldy  #$00
.0c34	b1 fb		               lda  (zpage1),y
.0c36	aa		               tax
.0c37	20 c3 0d	               jsr  inczp1
.0c3a	b1 fb		               lda  (zpage1),y
.0c3c	a8		               tay
.0c3d	20 e5 0b	               jsr  gotoxy
.0c40	20 c3 0d	               jsr  inczp1
.0c43	a6 fb		               ldx  zpage1
.0c45	a4 fc		               ldy  zpage1+1
.0c47	20 cb 0b	               jsr  puts
.0c4a	20 fb 0c	               jsr  pop
.0c4d	60		               rts
>0c4e	00 00		straddr   .word     $00
>0c50	00		px        .byte     $00
>0c51	00		py        .byte     $00
>0c52	00 00		zp1       .word     $00
.0c54			putscxy
.0c54	20 bc 0c	               jsr  push
.0c57	84 fc		               sty  zpage1+1
.0c59	86 fb		               stx  zpage1
.0c5b	ad 86 02	               lda  bascol
.0c5e	8d 7e 0c	               sta  bc
.0c61	a0 00		               ldy #$00
.0c63	b1 fb		               lda  (zpage1),y
.0c65	8d 86 02	               sta  bascol
.0c68	20 c3 0d	               jsr  inczp1
.0c6b	a6 fb		               ldx  zpage1
.0c6d	a4 fc		               ldy  zpage1+1
.0c6f	20 2b 0c	               jsr  putsxy
.0c72	ad 7e 0c	               lda  bc
.0c75	8d 86 02	               sta  bascol
.0c78	20 fb 0c	               jsr  pop
.0c7b	60		               rts
>0c7c	00 00		straddr  .word      $00
>0c7e	00		bc       .byte      $00
>0c7f	00 00		zp1      .word      $00
.0c81			putrahex
.0c81	08		               php
.0c82	48		               pha
.0c83	20 d9 0e	               jsr  atohex
.0c86	a9 78		               lda  #<a2hexstr
.0c88	a0 0e		               ldy  #>a2hexstr
.0c8a	20 cb 0b	               jsr  puts
.0c8d	68		               pla
.0c8e	28		               plp
.0c8f	60		               rts
.0c90			kputrahexxy
.0c90			bputrahexxy
.0c90			putrahexxy
.0c90	08		               php
.0c91	20 d9 0e	               jsr  atohex
.0c94	a9 75		               lda  #<a2hexpos
.0c96	a0 0e		               ldy  #>a2hexpos
.0c98	20 2b 0c	               jsr  putsxy
.0c9b	68		               pla
.0c9c	28		               plp
.0c9d	60		               rts
.0c9e			putrahexcxy
.0c9e	08		               php
.0c9f	20 d9 0e	               jsr  atohex
.0ca2	a9 75		               lda  #<a2hexpos
.0ca4	a0 0e		               ldy  #>a2hexpos
.0ca6	20 54 0c	               jsr  putscxy
.0ca9	68		               pla
.0caa	28		               plp
.0cab	60		               rts
.0cac			setinverse
.0cac	48		               pha
.0cad	a9 12		               lda  #$12
.0caf	20 d2 ff	               jsr  $ffd2
.0cb2	68		               pla
.0cb3	60		               rts
.0cb4			clrinverse
.0cb4	48		               pha
.0cb5	a9 92		               lda  #$92
.0cb7	20 d2 ff	               jsr  $ffd2
.0cba	68		               pla
.0cbb	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.0cbc			push
.0cbc	08		          php            ; stack : flg, pcl, pch
.0cbd	78		          sei
.0cbe	8d f8 0c	          sta  ra        ; save a
.0cc1	68		          pla            ; stack : pcl, pch
.0cc2	8d f7 0c	          sta  rp        ; save rp
.0cc5	68		          pla            ; stack : pch
.0cc6	8d f9 0c	          sta  pc        ; save pcl
.0cc9	68		          pla            ; stack : -
.0cca	8d fa 0c	          sta  pc+1      ; save pch
.0ccd	a5 fb		          lda  zpage1    ; get zpage1 low byte
.0ccf	48		          pha            ; stack : zp1l
.0cd0	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.0cd2	48		          pha            ; stack : zp1h, zp1l
.0cd3	a5 fd		          lda  zpage2    ; get zpage2 low byte
.0cd5	48		          pha            ; stack : zp2l, zp1h, zp1l
.0cd6	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.0cd8	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.0cd9	ad f7 0c	          lda  rp        ; get rp
.0cdc	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.0cdd	ad f8 0c	          lda  ra        ; get a
.0ce0	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0ce1	8a		          txa            ; get x
.0ce2	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ce3	98		          tya            ; get y
.0ce4	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ce5	ad fa 0c	          lda  pc+1      ; get pch
.0ce8	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ce9	ad f9 0c	          lda  pc        ; get pcl
.0cec	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0ced	ad f7 0c	          lda  rp        ; get rp
.0cf0	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cf1	ad f8 0c	          lda  ra        ; get a
.0cf4	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cf5	58		          cli
.0cf6	60		          rts
>0cf7	00		rp        .byte     0
>0cf8	00		ra        .byte     0
>0cf9	00 00		pc        .word     0
.0cfb			pull
.0cfb			pop
.0cfb	78		          sei
.0cfc	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0cfd	8d 30 0d	          sta  pc        ; save pcl
.0d00	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d01	8d 31 0d	          sta  pc+1      ; save pch
.0d04	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.0d05	a8		          tay            ; set y
.0d06	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.0d07	aa		          tax            ; set x
.0d08	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.0d09	8d 2f 0d	          sta  ra        ; save a
.0d0c	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.0d0d	8d 2e 0d	          sta  rp        ; save rp
.0d10	68		          pla            ; stack : zp2l, zp1h, zp1l
.0d11	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.0d13	68		          pla            ; stack : zp1h, zp1l
.0d14	85 fd		          sta  zpage2    ; get zpage2 High byte
.0d16	68		          pla            ; stack : zp1l
.0d17	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.0d19	68		          pla            ; stack :
.0d1a	85 fb		          sta  zpage1    ; get zpage1 High byte
.0d1c	ad 31 0d	          lda  pc+1      ; get pch
.0d1f	48		          pha            ; stack : pch
.0d20	ad 30 0d	          lda  pc
.0d23	48		          pha            ; stack : pcl, pch
.0d24	ad 2e 0d	          lda  rp        ; get rp
.0d27	48		          pha            ; stack : rp, pcl, pch
.0d28	ad 2f 0d	          lda  ra        ; set ra
.0d2b	58		          cli
.0d2c	28		          plp            ; stack : pcl, pch
.0d2d	60		          rts
>0d2e	00		rp        .byte     0
>0d2f	00		ra        .byte     0
>0d30	00 00		pc        .word     0

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.0d32			blkfill
.0d32	20 bc 0c	bf0            jsr  push
.0d35	20 f3 0d	               jsr  savezp1
.0d38	84 fc		               sty  zpage1+1
.0d3a	a0 00		               ldy  #$00
.0d3c	84 fb		               sty  zpage1
.0d3e	91 fb		bf1            sta  (zpage1),y
.0d40	c8		               iny
.0d41	d0 fb		               bne  bf1
.0d43	20 02 0e	               jsr  restzp1
.0d46	20 fb 0c	               jsr  pop
.0d49	60		               rts
.0d4a			memfill
.0d4a	20 bc 0c	               jsr  push
.0d4d	20 32 0d	mf1            jsr  blkfill
.0d50	c8		               iny
.0d51	ca		               dex
.0d52	d0 f9		               bne  mf1
.0d54	20 fb 0c	               jsr  pop
.0d57	60		               rts
.0d58			memmove
.0d58	20 bc 0c	               jsr  push
.0d5b	ba		               tsx            ; On se crée un pointeur ...
.0d5c	8a		               txa
.0d5d	18		               clc
.0d5e	69 0b		               adc  #11
.0d60	a8		               tay
.0d61	a2 06		               ldx  #$06
.0d63	b9 00 01	nextbyte       lda  $0100,y
.0d66	99 b2 0d	               sta  words,y
.0d69	c8		               iny
.0d6a	ca		               dex
.0d6b	d0 f6		               bne  nextbyte
.0d6d	ad b2 0d	               lda  s
.0d70	8d 89 0d	               sta  source+1
.0d73	ad b3 0d	               lda  s+1
.0d76	8d 8a 0d	               sta  source+2
.0d79	ad b4 0d	               lda  d
.0d7c	8d 86 0d	               sta  destin+1
.0d7f	ad b5 0d	               lda  d+1
.0d82	8d 87 0d	               sta  destin+2
.0d85	ad ff ff	destin         lda  $ffff
.0d88	8d ff ff	source         sta  $ffff
.0d8b	ee 86 0d	               inc  destin+1
.0d8e	d0 03		               bne  src
.0d90	ee 87 0d	               inc  destin+2
.0d93	ee 89 0d	src            inc  source+1
.0d96	d0 03		               bne  cnt
.0d98	ee 8a 0d	               inc  source+2
.0d9b	ad b6 0d	cnt            lda  compte
.0d9e	d0 08		               bne  decit
.0da0	ad b7 0d	               lda  compte+1
.0da3	f0 09		               beq  fini
.0da5	ce b7 0d	               dec  compte+1
.0da8	ce b6 0d	decit          dec  compte
.0dab	4c 85 0d	               jmp  destin
.0dae	20 fb 0c	fini           jsr  pop
.0db1	60		               rts
.0db2			words
>0db2	00 00		s         .word     $0000
>0db4	00 00		d         .word     $0000
>0db6	00 00		compte    .word     $0000
.0db8			decword
.0db8	20 bc 0c	               jsr  push
.0dbb	86 fd		               stx  zpage2
.0dbd	84 fe		               sty  zpage2+1
.0dbf	20 fb 0c	               jsr  pop
.0dc2	60		               rts
.0dc3			inczp1
.0dc3	08		               php
.0dc4	48		               pha
.0dc5	e6 fb		               inc  zpage1
.0dc7	a5 fb		               lda  zpage1
.0dc9	d0 02		               bne  nopage
.0dcb	e6 fc		               inc  zpage1+1
.0dcd	68		nopage         pla
.0dce	28		               plp
.0dcf	60		               rts
.0dd0			deczp1
.0dd0	08		                php
.0dd1	48		                pha
.0dd2	c6 fb		                dec  zpage1
.0dd4	d0 02		                bne  nopage
.0dd6	c6 fc		                dec  zpage1+1
.0dd8	68		nopage          pla
.0dd9	28		                plp
.0dda	60		                rts
.0ddb			inczp2
.0ddb	08		               php
.0ddc	48		               pha
.0ddd	e6 fd		               inc  zpage2
.0ddf	a5 fd		               lda  zpage2
.0de1	d0 02		               bne  nopage
.0de3	e6 fe		               inc  zpage2+1
.0de5	68		nopage         pla
.0de6	28		               plp
.0de7	60		               rts
.0de8			deczp2
.0de8	08		               php
.0de9	48		               pha
.0dea	a5 fd		               lda  zpage2
.0dec	d0 02		               bne  nopage
.0dee	c6 fe		               dec  zpage2+1
.0df0	68		nopage         pla
.0df1	28		               plp
.0df2	60		               rts
.0df3			savezp1
.0df3	08		               php
.0df4	48		               pha
.0df5	a5 fb		               lda  zpage1
.0df7	8d 6f 0e	               sta  zp1
.0dfa	a5 fc		               lda  zpage1+1
.0dfc	8d 70 0e	               sta  zp1+1
.0dff	68		               pla
.0e00	28		               plp
.0e01	60		               rts
.0e02			restzp1
.0e02	08		               php
.0e03	48		               pha
.0e04	ad 6f 0e	               lda zp1
.0e07	85 fb		               sta zpage1
.0e09	ad 70 0e	               lda zp1+1
.0e0c	85 fc		               sta zpage1+1
.0e0e	68		               pla
.0e0f	28		               plp
.0e10	60		               rts
.0e11			savezp2
.0e11	08		         php
.0e12	48		         pha
.0e13	a5 fd		         lda zpage2
.0e15	8d 71 0e	         sta zp2
.0e18	a5 fe		         lda zpage2+1
.0e1a	8d 72 0e	         sta zp2+1
.0e1d	68		         pla
.0e1e	28		         plp
.0e1f	60		         rts
.0e20			restzp2
.0e20	08		                php
.0e21	48		                pha
.0e22	ad 71 0e	                lda  zp2
.0e25	85 fd		                sta  zpage2
.0e27	ad 72 0e	                lda  zp2+1
.0e2a	85 fe		                sta  zpage2+1
.0e2c	68		                pla
.0e2d	28		                plp
.0e2e	60		                rts
.0e2f			xy2addr
.0e2f	08		                php
.0e30	48		                pha
.0e31	8a		                txa
.0e32	48		                pha
.0e33	98		                tya
.0e34	48		                pha
.0e35	ad 6a 0e	                lda     addr1+1
.0e38	8d 6c 0e	                sta     addr2+1
.0e3b	ad 69 0e	                lda     addr1
.0e3e	8d 6b 0e	                sta     addr2
.0e41	c0 00		                cpy     #$00
.0e43	f0 0f		                beq     addx
.0e45	18		moreline        clc
.0e46	6d 68 0e	                adc     ymult
.0e49	90 03		                bcc     norepy
.0e4b	ee 6c 0e	                inc     addr2+1
.0e4e	8d 6b 0e	norepy          sta     addr2
.0e51	88		                dey
.0e52	d0 f1		                bne     moreline
.0e54	8a		addx            txa
.0e55	18		                clc
.0e56	6d 6b 0e	                adc     addr2
.0e59	90 03		                bcc     thatsit
.0e5b	ee 6c 0e	                inc     addr2+1
.0e5e	8d 6b 0e	thatsit         sta     addr2
.0e61	68		                pla
.0e62	a8		                tay
.0e63	68		                pla
.0e64	aa		                tax
.0e65	68		                pla
.0e66	28		                plp
.0e67	60		                rts
>0e68	28		ymult          .byte     40
>0e69	00 00		addr1          .word     $0000
>0e6b	00 00		addr2          .word     $0000
>0e6d	00 00		bytecnt        .word     $0000
>0e6f	00 00		zp1        .word   $0000
>0e71	00 00		zp2        .word   $0000

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>0e73	01		a2hexcol       .byte     1              ; pour aputscxy
>0e74	00		a2hexbkcol     .byte     %00000000
.0e75			a2hexpos
>0e75	00		a2hexpx        .byte     0              ; pour aputsxy
>0e76	00		a2hexpy        .byte     0
>0e77	24		a2hexprefix    .byte     "$"            ; pour aputs
>0e78	00 00		a2hexstr       .word     $00
>0e7a	00 00		               .word     $00
>0e7c	00		               .byte     0              ; 0 end string
>0e7d	30 30 30 30	abin           .null     "00000000"
>0e81	30 30 30 30 00
>0e86	20 20 20 00	adec           .null     "   "
.0e8a			putahexfmtxy
.0e8a	20 bc 0c	               jsr  push
.0e8d	20 d9 0e	               jsr  atohex
.0e90	ae 75 0e	               ldx  a2hexpx
.0e93	ac 76 0e	               ldy  a2hexpy
.0e96	20 e5 0b	               jsr  gotoxy
.0e99	a2 77		               ldx  #<a2hexprefix
.0e9b	a0 0e		               ldy  #>a2hexprefix
.0e9d	20 cb 0b	               jsr  puts
.0ea0	20 fb 0c	               jsr  pop
.0ea3	60		               rts
.0ea4			putahexfmt
.0ea4	20 bc 0c	               jsr  push
.0ea7	20 d9 0e	               jsr  atohex
.0eaa	a2 77		               ldx  #<a2hexprefix
.0eac	a0 0e		               ldy  #>a2hexprefix
.0eae	20 cb 0b	               jsr  puts
.0eb1	20 fb 0c	               jsr  pop
.0eb4	60		               rts
.0eb5			putahex
.0eb5	20 bc 0c	               jsr  push
.0eb8	20 d9 0e	               jsr  atohex
.0ebb	a2 78		               ldx  #<a2hexstr
.0ebd	a0 0e		               ldy  #>a2hexstr
.0ebf	20 cb 0b	               jsr  puts
.0ec2	20 fb 0c	               jsr  pop
.0ec5	60		               rts
.0ec6			nibtohex
.0ec6	08		               php
.0ec7	29 0f		               and  #$0f
.0ec9	f8		               sed
.0eca	18		               clc
.0ecb	69 90		               adc  #$90
.0ecd	69 40		               adc  #$40
.0ecf	d8		               cld
.0ed0	28		               plp
.0ed1	60		               rts
.0ed2			lsra4bits
.0ed2	08		               php
.0ed3	4a		               lsr
.0ed4	4a		               lsr
.0ed5	4a		               lsr
.0ed6	4a		               lsr
.0ed7	28		               plp
.0ed8	60		               rts
.0ed9			atohex
.0ed9	08		               php
.0eda	48		               pha
.0edb	48		               pha
.0edc	20 d2 0e	               jsr  lsra4bits
.0edf	20 c6 0e	               jsr  nibtohex
.0ee2	8d 78 0e	               sta  a2hexstr
.0ee5	68		               pla
.0ee6	20 c6 0e	               jsr  nibtohex
.0ee9	8d 79 0e	               sta  a2hexstr+1
.0eec	a9 00		               lda  #$00                ; set end of string
.0eee	8d 7a 0e	               sta  a2hexstr+2
.0ef1	68		               pla
.0ef2	28		               plp
.0ef3	60		               rts
.0ef4			xy2hex
.0ef4	20 bc 0c	               jsr  push
.0ef7	20 d9 0e	               jsr  atohex
.0efa	8a		               txa
.0efb	48		               pha
.0efc	20 d2 0e	               jsr  lsra4bits
.0eff	20 c6 0e	               jsr  nibtohex
.0f02	8d 78 0e	               sta  a2hexstr
.0f05	68		               pla
.0f06	20 c6 0e	               jsr  nibtohex
.0f09	8d 79 0e	               sta  a2hexstr+1
.0f0c	98		               tya
.0f0d	48		               pha
.0f0e	20 d2 0e	               jsr  lsra4bits
.0f11	20 c6 0e	               jsr  nibtohex
.0f14	8d 7a 0e	               sta  a2hexstr+2
.0f17	68		               pla
.0f18	20 c6 0e	               jsr  nibtohex
.0f1b	8d 7b 0e	               sta  a2hexstr+3
.0f1e	a9 00		               lda  #$00                ; 0 ended string
.0f20	8d 7c 0e	               sta  a2hexstr+4
.0f23	20 fb 0c	               jsr  pop
.0f26			atobin
.0f26	20 bc 0c	               jsr  push
.0f29	a2 08		               ldx  #8
.0f2b	a0 00		               ldy  #0
.0f2d	18		               clc
.0f2e	2a		nextbit        rol
.0f2f	48		               pha
.0f30	69 00		               adc  #$00
.0f32	29 01		               and  #$01
.0f34	20 c6 0e	               jsr  nibtohex
.0f37	99 7d 0e	               sta  abin,y
.0f3a	68		               pla
.0f3b	c8		               iny
.0f3c	ca		               dex
.0f3d	d0 ef		               bne  nextbit
.0f3f	a9 00		               lda  #0
.0f41	99 7d 0e	               sta  abin,y
.0f44	20 fb 0c	               jsr  pull
.0f47	60		               rts
.0f48			putabin
.0f48	20 26 0f	               jsr     atobin
.0f4b	20 bc 0c	               jsr     push
.0f4e	a2 7d		               ldx     #<abin
.0f50	a0 0e		               ldy     #>abin
.0f52	20 cb 0b	               jsr     puts
.0f55	20 fb 0c	               jsr     pop
.0f58	60		               rts
.0f59			printabin
.0f59	20 bc 0c	               jsr     push
.0f5c	a2 7d		               ldx     #<abin
.0f5e	a0 0e		               ldy     #>abin
.0f60	20 cb 0b	               jsr     puts
.0f63	20 fb 0c	               jsr     pop
.0f66	60		               rts
.0f67			putabinfmt
.0f67	08		               php
.0f68	48		               pha
.0f69	a9 25		               lda     #"%"
.0f6b	20 c5 0b	               jsr     putch
.0f6e	68		               pla
.0f6f	20 48 0f	               jsr     putabin
.0f72	28		               plp
.0f73	60		               rts
.0f74			putabinxy
.0f74	20 e5 0b	               jsr     gotoxy
.0f77	20 48 0f	               jsr     putabin
.0f7a	60		               rts
.0f7b			putabinfmtxy
.0f7b	20 e5 0b	               jsr     gotoxy
.0f7e	20 67 0f	               jsr     putabinfmt
.0f81	60		               rts
.0f82			atodec
.0f82	20 bc 0c	               jsr  push
.0f85	f8		               sed
.0f86	aa		               tax
.0f87	a0 00		               ldy  #$00
.0f89	a9 00		               lda  #$00
.0f8b	18		nextbit        clc
.0f8c	69 01		               adc  #$01
.0f8e	90 01		               bcc  decx
.0f90	c8		               iny
.0f91	ca		decx           dex
.0f92	d0 f7		               bne  nextbit
.0f94	48		               pha
.0f95	98		               tya
.0f96	20 c6 0e	               jsr  nibtohex
.0f99	8d 86 0e	               sta  adec
.0f9c	68		               pla
.0f9d	48		               pha
.0f9e	20 c6 0e	               jsr  nibtohex
.0fa1	8d 88 0e	               sta  adec+2
.0fa4	68		               pla
.0fa5	6a		               ror
.0fa6	6a		               ror
.0fa7	6a		               ror
.0fa8	6a		               ror
.0fa9	20 c6 0e	               jsr  nibtohex
.0fac	8d 87 0e	               sta  adec+1
.0faf	d8		               cld
.0fb0	20 fb 0c	               jsr  pull
.0fb3	60		               rts
>0fb4	00 00 00	buffer         .byte     0,0,0
.0fb7			putadec
.0fb7	20 bc 0c	               jsr  push
.0fba	20 82 0f	               jsr  atodec
.0fbd	a2 86		               ldx  #<adec
.0fbf	a0 0e		               ldy  #>adec+1
.0fc1	20 cb 0b	               jsr  puts
.0fc4	20 fb 0c	               jsr  pop
.0fc7	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>0fc8	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>0fcc	00 00 00 00 00 00 00 00 00 0d 00 00
>0fd8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>0fdc	00 00 00 00 00 00 00 00 00 00 00 00
>0fe8	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>0fec	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>0ff8	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>0ffc	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1008	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>100c	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1018	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>101c	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1028	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>102c	00 00 00 00 00 00 00 00 00 00 00 00
>1038	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>103c	00 00 00 00 00 00 00 00 00 00 00 00
>1048	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>104c	00 00 00 00 00 00 00 00 00 00 00 00
>1058	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>105c	00 00 00 00 00 00 00 00 00 00 00 00
>1068	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>106c	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1078	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>107c	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1088	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>108c	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1098	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>109c	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>10a8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>10ac	00 00 00 00 00 00 00 00 00 00 00 00
>10b8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>10bc	00 00 00 00 00 00 00 00 00 00 00 00
.10c8			waitstop
.10c8	20 bc 0c	               jsr  push
.10cb	20 ed f6	wait           jsr  k_stop
.10ce	d0 fb		               bne  wait
.10d0	20 fb 0c	               jsr  pop
.10d3	60		               rts
.10d4			anykey
.10d4	08		               php
.10d5	48		               pha
.10d6	a5 cb		nokey          lda 203
.10d8	c9 40		               cmp #64
.10da	f0 fa		               beq nokey
.10dc	20 e2 10	               jsr releasekey
.10df	68		               pla
.10e0	28		               plp
.10e1	60		               rts
.10e2			releasekey
.10e2	08		               php
.10e3	48		               pha
.10e4	a5 cb		keypressed     lda 203
.10e6	c9 40		               cmp #64
.10e8	d0 fa		               bne keypressed
.10ea	68		               pla
.10eb	28		               plp
.10ec	60		               rts
.10ed			getkey
.10ed	20 e4 ff	again          jsr  getin
.10f0	c9 00		               cmp  #0
.10f2	f0 f9		               beq  again
.10f4	60		               rts
.10f5			kbflushbuff
.10f5	08		               php
.10f6	48		               pha
.10f7	20 e4 ff	again          jsr  getin
.10fa	c9 00		               cmp  #0
.10fc	d0 f9		               bne  again
.10fe	68		               pla
.10ff	28		               plp
.1100	60		               rts
.1101			waitkey
.1101	20 bc 0c	               jsr  push
.1104	8d 52 11	               sta  thekey
.1107	20 e4 ff	nope           jsr  getin
.110a	20 d2 ff	               jsr  chrout
.110d	cd 52 11	               cmp  thekey
.1110	d0 f5		               bne  nope
.1112	20 d2 ff	               jsr  chrout
.1115	20 fb 0c	               jsr  pop
.1118	60		               rts
.1119			waitspace
.1119	20 bc 0c	               jsr  push
.111c	a9 7f		wait           lda  #$7f  ;%01111111
.111e	8d 00 dc	               sta  $dc00
.1121	ad 01 dc	               lda  $dc01
.1124	29 10		               and  #$10  ;mask %00010000
.1126	d0 f4		               bne  wait
.1128	20 fb 0c	               jsr  pop
.112b			waitsstop
.112b	20 bc 0c	               jsr  push
.112e	20 ed f6	wait           jsr  k_stop  ;%01111111
.1131	d0 fb		               bne  wait
.1133	20 fb 0c	               jsr  pop
.1136			waitreturn
.1136	20 bc 0c	               jsr  push
.1139	ad 53 11	               lda  thecount
.113c	8d 00 04	               sta  scrnram
.113f	a9 02		               lda  #$02
.1141	8d 00 d8	               sta  colorram
.1144	20 e4 ff	nope           jsr  getin
.1147	c9 0d		nohex          cmp  #$0d
.1149	d0 f9		               bne  nope
.114b	ee 53 11	               inc  thecount
.114e	20 fb 0c	               jsr  pop
.1151	60		               rts
>1152	00		thekey         .byte   0
>1153	01		thecount       .byte   $01

;******  Return to file: essai01.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L essai01.txt -o essai01.prg essai01.asm
; Mon Apr  7 18:16:17 2025

;Offset	;Hex		;Source

;******  Processing input file: essai01.asm

="20250405-231555 a"	                Version = "20250405-231555 a"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 15 0b	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macro-c64-ultimateii.asm


;******  Return to file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-ultimateii.asm

=$df1c			uiictrlreg	=	$df1c	;(Write)
=$00								uiiidle		=	$00
=$01								uiicmdbusy	=	$01
=$02								uiidatalast	=	$02
=$03								uiidatamore	=	$03
=$df1c			uiicmdstat	=	$df1c	;(Read)	default $00
=$df1d			uiicmddata	=	$df1d	;(Write)
=$df1d			uiiidenreg	=	$df1d	;(Read)	default $c9
=$df1e			uiirxdata		=	$df1e	;(Read only)
=$df1f			uiidatastat	=	$df1f	;(Read only)
=$01			uii_identify	=	$01	; $01 $01 -> Read Id String as "ULTIMATE-II DOS V1.0"
=$02			uii_file_open	=	$02	; Open file for ...
=$01			uii_fa_read	=	$01	; $01 $02 $01 <filename> -> ... reading.
=$02			uii_fa_write	=	$02	; $01 $02 $02 <filename> -> ... writing.
=$04			uii_fa_new	=	$04	; $01 $02 $04 <filename> -> ... creating/writing.
=$08			uii_fa_ovwri	=	$08	; $01 $02 $08 <filename> -> ... overwriting.
=$03			uii_file_close	=	$03	; $01 $03 -> close opened file.
=$04			uii_read_data	= 	$04  ; $01 $04 [len_lo] [len_hi]
=$05			uii_writ_data	=	$05	; $01 $05 [dummy] [dummy] [data...]
=$06			uii_file_seek	=	$06	; $01 $06 [posl] [posml] [posmh] [posh].
=$07			uii_file_info 	=	$07	; $01 $07 -> returns current open file info.
=$08			uii_file_stat  = 	$08	; $01 $08 <filename> -> returns file info.
=$09			uii_file_del	=	$09	; $01 $09 <filename> -> delete/scratch file.
=$0a			uii_file_ren	=	$0a	; $01 $0a <filename> $00 <newname>
=$0b			uii_file_copy	=	$0b	; $01 $0b <source> $00 <destination>
=$11			uii_dir_change = 	$11	; $01 $11 <directory name>
=$12			uii_dir_pwd	=	$12	; $01 $12
=$13			uii_dir_open	=	$13	; $01 $13
=$14			uii_dir_read	=	$14  ; $01 $14
=$15			uii_dir_cp_ui	=	$15	; $01 $15 -> makes UI current path as API current path.
=$16			uii_dir_mkdir	=	$16	; $01 $16 <dirname> -> Create directory under current.
=$17			uii_dir_home	=	$17	; $01 $17 -> makes UI home path as API current path.
=$21			uii_reu_load	=	$21
=$22			uii_reu_save	=	$22
=$23			uii_dsk_mount	=	$23	; $01 $23 <id> <filename>
=$24			uii_dsk_umount = 	$24	; $01 $24 <id>
=$25			uii_dsk_swap 	= 	$25	; $01 $25 <id>
=$26			uii_time_get	=	$26	; $01 $26 [id] -> returns current RTC time/date.
=$27			uii_time_set	=	$27	; $01 $27 <Y> <M> <D> <H> <M> <S>
=$f0			uii_dos_echo	= 	$f0	; $01 $f0
>0854	01 01 00	uiicmdgetid       	.byte     $01,$01,$00
>0857	01 26 00	uiicmdgettime		.byte	$01,$26,$00
>085a			rxbuffer         .fill     256
>095a	00		rxbstart         .byte     0
>095b	00		rxbend           .byte     0
>095c	00		rxbflag          .byte     0
>095d			txbuffer         .fill     256
>0a5d	00		txbstart         .byte     0
>0a5e	00		txbend           .byte     0
>0a5f	00		txbflag          .byte     0
.0a60			uuifisbusy
.0a60	ad 1c df				lda	uiicmdstat
.0a63	29 01					and	#%00000001
.0a65	c9 01					cmp	#%00000001
.0a67	d0 01					bne  out
.0a69	38					sec
.0a6a	68		out			pla
.0a6b	60					rts
.0a6c			uuifisdataacc
.0a6c	48					pha
.0a6d	ad 1f df				lda	uiidatastat
.0a70	29 02					and	#%00000010
.0a72	68		out			pla
.0a73	60					rts
.0a74			uuifsnddataacc
.0a74	08					php
.0a75	48					pha
.0a76	a9 04					lda	#%00000100
.0a78	8d 1c df				sta	uiictrlreg
.0a7b	68		out			pla
.0a7c	28					plp
.0a7d	60					rts
.0a7e			uuifsndabort
.0a7e	48					pha ; Bit 2
.0a7f	18					clc
.0a80	ad 1c df				lda	uiicmdstat
.0a83	29 04					and	#%00000100
.0a85	c9 04					cmp	#%00000100
.0a87	d0 01					bne	out
.0a89	38					sec
.0a8a	68		out			pla
.0a8b	60					rts
.0a8c			uuifiscerror
.0a8c	48					pha ; Bit 3
.0a8d	18					clc
.0a8e	ad 1c df				lda	uiicmdstat
.0a91	29 08					and	#%00001000
.0a93	c9 08					cmp	#%00001000
.0a95	d0 01					bne	out
.0a97	38					sec
.0a98	68		out			pla
.0a99	60					rts
.0a9a			uuifgetcmdstat
.0a9a	08					php	; Bits 5,4
.0a9b	ad 1c df				lda	uiicmdstat
.0a9e	4a					lsr
.0a9f	4a					lsr
.0aa0	4a					lsr
.0aa1	4a					lsr
.0aa2	29 03					and	#%00000011
.0aa4	28					plp
.0aa5	60					rts
.0aa6			uuifisdataavail
.0aa6	48					pha			;tourlou
.0aa7	18					clc
.0aa8	ad 1f df				lda	uiidatastat
.0aab	29 80					and	#%10000000
.0aad	c9 80					cmp	#%10000000
.0aaf	d0 01					bne	out
.0ab1	38					sec
.0ab2	68		out			pla
.0ab3	60					rts
.0ab4			uuifwaitidle
.0ab4	08					php
.0ab5	48					pha
.0ab6	20 9a 0a	notyet		jsr	uuifgetcmdstat
.0ab9	c9 00					cmp  #$00
.0abb	d0 f9					bne	notyet
.0abd	68					pla
.0abe	28					plp
.0abf	60					rts
.0ac0			uuifismoredata
.0ac0	08					php
.0ac1	48					pha
.0ac2	20 9a 0a	notyet		jsr	uuifgetcmdstat
.0ac5	c9 00					cmp  #$00
.0ac7	d0 f9					bne	notyet
.0ac9	68					pla
.0aca	28					plp
.0acb	60					rts
.0acc			uiifbusywait
.0acc	08					php
.0acd	20 60 0a	wait			jsr	uuifisbusy
.0ad0	b0 fb					bcs	wait
.0ad2	28					plp
.0ad3	60					rts
.0ad4			uiifputcmdbyte
.0ad4	20 cc 0a				jsr 	uiifbusywait
.0ad7	8d 1d df				sta	uiicmddata
.0ada	60					rts
.0adb			uiifsndcmd
.0adb	20 c7 10				jsr	push
.0ade	86 fb					stx	zpage1
.0ae0	84 fc					sty	zpage1+1
.0ae2	a0 00					ldy	#$00
.0ae4	b1 fb		next			lda	(zpage1),y
.0ae6	f0 07					beq	finish
.0ae8	20 d4 0a				jsr	uiifputcmdbyte
.0aeb	c8					iny
.0aec	4c e4 0a				jmp	next
.0aef	a9 01		finish		lda	#$01
.0af1	8d 1c df				sta	uiictrlreg
.0af4	20 06 11				jsr	pop
.0af7	60					rts
.0af8			uiifreaddata
.0af8	08					php
.0af9	20 cc 0a				jsr	uiifbusywait
.0afc	20 a6 0a				jsr	uuifisdataavail
.0aff	b0 06					bcs	nodata
.0b01	ad 1e df				lda	uiirxdata
.0b04	4c 09 0b				jmp	outdata
.0b07	a9 00		nodata		lda	#$00
.0b09	28		outdata		plp
.0b0a	60					rts
.0b0b			uiifsendack
.0b0b	08					php
.0b0c	48					pha
.0b0d	a9 02					lda	#%00000010
.0b0f	8d 1c df				sta 	uiictrlreg
.0b12	68					pla
.0b13	28					plp
.0b14	60					rts

;******  Return to file: essai01.asm

.0b15			main
.0b15	20 99 0f	               jsr scrmaninit
.0b18	08		               php
.0b19	48		               pha
.0b1a	a9 0e		               lda  #14
.0b1c	8d b8 0f	               sta  characterset
.0b1f	20 d2 ff	               jsr  $ffd2
.0b22	68		               pla
.0b23	28		               plp
.0b24	08		               php
.0b25	48		               pha
.0b26	a9 08		               lda  #$08
.0b28	20 d2 ff	               jsr  $ffd2
.0b2b	68		               pla
.0b2c	28		               plp
.0b2d	20 c7 10	               jsr  push
.0b30	48		               pha
.0b31	a9 05		               lda  #cvert
.0b33	8d 20 d0	               sta  $d020
.0b36	68		               pla
.0b37	48		               pha
.0b38	a9 06		               lda  #cbleu
.0b3a	8d 21 d0	               sta  $d021
.0b3d	68		               pla
.0b3e	48		               pha
.0b3f	a9 01		               lda  #cblanc
.0b41	8d 86 02	               sta  bascol
.0b44	68		               pla
.0b45	20 06 11	               jsr  pull
.0b48	20 f6 0b	               jsr essai01
.0b4b	08		               php
.0b4c	48		               pha
.0b4d	a9 09		               lda  #$09
.0b4f	20 d2 ff	               jsr  $ffd2
.0b52	68		               pla
.0b53	28		               plp
.0b54	08		               php
.0b55	48		               pha
.0b56	a9 8e		               lda  #b_uppercase
.0b58	8d b8 0f	               sta  characterset
.0b5b	20 d2 ff	               jsr  $ffd2
.0b5e	68		               pla
.0b5f	28		               plp
.0b60	20 b9 0f	               jsr  cls
.0b63	20 c7 10	               jsr  push
.0b66	48		               pha
.0b67	a9 05		               lda  #cvert
.0b69	8d 20 d0	               sta  $d020
.0b6c	68		               pla
.0b6d	48		               pha
.0b6e	a9 06		               lda  #cbleu
.0b70	8d 21 d0	               sta  $d021
.0b73	68		               pla
.0b74	48		               pha
.0b75	a9 01		               lda  #cblanc
.0b77	8d 86 02	               sta  bascol
.0b7a	68		               pla
.0b7b	20 06 11	               jsr  pull
.0b7e			aide
.0b7e	08		               php
.0b7f	48		               pha
.0b80	a9 0e		               lda  #14
.0b82	8d b8 0f	               sta  characterset
.0b85	20 d2 ff	               jsr  $ffd2
.0b88	68		               pla
.0b89	28		               plp
.0b8a	20 b9 0f	               jsr cls
.0b8d	20 c7 10	               jsr  push
.0b90	a2 93		               ldx  #<line
.0b92	a0 0e		               ldy  #>line
.0b94	20 d6 0f	               jsr  puts
.0b97	20 06 11	               jsr  pull
.0b9a	20 c7 10	               jsr  push
.0b9d	a2 fb		               ldx  #<headera
.0b9f	a0 0c		               ldy  #>headera
.0ba1	20 d6 0f	               jsr  puts
.0ba4	20 06 11	               jsr  pull
.0ba7	20 c7 10	               jsr  push
.0baa	a2 6e		               ldx  #<headerb
.0bac	a0 0d		               ldy  #>headerb
.0bae	20 d6 0f	               jsr  puts
.0bb1	20 06 11	               jsr  pull
.0bb4	20 c7 10	               jsr  push
.0bb7	a2 93		               ldx  #<line
.0bb9	a0 0e		               ldy  #>line
.0bbb	20 d6 0f	               jsr  puts
.0bbe	20 06 11	               jsr  pull
.0bc1	20 c7 10	               jsr  push
.0bc4	a2 93		               ldx  #<line
.0bc6	a0 0e		               ldy  #>line
.0bc8	20 d6 0f	               jsr  puts
.0bcb	20 06 11	               jsr  pull
.0bce	20 c7 10	               jsr  push
.0bd1	a2 c9		               ldx  #<shortcuts
.0bd3	a0 0d		               ldy  #>shortcuts
.0bd5	20 d6 0f	               jsr  puts
.0bd8	20 06 11	               jsr  pull
.0bdb	20 c7 10	               jsr  push
.0bde	a2 43		               ldx  #<aidetext
.0be0	a0 0e		               ldy  #>aidetext
.0be2	20 d6 0f	               jsr  puts
.0be5	20 06 11	               jsr  pull
.0be8	20 c7 10	               jsr  push
.0beb	a2 93		               ldx  #<line
.0bed	a0 0e		               ldy  #>line
.0bef	20 d6 0f	               jsr  puts
.0bf2	20 06 11	               jsr  pull
.0bf5	60		               rts
.0bf6			essai01
.0bf6	08		               php
.0bf7	48		               pha
.0bf8	20 b9 0f	               jsr  cls
.0bfb	20 54 0c	               jsr  printstatic
.0bfe	20 c7 10	               jsr  push
.0c01	a2 e5		               ldx  #<lbluiiidenreg
.0c03	a0 0e		               ldy  #>lbluiiidenreg
.0c05	20 5f 10	               jsr  putscxy
.0c08	20 06 11	               jsr  pull
.0c0b	ad 1d df	               lda  uiiidenreg
.0c0e	20 af 12	               jsr  putahexfmt
.0c11	20 c7 10	               jsr  push
.0c14	a2 1d		               ldx  #<uiicmddata
.0c16	a0 df		               ldy  #>uiicmddata
.0c18	20 db 0a	               jsr  uiifsndcmd
.0c1b	20 06 11	               jsr  pull
.0c1e	20 c7 10	               jsr  push
.0c21	a2 8d		               ldx  #<txtrespponse
.0c23	a0 0f		               ldy  #>txtrespponse
.0c25	20 5f 10	               jsr  putscxy
.0c28	20 06 11	               jsr  pull
.0c2b	20 b6 0c	               jsr  updatestatus
.0c2e	20 f8 0a	moredata       jsr  uiifreaddata
.0c31	c9 00		               cmp  #$00
.0c33	f0 10		               beq  nodata
.0c35	c9 00		               cmp  #$00
.0c37	f0 06		               beq  putit
.0c39	c9 27		               cmp  #$27
.0c3b	90 02		               bcc  putit
.0c3d	09 20		               ora  #%00100000
.0c3f	20 d0 0f	putit          jsr  putch
.0c42	4c 2e 0c	               jmp  moredata
.0c45	20 74 0a	nodata         jsr  uuifsnddataacc
.0c48	20 b6 0c	               jsr  updatestatus
.0c4b	20 5f 15	               jsr  showregs
.0c4e	20 df 14	               jsr  anykey
.0c51	68		               pla
.0c52	28		               plp
.0c53	60		               rts
.0c54			printstatic
.0c54	20 c7 10	               jsr  push
.0c57	20 c7 10	               jsr  push
.0c5a	a2 cb		               ldx  #<lbluiititle
.0c5c	a0 0e		               ldy  #>lbluiititle
.0c5e	20 5f 10	               jsr  putscxy
.0c61	20 06 11	               jsr  pull
.0c64	20 c7 10	               jsr  push
.0c67	a2 e5		               ldx  #<lbluiiidenreg
.0c69	a0 0e		               ldy  #>lbluiiidenreg
.0c6b	20 5f 10	               jsr  putscxy
.0c6e	20 06 11	               jsr  pull
.0c71	20 c7 10	               jsr  push
.0c74	a2 05		               ldx  #<lbluiistatreg
.0c76	a0 0f		               ldy  #>lbluiistatreg
.0c78	20 5f 10	               jsr  putscxy
.0c7b	20 06 11	               jsr  pull
.0c7e	20 c7 10	               jsr  push
.0c81	a2 69		               ldx  #<defuiistatreg
.0c83	a0 0f		               ldy  #>defuiistatreg
.0c85	20 5f 10	               jsr  putscxy
.0c88	20 06 11	               jsr  pull
.0c8b	20 c7 10	               jsr  push
.0c8e	a2 45		               ldx  #<lbluiirspdata
.0c90	a0 0f		               ldy  #>lbluiirspdata
.0c92	20 5f 10	               jsr  putscxy
.0c95	20 06 11	               jsr  pull
.0c98	20 c7 10	               jsr  push
.0c9b	a2 25		               ldx  #<lbluiistadata
.0c9d	a0 0f		               ldy  #>lbluiistadata
.0c9f	20 5f 10	               jsr  putscxy
.0ca2	20 06 11	               jsr  pull
.0ca5	20 c7 10	               jsr  push
.0ca8	a2 7d		               ldx  #<defuiistadata
.0caa	a0 0f		               ldy  #>defuiistadata
.0cac	20 5f 10	               jsr  putscxy
.0caf	20 06 11	               jsr  pull
.0cb2	20 06 11	               jsr  pop
.0cb5	60		               rts
.0cb6			updatestatus
.0cb6	20 c7 10	               jsr  push
.0cb9	a9 03		               lda  #$03
.0cbb	8d 7e 12	               sta  a2hexcol
.0cbe	20 c7 10	               jsr  push
.0cc1	a2 75		               ldx  #<txtuiistatreg
.0cc3	a0 0f		               ldy  #>txtuiistatreg
.0cc5	20 5f 10	               jsr  putscxy
.0cc8	20 06 11	               jsr  pull
.0ccb	ad 1c df	               lda  uiicmdstat
.0cce	20 72 13	               jsr  putabinfmt
.0cd1	20 c7 10	               jsr  push
.0cd4	a2 79		               ldx  #<txtuiirspdata
.0cd6	a0 0f		               ldy  #>txtuiirspdata
.0cd8	20 5f 10	               jsr  putscxy
.0cdb	20 06 11	               jsr  pull
.0cde	ad 1e df	               lda  uiirxdata
.0ce1	20 72 13	               jsr  putabinfmt
.0ce4	20 c7 10	               jsr  push
.0ce7	a2 89		               ldx  #<txtuiistadata
.0ce9	a0 0f		               ldy  #>txtuiistadata
.0ceb	20 5f 10	               jsr  putscxy
.0cee	20 06 11	               jsr  pull
.0cf1	ad 1f df	               lda  uiidatastat
.0cf4	20 72 13	               jsr  putabinfmt
.0cf7	20 06 11	               jsr  pop
.0cfa	60		               rts

;******  Processing file: ./strings_fr.asm

.0cfb			headera
>0cfb	20 20 20 31	               .text          "   1541 Ultimate II + Premiers essais "
>0cff	35 34 31 20 d5 4c 54 49 4d 41 54 45 20 c9 c9 20
>0d0f	2b 20 d0 52 45 4d 49 45 52 53 20 45 53 53 41 49
>0d1f	53 20
>0d21	0d		               .byte     $0d
>0d22	20 c3 41 52	               .text          " Cartouche et API par Gideon Zweijtzer."
>0d26	54 4f 55 43 48 45 20 45 54 20 c1 d0 c9 20 50 41
>0d36	52 20 c7 49 44 45 4f 4e 20 da 57 45 49 4a 54 5a
>0d46	45 52 2e
>0d49	0d		               .byte     $0d
>0d4a	20 20 20 20	               .text          "     API Version 1.0, 1er Feb 2013"
>0d4e	20 c1 d0 c9 20 d6 45 52 53 49 4f 4e 20 31 2e 30
>0d5e	2c 20 31 45 52 20 c6 45 42 20 32 30 31 33
>0d6c	0d 00		               .byte     $0d,0
>0d6e	20 20 20 20	headerb        .text          "               essai01 "
>0d72	20 20 20 20 20 20 20 20 20 20 20 45 53 53 41 49
>0d82	30 31 20
>0d85	0d		               .byte     $0d
>0d86	20 20 20 20	               .text          "       (c) 2025 Daniel Lafrance"
>0d8a	20 20 20 28 43 29 20 32 30 32 35 20 c4 41 4e 49
>0d9a	45 4c 20 cc 41 46 52 41 4e 43 45
>0da5	0d		               .byte     $0d
>0da6	20 20 20 20	               .text   format("       Version: %s",Version)
>0daa	20 20 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35
>0dba	30 34 30 35 2d 32 33 31 35 35 35 20 41
>0dc7	0d 00		               .byte     $0d,0
>0dc9	0d		shortcuts      .byte     $0d
>0dca	91 91		               .byte     ucurkey,ucurkey
>0dcc	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey
>0dd0	1d 1d 1d 1d	               .byte     rcurkey,rcurkey,rcurkey,rcurkey,rcurkey
>0dd4	1d
>0dd5	20 d2 20 c1	               .text          " R A C C O U R C I S "
>0dd9	20 c3 20 c3 20 cf 20 d5 20 d2 20 c3 20 c9 20 d3
>0de9	20
>0dea	0d		               .byte     $0d
>0deb	20 45 53 53	               .text   format(" essai01..: SYS%05d ($%04X)",main, main)
>0def	41 49 30 31 2e 2e 3a 20 d3 d9 d3 30 32 38 33 37
>0dff	20 28 24 30 c2 31 35 29
>0e07	0d		               .byte     $0d
>0e08	20 41 49 44	               .text   format(" aide.....: SYS%05d ($%04X)",aide, aide)
>0e0c	45 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 32 39 34 32
>0e1c	20 28 24 30 c2 37 c5 29
>0e24	0d		               .byte     $0d
>0e25	20 43 4c 53	               .text   format(" cls......: SYS%05d ($%04X)",cls, cls)
>0e29	2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 30 34 30 32 35
>0e39	20 28 24 30 c6 c2 39 29
>0e41	0d 00		               .byte     $0d,0
>0e43	20 cc 41 4e	aidetext       .text   format(" Lancement: SYS%05d ($%04X)",essai01, essai01)
>0e47	43 45 4d 45 4e 54 3a 20 d3 d9 d3 30 33 30 36 32
>0e57	20 28 24 30 c2 c6 36 29
>0e5f	0d 0d		               .byte     $0d, $0d
>0e61	20 20 20 20	               .text   format("    ex.: SYS%05d",essai01)
>0e65	45 58 2e 3a 20 d3 d9 d3 30 33 30 36 32
>0e72	0d		               .byte     $0d
>0e73	20 20 20 20	               .text   format("    for i=0to100:SYS%05d:next",essai01)
>0e77	46 4f 52 20 49 3d 30 54 4f 31 30 30 3a d3 d9 d3
>0e87	30 33 30 36 32 3a 4e 45 58 54
>0e91	0d 00		               .byte     $0d,0
>0e93	20 c0 c0 c0	line           .byte     $20,192,192,192,192,192,192,192,192,192
>0e97	c0 c0 c0 c0 c0 c0
>0e9d	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0ea1	c0 c0 c0 c0 c0 c0
>0ea7	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192,192
>0eab	c0 c0 c0 c0 c0 c0
>0eb1	c0 c0 c0 c0	               .byte     192,192,192,192,192,192,192,192,192
>0eb5	c0 c0 c0 c0 c0
>0eba	0d 00		               .byte     $0d,0
>0ebc	50 52 45 53	uiiconnected   .null     "present"
>0ec0	45 4e 54 00
>0ec4	41 42 53 45	uiiunconnected .null     "absent"
>0ec8	4e 54 00
=1			uiiy           =    1
=1			uiix           =    1
>0ecb	01 0a 01 12	lbluiititle    .byte     1,uiix+9,uiiy,18
>0ecf	20 31 35 34	               .text     " 1541 Ultimate II + "
>0ed3	31 20 d5 4c 54 49 4d 41 54 45 20 c9 c9 20 2b 20
>0ee3	92 00		               .byte     146,0
>0ee5	01 01 03	lbluiiidenreg  .byte     1,uiix ,uiiy+2
>0ee8	c9 44 20 52	               .null     format("Id register ------ $%04X -> ", uiiidenreg)
>0eec	45 47 49 53 54 45 52 20 2d 2d 2d 2d 2d 2d 20 24
>0efc	c4 c6 31 c4 20 2d 3e 20 00
>0f05	01 01 05	lbluiistatreg  .byte     1,uiix ,uiiy+4
>0f08	c3 4d 44 20	               .null     format("Cmd status reg. -- $%04X -> ", uiicmdstat)
>0f0c	53 54 41 54 55 53 20 52 45 47 2e 20 2d 2d 20 24
>0f1c	c4 c6 31 c3 20 2d 3e 20 00
>0f25	01 01 07	lbluiistadata  .byte     1,uiix ,uiiy+6
>0f28	d2 45 53 50	               .null     format("Response data reg. $%04X -> ", uiirxdata)
>0f2c	4f 4e 53 45 20 44 41 54 41 20 52 45 47 2e 20 24
>0f3c	c4 c6 31 c5 20 2d 3e 20 00
>0f45	01 01 09	lbluiirspdata  .byte     1,uiix ,uiiy+8.
>0f48	c4 41 54 41	               .null     format("Data status reg. - $%04X -> ", uiidatastat)
>0f4c	20 53 54 41 54 55 53 20 52 45 47 2e 20 2d 20 24
>0f5c	c4 c6 31 c6 20 2d 3e 20 00
>0f65	03 1d 03 00	txtuiiidenreg  .byte     3,uiix+28,uiiy+2,0
>0f69	03 1e 04	defuiistatreg  .byte     3,uiix+29,uiiy+3
>0f6c	c1 c1 d3 d3	               .null     "AASSEPCB"
>0f70	c5 d0 c3 c2 00
>0f75	03 1d 05 00	txtuiistatreg  .byte     3,uiix+28,uiiy+4,0
>0f79	03 1d 07 00	txtuiirspdata  .byte     3,uiix+28,uiiy+6,0
>0f7d	03 1e 08	defuiistadata  .byte     3,uiix+29,uiiy+7
>0f80	c1 c1 d3 d3	               .null     "AASSEPCB"
>0f84	c5 d0 c3 c2 00
>0f89	03 1d 09 00	txtuiistadata  .byte     3,uiix+28,uiiy+8,0
>0f8d	03 0a 02 00	txtrespponse   .byte     3,uiix+9,uiiy+1,0

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0f91	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0f95	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.0f99			libtart

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.0f99			scrmaninit
.0f99	20 c7 10	               jsr  push
.0f9c	a9 06		               lda  #vbleu
.0f9e	8d 21 d0	               sta  vicbackcol
.0fa1	a9 05		               lda  #vvert
.0fa3	8d 20 d0	               sta  vicbordcol
.0fa6	a9 01		               lda  #vblanc
.0fa8	8d 86 02	               sta  bascol
.0fab	ad 00 04	               lda  scrnram
.0fae	8d 00 04	               sta  scrnram
.0fb1	20 b9 0f	               jsr  cls
.0fb4	20 06 11	               jsr  pop
.0fb7	60		               rts
>0fb8	8e		characterset   .byte b_uppercase
.0fb9			cls
.0fb9	08		               php
.0fba	48		               pha
.0fbb	a9 93		               lda  #$93
.0fbd	20 d0 0f	               jsr  putch
.0fc0	68		               pla
.0fc1	28		               plp
.0fc2	60		               rts
.0fc3			putnch
.0fc3	08		               php
.0fc4	e0 00		               cpx  #$00
.0fc6	f0 06		               beq  out
.0fc8	20 d2 ff	again          jsr  $ffd2
.0fcb	ca		               dex
.0fcc	d0 fa		               bne  again
.0fce	28		out            plp
.0fcf	60		               rts
.0fd0			putch
.0fd0	08		               php
.0fd1	20 d2 ff	               jsr  $ffd2
.0fd4	28		               plp
.0fd5	60		               rts
.0fd6			puts
.0fd6	20 c7 10	               jsr  push
.0fd9	86 fb		               stx  zpage1
.0fdb	84 fc		               sty  zpage1+1
.0fdd	a0 00		               ldy  #0
.0fdf	b1 fb		next           lda  (zpage1),y
.0fe1	f0 09		               beq  exit
.0fe3	20 d0 0f	               jsr  putch
.0fe6	20 ce 11	               jsr  inczp1
.0fe9	4c df 0f	               jmp  next
.0fec	20 06 11	exit           jsr  pop
.0fef	60		               rts
.0ff0			gotoxy
.0ff0	08		               php
.0ff1	18		               clc
.0ff2	8a		               txa
.0ff3	48		               pha
.0ff4	98		               tya
.0ff5	aa		               tax
.0ff6	68		               pla
.0ff7	a8		               tay
.0ff8	20 f0 ff	               jsr  kplot
.0ffb	28		               plp
.0ffc	60		               rts
.0ffd			cursor
=$0286			bascol    =    $0286
.0ffd	08		               php            ;tourlou
.0ffe	48		               pha
.0fff	90 12		               bcc  restore
.1001	20 f0 ff	               jsr  kplot
.1004	8c 25 10	               sty  cx
.1007	8e 26 10	               stx  cy
.100a	ad 86 02	               lda  bascol
.100d	8d 27 10	               sta  bcol
.1010	4c 22 10	               jmp  out
.1013	ae 26 10	restore        ldx  cy
.1016	ac 25 10	               ldy  cx
.1019	20 f0 ff	               jsr  kplot
.101c	ad 27 10	               lda  bcol
.101f	8d 86 02	               sta  bascol
.1022	68		out            pla
.1023	28		               plp
.1024	60		               rts
>1025	00		cx   .byte     $00
>1026	00		cy   .byte     $00
>1027	00		bcol .byte     $00
.1028			cursave
.1028	08		               php
.1029	38		               sec
.102a	20 fd 0f	               jsr  cursor
.102d	28		               plp
.102e	60		               rts
.102f			curput
.102f	08		               php
.1030	18		               clc
.1031	20 fd 0f	               jsr  cursor
.1034	28		               plp
.1035	60		               rts
.1036			putsxy
.1036	20 c7 10	               jsr  push
.1039	86 fb		               stx  zpage1
.103b	84 fc		               sty  zpage1+1
.103d	a0 00		               ldy  #$00
.103f	b1 fb		               lda  (zpage1),y
.1041	aa		               tax
.1042	20 ce 11	               jsr  inczp1
.1045	b1 fb		               lda  (zpage1),y
.1047	a8		               tay
.1048	20 f0 0f	               jsr  gotoxy
.104b	20 ce 11	               jsr  inczp1
.104e	a6 fb		               ldx  zpage1
.1050	a4 fc		               ldy  zpage1+1
.1052	20 d6 0f	               jsr  puts
.1055	20 06 11	               jsr  pop
.1058	60		               rts
>1059	00 00		straddr   .word     $00
>105b	00		px        .byte     $00
>105c	00		py        .byte     $00
>105d	00 00		zp1       .word     $00
.105f			putscxy
.105f	20 c7 10	               jsr  push
.1062	84 fc		               sty  zpage1+1
.1064	86 fb		               stx  zpage1
.1066	ad 86 02	               lda  bascol
.1069	8d 89 10	               sta  bc
.106c	a0 00		               ldy #$00
.106e	b1 fb		               lda  (zpage1),y
.1070	8d 86 02	               sta  bascol
.1073	20 ce 11	               jsr  inczp1
.1076	a6 fb		               ldx  zpage1
.1078	a4 fc		               ldy  zpage1+1
.107a	20 36 10	               jsr  putsxy
.107d	ad 89 10	               lda  bc
.1080	8d 86 02	               sta  bascol
.1083	20 06 11	               jsr  pop
.1086	60		               rts
>1087	00 00		straddr  .word      $00
>1089	00		bc       .byte      $00
>108a	00 00		zp1      .word      $00
.108c			putrahex
.108c	08		               php
.108d	48		               pha
.108e	20 e4 12	               jsr  atohex
.1091	a9 83		               lda  #<a2hexstr
.1093	a0 12		               ldy  #>a2hexstr
.1095	20 d6 0f	               jsr  puts
.1098	68		               pla
.1099	28		               plp
.109a	60		               rts
.109b			kputrahexxy
.109b			bputrahexxy
.109b			putrahexxy
.109b	08		               php
.109c	20 e4 12	               jsr  atohex
.109f	a9 80		               lda  #<a2hexpos
.10a1	a0 12		               ldy  #>a2hexpos
.10a3	20 36 10	               jsr  putsxy
.10a6	68		               pla
.10a7	28		               plp
.10a8	60		               rts
.10a9			putrahexcxy
.10a9	08		               php
.10aa	20 e4 12	               jsr  atohex
.10ad	a9 80		               lda  #<a2hexpos
.10af	a0 12		               ldy  #>a2hexpos
.10b1	20 5f 10	               jsr  putscxy
.10b4	68		               pla
.10b5	28		               plp
.10b6	60		               rts
.10b7			setinverse
.10b7	48		               pha
.10b8	a9 12		               lda  #$12
.10ba	20 d2 ff	               jsr  $ffd2
.10bd	68		               pla
.10be	60		               rts
.10bf			clrinverse
.10bf	48		               pha
.10c0	a9 92		               lda  #$92
.10c2	20 d2 ff	               jsr  $ffd2
.10c5	68		               pla
.10c6	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.10c7			push
.10c7	08		          php            ; stack : flg, pcl, pch
.10c8	78		          sei
.10c9	8d 03 11	          sta  ra        ; save a
.10cc	68		          pla            ; stack : pcl, pch
.10cd	8d 02 11	          sta  rp        ; save rp
.10d0	68		          pla            ; stack : pch
.10d1	8d 04 11	          sta  pc        ; save pcl
.10d4	68		          pla            ; stack : -
.10d5	8d 05 11	          sta  pc+1      ; save pch
.10d8	a5 fb		          lda  zpage1    ; get zpage1 low byte
.10da	48		          pha            ; stack : zp1l
.10db	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.10dd	48		          pha            ; stack : zp1h, zp1l
.10de	a5 fd		          lda  zpage2    ; get zpage2 low byte
.10e0	48		          pha            ; stack : zp2l, zp1h, zp1l
.10e1	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.10e3	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.10e4	ad 02 11	          lda  rp        ; get rp
.10e7	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.10e8	ad 03 11	          lda  ra        ; get a
.10eb	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.10ec	8a		          txa            ; get x
.10ed	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.10ee	98		          tya            ; get y
.10ef	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.10f0	ad 05 11	          lda  pc+1      ; get pch
.10f3	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.10f4	ad 04 11	          lda  pc        ; get pcl
.10f7	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.10f8	ad 02 11	          lda  rp        ; get rp
.10fb	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.10fc	ad 03 11	          lda  ra        ; get a
.10ff	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1100	58		          cli
.1101	60		          rts
>1102	00		rp        .byte     0
>1103	00		ra        .byte     0
>1104	00 00		pc        .word     0
.1106			pull
.1106			pop
.1106	78		          sei
.1107	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1108	8d 3b 11	          sta  pc        ; save pcl
.110b	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.110c	8d 3c 11	          sta  pc+1      ; save pch
.110f	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1110	a8		          tay            ; set y
.1111	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1112	aa		          tax            ; set x
.1113	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1114	8d 3a 11	          sta  ra        ; save a
.1117	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1118	8d 39 11	          sta  rp        ; save rp
.111b	68		          pla            ; stack : zp2l, zp1h, zp1l
.111c	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.111e	68		          pla            ; stack : zp1h, zp1l
.111f	85 fd		          sta  zpage2    ; get zpage2 High byte
.1121	68		          pla            ; stack : zp1l
.1122	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1124	68		          pla            ; stack :
.1125	85 fb		          sta  zpage1    ; get zpage1 High byte
.1127	ad 3c 11	          lda  pc+1      ; get pch
.112a	48		          pha            ; stack : pch
.112b	ad 3b 11	          lda  pc
.112e	48		          pha            ; stack : pcl, pch
.112f	ad 39 11	          lda  rp        ; get rp
.1132	48		          pha            ; stack : rp, pcl, pch
.1133	ad 3a 11	          lda  ra        ; set ra
.1136	58		          cli
.1137	28		          plp            ; stack : pcl, pch
.1138	60		          rts
>1139	00		rp        .byte     0
>113a	00		ra        .byte     0
>113b	00 00		pc        .word     0

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.113d			blkfill
.113d	20 c7 10	bf0            jsr  push
.1140	20 fe 11	               jsr  savezp1
.1143	84 fc		               sty  zpage1+1
.1145	a0 00		               ldy  #$00
.1147	84 fb		               sty  zpage1
.1149	91 fb		bf1            sta  (zpage1),y
.114b	c8		               iny
.114c	d0 fb		               bne  bf1
.114e	20 0d 12	               jsr  restzp1
.1151	20 06 11	               jsr  pop
.1154	60		               rts
.1155			memfill
.1155	20 c7 10	               jsr  push
.1158	20 3d 11	mf1            jsr  blkfill
.115b	c8		               iny
.115c	ca		               dex
.115d	d0 f9		               bne  mf1
.115f	20 06 11	               jsr  pop
.1162	60		               rts
.1163			memmove
.1163	20 c7 10	               jsr  push
.1166	ba		               tsx            ; On se crée un pointeur ...
.1167	8a		               txa
.1168	18		               clc
.1169	69 0b		               adc  #11
.116b	a8		               tay
.116c	a2 06		               ldx  #$06
.116e	b9 00 01	nextbyte       lda  $0100,y
.1171	99 bd 11	               sta  words,y
.1174	c8		               iny
.1175	ca		               dex
.1176	d0 f6		               bne  nextbyte
.1178	ad bd 11	               lda  s
.117b	8d 94 11	               sta  source+1
.117e	ad be 11	               lda  s+1
.1181	8d 95 11	               sta  source+2
.1184	ad bf 11	               lda  d
.1187	8d 91 11	               sta  destin+1
.118a	ad c0 11	               lda  d+1
.118d	8d 92 11	               sta  destin+2
.1190	ad ff ff	destin         lda  $ffff
.1193	8d ff ff	source         sta  $ffff
.1196	ee 91 11	               inc  destin+1
.1199	d0 03		               bne  src
.119b	ee 92 11	               inc  destin+2
.119e	ee 94 11	src            inc  source+1
.11a1	d0 03		               bne  cnt
.11a3	ee 95 11	               inc  source+2
.11a6	ad c1 11	cnt            lda  compte
.11a9	d0 08		               bne  decit
.11ab	ad c2 11	               lda  compte+1
.11ae	f0 09		               beq  fini
.11b0	ce c2 11	               dec  compte+1
.11b3	ce c1 11	decit          dec  compte
.11b6	4c 90 11	               jmp  destin
.11b9	20 06 11	fini           jsr  pop
.11bc	60		               rts
.11bd			words
>11bd	00 00		s         .word     $0000
>11bf	00 00		d         .word     $0000
>11c1	00 00		compte    .word     $0000
.11c3			decword
.11c3	20 c7 10	               jsr  push
.11c6	86 fd		               stx  zpage2
.11c8	84 fe		               sty  zpage2+1
.11ca	20 06 11	               jsr  pop
.11cd	60		               rts
.11ce			inczp1
.11ce	08		               php
.11cf	48		               pha
.11d0	e6 fb		               inc  zpage1
.11d2	a5 fb		               lda  zpage1
.11d4	d0 02		               bne  nopage
.11d6	e6 fc		               inc  zpage1+1
.11d8	68		nopage         pla
.11d9	28		               plp
.11da	60		               rts
.11db			deczp1
.11db	08		                php
.11dc	48		                pha
.11dd	c6 fb		                dec  zpage1
.11df	d0 02		                bne  nopage
.11e1	c6 fc		                dec  zpage1+1
.11e3	68		nopage          pla
.11e4	28		                plp
.11e5	60		                rts
.11e6			inczp2
.11e6	08		               php
.11e7	48		               pha
.11e8	e6 fd		               inc  zpage2
.11ea	a5 fd		               lda  zpage2
.11ec	d0 02		               bne  nopage
.11ee	e6 fe		               inc  zpage2+1
.11f0	68		nopage         pla
.11f1	28		               plp
.11f2	60		               rts
.11f3			deczp2
.11f3	08		               php
.11f4	48		               pha
.11f5	a5 fd		               lda  zpage2
.11f7	d0 02		               bne  nopage
.11f9	c6 fe		               dec  zpage2+1
.11fb	68		nopage         pla
.11fc	28		               plp
.11fd	60		               rts
.11fe			savezp1
.11fe	08		               php
.11ff	48		               pha
.1200	a5 fb		               lda  zpage1
.1202	8d 7a 12	               sta  zp1
.1205	a5 fc		               lda  zpage1+1
.1207	8d 7b 12	               sta  zp1+1
.120a	68		               pla
.120b	28		               plp
.120c	60		               rts
.120d			restzp1
.120d	08		               php
.120e	48		               pha
.120f	ad 7a 12	               lda zp1
.1212	85 fb		               sta zpage1
.1214	ad 7b 12	               lda zp1+1
.1217	85 fc		               sta zpage1+1
.1219	68		               pla
.121a	28		               plp
.121b	60		               rts
.121c			savezp2
.121c	08		         php
.121d	48		         pha
.121e	a5 fd		         lda zpage2
.1220	8d 7c 12	         sta zp2
.1223	a5 fe		         lda zpage2+1
.1225	8d 7d 12	         sta zp2+1
.1228	68		         pla
.1229	28		         plp
.122a	60		         rts
.122b			restzp2
.122b	08		                php
.122c	48		                pha
.122d	ad 7c 12	                lda  zp2
.1230	85 fd		                sta  zpage2
.1232	ad 7d 12	                lda  zp2+1
.1235	85 fe		                sta  zpage2+1
.1237	68		                pla
.1238	28		                plp
.1239	60		                rts
.123a			xy2addr
.123a	08		                php
.123b	48		                pha
.123c	8a		                txa
.123d	48		                pha
.123e	98		                tya
.123f	48		                pha
.1240	ad 75 12	                lda     addr1+1
.1243	8d 77 12	                sta     addr2+1
.1246	ad 74 12	                lda     addr1
.1249	8d 76 12	                sta     addr2
.124c	c0 00		                cpy     #$00
.124e	f0 0f		                beq     addx
.1250	18		moreline        clc
.1251	6d 73 12	                adc     ymult
.1254	90 03		                bcc     norepy
.1256	ee 77 12	                inc     addr2+1
.1259	8d 76 12	norepy          sta     addr2
.125c	88		                dey
.125d	d0 f1		                bne     moreline
.125f	8a		addx            txa
.1260	18		                clc
.1261	6d 76 12	                adc     addr2
.1264	90 03		                bcc     thatsit
.1266	ee 77 12	                inc     addr2+1
.1269	8d 76 12	thatsit         sta     addr2
.126c	68		                pla
.126d	a8		                tay
.126e	68		                pla
.126f	aa		                tax
.1270	68		                pla
.1271	28		                plp
.1272	60		                rts
>1273	28		ymult          .byte     40
>1274	00 00		addr1          .word     $0000
>1276	00 00		addr2          .word     $0000
>1278	00 00		bytecnt        .word     $0000
>127a	00 00		zp1        .word   $0000
>127c	00 00		zp2        .word   $0000

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>127e	01		a2hexcol       .byte     1              ; pour aputscxy
>127f	00		a2hexbkcol     .byte     %00000000
.1280			a2hexpos
>1280	00		a2hexpx        .byte     0              ; pour aputsxy
>1281	00		a2hexpy        .byte     0
>1282	24		a2hexprefix    .byte     "$"            ; pour aputs
>1283	00 00		a2hexstr       .word     $00
>1285	00 00		               .word     $00
>1287	00		               .byte     0              ; 0 end string
>1288	30 30 30 30	abin           .null     "00000000"
>128c	30 30 30 30 00
>1291	20 20 20 00	adec           .null     "   "
.1295			putahexfmtxy
.1295	20 c7 10	               jsr  push
.1298	20 e4 12	               jsr  atohex
.129b	ae 80 12	               ldx  a2hexpx
.129e	ac 81 12	               ldy  a2hexpy
.12a1	20 f0 0f	               jsr  gotoxy
.12a4	a2 82		               ldx  #<a2hexprefix
.12a6	a0 12		               ldy  #>a2hexprefix
.12a8	20 d6 0f	               jsr  puts
.12ab	20 06 11	               jsr  pop
.12ae	60		               rts
.12af			putahexfmt
.12af	20 c7 10	               jsr  push
.12b2	20 e4 12	               jsr  atohex
.12b5	a2 82		               ldx  #<a2hexprefix
.12b7	a0 12		               ldy  #>a2hexprefix
.12b9	20 d6 0f	               jsr  puts
.12bc	20 06 11	               jsr  pop
.12bf	60		               rts
.12c0			putahex
.12c0	20 c7 10	               jsr  push
.12c3	20 e4 12	               jsr  atohex
.12c6	a2 83		               ldx  #<a2hexstr
.12c8	a0 12		               ldy  #>a2hexstr
.12ca	20 d6 0f	               jsr  puts
.12cd	20 06 11	               jsr  pop
.12d0	60		               rts
.12d1			nibtohex
.12d1	08		               php
.12d2	29 0f		               and  #$0f
.12d4	f8		               sed
.12d5	18		               clc
.12d6	69 90		               adc  #$90
.12d8	69 40		               adc  #$40
.12da	d8		               cld
.12db	28		               plp
.12dc	60		               rts
.12dd			lsra4bits
.12dd	08		               php
.12de	4a		               lsr
.12df	4a		               lsr
.12e0	4a		               lsr
.12e1	4a		               lsr
.12e2	28		               plp
.12e3	60		               rts
.12e4			atohex
.12e4	08		               php
.12e5	48		               pha
.12e6	48		               pha
.12e7	20 dd 12	               jsr  lsra4bits
.12ea	20 d1 12	               jsr  nibtohex
.12ed	8d 83 12	               sta  a2hexstr
.12f0	68		               pla
.12f1	20 d1 12	               jsr  nibtohex
.12f4	8d 84 12	               sta  a2hexstr+1
.12f7	a9 00		               lda  #$00                ; set end of string
.12f9	8d 85 12	               sta  a2hexstr+2
.12fc	68		               pla
.12fd	28		               plp
.12fe	60		               rts
.12ff			xy2hex
.12ff	20 c7 10	               jsr  push
.1302	20 e4 12	               jsr  atohex
.1305	8a		               txa
.1306	48		               pha
.1307	20 dd 12	               jsr  lsra4bits
.130a	20 d1 12	               jsr  nibtohex
.130d	8d 83 12	               sta  a2hexstr
.1310	68		               pla
.1311	20 d1 12	               jsr  nibtohex
.1314	8d 84 12	               sta  a2hexstr+1
.1317	98		               tya
.1318	48		               pha
.1319	20 dd 12	               jsr  lsra4bits
.131c	20 d1 12	               jsr  nibtohex
.131f	8d 85 12	               sta  a2hexstr+2
.1322	68		               pla
.1323	20 d1 12	               jsr  nibtohex
.1326	8d 86 12	               sta  a2hexstr+3
.1329	a9 00		               lda  #$00                ; 0 ended string
.132b	8d 87 12	               sta  a2hexstr+4
.132e	20 06 11	               jsr  pop
.1331			atobin
.1331	20 c7 10	               jsr  push
.1334	a2 08		               ldx  #8
.1336	a0 00		               ldy  #0
.1338	18		               clc
.1339	2a		nextbit        rol
.133a	48		               pha
.133b	69 00		               adc  #$00
.133d	29 01		               and  #$01
.133f	20 d1 12	               jsr  nibtohex
.1342	99 88 12	               sta  abin,y
.1345	68		               pla
.1346	c8		               iny
.1347	ca		               dex
.1348	d0 ef		               bne  nextbit
.134a	a9 00		               lda  #0
.134c	99 88 12	               sta  abin,y
.134f	20 06 11	               jsr  pull
.1352	60		               rts
.1353			putabin
.1353	20 31 13	               jsr     atobin
.1356	20 c7 10	               jsr     push
.1359	a2 88		               ldx     #<abin
.135b	a0 12		               ldy     #>abin
.135d	20 d6 0f	               jsr     puts
.1360	20 06 11	               jsr     pop
.1363	60		               rts
.1364			printabin
.1364	20 c7 10	               jsr     push
.1367	a2 88		               ldx     #<abin
.1369	a0 12		               ldy     #>abin
.136b	20 d6 0f	               jsr     puts
.136e	20 06 11	               jsr     pop
.1371	60		               rts
.1372			putabinfmt
.1372	08		               php
.1373	48		               pha
.1374	a9 25		               lda     #"%"
.1376	20 d0 0f	               jsr     putch
.1379	68		               pla
.137a	20 53 13	               jsr     putabin
.137d	28		               plp
.137e	60		               rts
.137f			putabinxy
.137f	20 f0 0f	               jsr     gotoxy
.1382	20 53 13	               jsr     putabin
.1385	60		               rts
.1386			putabinfmtxy
.1386	20 f0 0f	               jsr     gotoxy
.1389	20 72 13	               jsr     putabinfmt
.138c	60		               rts
.138d			atodec
.138d	20 c7 10	               jsr  push
.1390	f8		               sed
.1391	aa		               tax
.1392	a0 00		               ldy  #$00
.1394	a9 00		               lda  #$00
.1396	18		nextbit        clc
.1397	69 01		               adc  #$01
.1399	90 01		               bcc  decx
.139b	c8		               iny
.139c	ca		decx           dex
.139d	d0 f7		               bne  nextbit
.139f	48		               pha
.13a0	98		               tya
.13a1	20 d1 12	               jsr  nibtohex
.13a4	8d 91 12	               sta  adec
.13a7	68		               pla
.13a8	48		               pha
.13a9	20 d1 12	               jsr  nibtohex
.13ac	8d 93 12	               sta  adec+2
.13af	68		               pla
.13b0	6a		               ror
.13b1	6a		               ror
.13b2	6a		               ror
.13b3	6a		               ror
.13b4	20 d1 12	               jsr  nibtohex
.13b7	8d 92 12	               sta  adec+1
.13ba	d8		               cld
.13bb	20 06 11	               jsr  pull
.13be	60		               rts
>13bf	00 00 00	buffer         .byte     0,0,0
.13c2			putadec
.13c2	20 c7 10	               jsr  push
.13c5	20 8d 13	               jsr  atodec
.13c8	a2 91		               ldx  #<adec
.13ca	a0 12		               ldy  #>adec+1
.13cc	20 d6 0f	               jsr  puts
.13cf	20 06 11	               jsr  pop
.13d2	60		               rts

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>13d3	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>13d7	00 00 00 00 00 00 00 00 00 0d 00 00
>13e3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>13e7	00 00 00 00 00 00 00 00 00 00 00 00
>13f3	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>13f7	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1403	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1407	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1413	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1417	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1423	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1427	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1433	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1437	00 00 00 00 00 00 00 00 00 00 00 00
>1443	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1447	00 00 00 00 00 00 00 00 00 00 00 00
>1453	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1457	00 00 00 00 00 00 00 00 00 00 00 00
>1463	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1467	00 00 00 00 00 00 00 00 00 00 00 00
>1473	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1477	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1483	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1487	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1493	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1497	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>14a3	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>14a7	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>14b3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>14b7	00 00 00 00 00 00 00 00 00 00 00 00
>14c3	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>14c7	00 00 00 00 00 00 00 00 00 00 00 00
.14d3			waitstop
.14d3	20 c7 10	               jsr  push
.14d6	20 ed f6	wait           jsr  k_stop
.14d9	d0 fb		               bne  wait
.14db	20 06 11	               jsr  pop
.14de	60		               rts
.14df			anykey
.14df	08		               php
.14e0	48		               pha
.14e1	a5 cb		nokey          lda 203
.14e3	c9 40		               cmp #64
.14e5	f0 fa		               beq nokey
.14e7	20 ed 14	               jsr releasekey
.14ea	68		               pla
.14eb	28		               plp
.14ec	60		               rts
.14ed			releasekey
.14ed	08		               php
.14ee	48		               pha
.14ef	a5 cb		keypressed     lda 203
.14f1	c9 40		               cmp #64
.14f3	d0 fa		               bne keypressed
.14f5	68		               pla
.14f6	28		               plp
.14f7	60		               rts
.14f8			getkey
.14f8	20 e4 ff	again          jsr  getin
.14fb	c9 00		               cmp  #0
.14fd	f0 f9		               beq  again
.14ff	60		               rts
.1500			kbflushbuff
.1500	08		               php
.1501	48		               pha
.1502	20 e4 ff	again          jsr  getin
.1505	c9 00		               cmp  #0
.1507	d0 f9		               bne  again
.1509	68		               pla
.150a	28		               plp
.150b	60		               rts
.150c			waitkey
.150c	20 c7 10	               jsr  push
.150f	8d 5d 15	               sta  thekey
.1512	20 e4 ff	nope           jsr  getin
.1515	20 d2 ff	               jsr  chrout
.1518	cd 5d 15	               cmp  thekey
.151b	d0 f5		               bne  nope
.151d	20 d2 ff	               jsr  chrout
.1520	20 06 11	               jsr  pop
.1523	60		               rts
.1524			waitspace
.1524	20 c7 10	               jsr  push
.1527	a9 7f		wait           lda  #$7f  ;%01111111
.1529	8d 00 dc	               sta  $dc00
.152c	ad 01 dc	               lda  $dc01
.152f	29 10		               and  #$10  ;mask %00010000
.1531	d0 f4		               bne  wait
.1533	20 06 11	               jsr  pop
.1536			waitsstop
.1536	20 c7 10	               jsr  push
.1539	20 ed f6	wait           jsr  k_stop  ;%01111111
.153c	d0 fb		               bne  wait
.153e	20 06 11	               jsr  pop
.1541			waitreturn
.1541	20 c7 10	               jsr  push
.1544	ad 5e 15	               lda  thecount
.1547	8d 00 04	               sta  scrnram
.154a	a9 02		               lda  #$02
.154c	8d 00 d8	               sta  colorram
.154f	20 e4 ff	nope           jsr  getin
.1552	c9 0d		nohex          cmp  #$0d
.1554	d0 f9		               bne  nope
.1556	ee 5e 15	               inc  thecount
.1559	20 06 11	               jsr  pop
.155c	60		               rts
>155d	00		thekey         .byte   0
>155e	01		thecount       .byte   $01

;******  Return to file: essai01.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs.asm

.155f			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
=0			bkcol   =   bkcol3
.155f	08		                php
.1560	8d 1d 17	                sta  rega
.1563	68		                pla
.1564	8d 20 17	                sta  regp
.1567	8e 1e 17	                stx  regx
.156a	8c 1f 17	                sty  regy
.156d	ba		                tsx
.156e	8e 21 17	                stx  regs
.1571	68		                pla
.1572	8d 24 17	                sta  regpcl
.1575	8d 25 17	                sta  regpcl2
.1578	68		                pla
.1579	8d 22 17	                sta  regpch
.157c	8d 23 17	                sta  regpch2
.157f	ad 1d 17	                lda  rega
.1582	48		                pha
.1583	20 d1 12	                jsr  nibtohex
.1586	8d c7 16	                sta  vala+1
.1589	68		                pla
.158a	20 dd 12	                jsr  lsra4bits
.158d	20 d1 12	                jsr  nibtohex
.1590	8d c6 16	                sta  vala
.1593	ad 1f 17	                lda  regy
.1596	48		                pha
.1597	20 d1 12	                jsr  nibtohex
.159a	8d db 16	                sta  valy+1
.159d	68		                pla
.159e	20 dd 12	                jsr  lsra4bits
.15a1	20 d1 12	                jsr  nibtohex
.15a4	8d da 16	                sta  valy
.15a7	ad 1e 17	                lda  regx
.15aa	48		                pha
.15ab	20 d1 12	                jsr  nibtohex
.15ae	8d d1 16	                sta  valx+1
.15b1	68		                pla
.15b2	20 dd 12	                jsr  lsra4bits
.15b5	20 d1 12	                jsr  nibtohex
.15b8	8d d0 16	                sta  valx
.15bb	ad 20 17	                lda  regp
.15be	48		                pha
.15bf	20 d1 12	                jsr  nibtohex
.15c2	8d e5 16	                sta  valp+1
.15c5	68		                pla
.15c6	20 dd 12	                jsr  lsra4bits
.15c9	20 d1 12	                jsr  nibtohex
.15cc	8d e4 16	                sta  valp
.15cf	ad 21 17	                lda  regs
.15d2	48		                pha
.15d3	20 d1 12	                jsr  nibtohex
.15d6	8d ef 16	                sta  vals+1
.15d9	68		                pla
.15da	20 dd 12	                jsr  lsra4bits
.15dd	20 d1 12	                jsr  nibtohex
.15e0	8d ee 16	                sta  vals
.15e3	18		                clc
.15e4	ad 25 17	                lda regpcl2
.15e7	69 01		                adc #$01
.15e9	8d 25 17	                sta regpcl2
.15ec	ad 25 17	                lda regpcl2
.15ef	d0 03		                bne noreport
.15f1	ee 23 17	                inc regpch2
.15f4	ad 23 17	    noreport    lda regpch2
.15f7	48		                pha
.15f8	20 d1 12	                jsr  nibtohex
.15fb	8d fa 16	                sta  valpch+1
.15fe	68		                pla
.15ff	20 dd 12	                jsr  lsra4bits
.1602	20 d1 12	                jsr  nibtohex
.1605	8d f9 16	                sta  valpch
.1608	ad 25 17	                lda  regpcl2
.160b	48		                pha
.160c	20 d1 12	                jsr  nibtohex
.160f	8d fc 16	                sta  valpcl+1
.1612	68		                pla
.1613	20 dd 12	                jsr  lsra4bits
.1616	20 d1 12	                jsr  nibtohex
.1619	8d fb 16	                sta  valpcl
.161c	a5 fb		                lda  zpage1
.161e	48		                pha
.161f	20 d1 12	                jsr  nibtohex
.1622	8d 0a 17	                sta  valz1l
.1625	68		                pla
.1626	20 dd 12	                jsr  lsra4bits
.1629	20 d1 12	                jsr  nibtohex
.162c	8d 0b 17	                sta  valz1l+1
.162f	a5 fc		                lda  zpage1+1
.1631	48		                pha
.1632	20 d1 12	                jsr  nibtohex
.1635	8d 08 17	                sta  valz1h
.1638	68		                pla
.1639	20 dd 12	                jsr  lsra4bits
.163c	20 d1 12	                jsr  nibtohex
.163f	8d 09 17	                sta  valz1h+1
.1642	a5 fd		                lda  zpage2
.1644	48		                pha
.1645	20 d1 12	                jsr  nibtohex
.1648	8d 19 17	                sta  valz2l
.164b	68		                pla
.164c	20 dd 12	                jsr  lsra4bits
.164f	20 d1 12	                jsr  nibtohex
.1652	8d 1a 17	                sta  valz2l+1
.1655	a5 fe		                lda  zpage2+1
.1657	48		                pha
.1658	20 d1 12	                jsr  nibtohex
.165b	8d 17 17	                sta  valz2h
.165e	68		                pla
.165f	20 dd 12	                jsr  lsra4bits
.1662	20 d1 12	                jsr  nibtohex
.1665	8d 18 17	                sta  valz2h+1
.1668	20 b7 10	                jsr  setinverse
.166b	78		                sei
.166c	a2 bf		                ldx  #<srega
.166e	a0 16		                ldy  #>srega+1
.1670	20 5f 10	                jsr  putscxy
.1673	a2 c9		                ldx  #<sregx
.1675	a0 16		                ldy  #>sregx+1
.1677	20 5f 10	                jsr  putscxy
.167a	a2 d3		                ldx  #<sregy
.167c	a0 16		                ldy  #>sregy+1
.167e	20 5f 10	                jsr  putscxy
.1681	a2 dd		                ldx  #<sregp
.1683	a0 16		                ldy  #>sregp+1
.1685	20 5f 10	                jsr  putscxy
.1688	a2 e7		                ldx  #<sregs
.168a	a0 16		                ldy  #>sregs+1
.168c	20 5f 10	                jsr  putscxy
.168f	a2 f1		                ldx  #<sregpc
.1691	a0 16		                ldy  #>sregpc+1
.1693	20 5f 10	                jsr  putscxy
.1696	a2 ff		                ldx  #<sregz1
.1698	a0 17		                ldy  #>sregz1+1
.169a	20 5f 10	                jsr  putscxy
.169d	a2 0e		                ldx  #<sregz2
.169f	a0 17		                ldy  #>sregz2+1
.16a1	20 5f 10	                jsr  putscxy
.16a4	58		                cli
.16a5	20 bf 10	                jsr  clrinverse
.16a8	ad 22 17	                lda  regpch
.16ab	48		                pha
.16ac	ad 24 17	                lda  regpcl
.16af	48		                pha
.16b0	ac 1f 17	                ldy  regy
.16b3	ae 1e 17	                ldx  regx
.16b6	ad 20 17	                lda  regp
.16b9	48		                pha
.16ba	ad 1d 17	                lda  rega
.16bd	28		                plp
.16be	60		                rts
>16bf	01 00 17	srega   .byte   colr,coln,line
>16c2	20 41 3a 24	        .text   ' a:$' ;4,24
>16c6	00 00 00	vala    .byte   0,0,0
>16c9	01 06 17	sregx   .byte   colr,coln+6,line
>16cc	20 58 3a 24	        .text   ' x:$' ;4,24
>16d0	00 00 00	valx    .byte   0,0,0
>16d3	01 0c 17	sregy   .byte   colr,coln+12,line
>16d6	20 59 3a 24	        .text   ' y:$' ;4,24
>16da	00 00 00	valy    .byte   0,0,0
>16dd	01 12 17	sregp   .byte   colr,coln+18,line
>16e0	20 50 3a 24	        .text   ' p:$' ;4,24
>16e4	00 00 00	valp    .byte   0,0,0
>16e7	01 18 17	sregs   .byte   colr,coln+24,line
>16ea	20 53 3a 24	        .text   ' s:$' ;4,24
>16ee	00 00 00	vals    .byte   0,0,0
>16f1	01 1e 17	sregpc  .byte   colr,coln+30,line
>16f4	20 50 43 3a	        .text   ' pc:$' ;4,24
>16f8	24
>16f9	00 00		valpch  .byte   0,0
>16fb	00 00 20 00	valpcl  .byte   0,0,32,0
>16ff	01 03 18	sregz1  .byte   colr,coln+3,line+1
>1702	20 5a 50 31	        .text   ' zp1:$' ;4,24
>1706	3a 24
>1708	00 00		valz1h  .byte   0,0
>170a	00 00 20 00	valz1l  .byte   0,0,32,0
>170e	01 0f 18	sregz2  .byte   colr,coln+15,line+1
>1711	20 5a 50 32	        .text   ' zp2:$' ;4,24
>1715	3a 24
>1717	00 00		valz2h  .byte   0,0
>1719	00 00 20 00	valz2l  .byte   0,0,32,0
>171d	00		rega    .byte   0
>171e	00		regx    .byte   0
>171f	00		regy    .byte   0
>1720	00		regp    .byte   0
>1721	00		regs    .byte   0
>1722	00		regpch  .byte   0
>1723	00		regpch2 .byte   0
>1724	00		regpcl  .byte   0
>1725	00		regpcl2 .byte   0
>1726	00		vzp1h   .byte   0
>1727	00		vzp1l   .byte   0
>1728	00		vzp2h   .byte   0
>1729	00		vzp2l   .byte   0

;******  Return to file: essai01.asm


;******  End of listing

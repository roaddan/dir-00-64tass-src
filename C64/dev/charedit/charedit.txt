
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Tue Oct 29 22:20:02 2024

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20240404-011030"	version  = "20240404-011030"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	2a 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	20 2a 50 52			.text " *programmation assembleur sue c64*"
>080a	4f 47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45
>081a	4d 42 4c 45 55 52 20 53 55 45 20 43 36 34 2a
>0829	00				.byte $00		;Un zéro pour indiquer la fin de cette
>082a	46 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082c	02 00				.word 2   	;Numero de la ligne Basic.
>082e	8f				.byte $8F		;Le token de la commande REM du Basic
>082f	20 2a 50 41			.text " *par daniel lafrance*"
>0833	52 20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43
>0843	45 2a
>0845	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0846	51 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0848	03 00				.word 3   	;Numero de la ligne Basic.
>084a	9e				.byte $9e		;Le token de la commande PRINT du Basic
>084b	30 32 31 33			.text format("%05d",hpgmstart)
>084f	31
>0850	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0851	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0853	4c 56 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.0856			main
.0856	20 90 22	               jsr  push
.0859	20 62 21	               jsr  scrmaninit
.085c	08		               php
.085d	48		               pha
.085e	a9 08		               lda  #$08
.0860	20 d2 ff	               jsr  $ffd2
.0863	68		               pla
.0864	28		               plp
.0865	20 ca 0a	               jsr  drawcredits
.0868	a2 8d		               ldx #<menu_msg
.086a	a0 1d		               ldy #>menu_msg
.086c	20 28 22	               jsr putscxy
.086f	20 48 21	               jsr  screendis
.0872	20 7b 10	               jsr  copycharset
.0875	20 82 21	               jsr  cls
.0878	20 65 10	               jsr  setscreenptr
.087b	20 29 0b	               jsr  setdefaultchar
.087e	20 d6 10	               jsr  staticscreen
.0881	20 a8 0f	               jsr  drawbitmap
.0884	a9 00		               lda  #$00
.0886	8d 7e 09	               sta  fkeyset
.0889	20 2b 11	               jsr  drawfkeys
.088c	a9 00		               lda  #$00
.088e	20 90 22	               jsr  push
.0891	a2 a6		               ldx  #<blankmsg
.0893	a0 1a		               ldy  #>blankmsg
.0895	20 28 22	               jsr  putscxy
.0898	a2 d2		               ldx  #<prompt_msg
.089a	a0 1a		               ldy  #>prompt_msg
.089c	20 28 22	               jsr  putscxy
.089f	20 cf 22	               jsr  pop
.08a2	20 55 21	               jsr  screenena
.08a5	20 3a 0d	               jsr  keyaction
.08a8	20 82 21	               jsr  cls
.08ab	20 ca 0a	               jsr  drawcredits
.08ae	a2 16		               ldx #<bye_msg
.08b0	a0 1f		               ldy #>bye_msg
.08b2	20 28 22	               jsr putscxy
.08b5	a2 38		               ldx #<any_msg
.08b7	a0 1f		               ldy #>any_msg
.08b9	20 28 22	               jsr putscxy
.08bc	20 c1 26	               jsr  getkey
.08bf	20 82 21	               jsr  cls
.08c2	20 cf 22	endmain        jsr  pop
.08c5	20 66 fe	               jsr  k_warmboot
.08c8	60		               rts
.08c9			savetofile
.08c9	20 90 22	               jsr  push
.08cc	a9 8f		               lda  #<fname
.08ce	8d 5b 28	               sta  dsk_fnptr
.08d1	a9 09		               lda  #>fname
.08d3	8d 5c 28	               sta  dsk_fnptr+1
.08d6	a9 0d		               lda  #(device-fname-1)
.08d8	8d 5d 28	               sta  dsk_fnlen
.08db	ad 9d 09	               lda  device
.08de	29 0f		               and  #$0f
.08e0	8d 5a 28	               sta  dsk_lfsno
.08e3	8d 59 28	               sta  dsk_dev
.08e6	a9 00		               lda  #<bitmapmem
.08e8	8d 55 28	               sta  dsk_data_s
.08eb	a9 28		               lda  #>bitmapmem
.08ed	8d 56 28	               sta  dsk_data_s+1
.08f0	a9 00		               lda  #<endofaddr
.08f2	8d 57 28	               sta  dsk_data_e
.08f5	a9 48		               lda  #>endofaddr
.08f7	8d 58 28	               sta  dsk_data_e+1
.08fa	a2 a6		               ldx #<blankmsg
.08fc	a0 1a		               ldy #>blankmsg
.08fe	20 28 22	               jsr putscxy
.0901	a2 f8		               ldx #<wait_msg
.0903	a0 1a		               ldy #>wait_msg
.0905	20 28 22	               jsr putscxy
.0908	20 90 22	               jsr  push
.090b	a2 01		               ldx  #1
.090d	a0 04		               ldy  #4
.090f	20 b9 21	               jsr  gotoxy
.0912	20 cf 22	               jsr  pop
.0915	20 c2 27	               jsr  memtofile
.0918	20 cf 22	               jsr  pop
.091b	60		               rts
.091c			loadfromfile
.091c	20 90 22	               jsr  push
.091f	a9 8f		               lda  #<fname
.0921	8d 5b 28	               sta  dsk_fnptr
.0924	a9 09		               lda  #>fname
.0926	8d 5c 28	               sta  dsk_fnptr+1
.0929	a9 0d		               lda  #(device-fname-1)
.092b	8d 5d 28	               sta  dsk_fnlen
.092e	ad 9d 09	               lda  device
.0931	29 0f		               and  #$0f
.0933	8d 59 28	               sta  dsk_dev
.0936	8d 5a 28	               sta  dsk_lfsno
.0939	a9 00		               lda  #<bitmapmem
.093b	8d 55 28	               sta  dsk_data_s
.093e	a9 28		               lda  #>bitmapmem
.0940	8d 56 28	               sta  dsk_data_s+1
.0943	a9 00		               lda  #<endofaddr
.0945	8d 57 28	               sta  dsk_data_e
.0948	a9 48		               lda  #>endofaddr
.094a	8d 58 28	               sta  dsk_data_e+1
.094d	a2 a6		               ldx #<blankmsg
.094f	a0 1a		               ldy #>blankmsg
.0951	20 28 22	               jsr putscxy
.0954	a2 f8		               ldx #<wait_msg
.0956	a0 1a		               ldy #>wait_msg
.0958	20 28 22	               jsr putscxy
.095b	20 90 22	               jsr  push
.095e	a2 01		               ldx  #1
.0960	a0 04		               ldy  #4
.0962	20 b9 21	               jsr  gotoxy
.0965	20 cf 22	               jsr  pop
.0968	20 fa 27	               jsr  filetomem
.096b	20 cf 22	               jsr  pop
.096e	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>096f	00 d0		startaddr      .word     $d000               ; 53248
>0971	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0973	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>0975	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>0979	08 04 02 01
>097d	00		editmode       .byte     0
>097e	00		fkeyset        .byte     0
>097f	00		currentchar    .byte     0
>0980	00		currentkey     .byte     0
>0981	00		previouskey    .byte     0
>0982	00		bitmapoffset   .byte     0
>0983	00 00		mapaddr        .word     0
>0985	00 00		byteaddr       .word     0
>0987	00 00		gridaddr       .word     0
>0989	09		cursln         .byte     grid_top
>098a	01		curscl         .byte     grid_left
>098b	05 1b 03 12	pfname         .byte     vvert,27,3,18
>098f	40 30 3a	fname          .text     "@0:"
>0992	4f 52 49 47	name           .text     "origin"
>0996	49 4e
>0998	2e 43 48 52	ext            .null     ".chr"
>099c	00
>099d	08		device         .byte     8

;******  Processing file: routines.asm

.099e			template
.099e	20 90 22	               jsr  push
.09a1	20 cf 22	               jsr  pop
.09a4	60		               rts
.09a5			screenredraw
.09a5	20 90 22	               jsr  push
.09a8	20 48 21	               jsr  screendis
.09ab	20 82 21	               jsr  cls
.09ae	20 d6 10	               jsr  staticscreen
.09b1	20 a8 0f	               jsr  drawbitmap
.09b4	20 2b 11	               jsr  drawfkeys
.09b7	20 90 22	               jsr  push
.09ba	a2 0d		               ldx  #13
.09bc	a0 0c		               ldy  #12
.09be	20 b9 21	               jsr  gotoxy
.09c1	20 cf 22	               jsr  pop
.09c4	ad 80 09	               lda  currentkey
.09c7	20 99 21	               jsr  putch
.09ca	20 90 22	               jsr  push
.09cd	a2 a6		               ldx  #<blankmsg
.09cf	a0 1a		               ldy  #>blankmsg
.09d1	20 28 22	               jsr  putscxy
.09d4	a2 d2		               ldx  #<prompt_msg
.09d6	a0 1a		               ldy  #>prompt_msg
.09d8	20 28 22	               jsr  putscxy
.09db	20 cf 22	               jsr  pop
.09de	20 55 21	               jsr  screenena
.09e1	20 cf 22	               jsr  pop
.09e4	60		               rts
.09e5			getfname
.09e5	20 90 22	               jsr  push
.09e8	20 90 22	               jsr  push
.09eb	a2 a6		               ldx  #<blankmsg
.09ed	a0 1a		               ldy  #>blankmsg
.09ef	20 28 22	               jsr  putscxy
.09f2	a2 2b		               ldx  #<fname_msg
.09f4	a0 1d		               ldy  #>fname_msg
.09f6	20 28 22	               jsr  putscxy
.09f9	20 cf 22	               jsr  pop
.09fc	a2 00		               ldx  #$00
.09fe	8e 32 0a	               stx  count
.0a01	20 33 0a	getanother     jsr  getalphanum
.0a04	20 99 21	               jsr  putch
.0a07	ae 32 0a	               ldx  count
.0a0a	9d 92 09	               sta  name,x
.0a0d	ee 32 0a	               inc  count
.0a10	ae 32 0a	               ldx  count
.0a13	e0 06		               cpx  #$06
.0a15	f0 03		               beq  finish
.0a17	4c 01 0a	               jmp  getanother
.0a1a			finish
.0a1a	20 90 22	               jsr  push
.0a1d	a2 a6		               ldx  #<blankmsg
.0a1f	a0 1a		               ldy  #>blankmsg
.0a21	20 28 22	               jsr  putscxy
.0a24	a2 8b		               ldx  #<pfname
.0a26	a0 09		               ldy  #>pfname
.0a28	20 28 22	               jsr  putscxy
.0a2b	20 cf 22	               jsr  pop
.0a2e	20 cf 22	               jsr  pop
.0a31	60		               rts
>0a32	00		count          .byte     0
.0a33			getalphanum
.0a33	20 90 22	               jsr  push
.0a36	20 c1 26	getanother     jsr  getkey
.0a39	c9 30		               cmp  #$30      ; 0
.0a3b	30 f9		               bmi  getanother
.0a3d	c9 3a		               cmp  #$3a      ; 9+1
.0a3f	30 0b		               bmi  goodone
.0a41	c9 41		isitletter     cmp  #$41      ; A
.0a43	30 f1		               bmi  getanother
.0a45	c9 5b		               cmp  #$5b      ; Z+1
.0a47	30 03		               bmi  goodone
.0a49	4c 36 0a	               jmp  getanother
.0a4c	8d 56 0a	goodone        sta  tempbyte
.0a4f	20 cf 22	               jsr  pop
.0a52	ad 56 0a	               lda  tempbyte
.0a55	60		               rts
>0a56	00		tempbyte       .byte     0
.0a57			copychar
.0a57	20 90 22	               jsr  push
.0a5a	20 93 0a	               jsr  getvalidkey
.0a5d	ad 73 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0a60	85 fb		               sta  zpage1
.0a62	ad 74 09	               lda  bitmapaddr+1
.0a65	85 fc		               sta  zpage1+1
.0a67	ae c9 0a	               ldx  copykey
.0a6a	bd 9c 25	               lda  asciitorom,x
.0a6d	aa		               tax
.0a6e	e0 00		               cpx  #$00
.0a70	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0a72	a9 08		addagain       lda  #$08
.0a74	20 87 12	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0a77	ca		               dex                 ; pour chaque caracteres
.0a78	d0 f8		               bne  addagain
.0a7a	ad 83 09	no_offset      lda  mapaddr        ; le caractere actuel
.0a7d	85 fd		               sta  zpage2         ;
.0a7f	ad 84 09	               lda  mapaddr+1      ;
.0a82	85 fe		               sta  zpage2+1       ;
.0a84	a0 00		               ldy  #$00
.0a86	b1 fb		nextbyte       lda  (zpage1),y
.0a88	91 fd		               sta  (zpage2),y
.0a8a	c8		               iny
.0a8b	c0 08		               cpy  #$08
.0a8d	d0 f7		               bne  nextbyte
.0a8f	20 cf 22	out            jsr  pop
.0a92	60		               rts
.0a93			getvalidkey
.0a93	20 90 22	               jsr  push
.0a96	20 90 22	               jsr  push
.0a99	a2 a6		               ldx  #<blankmsg
.0a9b	a0 1a		               ldy  #>blankmsg
.0a9d	20 28 22	               jsr  putscxy
.0aa0	a2 02		               ldx  #<copychar_msg
.0aa2	a0 1d		               ldy  #>copychar_msg
.0aa4	20 28 22	               jsr  putscxy
.0aa7	20 cf 22	               jsr  pop
.0aaa	20 c1 26	getgoodkey     jsr  getkey
.0aad	8d c9 0a	               sta  copykey
.0ab0	aa		               tax
.0ab1	bc 9c 25	               ldy  asciitorom,x
.0ab4	c4 00		               cpy  $00
.0ab6	d0 0a		               bne  goodone
.0ab8	ae c9 0a	               ldx  copykey
.0abb	e0 40		               cpx  #$40
.0abd	f0 03		               beq  goodone
.0abf	4c aa 0a	               jmp  getgoodkey
.0ac2	20 99 21	goodone        jsr  putch
.0ac5	20 cf 22	               jsr  pop
.0ac8	60		               rts
>0ac9	00		copykey        .byte 0
.0aca			drawcredits
.0aca	20 90 22	               jsr  push
.0acd	20 82 21	               jsr  cls
.0ad0	a2 a2		               ldx #<whoami0
.0ad2	a0 1d		               ldy #>whoami0
.0ad4	20 28 22	               jsr putscxy
.0ad7	a2 c7		               ldx #<whoami1
.0ad9	a0 1d		               ldy #>whoami1
.0adb	20 28 22	               jsr putscxy
.0ade	a2 ee		               ldx #<whoami2
.0ae0	a0 1d		               ldy #>whoami2
.0ae2	20 28 22	               jsr putscxy
.0ae5	a2 13		               ldx #<whoami3
.0ae7	a0 1e		               ldy #>whoami3
.0ae9	20 28 22	               jsr putscxy
.0aec	a2 38		               ldx #<whoami4
.0aee	a0 1e		               ldy #>whoami4
.0af0	20 28 22	               jsr putscxy
.0af3	a2 5d		               ldx #<whoami5
.0af5	a0 1e		               ldy #>whoami5
.0af7	20 28 22	               jsr putscxy
.0afa	a2 82		               ldx #<whoami6
.0afc	a0 1e		               ldy #>whoami6
.0afe	20 28 22	               jsr putscxy
.0b01	a2 a7		               ldx #<whoami7
.0b03	a0 1e		               ldy #>whoami7
.0b05	20 28 22	               jsr putscxy
.0b08	a2 cc		               ldx #<whoami8
.0b0a	a0 1e		               ldy #>whoami8
.0b0c	20 28 22	               jsr putscxy
.0b0f	a2 f1		               ldx #<whoami9
.0b11	a0 1e		               ldy #>whoami9
.0b13	20 28 22	               jsr putscxy
.0b16	20 a5 12	               jsr  delay
.0b19	20 a5 12	               jsr  delay
.0b1c	20 a5 12	               jsr  delay
.0b1f	20 a5 12	               jsr  delay
.0b22	20 a5 12	               jsr  delay
.0b25	20 cf 22	               jsr  pop
.0b28	60		               rts
.0b29			setdefaultchar
.0b29	20 90 22	               jsr  push
.0b2c	a9 40		               lda  #$40
.0b2e	8d 80 09	               sta  currentkey
.0b31	aa		               tax
.0b32	bc 9c 25	               ldy  asciitorom,x
.0b35	8c 82 09	               sty  bitmapoffset
.0b38	20 f3 0b	               jsr  drawkeyval
.0b3b	20 a8 0f	               jsr  drawbitmap
.0b3e	20 90 22	               jsr  push
.0b41	a2 0d		               ldx  #13
.0b43	a0 0c		               ldy  #12
.0b45	20 b9 21	               jsr  gotoxy
.0b48	20 cf 22	               jsr  pop
.0b4b	20 99 21	               jsr  putch
.0b4e	20 90 22	               jsr  push
.0b51	a2 11		               ldx  #17
.0b53	a0 05		               ldy  #5
.0b55	20 b9 21	               jsr  gotoxy
.0b58	20 cf 22	               jsr  pop
.0b5b	20 56 25	               jsr  atodec
.0b5e	20 90 22	               jsr  push
.0b61	a2 5a		isx            ldx  #<adec
.0b63	a0 24		isy            ldy  #>adec
.0b65	20 9f 21	               jsr  puts
.0b68	20 cf 22	               jsr  pull
.0b6b	20 cf 22	               jsr  pop
.0b6e	60		               rts
.0b6f			resetmenuacolor
.0b6f	20 90 22	               jsr  push
.0b72	a9 03		               lda  #menu1col1
.0b74	8d 90 1f	               sta  f1abutton
.0b77	8d c6 1f	               sta  f3abutton
.0b7a	8d fc 1f	               sta  f5abutton
.0b7d	8d 32 20	               sta  f7abutton
.0b80	a9 0e		               lda  #menu1col2
.0b82	8d ab 1f	               sta  f2abutton
.0b85	8d e1 1f	               sta  f4abutton
.0b88	8d 17 20	               sta  f6abutton
.0b8b	8d 4d 20	               sta  f8abutton
.0b8e	20 cf 22	               jsr  pop
.0b91	60		               rts
.0b92			resetmenubcolor
.0b92	20 90 22	               jsr  push
.0b95	a9 0f		               lda  #menu2col1
.0b97	8d 68 20	               sta  f1bbutton
.0b9a	8d 9e 20	               sta  f3bbutton
.0b9d	8d d4 20	               sta  f5bbutton
.0ba0	8d 0a 21	               sta  f7bbutton
.0ba3	a9 0f		               lda  #menu2col1
.0ba5	8d 83 20	               sta  f2bbutton
.0ba8	8d b9 20	               sta  f4bbutton
.0bab	8d ef 20	               sta  f6bbutton
.0bae	8d 25 21	               sta  f8bbutton
.0bb1	20 cf 22	               jsr  pop
.0bb4	60		               rts
.0bb5			setmenuacolor
.0bb5	20 90 22	               jsr  push
.0bb8	8d 90 1f	               sta  f1abutton
.0bbb	8d ab 1f	               sta  f2abutton
.0bbe	8d c6 1f	               sta  f3abutton
.0bc1	8d e1 1f	               sta  f4abutton
.0bc4	8d fc 1f	               sta  f5abutton
.0bc7	8d 17 20	               sta  f6abutton
.0bca	8d 32 20	               sta  f7abutton
.0bcd	8d 4d 20	               sta  f8abutton
.0bd0	20 cf 22	               jsr  pop
.0bd3	60		               rts
.0bd4			setmenubcolor
.0bd4	20 90 22	               jsr  push
.0bd7	8d 68 20	               sta  f1bbutton
.0bda	8d 83 20	               sta  f2bbutton
.0bdd	8d 9e 20	               sta  f3bbutton
.0be0	8d b9 20	               sta  f4bbutton
.0be3	8d d4 20	               sta  f5bbutton
.0be6	8d ef 20	               sta  f6bbutton
.0be9	8d 0a 21	               sta  f7bbutton
.0bec	8d 25 21	               sta  f8bbutton
.0bef	20 cf 22	               jsr  pop
.0bf2	60		               rts
.0bf3			drawkeyval
.0bf3	20 90 22	               jsr  push
.0bf6	20 90 22	               jsr  push
.0bf9	a2 01		               ldx  #1
.0bfb	a0 13		               ldy  #19
.0bfd	20 b9 21	               jsr  gotoxy
.0c00	20 cf 22	               jsr  pop
.0c03	ad 80 09	               lda  currentkey
.0c06	20 99 21	               jsr  putch
.0c09	48		               pha
.0c0a	a9 3d		               lda  #'='
.0c0c	20 99 21	               jsr  putch
.0c0f	a9 25		               lda  #'%'
.0c11	20 99 21	               jsr  putch
.0c14	68		               pla
.0c15	20 1c 25	               jsr  putabin
.0c18	20 90 22	               jsr  push
.0c1b	a2 01		               ldx  #1
.0c1d	a0 14		               ldy  #20
.0c1f	20 b9 21	               jsr  gotoxy
.0c22	20 cf 22	               jsr  pop
.0c25	20 90 22	               jsr  push
.0c28	a2 f4		isx            ldx  #<txt1
.0c2a	a0 0c		isy            ldy  #>txt1
.0c2c	20 9f 21	               jsr  puts
.0c2f	20 cf 22	               jsr  pull
.0c32	a9 24		               lda  #'$'
.0c34	20 99 21	               jsr  putch
.0c37	ad 80 09	               lda  currentkey
.0c3a	20 89 24	               jsr  putahex
.0c3d	20 90 22	               jsr  push
.0c40	a2 01		               ldx  #1
.0c42	a0 15		               ldy  #21
.0c44	20 b9 21	               jsr  gotoxy
.0c47	20 cf 22	               jsr  pop
.0c4a	20 90 22	               jsr  push
.0c4d	a2 ff		isx            ldx  #<txt2
.0c4f	a0 0c		isy            ldy  #>txt2
.0c51	20 9f 21	               jsr  puts
.0c54	20 cf 22	               jsr  pull
.0c57	a9 24		               lda  #'$'
.0c59	20 99 21	               jsr  putch
.0c5c	ad 74 09	               lda  bitmapaddr+1
.0c5f	20 89 24	               jsr  putahex
.0c62	ad 73 09	               lda  bitmapaddr
.0c65	20 89 24	               jsr  putahex
.0c68	20 90 22	               jsr  push
.0c6b	a2 01		               ldx  #1
.0c6d	a0 16		               ldy  #22
.0c6f	20 b9 21	               jsr  gotoxy
.0c72	20 cf 22	               jsr  pop
.0c75	20 90 22	               jsr  push
.0c78	a2 0a		isx            ldx  #<txt3
.0c7a	a0 0d		isy            ldy  #>txt3
.0c7c	20 9f 21	               jsr  puts
.0c7f	20 cf 22	               jsr  pull
.0c82	a9 24		               lda  #'$'
.0c84	20 99 21	               jsr  putch
.0c87	ad 82 09	               lda  bitmapoffset
.0c8a	20 89 24	               jsr  putahex
.0c8d	20 90 22	               jsr  push
.0c90	a2 01		               ldx  #1
.0c92	a0 17		               ldy  #23
.0c94	20 b9 21	               jsr  gotoxy
.0c97	20 cf 22	               jsr  pop
.0c9a	20 90 22	               jsr  push
.0c9d	a2 17		isx            ldx  #<txt4
.0c9f	a0 0d		isy            ldy  #>txt4
.0ca1	20 9f 21	               jsr  puts
.0ca4	20 cf 22	               jsr  pull
.0ca7	a9 24		               lda  #'$'
.0ca9	20 99 21	               jsr  putch
.0cac	ad 84 09	               lda  mapaddr+1
.0caf	20 89 24	               jsr  putahex
.0cb2	ad 83 09	               lda  mapaddr
.0cb5	20 89 24	               jsr  putahex
.0cb8	20 90 22	               jsr  push
.0cbb	a2 01		               ldx  #1
.0cbd	a0 18		               ldy  #24
.0cbf	20 b9 21	               jsr  gotoxy
.0cc2	20 cf 22	               jsr  pop
.0cc5	20 90 22	               jsr  push
.0cc8	a2 22		isx            ldx  #<txt5
.0cca	a0 0d		isy            ldy  #>txt5
.0ccc	20 9f 21	               jsr  puts
.0ccf	20 cf 22	               jsr  pull
.0cd2	ad 8a 09	               lda  curscl
.0cd5	20 89 24	               jsr  putahex
.0cd8	a9 da		               lda  #$da
.0cda	20 99 21	               jsr  putch
.0cdd	ad 89 09	               lda  cursln
.0ce0	20 89 24	               jsr  putahex
.0ce3	20 cf 22	               jsr  pop
.0ce6	60		               rts
>0ce7	50 45 54 53	txt0           .null     "petscii :   "
>0ceb	43 49 49 20 3a 20 20 20 00
>0cf4	4b 45 59 20	txt1           .null     "key code: "
>0cf8	43 4f 44 45 3a 20 00
>0cff	42 49 54 4d	txt2           .null     "bitmap..: "
>0d03	41 50 2e 2e 3a 20 00
>0d0a	4f 46 46 53	txt3           .null     "offset..:   "
>0d0e	45 54 2e 2e 3a 20 20 20 00
>0d17	4d 41 50 41	txt4           .null     "mapaddr.: "
>0d1b	44 44 52 2e 3a 20 00
>0d22	43 55 52 53	txt5           .null     "cursval.: "
>0d26	56 41 4c 2e 3a 20 00
>0d2d	53 54 41 43	txt6           .null     "stack......:"
>0d31	4b 2e 2e 2e 2e 2e 2e 3a 00
.0d3a			keyaction
.0d3a	20 90 22	               jsr  push
.0d3d	20 c1 26	loop           jsr  getkey
.0d40	c9 85		f1             cmp  #key_f1
.0d42	d0 03		               bne  f2
.0d44	4c c2 0d	               jmp  dof1
.0d47	c9 89		f2             cmp  #key_f2
.0d49	d0 03		               bne  f3
.0d4b	4c c8 0d	               jmp  dof2
.0d4e	c9 86		f3             cmp  #key_f3
.0d50	d0 03		               bne  f4
.0d52	4c ce 0d	               jmp  dof3
.0d55	c9 8a		f4             cmp  #key_f4
.0d57	d0 03		               bne  f5
.0d59	4c d4 0d	               jmp  dof4
.0d5c	c9 87		f5             cmp  #key_f5
.0d5e	d0 03		               bne  f6
.0d60	4c da 0d	               jmp  dof5
.0d63	c9 8b		f6             cmp  #key_f6
.0d65	d0 03		               bne  f7
.0d67	4c e0 0d	               jmp  dof6
.0d6a	c9 88		f7             cmp  #key_f7
.0d6c	d0 03		               bne  f8
.0d6e	4c e6 0d	               jmp  dof7
.0d71	c9 8c		f8             cmp  #key_f8
.0d73	d0 03		               bne  ctrlx
.0d75	4c ec 0d	               jmp  dof8
.0d78	c9 18		ctrlx          cmp  #ctrl_x
.0d7a	d0 03		               bne  ctrlr
.0d7c	4c f2 0d	               jmp  doquit
.0d7f	c9 12		ctrlr          cmp  #ctrl_r
.0d81	d0 06		               bne  ishex14
.0d83	20 a5 09	               jsr  screenredraw
.0d86	4c 3d 0d	               jmp  loop
.0d89	c9 14		ishex14        cmp  #$14
.0d8b	d0 03		               bne  ishex12
.0d8d	4c 3d 0d	               jmp  loop
.0d90	c9 12		ishex12        cmp  #$12
.0d92	d0 03		               bne  reste
.0d94	4c 3d 0d	               jmp  loop
.0d97			reste
.0d97	20 90 22	               jsr  push
.0d9a	a2 0d		               ldx  #13
.0d9c	a0 0c		               ldy  #12
.0d9e	20 b9 21	               jsr  gotoxy
.0da1	20 cf 22	               jsr  pop
.0da4	20 99 21	               jsr  putch
.0da7	48		               pha
.0da8	ad 80 09	               lda  currentkey
.0dab	8d 81 09	               sta  previouskey
.0dae	68		               pla
.0daf	8d 80 09	               sta  currentkey
.0db2	aa		               tax
.0db3	bc 9c 25	               ldy  asciitorom,x
.0db6	8c 82 09	               sty  bitmapoffset
.0db9	20 f3 0b	               jsr  drawkeyval
.0dbc	20 a8 0f	               jsr  drawbitmap
.0dbf	4c 3d 0d	               jmp  loop
.0dc2	20 bb 12	dof1           jsr  f1action  ;edit/reverse
.0dc5	4c 3d 0d	               jmp  loop
.0dc8	20 e0 13	dof2           jsr  f2action  ;save/flip vert
.0dcb	4c 3d 0d	               jmp  loop
.0dce	20 98 14	dof3           jsr  f3action  ;load/flip horz
.0dd1	4c 3d 0d	               jmp  loop
.0dd4	20 79 15	dof4           jsr  f4action  ;copy/scroll r
.0dd7	4c 3d 0d	               jmp  loop
.0dda	20 5d 16	dof5           jsr  f5action  ;clear/scroll l
.0ddd	4c 3d 0d	               jmp  loop
.0de0	20 15 17	dof6           jsr  f6action  ;fill;/scroll up
.0de3	4c 3d 0d	               jmp  loop
.0de6	20 cd 17	dof7           jsr  f7action  ;clear;/scroll down
.0de9	4c 3d 0d	               jmp  loop
.0dec	20 8a 18	dof8           jsr  f8action  ; function
.0def	4c 3d 0d	               jmp  loop
.0df2	20 cf 22	doquit         jsr  pop
.0df5	60		               rts
.0df6			editor
.0df6	20 90 22	               jsr  push
.0df9	20 90 22	               jsr  push
.0dfc	a2 a6		               ldx  #<blankmsg
.0dfe	a0 1a		               ldy  #>blankmsg
.0e00	20 28 22	               jsr  putscxy
.0e03	a2 8d		               ldx  #<exit_msg
.0e05	a0 1d		               ldy  #>exit_msg
.0e07	20 28 22	               jsr  putscxy
.0e0a	20 cf 22	               jsr  pop
.0e0d	20 90 22	               jsr  push
.0e10	a2 a6		               ldx  #<blankmsg
.0e12	a0 1a		               ldy  #>blankmsg
.0e14	20 28 22	               jsr  putscxy
.0e17	a2 14		               ldx  #<edit_msg
.0e19	a0 1b		               ldy  #>edit_msg
.0e1b	20 28 22	               jsr  putscxy
.0e1e	20 cf 22	               jsr  pop
.0e21	20 64 0f	               jsr  setcurs
.0e24	ad 80 09	               lda  currentkey
.0e27	20 90 22	               jsr  push
.0e2a	a2 11		               ldx  #17
.0e2c	a0 05		               ldy  #5
.0e2e	20 b9 21	               jsr  gotoxy
.0e31	20 cf 22	               jsr  pop
.0e34	20 56 25	               jsr  atodec
.0e37	20 90 22	               jsr  push
.0e3a	a2 5a		isx            ldx  #<adec
.0e3c	a0 24		isy            ldy  #>adec
.0e3e	20 9f 21	               jsr  puts
.0e41	20 cf 22	               jsr  pull
.0e44	20 a8 0f	               jsr  drawbitmap
.0e47	20 c1 26	ed_loop        jsr  getkey
.0e4a	c9 85		f1             cmp  #f1key
.0e4c	d0 03		               bne  cu
.0e4e	4c 36 0f	               jmp  do_ctrlx
.0e51	c9 91		cu             cmp  #cursu
.0e53	d0 03		               bne  cd
.0e55	4c e1 0e	               jmp  do_up
.0e58	c9 11		cd             cmp  #cursd
.0e5a	d0 03		               bne  cl
.0e5c	4c f4 0e	               jmp  do_down
.0e5f	c9 9d		cl             cmp  #cursl
.0e61	d0 03		               bne  cr
.0e63	4c 07 0f	               jmp  do_left
.0e66	c9 1d		cr             cmp  #cursr
.0e68	d0 03		               bne  cx
.0e6a	4c 1a 0f	               jmp  do_right
.0e6d	c9 18		cx             cmp  #ctrl_x
.0e6f	d0 03		               bne  sp
.0e71	4c 36 0f	               jmp  do_ctrlx
.0e74	c9 20		sp             cmp  #$20
.0e76	d0 03		               bne  ishex14
.0e78	4c 2d 0f	               jmp  do_swap
.0e7b	c9 14		ishex14        cmp  #$14
.0e7d	d0 03		               bne  ishex12
.0e7f	4c 2d 0f	               jmp  do_swap
.0e82	c9 12		ishex12        cmp  #$12
.0e84	d0 03		               bne  rest
.0e86	4c 2d 0f	               jmp  do_swap
.0e89			rest
.0e89	20 90 22	               jsr  push
.0e8c	a2 0d		               ldx  #13
.0e8e	a0 0c		               ldy  #12
.0e90	20 b9 21	               jsr  gotoxy
.0e93	20 cf 22	               jsr  pop
.0e96	20 99 21	               jsr  putch
.0e99	48		               pha
.0e9a	ad 80 09	               lda  currentkey
.0e9d	8d 81 09	               sta  previouskey
.0ea0	68		               pla
.0ea1	8d 80 09	               sta  currentkey
.0ea4	aa		               tax
.0ea5	bc 9c 25	               ldy  asciitorom,x
.0ea8	8c 82 09	               sty  bitmapoffset
.0eab	20 f3 0b	               jsr  drawkeyval
.0eae	20 a8 0f	               jsr  drawbitmap
.0eb1	20 90 22	               jsr  push
.0eb4	a2 0d		               ldx  #13
.0eb6	a0 0c		               ldy  #12
.0eb8	20 b9 21	               jsr  gotoxy
.0ebb	20 cf 22	               jsr  pop
.0ebe	20 99 21	               jsr  putch
.0ec1	20 90 22	               jsr  push
.0ec4	a2 11		               ldx  #17
.0ec6	a0 05		               ldy  #5
.0ec8	20 b9 21	               jsr  gotoxy
.0ecb	20 cf 22	               jsr  pop
.0ece	20 56 25	               jsr  atodec
.0ed1	20 90 22	               jsr  push
.0ed4	a2 5a		isx            ldx  #<adec
.0ed6	a0 24		isy            ldy  #>adec
.0ed8	20 9f 21	               jsr  puts
.0edb	20 cf 22	               jsr  pull
.0ede	4c 33 0f	               jmp  totop
.0ee1	ad 89 09	do_up          lda  cursln
.0ee4	c9 09		               cmp  #grid_top
.0ee6	f0 4b		               beq  totop
.0ee8	20 86 0f	               jsr  clrcurs
.0eeb	ce 89 09	               dec  cursln
.0eee	20 64 0f	               jsr  setcurs
.0ef1	4c 33 0f	               jmp  totop
.0ef4	ad 89 09	do_down        lda  cursln
.0ef7	c9 10		               cmp  #grid_bot
.0ef9	f0 38		               beq  totop
.0efb	20 86 0f	               jsr  clrcurs
.0efe	ee 89 09	               inc  cursln
.0f01	20 64 0f	               jsr  setcurs
.0f04	4c 33 0f	               jmp  totop
.0f07	ad 8a 09	do_left        lda  curscl
.0f0a	c9 01		               cmp  #grid_left
.0f0c	f0 25		               beq  totop
.0f0e	20 86 0f	               jsr  clrcurs
.0f11	ce 8a 09	               dec  curscl
.0f14	20 64 0f	               jsr  setcurs
.0f17	4c 33 0f	               jmp  totop
.0f1a	ad 8a 09	do_right       lda  curscl
.0f1d	c9 08		               cmp  #grid_right
.0f1f	f0 12		               beq  totop
.0f21	20 86 0f	               jsr  clrcurs
.0f24	ee 8a 09	               inc  curscl
.0f27	20 64 0f	               jsr  setcurs
.0f2a	4c 33 0f	               jmp  totop
.0f2d	20 3d 0f	do_swap        jsr  do_eor
.0f30	20 a8 0f	               jsr  drawbitmap
.0f33	4c 47 0e	totop          jmp  ed_loop
.0f36	20 86 0f	do_ctrlx       jsr  clrcurs
.0f39	20 cf 22	               jsr  pop
.0f3c	60		               rts
.0f3d			do_eor
.0f3d	20 90 22	               jsr  push
.0f40	ad 83 09	               lda  mapaddr
.0f43	85 fd		               sta  zpage2
.0f45	ad 84 09	               lda  mapaddr+1
.0f48	85 fe		               sta  zpage2+1
.0f4a	ae 89 09	               ldx  cursln     ; calcul de
.0f4d	ca		               dex            ; l'offset de
.0f4e	8a		               txa            ; la
.0f4f	29 f7		               and  #$f7      ; ligne
.0f51	a8		               tay
.0f52	ae 8a 09	               ldx  curscl
.0f55	ca		               dex
.0f56	bd 75 09	               lda  eorval,x
.0f59	51 fd		               eor  (zpage2),y
.0f5b	20 f3 0b	               jsr  drawkeyval
.0f5e	91 fd		               sta  (zpage2),y
.0f60	20 cf 22	               jsr  pop
.0f63	60		               rts
.0f64			setcurs
.0f64	20 90 22	               jsr  push
.0f67	a2 01		               ldx  #grid_left
.0f69	ac 89 09	               ldy  cursln
.0f6c	20 b9 21	               jsr  gotoxy
.0f6f	a9 da		               lda  #$da
.0f71	20 99 21	               jsr  putch
.0f74	ae 8a 09	               ldx  curscl
.0f77	e8		               inx
.0f78	a0 08		               ldy  #grid_top-1
.0f7a	20 b9 21	               jsr  gotoxy
.0f7d	a9 da		               lda  #$da
.0f7f	20 99 21	               jsr  putch
.0f82	20 cf 22	               jsr  pop
.0f85	60		               rts
.0f86			clrcurs
.0f86	20 90 22	               jsr  push
.0f89	a2 01		               ldx  #grid_left
.0f8b	ac 89 09	               ldy  cursln
.0f8e	20 b9 21	               jsr  gotoxy
.0f91	a9 20		               lda  #$20
.0f93	20 99 21	               jsr  putch
.0f96	ae 8a 09	               ldx  curscl
.0f99	e8		               inx
.0f9a	a0 08		               ldy  #grid_top-1
.0f9c	20 b9 21	               jsr  gotoxy
.0f9f	a9 20		               lda  #$20
.0fa1	20 99 21	               jsr  putch
.0fa4	20 cf 22	               jsr  pop
.0fa7	60		               rts
.0fa8			drawbitmap
.0fa8	20 90 22	               jsr  push
.0fab	20 0f 10	               jsr  calcmapaddr
.0fae	ad 83 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0fb1	85 fb		               sta  zpage1
.0fb3	ad 84 09	               lda  mapaddr+1
.0fb6	85 fc		               sta  zpage1+1
.0fb8	a0 00		drawchar       ldy  #$00
.0fba	a2 09		               ldx  #grid_top      ;on replace la ...
.0fbc	8e c5 0f	               stx  isy+1          ;ligne de départ
.0fbf	20 90 22	nextline       jsr  push
.0fc2	a2 02		               ldx  #grid_left+1        ; la colonne
.0fc4	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0fc6	20 b9 21	               jsr  gotoxy
.0fc9	20 cf 22	               jsr  pop
.0fcc	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0fce	20 fa 24	               jsr  atobin
.0fd1	20 3e 10	               jsr  abintograph
.0fd4	20 90 22	               jsr  push
.0fd7	a2 51		isx            ldx  #<abin
.0fd9	a0 24		isy            ldy  #>abin
.0fdb	20 9f 21	               jsr  puts
.0fde	20 cf 22	               jsr  pull
.0fe1	ee c5 0f	               inc  isy+1
.0fe4	c8		               iny
.0fe5	c0 08		               cpy  #$08
.0fe7	30 d6		               bmi  nextline
.0fe9	20 f0 0f	               jsr  highlight
.0fec	20 cf 22	               jsr  pop
.0fef	60		               rts
.0ff0			highlight
.0ff0	20 90 22	               jsr  push
.0ff3	ae 81 09	               ldx  previouskey
.0ff6	bd 9c 25	               lda  asciitorom,x
.0ff9	aa		               tax
.0ffa	a9 0f		               lda  #charscolor
.0ffc	9d 00 d8	               sta  colorram,x
.0fff	ae 80 09	               ldx  currentkey
.1002	bd 9c 25	               lda  asciitorom,x
.1005	aa		               tax
.1006	a9 01		               lda  #charcolor
.1008	9d 00 d8	               sta  colorram,x
.100b	20 cf 22	               jsr  pop
.100e	60		               rts
.100f			calcmapaddr
.100f	20 90 22	               jsr  push
.1012	ad 73 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.1015	85 fb		               sta  zpage1
.1017	ad 74 09	               lda  bitmapaddr+1
.101a	85 fc		               sta  zpage1+1
.101c	ae 82 09	               ldx  bitmapoffset
.101f	e0 00		               cpx  #$00
.1021	f0 08		               beq  thesame         ; sommes nous déja à 0
.1023	a9 08		addagain       lda  #$08
.1025	20 87 12	               jsr  zp1addnum      ; on augmente de 8 byte ...
.1028	ca		               dex                 ; pour chaque caracteres
.1029	d0 f8		               bne  addagain
.102b	48		thesame        pha
.102c	a5 fb		               lda  zpage1
.102e	8d 83 09	               sta  mapaddr
.1031	a5 fc		               lda  zpage1+1
.1033	8d 84 09	               sta  mapaddr+1
.1036	68		               pla
.1037	20 f3 0b	               jsr  drawkeyval
.103a	20 cf 22	out            jsr  pop
.103d	60		               rts
.103e			abintograph
.103e	20 90 22	               jsr  push
.1041	a9 51		               lda  #<abin
.1043	85 fb		               sta  zpage1
.1045	a9 24		               lda  #>abin+1
.1047	85 fc		               sta  zpage1+1
.1049	a0 00		               ldy  #$00
.104b	b1 fb		nextbit        lda  (zpage1),y
.104d	c9 30		               cmp  #$30
.104f	f0 07		               beq  itszero
.1051	a9 d1		itsone         lda  #$d1
.1053	91 fb		               sta  (zpage1),y
.1055	4c 5c 10	               jmp  next
.1058	a9 2e		itszero        lda  #$2e
.105a	91 fb		               sta  (zpage1),y
.105c	c8		next           iny
.105d	c0 08		               cpy  #$08
.105f	30 ea		               bmi  nextbit
.1061	20 cf 22	               jsr  pop
.1064	60		               rts
.1065			setscreenptr
.1065	20 90 22	               jsr  push
.1068	a9 08		               lda  #$08      ; basic commande to disable ...
.106a	20 d2 ff	               jsr  chrout    ; ... character set change.
.106d	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.1070	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.1072	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.1074	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.1077	20 cf 22	               jsr  pop
.107a	60		               rts
.107b			copycharset
.107b	20 90 22	               jsr  push
.107e	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.1081	29 fe		               and  #%11111110     ;254
.1083	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.1086	a5 01		               lda  u6510map       ;$01
.1088	29 fb		               and  #%11111011     ;251
.108a	85 01		               sta  u6510map       ;$01
.108c	20 a1 10	               jsr  memcopy
.108f	a5 01		               lda  u6510map       ;$01
.1091	09 04		               ora  #%00000100
.1093	85 01		               sta  u6510map       ;$01
.1095	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.1098	09 01		               ora  #%00000001     ;254
.109a	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.109d	20 cf 22	               jsr  pop
.10a0	60		               rts
.10a1			memcopy
.10a1	20 90 22	               jsr  push
.10a4	ad 6f 09	               lda  startaddr
.10a7	85 fb		               sta  zpage1
.10a9	ad 70 09	               lda  startaddr+1
.10ac	85 fc		               sta  zpage1+1
.10ae	ad 73 09	               lda  bitmapaddr
.10b1	85 fd		               sta  zpage2
.10b3	ad 74 09	               lda  bitmapaddr+1
.10b6	85 fe		               sta  zpage2+1
.10b8	a0 00		               ldy  #$00
.10ba	b1 fb		onemore        lda  (zpage1),y
.10bc	91 fd		               sta  (zpage2),y
.10be	20 97 23	               jsr  inczp1
.10c1	20 af 23	               jsr  inczp2
.10c4	a5 fc		               lda  zpage1+1
.10c6	cd 72 09	               cmp  stopaddr+1
.10c9	d0 ef		               bne  onemore
.10cb	a5 fb		               lda  zpage1
.10cd	cd 71 09	               cmp  stopaddr
.10d0	d0 e8		               bne  onemore
.10d2	20 cf 22	               jsr  pop
.10d5	60		               rts
.10d6			staticscreen
.10d6	48		               pha
.10d7	a9 0b		               lda  #bordure
.10d9	8d 20 d0	               sta  $d020
.10dc	68		               pla
.10dd	48		               pha
.10de	a9 00		               lda  #fond
.10e0	8d 21 d0	               sta  $d021
.10e3	68		               pla
.10e4	20 de 11	               jsr  drawlines
.10e7	20 ba 11	               jsr  drawallchars
.10ea	20 26 12	               jsr  drawgrid
.10ed	20 2b 11	               jsr  drawfkeys
.10f0	a9 0a		               lda  #vrose
.10f2	8d 75 1d	               sta  redraw_msg
.10f5	20 90 22	               jsr  push
.10f8	a2 a6		               ldx  #<blankmsg
.10fa	a0 1a		               ldy  #>blankmsg
.10fc	20 28 22	               jsr  putscxy
.10ff	a2 75		               ldx  #<redraw_msg
.1101	a0 1d		               ldy  #>redraw_msg
.1103	20 28 22	               jsr  putscxy
.1106	20 cf 22	               jsr  pop
.1109	20 90 22	               jsr  push
.110c	a2 a6		               ldx  #<blankmsg
.110e	a0 1a		               ldy  #>blankmsg
.1110	20 28 22	               jsr  putscxy
.1113	a2 60		               ldx  #<quit_msg
.1115	a0 1d		               ldy  #>quit_msg
.1117	20 28 22	               jsr  putscxy
.111a	20 cf 22	               jsr  pop
.111d	20 90 22	               jsr  push
.1120	a2 00		               ldx  #0
.1122	a0 07		               ldy  #7
.1124	20 b9 21	               jsr  gotoxy
.1127	20 cf 22	               jsr  pop
.112a	60		               rts
.112b			drawfkeys
.112b	20 90 22	               jsr  push
.112e	ad 7e 09	               lda  fkeyset
.1131	c9 00		               cmp  #$0
.1133	d0 42		               bne  secondks
.1135	a2 5a		               ldx #<titremenu1
.1137	a0 1f		               ldy #>titremenu1
.1139	20 28 22	               jsr putscxy
.113c	a2 90		               ldx #<f1abutton
.113e	a0 1f		               ldy #>f1abutton
.1140	20 28 22	               jsr putscxy
.1143	a2 ab		               ldx #<f2abutton
.1145	a0 1f		               ldy #>f2abutton
.1147	20 28 22	               jsr putscxy
.114a	a2 c6		               ldx #<f3abutton
.114c	a0 1f		               ldy #>f3abutton
.114e	20 28 22	               jsr putscxy
.1151	a2 e1		               ldx #<f4abutton
.1153	a0 1f		               ldy #>f4abutton
.1155	20 28 22	               jsr putscxy
.1158	a2 fc		               ldx #<f5abutton
.115a	a0 1f		               ldy #>f5abutton
.115c	20 28 22	               jsr putscxy
.115f	a2 17		               ldx #<f6abutton
.1161	a0 20		               ldy #>f6abutton
.1163	20 28 22	               jsr putscxy
.1166	a2 32		               ldx #<f7abutton
.1168	a0 20		               ldy #>f7abutton
.116a	20 28 22	               jsr putscxy
.116d	a2 4d		               ldx #<f8abutton
.116f	a0 20		               ldy #>f8abutton
.1171	20 28 22	               jsr putscxy
.1174	4c b6 11	               jmp end
.1177			secondks
.1177	a2 75		               ldx #<titremenu2
.1179	a0 1f		               ldy #>titremenu2
.117b	20 28 22	               jsr putscxy
.117e	a2 68		               ldx #<f1bbutton
.1180	a0 20		               ldy #>f1bbutton
.1182	20 28 22	               jsr putscxy
.1185	a2 83		               ldx #<f2bbutton
.1187	a0 20		               ldy #>f2bbutton
.1189	20 28 22	               jsr putscxy
.118c	a2 9e		               ldx #<f3bbutton
.118e	a0 20		               ldy #>f3bbutton
.1190	20 28 22	               jsr putscxy
.1193	a2 b9		               ldx #<f4bbutton
.1195	a0 20		               ldy #>f4bbutton
.1197	20 28 22	               jsr putscxy
.119a	a2 d4		               ldx #<f5bbutton
.119c	a0 20		               ldy #>f5bbutton
.119e	20 28 22	               jsr putscxy
.11a1	a2 ef		               ldx #<f6bbutton
.11a3	a0 20		               ldy #>f6bbutton
.11a5	20 28 22	               jsr putscxy
.11a8	a2 0a		               ldx #<f7bbutton
.11aa	a0 21		               ldy #>f7bbutton
.11ac	20 28 22	               jsr putscxy
.11af	a2 25		               ldx #<f8bbutton
.11b1	a0 21		               ldy #>f8bbutton
.11b3	20 28 22	               jsr putscxy
.11b6	20 cf 22	end            jsr  pop
.11b9	60		               rts
.11ba			drawallchars
.11ba	20 90 22	               jsr push
.11bd	20 90 22	               jsr  push
.11c0	a2 00		               ldx  #0
.11c2	a0 00		               ldy  #0
.11c4	20 b9 21	               jsr  gotoxy
.11c7	20 cf 22	               jsr  pop
.11ca	a2 00		               ldx  #$00
.11cc	8a		nextc          txa
.11cd	9d 00 04	               sta  scrnnewram,x
.11d0	a9 0f		               lda  #charscolor
.11d2	9d 00 d8	               sta  colorram,x
.11d5	e8		               inx
.11d6	e0 80		               cpx  #$80
.11d8	d0 f2		               bne  nextc
.11da	20 cf 22	               jsr  pop
.11dd	60		               rts
.11de			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.11de	20 90 22	               jsr  push
.11e1	a2 28		               ldx  #40
.11e3	a9 40		               lda  #64
.11e5	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.11e8	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.11eb	ca		               dex
.11ec	e0 10		hline          cpx  #vlinepos
.11ee	10 03		               bpl  notyet
.11f0	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.11f3	e0 00		notyet         cpx  #$00
.11f5	d0 ee		               bne  nextl
.11f7	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.11f9	85 fb		               sta  zpage1
.11fb	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.11fd	85 fc		               sta  zpage1+1
.11ff	a0 00		               ldy  #0
.1201	a9 72		               lda  #114
.1203	91 fb		               sta  (zpage1),y
.1205	20 95 12	               jsr  zp1add40
.1208	a2 12		               ldx  #24-hline2
.120a	a9 5d		               lda  #93
.120c	91 fb		another93      sta  (zpage1),y
.120e	20 95 12	               jsr  zp1add40
.1211	ca		               dex
.1212	d0 f8		               bne  another93
.1214	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.1216	85 fb		               sta  zpage1
.1218	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.121a	85 fc		               sta  zpage1+1
.121c	a0 00		               ldy  #0
.121e	a9 73		               lda  #115
.1220	91 fb		               sta  (zpage1),y
.1222	20 cf 22	               jsr  pop
.1225	60		               rts
.1226			drawgrid
.1226	20 90 22	               jsr  push
.1229	20 48 21	               jsr  screendis
.122c	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.122e	85 fb		               sta  zpage1
.1230	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.1232	85 fc		               sta  zpage1+1
.1234	a2 08		               ldx  #8
.1236	a9 65		nextbox        lda  #101
.1238	a0 09		               ldy  #9
.123a	91 fb		               sta  (zpage1),y
.123c	88		               dey
.123d	a9 2e		               lda  #$2e
.123f	91 fb		nextcol        sta  (zpage1),y
.1241	88		               dey
.1242	d0 fb		               bne  nextcol
.1244	20 95 12	               jsr  zp1add40
.1247	ca		               dex
.1248	d0 ec		               bne  nextbox
.124a	a0 08		               ldy  #8
.124c	a9 77		               lda  #119
.124e	91 fb		nextlin        sta  (zpage1),y
.1250	88		               dey
.1251	d0 fb		               bne  nextlin
.1253	a9 3e		               lda  #$3e
.1255	8d eb 05	               sta  scrnnewram+(40*(12))+11
.1258	a9 70		               lda  #$70                     ;+
.125a	8d c4 05	               sta  scrnnewram+(40*(11))+12
.125d	a9 43		               lda  #$43                     ;-
.125f	8d c5 05	               sta  scrnnewram+(40*(11))+13
.1262	a9 6e		               lda  #$6e                     ;+
.1264	8d c6 05	               sta  scrnnewram+(40*(11))+14
.1267	a9 5d		               lda  #$5d                     ;|
.1269	8d ec 05	               sta  scrnnewram+(40*(12))+12
.126c	a9 5d		               lda  #$5d                     ;|
.126e	8d ee 05	               sta  scrnnewram+(40*(12))+14
.1271	a9 6d		               lda  #$6d                     ;+
.1273	8d 14 06	               sta  scrnnewram+(40*(13))+12
.1276	a9 43		               lda  #$43                     ;-
.1278	8d 15 06	               sta  scrnnewram+(40*(13))+13
.127b	a9 7d		               lda  #$7d                     ;+
.127d	8d 16 06	               sta  scrnnewram+(40*(13))+14
.1280	20 55 21	               jsr screenena
.1283	20 cf 22	               jsr  pop
.1286	60		               rts
.1287			zp1addnum
.1287	08		               php
.1288	48		               pha
.1289	18		               clc
.128a	65 fb		               adc  zpage1
.128c	90 02		               bcc  nocarry
.128e	e6 fc		               inc  zpage1+1
.1290	85 fb		nocarry        sta  zpage1
.1292	68		               pla
.1293	28		               plp
.1294	60		               rts
.1295			zp1add40
.1295	08		               php
.1296	48		               pha
.1297	18		               clc
.1298	a5 fb		               lda  zpage1
.129a	69 28		               adc  #40
.129c	90 02		               bcc  nocarry
.129e	e6 fc		               inc  zpage1+1
.12a0	85 fb		nocarry        sta  zpage1
.12a2	68		               pla
.12a3	28		               plp
.12a4	60		               rts
.12a5			delay
.12a5	20 90 22	               jsr  push
.12a8	a9 00		               lda  #$0
.12aa	aa		               tax
.12ab	a8		               tay
.12ac	ca		xagain         dex
.12ad	ca		               dex
.12ae	88		yagain         dey
.12af	c0 00		               cpy  #$00
.12b1	d0 fb		               bne  yagain
.12b3	e0 00		               cpx  #$00
.12b5	d0 f5		               bne  xagain
.12b7	20 cf 22	               jsr  pop
.12ba	60		               rts
.12bb			f1action
.12bb	48		               pha
.12bc	a9 ff		               lda  #$ff
.12be	8d 7d 09	               sta  editmode
.12c1	ad 7e 09	               lda  fkeyset
.12c4	f0 03		               beq  menua
.12c6	4c 80 13	               jmp  menub
.12c9			menua
.12c9	20 90 22	               jsr  push
.12cc	a2 a6		               ldx  #<blankmsg
.12ce	a0 1a		               ldy  #>blankmsg
.12d0	20 28 22	               jsr  putscxy
.12d3	a2 14		               ldx  #<f1a_msg
.12d5	a0 1b		               ldy  #>f1a_msg
.12d7	20 28 22	               jsr  putscxy
.12da	20 cf 22	               jsr  pop
.12dd	08		               php
.12de	48		               pha
.12df	8a		               txa
.12e0	48		               pha
.12e1	ad 90 1f	               lda  f1abutton
.12e4	48		               pha
.12e5	a9 92		               lda  #146
.12e7	8d a2 1f	               sta  f1abutton+18
.12ea	a9 01		               lda  #flashcol
.12ec	8d 90 1f	               sta  f1abutton
.12ef	a2 90		               ldx  #<f1abutton
.12f1	a0 1f		               ldy  #>f1abutton
.12f3	20 28 22	               jsr  putscxy
.12f6	20 a5 12	               jsr  delay
.12f9	a9 12		               lda  #18
.12fb	8d a2 1f	               sta  f1abutton+18
.12fe	68		               pla
.12ff	8d 90 1f	               sta  f1abutton
.1302	a2 90		               ldx  #<f1abutton
.1304	a0 1f		               ldy  #>f1abutton
.1306	20 28 22	               jsr  putscxy
.1309	68		               pla
.130a	aa		               tax
.130b	68		               pla
.130c	28		               plp
.130d	a9 0b		               lda  #vgris
.130f	20 b5 0b	               jsr  setmenuacolor
.1312	a9 03		               lda  #menu1col1
.1314	8d 90 1f	               sta  f1abutton
.1317	20 2b 11	               jsr  drawfkeys
.131a	a9 0b		               lda  #vgris
.131c	8d 75 1d	               sta  redraw_msg
.131f	20 90 22	               jsr  push
.1322	a2 a6		               ldx  #<blankmsg
.1324	a0 1a		               ldy  #>blankmsg
.1326	20 28 22	               jsr  putscxy
.1329	a2 75		               ldx  #<redraw_msg
.132b	a0 1d		               ldy  #>redraw_msg
.132d	20 28 22	               jsr  putscxy
.1330	20 cf 22	               jsr  pop
.1333	20 f6 0d	               jsr  editor
.1336	a9 0a		               lda  #vrose
.1338	8d 75 1d	               sta  redraw_msg
.133b	20 90 22	               jsr  push
.133e	a2 a6		               ldx  #<blankmsg
.1340	a0 1a		               ldy  #>blankmsg
.1342	20 28 22	               jsr  putscxy
.1345	a2 75		               ldx  #<redraw_msg
.1347	a0 1d		               ldy  #>redraw_msg
.1349	20 28 22	               jsr  putscxy
.134c	20 cf 22	               jsr  pop
.134f	20 90 22	               jsr  push
.1352	a2 a6		               ldx  #<blankmsg
.1354	a0 1a		               ldy  #>blankmsg
.1356	20 28 22	               jsr  putscxy
.1359	a2 60		               ldx  #<quit_msg
.135b	a0 1d		               ldy  #>quit_msg
.135d	20 28 22	               jsr  putscxy
.1360	20 cf 22	               jsr  pop
.1363	20 90 22	               jsr  push
.1366	a2 a6		               ldx  #<blankmsg
.1368	a0 1a		               ldy  #>blankmsg
.136a	20 28 22	               jsr  putscxy
.136d	a2 b8		               ldx  #<menua_msg
.136f	a0 1c		               ldy  #>menua_msg
.1371	20 28 22	               jsr  putscxy
.1374	20 cf 22	               jsr  pop
.1377	20 6f 0b	               jsr  resetmenuacolor
.137a	20 2b 11	               jsr  drawfkeys
.137d	4c ca 13	               jmp  out
.1380			menub
.1380	20 90 22	               jsr  push
.1383	a2 a6		               ldx  #<blankmsg
.1385	a0 1a		               ldy  #>blankmsg
.1387	20 28 22	               jsr  putscxy
.138a	a2 fc		               ldx  #<f1b_msg
.138c	a0 1b		               ldy  #>f1b_msg
.138e	20 28 22	               jsr  putscxy
.1391	20 cf 22	               jsr  pop
.1394	08		               php
.1395	48		               pha
.1396	8a		               txa
.1397	48		               pha
.1398	ad 68 20	               lda  f1bbutton
.139b	48		               pha
.139c	a9 92		               lda  #146
.139e	8d 7a 20	               sta  f1bbutton+18
.13a1	a9 01		               lda  #flashcol
.13a3	8d 68 20	               sta  f1bbutton
.13a6	a2 68		               ldx  #<f1bbutton
.13a8	a0 20		               ldy  #>f1bbutton
.13aa	20 28 22	               jsr  putscxy
.13ad	20 a5 12	               jsr  delay
.13b0	a9 12		               lda  #18
.13b2	8d 7a 20	               sta  f1bbutton+18
.13b5	68		               pla
.13b6	8d 68 20	               sta  f1bbutton
.13b9	a2 68		               ldx  #<f1bbutton
.13bb	a0 20		               ldy  #>f1bbutton
.13bd	20 28 22	               jsr  putscxy
.13c0	68		               pla
.13c1	aa		               tax
.13c2	68		               pla
.13c3	28		               plp
.13c4	20 72 1a	               jsr  flipvert
.13c7	20 a8 0f	               jsr  drawbitmap
.13ca	68		out            pla
.13cb	20 90 22	               jsr  push
.13ce	a2 a6		               ldx  #<blankmsg
.13d0	a0 1a		               ldy  #>blankmsg
.13d2	20 28 22	               jsr  putscxy
.13d5	a2 d2		               ldx  #<prompt_msg
.13d7	a0 1a		               ldy  #>prompt_msg
.13d9	20 28 22	               jsr  putscxy
.13dc	20 cf 22	               jsr  pop
.13df	60		               rts
.13e0			f2action
.13e0	48		               pha
.13e1	a9 00		               lda  #$0
.13e3	8d 7d 09	               sta  editmode
.13e6	ad 7e 09	               lda  fkeyset
.13e9	d0 4d		               bne  menub
.13eb	20 90 22	               jsr  push
.13ee	a2 a6		               ldx  #<blankmsg
.13f0	a0 1a		               ldy  #>blankmsg
.13f2	20 28 22	               jsr  putscxy
.13f5	a2 2f		               ldx  #<f2a_msg
.13f7	a0 1b		               ldy  #>f2a_msg
.13f9	20 28 22	               jsr  putscxy
.13fc	20 cf 22	               jsr  pop
.13ff	08		               php
.1400	48		               pha
.1401	8a		               txa
.1402	48		               pha
.1403	ad ab 1f	               lda  f2abutton
.1406	48		               pha
.1407	a9 92		               lda  #146
.1409	8d bd 1f	               sta  f2abutton+18
.140c	a9 01		               lda  #flashcol
.140e	8d ab 1f	               sta  f2abutton
.1411	a2 ab		               ldx  #<f2abutton
.1413	a0 1f		               ldy  #>f2abutton
.1415	20 28 22	               jsr  putscxy
.1418	20 a5 12	               jsr  delay
.141b	a9 12		               lda  #18
.141d	8d bd 1f	               sta  f2abutton+18
.1420	68		               pla
.1421	8d ab 1f	               sta  f2abutton
.1424	a2 ab		               ldx  #<f2abutton
.1426	a0 1f		               ldy  #>f2abutton
.1428	20 28 22	               jsr  putscxy
.142b	68		               pla
.142c	aa		               tax
.142d	68		               pla
.142e	28		               plp
.142f	20 57 0a	               jsr  copychar
.1432	20 a8 0f	               jsr  drawbitmap
.1435	4c 82 14	               jmp  out
.1438			menub
.1438	20 90 22	               jsr  push
.143b	a2 a6		               ldx  #<blankmsg
.143d	a0 1a		               ldy  #>blankmsg
.143f	20 28 22	               jsr  putscxy
.1442	a2 18		               ldx  #<f2b_msg
.1444	a0 1c		               ldy  #>f2b_msg
.1446	20 28 22	               jsr  putscxy
.1449	20 cf 22	               jsr  pop
.144c	08		               php
.144d	48		               pha
.144e	8a		               txa
.144f	48		               pha
.1450	ad 83 20	               lda  f2bbutton
.1453	48		               pha
.1454	a9 92		               lda  #146
.1456	8d 95 20	               sta  f2bbutton+18
.1459	a9 01		               lda  #flashcol
.145b	8d 83 20	               sta  f2bbutton
.145e	a2 83		               ldx  #<f2bbutton
.1460	a0 20		               ldy  #>f2bbutton
.1462	20 28 22	               jsr  putscxy
.1465	20 a5 12	               jsr  delay
.1468	a9 12		               lda  #18
.146a	8d 95 20	               sta  f2bbutton+18
.146d	68		               pla
.146e	8d 83 20	               sta  f2bbutton
.1471	a2 83		               ldx  #<f2bbutton
.1473	a0 20		               ldy  #>f2bbutton
.1475	20 28 22	               jsr  putscxy
.1478	68		               pla
.1479	aa		               tax
.147a	68		               pla
.147b	28		               plp
.147c	20 45 1a	               jsr  fliphorz
.147f	20 a8 0f	               jsr  drawbitmap
.1482	68		out            pla
.1483	20 90 22	               jsr  push
.1486	a2 a6		               ldx  #<blankmsg
.1488	a0 1a		               ldy  #>blankmsg
.148a	20 28 22	               jsr  putscxy
.148d	a2 d2		               ldx  #<prompt_msg
.148f	a0 1a		               ldy  #>prompt_msg
.1491	20 28 22	               jsr  putscxy
.1494	20 cf 22	               jsr  pop
.1497	60		               rts
.1498			f3action
.1498	48		               pha
.1499	a9 00		               lda  #$0
.149b	8d 7d 09	               sta  editmode
.149e	ad 7e 09	               lda  fkeyset
.14a1	d0 76		               bne  menub
.14a3	08		               php
.14a4	48		               pha
.14a5	8a		               txa
.14a6	48		               pha
.14a7	ad c6 1f	               lda  f3abutton
.14aa	48		               pha
.14ab	a9 92		               lda  #146
.14ad	8d d8 1f	               sta  f3abutton+18
.14b0	a9 01		               lda  #flashcol
.14b2	8d c6 1f	               sta  f3abutton
.14b5	a2 c6		               ldx  #<f3abutton
.14b7	a0 1f		               ldy  #>f3abutton
.14b9	20 28 22	               jsr  putscxy
.14bc	20 a5 12	               jsr  delay
.14bf	a9 12		               lda  #18
.14c1	8d d8 1f	               sta  f3abutton+18
.14c4	68		               pla
.14c5	8d c6 1f	               sta  f3abutton
.14c8	a2 c6		               ldx  #<f3abutton
.14ca	a0 1f		               ldy  #>f3abutton
.14cc	20 28 22	               jsr  putscxy
.14cf	68		               pla
.14d0	aa		               tax
.14d1	68		               pla
.14d2	28		               plp
.14d3	20 90 22	               jsr  push
.14d6	a2 a6		               ldx  #<blankmsg
.14d8	a0 1a		               ldy  #>blankmsg
.14da	20 28 22	               jsr  putscxy
.14dd	a2 50		               ldx  #<f3a_msg
.14df	a0 1b		               ldy  #>f3a_msg
.14e1	20 28 22	               jsr  putscxy
.14e4	20 cf 22	               jsr  pop
.14e7	20 c1 26	getagain       jsr  getkey
.14ea	c9 31		               cmp  #$31
.14ec	f0 0b		               beq  devok
.14ee	c9 38		               cmp  #$38
.14f0	f0 07		               beq  devok
.14f2	c9 39		               cmp  #$39
.14f4	f0 03		               beq  devok
.14f6	4c e7 14	               jmp  getagain
.14f9	8d 9d 09	devok          sta  device
.14fc	20 e5 09	               jsr  getfname
.14ff	20 90 22	               jsr  push
.1502	a2 a6		               ldx  #<blankmsg
.1504	a0 1a		               ldy  #>blankmsg
.1506	20 28 22	               jsr  putscxy
.1509	a2 f8		               ldx  #<wait_msg
.150b	a0 1a		               ldy  #>wait_msg
.150d	20 28 22	               jsr  putscxy
.1510	20 cf 22	               jsr  pop
.1513	20 c9 08	               jsr  savetofile
.1516	4c 63 15	               jmp  out
.1519			menub
.1519	20 90 22	               jsr  push
.151c	a2 a6		               ldx  #<blankmsg
.151e	a0 1a		               ldy  #>blankmsg
.1520	20 28 22	               jsr  putscxy
.1523	a2 36		               ldx  #<f3b_msg
.1525	a0 1c		               ldy  #>f3b_msg
.1527	20 28 22	               jsr  putscxy
.152a	20 cf 22	               jsr  pop
.152d	08		               php
.152e	48		               pha
.152f	8a		               txa
.1530	48		               pha
.1531	ad 9e 20	               lda  f3bbutton
.1534	48		               pha
.1535	a9 92		               lda  #146
.1537	8d b0 20	               sta  f3bbutton+18
.153a	a9 01		               lda  #flashcol
.153c	8d 9e 20	               sta  f3bbutton
.153f	a2 9e		               ldx  #<f3bbutton
.1541	a0 20		               ldy  #>f3bbutton
.1543	20 28 22	               jsr  putscxy
.1546	20 a5 12	               jsr  delay
.1549	a9 12		               lda  #18
.154b	8d b0 20	               sta  f3bbutton+18
.154e	68		               pla
.154f	8d 9e 20	               sta  f3bbutton
.1552	a2 9e		               ldx  #<f3bbutton
.1554	a0 20		               ldy  #>f3bbutton
.1556	20 28 22	               jsr  putscxy
.1559	68		               pla
.155a	aa		               tax
.155b	68		               pla
.155c	28		               plp
.155d	20 d0 19	               jsr  scrollright
.1560	20 a8 0f	               jsr  drawbitmap
.1563	68		out            pla
.1564	20 90 22	               jsr  push
.1567	a2 a6		               ldx  #<blankmsg
.1569	a0 1a		               ldy  #>blankmsg
.156b	20 28 22	               jsr  putscxy
.156e	a2 d2		               ldx  #<prompt_msg
.1570	a0 1a		               ldy  #>prompt_msg
.1572	20 28 22	               jsr  putscxy
.1575	20 cf 22	               jsr  pop
.1578	60		               rts
.1579			f4action
.1579	48		               pha
.157a	a9 00		               lda  #$0
.157c	8d 7d 09	               sta  editmode
.157f	ad 7e 09	               lda  fkeyset
.1582	d0 79		               bne  menub
.1584	08		               php
.1585	48		               pha
.1586	8a		               txa
.1587	48		               pha
.1588	ad e1 1f	               lda  f4abutton
.158b	48		               pha
.158c	a9 92		               lda  #146
.158e	8d f3 1f	               sta  f4abutton+18
.1591	a9 01		               lda  #flashcol
.1593	8d e1 1f	               sta  f4abutton
.1596	a2 e1		               ldx  #<f4abutton
.1598	a0 1f		               ldy  #>f4abutton
.159a	20 28 22	               jsr  putscxy
.159d	20 a5 12	               jsr  delay
.15a0	a9 12		               lda  #18
.15a2	8d f3 1f	               sta  f4abutton+18
.15a5	68		               pla
.15a6	8d e1 1f	               sta  f4abutton
.15a9	a2 e1		               ldx  #<f4abutton
.15ab	a0 1f		               ldy  #>f4abutton
.15ad	20 28 22	               jsr  putscxy
.15b0	68		               pla
.15b1	aa		               tax
.15b2	68		               pla
.15b3	28		               plp
.15b4	20 90 22	               jsr  push
.15b7	a2 a6		               ldx  #<blankmsg
.15b9	a0 1a		               ldy  #>blankmsg
.15bb	20 28 22	               jsr  putscxy
.15be	a2 7d		               ldx  #<f4a_msg
.15c0	a0 1b		               ldy  #>f4a_msg
.15c2	20 28 22	               jsr  putscxy
.15c5	20 cf 22	               jsr  pop
.15c8	20 c1 26	getagain       jsr  getkey
.15cb	c9 31		               cmp  #$31
.15cd	f0 0b		               beq  devok
.15cf	c9 38		               cmp  #$38
.15d1	f0 07		               beq  devok
.15d3	c9 39		               cmp  #$39
.15d5	f0 03		               beq  devok
.15d7	4c c8 15	               jmp  getagain
.15da	8d 9d 09	devok          sta  device
.15dd	20 e5 09	               jsr  getfname
.15e0	20 90 22	               jsr  push
.15e3	a2 a6		               ldx  #<blankmsg
.15e5	a0 1a		               ldy  #>blankmsg
.15e7	20 28 22	               jsr  putscxy
.15ea	a2 f8		               ldx  #<wait_msg
.15ec	a0 1a		               ldy  #>wait_msg
.15ee	20 28 22	               jsr  putscxy
.15f1	20 cf 22	               jsr  pop
.15f4	20 1c 09	               jsr  loadfromfile
.15f7	20 a5 09	               jsr  screenredraw
.15fa	4c 47 16	               jmp  out
.15fd			menub
.15fd	20 90 22	               jsr  push
.1600	a2 a6		               ldx  #<blankmsg
.1602	a0 1a		               ldy  #>blankmsg
.1604	20 28 22	               jsr  putscxy
.1607	a2 52		               ldx  #<f4b_msg
.1609	a0 1c		               ldy  #>f4b_msg
.160b	20 28 22	               jsr  putscxy
.160e	20 cf 22	               jsr  pop
.1611	08		               php
.1612	48		               pha
.1613	8a		               txa
.1614	48		               pha
.1615	ad b9 20	               lda  f4bbutton
.1618	48		               pha
.1619	a9 92		               lda  #146
.161b	8d cb 20	               sta  f4bbutton+18
.161e	a9 01		               lda  #flashcol
.1620	8d b9 20	               sta  f4bbutton
.1623	a2 b9		               ldx  #<f4bbutton
.1625	a0 20		               ldy  #>f4bbutton
.1627	20 28 22	               jsr  putscxy
.162a	20 a5 12	               jsr  delay
.162d	a9 12		               lda  #18
.162f	8d cb 20	               sta  f4bbutton+18
.1632	68		               pla
.1633	8d b9 20	               sta  f4bbutton
.1636	a2 b9		               ldx  #<f4bbutton
.1638	a0 20		               ldy  #>f4bbutton
.163a	20 28 22	               jsr  putscxy
.163d	68		               pla
.163e	aa		               tax
.163f	68		               pla
.1640	28		               plp
.1641	20 f5 19	               jsr  scrollleft
.1644	20 a8 0f	               jsr  drawbitmap
.1647	68		out            pla
.1648	20 90 22	               jsr  push
.164b	a2 a6		               ldx  #<blankmsg
.164d	a0 1a		               ldy  #>blankmsg
.164f	20 28 22	               jsr  putscxy
.1652	a2 d2		               ldx  #<prompt_msg
.1654	a0 1a		               ldy  #>prompt_msg
.1656	20 28 22	               jsr  putscxy
.1659	20 cf 22	               jsr  pop
.165c	60		               rts
.165d			f5action
.165d	48		               pha
.165e	a9 00		               lda  #$0
.1660	8d 7d 09	               sta  editmode
.1663	ad 7e 09	               lda  fkeyset
.1666	d0 4d		               bne  menub
.1668	20 90 22	               jsr  push
.166b	a2 a6		               ldx  #<blankmsg
.166d	a0 1a		               ldy  #>blankmsg
.166f	20 28 22	               jsr  putscxy
.1672	a2 a5		               ldx  #<f5a_msg
.1674	a0 1b		               ldy  #>f5a_msg
.1676	20 28 22	               jsr  putscxy
.1679	20 cf 22	               jsr  pop
.167c	08		               php
.167d	48		               pha
.167e	8a		               txa
.167f	48		               pha
.1680	ad fc 1f	               lda  f5abutton
.1683	48		               pha
.1684	a9 92		               lda  #146
.1686	8d 0e 20	               sta  f5abutton+18
.1689	a9 01		               lda  #flashcol
.168b	8d fc 1f	               sta  f5abutton
.168e	a2 fc		               ldx  #<f5abutton
.1690	a0 1f		               ldy  #>f5abutton
.1692	20 28 22	               jsr  putscxy
.1695	20 a5 12	               jsr  delay
.1698	a9 12		               lda  #18
.169a	8d 0e 20	               sta  f5abutton+18
.169d	68		               pla
.169e	8d fc 1f	               sta  f5abutton
.16a1	a2 fc		               ldx  #<f5abutton
.16a3	a0 1f		               ldy  #>f5abutton
.16a5	20 28 22	               jsr  putscxy
.16a8	68		               pla
.16a9	aa		               tax
.16aa	68		               pla
.16ab	28		               plp
.16ac	20 23 1a	               jsr  clearchar
.16af	20 a8 0f	               jsr  drawbitmap
.16b2	4c ff 16	               jmp  out
.16b5			menub
.16b5	20 90 22	               jsr  push
.16b8	a2 a6		               ldx  #<blankmsg
.16ba	a0 1a		               ldy  #>blankmsg
.16bc	20 28 22	               jsr  putscxy
.16bf	a2 6e		               ldx  #<f5b_msg
.16c1	a0 1c		               ldy  #>f5b_msg
.16c3	20 28 22	               jsr  putscxy
.16c6	20 cf 22	               jsr  pop
.16c9	08		               php
.16ca	48		               pha
.16cb	8a		               txa
.16cc	48		               pha
.16cd	ad d4 20	               lda  f5bbutton
.16d0	48		               pha
.16d1	a9 92		               lda  #146
.16d3	8d e6 20	               sta  f5bbutton+18
.16d6	a9 01		               lda  #flashcol
.16d8	8d d4 20	               sta  f5bbutton
.16db	a2 d4		               ldx  #<f5bbutton
.16dd	a0 20		               ldy  #>f5bbutton
.16df	20 28 22	               jsr  putscxy
.16e2	20 a5 12	               jsr  delay
.16e5	a9 12		               lda  #18
.16e7	8d e6 20	               sta  f5bbutton+18
.16ea	68		               pla
.16eb	8d d4 20	               sta  f5bbutton
.16ee	a2 d4		               ldx  #<f5bbutton
.16f0	a0 20		               ldy  #>f5bbutton
.16f2	20 28 22	               jsr  putscxy
.16f5	68		               pla
.16f6	aa		               tax
.16f7	68		               pla
.16f8	28		               plp
.16f9	20 5e 19	               jsr  scrollup
.16fc	20 a8 0f	               jsr  drawbitmap
.16ff	68		out            pla
.1700	20 90 22	               jsr  push
.1703	a2 a6		               ldx  #<blankmsg
.1705	a0 1a		               ldy  #>blankmsg
.1707	20 28 22	               jsr  putscxy
.170a	a2 d2		               ldx  #<prompt_msg
.170c	a0 1a		               ldy  #>prompt_msg
.170e	20 28 22	               jsr  putscxy
.1711	20 cf 22	               jsr  pop
.1714	60		               rts
.1715			f6action
.1715	48		               pha
.1716	a9 00		               lda  #$0
.1718	8d 7d 09	               sta  editmode
.171b	ad 7e 09	               lda  fkeyset
.171e	d0 4d		               bne  menub
.1720	20 90 22	               jsr  push
.1723	a2 a6		               ldx  #<blankmsg
.1725	a0 1a		               ldy  #>blankmsg
.1727	20 28 22	               jsr  putscxy
.172a	a2 c1		               ldx  #<f6a_msg
.172c	a0 1b		               ldy  #>f6a_msg
.172e	20 28 22	               jsr  putscxy
.1731	20 cf 22	               jsr  pop
.1734	08		               php
.1735	48		               pha
.1736	8a		               txa
.1737	48		               pha
.1738	ad 17 20	               lda  f6abutton
.173b	48		               pha
.173c	a9 92		               lda  #146
.173e	8d 29 20	               sta  f6abutton+18
.1741	a9 01		               lda  #flashcol
.1743	8d 17 20	               sta  f6abutton
.1746	a2 17		               ldx  #<f6abutton
.1748	a0 20		               ldy  #>f6abutton
.174a	20 28 22	               jsr  putscxy
.174d	20 a5 12	               jsr  delay
.1750	a9 12		               lda  #18
.1752	8d 29 20	               sta  f6abutton+18
.1755	68		               pla
.1756	8d 17 20	               sta  f6abutton
.1759	a2 17		               ldx  #<f6abutton
.175b	a0 20		               ldy  #>f6abutton
.175d	20 28 22	               jsr  putscxy
.1760	68		               pla
.1761	aa		               tax
.1762	68		               pla
.1763	28		               plp
.1764	20 17 1a	               jsr  fillchar
.1767	20 a8 0f	               jsr  drawbitmap
.176a	4c b7 17	               jmp  out
.176d			menub
.176d	20 90 22	               jsr  push
.1770	a2 a6		               ldx  #<blankmsg
.1772	a0 1a		               ldy  #>blankmsg
.1774	20 28 22	               jsr  putscxy
.1777	a2 88		               ldx  #<f6b_msg
.1779	a0 1c		               ldy  #>f6b_msg
.177b	20 28 22	               jsr  putscxy
.177e	20 cf 22	               jsr  pop
.1781	08		               php
.1782	48		               pha
.1783	8a		               txa
.1784	48		               pha
.1785	ad ef 20	               lda  f6bbutton
.1788	48		               pha
.1789	a9 92		               lda  #146
.178b	8d 01 21	               sta  f6bbutton+18
.178e	a9 01		               lda  #flashcol
.1790	8d ef 20	               sta  f6bbutton
.1793	a2 ef		               ldx  #<f6bbutton
.1795	a0 20		               ldy  #>f6bbutton
.1797	20 28 22	               jsr  putscxy
.179a	20 a5 12	               jsr  delay
.179d	a9 12		               lda  #18
.179f	8d 01 21	               sta  f6bbutton+18
.17a2	68		               pla
.17a3	8d ef 20	               sta  f6bbutton
.17a6	a2 ef		               ldx  #<f6bbutton
.17a8	a0 20		               ldy  #>f6bbutton
.17aa	20 28 22	               jsr  putscxy
.17ad	68		               pla
.17ae	aa		               tax
.17af	68		               pla
.17b0	28		               plp
.17b1	20 96 19	               jsr  scrolldown
.17b4	20 a8 0f	               jsr  drawbitmap
.17b7	68		out            pla
.17b8	20 90 22	               jsr  push
.17bb	a2 a6		               ldx  #<blankmsg
.17bd	a0 1a		               ldy  #>blankmsg
.17bf	20 28 22	               jsr  putscxy
.17c2	a2 d2		               ldx  #<prompt_msg
.17c4	a0 1a		               ldy  #>prompt_msg
.17c6	20 28 22	               jsr  putscxy
.17c9	20 cf 22	               jsr  pop
.17cc	60		               rts
.17cd			f7action
.17cd	48		               pha
.17ce	a9 00		               lda  #$0
.17d0	8d 7d 09	               sta  editmode
.17d3	ad 7e 09	               lda  fkeyset
.17d6	d0 4d		               bne  menub
.17d8	20 90 22	               jsr  push
.17db	a2 a6		               ldx  #<blankmsg
.17dd	a0 1a		               ldy  #>blankmsg
.17df	20 28 22	               jsr  putscxy
.17e2	a2 de		               ldx  #<f7a_msg
.17e4	a0 1b		               ldy  #>f7a_msg
.17e6	20 28 22	               jsr  putscxy
.17e9	20 cf 22	               jsr  pop
.17ec	08		               php
.17ed	48		               pha
.17ee	8a		               txa
.17ef	48		               pha
.17f0	ad 32 20	               lda  f7abutton
.17f3	48		               pha
.17f4	a9 92		               lda  #146
.17f6	8d 44 20	               sta  f7abutton+18
.17f9	a9 01		               lda  #flashcol
.17fb	8d 32 20	               sta  f7abutton
.17fe	a2 32		               ldx  #<f7abutton
.1800	a0 20		               ldy  #>f7abutton
.1802	20 28 22	               jsr  putscxy
.1805	20 a5 12	               jsr  delay
.1808	a9 12		               lda  #18
.180a	8d 44 20	               sta  f7abutton+18
.180d	68		               pla
.180e	8d 32 20	               sta  f7abutton
.1811	a2 32		               ldx  #<f7abutton
.1813	a0 20		               ldy  #>f7abutton
.1815	20 28 22	               jsr  putscxy
.1818	68		               pla
.1819	aa		               tax
.181a	68		               pla
.181b	28		               plp
.181c	20 7b 10	               jsr  copycharset
.181f	20 a8 0f	               jsr  drawbitmap
.1822	4c 74 18	               jmp  out
.1825	a9 00		menub          lda  #$0
.1827	8d 7d 09	               sta  editmode
.182a	20 90 22	               jsr  push
.182d	a2 a6		               ldx  #<blankmsg
.182f	a0 1a		               ldy  #>blankmsg
.1831	20 28 22	               jsr  putscxy
.1834	a2 a1		               ldx  #<f7b_msg
.1836	a0 1c		               ldy  #>f7b_msg
.1838	20 28 22	               jsr  putscxy
.183b	20 cf 22	               jsr  pop
.183e	08		               php
.183f	48		               pha
.1840	8a		               txa
.1841	48		               pha
.1842	ad 0a 21	               lda  f7bbutton
.1845	48		               pha
.1846	a9 92		               lda  #146
.1848	8d 1c 21	               sta  f7bbutton+18
.184b	a9 01		               lda  #flashcol
.184d	8d 0a 21	               sta  f7bbutton
.1850	a2 0a		               ldx  #<f7bbutton
.1852	a0 21		               ldy  #>f7bbutton
.1854	20 28 22	               jsr  putscxy
.1857	20 a5 12	               jsr  delay
.185a	a9 12		               lda  #18
.185c	8d 1c 21	               sta  f7bbutton+18
.185f	68		               pla
.1860	8d 0a 21	               sta  f7bbutton
.1863	a2 0a		               ldx  #<f7bbutton
.1865	a0 21		               ldy  #>f7bbutton
.1867	20 28 22	               jsr  putscxy
.186a	68		               pla
.186b	aa		               tax
.186c	68		               pla
.186d	28		               plp
.186e	20 3e 19	               jsr  reverse
.1871	20 a8 0f	               jsr  drawbitmap
.1874	68		out            pla
.1875	20 90 22	               jsr  push
.1878	a2 a6		               ldx  #<blankmsg
.187a	a0 1a		               ldy  #>blankmsg
.187c	20 28 22	               jsr  putscxy
.187f	a2 d2		               ldx  #<prompt_msg
.1881	a0 1a		               ldy  #>prompt_msg
.1883	20 28 22	               jsr  putscxy
.1886	20 cf 22	               jsr  pop
.1889	60		               rts
.188a			f8action
.188a	48		               pha
.188b	a9 00		               lda  #$0
.188d	8d 7d 09	               sta  editmode
.1890	ad 7e 09	               lda  fkeyset
.1893	d0 47		               bne  menub
.1895	20 90 22	               jsr  push
.1898	a2 a6		               ldx  #<blankmsg
.189a	a0 1a		               ldy  #>blankmsg
.189c	20 28 22	               jsr  putscxy
.189f	a2 dd		               ldx  #<menub_msg
.18a1	a0 1c		               ldy  #>menub_msg
.18a3	20 28 22	               jsr  putscxy
.18a6	20 cf 22	               jsr  pop
.18a9	08		               php
.18aa	48		               pha
.18ab	8a		               txa
.18ac	48		               pha
.18ad	ad 4d 20	               lda  f8abutton
.18b0	48		               pha
.18b1	a9 92		               lda  #146
.18b3	8d 5f 20	               sta  f8abutton+18
.18b6	a9 01		               lda  #flashcol
.18b8	8d 4d 20	               sta  f8abutton
.18bb	a2 4d		               ldx  #<f8abutton
.18bd	a0 20		               ldy  #>f8abutton
.18bf	20 28 22	               jsr  putscxy
.18c2	20 a5 12	               jsr  delay
.18c5	a9 12		               lda  #18
.18c7	8d 5f 20	               sta  f8abutton+18
.18ca	68		               pla
.18cb	8d 4d 20	               sta  f8abutton
.18ce	a2 4d		               ldx  #<f8abutton
.18d0	a0 20		               ldy  #>f8abutton
.18d2	20 28 22	               jsr  putscxy
.18d5	68		               pla
.18d6	aa		               tax
.18d7	68		               pla
.18d8	28		               plp
.18d9	4c 20 19	               jmp  swapit
.18dc			menub
.18dc	20 90 22	               jsr  push
.18df	a2 a6		               ldx  #<blankmsg
.18e1	a0 1a		               ldy  #>blankmsg
.18e3	20 28 22	               jsr  putscxy
.18e6	a2 b8		               ldx  #<menua_msg
.18e8	a0 1c		               ldy  #>menua_msg
.18ea	20 28 22	               jsr  putscxy
.18ed	20 cf 22	               jsr  pop
.18f0	08		               php
.18f1	48		               pha
.18f2	8a		               txa
.18f3	48		               pha
.18f4	ad 25 21	               lda  f8bbutton
.18f7	48		               pha
.18f8	a9 92		               lda  #146
.18fa	8d 37 21	               sta  f8bbutton+18
.18fd	a9 01		               lda  #flashcol
.18ff	8d 25 21	               sta  f8bbutton
.1902	a2 25		               ldx  #<f8bbutton
.1904	a0 21		               ldy  #>f8bbutton
.1906	20 28 22	               jsr  putscxy
.1909	20 a5 12	               jsr  delay
.190c	a9 12		               lda  #18
.190e	8d 37 21	               sta  f8bbutton+18
.1911	68		               pla
.1912	8d 25 21	               sta  f8bbutton
.1915	a2 25		               ldx  #<f8bbutton
.1917	a0 21		               ldy  #>f8bbutton
.1919	20 28 22	               jsr  putscxy
.191c	68		               pla
.191d	aa		               tax
.191e	68		               pla
.191f	28		               plp
.1920	49 ff		swapit         eor  #$ff
.1922	8d 7e 09	               sta  fkeyset
.1925	20 2b 11	               jsr  drawfkeys
.1928	68		               pla
.1929	20 90 22	               jsr  push
.192c	a2 a6		               ldx  #<blankmsg
.192e	a0 1a		               ldy  #>blankmsg
.1930	20 28 22	               jsr  putscxy
.1933	a2 d2		               ldx  #<prompt_msg
.1935	a0 1a		               ldy  #>prompt_msg
.1937	20 28 22	               jsr  putscxy
.193a	20 cf 22	               jsr  pop
.193d	60		               rts
.193e			reverse
.193e	20 90 22	               jsr  push
.1941	48		               pha
.1942	ad 83 09	               lda  mapaddr
.1945	85 fd		               sta  $fd
.1947	ad 84 09	               lda  mapaddr+1
.194a	85 fe		               sta  $fe
.194c	68		               pla
.194d	a0 00		               ldy  #$00
.194f	b1 fd		again          lda  (zpage2),y
.1951	49 ff		               eor  #$ff
.1953	91 fd		               sta  (zpage2),y
.1955	c8		               iny
.1956	c0 08		               cpy  #$08
.1958	d0 f5		               bne  again
.195a	20 cf 22	               jsr  pop
.195d	60		               rts
.195e			scrollup
.195e	20 90 22	               jsr  push
.1961	48		               pha
.1962	ad 83 09	               lda  mapaddr
.1965	85 fb		               sta  $fb
.1967	ad 84 09	               lda  mapaddr+1
.196a	85 fc		               sta  $fc
.196c	68		               pla
.196d	48		               pha
.196e	ad 83 09	               lda  mapaddr
.1971	85 fd		               sta  $fd
.1973	ad 84 09	               lda  mapaddr+1
.1976	85 fe		               sta  $fe
.1978	68		               pla
.1979	20 af 23	               jsr  inczp2
.197c	a0 00		               ldy  #$00
.197e	b1 fb		               lda  (zpage1),y
.1980	8d 95 19	               sta  tmpbyte
.1983	b1 fd		again          lda  (zpage2),y
.1985	91 fb		               sta  (zpage1),y
.1987	c8		               iny
.1988	c0 07		               cpy  #$07
.198a	d0 f7		               bne  again
.198c	ad 95 19	               lda  tmpbyte
.198f	91 fb		               sta  (zpage1),y
.1991	20 cf 22	               jsr  pop
.1994	60		               rts
>1995	00		tmpbyte        .byte     $00
.1996			scrolldown
.1996	20 90 22	               jsr  push
.1999	48		               pha
.199a	ad 83 09	               lda  mapaddr
.199d	85 fb		               sta  $fb
.199f	ad 84 09	               lda  mapaddr+1
.19a2	85 fc		               sta  $fc
.19a4	68		               pla
.19a5	48		               pha
.19a6	ad 83 09	               lda  mapaddr
.19a9	85 fd		               sta  $fd
.19ab	ad 84 09	               lda  mapaddr+1
.19ae	85 fe		               sta  $fe
.19b0	68		               pla
.19b1	20 af 23	               jsr  inczp2
.19b4	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.19b6	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.19b8	8d cf 19	               sta  tmpbyte             ;xxxxxxxx
.19bb	88		again          dey                      ;xxxxxxxx
.19bc	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.19be	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.19c0	c0 00		               cpy  #$00                ;xxxxxxxx
.19c2	d0 f7		               bne  again               ;xxxxxxxx
.19c4	a0 00		               ldy  #$00
.19c6	ad cf 19	               lda  tmpbyte
.19c9	91 fb		               sta  (zpage1),y
.19cb	20 cf 22	               jsr  pop
.19ce	60		               rts
>19cf	00		tmpbyte        .byte     $00
.19d0			scrollright
.19d0	20 90 22	               jsr  push
.19d3	48		               pha
.19d4	ad 83 09	               lda  mapaddr
.19d7	85 fb		               sta  $fb
.19d9	ad 84 09	               lda  mapaddr+1
.19dc	85 fc		               sta  $fc
.19de	68		               pla
.19df	a0 00		               ldy  #$00
.19e1	b1 fb		again          lda  (zpage1),y
.19e3	18		               clc
.19e4	6a		               ror
.19e5	90 03		               bcc  zero
.19e7	18		               clc
.19e8	69 80		one            adc  #$80
.19ea	91 fb		zero           sta  (zpage1),y
.19ec	c8		               iny
.19ed	c0 08		               cpy  #$08
.19ef	d0 f0		               bne  again
.19f1	20 cf 22	               jsr  pop
.19f4	60		               rts
.19f5			scrollleft
.19f5	20 90 22	               jsr  push
.19f8	48		               pha
.19f9	ad 83 09	               lda  mapaddr
.19fc	85 fb		               sta  $fb
.19fe	ad 84 09	               lda  mapaddr+1
.1a01	85 fc		               sta  $fc
.1a03	68		               pla
.1a04	a0 00		               ldy  #$00
.1a06	b1 fb		again          lda  (zpage1),y
.1a08	18		               clc
.1a09	2a		               rol
.1a0a	69 00		               adc  #$00
.1a0c	91 fb		               sta  (zpage1),y
.1a0e	c8		               iny
.1a0f	c0 08		               cpy  #$08
.1a11	d0 f3		               bne  again
.1a13	20 cf 22	               jsr  pop
.1a16	60		               rts
.1a17			fillchar
.1a17	20 90 22	               jsr  push
.1a1a	a9 ff		               lda  #$ff
.1a1c	20 2f 1a	               jsr  allsame
.1a1f	20 cf 22	               jsr  pop
.1a22	60		               rts
.1a23			clearchar
.1a23	20 90 22	               jsr  push
.1a26	a9 00		               lda  #$00
.1a28	20 2f 1a	               jsr  allsame
.1a2b	20 cf 22	               jsr  pop
.1a2e	60		               rts
.1a2f			allsame
.1a2f	48		               pha
.1a30	ad 83 09	               lda  mapaddr
.1a33	85 fd		               sta  $fd
.1a35	ad 84 09	               lda  mapaddr+1
.1a38	85 fe		               sta  $fe
.1a3a	68		               pla
.1a3b	a0 00		               ldy  #$00
.1a3d	91 fd		again          sta  (zpage2),y
.1a3f	c8		               iny
.1a40	c0 08		               cpy  #$08
.1a42	d0 f9		               bne  again
.1a44	60		               rts
.1a45			fliphorz
.1a45	20 90 22	               jsr  push
.1a48	48		               pha
.1a49	ad 83 09	               lda  mapaddr
.1a4c	85 fd		               sta  $fd
.1a4e	ad 84 09	               lda  mapaddr+1
.1a51	85 fe		               sta  $fe
.1a53	68		               pla
.1a54	a0 00		               ldy  #$00
.1a56	b1 fd		nextbyte       lda  (zpage2),y
.1a58	a2 00		               ldx  #$00
.1a5a	2a		rolagain       rol
.1a5b	6e 71 1a	               ror  tmpbyte
.1a5e	e8		               inx
.1a5f	e0 08		               cpx  #$08
.1a61	30 f7		               bmi  rolagain
.1a63	ad 71 1a	               lda  tmpbyte
.1a66	91 fd		               sta  (zpage2),y
.1a68	c8		               iny
.1a69	c0 08		               cpy  #$08
.1a6b	30 e9		               bmi  nextbyte
.1a6d	20 cf 22	               jsr  pop
.1a70	60		               rts
>1a71	00		tmpbyte        .byte     $00
.1a72			flipvert
.1a72	20 90 22	               jsr  push
.1a75	48		               pha
.1a76	ad 83 09	               lda  mapaddr
.1a79	85 fd		               sta  $fd
.1a7b	ad 84 09	               lda  mapaddr+1
.1a7e	85 fe		               sta  $fe
.1a80	68		               pla
.1a81	a0 00		               ldy  #$00
.1a83	b1 fd		tostack        lda  (zpage2),y
.1a85	48		               pha
.1a86	c8		               iny
.1a87	c0 08		               cpy  #$08
.1a89	d0 f8		               bne  tostack
.1a8b	a0 00		               ldy  #$00
.1a8d	68		fromstack      pla
.1a8e	91 fd		               sta  (zpage2),y
.1a90	c8		               iny
.1a91	c0 08		               cpy  #$08
.1a93	d0 f8		               bne  fromstack
.1a95	20 cf 22	               jsr  pop
.1a98	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages_fr.asm

>1a99	0a 01 05	editor_msg     .byte vrose,1,5
>1a9c	5b 45 44 49	               .null     "[editeur]"
>1aa0	54 45 55 52 5d 00
>1aa6	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1aaa	20 20 20 20	               .null     "                                       "
>1aae	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1abe	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1ace	20 20 20 00
>1ad2	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>1ad6	20 55 54 49	               .null     " utilisez les clefs de fonction :"
>1ada	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>1aea	44 45 20 46 4f 4e 43 54 49 4f 4e 20 3a 00
>1af8	03 00 05 92	wait_msg       .byte     mesgcol,0,5,146
>1afc	20 55 4e 20	               .null     " un instant s.v.p. ... "
>1b00	49 4e 53 54 41 4e 54 20 53 2e 56 2e 50 2e 20 2e
>1b10	2e 2e 20 00
.1b14			f1a_msg
>1b14	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>1b18	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>1b1c	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>1b2c	29 92 00
.1b2f			f2a_msg
>1b2f	03 00 05	copy_msg       .byte     mesgcol,0,5
>1b32	20 45 4e 54	               .null     " entez le character a copier:"
>1b36	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>1b46	41 20 43 4f 50 49 45 52 3a 00
.1b50			f3a_msg
>1b50	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1b54	20 53 41 55	               .null     " sauvegarder sur quel lecteur? (1/8/9): "
>1b58	56 45 47 41 52 44 45 52 20 53 55 52 20 51 55 45
>1b68	4c 20 4c 45 43 54 45 55 52 3f 20 28 31 2f 38 2f
>1b78	39 29 3a 20 00
.1b7d			f4a_msg
>1b7d	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1b81	20 43 48 41	               .null     " charger de quel lecteur? (1,8,9): "
>1b85	52 47 45 52 20 44 45 20 51 55 45 4c 20 4c 45 43
>1b95	54 45 55 52 3f 20 28 31 2c 38 2c 39 29 3a 20 00
.1ba5			f5a_msg
>1ba5	03 00 05	clear_msg      .byte     mesgcol,0,5
>1ba8	20 45 46 46	               .null     " effacer char: chr$(   )"
>1bac	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>1bbc	20 20 20 29 00
.1bc1			f6a_msg
>1bc1	03 00 05	fill_msg       .byte     mesgcol,0,5
>1bc4	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>1bc8	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>1bd8	28 20 20 20 29 00
.1bde			f7a_msg
>1bde	03 00 05	work_msg       .byte     mesgcol,0,5
>1be1	20 52 45 43	               .null     " recuperer les caracteres."
>1be5	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>1bf5	54 45 52 45 53 2e 00
.1bfc			f1b_msg
>1bfc	03 00 05	invr_msg       .byte     mesgcol,0,5
>1bff	20 42 41 53	               .null     " basculer verticalement:"
>1c03	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1c13	45 4e 54 3a 00
.1c18			f2b_msg
>1c18	03 00 05	flip_msg       .byte     mesgcol,0,5
>1c1b	20 42 41 53	               .null     " basculer horizontalement:"
>1c1f	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1c2f	45 4d 45 4e 54 3a 00
.1c36			f3b_msg
>1c36	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1c39	20 44 45 46	               .null     " defiler vers la droite:"
>1c3d	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1c4d	49 54 45 3a 00
.1c52			f4b_msg
>1c52	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1c55	20 44 45 46	               .null     " defiler vers la gauche:"
>1c59	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1c69	43 48 45 3a 00
.1c6e			f5b_msg
>1c6e	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1c71	20 44 45 46	               .null     " defiler vers le haut:"
>1c75	49 4c 45 52 20 56 45 52 53 20 4c 45 20 48 41 55
>1c85	54 3a 00
.1c88			f6b_msg
>1c88	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1c8b	20 44 45 46	               .null     " defiler vers le bas:"
>1c8f	49 4c 45 52 20 56 45 52 53 20 4c 45 20 42 41 53
>1c9f	3a 00
.1ca1			f7b_msg
>1ca1	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1ca4	20 52 45 56	               .null     " reverse character:"
>1ca8	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1cb8	03 00 05	menua_msg      .byte     mesgcol,0,5
>1cbb	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1cbf	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1ccf	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1cdd	03 00 05	menub_msg      .byte     mesgcol,0,5
>1ce0	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1ce4	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1cf4	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1d02	07 00 05	copychar_msg   .byte     vjaune,0,5
>1d05	20 45 4e 54	               .null     " entrez le caractera a copier (?).",157,157,157
>1d09	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 41
>1d19	20 41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d
>1d29	9d 00
>1d2b	07 00 05	fname_msg      .byte     vjaune,0,5
>1d2e	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1d32	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1d42	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1d52	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1d60	04 15 18 12	quit_msg       .byte     vmauve,21,24,18
>1d64	43 54 52 4c	               .text     "ctrl-x",146
>1d68	2d 58 92
>1d6b	2d 51 55 49	               .null     "-quitter."
>1d6f	54 54 45 52 2e 00
>1d75	0a 12 16 12	redraw_msg     .byte     vrose,18,22,18
>1d79	43 54 52 4c	               .text     "ctrl-r",146
>1d7d	2d 52 92
>1d80	20 52 41 46	               .null     " rafraichir."
>1d84	52 41 49 43 48 49 52 2e 00
.1d8d			menu_msg
>1d8d	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1d91	43 54 52 4c	               .text     "ctrl-x",146
>1d95	2d 58 92
>1d98	20 41 55 20	               .null     " au menu."
>1d9c	4d 45 4e 55 2e 00
>1da2	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1da6	20 20 20 20	               .null     "                               ",146
>1daa	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1dba	20 20 20 20 20 20 20 20 20 20 20 92 00
>1dc7	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1dcb	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1dcf	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1ddf	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1dee	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1df2	20 20 20 20	               .null     "                               ",146
>1df6	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1e06	20 20 20 20 20 20 20 20 20 20 20 92 00
>1e13	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1e17	20 54 49 52	               .null     " tirez de isbn : 0-942386-29-9 ",146
>1e1b	45 5a 20 44 45 20 49 53 42 4e 20 3a 20 30 2d 39
>1e2b	34 32 33 38 36 2d 32 39 2d 39 20 92 00
>1e38	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1e3c	20 20 20 20	               .null     "       par john heilborn       ",146
>1e40	20 20 20 50 41 52 20 4a 4f 48 4e 20 48 45 49 4c
>1e50	42 4f 52 4e 20 20 20 20 20 20 20 92 00
>1e5d	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1e61	20 20 20 20	               .null     "                               ",146
>1e65	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1e75	20 20 20 20 20 20 20 20 20 20 20 92 00
>1e82	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1e86	20 20 20 20	               .null     "     code en assembleur par    ",146
>1e8a	20 43 4f 44 45 20 45 4e 20 41 53 53 45 4d 42 4c
>1e9a	45 55 52 20 50 41 52 20 20 20 20 92 00
>1ea7	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1eab	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1eaf	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1ebf	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1ecc	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1ed0	20 20 20 20	               .null     "    version:",version,"    ",146
>1ed4	56 45 52 53 49 4f 4e 3a 32 30 32 34 30 34 30 34
>1ee4	2d 30 31 31 30 33 30 20 20 20 20 92 00
>1ef1	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1ef5	20 20 20 20	               .null     "                               ",146
>1ef9	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1f09	20 20 20 20 20 20 20 20 20 20 20 92 00
>1f16	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1f1a	20 20 20 20	               .null     "      bonjour et merci      ",146
>1f1e	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>1f2e	43 49 20 20 20 20 20 20 92 00
>1f38	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1f3c	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>1f40	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>1f50	52 20 42 41 53 49 43 20 92 00
>1f5a	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1f5d	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>1f61	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1f71	31 20 92 00
>1f75	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1f78	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>1f7c	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1f8c	32 20 92 00
>1f90	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1f93	45 44 49 54	               .text     "editer carac..."
>1f97	45 52 20 43 41 52 41 43 2e 2e 2e
>1fa2	12		               .byte     18             ; position 15
>1fa3	a9 20 46 31	               .null     $a9," f1 ",223,146
>1fa7	20 df 92 00
>1fab	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1fae	43 4f 50 49	               .text     "copier un carac"
>1fb2	45 52 20 55 4e 20 43 41 52 41 43
>1fbd	12		               .byte     18   ; position 15
>1fbe	20 20 46 32	               .null     "  f2  ",146
>1fc2	20 20 92 00
>1fc6	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1fc9	53 41 56 45	               .text     "savegarder sur."
>1fcd	47 41 52 44 45 52 20 53 55 52 2e
>1fd8	12		               .byte     18            ; position 15
>1fd9	a9 20 46 33	               .null     $a9," f3 ",223,146
>1fdd	20 df 92 00
>1fe1	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1fe4	43 48 41 52	               .text     "charger de....."
>1fe8	47 45 52 20 44 45 2e 2e 2e 2e 2e
>1ff3	12		               .byte     18             ; position 15
>1ff4	20 20 46 34	               .null     "  f4  ",146
>1ff8	20 20 92 00
>1ffc	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1fff	4d 45 54 54	               .text     "mettre tout a 0"
>2003	52 45 20 54 4f 55 54 20 41 20 30
>200e	12		               .byte     18             ; position 15
>200f	a9 20 46 35	               .null     $a9," f5 ",223,146
>2013	20 df 92 00
>2017	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>201a	4d 45 54 54	               .text     "mettre tout a 1"
>201e	52 45 20 54 4f 55 54 20 41 20 31
>2029	12		               .byte     18             ; position 15
>202a	20 20 46 36	               .null     "  f6  ",146
>202e	20 20 92 00
>2032	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>2035	52 45 43 55	               .text     "recuperer rom.."
>2039	50 45 52 45 52 20 52 4f 4d 2e 2e
>2044	12		               .byte     18             ; position 15
>2045	a9 20 46 37	               .null     $a9," f7 ",223,146
>2049	20 df 92 00
>204d	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>2050	41 4c 4c 45	               .text     "aller au menu2."
>2054	52 20 41 55 20 4d 45 4e 55 32 2e
>205f	12		               .byte     18             ; position 15
>2060	20 20 46 38	               .null     "  f8  ", 146
>2064	20 20 92 00
>2068	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>206b	42 41 53 43	               .text     "basculer vert.."
>206f	55 4c 45 52 20 56 45 52 54 2e 2e
>207a	12		               .byte     18             ; position 15
>207b	a9 20 46 31	               .null     $a9," f1 ",223,146
>207f	20 df 92 00
>2083	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>2086	42 41 53 43	               .text     "basculer horz.."
>208a	55 4c 45 52 20 48 4f 52 5a 2e 2e
>2095	12		               .byte     18             ; position 15
>2096	20 20 46 32	               .null     "  f2  ",146
>209a	20 20 92 00
>209e	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>20a1	44 45 46 49	               .text     "defiler droite."
>20a5	4c 45 52 20 44 52 4f 49 54 45 2e
>20b0	12		               .byte     18             ; position 15
>20b1	a9 20 46 33	               .null     $a9," f3 ",223,146
>20b5	20 df 92 00
>20b9	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>20bc	44 45 46 49	               .text     "defiler gauche."
>20c0	4c 45 52 20 47 41 55 43 48 45 2e
>20cb	12		               .byte     18             ; position 15
>20cc	20 20 46 34	               .null     "  f4  ",146
>20d0	20 20 92 00
>20d4	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>20d7	44 45 46 49	               .text     "defiler haut..."
>20db	4c 45 52 20 48 41 55 54 2e 2e 2e
>20e6	12		               .byte     18             ; position 15
>20e7	a9 20 46 35	               .null     $a9," f5 ",223,146
>20eb	20 df 92 00
>20ef	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>20f2	44 45 46 49	               .text     "defiler bas...."
>20f6	4c 45 52 20 42 41 53 2e 2e 2e 2e
>2101	12		               .byte     18             ; position 15
>2102	20 20 46 36	               .null     "  f6  ",146
>2106	20 20 92 00
>210a	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>210d	49 4e 56 45	               .text     "inverser bits.."
>2111	52 53 45 52 20 42 49 54 53 2e 2e
>211c	12		               .byte     18             ; position 15
>211d	a9 20 46 37	               .null     $a9," f7 ",223,146
>2121	20 df 92 00
>2125	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>2128	41 4c 4c 45	               .text     "aller au menu1."
>212c	52 20 41 55 20 4d 45 4e 55 31 2e
>2137	12		               .byte     18             ; position 15
>2138	20 20 46 38	               .null     "  f8  ", 146
>213c	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>2140	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>2144	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.2148			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.2148			screendis
.2148	08		               php
.2149	48		               pha
.214a	ad 11 d0	               lda  $d011
.214d	29 ef		               and  #%11101111
.214f	8d 11 d0	               sta  $d011
.2152	68		               pla
.2153	28		               plp
.2154	60		               rts
.2155			screenena
.2155	08		               php
.2156	48		               pha
.2157	ad 11 d0	               lda  $d011
.215a	09 10		               ora  #%00010000
.215c	8d 11 d0	               sta  $d011
.215f	68		               pla
.2160	28		               plp
.2161	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.2162			scrmaninit
.2162	20 90 22	               jsr  push
.2165	a9 06		               lda  #vbleu
.2167	8d 21 d0	               sta  vicbackcol
.216a	a9 05		               lda  #vvert
.216c	8d 20 d0	               sta  vicbordcol
.216f	a9 01		               lda  #vblanc
.2171	8d 86 02	               sta  bascol
.2174	ad 00 04	               lda  scrnram
.2177	8d 00 04	               sta  scrnram
.217a	20 82 21	               jsr  cls
.217d	20 cf 22	               jsr  pop
.2180	60		               rts
>2181	8e		characterset   .byte b_uppercase
.2182			cls
.2182	08		               php
.2183	48		               pha
.2184	a9 93		               lda  #$93
.2186	20 99 21	               jsr  putch
.2189	68		               pla
.218a	28		               plp
.218b	60		               rts
.218c			putnch
.218c	08		               php
.218d	e0 00		               cpx  #$00
.218f	f0 06		               beq  out
.2191	20 d2 ff	again          jsr  $ffd2
.2194	ca		               dex
.2195	d0 fa		               bne  again
.2197	28		out            plp
.2198	60		               rts
.2199			putch
.2199	08		               php
.219a	20 d2 ff	               jsr  $ffd2
.219d	28		               plp
.219e	60		               rts
.219f			puts
.219f	20 90 22	               jsr  push
.21a2	86 fb		               stx  zpage1
.21a4	84 fc		               sty  zpage1+1
.21a6	a0 00		               ldy  #0
.21a8	b1 fb		next           lda  (zpage1),y
.21aa	f0 09		               beq  exit
.21ac	20 99 21	               jsr  putch
.21af	20 97 23	               jsr  inczp1
.21b2	4c a8 21	               jmp  next
.21b5	20 cf 22	exit           jsr  pop
.21b8	60		               rts
.21b9			gotoxy
.21b9	08		               php
.21ba	18		               clc
.21bb	8a		               txa
.21bc	48		               pha
.21bd	98		               tya
.21be	aa		               tax
.21bf	68		               pla
.21c0	a8		               tay
.21c1	20 f0 ff	               jsr  kplot
.21c4	28		               plp
.21c5	60		               rts
.21c6			cursor
=$0286			bascol    =    $0286
.21c6	08		               php
.21c7	48		               pha
.21c8	90 12		               bcc  restore
.21ca	20 f0 ff	               jsr  kplot
.21cd	8c ee 21	               sty  cx
.21d0	8e ef 21	               stx  cy
.21d3	ad 86 02	               lda  bascol
.21d6	8d f0 21	               sta  bcol
.21d9	4c eb 21	               jmp  out
.21dc	ae ef 21	restore        ldx  cy
.21df	ac ee 21	               ldy  cx
.21e2	20 f0 ff	               jsr  kplot
.21e5	ad f0 21	               lda  bcol
.21e8	8d 86 02	               sta  bascol
.21eb	68		out            pla
.21ec	28		               plp
.21ed	60		               rts
>21ee	00		cx   .byte     $00
>21ef	00		cy   .byte     $00
>21f0	00		bcol .byte     $00
.21f1			cursave
.21f1	08		               php
.21f2	38		               sec
.21f3	20 c6 21	               jsr  cursor
.21f6	28		               plp
.21f7	60		               rts
.21f8			curput
.21f8	08		               php
.21f9	18		               clc
.21fa	20 c6 21	               jsr  cursor
.21fd	28		               plp
.21fe	60		               rts
.21ff			putsxy
.21ff	20 90 22	               jsr  push
.2202	86 fb		               stx  zpage1
.2204	84 fc		               sty  zpage1+1
.2206	a0 00		               ldy  #$00
.2208	b1 fb		               lda  (zpage1),y
.220a	aa		               tax
.220b	20 97 23	               jsr  inczp1
.220e	b1 fb		               lda  (zpage1),y
.2210	a8		               tay
.2211	20 b9 21	               jsr  gotoxy
.2214	20 97 23	               jsr  inczp1
.2217	a6 fb		               ldx  zpage1
.2219	a4 fc		               ldy  zpage1+1
.221b	20 9f 21	               jsr  puts
.221e	20 cf 22	               jsr  pop
.2221	60		               rts
>2222	00 00		straddr   .word     $00
>2224	00		px        .byte     $00
>2225	00		py        .byte     $00
>2226	00 00		zp1       .word     $00
.2228			putscxy
.2228	20 90 22	               jsr  push
.222b	84 fc		               sty  zpage1+1
.222d	86 fb		               stx  zpage1
.222f	ad 86 02	               lda  bascol
.2232	8d 52 22	               sta  bc
.2235	a0 00		               ldy #$00
.2237	b1 fb		               lda  (zpage1),y
.2239	8d 86 02	               sta  bascol
.223c	20 97 23	               jsr  inczp1
.223f	a6 fb		               ldx  zpage1
.2241	a4 fc		               ldy  zpage1+1
.2243	20 ff 21	               jsr  putsxy
.2246	ad 52 22	               lda  bc
.2249	8d 86 02	               sta  bascol
.224c	20 cf 22	               jsr  pop
.224f	60		               rts
>2250	00 00		straddr  .word      $00
>2252	00		bc       .byte      $00
>2253	00 00		zp1      .word      $00
.2255			putrahex
.2255	08		               php
.2256	48		               pha
.2257	20 ad 24	               jsr  a2hex
.225a	a9 4c		               lda  #<a2hexstr
.225c	a0 24		               ldy  #>a2hexstr
.225e	20 9f 21	               jsr  puts
.2261	68		               pla
.2262	28		               plp
.2263	60		               rts
.2264			kputrahexxy
.2264			bputrahexxy
.2264			putrahexxy
.2264	08		               php
.2265	20 ad 24	               jsr  a2hex
.2268	a9 49		               lda  #<a2hexpos
.226a	a0 24		               ldy  #>a2hexpos
.226c	20 ff 21	               jsr  putsxy
.226f	68		               pla
.2270	28		               plp
.2271	60		               rts
.2272			putrahexcxy
.2272	08		               php
.2273	20 ad 24	               jsr  a2hex
.2276	a9 49		               lda  #<a2hexpos
.2278	a0 24		               ldy  #>a2hexpos
.227a	20 28 22	               jsr  putscxy
.227d	68		               pla
.227e	28		               plp
.227f	60		               rts
.2280			setinverse
.2280	48		               pha
.2281	a9 12		               lda  #$12
.2283	20 d2 ff	               jsr  $ffd2
.2286	68		               pla
.2287	60		               rts
.2288			clrinverse
.2288	48		               pha
.2289	a9 92		               lda  #$92
.228b	20 d2 ff	               jsr  $ffd2
.228e	68		               pla
.228f	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.2290			push
.2290	08		          php            ; stack : flg, pcl, pch
.2291	78		          sei
.2292	8d cc 22	          sta  ra        ; save a
.2295	68		          pla            ; stack : pcl, pch
.2296	8d cb 22	          sta  rp        ; save rp
.2299	68		          pla            ; stack : pch
.229a	8d cd 22	          sta  pc        ; save pcl
.229d	68		          pla            ; stack : -
.229e	8d ce 22	          sta  pc+1      ; save pch
.22a1	a5 fb		          lda  zpage1    ; get zpage1 low byte
.22a3	48		          pha            ; stack : zp1l
.22a4	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.22a6	48		          pha            ; stack : zp1h, zp1l
.22a7	a5 fd		          lda  zpage2    ; get zpage2 low byte
.22a9	48		          pha            ; stack : zp2l, zp1h, zp1l
.22aa	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.22ac	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.22ad	ad cb 22	          lda  rp        ; get rp
.22b0	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.22b1	ad cc 22	          lda  ra        ; get a
.22b4	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.22b5	8a		          txa            ; get x
.22b6	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.22b7	98		          tya            ; get y
.22b8	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22b9	ad ce 22	          lda  pc+1      ; get pch
.22bc	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22bd	ad cd 22	          lda  pc        ; get pcl
.22c0	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22c1	ad cb 22	          lda  rp        ; get rp
.22c4	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22c5	ad cc 22	          lda  ra        ; get a
.22c8	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22c9	58		          cli
.22ca	60		          rts
>22cb	00		rp        .byte     0
>22cc	00		ra        .byte     0
>22cd	00 00		pc        .word     0
.22cf			pull
.22cf			pop
.22cf	78		          sei
.22d0	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22d1	8d 04 23	          sta  pc        ; save pcl
.22d4	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22d5	8d 05 23	          sta  pc+1      ; save pch
.22d8	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.22d9	a8		          tay            ; set y
.22da	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.22db	aa		          tax            ; set x
.22dc	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.22dd	8d 03 23	          sta  ra        ; save a
.22e0	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.22e1	8d 02 23	          sta  rp        ; save rp
.22e4	68		          pla            ; stack : zp2l, zp1h, zp1l
.22e5	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.22e7	68		          pla            ; stack : zp1h, zp1l
.22e8	85 fd		          sta  zpage2    ; get zpage2 High byte
.22ea	68		          pla            ; stack : zp1l
.22eb	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.22ed	68		          pla            ; stack :
.22ee	85 fb		          sta  zpage1    ; get zpage1 High byte
.22f0	ad 05 23	          lda  pc+1      ; get pch
.22f3	48		          pha            ; stack : pch
.22f4	ad 04 23	          lda  pc
.22f7	48		          pha            ; stack : pcl, pch
.22f8	ad 02 23	          lda  rp        ; get rp
.22fb	48		          pha            ; stack : rp, pcl, pch
.22fc	ad 03 23	          lda  ra        ; set ra
.22ff	58		          cli
.2300	28		          plp            ; stack : pcl, pch
.2301	60		          rts
>2302	00		rp        .byte     0
>2303	00		ra        .byte     0
>2304	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.2306			blkfill
.2306	20 90 22	bf0            jsr  push
.2309	20 c7 23	               jsr  savezp1
.230c	84 fc		               sty  zpage1+1
.230e	a0 00		               ldy  #$00
.2310	84 fb		               sty  zpage1
.2312	91 fb		bf1            sta  (zpage1),y
.2314	c8		               iny
.2315	d0 fb		               bne  bf1
.2317	20 d6 23	               jsr  restzp1
.231a	20 cf 22	               jsr  pop
.231d	60		               rts
.231e			memfill
.231e	20 90 22	               jsr  push
.2321	20 06 23	mf1            jsr  blkfill
.2324	c8		               iny
.2325	ca		               dex
.2326	d0 f9		               bne  mf1
.2328	20 cf 22	               jsr  pop
.232b	60		               rts
.232c			memmove
.232c	20 90 22	               jsr  push
.232f	ba		               tsx            ; On se crée un pointeur ...
.2330	8a		               txa
.2331	18		               clc
.2332	69 0b		               adc  #11
.2334	a8		               tay
.2335	a2 06		               ldx  #$06
.2337	b9 00 01	nextbyte       lda  $0100,y
.233a	99 86 23	               sta  words,y
.233d	c8		               iny
.233e	ca		               dex
.233f	d0 f6		               bne  nextbyte
.2341	ad 86 23	               lda  s
.2344	8d 5d 23	               sta  source+1
.2347	ad 87 23	               lda  s+1
.234a	8d 5e 23	               sta  source+2
.234d	ad 88 23	               lda  d
.2350	8d 5a 23	               sta  destin+1
.2353	ad 89 23	               lda  d+1
.2356	8d 5b 23	               sta  destin+2
.2359	ad ff ff	destin         lda  $ffff
.235c	8d ff ff	source         sta  $ffff
.235f	ee 5a 23	               inc  destin+1
.2362	d0 03		               bne  src
.2364	ee 5b 23	               inc  destin+2
.2367	ee 5d 23	src            inc  source+1
.236a	d0 03		               bne  cnt
.236c	ee 5e 23	               inc  source+2
.236f	ad 8a 23	cnt            lda  compte
.2372	d0 08		               bne  decit
.2374	ad 8b 23	               lda  compte+1
.2377	f0 09		               beq  fini
.2379	ce 8b 23	               dec  compte+1
.237c	ce 8a 23	decit          dec  compte
.237f	4c 59 23	               jmp  destin
.2382	20 cf 22	fini           jsr  pop
.2385	60		               rts
.2386			words
>2386	00 00		s         .word     $0000
>2388	00 00		d         .word     $0000
>238a	00 00		compte    .word     $0000
.238c			decword
.238c	20 90 22	               jsr  push
.238f	86 fd		               stx  zpage2
.2391	84 fe		               sty  zpage2+1
.2393	20 cf 22	               jsr  pop
.2396	60		               rts
.2397			inczp1
.2397	08		               php
.2398	48		               pha
.2399	e6 fb		               inc  zpage1
.239b	a5 fb		               lda  zpage1
.239d	d0 02		               bne  nopage
.239f	e6 fc		               inc  zpage1+1
.23a1	68		nopage         pla
.23a2	28		               plp
.23a3	60		               rts
.23a4			deczp1
.23a4	08		                php
.23a5	48		                pha
.23a6	c6 fb		                dec  zpage1
.23a8	d0 02		                bne  nopage
.23aa	c6 fc		                dec  zpage1+1
.23ac	68		nopage          pla
.23ad	28		                plp
.23ae	60		                rts
.23af			inczp2
.23af	08		               php
.23b0	48		               pha
.23b1	e6 fd		               inc  zpage2
.23b3	a5 fd		               lda  zpage2
.23b5	d0 02		               bne  nopage
.23b7	e6 fe		               inc  zpage2+1
.23b9	68		nopage         pla
.23ba	28		               plp
.23bb	60		               rts
.23bc			deczp2
.23bc	08		               php
.23bd	48		               pha
.23be	a5 fd		               lda  zpage2
.23c0	d0 02		               bne  nopage
.23c2	c6 fe		               dec  zpage2+1
.23c4	68		nopage         pla
.23c5	28		               plp
.23c6	60		               rts
.23c7			savezp1
.23c7	08		               php
.23c8	48		               pha
.23c9	a5 fb		               lda  zpage1
.23cb	8d 43 24	               sta  zp1
.23ce	a5 fc		               lda  zpage1+1
.23d0	8d 44 24	               sta  zp1+1
.23d3	68		               pla
.23d4	28		               plp
.23d5	60		               rts
.23d6			restzp1
.23d6	08		               php
.23d7	48		               pha
.23d8	ad 43 24	               lda zp1
.23db	85 fb		               sta zpage1
.23dd	ad 44 24	               lda zp1+1
.23e0	85 fc		               sta zpage1+1
.23e2	68		               pla
.23e3	28		               plp
.23e4	60		               rts
.23e5			savezp2
.23e5	08		         php
.23e6	48		         pha
.23e7	a5 fd		         lda zpage2
.23e9	8d 45 24	         sta zp2
.23ec	a5 fe		         lda zpage2+1
.23ee	8d 46 24	         sta zp2+1
.23f1	68		         pla
.23f2	28		         plp
.23f3	60		         rts
.23f4			restzp2
.23f4	08		                php
.23f5	48		                pha
.23f6	ad 45 24	                lda  zp2
.23f9	85 fd		                sta  zpage2
.23fb	ad 46 24	                lda  zp2+1
.23fe	85 fe		                sta  zpage2+1
.2400	68		                pla
.2401	28		                plp
.2402	60		                rts
.2403			xy2addr
.2403	08		                php
.2404	48		                pha
.2405	8a		                txa
.2406	48		                pha
.2407	98		                tya
.2408	48		                pha
.2409	ad 3e 24	                lda     addr1+1
.240c	8d 40 24	                sta     addr2+1
.240f	ad 3d 24	                lda     addr1
.2412	8d 3f 24	                sta     addr2
.2415	c0 00		                cpy     #$00
.2417	f0 0f		                beq     addx
.2419	18		moreline        clc
.241a	6d 3c 24	                adc     ymult
.241d	90 03		                bcc     norepy
.241f	ee 40 24	                inc     addr2+1
.2422	8d 3f 24	norepy          sta     addr2
.2425	88		                dey
.2426	d0 f1		                bne     moreline
.2428	8a		addx            txa
.2429	18		                clc
.242a	6d 3f 24	                adc     addr2
.242d	90 03		                bcc     thatsit
.242f	ee 40 24	                inc     addr2+1
.2432	8d 3f 24	thatsit         sta     addr2
.2435	68		                pla
.2436	a8		                tay
.2437	68		                pla
.2438	aa		                tax
.2439	68		                pla
.243a	28		                plp
.243b	60		                rts
>243c	28		ymult          .byte     40
>243d	00 00		addr1          .word     $0000
>243f	00 00		addr2          .word     $0000
>2441	00 00		bytecnt        .word     $0000
>2443	00 00		zp1        .word   $0000
>2445	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>2447	01		a2hexcol       .byte     1              ; pour aputscxy
>2448	00		a2hexbkcol     .byte     %00000000
.2449			a2hexpos
>2449	00		a2hexpx        .byte     0              ; pour aputsxy
>244a	00		a2hexpy        .byte     0
>244b	24		a2hexprefix    .byte     "$"            ; pour aputs
>244c	00 00		a2hexstr       .word     $00
>244e	00 00		               .word     $00
>2450	00		               .byte     0              ; 0 end string
>2451	30 30 30 30	abin           .null     "00000000"
>2455	30 30 30 30 00
>245a	20 20 20 00	adec           .null     "   "
.245e			putahexfmtxy
.245e	20 90 22	               jsr  push
.2461	20 ad 24	               jsr  a2hex
.2464	ae 49 24	               ldx  a2hexpx
.2467	ac 4a 24	               ldy  a2hexpy
.246a	20 b9 21	               jsr  gotoxy
.246d	a2 4b		               ldx  #<a2hexprefix
.246f	a0 24		               ldy  #>a2hexprefix
.2471	20 9f 21	               jsr  puts
.2474	20 cf 22	               jsr  pop
.2477	60		               rts
.2478			putahexfmt
.2478	20 90 22	               jsr  push
.247b	20 ad 24	               jsr  a2hex
.247e	a2 4b		               ldx  #<a2hexprefix
.2480	a0 24		               ldy  #>a2hexprefix
.2482	20 9f 21	               jsr  puts
.2485	20 cf 22	               jsr  pop
.2488	60		               rts
.2489			putahex
.2489	20 90 22	               jsr  push
.248c	20 ad 24	               jsr  a2hex
.248f	a2 4c		               ldx  #<a2hexstr
.2491	a0 24		               ldy  #>a2hexstr
.2493	20 9f 21	               jsr  puts
.2496	20 cf 22	               jsr  pop
.2499	60		               rts
.249a			nib2hex
.249a	08		               php
.249b	29 0f		               and  #$0f
.249d	f8		               sed
.249e	18		               clc
.249f	69 90		               adc  #$90
.24a1	69 40		               adc  #$40
.24a3	d8		               cld
.24a4	28		               plp
.24a5	60		               rts
.24a6			lsra4bits
.24a6	08		               php
.24a7	4a		               lsr
.24a8	4a		               lsr
.24a9	4a		               lsr
.24aa	4a		               lsr
.24ab	28		               plp
.24ac	60		               rts
.24ad			a2hex
.24ad	08		               php
.24ae	48		               pha
.24af	48		               pha
.24b0	20 a6 24	               jsr  lsra4bits
.24b3	20 9a 24	               jsr  nib2hex
.24b6	8d 4c 24	               sta  a2hexstr
.24b9	68		               pla
.24ba	20 9a 24	               jsr  nib2hex
.24bd	8d 4d 24	               sta  a2hexstr+1
.24c0	a9 00		               lda  #$00                ; set end of string
.24c2	8d 4e 24	               sta  a2hexstr+2
.24c5	68		               pla
.24c6	28		               plp
.24c7	60		               rts
.24c8			xy2hex
.24c8	20 90 22	               jsr  push
.24cb	20 ad 24	               jsr  a2hex
.24ce	8a		               txa
.24cf	48		               pha
.24d0	20 a6 24	               jsr  lsra4bits
.24d3	20 9a 24	               jsr  nib2hex
.24d6	8d 4c 24	               sta  a2hexstr
.24d9	68		               pla
.24da	20 9a 24	               jsr  nib2hex
.24dd	8d 4d 24	               sta  a2hexstr+1
.24e0	98		               tya
.24e1	48		               pha
.24e2	20 a6 24	               jsr  lsra4bits
.24e5	20 9a 24	               jsr  nib2hex
.24e8	8d 4e 24	               sta  a2hexstr+2
.24eb	68		               pla
.24ec	20 9a 24	               jsr  nib2hex
.24ef	8d 4f 24	               sta  a2hexstr+3
.24f2	a9 00		               lda  #$00                ; 0 ended string
.24f4	8d 50 24	               sta  a2hexstr+4
.24f7	20 cf 22	               jsr  pop
.24fa			atobin
.24fa	20 90 22	               jsr  push
.24fd	a2 08		               ldx  #8
.24ff	a0 00		               ldy  #0
.2501	18		               clc
.2502	2a		nextbit        rol
.2503	48		               pha
.2504	69 00		               adc  #$00
.2506	29 01		               and  #$01
.2508	20 9a 24	               jsr  nib2hex
.250b	99 51 24	               sta  abin,y
.250e	68		               pla
.250f	c8		               iny
.2510	ca		               dex
.2511	d0 ef		               bne  nextbit
.2513	a9 00		               lda  #0
.2515	99 51 24	               sta  abin,y
.2518	20 cf 22	               jsr  pull
.251b	60		               rts
.251c			putabin
.251c	20 fa 24	               jsr     atobin
.251f	20 90 22	               jsr     push
.2522	a2 51		               ldx     #<abin
.2524	a0 24		               ldy     #>abin
.2526	20 9f 21	               jsr     puts
.2529	20 cf 22	               jsr     pop
.252c	60		               rts
.252d			printabin
.252d	20 90 22	               jsr     push
.2530	a2 51		               ldx     #<abin
.2532	a0 24		               ldy     #>abin
.2534	20 9f 21	               jsr     puts
.2537	20 cf 22	               jsr     pop
.253a	60		               rts
.253b			putabinfmt
.253b	08		               php
.253c	48		               pha
.253d	a9 25		               lda     #"%"
.253f	20 99 21	               jsr     putch
.2542	68		               pla
.2543	20 1c 25	               jsr     putabin
.2546	28		               plp
.2547	60		               rts
.2548			putabinxy
.2548	20 b9 21	               jsr     gotoxy
.254b	20 1c 25	               jsr     putabin
.254e	60		               rts
.254f			putabinfmtxy
.254f	20 b9 21	               jsr     gotoxy
.2552	20 3b 25	               jsr     putabinfmt
.2555	60		               rts
.2556			atodec
.2556	20 90 22	               jsr  push
.2559	f8		               sed
.255a	aa		               tax
.255b	a0 00		               ldy  #$00
.255d	a9 00		               lda  #$00
.255f	18		nextbit        clc
.2560	69 01		               adc  #$01
.2562	90 01		               bcc  decx
.2564	c8		               iny
.2565	ca		decx           dex
.2566	d0 f7		               bne  nextbit
.2568	48		               pha
.2569	98		               tya
.256a	20 9a 24	               jsr  nib2hex
.256d	8d 5a 24	               sta  adec
.2570	68		               pla
.2571	48		               pha
.2572	20 9a 24	               jsr  nib2hex
.2575	8d 5c 24	               sta  adec+2
.2578	68		               pla
.2579	6a		               ror
.257a	6a		               ror
.257b	6a		               ror
.257c	6a		               ror
.257d	20 9a 24	               jsr  nib2hex
.2580	8d 5b 24	               sta  adec+1
.2583	d8		               cld
.2584	20 cf 22	               jsr  pull
.2587	60		               rts
>2588	00 00 00	buffer         .byte     0,0,0
.258b			putadec
.258b	20 90 22	               jsr  push
.258e	20 56 25	               jsr  atodec
.2591	a2 5a		               ldx  #<adec
.2593	a0 24		               ldy  #>adec+1
.2595	20 9f 21	               jsr  puts
.2598	20 cf 22	               jsr  pop
.259b	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>259c	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>25a0	00 00 00 00 00 00 00 00 00 0d 00 00
>25ac	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>25b0	00 00 00 00 00 00 00 00 00 00 00 00
>25bc	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>25c0	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>25cc	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>25d0	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>25dc	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>25e0	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>25ec	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>25f0	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>25fc	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>2600	00 00 00 00 00 00 00 00 00 00 00 00
>260c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>2610	00 00 00 00 00 00 00 00 00 00 00 00
>261c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>2620	00 00 00 00 00 00 00 00 00 00 00 00
>262c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>2630	00 00 00 00 00 00 00 00 00 00 00 00
>263c	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>2640	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>264c	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>2650	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>265c	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>2660	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>266c	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>2670	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>267c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>2680	00 00 00 00 00 00 00 00 00 00 00 00
>268c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>2690	00 00 00 00 00 00 00 00 00 00 00 00
.269c			waitstop
.269c	20 90 22	               jsr  push
.269f	20 ed f6	wait           jsr  k_stop
.26a2	d0 fb		               bne  wait
.26a4	20 cf 22	               jsr  pop
.26a7	60		               rts
.26a8			anykey
.26a8	08		               php
.26a9	48		               pha
.26aa	a5 cb		nokey          lda 203
.26ac	c9 40		               cmp #64
.26ae	f0 fa		               beq nokey
.26b0	20 b6 26	               jsr releasekey
.26b3	68		               pla
.26b4	28		               plp
.26b5	60		               rts
.26b6			releasekey
.26b6	08		               php
.26b7	48		               pha
.26b8	a5 cb		keypressed     lda 203
.26ba	c9 40		               cmp #64
.26bc	d0 fa		               bne keypressed
.26be	68		               pla
.26bf	28		               plp
.26c0	60		               rts
.26c1			getkey
.26c1	20 e4 ff	again          jsr  getin
.26c4	c9 00		               cmp  #0
.26c6	f0 f9		               beq  again
.26c8	60		               rts
.26c9			kbflushbuff
.26c9	08		               php
.26ca	48		               pha
.26cb	20 e4 ff	again          jsr  getin
.26ce	c9 00		               cmp  #0
.26d0	d0 f9		               bne  again
.26d2	68		               pla
.26d3	28		               plp
.26d4	60		               rts
.26d5			waitkey
.26d5	20 90 22	               jsr  push
.26d8	8d 26 27	               sta  thekey
.26db	20 e4 ff	nope           jsr  getin
.26de	20 d2 ff	               jsr  chrout
.26e1	cd 26 27	               cmp  thekey
.26e4	d0 f5		               bne  nope
.26e6	20 d2 ff	               jsr  chrout
.26e9	20 cf 22	               jsr  pop
.26ec	60		               rts
.26ed			waitspace
.26ed	20 90 22	               jsr  push
.26f0	a9 7f		wait           lda  #$7f  ;%01111111
.26f2	8d 00 dc	               sta  $dc00
.26f5	ad 01 dc	               lda  $dc01
.26f8	29 10		               and  #$10  ;mask %00010000
.26fa	d0 f4		               bne  wait
.26fc	20 cf 22	               jsr  pop
.26ff			waitsstop
.26ff	20 90 22	               jsr  push
.2702	20 ed f6	wait           jsr  k_stop  ;%01111111
.2705	d0 fb		               bne  wait
.2707	20 cf 22	               jsr  pop
.270a			waitreturn
.270a	20 90 22	               jsr  push
.270d	ad 27 27	               lda  thecount
.2710	8d 00 04	               sta  scrnram
.2713	a9 02		               lda  #$02
.2715	8d 00 d8	               sta  colorram
.2718	20 e4 ff	nope           jsr  getin
.271b	c9 0d		nohex          cmp  #$0d
.271d	d0 f9		               bne  nope
.271f	ee 27 27	               inc  thecount
.2722	20 cf 22	               jsr  pop
.2725	60		               rts
>2726	00		thekey         .byte   0
>2727	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-disk.asm

.2728			diskerror
.2728	20 90 22	               jsr  push
.272b	ad 59 28	               lda  dsk_dev   ; Select device 8
.272e	85 ba		               sta  $ba       ;
.2730	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.2733	a9 6f		               lda  #$6f
.2735	85 b9		               sta  $b9       ;
.2737	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.273a	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.273d	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.2740	c9 0d		               cmp  #$0d      ; Is it CR ?
.2742	d0 f6		               bne  nextchar  ; No, get next char
.2744	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.2747	20 cf 22	               jsr  pop
.274a	60		               rts
.274b			diskdir
.274b	20 90 22	               jsr  push
.274e	a9 24		               lda  #$24      ; L012C - Filename is "$"
.2750	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.2752	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.2754	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.2756	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.2758	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.275a	a9 01		               lda  #$01      ; L0138 - set ...
.275c	85 b7		               sta  $b7       ; L013A - ... length of current filename
.275e	ad 59 28	               lda  dsk_dev   ; L013C - set 8 as ...
.2761	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.2763	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.2765	85 b9		               sta  $b9       ; L0142 - ... secondary address
.2767	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.276a	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.276c	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.276f	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.2771	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.2774	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.2776	85 90		               sta  $90       ; L0153 - ... kernal status word.
.2778	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.277a	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.277c	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.277f	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.2781	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.2783	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.2785	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.2788	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.278a	d0 28		               bne  exit      ; L0167
.278c	a4 fb		               ldy  $fb       ; L0169
.278e	88		               dey            ; L016b
.278f	d0 e9		               bne  loop1     ; L016C - If not last, loop
.2791	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.2793	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.2796	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.2798	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.279b	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.279e	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.27a0	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.27a2	aa		               tax            ; L017F - tfr a in x
.27a3	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.27a5	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.27a8	4c 9b 27	               jmp  loop3     ; L0185 - get another byte
.27ab	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.27ad	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.27b0	a0 02		               ldy  #$02      ; L018D - set Y to 2
.27b2	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.27b4	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.27b7	20 cf 22	               jsr  pop
.27ba	60		               rts            ; L0194
.27bb			directory
.27bb	20 4b 27	               jsr  diskdir
.27be	20 28 27	               jsr  diskerror
.27c1	60		               rts
.27c2			memtofile
.27c2	20 33 28	               jsr  dsk_putmesg
.27c5	20 90 22	               jsr  push
.27c8	ad 5d 28	               lda  dsk_fnlen
.27cb	ae 5b 28	               ldx  dsk_fnptr      ; load fname addr. lbyte
.27ce	ac 5c 28	               ldy  dsk_fnptr+1
.27d1	20 bd ff	               jsr  setnam         ; call setnam
.27d4	ad 5a 28	               lda  dsk_lfsno
.27d7	ae 59 28	               ldx  dsk_dev        ; specified device
.27da	a0 00		skip           ldy  #$00
.27dc	20 ba ff	               jsr  setlfs         ; call setlfs
.27df	ad 55 28	               lda  dsk_data_s     ; put data start lbyte in stal
.27e2	85 c1		               sta  stal
.27e4	ad 56 28	               lda  dsk_data_s+1   ; put data start hbyte in stal
.27e7	85 c2		               sta  stal+1
.27e9	ae 57 28	               ldx  dsk_data_e     ; put data end lbyte in x
.27ec	ac 58 28	               ldy  dsk_data_e+1   ; put data end hbyte in y
.27ef	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.27f1	20 d8 ff	               jsr  save           ; call save
.27f4	90 00		               bcc  noerror        ; if carry set, a load error has happened
.27f6	20 cf 22	noerror        jsr  pop
.27f9	60		               rts
.27fa			filetomem
.27fa	20 90 22	               jsr push
.27fd	ad 5d 28	               lda dsk_fnlen
.2800	ae 5b 28	               ldx dsk_fnptr
.2803	ac 5c 28	               ldy dsk_fnptr+1
.2806	20 bd ff	               jsr setnam     ; call setnam
.2809	ad 5a 28	               lda dsk_lfsno
.280c	ae 59 28	               ldx dsk_dev    ; default to device 8
.280f	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.2811	20 ba ff	               jsr setlfs     ; call setlfs
.2814	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.2816	20 d5 ff	               jsr load       ; call load
.2819	90 03		               bcc noerror      ; if carry set, a load error has happened
.281b	20 22 28	               jsr  error
.281e	20 cf 22	noerror        jsr pop
.2821	60		               rts
.2822			error
.2822	60		               rts
.2823	a2 6e		error1         ldx  #<dsk_emsg1
.2825	a0 28		               ldy  #>dsk_emsg1
.2827	20 9f 21	               jsr  puts
.282a	60		               rts
.282b	a2 82		error2         ldx #<dsk_emsg2
.282d	a0 28		               ldy #>dsk_emsg2
.282f	20 9f 21	               jsr puts
.2832	60		               rts
.2833			dsk_putmesg
.2833	20 90 22	               jsr push
.2836	a2 5e		               ldx #<dsk_msg0
.2838	a0 28		               ldy #>dsk_msg0
.283a	20 9f 21	               jsr puts
.283d	a9 20		               lda #$20
.283f	20 99 21	               jsr putch
.2842	ae 5b 28	               ldx dsk_fnptr
.2845	ac 5c 28	               ldy dsk_fnptr+1
.2848	20 9f 21	               jsr puts
.284b	ad 5a 28	               lda dsk_lfsno
.284e	20 c3 ff	               jsr close
.2851	20 cf 22	               jsr pop
.2854	60		               rts
>2855	00 00		dsk_data_s     .word     $0000    ; example addresses
>2857	00 20		dsk_data_e     .word     $2000
>2859	08		dsk_dev        .byte     $08
>285a	00		dsk_lfsno      .byte     $00
>285b	00 00		dsk_fnptr      .word     $00
>285d	00		dsk_fnlen      .byte     0
>285e	8d		dsk_msg0       .byte     141
>285f	53 41 56 49	               .null     "saving"
>2863	4e 47 00
>2866	8d		dsk_msg1       .byte     141
>2867	53 55 43 43	               .null     "succes"
>286b	45 53 00
>286e	8d		dsk_emsg1      .byte     141
>286f	46 49 43 48	               .null     "fichier non ouvert"
>2873	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>2882	11		dsk_emsg2      .byte     17
>2883	45 52 52 45	               .null     "erreur d'ecriture"
>2887	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charedit.asm


;******  End of listing

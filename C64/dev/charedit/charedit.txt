
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Tue Apr 22 22:37:10 2025

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20241030-204144"	version  = "20241030-204144"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.0854			main
.0854	20 59 24	               jsr  push
.0857	20 24 23	               jsr  scrmaninit
.085a	08		               php
.085b	48		               pha
.085c	a9 08		               lda  #$08
.085e	20 d2 ff	               jsr  $ffd2
.0861	68		               pla
.0862	28		               plp
.0863	20 f2 0a	               jsr  drawcredits
.0866	20 59 24	               jsr  push
.0869	a2 5d		               ldx  #<menu_msg
.086b	a0 1e		               ldy  #>menu_msg
.086d	20 ea 23	               jsr  putscxy
.0870	20 94 24	               jsr  pull
.0873	20 18 22	               jsr  screendis
.0876	20 df 10	               jsr  copycharset
.0879	20 44 23	               jsr  cls
.087c	20 c9 10	               jsr  setscreenptr
.087f	20 8d 0b	               jsr  setdefaultchar
.0882	20 3a 11	               jsr  staticscreen
.0885	20 0c 10	               jsr  drawbitmap
.0888	a9 00		               lda  #$00
.088a	8d a6 09	               sta  fkeyset
.088d	20 8f 11	               jsr  drawfkeys
.0890	a9 00		               lda  #$00
.0892	20 59 24	               jsr  push
.0895	a2 76		               ldx  #<blankmsg
.0897	a0 1b		               ldy  #>blankmsg
.0899	20 ea 23	               jsr  putscxy
.089c	a2 a2		               ldx  #<prompt_msg
.089e	a0 1b		               ldy  #>prompt_msg
.08a0	20 ea 23	               jsr  putscxy
.08a3	20 97 24	               jsr  pop
.08a6	20 25 22	               jsr  screenena
.08a9	20 9e 0d	               jsr  keyaction
.08ac	20 44 23	               jsr  cls
.08af	20 f2 0a	               jsr  drawcredits
.08b2	20 59 24	               jsr  push
.08b5	a2 e6		               ldx  #<bye_msg
.08b7	a0 1f		               ldy  #>bye_msg
.08b9	20 ea 23	               jsr  putscxy
.08bc	20 94 24	               jsr  pull
.08bf	20 59 24	               jsr  push
.08c2	a2 08		               ldx  #<any_msg
.08c4	a0 20		               ldy  #>any_msg
.08c6	20 ea 23	               jsr  putscxy
.08c9	20 94 24	               jsr  pull
.08cc	20 ed 28	               jsr  getkey
.08cf	20 44 23	               jsr  cls
.08d2	20 97 24	endmain        jsr  pop
.08d5	20 66 fe	               jsr  k_warmboot
.08d8	60		               rts
.08d9			savetofile
.08d9	20 59 24	               jsr  push
.08dc	a9 b7		               lda  #<fname
.08de	8d 39 2b	               sta  dsk_fnptr
.08e1	a9 09		               lda  #>fname
.08e3	8d 3a 2b	               sta  dsk_fnptr+1
.08e6	a9 0d		               lda  #(device-fname-1)
.08e8	8d 3b 2b	               sta  dsk_fnlen
.08eb	ad c5 09	               lda  device
.08ee	29 0f		               and  #$0f
.08f0	8d 38 2b	               sta  dsk_lfsno
.08f3	8d 37 2b	               sta  dsk_dev
.08f6	a9 00		               lda  #<bitmapmem
.08f8	8d 33 2b	               sta  dsk_data_s
.08fb	a9 28		               lda  #>bitmapmem
.08fd	8d 34 2b	               sta  dsk_data_s+1
.0900	a9 00		               lda  #<endofaddr
.0902	8d 35 2b	               sta  dsk_data_e
.0905	a9 48		               lda  #>endofaddr
.0907	8d 36 2b	               sta  dsk_data_e+1
.090a	20 59 24	               jsr  push
.090d	a2 76		               ldx  #<blankmsg
.090f	a0 1b		               ldy  #>blankmsg
.0911	20 ea 23	               jsr  putscxy
.0914	20 94 24	               jsr  pull
.0917	20 59 24	               jsr  push
.091a	a2 c8		               ldx  #<wait_msg
.091c	a0 1b		               ldy  #>wait_msg
.091e	20 ea 23	               jsr  putscxy
.0921	20 94 24	               jsr  pull
.0924	20 59 24	               jsr  push
.0927	a2 01		               ldx  #1
.0929	a0 04		               ldy  #4
.092b	20 7b 23	               jsr  gotoxy
.092e	20 97 24	               jsr  pop
.0931	20 ee 29	               jsr  memtofile
.0934	20 97 24	               jsr  pop
.0937	60		               rts
.0938			loadfromfile
.0938	20 59 24	               jsr  push
.093b	a9 b7		               lda  #<fname
.093d	8d 39 2b	               sta  dsk_fnptr
.0940	a9 09		               lda  #>fname
.0942	8d 3a 2b	               sta  dsk_fnptr+1
.0945	a9 0d		               lda  #(device-fname-1)
.0947	8d 3b 2b	               sta  dsk_fnlen
.094a	ad c5 09	               lda  device
.094d	29 0f		               and  #$0f
.094f	8d 37 2b	               sta  dsk_dev
.0952	8d 38 2b	               sta  dsk_lfsno
.0955	a9 00		               lda  #<bitmapmem
.0957	8d 33 2b	               sta  dsk_data_s
.095a	a9 28		               lda  #>bitmapmem
.095c	8d 34 2b	               sta  dsk_data_s+1
.095f	a9 00		               lda  #<endofaddr
.0961	8d 35 2b	               sta  dsk_data_e
.0964	a9 48		               lda  #>endofaddr
.0966	8d 36 2b	               sta  dsk_data_e+1
.0969	20 59 24	               jsr  push
.096c	a2 76		               ldx  #<blankmsg
.096e	a0 1b		               ldy  #>blankmsg
.0970	20 ea 23	               jsr  putscxy
.0973	20 94 24	               jsr  pull
.0976	20 59 24	               jsr  push
.0979	a2 c8		               ldx  #<wait_msg
.097b	a0 1b		               ldy  #>wait_msg
.097d	20 ea 23	               jsr  putscxy
.0980	20 94 24	               jsr  pull
.0983	20 59 24	               jsr  push
.0986	a2 01		               ldx  #1
.0988	a0 04		               ldy  #4
.098a	20 7b 23	               jsr  gotoxy
.098d	20 97 24	               jsr  pop
.0990	20 26 2a	               jsr  filetomem
.0993	20 97 24	               jsr  pop
.0996	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>0997	00 d0		startaddr      .word     $d000               ; 53248
>0999	00 f0		stopaddr       .word     mstopaddr           ; 55296
>099b	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>099d	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>09a1	08 04 02 01
>09a5	00		editmode       .byte     0
>09a6	00		fkeyset        .byte     0
>09a7	00		currentchar    .byte     0
>09a8	00		currentkey     .byte     0
>09a9	00		previouskey    .byte     0
>09aa	00		bitmapoffset   .byte     0
>09ab	00 00		mapaddr        .word     0
>09ad	00 00		byteaddr       .word     0
>09af	00 00		gridaddr       .word     0
>09b1	09		cursln         .byte     grid_top
>09b2	01		curscl         .byte     grid_left
>09b3	05 1b 03 12	pfname         .byte     vvert,27,3,18
>09b7	40 30 3a	fname          .text     "@0:"
>09ba	4f 52 49 47	name           .text     "origin"
>09be	49 4e
>09c0	2e 43 48 52	ext            .null     ".chr"
>09c4	00
>09c5	08		device         .byte     8

;******  Processing file: routines.asm

.09c6			template
.09c6	20 59 24	               jsr  push
.09c9	20 97 24	               jsr  pop
.09cc	60		               rts
.09cd			screenredraw
.09cd	20 59 24	               jsr  push
.09d0	20 18 22	               jsr  screendis
.09d3	20 44 23	               jsr  cls
.09d6	20 3a 11	               jsr  staticscreen
.09d9	20 0c 10	               jsr  drawbitmap
.09dc	20 8f 11	               jsr  drawfkeys
.09df	20 59 24	               jsr  push
.09e2	a2 0d		               ldx  #13
.09e4	a0 0c		               ldy  #12
.09e6	20 7b 23	               jsr  gotoxy
.09e9	20 97 24	               jsr  pop
.09ec	ad a8 09	               lda  currentkey
.09ef	20 5b 23	               jsr  putch
.09f2	20 59 24	               jsr  push
.09f5	a2 76		               ldx  #<blankmsg
.09f7	a0 1b		               ldy  #>blankmsg
.09f9	20 ea 23	               jsr  putscxy
.09fc	a2 a2		               ldx  #<prompt_msg
.09fe	a0 1b		               ldy  #>prompt_msg
.0a00	20 ea 23	               jsr  putscxy
.0a03	20 97 24	               jsr  pop
.0a06	20 25 22	               jsr  screenena
.0a09	20 97 24	               jsr  pop
.0a0c	60		               rts
.0a0d			getfname
.0a0d	20 59 24	               jsr  push
.0a10	20 59 24	               jsr  push
.0a13	a2 76		               ldx  #<blankmsg
.0a15	a0 1b		               ldy  #>blankmsg
.0a17	20 ea 23	               jsr  putscxy
.0a1a	a2 fb		               ldx  #<fname_msg
.0a1c	a0 1d		               ldy  #>fname_msg
.0a1e	20 ea 23	               jsr  putscxy
.0a21	20 97 24	               jsr  pop
.0a24	a2 00		               ldx  #$00
.0a26	8e 5a 0a	               stx  count
.0a29	20 5b 0a	getanother     jsr  getalphanum
.0a2c	20 5b 23	               jsr  putch
.0a2f	ae 5a 0a	               ldx  count
.0a32	9d ba 09	               sta  name,x
.0a35	ee 5a 0a	               inc  count
.0a38	ae 5a 0a	               ldx  count
.0a3b	e0 06		               cpx  #$06
.0a3d	f0 03		               beq  finish
.0a3f	4c 29 0a	               jmp  getanother
.0a42			finish
.0a42	20 59 24	               jsr  push
.0a45	a2 76		               ldx  #<blankmsg
.0a47	a0 1b		               ldy  #>blankmsg
.0a49	20 ea 23	               jsr  putscxy
.0a4c	a2 b3		               ldx  #<pfname
.0a4e	a0 09		               ldy  #>pfname
.0a50	20 ea 23	               jsr  putscxy
.0a53	20 97 24	               jsr  pop
.0a56	20 97 24	               jsr  pop
.0a59	60		               rts
>0a5a	00		count          .byte     0
.0a5b			getalphanum
.0a5b	20 59 24	               jsr  push
.0a5e	20 ed 28	getanother     jsr  getkey
.0a61	c9 30		               cmp  #$30      ; 0
.0a63	30 f9		               bmi  getanother
.0a65	c9 3a		               cmp  #$3a      ; 9+1
.0a67	30 0b		               bmi  goodone
.0a69	c9 41		isitletter     cmp  #$41      ; A
.0a6b	30 f1		               bmi  getanother
.0a6d	c9 5b		               cmp  #$5b      ; Z+1
.0a6f	30 03		               bmi  goodone
.0a71	4c 5e 0a	               jmp  getanother
.0a74	8d 7e 0a	goodone        sta  tempbyte
.0a77	20 97 24	               jsr  pop
.0a7a	ad 7e 0a	               lda  tempbyte
.0a7d	60		               rts
>0a7e	00		tempbyte       .byte     0
.0a7f			copychar
.0a7f	20 59 24	               jsr  push
.0a82	20 bb 0a	               jsr  getvalidkey
.0a85	ad 9b 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0a88	85 fb		               sta  zpage1
.0a8a	ad 9c 09	               lda  bitmapaddr+1
.0a8d	85 fc		               sta  zpage1+1
.0a8f	ae f1 0a	               ldx  copykey
.0a92	bd c8 27	               lda  asciitorom,x
.0a95	aa		               tax
.0a96	e0 00		               cpx  #$00
.0a98	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0a9a	a9 08		addagain       lda  #$08
.0a9c	20 57 13	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0a9f	ca		               dex                 ; pour chaque caracteres
.0aa0	d0 f8		               bne  addagain
.0aa2	ad ab 09	no_offset      lda  mapaddr        ; le caractere actuel
.0aa5	85 fd		               sta  zpage2         ;
.0aa7	ad ac 09	               lda  mapaddr+1      ;
.0aaa	85 fe		               sta  zpage2+1       ;
.0aac	a0 00		               ldy  #$00
.0aae	b1 fb		nextbyte       lda  (zpage1),y
.0ab0	91 fd		               sta  (zpage2),y
.0ab2	c8		               iny
.0ab3	c0 08		               cpy  #$08
.0ab5	d0 f7		               bne  nextbyte
.0ab7	20 97 24	out            jsr  pop
.0aba	60		               rts
.0abb			getvalidkey
.0abb	20 59 24	               jsr  push
.0abe	20 59 24	               jsr  push
.0ac1	a2 76		               ldx  #<blankmsg
.0ac3	a0 1b		               ldy  #>blankmsg
.0ac5	20 ea 23	               jsr  putscxy
.0ac8	a2 d2		               ldx  #<copychar_msg
.0aca	a0 1d		               ldy  #>copychar_msg
.0acc	20 ea 23	               jsr  putscxy
.0acf	20 97 24	               jsr  pop
.0ad2	20 ed 28	getgoodkey     jsr  getkey
.0ad5	8d f1 0a	               sta  copykey
.0ad8	aa		               tax
.0ad9	bc c8 27	               ldy  asciitorom,x
.0adc	c4 00		               cpy  $00
.0ade	d0 0a		               bne  goodone
.0ae0	ae f1 0a	               ldx  copykey
.0ae3	e0 40		               cpx  #$40
.0ae5	f0 03		               beq  goodone
.0ae7	4c d2 0a	               jmp  getgoodkey
.0aea	20 5b 23	goodone        jsr  putch
.0aed	20 97 24	               jsr  pop
.0af0	60		               rts
>0af1	00		copykey        .byte 0
.0af2			drawcredits
.0af2	20 59 24	               jsr  push
.0af5	20 44 23	               jsr  cls
.0af8	20 59 24	               jsr  push
.0afb	a2 72		               ldx  #<whoami0
.0afd	a0 1e		               ldy  #>whoami0
.0aff	20 ea 23	               jsr  putscxy
.0b02	20 94 24	               jsr  pull
.0b05	20 59 24	               jsr  push
.0b08	a2 97		               ldx  #<whoami1
.0b0a	a0 1e		               ldy  #>whoami1
.0b0c	20 ea 23	               jsr  putscxy
.0b0f	20 94 24	               jsr  pull
.0b12	20 59 24	               jsr  push
.0b15	a2 be		               ldx  #<whoami2
.0b17	a0 1e		               ldy  #>whoami2
.0b19	20 ea 23	               jsr  putscxy
.0b1c	20 94 24	               jsr  pull
.0b1f	20 59 24	               jsr  push
.0b22	a2 e3		               ldx  #<whoami3
.0b24	a0 1e		               ldy  #>whoami3
.0b26	20 ea 23	               jsr  putscxy
.0b29	20 94 24	               jsr  pull
.0b2c	20 59 24	               jsr  push
.0b2f	a2 08		               ldx  #<whoami4
.0b31	a0 1f		               ldy  #>whoami4
.0b33	20 ea 23	               jsr  putscxy
.0b36	20 94 24	               jsr  pull
.0b39	20 59 24	               jsr  push
.0b3c	a2 2d		               ldx  #<whoami5
.0b3e	a0 1f		               ldy  #>whoami5
.0b40	20 ea 23	               jsr  putscxy
.0b43	20 94 24	               jsr  pull
.0b46	20 59 24	               jsr  push
.0b49	a2 52		               ldx  #<whoami6
.0b4b	a0 1f		               ldy  #>whoami6
.0b4d	20 ea 23	               jsr  putscxy
.0b50	20 94 24	               jsr  pull
.0b53	20 59 24	               jsr  push
.0b56	a2 77		               ldx  #<whoami7
.0b58	a0 1f		               ldy  #>whoami7
.0b5a	20 ea 23	               jsr  putscxy
.0b5d	20 94 24	               jsr  pull
.0b60	20 59 24	               jsr  push
.0b63	a2 9c		               ldx  #<whoami8
.0b65	a0 1f		               ldy  #>whoami8
.0b67	20 ea 23	               jsr  putscxy
.0b6a	20 94 24	               jsr  pull
.0b6d	20 59 24	               jsr  push
.0b70	a2 c1		               ldx  #<whoami9
.0b72	a0 1f		               ldy  #>whoami9
.0b74	20 ea 23	               jsr  putscxy
.0b77	20 94 24	               jsr  pull
.0b7a	20 75 13	               jsr  delay
.0b7d	20 75 13	               jsr  delay
.0b80	20 75 13	               jsr  delay
.0b83	20 75 13	               jsr  delay
.0b86	20 75 13	               jsr  delay
.0b89	20 97 24	               jsr  pop
.0b8c	60		               rts
.0b8d			setdefaultchar
.0b8d	20 59 24	               jsr  push
.0b90	a9 40		               lda  #$40
.0b92	8d a8 09	               sta  currentkey
.0b95	aa		               tax
.0b96	bc c8 27	               ldy  asciitorom,x
.0b99	8c aa 09	               sty  bitmapoffset
.0b9c	20 57 0c	               jsr  drawkeyval
.0b9f	20 0c 10	               jsr  drawbitmap
.0ba2	20 59 24	               jsr  push
.0ba5	a2 0d		               ldx  #13
.0ba7	a0 0c		               ldy  #12
.0ba9	20 7b 23	               jsr  gotoxy
.0bac	20 97 24	               jsr  pop
.0baf	20 5b 23	               jsr  putch
.0bb2	20 59 24	               jsr  push
.0bb5	a2 11		               ldx  #17
.0bb7	a0 05		               ldy  #5
.0bb9	20 7b 23	               jsr  gotoxy
.0bbc	20 97 24	               jsr  pop
.0bbf	20 85 27	               jsr  atodec
.0bc2	20 59 24	               jsr  push
.0bc5	a2 89		               ldx  #<adec
.0bc7	a0 26		               ldy  #>adec
.0bc9	20 61 23	               jsr  puts
.0bcc	20 94 24	               jsr  pull
.0bcf	20 97 24	               jsr  pop
.0bd2	60		               rts
.0bd3			resetmenuacolor
.0bd3	20 59 24	               jsr  push
.0bd6	a9 03		               lda  #menu1col1
.0bd8	8d 60 20	               sta  f1abutton
.0bdb	8d 96 20	               sta  f3abutton
.0bde	8d cc 20	               sta  f5abutton
.0be1	8d 02 21	               sta  f7abutton
.0be4	a9 0e		               lda  #menu1col2
.0be6	8d 7b 20	               sta  f2abutton
.0be9	8d b1 20	               sta  f4abutton
.0bec	8d e7 20	               sta  f6abutton
.0bef	8d 1d 21	               sta  f8abutton
.0bf2	20 97 24	               jsr  pop
.0bf5	60		               rts
.0bf6			resetmenubcolor
.0bf6	20 59 24	               jsr  push
.0bf9	a9 0f		               lda  #menu2col1
.0bfb	8d 38 21	               sta  f1bbutton
.0bfe	8d 6e 21	               sta  f3bbutton
.0c01	8d a4 21	               sta  f5bbutton
.0c04	8d da 21	               sta  f7bbutton
.0c07	a9 0f		               lda  #menu2col1
.0c09	8d 53 21	               sta  f2bbutton
.0c0c	8d 89 21	               sta  f4bbutton
.0c0f	8d bf 21	               sta  f6bbutton
.0c12	8d f5 21	               sta  f8bbutton
.0c15	20 97 24	               jsr  pop
.0c18	60		               rts
.0c19			setmenuacolor
.0c19	20 59 24	               jsr  push
.0c1c	8d 60 20	               sta  f1abutton
.0c1f	8d 7b 20	               sta  f2abutton
.0c22	8d 96 20	               sta  f3abutton
.0c25	8d b1 20	               sta  f4abutton
.0c28	8d cc 20	               sta  f5abutton
.0c2b	8d e7 20	               sta  f6abutton
.0c2e	8d 02 21	               sta  f7abutton
.0c31	8d 1d 21	               sta  f8abutton
.0c34	20 97 24	               jsr  pop
.0c37	60		               rts
.0c38			setmenubcolor
.0c38	20 59 24	               jsr  push
.0c3b	8d 38 21	               sta  f1bbutton
.0c3e	8d 53 21	               sta  f2bbutton
.0c41	8d 6e 21	               sta  f3bbutton
.0c44	8d 89 21	               sta  f4bbutton
.0c47	8d a4 21	               sta  f5bbutton
.0c4a	8d bf 21	               sta  f6bbutton
.0c4d	8d da 21	               sta  f7bbutton
.0c50	8d f5 21	               sta  f8bbutton
.0c53	20 97 24	               jsr  pop
.0c56	60		               rts
.0c57			drawkeyval
.0c57	20 59 24	               jsr  push
.0c5a	20 59 24	               jsr  push
.0c5d	a2 01		               ldx  #1
.0c5f	a0 13		               ldy  #19
.0c61	20 7b 23	               jsr  gotoxy
.0c64	20 97 24	               jsr  pop
.0c67	ad a8 09	               lda  currentkey
.0c6a	20 5b 23	               jsr  putch
.0c6d	48		               pha
.0c6e	a9 3d		               lda  #'='
.0c70	20 5b 23	               jsr  putch
.0c73	a9 25		               lda  #'%'
.0c75	20 5b 23	               jsr  putch
.0c78	68		               pla
.0c79	20 4b 27	               jsr  putabin
.0c7c	20 59 24	               jsr  push
.0c7f	a2 01		               ldx  #1
.0c81	a0 14		               ldy  #20
.0c83	20 7b 23	               jsr  gotoxy
.0c86	20 97 24	               jsr  pop
.0c89	20 59 24	               jsr  push
.0c8c	a2 58		               ldx  #<txt1
.0c8e	a0 0d		               ldy  #>txt1
.0c90	20 61 23	               jsr  puts
.0c93	20 94 24	               jsr  pull
.0c96	a9 24		               lda  #'$'
.0c98	20 5b 23	               jsr  putch
.0c9b	ad a8 09	               lda  currentkey
.0c9e	20 b8 26	               jsr  putahex
.0ca1	20 59 24	               jsr  push
.0ca4	a2 01		               ldx  #1
.0ca6	a0 15		               ldy  #21
.0ca8	20 7b 23	               jsr  gotoxy
.0cab	20 97 24	               jsr  pop
.0cae	20 59 24	               jsr  push
.0cb1	a2 63		               ldx  #<txt2
.0cb3	a0 0d		               ldy  #>txt2
.0cb5	20 61 23	               jsr  puts
.0cb8	20 94 24	               jsr  pull
.0cbb	a9 24		               lda  #'$'
.0cbd	20 5b 23	               jsr  putch
.0cc0	ad 9c 09	               lda  bitmapaddr+1
.0cc3	20 b8 26	               jsr  putahex
.0cc6	ad 9b 09	               lda  bitmapaddr
.0cc9	20 b8 26	               jsr  putahex
.0ccc	20 59 24	               jsr  push
.0ccf	a2 01		               ldx  #1
.0cd1	a0 16		               ldy  #22
.0cd3	20 7b 23	               jsr  gotoxy
.0cd6	20 97 24	               jsr  pop
.0cd9	20 59 24	               jsr  push
.0cdc	a2 6e		               ldx  #<txt3
.0cde	a0 0d		               ldy  #>txt3
.0ce0	20 61 23	               jsr  puts
.0ce3	20 94 24	               jsr  pull
.0ce6	a9 24		               lda  #'$'
.0ce8	20 5b 23	               jsr  putch
.0ceb	ad aa 09	               lda  bitmapoffset
.0cee	20 b8 26	               jsr  putahex
.0cf1	20 59 24	               jsr  push
.0cf4	a2 01		               ldx  #1
.0cf6	a0 17		               ldy  #23
.0cf8	20 7b 23	               jsr  gotoxy
.0cfb	20 97 24	               jsr  pop
.0cfe	20 59 24	               jsr  push
.0d01	a2 7b		               ldx  #<txt4
.0d03	a0 0d		               ldy  #>txt4
.0d05	20 61 23	               jsr  puts
.0d08	20 94 24	               jsr  pull
.0d0b	a9 24		               lda  #'$'
.0d0d	20 5b 23	               jsr  putch
.0d10	ad ac 09	               lda  mapaddr+1
.0d13	20 b8 26	               jsr  putahex
.0d16	ad ab 09	               lda  mapaddr
.0d19	20 b8 26	               jsr  putahex
.0d1c	20 59 24	               jsr  push
.0d1f	a2 01		               ldx  #1
.0d21	a0 18		               ldy  #24
.0d23	20 7b 23	               jsr  gotoxy
.0d26	20 97 24	               jsr  pop
.0d29	20 59 24	               jsr  push
.0d2c	a2 86		               ldx  #<txt5
.0d2e	a0 0d		               ldy  #>txt5
.0d30	20 61 23	               jsr  puts
.0d33	20 94 24	               jsr  pull
.0d36	ad b2 09	               lda  curscl
.0d39	20 b8 26	               jsr  putahex
.0d3c	a9 da		               lda  #$da
.0d3e	20 5b 23	               jsr  putch
.0d41	ad b1 09	               lda  cursln
.0d44	20 b8 26	               jsr  putahex
.0d47	20 97 24	               jsr  pop
.0d4a	60		               rts
>0d4b	50 45 54 53	txt0           .null     "petscii :   "
>0d4f	43 49 49 20 3a 20 20 20 00
>0d58	4b 45 59 20	txt1           .null     "key code: "
>0d5c	43 4f 44 45 3a 20 00
>0d63	42 49 54 4d	txt2           .null     "bitmap..: "
>0d67	41 50 2e 2e 3a 20 00
>0d6e	4f 46 46 53	txt3           .null     "offset..:   "
>0d72	45 54 2e 2e 3a 20 20 20 00
>0d7b	4d 41 50 41	txt4           .null     "mapaddr.: "
>0d7f	44 44 52 2e 3a 20 00
>0d86	43 55 52 53	txt5           .null     "cursval.: "
>0d8a	56 41 4c 2e 3a 20 00
>0d91	53 54 41 43	txt6           .null     "stack......:"
>0d95	4b 2e 2e 2e 2e 2e 2e 3a 00
.0d9e			keyaction
.0d9e	20 59 24	               jsr  push
.0da1	20 ed 28	loop           jsr  getkey
.0da4	c9 85		f1             cmp  #key_f1
.0da6	d0 03		               bne  f2
.0da8	4c 26 0e	               jmp  dof1
.0dab	c9 89		f2             cmp  #key_f2
.0dad	d0 03		               bne  f3
.0daf	4c 2c 0e	               jmp  dof2
.0db2	c9 86		f3             cmp  #key_f3
.0db4	d0 03		               bne  f4
.0db6	4c 32 0e	               jmp  dof3
.0db9	c9 8a		f4             cmp  #key_f4
.0dbb	d0 03		               bne  f5
.0dbd	4c 38 0e	               jmp  dof4
.0dc0	c9 87		f5             cmp  #key_f5
.0dc2	d0 03		               bne  f6
.0dc4	4c 3e 0e	               jmp  dof5
.0dc7	c9 8b		f6             cmp  #key_f6
.0dc9	d0 03		               bne  f7
.0dcb	4c 44 0e	               jmp  dof6
.0dce	c9 88		f7             cmp  #key_f7
.0dd0	d0 03		               bne  f8
.0dd2	4c 4a 0e	               jmp  dof7
.0dd5	c9 8c		f8             cmp  #key_f8
.0dd7	d0 03		               bne  ctrlx
.0dd9	4c 50 0e	               jmp  dof8
.0ddc	c9 18		ctrlx          cmp  #ctrl_x
.0dde	d0 03		               bne  ctrlr
.0de0	4c 56 0e	               jmp  doquit
.0de3	c9 12		ctrlr          cmp  #ctrl_r
.0de5	d0 06		               bne  ishex14
.0de7	20 cd 09	               jsr  screenredraw
.0dea	4c a1 0d	               jmp  loop
.0ded	c9 14		ishex14        cmp  #$14
.0def	d0 03		               bne  ishex12
.0df1	4c a1 0d	               jmp  loop
.0df4	c9 12		ishex12        cmp  #$12
.0df6	d0 03		               bne  reste
.0df8	4c a1 0d	               jmp  loop
.0dfb			reste
.0dfb	20 59 24	               jsr  push
.0dfe	a2 0d		               ldx  #13
.0e00	a0 0c		               ldy  #12
.0e02	20 7b 23	               jsr  gotoxy
.0e05	20 97 24	               jsr  pop
.0e08	20 5b 23	               jsr  putch
.0e0b	48		               pha
.0e0c	ad a8 09	               lda  currentkey
.0e0f	8d a9 09	               sta  previouskey
.0e12	68		               pla
.0e13	8d a8 09	               sta  currentkey
.0e16	aa		               tax
.0e17	bc c8 27	               ldy  asciitorom,x
.0e1a	8c aa 09	               sty  bitmapoffset
.0e1d	20 57 0c	               jsr  drawkeyval
.0e20	20 0c 10	               jsr  drawbitmap
.0e23	4c a1 0d	               jmp  loop
.0e26	20 8b 13	dof1           jsr  f1action  ;edit/reverse
.0e29	4c a1 0d	               jmp  loop
.0e2c	20 b0 14	dof2           jsr  f2action  ;save/flip vert
.0e2f	4c a1 0d	               jmp  loop
.0e32	20 68 15	dof3           jsr  f3action  ;load/flip horz
.0e35	4c a1 0d	               jmp  loop
.0e38	20 49 16	dof4           jsr  f4action  ;copy/scroll r
.0e3b	4c a1 0d	               jmp  loop
.0e3e	20 2d 17	dof5           jsr  f5action  ;clear/scroll l
.0e41	4c a1 0d	               jmp  loop
.0e44	20 e5 17	dof6           jsr  f6action  ;fill;/scroll up
.0e47	4c a1 0d	               jmp  loop
.0e4a	20 9d 18	dof7           jsr  f7action  ;clear;/scroll down
.0e4d	4c a1 0d	               jmp  loop
.0e50	20 5a 19	dof8           jsr  f8action  ; function
.0e53	4c a1 0d	               jmp  loop
.0e56	20 97 24	doquit         jsr  pop
.0e59	60		               rts
.0e5a			editor
.0e5a	20 59 24	               jsr  push
.0e5d	20 59 24	               jsr  push
.0e60	a2 76		               ldx  #<blankmsg
.0e62	a0 1b		               ldy  #>blankmsg
.0e64	20 ea 23	               jsr  putscxy
.0e67	a2 5d		               ldx  #<exit_msg
.0e69	a0 1e		               ldy  #>exit_msg
.0e6b	20 ea 23	               jsr  putscxy
.0e6e	20 97 24	               jsr  pop
.0e71	20 59 24	               jsr  push
.0e74	a2 76		               ldx  #<blankmsg
.0e76	a0 1b		               ldy  #>blankmsg
.0e78	20 ea 23	               jsr  putscxy
.0e7b	a2 e4		               ldx  #<edit_msg
.0e7d	a0 1b		               ldy  #>edit_msg
.0e7f	20 ea 23	               jsr  putscxy
.0e82	20 97 24	               jsr  pop
.0e85	20 c8 0f	               jsr  setcurs
.0e88	ad a8 09	               lda  currentkey
.0e8b	20 59 24	               jsr  push
.0e8e	a2 11		               ldx  #17
.0e90	a0 05		               ldy  #5
.0e92	20 7b 23	               jsr  gotoxy
.0e95	20 97 24	               jsr  pop
.0e98	20 85 27	               jsr  atodec
.0e9b	20 59 24	               jsr  push
.0e9e	a2 89		               ldx  #<adec
.0ea0	a0 26		               ldy  #>adec
.0ea2	20 61 23	               jsr  puts
.0ea5	20 94 24	               jsr  pull
.0ea8	20 0c 10	               jsr  drawbitmap
.0eab	20 ed 28	ed_loop        jsr  getkey
.0eae	c9 85		f1             cmp  #f1key
.0eb0	d0 03		               bne  cu
.0eb2	4c 9a 0f	               jmp  do_ctrlx
.0eb5	c9 91		cu             cmp  #cursu
.0eb7	d0 03		               bne  cd
.0eb9	4c 45 0f	               jmp  do_up
.0ebc	c9 11		cd             cmp  #cursd
.0ebe	d0 03		               bne  cl
.0ec0	4c 58 0f	               jmp  do_down
.0ec3	c9 9d		cl             cmp  #cursl
.0ec5	d0 03		               bne  cr
.0ec7	4c 6b 0f	               jmp  do_left
.0eca	c9 1d		cr             cmp  #cursr
.0ecc	d0 03		               bne  cx
.0ece	4c 7e 0f	               jmp  do_right
.0ed1	c9 18		cx             cmp  #ctrl_x
.0ed3	d0 03		               bne  sp
.0ed5	4c 9a 0f	               jmp  do_ctrlx
.0ed8	c9 20		sp             cmp  #$20
.0eda	d0 03		               bne  ishex14
.0edc	4c 91 0f	               jmp  do_swap
.0edf	c9 14		ishex14        cmp  #$14
.0ee1	d0 03		               bne  ishex12
.0ee3	4c 91 0f	               jmp  do_swap
.0ee6	c9 12		ishex12        cmp  #$12
.0ee8	d0 03		               bne  rest
.0eea	4c 91 0f	               jmp  do_swap
.0eed			rest
.0eed	20 59 24	               jsr  push
.0ef0	a2 0d		               ldx  #13
.0ef2	a0 0c		               ldy  #12
.0ef4	20 7b 23	               jsr  gotoxy
.0ef7	20 97 24	               jsr  pop
.0efa	20 5b 23	               jsr  putch
.0efd	48		               pha
.0efe	ad a8 09	               lda  currentkey
.0f01	8d a9 09	               sta  previouskey
.0f04	68		               pla
.0f05	8d a8 09	               sta  currentkey
.0f08	aa		               tax
.0f09	bc c8 27	               ldy  asciitorom,x
.0f0c	8c aa 09	               sty  bitmapoffset
.0f0f	20 57 0c	               jsr  drawkeyval
.0f12	20 0c 10	               jsr  drawbitmap
.0f15	20 59 24	               jsr  push
.0f18	a2 0d		               ldx  #13
.0f1a	a0 0c		               ldy  #12
.0f1c	20 7b 23	               jsr  gotoxy
.0f1f	20 97 24	               jsr  pop
.0f22	20 5b 23	               jsr  putch
.0f25	20 59 24	               jsr  push
.0f28	a2 11		               ldx  #17
.0f2a	a0 05		               ldy  #5
.0f2c	20 7b 23	               jsr  gotoxy
.0f2f	20 97 24	               jsr  pop
.0f32	20 85 27	               jsr  atodec
.0f35	20 59 24	               jsr  push
.0f38	a2 89		               ldx  #<adec
.0f3a	a0 26		               ldy  #>adec
.0f3c	20 61 23	               jsr  puts
.0f3f	20 94 24	               jsr  pull
.0f42	4c 97 0f	               jmp  totop
.0f45	ad b1 09	do_up          lda  cursln
.0f48	c9 09		               cmp  #grid_top
.0f4a	f0 4b		               beq  totop
.0f4c	20 ea 0f	               jsr  clrcurs
.0f4f	ce b1 09	               dec  cursln
.0f52	20 c8 0f	               jsr  setcurs
.0f55	4c 97 0f	               jmp  totop
.0f58	ad b1 09	do_down        lda  cursln
.0f5b	c9 10		               cmp  #grid_bot
.0f5d	f0 38		               beq  totop
.0f5f	20 ea 0f	               jsr  clrcurs
.0f62	ee b1 09	               inc  cursln
.0f65	20 c8 0f	               jsr  setcurs
.0f68	4c 97 0f	               jmp  totop
.0f6b	ad b2 09	do_left        lda  curscl
.0f6e	c9 01		               cmp  #grid_left
.0f70	f0 25		               beq  totop
.0f72	20 ea 0f	               jsr  clrcurs
.0f75	ce b2 09	               dec  curscl
.0f78	20 c8 0f	               jsr  setcurs
.0f7b	4c 97 0f	               jmp  totop
.0f7e	ad b2 09	do_right       lda  curscl
.0f81	c9 08		               cmp  #grid_right
.0f83	f0 12		               beq  totop
.0f85	20 ea 0f	               jsr  clrcurs
.0f88	ee b2 09	               inc  curscl
.0f8b	20 c8 0f	               jsr  setcurs
.0f8e	4c 97 0f	               jmp  totop
.0f91	20 a1 0f	do_swap        jsr  do_eor
.0f94	20 0c 10	               jsr  drawbitmap
.0f97	4c ab 0e	totop          jmp  ed_loop
.0f9a	20 ea 0f	do_ctrlx       jsr  clrcurs
.0f9d	20 97 24	               jsr  pop
.0fa0	60		               rts
.0fa1			do_eor
.0fa1	20 59 24	               jsr  push
.0fa4	ad ab 09	               lda  mapaddr
.0fa7	85 fd		               sta  zpage2
.0fa9	ad ac 09	               lda  mapaddr+1
.0fac	85 fe		               sta  zpage2+1
.0fae	ae b1 09	               ldx  cursln     ; calcul de
.0fb1	ca		               dex            ; l'offset de
.0fb2	8a		               txa            ; la
.0fb3	29 f7		               and  #$f7      ; ligne
.0fb5	a8		               tay
.0fb6	ae b2 09	               ldx  curscl
.0fb9	ca		               dex
.0fba	bd 9d 09	               lda  eorval,x
.0fbd	51 fd		               eor  (zpage2),y
.0fbf	20 57 0c	               jsr  drawkeyval
.0fc2	91 fd		               sta  (zpage2),y
.0fc4	20 97 24	               jsr  pop
.0fc7	60		               rts
.0fc8			setcurs
.0fc8	20 59 24	               jsr  push
.0fcb	a2 01		               ldx  #grid_left
.0fcd	ac b1 09	               ldy  cursln
.0fd0	20 7b 23	               jsr  gotoxy
.0fd3	a9 da		               lda  #$da
.0fd5	20 5b 23	               jsr  putch
.0fd8	ae b2 09	               ldx  curscl
.0fdb	e8		               inx
.0fdc	a0 08		               ldy  #grid_top-1
.0fde	20 7b 23	               jsr  gotoxy
.0fe1	a9 da		               lda  #$da
.0fe3	20 5b 23	               jsr  putch
.0fe6	20 97 24	               jsr  pop
.0fe9	60		               rts
.0fea			clrcurs
.0fea	20 59 24	               jsr  push
.0fed	a2 01		               ldx  #grid_left
.0fef	ac b1 09	               ldy  cursln
.0ff2	20 7b 23	               jsr  gotoxy
.0ff5	a9 20		               lda  #$20
.0ff7	20 5b 23	               jsr  putch
.0ffa	ae b2 09	               ldx  curscl
.0ffd	e8		               inx
.0ffe	a0 08		               ldy  #grid_top-1
.1000	20 7b 23	               jsr  gotoxy
.1003	a9 20		               lda  #$20
.1005	20 5b 23	               jsr  putch
.1008	20 97 24	               jsr  pop
.100b	60		               rts
.100c			drawbitmap
.100c	20 59 24	               jsr  push
.100f	20 73 10	               jsr  calcmapaddr
.1012	ad ab 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.1015	85 fb		               sta  zpage1
.1017	ad ac 09	               lda  mapaddr+1
.101a	85 fc		               sta  zpage1+1
.101c	a0 00		drawchar       ldy  #$00
.101e	a2 09		               ldx  #grid_top      ;on replace la ...
.1020	8e 29 10	               stx  isy+1          ;ligne de départ
.1023	20 59 24	nextline       jsr  push
.1026	a2 02		               ldx  #grid_left+1        ; la colonne
.1028	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.102a	20 7b 23	               jsr  gotoxy
.102d	20 97 24	               jsr  pop
.1030	b1 fb		               lda  (zpage1),y     ; on li une ligne
.1032	20 29 27	               jsr  atobin
.1035	20 a2 10	               jsr  abintograph
.1038	20 59 24	               jsr  push
.103b	a2 80		               ldx  #<abin
.103d	a0 26		               ldy  #>abin
.103f	20 61 23	               jsr  puts
.1042	20 94 24	               jsr  pull
.1045	ee 29 10	               inc  isy+1
.1048	c8		               iny
.1049	c0 08		               cpy  #$08
.104b	30 d6		               bmi  nextline
.104d	20 54 10	               jsr  highlight
.1050	20 97 24	               jsr  pop
.1053	60		               rts
.1054			highlight
.1054	20 59 24	               jsr  push
.1057	ae a9 09	               ldx  previouskey
.105a	bd c8 27	               lda  asciitorom,x
.105d	aa		               tax
.105e	a9 0f		               lda  #charscolor
.1060	9d 00 d8	               sta  colorram,x
.1063	ae a8 09	               ldx  currentkey
.1066	bd c8 27	               lda  asciitorom,x
.1069	aa		               tax
.106a	a9 01		               lda  #charcolor
.106c	9d 00 d8	               sta  colorram,x
.106f	20 97 24	               jsr  pop
.1072	60		               rts
.1073			calcmapaddr
.1073	20 59 24	               jsr  push
.1076	ad 9b 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.1079	85 fb		               sta  zpage1
.107b	ad 9c 09	               lda  bitmapaddr+1
.107e	85 fc		               sta  zpage1+1
.1080	ae aa 09	               ldx  bitmapoffset
.1083	e0 00		               cpx  #$00
.1085	f0 08		               beq  thesame         ; sommes nous déja à 0
.1087	a9 08		addagain       lda  #$08
.1089	20 57 13	               jsr  zp1addnum      ; on augmente de 8 byte ...
.108c	ca		               dex                 ; pour chaque caracteres
.108d	d0 f8		               bne  addagain
.108f	48		thesame        pha
.1090	a5 fb		               lda  zpage1
.1092	8d ab 09	               sta  mapaddr
.1095	a5 fc		               lda  zpage1+1
.1097	8d ac 09	               sta  mapaddr+1
.109a	68		               pla
.109b	20 57 0c	               jsr  drawkeyval
.109e	20 97 24	out            jsr  pop
.10a1	60		               rts
.10a2			abintograph
.10a2	20 59 24	               jsr  push
.10a5	a9 80		               lda  #<abin
.10a7	85 fb		               sta  zpage1
.10a9	a9 26		               lda  #>abin+1
.10ab	85 fc		               sta  zpage1+1
.10ad	a0 00		               ldy  #$00
.10af	b1 fb		nextbit        lda  (zpage1),y
.10b1	c9 30		               cmp  #$30
.10b3	f0 07		               beq  itszero
.10b5	a9 d1		itsone         lda  #$d1
.10b7	91 fb		               sta  (zpage1),y
.10b9	4c c0 10	               jmp  next
.10bc	a9 2e		itszero        lda  #$2e
.10be	91 fb		               sta  (zpage1),y
.10c0	c8		next           iny
.10c1	c0 08		               cpy  #$08
.10c3	30 ea		               bmi  nextbit
.10c5	20 97 24	               jsr  pop
.10c8	60		               rts
.10c9			setscreenptr
.10c9	20 59 24	               jsr  push
.10cc	a9 08		               lda  #$08      ; basic commande to disable ...
.10ce	20 d2 ff	               jsr  chrout    ; ... character set change.
.10d1	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.10d4	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.10d6	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.10d8	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.10db	20 97 24	               jsr  pop
.10de	60		               rts
.10df			copycharset
.10df	20 59 24	               jsr  push
.10e2	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.10e5	29 fe		               and  #%11111110     ;254
.10e7	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.10ea	a5 01		               lda  u6510map       ;$01
.10ec	29 fb		               and  #%11111011     ;251
.10ee	85 01		               sta  u6510map       ;$01
.10f0	20 05 11	               jsr  memcopy
.10f3	a5 01		               lda  u6510map       ;$01
.10f5	09 04		               ora  #%00000100
.10f7	85 01		               sta  u6510map       ;$01
.10f9	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.10fc	09 01		               ora  #%00000001     ;254
.10fe	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.1101	20 97 24	               jsr  pop
.1104	60		               rts
.1105			memcopy
.1105	20 59 24	               jsr  push
.1108	ad 97 09	               lda  startaddr
.110b	85 fb		               sta  zpage1
.110d	ad 98 09	               lda  startaddr+1
.1110	85 fc		               sta  zpage1+1
.1112	ad 9b 09	               lda  bitmapaddr
.1115	85 fd		               sta  zpage2
.1117	ad 9c 09	               lda  bitmapaddr+1
.111a	85 fe		               sta  zpage2+1
.111c	a0 00		               ldy  #$00
.111e	b1 fb		onemore        lda  (zpage1),y
.1120	91 fd		               sta  (zpage2),y
.1122	20 b1 25	               jsr  inczp1
.1125	20 c9 25	               jsr  inczp2
.1128	a5 fc		               lda  zpage1+1
.112a	cd 9a 09	               cmp  stopaddr+1
.112d	d0 ef		               bne  onemore
.112f	a5 fb		               lda  zpage1
.1131	cd 99 09	               cmp  stopaddr
.1134	d0 e8		               bne  onemore
.1136	20 97 24	               jsr  pop
.1139	60		               rts
.113a			staticscreen
.113a	48		               pha
.113b	a9 0b		               lda  #bordure
.113d	8d 20 d0	               sta  $d020
.1140	68		               pla
.1141	48		               pha
.1142	a9 00		               lda  #fond
.1144	8d 21 d0	               sta  $d021
.1147	68		               pla
.1148	20 ae 12	               jsr  drawlines
.114b	20 8a 12	               jsr  drawallchars
.114e	20 f6 12	               jsr  drawgrid
.1151	20 8f 11	               jsr  drawfkeys
.1154	a9 0a		               lda  #vrose
.1156	8d 45 1e	               sta  redraw_msg
.1159	20 59 24	               jsr  push
.115c	a2 76		               ldx  #<blankmsg
.115e	a0 1b		               ldy  #>blankmsg
.1160	20 ea 23	               jsr  putscxy
.1163	a2 45		               ldx  #<redraw_msg
.1165	a0 1e		               ldy  #>redraw_msg
.1167	20 ea 23	               jsr  putscxy
.116a	20 97 24	               jsr  pop
.116d	20 59 24	               jsr  push
.1170	a2 76		               ldx  #<blankmsg
.1172	a0 1b		               ldy  #>blankmsg
.1174	20 ea 23	               jsr  putscxy
.1177	a2 30		               ldx  #<quit_msg
.1179	a0 1e		               ldy  #>quit_msg
.117b	20 ea 23	               jsr  putscxy
.117e	20 97 24	               jsr  pop
.1181	20 59 24	               jsr  push
.1184	a2 00		               ldx  #0
.1186	a0 07		               ldy  #7
.1188	20 7b 23	               jsr  gotoxy
.118b	20 97 24	               jsr  pop
.118e	60		               rts
.118f			drawfkeys
.118f	20 59 24	               jsr  push
.1192	ad a6 09	               lda  fkeyset
.1195	c9 00		               cmp  #$0
.1197	d0 78		               bne  secondks
.1199	20 59 24	               jsr  push
.119c	a2 2a		               ldx  #<titremenu1
.119e	a0 20		               ldy  #>titremenu1
.11a0	20 ea 23	               jsr  putscxy
.11a3	20 94 24	               jsr  pull
.11a6	20 59 24	               jsr  push
.11a9	a2 60		               ldx  #<f1abutton
.11ab	a0 20		               ldy  #>f1abutton
.11ad	20 ea 23	               jsr  putscxy
.11b0	20 94 24	               jsr  pull
.11b3	20 59 24	               jsr  push
.11b6	a2 7b		               ldx  #<f2abutton
.11b8	a0 20		               ldy  #>f2abutton
.11ba	20 ea 23	               jsr  putscxy
.11bd	20 94 24	               jsr  pull
.11c0	20 59 24	               jsr  push
.11c3	a2 96		               ldx  #<f3abutton
.11c5	a0 20		               ldy  #>f3abutton
.11c7	20 ea 23	               jsr  putscxy
.11ca	20 94 24	               jsr  pull
.11cd	20 59 24	               jsr  push
.11d0	a2 b1		               ldx  #<f4abutton
.11d2	a0 20		               ldy  #>f4abutton
.11d4	20 ea 23	               jsr  putscxy
.11d7	20 94 24	               jsr  pull
.11da	20 59 24	               jsr  push
.11dd	a2 cc		               ldx  #<f5abutton
.11df	a0 20		               ldy  #>f5abutton
.11e1	20 ea 23	               jsr  putscxy
.11e4	20 94 24	               jsr  pull
.11e7	20 59 24	               jsr  push
.11ea	a2 e7		               ldx  #<f6abutton
.11ec	a0 20		               ldy  #>f6abutton
.11ee	20 ea 23	               jsr  putscxy
.11f1	20 94 24	               jsr  pull
.11f4	20 59 24	               jsr  push
.11f7	a2 02		               ldx  #<f7abutton
.11f9	a0 21		               ldy  #>f7abutton
.11fb	20 ea 23	               jsr  putscxy
.11fe	20 94 24	               jsr  pull
.1201	20 59 24	               jsr  push
.1204	a2 1d		               ldx  #<f8abutton
.1206	a0 21		               ldy  #>f8abutton
.1208	20 ea 23	               jsr  putscxy
.120b	20 94 24	               jsr  pull
.120e	4c 86 12	               jmp end
.1211			secondks
.1211	20 59 24	               jsr  push
.1214	a2 45		               ldx  #<titremenu2
.1216	a0 20		               ldy  #>titremenu2
.1218	20 ea 23	               jsr  putscxy
.121b	20 94 24	               jsr  pull
.121e	20 59 24	               jsr  push
.1221	a2 38		               ldx  #<f1bbutton
.1223	a0 21		               ldy  #>f1bbutton
.1225	20 ea 23	               jsr  putscxy
.1228	20 94 24	               jsr  pull
.122b	20 59 24	               jsr  push
.122e	a2 53		               ldx  #<f2bbutton
.1230	a0 21		               ldy  #>f2bbutton
.1232	20 ea 23	               jsr  putscxy
.1235	20 94 24	               jsr  pull
.1238	20 59 24	               jsr  push
.123b	a2 6e		               ldx  #<f3bbutton
.123d	a0 21		               ldy  #>f3bbutton
.123f	20 ea 23	               jsr  putscxy
.1242	20 94 24	               jsr  pull
.1245	20 59 24	               jsr  push
.1248	a2 89		               ldx  #<f4bbutton
.124a	a0 21		               ldy  #>f4bbutton
.124c	20 ea 23	               jsr  putscxy
.124f	20 94 24	               jsr  pull
.1252	20 59 24	               jsr  push
.1255	a2 a4		               ldx  #<f5bbutton
.1257	a0 21		               ldy  #>f5bbutton
.1259	20 ea 23	               jsr  putscxy
.125c	20 94 24	               jsr  pull
.125f	20 59 24	               jsr  push
.1262	a2 bf		               ldx  #<f6bbutton
.1264	a0 21		               ldy  #>f6bbutton
.1266	20 ea 23	               jsr  putscxy
.1269	20 94 24	               jsr  pull
.126c	20 59 24	               jsr  push
.126f	a2 da		               ldx  #<f7bbutton
.1271	a0 21		               ldy  #>f7bbutton
.1273	20 ea 23	               jsr  putscxy
.1276	20 94 24	               jsr  pull
.1279	20 59 24	               jsr  push
.127c	a2 f5		               ldx  #<f8bbutton
.127e	a0 21		               ldy  #>f8bbutton
.1280	20 ea 23	               jsr  putscxy
.1283	20 94 24	               jsr  pull
.1286	20 97 24	end            jsr  pop
.1289	60		               rts
.128a			drawallchars
.128a	20 59 24	               jsr push
.128d	20 59 24	               jsr  push
.1290	a2 00		               ldx  #0
.1292	a0 00		               ldy  #0
.1294	20 7b 23	               jsr  gotoxy
.1297	20 97 24	               jsr  pop
.129a	a2 00		               ldx  #$00
.129c	8a		nextc          txa
.129d	9d 00 04	               sta  scrnnewram,x
.12a0	a9 0f		               lda  #charscolor
.12a2	9d 00 d8	               sta  colorram,x
.12a5	e8		               inx
.12a6	e0 80		               cpx  #$80
.12a8	d0 f2		               bne  nextc
.12aa	20 97 24	               jsr  pop
.12ad	60		               rts
.12ae			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.12ae	20 59 24	               jsr  push
.12b1	a2 28		               ldx  #40
.12b3	a9 40		               lda  #64
.12b5	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.12b8	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.12bb	ca		               dex
.12bc	e0 10		hline          cpx  #vlinepos
.12be	10 03		               bpl  notyet
.12c0	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.12c3	e0 00		notyet         cpx  #$00
.12c5	d0 ee		               bne  nextl
.12c7	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.12c9	85 fb		               sta  zpage1
.12cb	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.12cd	85 fc		               sta  zpage1+1
.12cf	a0 00		               ldy  #0
.12d1	a9 72		               lda  #114
.12d3	91 fb		               sta  (zpage1),y
.12d5	20 65 13	               jsr  zp1add40
.12d8	a2 12		               ldx  #24-hline2
.12da	a9 5d		               lda  #93
.12dc	91 fb		another93      sta  (zpage1),y
.12de	20 65 13	               jsr  zp1add40
.12e1	ca		               dex
.12e2	d0 f8		               bne  another93
.12e4	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.12e6	85 fb		               sta  zpage1
.12e8	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.12ea	85 fc		               sta  zpage1+1
.12ec	a0 00		               ldy  #0
.12ee	a9 73		               lda  #115
.12f0	91 fb		               sta  (zpage1),y
.12f2	20 97 24	               jsr  pop
.12f5	60		               rts
.12f6			drawgrid
.12f6	20 59 24	               jsr  push
.12f9	20 18 22	               jsr  screendis
.12fc	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.12fe	85 fb		               sta  zpage1
.1300	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.1302	85 fc		               sta  zpage1+1
.1304	a2 08		               ldx  #8
.1306	a9 65		nextbox        lda  #101
.1308	a0 09		               ldy  #9
.130a	91 fb		               sta  (zpage1),y
.130c	88		               dey
.130d	a9 2e		               lda  #$2e
.130f	91 fb		nextcol        sta  (zpage1),y
.1311	88		               dey
.1312	d0 fb		               bne  nextcol
.1314	20 65 13	               jsr  zp1add40
.1317	ca		               dex
.1318	d0 ec		               bne  nextbox
.131a	a0 08		               ldy  #8
.131c	a9 77		               lda  #119
.131e	91 fb		nextlin        sta  (zpage1),y
.1320	88		               dey
.1321	d0 fb		               bne  nextlin
.1323	a9 3e		               lda  #$3e
.1325	8d eb 05	               sta  scrnnewram+(40*(12))+11
.1328	a9 70		               lda  #$70                     ;+
.132a	8d c4 05	               sta  scrnnewram+(40*(11))+12
.132d	a9 43		               lda  #$43                     ;-
.132f	8d c5 05	               sta  scrnnewram+(40*(11))+13
.1332	a9 6e		               lda  #$6e                     ;+
.1334	8d c6 05	               sta  scrnnewram+(40*(11))+14
.1337	a9 5d		               lda  #$5d                     ;|
.1339	8d ec 05	               sta  scrnnewram+(40*(12))+12
.133c	a9 5d		               lda  #$5d                     ;|
.133e	8d ee 05	               sta  scrnnewram+(40*(12))+14
.1341	a9 6d		               lda  #$6d                     ;+
.1343	8d 14 06	               sta  scrnnewram+(40*(13))+12
.1346	a9 43		               lda  #$43                     ;-
.1348	8d 15 06	               sta  scrnnewram+(40*(13))+13
.134b	a9 7d		               lda  #$7d                     ;+
.134d	8d 16 06	               sta  scrnnewram+(40*(13))+14
.1350	20 25 22	               jsr screenena
.1353	20 97 24	               jsr  pop
.1356	60		               rts
.1357			zp1addnum
.1357	08		               php
.1358	48		               pha
.1359	18		               clc
.135a	65 fb		               adc  zpage1
.135c	90 02		               bcc  nocarry
.135e	e6 fc		               inc  zpage1+1
.1360	85 fb		nocarry        sta  zpage1
.1362	68		               pla
.1363	28		               plp
.1364	60		               rts
.1365			zp1add40
.1365	08		               php
.1366	48		               pha
.1367	18		               clc
.1368	a5 fb		               lda  zpage1
.136a	69 28		               adc  #40
.136c	90 02		               bcc  nocarry
.136e	e6 fc		               inc  zpage1+1
.1370	85 fb		nocarry        sta  zpage1
.1372	68		               pla
.1373	28		               plp
.1374	60		               rts
.1375			delay
.1375	20 59 24	               jsr  push
.1378	a9 00		               lda  #$0
.137a	aa		               tax
.137b	a8		               tay
.137c	ca		xagain         dex
.137d	ca		               dex
.137e	88		yagain         dey
.137f	c0 00		               cpy  #$00
.1381	d0 fb		               bne  yagain
.1383	e0 00		               cpx  #$00
.1385	d0 f5		               bne  xagain
.1387	20 97 24	               jsr  pop
.138a	60		               rts
.138b			f1action
.138b	48		               pha
.138c	a9 ff		               lda  #$ff
.138e	8d a5 09	               sta  editmode
.1391	ad a6 09	               lda  fkeyset
.1394	f0 03		               beq  menua
.1396	4c 50 14	               jmp  menub
.1399			menua
.1399	20 59 24	               jsr  push
.139c	a2 76		               ldx  #<blankmsg
.139e	a0 1b		               ldy  #>blankmsg
.13a0	20 ea 23	               jsr  putscxy
.13a3	a2 e4		               ldx  #<f1a_msg
.13a5	a0 1b		               ldy  #>f1a_msg
.13a7	20 ea 23	               jsr  putscxy
.13aa	20 97 24	               jsr  pop
.13ad	08		               php
.13ae	48		               pha
.13af	8a		               txa
.13b0	48		               pha
.13b1	ad 60 20	               lda  f1abutton
.13b4	48		               pha
.13b5	a9 92		               lda  #146
.13b7	8d 72 20	               sta  f1abutton+18
.13ba	a9 01		               lda  #flashcol
.13bc	8d 60 20	               sta  f1abutton
.13bf	a2 60		               ldx  #<f1abutton
.13c1	a0 20		               ldy  #>f1abutton
.13c3	20 ea 23	               jsr  putscxy
.13c6	20 75 13	               jsr  delay
.13c9	a9 12		               lda  #18
.13cb	8d 72 20	               sta  f1abutton+18
.13ce	68		               pla
.13cf	8d 60 20	               sta  f1abutton
.13d2	a2 60		               ldx  #<f1abutton
.13d4	a0 20		               ldy  #>f1abutton
.13d6	20 ea 23	               jsr  putscxy
.13d9	68		               pla
.13da	aa		               tax
.13db	68		               pla
.13dc	28		               plp
.13dd	a9 0b		               lda  #vgris
.13df	20 19 0c	               jsr  setmenuacolor
.13e2	a9 03		               lda  #menu1col1
.13e4	8d 60 20	               sta  f1abutton
.13e7	20 8f 11	               jsr  drawfkeys
.13ea	a9 0b		               lda  #vgris
.13ec	8d 45 1e	               sta  redraw_msg
.13ef	20 59 24	               jsr  push
.13f2	a2 76		               ldx  #<blankmsg
.13f4	a0 1b		               ldy  #>blankmsg
.13f6	20 ea 23	               jsr  putscxy
.13f9	a2 45		               ldx  #<redraw_msg
.13fb	a0 1e		               ldy  #>redraw_msg
.13fd	20 ea 23	               jsr  putscxy
.1400	20 97 24	               jsr  pop
.1403	20 5a 0e	               jsr  editor
.1406	a9 0a		               lda  #vrose
.1408	8d 45 1e	               sta  redraw_msg
.140b	20 59 24	               jsr  push
.140e	a2 76		               ldx  #<blankmsg
.1410	a0 1b		               ldy  #>blankmsg
.1412	20 ea 23	               jsr  putscxy
.1415	a2 45		               ldx  #<redraw_msg
.1417	a0 1e		               ldy  #>redraw_msg
.1419	20 ea 23	               jsr  putscxy
.141c	20 97 24	               jsr  pop
.141f	20 59 24	               jsr  push
.1422	a2 76		               ldx  #<blankmsg
.1424	a0 1b		               ldy  #>blankmsg
.1426	20 ea 23	               jsr  putscxy
.1429	a2 30		               ldx  #<quit_msg
.142b	a0 1e		               ldy  #>quit_msg
.142d	20 ea 23	               jsr  putscxy
.1430	20 97 24	               jsr  pop
.1433	20 59 24	               jsr  push
.1436	a2 76		               ldx  #<blankmsg
.1438	a0 1b		               ldy  #>blankmsg
.143a	20 ea 23	               jsr  putscxy
.143d	a2 88		               ldx  #<menua_msg
.143f	a0 1d		               ldy  #>menua_msg
.1441	20 ea 23	               jsr  putscxy
.1444	20 97 24	               jsr  pop
.1447	20 d3 0b	               jsr  resetmenuacolor
.144a	20 8f 11	               jsr  drawfkeys
.144d	4c 9a 14	               jmp  out
.1450			menub
.1450	20 59 24	               jsr  push
.1453	a2 76		               ldx  #<blankmsg
.1455	a0 1b		               ldy  #>blankmsg
.1457	20 ea 23	               jsr  putscxy
.145a	a2 cc		               ldx  #<f1b_msg
.145c	a0 1c		               ldy  #>f1b_msg
.145e	20 ea 23	               jsr  putscxy
.1461	20 97 24	               jsr  pop
.1464	08		               php
.1465	48		               pha
.1466	8a		               txa
.1467	48		               pha
.1468	ad 38 21	               lda  f1bbutton
.146b	48		               pha
.146c	a9 92		               lda  #146
.146e	8d 4a 21	               sta  f1bbutton+18
.1471	a9 01		               lda  #flashcol
.1473	8d 38 21	               sta  f1bbutton
.1476	a2 38		               ldx  #<f1bbutton
.1478	a0 21		               ldy  #>f1bbutton
.147a	20 ea 23	               jsr  putscxy
.147d	20 75 13	               jsr  delay
.1480	a9 12		               lda  #18
.1482	8d 4a 21	               sta  f1bbutton+18
.1485	68		               pla
.1486	8d 38 21	               sta  f1bbutton
.1489	a2 38		               ldx  #<f1bbutton
.148b	a0 21		               ldy  #>f1bbutton
.148d	20 ea 23	               jsr  putscxy
.1490	68		               pla
.1491	aa		               tax
.1492	68		               pla
.1493	28		               plp
.1494	20 42 1b	               jsr  flipvert
.1497	20 0c 10	               jsr  drawbitmap
.149a	68		out            pla
.149b	20 59 24	               jsr  push
.149e	a2 76		               ldx  #<blankmsg
.14a0	a0 1b		               ldy  #>blankmsg
.14a2	20 ea 23	               jsr  putscxy
.14a5	a2 a2		               ldx  #<prompt_msg
.14a7	a0 1b		               ldy  #>prompt_msg
.14a9	20 ea 23	               jsr  putscxy
.14ac	20 97 24	               jsr  pop
.14af	60		               rts
.14b0			f2action
.14b0	48		               pha
.14b1	a9 00		               lda  #$0
.14b3	8d a5 09	               sta  editmode
.14b6	ad a6 09	               lda  fkeyset
.14b9	d0 4d		               bne  menub
.14bb	20 59 24	               jsr  push
.14be	a2 76		               ldx  #<blankmsg
.14c0	a0 1b		               ldy  #>blankmsg
.14c2	20 ea 23	               jsr  putscxy
.14c5	a2 ff		               ldx  #<f2a_msg
.14c7	a0 1b		               ldy  #>f2a_msg
.14c9	20 ea 23	               jsr  putscxy
.14cc	20 97 24	               jsr  pop
.14cf	08		               php
.14d0	48		               pha
.14d1	8a		               txa
.14d2	48		               pha
.14d3	ad 7b 20	               lda  f2abutton
.14d6	48		               pha
.14d7	a9 92		               lda  #146
.14d9	8d 8d 20	               sta  f2abutton+18
.14dc	a9 01		               lda  #flashcol
.14de	8d 7b 20	               sta  f2abutton
.14e1	a2 7b		               ldx  #<f2abutton
.14e3	a0 20		               ldy  #>f2abutton
.14e5	20 ea 23	               jsr  putscxy
.14e8	20 75 13	               jsr  delay
.14eb	a9 12		               lda  #18
.14ed	8d 8d 20	               sta  f2abutton+18
.14f0	68		               pla
.14f1	8d 7b 20	               sta  f2abutton
.14f4	a2 7b		               ldx  #<f2abutton
.14f6	a0 20		               ldy  #>f2abutton
.14f8	20 ea 23	               jsr  putscxy
.14fb	68		               pla
.14fc	aa		               tax
.14fd	68		               pla
.14fe	28		               plp
.14ff	20 7f 0a	               jsr  copychar
.1502	20 0c 10	               jsr  drawbitmap
.1505	4c 52 15	               jmp  out
.1508			menub
.1508	20 59 24	               jsr  push
.150b	a2 76		               ldx  #<blankmsg
.150d	a0 1b		               ldy  #>blankmsg
.150f	20 ea 23	               jsr  putscxy
.1512	a2 e8		               ldx  #<f2b_msg
.1514	a0 1c		               ldy  #>f2b_msg
.1516	20 ea 23	               jsr  putscxy
.1519	20 97 24	               jsr  pop
.151c	08		               php
.151d	48		               pha
.151e	8a		               txa
.151f	48		               pha
.1520	ad 53 21	               lda  f2bbutton
.1523	48		               pha
.1524	a9 92		               lda  #146
.1526	8d 65 21	               sta  f2bbutton+18
.1529	a9 01		               lda  #flashcol
.152b	8d 53 21	               sta  f2bbutton
.152e	a2 53		               ldx  #<f2bbutton
.1530	a0 21		               ldy  #>f2bbutton
.1532	20 ea 23	               jsr  putscxy
.1535	20 75 13	               jsr  delay
.1538	a9 12		               lda  #18
.153a	8d 65 21	               sta  f2bbutton+18
.153d	68		               pla
.153e	8d 53 21	               sta  f2bbutton
.1541	a2 53		               ldx  #<f2bbutton
.1543	a0 21		               ldy  #>f2bbutton
.1545	20 ea 23	               jsr  putscxy
.1548	68		               pla
.1549	aa		               tax
.154a	68		               pla
.154b	28		               plp
.154c	20 15 1b	               jsr  fliphorz
.154f	20 0c 10	               jsr  drawbitmap
.1552	68		out            pla
.1553	20 59 24	               jsr  push
.1556	a2 76		               ldx  #<blankmsg
.1558	a0 1b		               ldy  #>blankmsg
.155a	20 ea 23	               jsr  putscxy
.155d	a2 a2		               ldx  #<prompt_msg
.155f	a0 1b		               ldy  #>prompt_msg
.1561	20 ea 23	               jsr  putscxy
.1564	20 97 24	               jsr  pop
.1567	60		               rts
.1568			f3action
.1568	48		               pha
.1569	a9 00		               lda  #$0
.156b	8d a5 09	               sta  editmode
.156e	ad a6 09	               lda  fkeyset
.1571	d0 76		               bne  menub
.1573	08		               php
.1574	48		               pha
.1575	8a		               txa
.1576	48		               pha
.1577	ad 96 20	               lda  f3abutton
.157a	48		               pha
.157b	a9 92		               lda  #146
.157d	8d a8 20	               sta  f3abutton+18
.1580	a9 01		               lda  #flashcol
.1582	8d 96 20	               sta  f3abutton
.1585	a2 96		               ldx  #<f3abutton
.1587	a0 20		               ldy  #>f3abutton
.1589	20 ea 23	               jsr  putscxy
.158c	20 75 13	               jsr  delay
.158f	a9 12		               lda  #18
.1591	8d a8 20	               sta  f3abutton+18
.1594	68		               pla
.1595	8d 96 20	               sta  f3abutton
.1598	a2 96		               ldx  #<f3abutton
.159a	a0 20		               ldy  #>f3abutton
.159c	20 ea 23	               jsr  putscxy
.159f	68		               pla
.15a0	aa		               tax
.15a1	68		               pla
.15a2	28		               plp
.15a3	20 59 24	               jsr  push
.15a6	a2 76		               ldx  #<blankmsg
.15a8	a0 1b		               ldy  #>blankmsg
.15aa	20 ea 23	               jsr  putscxy
.15ad	a2 20		               ldx  #<f3a_msg
.15af	a0 1c		               ldy  #>f3a_msg
.15b1	20 ea 23	               jsr  putscxy
.15b4	20 97 24	               jsr  pop
.15b7	20 ed 28	getagain       jsr  getkey
.15ba	c9 31		               cmp  #$31
.15bc	f0 0b		               beq  devok
.15be	c9 38		               cmp  #$38
.15c0	f0 07		               beq  devok
.15c2	c9 39		               cmp  #$39
.15c4	f0 03		               beq  devok
.15c6	4c b7 15	               jmp  getagain
.15c9	8d c5 09	devok          sta  device
.15cc	20 0d 0a	               jsr  getfname
.15cf	20 59 24	               jsr  push
.15d2	a2 76		               ldx  #<blankmsg
.15d4	a0 1b		               ldy  #>blankmsg
.15d6	20 ea 23	               jsr  putscxy
.15d9	a2 c8		               ldx  #<wait_msg
.15db	a0 1b		               ldy  #>wait_msg
.15dd	20 ea 23	               jsr  putscxy
.15e0	20 97 24	               jsr  pop
.15e3	20 d9 08	               jsr  savetofile
.15e6	4c 33 16	               jmp  out
.15e9			menub
.15e9	20 59 24	               jsr  push
.15ec	a2 76		               ldx  #<blankmsg
.15ee	a0 1b		               ldy  #>blankmsg
.15f0	20 ea 23	               jsr  putscxy
.15f3	a2 06		               ldx  #<f3b_msg
.15f5	a0 1d		               ldy  #>f3b_msg
.15f7	20 ea 23	               jsr  putscxy
.15fa	20 97 24	               jsr  pop
.15fd	08		               php
.15fe	48		               pha
.15ff	8a		               txa
.1600	48		               pha
.1601	ad 6e 21	               lda  f3bbutton
.1604	48		               pha
.1605	a9 92		               lda  #146
.1607	8d 80 21	               sta  f3bbutton+18
.160a	a9 01		               lda  #flashcol
.160c	8d 6e 21	               sta  f3bbutton
.160f	a2 6e		               ldx  #<f3bbutton
.1611	a0 21		               ldy  #>f3bbutton
.1613	20 ea 23	               jsr  putscxy
.1616	20 75 13	               jsr  delay
.1619	a9 12		               lda  #18
.161b	8d 80 21	               sta  f3bbutton+18
.161e	68		               pla
.161f	8d 6e 21	               sta  f3bbutton
.1622	a2 6e		               ldx  #<f3bbutton
.1624	a0 21		               ldy  #>f3bbutton
.1626	20 ea 23	               jsr  putscxy
.1629	68		               pla
.162a	aa		               tax
.162b	68		               pla
.162c	28		               plp
.162d	20 a0 1a	               jsr  scrollright
.1630	20 0c 10	               jsr  drawbitmap
.1633	68		out            pla
.1634	20 59 24	               jsr  push
.1637	a2 76		               ldx  #<blankmsg
.1639	a0 1b		               ldy  #>blankmsg
.163b	20 ea 23	               jsr  putscxy
.163e	a2 a2		               ldx  #<prompt_msg
.1640	a0 1b		               ldy  #>prompt_msg
.1642	20 ea 23	               jsr  putscxy
.1645	20 97 24	               jsr  pop
.1648	60		               rts
.1649			f4action
.1649	48		               pha
.164a	a9 00		               lda  #$0
.164c	8d a5 09	               sta  editmode
.164f	ad a6 09	               lda  fkeyset
.1652	d0 79		               bne  menub
.1654	08		               php
.1655	48		               pha
.1656	8a		               txa
.1657	48		               pha
.1658	ad b1 20	               lda  f4abutton
.165b	48		               pha
.165c	a9 92		               lda  #146
.165e	8d c3 20	               sta  f4abutton+18
.1661	a9 01		               lda  #flashcol
.1663	8d b1 20	               sta  f4abutton
.1666	a2 b1		               ldx  #<f4abutton
.1668	a0 20		               ldy  #>f4abutton
.166a	20 ea 23	               jsr  putscxy
.166d	20 75 13	               jsr  delay
.1670	a9 12		               lda  #18
.1672	8d c3 20	               sta  f4abutton+18
.1675	68		               pla
.1676	8d b1 20	               sta  f4abutton
.1679	a2 b1		               ldx  #<f4abutton
.167b	a0 20		               ldy  #>f4abutton
.167d	20 ea 23	               jsr  putscxy
.1680	68		               pla
.1681	aa		               tax
.1682	68		               pla
.1683	28		               plp
.1684	20 59 24	               jsr  push
.1687	a2 76		               ldx  #<blankmsg
.1689	a0 1b		               ldy  #>blankmsg
.168b	20 ea 23	               jsr  putscxy
.168e	a2 4d		               ldx  #<f4a_msg
.1690	a0 1c		               ldy  #>f4a_msg
.1692	20 ea 23	               jsr  putscxy
.1695	20 97 24	               jsr  pop
.1698	20 ed 28	getagain       jsr  getkey
.169b	c9 31		               cmp  #$31
.169d	f0 0b		               beq  devok
.169f	c9 38		               cmp  #$38
.16a1	f0 07		               beq  devok
.16a3	c9 39		               cmp  #$39
.16a5	f0 03		               beq  devok
.16a7	4c 98 16	               jmp  getagain
.16aa	8d c5 09	devok          sta  device
.16ad	20 0d 0a	               jsr  getfname
.16b0	20 59 24	               jsr  push
.16b3	a2 76		               ldx  #<blankmsg
.16b5	a0 1b		               ldy  #>blankmsg
.16b7	20 ea 23	               jsr  putscxy
.16ba	a2 c8		               ldx  #<wait_msg
.16bc	a0 1b		               ldy  #>wait_msg
.16be	20 ea 23	               jsr  putscxy
.16c1	20 97 24	               jsr  pop
.16c4	20 38 09	               jsr  loadfromfile
.16c7	20 cd 09	               jsr  screenredraw
.16ca	4c 17 17	               jmp  out
.16cd			menub
.16cd	20 59 24	               jsr  push
.16d0	a2 76		               ldx  #<blankmsg
.16d2	a0 1b		               ldy  #>blankmsg
.16d4	20 ea 23	               jsr  putscxy
.16d7	a2 22		               ldx  #<f4b_msg
.16d9	a0 1d		               ldy  #>f4b_msg
.16db	20 ea 23	               jsr  putscxy
.16de	20 97 24	               jsr  pop
.16e1	08		               php
.16e2	48		               pha
.16e3	8a		               txa
.16e4	48		               pha
.16e5	ad 89 21	               lda  f4bbutton
.16e8	48		               pha
.16e9	a9 92		               lda  #146
.16eb	8d 9b 21	               sta  f4bbutton+18
.16ee	a9 01		               lda  #flashcol
.16f0	8d 89 21	               sta  f4bbutton
.16f3	a2 89		               ldx  #<f4bbutton
.16f5	a0 21		               ldy  #>f4bbutton
.16f7	20 ea 23	               jsr  putscxy
.16fa	20 75 13	               jsr  delay
.16fd	a9 12		               lda  #18
.16ff	8d 9b 21	               sta  f4bbutton+18
.1702	68		               pla
.1703	8d 89 21	               sta  f4bbutton
.1706	a2 89		               ldx  #<f4bbutton
.1708	a0 21		               ldy  #>f4bbutton
.170a	20 ea 23	               jsr  putscxy
.170d	68		               pla
.170e	aa		               tax
.170f	68		               pla
.1710	28		               plp
.1711	20 c5 1a	               jsr  scrollleft
.1714	20 0c 10	               jsr  drawbitmap
.1717	68		out            pla
.1718	20 59 24	               jsr  push
.171b	a2 76		               ldx  #<blankmsg
.171d	a0 1b		               ldy  #>blankmsg
.171f	20 ea 23	               jsr  putscxy
.1722	a2 a2		               ldx  #<prompt_msg
.1724	a0 1b		               ldy  #>prompt_msg
.1726	20 ea 23	               jsr  putscxy
.1729	20 97 24	               jsr  pop
.172c	60		               rts
.172d			f5action
.172d	48		               pha
.172e	a9 00		               lda  #$0
.1730	8d a5 09	               sta  editmode
.1733	ad a6 09	               lda  fkeyset
.1736	d0 4d		               bne  menub
.1738	20 59 24	               jsr  push
.173b	a2 76		               ldx  #<blankmsg
.173d	a0 1b		               ldy  #>blankmsg
.173f	20 ea 23	               jsr  putscxy
.1742	a2 75		               ldx  #<f5a_msg
.1744	a0 1c		               ldy  #>f5a_msg
.1746	20 ea 23	               jsr  putscxy
.1749	20 97 24	               jsr  pop
.174c	08		               php
.174d	48		               pha
.174e	8a		               txa
.174f	48		               pha
.1750	ad cc 20	               lda  f5abutton
.1753	48		               pha
.1754	a9 92		               lda  #146
.1756	8d de 20	               sta  f5abutton+18
.1759	a9 01		               lda  #flashcol
.175b	8d cc 20	               sta  f5abutton
.175e	a2 cc		               ldx  #<f5abutton
.1760	a0 20		               ldy  #>f5abutton
.1762	20 ea 23	               jsr  putscxy
.1765	20 75 13	               jsr  delay
.1768	a9 12		               lda  #18
.176a	8d de 20	               sta  f5abutton+18
.176d	68		               pla
.176e	8d cc 20	               sta  f5abutton
.1771	a2 cc		               ldx  #<f5abutton
.1773	a0 20		               ldy  #>f5abutton
.1775	20 ea 23	               jsr  putscxy
.1778	68		               pla
.1779	aa		               tax
.177a	68		               pla
.177b	28		               plp
.177c	20 f3 1a	               jsr  clearchar
.177f	20 0c 10	               jsr  drawbitmap
.1782	4c cf 17	               jmp  out
.1785			menub
.1785	20 59 24	               jsr  push
.1788	a2 76		               ldx  #<blankmsg
.178a	a0 1b		               ldy  #>blankmsg
.178c	20 ea 23	               jsr  putscxy
.178f	a2 3e		               ldx  #<f5b_msg
.1791	a0 1d		               ldy  #>f5b_msg
.1793	20 ea 23	               jsr  putscxy
.1796	20 97 24	               jsr  pop
.1799	08		               php
.179a	48		               pha
.179b	8a		               txa
.179c	48		               pha
.179d	ad a4 21	               lda  f5bbutton
.17a0	48		               pha
.17a1	a9 92		               lda  #146
.17a3	8d b6 21	               sta  f5bbutton+18
.17a6	a9 01		               lda  #flashcol
.17a8	8d a4 21	               sta  f5bbutton
.17ab	a2 a4		               ldx  #<f5bbutton
.17ad	a0 21		               ldy  #>f5bbutton
.17af	20 ea 23	               jsr  putscxy
.17b2	20 75 13	               jsr  delay
.17b5	a9 12		               lda  #18
.17b7	8d b6 21	               sta  f5bbutton+18
.17ba	68		               pla
.17bb	8d a4 21	               sta  f5bbutton
.17be	a2 a4		               ldx  #<f5bbutton
.17c0	a0 21		               ldy  #>f5bbutton
.17c2	20 ea 23	               jsr  putscxy
.17c5	68		               pla
.17c6	aa		               tax
.17c7	68		               pla
.17c8	28		               plp
.17c9	20 2e 1a	               jsr  scrollup
.17cc	20 0c 10	               jsr  drawbitmap
.17cf	68		out            pla
.17d0	20 59 24	               jsr  push
.17d3	a2 76		               ldx  #<blankmsg
.17d5	a0 1b		               ldy  #>blankmsg
.17d7	20 ea 23	               jsr  putscxy
.17da	a2 a2		               ldx  #<prompt_msg
.17dc	a0 1b		               ldy  #>prompt_msg
.17de	20 ea 23	               jsr  putscxy
.17e1	20 97 24	               jsr  pop
.17e4	60		               rts
.17e5			f6action
.17e5	48		               pha
.17e6	a9 00		               lda  #$0
.17e8	8d a5 09	               sta  editmode
.17eb	ad a6 09	               lda  fkeyset
.17ee	d0 4d		               bne  menub
.17f0	20 59 24	               jsr  push
.17f3	a2 76		               ldx  #<blankmsg
.17f5	a0 1b		               ldy  #>blankmsg
.17f7	20 ea 23	               jsr  putscxy
.17fa	a2 91		               ldx  #<f6a_msg
.17fc	a0 1c		               ldy  #>f6a_msg
.17fe	20 ea 23	               jsr  putscxy
.1801	20 97 24	               jsr  pop
.1804	08		               php
.1805	48		               pha
.1806	8a		               txa
.1807	48		               pha
.1808	ad e7 20	               lda  f6abutton
.180b	48		               pha
.180c	a9 92		               lda  #146
.180e	8d f9 20	               sta  f6abutton+18
.1811	a9 01		               lda  #flashcol
.1813	8d e7 20	               sta  f6abutton
.1816	a2 e7		               ldx  #<f6abutton
.1818	a0 20		               ldy  #>f6abutton
.181a	20 ea 23	               jsr  putscxy
.181d	20 75 13	               jsr  delay
.1820	a9 12		               lda  #18
.1822	8d f9 20	               sta  f6abutton+18
.1825	68		               pla
.1826	8d e7 20	               sta  f6abutton
.1829	a2 e7		               ldx  #<f6abutton
.182b	a0 20		               ldy  #>f6abutton
.182d	20 ea 23	               jsr  putscxy
.1830	68		               pla
.1831	aa		               tax
.1832	68		               pla
.1833	28		               plp
.1834	20 e7 1a	               jsr  fillchar
.1837	20 0c 10	               jsr  drawbitmap
.183a	4c 87 18	               jmp  out
.183d			menub
.183d	20 59 24	               jsr  push
.1840	a2 76		               ldx  #<blankmsg
.1842	a0 1b		               ldy  #>blankmsg
.1844	20 ea 23	               jsr  putscxy
.1847	a2 58		               ldx  #<f6b_msg
.1849	a0 1d		               ldy  #>f6b_msg
.184b	20 ea 23	               jsr  putscxy
.184e	20 97 24	               jsr  pop
.1851	08		               php
.1852	48		               pha
.1853	8a		               txa
.1854	48		               pha
.1855	ad bf 21	               lda  f6bbutton
.1858	48		               pha
.1859	a9 92		               lda  #146
.185b	8d d1 21	               sta  f6bbutton+18
.185e	a9 01		               lda  #flashcol
.1860	8d bf 21	               sta  f6bbutton
.1863	a2 bf		               ldx  #<f6bbutton
.1865	a0 21		               ldy  #>f6bbutton
.1867	20 ea 23	               jsr  putscxy
.186a	20 75 13	               jsr  delay
.186d	a9 12		               lda  #18
.186f	8d d1 21	               sta  f6bbutton+18
.1872	68		               pla
.1873	8d bf 21	               sta  f6bbutton
.1876	a2 bf		               ldx  #<f6bbutton
.1878	a0 21		               ldy  #>f6bbutton
.187a	20 ea 23	               jsr  putscxy
.187d	68		               pla
.187e	aa		               tax
.187f	68		               pla
.1880	28		               plp
.1881	20 66 1a	               jsr  scrolldown
.1884	20 0c 10	               jsr  drawbitmap
.1887	68		out            pla
.1888	20 59 24	               jsr  push
.188b	a2 76		               ldx  #<blankmsg
.188d	a0 1b		               ldy  #>blankmsg
.188f	20 ea 23	               jsr  putscxy
.1892	a2 a2		               ldx  #<prompt_msg
.1894	a0 1b		               ldy  #>prompt_msg
.1896	20 ea 23	               jsr  putscxy
.1899	20 97 24	               jsr  pop
.189c	60		               rts
.189d			f7action
.189d	48		               pha
.189e	a9 00		               lda  #$0
.18a0	8d a5 09	               sta  editmode
.18a3	ad a6 09	               lda  fkeyset
.18a6	d0 4d		               bne  menub
.18a8	20 59 24	               jsr  push
.18ab	a2 76		               ldx  #<blankmsg
.18ad	a0 1b		               ldy  #>blankmsg
.18af	20 ea 23	               jsr  putscxy
.18b2	a2 ae		               ldx  #<f7a_msg
.18b4	a0 1c		               ldy  #>f7a_msg
.18b6	20 ea 23	               jsr  putscxy
.18b9	20 97 24	               jsr  pop
.18bc	08		               php
.18bd	48		               pha
.18be	8a		               txa
.18bf	48		               pha
.18c0	ad 02 21	               lda  f7abutton
.18c3	48		               pha
.18c4	a9 92		               lda  #146
.18c6	8d 14 21	               sta  f7abutton+18
.18c9	a9 01		               lda  #flashcol
.18cb	8d 02 21	               sta  f7abutton
.18ce	a2 02		               ldx  #<f7abutton
.18d0	a0 21		               ldy  #>f7abutton
.18d2	20 ea 23	               jsr  putscxy
.18d5	20 75 13	               jsr  delay
.18d8	a9 12		               lda  #18
.18da	8d 14 21	               sta  f7abutton+18
.18dd	68		               pla
.18de	8d 02 21	               sta  f7abutton
.18e1	a2 02		               ldx  #<f7abutton
.18e3	a0 21		               ldy  #>f7abutton
.18e5	20 ea 23	               jsr  putscxy
.18e8	68		               pla
.18e9	aa		               tax
.18ea	68		               pla
.18eb	28		               plp
.18ec	20 df 10	               jsr  copycharset
.18ef	20 0c 10	               jsr  drawbitmap
.18f2	4c 44 19	               jmp  out
.18f5	a9 00		menub          lda  #$0
.18f7	8d a5 09	               sta  editmode
.18fa	20 59 24	               jsr  push
.18fd	a2 76		               ldx  #<blankmsg
.18ff	a0 1b		               ldy  #>blankmsg
.1901	20 ea 23	               jsr  putscxy
.1904	a2 71		               ldx  #<f7b_msg
.1906	a0 1d		               ldy  #>f7b_msg
.1908	20 ea 23	               jsr  putscxy
.190b	20 97 24	               jsr  pop
.190e	08		               php
.190f	48		               pha
.1910	8a		               txa
.1911	48		               pha
.1912	ad da 21	               lda  f7bbutton
.1915	48		               pha
.1916	a9 92		               lda  #146
.1918	8d ec 21	               sta  f7bbutton+18
.191b	a9 01		               lda  #flashcol
.191d	8d da 21	               sta  f7bbutton
.1920	a2 da		               ldx  #<f7bbutton
.1922	a0 21		               ldy  #>f7bbutton
.1924	20 ea 23	               jsr  putscxy
.1927	20 75 13	               jsr  delay
.192a	a9 12		               lda  #18
.192c	8d ec 21	               sta  f7bbutton+18
.192f	68		               pla
.1930	8d da 21	               sta  f7bbutton
.1933	a2 da		               ldx  #<f7bbutton
.1935	a0 21		               ldy  #>f7bbutton
.1937	20 ea 23	               jsr  putscxy
.193a	68		               pla
.193b	aa		               tax
.193c	68		               pla
.193d	28		               plp
.193e	20 0e 1a	               jsr  reverse
.1941	20 0c 10	               jsr  drawbitmap
.1944	68		out            pla
.1945	20 59 24	               jsr  push
.1948	a2 76		               ldx  #<blankmsg
.194a	a0 1b		               ldy  #>blankmsg
.194c	20 ea 23	               jsr  putscxy
.194f	a2 a2		               ldx  #<prompt_msg
.1951	a0 1b		               ldy  #>prompt_msg
.1953	20 ea 23	               jsr  putscxy
.1956	20 97 24	               jsr  pop
.1959	60		               rts
.195a			f8action
.195a	48		               pha
.195b	a9 00		               lda  #$0
.195d	8d a5 09	               sta  editmode
.1960	ad a6 09	               lda  fkeyset
.1963	d0 47		               bne  menub
.1965	20 59 24	               jsr  push
.1968	a2 76		               ldx  #<blankmsg
.196a	a0 1b		               ldy  #>blankmsg
.196c	20 ea 23	               jsr  putscxy
.196f	a2 ad		               ldx  #<menub_msg
.1971	a0 1d		               ldy  #>menub_msg
.1973	20 ea 23	               jsr  putscxy
.1976	20 97 24	               jsr  pop
.1979	08		               php
.197a	48		               pha
.197b	8a		               txa
.197c	48		               pha
.197d	ad 1d 21	               lda  f8abutton
.1980	48		               pha
.1981	a9 92		               lda  #146
.1983	8d 2f 21	               sta  f8abutton+18
.1986	a9 01		               lda  #flashcol
.1988	8d 1d 21	               sta  f8abutton
.198b	a2 1d		               ldx  #<f8abutton
.198d	a0 21		               ldy  #>f8abutton
.198f	20 ea 23	               jsr  putscxy
.1992	20 75 13	               jsr  delay
.1995	a9 12		               lda  #18
.1997	8d 2f 21	               sta  f8abutton+18
.199a	68		               pla
.199b	8d 1d 21	               sta  f8abutton
.199e	a2 1d		               ldx  #<f8abutton
.19a0	a0 21		               ldy  #>f8abutton
.19a2	20 ea 23	               jsr  putscxy
.19a5	68		               pla
.19a6	aa		               tax
.19a7	68		               pla
.19a8	28		               plp
.19a9	4c f0 19	               jmp  swapit
.19ac			menub
.19ac	20 59 24	               jsr  push
.19af	a2 76		               ldx  #<blankmsg
.19b1	a0 1b		               ldy  #>blankmsg
.19b3	20 ea 23	               jsr  putscxy
.19b6	a2 88		               ldx  #<menua_msg
.19b8	a0 1d		               ldy  #>menua_msg
.19ba	20 ea 23	               jsr  putscxy
.19bd	20 97 24	               jsr  pop
.19c0	08		               php
.19c1	48		               pha
.19c2	8a		               txa
.19c3	48		               pha
.19c4	ad f5 21	               lda  f8bbutton
.19c7	48		               pha
.19c8	a9 92		               lda  #146
.19ca	8d 07 22	               sta  f8bbutton+18
.19cd	a9 01		               lda  #flashcol
.19cf	8d f5 21	               sta  f8bbutton
.19d2	a2 f5		               ldx  #<f8bbutton
.19d4	a0 21		               ldy  #>f8bbutton
.19d6	20 ea 23	               jsr  putscxy
.19d9	20 75 13	               jsr  delay
.19dc	a9 12		               lda  #18
.19de	8d 07 22	               sta  f8bbutton+18
.19e1	68		               pla
.19e2	8d f5 21	               sta  f8bbutton
.19e5	a2 f5		               ldx  #<f8bbutton
.19e7	a0 21		               ldy  #>f8bbutton
.19e9	20 ea 23	               jsr  putscxy
.19ec	68		               pla
.19ed	aa		               tax
.19ee	68		               pla
.19ef	28		               plp
.19f0	49 ff		swapit         eor  #$ff
.19f2	8d a6 09	               sta  fkeyset
.19f5	20 8f 11	               jsr  drawfkeys
.19f8	68		               pla
.19f9	20 59 24	               jsr  push
.19fc	a2 76		               ldx  #<blankmsg
.19fe	a0 1b		               ldy  #>blankmsg
.1a00	20 ea 23	               jsr  putscxy
.1a03	a2 a2		               ldx  #<prompt_msg
.1a05	a0 1b		               ldy  #>prompt_msg
.1a07	20 ea 23	               jsr  putscxy
.1a0a	20 97 24	               jsr  pop
.1a0d	60		               rts
.1a0e			reverse
.1a0e	20 59 24	               jsr  push
.1a11	48		               pha
.1a12	ad ab 09	               lda  mapaddr
.1a15	85 fd		               sta  $fd
.1a17	ad ac 09	               lda  mapaddr+1
.1a1a	85 fe		               sta  $fe
.1a1c	68		               pla
.1a1d	a0 00		               ldy  #$00
.1a1f	b1 fd		again          lda  (zpage2),y
.1a21	49 ff		               eor  #$ff
.1a23	91 fd		               sta  (zpage2),y
.1a25	c8		               iny
.1a26	c0 08		               cpy  #$08
.1a28	d0 f5		               bne  again
.1a2a	20 97 24	               jsr  pop
.1a2d	60		               rts
.1a2e			scrollup
.1a2e	20 59 24	               jsr  push
.1a31	48		               pha
.1a32	ad ab 09	               lda  mapaddr
.1a35	85 fb		               sta  $fb
.1a37	ad ac 09	               lda  mapaddr+1
.1a3a	85 fc		               sta  $fc
.1a3c	68		               pla
.1a3d	48		               pha
.1a3e	ad ab 09	               lda  mapaddr
.1a41	85 fd		               sta  $fd
.1a43	ad ac 09	               lda  mapaddr+1
.1a46	85 fe		               sta  $fe
.1a48	68		               pla
.1a49	20 c9 25	               jsr  inczp2
.1a4c	a0 00		               ldy  #$00
.1a4e	b1 fb		               lda  (zpage1),y
.1a50	8d 65 1a	               sta  tmpbyte
.1a53	b1 fd		again          lda  (zpage2),y
.1a55	91 fb		               sta  (zpage1),y
.1a57	c8		               iny
.1a58	c0 07		               cpy  #$07
.1a5a	d0 f7		               bne  again
.1a5c	ad 65 1a	               lda  tmpbyte
.1a5f	91 fb		               sta  (zpage1),y
.1a61	20 97 24	               jsr  pop
.1a64	60		               rts
>1a65	00		tmpbyte        .byte     $00
.1a66			scrolldown
.1a66	20 59 24	               jsr  push
.1a69	48		               pha
.1a6a	ad ab 09	               lda  mapaddr
.1a6d	85 fb		               sta  $fb
.1a6f	ad ac 09	               lda  mapaddr+1
.1a72	85 fc		               sta  $fc
.1a74	68		               pla
.1a75	48		               pha
.1a76	ad ab 09	               lda  mapaddr
.1a79	85 fd		               sta  $fd
.1a7b	ad ac 09	               lda  mapaddr+1
.1a7e	85 fe		               sta  $fe
.1a80	68		               pla
.1a81	20 c9 25	               jsr  inczp2
.1a84	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.1a86	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.1a88	8d 9f 1a	               sta  tmpbyte             ;xxxxxxxx
.1a8b	88		again          dey                      ;xxxxxxxx
.1a8c	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.1a8e	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.1a90	c0 00		               cpy  #$00                ;xxxxxxxx
.1a92	d0 f7		               bne  again               ;xxxxxxxx
.1a94	a0 00		               ldy  #$00
.1a96	ad 9f 1a	               lda  tmpbyte
.1a99	91 fb		               sta  (zpage1),y
.1a9b	20 97 24	               jsr  pop
.1a9e	60		               rts
>1a9f	00		tmpbyte        .byte     $00
.1aa0			scrollright
.1aa0	20 59 24	               jsr  push
.1aa3	48		               pha
.1aa4	ad ab 09	               lda  mapaddr
.1aa7	85 fb		               sta  $fb
.1aa9	ad ac 09	               lda  mapaddr+1
.1aac	85 fc		               sta  $fc
.1aae	68		               pla
.1aaf	a0 00		               ldy  #$00
.1ab1	b1 fb		again          lda  (zpage1),y
.1ab3	18		               clc
.1ab4	6a		               ror
.1ab5	90 03		               bcc  zero
.1ab7	18		               clc
.1ab8	69 80		one            adc  #$80
.1aba	91 fb		zero           sta  (zpage1),y
.1abc	c8		               iny
.1abd	c0 08		               cpy  #$08
.1abf	d0 f0		               bne  again
.1ac1	20 97 24	               jsr  pop
.1ac4	60		               rts
.1ac5			scrollleft
.1ac5	20 59 24	               jsr  push
.1ac8	48		               pha
.1ac9	ad ab 09	               lda  mapaddr
.1acc	85 fb		               sta  $fb
.1ace	ad ac 09	               lda  mapaddr+1
.1ad1	85 fc		               sta  $fc
.1ad3	68		               pla
.1ad4	a0 00		               ldy  #$00
.1ad6	b1 fb		again          lda  (zpage1),y
.1ad8	18		               clc
.1ad9	2a		               rol
.1ada	69 00		               adc  #$00
.1adc	91 fb		               sta  (zpage1),y
.1ade	c8		               iny
.1adf	c0 08		               cpy  #$08
.1ae1	d0 f3		               bne  again
.1ae3	20 97 24	               jsr  pop
.1ae6	60		               rts
.1ae7			fillchar
.1ae7	20 59 24	               jsr  push
.1aea	a9 ff		               lda  #$ff
.1aec	20 ff 1a	               jsr  allsame
.1aef	20 97 24	               jsr  pop
.1af2	60		               rts
.1af3			clearchar
.1af3	20 59 24	               jsr  push
.1af6	a9 00		               lda  #$00
.1af8	20 ff 1a	               jsr  allsame
.1afb	20 97 24	               jsr  pop
.1afe	60		               rts
.1aff			allsame
.1aff	48		               pha
.1b00	ad ab 09	               lda  mapaddr
.1b03	85 fd		               sta  $fd
.1b05	ad ac 09	               lda  mapaddr+1
.1b08	85 fe		               sta  $fe
.1b0a	68		               pla
.1b0b	a0 00		               ldy  #$00
.1b0d	91 fd		again          sta  (zpage2),y
.1b0f	c8		               iny
.1b10	c0 08		               cpy  #$08
.1b12	d0 f9		               bne  again
.1b14	60		               rts
.1b15			fliphorz
.1b15	20 59 24	               jsr  push
.1b18	48		               pha
.1b19	ad ab 09	               lda  mapaddr
.1b1c	85 fd		               sta  $fd
.1b1e	ad ac 09	               lda  mapaddr+1
.1b21	85 fe		               sta  $fe
.1b23	68		               pla
.1b24	a0 00		               ldy  #$00
.1b26	b1 fd		nextbyte       lda  (zpage2),y
.1b28	a2 00		               ldx  #$00
.1b2a	2a		rolagain       rol
.1b2b	6e 41 1b	               ror  tmpbyte
.1b2e	e8		               inx
.1b2f	e0 08		               cpx  #$08
.1b31	30 f7		               bmi  rolagain
.1b33	ad 41 1b	               lda  tmpbyte
.1b36	91 fd		               sta  (zpage2),y
.1b38	c8		               iny
.1b39	c0 08		               cpy  #$08
.1b3b	30 e9		               bmi  nextbyte
.1b3d	20 97 24	               jsr  pop
.1b40	60		               rts
>1b41	00		tmpbyte        .byte     $00
.1b42			flipvert
.1b42	20 59 24	               jsr  push
.1b45	48		               pha
.1b46	ad ab 09	               lda  mapaddr
.1b49	85 fd		               sta  $fd
.1b4b	ad ac 09	               lda  mapaddr+1
.1b4e	85 fe		               sta  $fe
.1b50	68		               pla
.1b51	a0 00		               ldy  #$00
.1b53	b1 fd		tostack        lda  (zpage2),y
.1b55	48		               pha
.1b56	c8		               iny
.1b57	c0 08		               cpy  #$08
.1b59	d0 f8		               bne  tostack
.1b5b	a0 00		               ldy  #$00
.1b5d	68		fromstack      pla
.1b5e	91 fd		               sta  (zpage2),y
.1b60	c8		               iny
.1b61	c0 08		               cpy  #$08
.1b63	d0 f8		               bne  fromstack
.1b65	20 97 24	               jsr  pop
.1b68	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: strings_fr.asm

>1b69	0a 01 05	editor_msg     .byte vrose,1,5
>1b6c	5b 45 44 49	               .null     "[editeur]"
>1b70	54 45 55 52 5d 00
>1b76	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1b7a	20 20 20 20	               .null     "                                       "
>1b7e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b8e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b9e	20 20 20 00
>1ba2	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>1ba6	20 55 54 49	               .null     " utilisez les clefs de fonction :"
>1baa	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>1bba	44 45 20 46 4f 4e 43 54 49 4f 4e 20 3a 00
>1bc8	03 00 05 92	wait_msg       .byte     mesgcol,0,5,146
>1bcc	20 55 4e 20	               .null     " un instant s.v.p. ... "
>1bd0	49 4e 53 54 41 4e 54 20 53 2e 56 2e 50 2e 20 2e
>1be0	2e 2e 20 00
.1be4			f1a_msg
>1be4	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>1be8	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>1bec	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>1bfc	29 92 00
.1bff			f2a_msg
>1bff	03 00 05	copy_msg       .byte     mesgcol,0,5
>1c02	20 45 4e 54	               .null     " entez le character a copier:"
>1c06	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>1c16	41 20 43 4f 50 49 45 52 3a 00
.1c20			f3a_msg
>1c20	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1c24	20 53 41 55	               .null     " sauvegarder sur quel lecteur? (1/8/9): "
>1c28	56 45 47 41 52 44 45 52 20 53 55 52 20 51 55 45
>1c38	4c 20 4c 45 43 54 45 55 52 3f 20 28 31 2f 38 2f
>1c48	39 29 3a 20 00
.1c4d			f4a_msg
>1c4d	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1c51	20 43 48 41	               .null     " charger de quel lecteur? (1,8,9): "
>1c55	52 47 45 52 20 44 45 20 51 55 45 4c 20 4c 45 43
>1c65	54 45 55 52 3f 20 28 31 2c 38 2c 39 29 3a 20 00
.1c75			f5a_msg
>1c75	03 00 05	clear_msg      .byte     mesgcol,0,5
>1c78	20 45 46 46	               .null     " effacer char: chr$(   )"
>1c7c	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>1c8c	20 20 20 29 00
.1c91			f6a_msg
>1c91	03 00 05	fill_msg       .byte     mesgcol,0,5
>1c94	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>1c98	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>1ca8	28 20 20 20 29 00
.1cae			f7a_msg
>1cae	03 00 05	work_msg       .byte     mesgcol,0,5
>1cb1	20 52 45 43	               .null     " recuperer les caracteres."
>1cb5	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>1cc5	54 45 52 45 53 2e 00
.1ccc			f1b_msg
>1ccc	03 00 05	invr_msg       .byte     mesgcol,0,5
>1ccf	20 42 41 53	               .null     " basculer verticalement:"
>1cd3	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1ce3	45 4e 54 3a 00
.1ce8			f2b_msg
>1ce8	03 00 05	flip_msg       .byte     mesgcol,0,5
>1ceb	20 42 41 53	               .null     " basculer horizontalement:"
>1cef	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1cff	45 4d 45 4e 54 3a 00
.1d06			f3b_msg
>1d06	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1d09	20 44 45 46	               .null     " defiler vers la droite:"
>1d0d	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1d1d	49 54 45 3a 00
.1d22			f4b_msg
>1d22	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1d25	20 44 45 46	               .null     " defiler vers la gauche:"
>1d29	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1d39	43 48 45 3a 00
.1d3e			f5b_msg
>1d3e	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1d41	20 44 45 46	               .null     " defiler vers le haut:"
>1d45	49 4c 45 52 20 56 45 52 53 20 4c 45 20 48 41 55
>1d55	54 3a 00
.1d58			f6b_msg
>1d58	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1d5b	20 44 45 46	               .null     " defiler vers le bas:"
>1d5f	49 4c 45 52 20 56 45 52 53 20 4c 45 20 42 41 53
>1d6f	3a 00
.1d71			f7b_msg
>1d71	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1d74	20 52 45 56	               .null     " reverse character:"
>1d78	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1d88	03 00 05	menua_msg      .byte     mesgcol,0,5
>1d8b	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1d8f	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1d9f	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1dad	03 00 05	menub_msg      .byte     mesgcol,0,5
>1db0	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1db4	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1dc4	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1dd2	07 00 05	copychar_msg   .byte     vjaune,0,5
>1dd5	20 45 4e 54	               .null     " entrez le caractera a copier (?).",157,157,157
>1dd9	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 41
>1de9	20 41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d
>1df9	9d 00
>1dfb	07 00 05	fname_msg      .byte     vjaune,0,5
>1dfe	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1e02	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1e12	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1e22	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1e30	04 15 18 12	quit_msg       .byte     vmauve,21,24,18
>1e34	43 54 52 4c	               .text     "ctrl-x",146
>1e38	2d 58 92
>1e3b	2d 51 55 49	               .null     "-quitter."
>1e3f	54 54 45 52 2e 00
>1e45	0a 12 16 12	redraw_msg     .byte     vrose,18,22,18
>1e49	43 54 52 4c	               .text     "ctrl-r",146
>1e4d	2d 52 92
>1e50	20 52 41 46	               .null     " rafraichir."
>1e54	52 41 49 43 48 49 52 2e 00
.1e5d			menu_msg
>1e5d	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1e61	43 54 52 4c	               .text     "ctrl-x",146
>1e65	2d 58 92
>1e68	20 41 55 20	               .null     " au menu."
>1e6c	4d 45 4e 55 2e 00
>1e72	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1e76	20 20 20 20	               .null     "                               ",146
>1e7a	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1e8a	20 20 20 20 20 20 20 20 20 20 20 92 00
>1e97	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1e9b	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1e9f	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1eaf	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1ebe	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1ec2	20 20 20 20	               .null     "                               ",146
>1ec6	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1ed6	20 20 20 20 20 20 20 20 20 20 20 92 00
>1ee3	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1ee7	20 54 49 52	               .null     " tirez de isbn : 0-942386-29-9 ",146
>1eeb	45 5a 20 44 45 20 49 53 42 4e 20 3a 20 30 2d 39
>1efb	34 32 33 38 36 2d 32 39 2d 39 20 92 00
>1f08	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1f0c	20 20 20 20	               .null     "       par john heilborn       ",146
>1f10	20 20 20 50 41 52 20 4a 4f 48 4e 20 48 45 49 4c
>1f20	42 4f 52 4e 20 20 20 20 20 20 20 92 00
>1f2d	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1f31	20 20 20 20	               .null     "                               ",146
>1f35	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1f45	20 20 20 20 20 20 20 20 20 20 20 92 00
>1f52	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1f56	20 20 20 20	               .null     "     code en assembleur par    ",146
>1f5a	20 43 4f 44 45 20 45 4e 20 41 53 53 45 4d 42 4c
>1f6a	45 55 52 20 50 41 52 20 20 20 20 92 00
>1f77	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1f7b	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1f7f	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1f8f	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1f9c	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1fa0	20 20 20 20	               .null     "    version:",version,"    ",146
>1fa4	56 45 52 53 49 4f 4e 3a 32 30 32 34 31 30 33 30
>1fb4	2d 32 30 34 31 34 34 20 20 20 20 92 00
>1fc1	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1fc5	20 20 20 20	               .null     "                               ",146
>1fc9	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1fd9	20 20 20 20 20 20 20 20 20 20 20 92 00
>1fe6	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1fea	20 20 20 20	               .null     "      bonjour et merci      ",146
>1fee	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>1ffe	43 49 20 20 20 20 20 20 92 00
>2008	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>200c	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>2010	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>2020	52 20 42 41 53 49 43 20 92 00
>202a	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>202d	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>2031	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>2041	31 20 92 00
>2045	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>2048	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>204c	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>205c	32 20 92 00
>2060	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>2063	45 44 49 54	               .text     "editer carac..."
>2067	45 52 20 43 41 52 41 43 2e 2e 2e
>2072	12		               .byte     18             ; position 15
>2073	a9 20 46 31	               .null     $a9," f1 ",223,146
>2077	20 df 92 00
>207b	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>207e	43 4f 50 49	               .text     "copier un carac"
>2082	45 52 20 55 4e 20 43 41 52 41 43
>208d	12		               .byte     18   ; position 15
>208e	20 20 46 32	               .null     "  f2  ",146
>2092	20 20 92 00
>2096	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>2099	53 41 56 45	               .text     "savegarder sur."
>209d	47 41 52 44 45 52 20 53 55 52 2e
>20a8	12		               .byte     18            ; position 15
>20a9	a9 20 46 33	               .null     $a9," f3 ",223,146
>20ad	20 df 92 00
>20b1	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>20b4	43 48 41 52	               .text     "charger de....."
>20b8	47 45 52 20 44 45 2e 2e 2e 2e 2e
>20c3	12		               .byte     18             ; position 15
>20c4	20 20 46 34	               .null     "  f4  ",146
>20c8	20 20 92 00
>20cc	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>20cf	4d 45 54 54	               .text     "mettre tout a 0"
>20d3	52 45 20 54 4f 55 54 20 41 20 30
>20de	12		               .byte     18             ; position 15
>20df	a9 20 46 35	               .null     $a9," f5 ",223,146
>20e3	20 df 92 00
>20e7	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>20ea	4d 45 54 54	               .text     "mettre tout a 1"
>20ee	52 45 20 54 4f 55 54 20 41 20 31
>20f9	12		               .byte     18             ; position 15
>20fa	20 20 46 36	               .null     "  f6  ",146
>20fe	20 20 92 00
>2102	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>2105	52 45 43 55	               .text     "recuperer rom.."
>2109	50 45 52 45 52 20 52 4f 4d 2e 2e
>2114	12		               .byte     18             ; position 15
>2115	a9 20 46 37	               .null     $a9," f7 ",223,146
>2119	20 df 92 00
>211d	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>2120	41 4c 4c 45	               .text     "aller au menu2."
>2124	52 20 41 55 20 4d 45 4e 55 32 2e
>212f	12		               .byte     18             ; position 15
>2130	20 20 46 38	               .null     "  f8  ", 146
>2134	20 20 92 00
>2138	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>213b	42 41 53 43	               .text     "basculer vert.."
>213f	55 4c 45 52 20 56 45 52 54 2e 2e
>214a	12		               .byte     18             ; position 15
>214b	a9 20 46 31	               .null     $a9," f1 ",223,146
>214f	20 df 92 00
>2153	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>2156	42 41 53 43	               .text     "basculer horz.."
>215a	55 4c 45 52 20 48 4f 52 5a 2e 2e
>2165	12		               .byte     18             ; position 15
>2166	20 20 46 32	               .null     "  f2  ",146
>216a	20 20 92 00
>216e	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>2171	44 45 46 49	               .text     "defiler droite."
>2175	4c 45 52 20 44 52 4f 49 54 45 2e
>2180	12		               .byte     18             ; position 15
>2181	a9 20 46 33	               .null     $a9," f3 ",223,146
>2185	20 df 92 00
>2189	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>218c	44 45 46 49	               .text     "defiler gauche."
>2190	4c 45 52 20 47 41 55 43 48 45 2e
>219b	12		               .byte     18             ; position 15
>219c	20 20 46 34	               .null     "  f4  ",146
>21a0	20 20 92 00
>21a4	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>21a7	44 45 46 49	               .text     "defiler haut..."
>21ab	4c 45 52 20 48 41 55 54 2e 2e 2e
>21b6	12		               .byte     18             ; position 15
>21b7	a9 20 46 35	               .null     $a9," f5 ",223,146
>21bb	20 df 92 00
>21bf	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>21c2	44 45 46 49	               .text     "defiler bas...."
>21c6	4c 45 52 20 42 41 53 2e 2e 2e 2e
>21d1	12		               .byte     18             ; position 15
>21d2	20 20 46 36	               .null     "  f6  ",146
>21d6	20 20 92 00
>21da	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>21dd	49 4e 56 45	               .text     "inverser bits.."
>21e1	52 53 45 52 20 42 49 54 53 2e 2e
>21ec	12		               .byte     18             ; position 15
>21ed	a9 20 46 37	               .null     $a9," f7 ",223,146
>21f1	20 df 92 00
>21f5	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>21f8	41 4c 4c 45	               .text     "aller au menu1."
>21fc	52 20 41 55 20 4d 45 4e 55 31 2e
>2207	12		               .byte     18             ; position 15
>2208	20 20 46 38	               .null     "  f8  ", 146
>220c	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>2210	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>2214	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.2218			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.2218			screendis
.2218	08		               php
.2219	48		               pha
.221a	ad 11 d0	               lda  $d011
.221d	29 ef		               and  #%11101111
.221f	8d 11 d0	               sta  $d011
.2222	68		               pla
.2223	28		               plp
.2224	60		               rts
.2225			screenena
.2225	08		               php
.2226	48		               pha
.2227	ad 11 d0	               lda  $d011
.222a	09 10		               ora  #%00010000
.222c	8d 11 d0	               sta  $d011
.222f	68		               pla
.2230	28		               plp
.2231	60		               rts
=8192			bmpram = 8192
.2232			victohighres
.2232	08		               php
.2233	48		               pha
.2234	ad 11 d0	               lda  vicmiscfnc
.2237	09 20		               ora  #%00100000     ; 32
.2239	8d 11 d0	               sta  vicmiscfnc
.223c	ad 18 d0	               lda  vicmemptr
.223f	09 08		               ora  #%00001000     ; $08
.2241	8d 18 d0	               sta  vicmemptr
.2244	a9 ff		               lda  #$ff           ; 255
.2246	85 37		               sta  $0037
.2248	a9 1f		               lda  #$1f           ; 31
.224a	85 38		               sta  $0038
.224c	68		               pla
.224d	28		               plp
.224e	60		               rts
.224f			victonormal
.224f	08		               php
.2250	48		               pha
.2251	ad 11 d0	               lda  vicmiscfnc
.2254	29 df		               and  #%11011111     ; 233
.2256	8d 11 d0	               sta  vicmiscfnc
.2259	ad 18 d0	               lda  vicmemptr
.225c	29 f7		               and  #%11110111     ; $08
.225e	8d 18 d0	               sta  vicmemptr
.2261	a9 00		               lda  #$00
.2263	85 37		               sta  $0037
.2265	a9 a0		               lda  #$a0
.2267	85 38		               sta  $0038
.2269	20 44 23	               jsr  cls
.226c	68		               pla
.226d	28		               plp
.226e	60		               rts
.226f			vicbmpclear
.226f	20 59 24	               jsr  push
.2272	a9 04		               lda  #cmauve
.2274	20 9d 22	               jsr  setvicbmpbackcol
.2277	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.2279	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.227b	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.227d	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.227f	48		               pha
.2280	a9 ff		               lda  #<$0000+(8191)
.2282	8d 74 26	               sta  loopcount
.2285	a9 1f		               lda  #>$0000+(8191)
.2287	8d 75 26	               sta  loopcount+1
.228a	68		               pla
.228b	a0 00		               ldy  #$00
.228d	a9 0f		next           lda  #$0f
.228f	91 fb		               sta  (zpage1),y
.2291	20 b1 25	               jsr  inczpage1
.2294	20 54 26	               jsr  loop
.2297	d0 f4		               bne  next
.2299	20 97 24	               jsr  pop
.229c	60		               rts
.229d			setvicbmpbackcol
.229d	20 59 24	               jsr  push
.22a0	29 0f		               and  #$0f
.22a2	8d d0 22	               sta  vicbmpbackcol
.22a5	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.22a7	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.22a9	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.22ab	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.22ad	48		               pha
.22ae	a9 00		               lda  #<$0000+(1024)
.22b0	8d 74 26	               sta  loopcount
.22b3	a9 04		               lda  #>$0000+(1024)
.22b5	8d 75 26	               sta  loopcount+1
.22b8	68		               pla
.22b9	a0 00		               ldy  #$00
.22bb	b1 fb		next           lda  (zpage1),y
.22bd	29 f0		               and  #$f0
.22bf	0d d0 22	               ora  vicbmpbackcol
.22c2	91 fb		               sta  (zpage1),y
.22c4	20 b1 25	               jsr  inczpage1
.22c7	20 54 26	               jsr  loop
.22ca	d0 ef		               bne  next
.22cc	20 97 24	               jsr  pop
.22cf	60		               rts
>22d0	00		vicbmpbackcol  .byte     $00
.22d1			setvicbmpforecol
.22d1	20 59 24	               jsr  push
.22d4	2a		               rol
.22d5	2a		               rol
.22d6	2a		               rol
.22d7	2a		               rol
.22d8	29 f0		               and  #$f0
.22da	8d 08 23	               sta  vicbmpforecol
.22dd	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.22df	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.22e1	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.22e3	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.22e5	48		               pha
.22e6	a9 00		               lda  #<$0000+(1024)
.22e8	8d 74 26	               sta  loopcount
.22eb	a9 04		               lda  #>$0000+(1024)
.22ed	8d 75 26	               sta  loopcount+1
.22f0	68		               pla
.22f1	a0 00		               ldy  #$00
.22f3	b1 fb		next           lda  (zpage1),y
.22f5	29 0f		               and  #$0f
.22f7	0d 08 23	               ora  vicbmpforecol
.22fa	91 fb		               sta  (zpage1),y
.22fc	20 b1 25	               jsr  inczpage1
.22ff	20 54 26	               jsr  loop
.2302	d0 ef		               bne  next
.2304	20 97 24	               jsr  pop
.2307	60		               rts
>2308	00		vicbmpforecol  .byte     $00
.2309			bmphrcalccoords
.2309	20 59 24	               jsr  push
.230c	18		               clc       ; On met Carry à 0
.230d	6a		               ror       ; le bit 0 de a dans carry  ?/2
.230e	8a		               txa       ; x dans a
.230f	4a		               lsr       ; ?/4
.2310	4a		               lsr       ; ?/8 a = (ax)/8
.2311	8d 22 23	               sta  bmphrcol
.2314	98		               tya       ; Y dans a
.2315	4a		               lsr       ; ?/2
.2316	4a		               lsr       ; ?/4
.2317	4a		               lsr       ; ?/8 a=Y/8
.2318	8d 21 23	               sta  bmphrrow
.231b	48		               pha
.231c	98		               tya
.231d	20 97 24	               jsr  pop
.2320	60		               rts
.2321			vicbmpfill
>2321	00		bmphrrow       .byte     $00
>2322	00		bmphrcol       .byte     $00
>2323	00		bmphrmask      .byte     $00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.2324			scrmaninit
.2324	20 59 24	               jsr  push
.2327	a9 06		               lda  #vbleu
.2329	8d 21 d0	               sta  vicbackcol
.232c	a9 05		               lda  #vvert
.232e	8d 20 d0	               sta  vicbordcol
.2331	a9 01		               lda  #vblanc
.2333	8d 86 02	               sta  bascol
.2336	ad 00 04	               lda  scrnram
.2339	8d 00 04	               sta  scrnram
.233c	20 44 23	               jsr  cls
.233f	20 97 24	               jsr  pop
.2342	60		               rts
>2343	8e		characterset   .byte b_uppercase
.2344			cls
.2344	08		               php
.2345	48		               pha
.2346	a9 93		               lda  #$93
.2348	20 5b 23	               jsr  putch
.234b	68		               pla
.234c	28		               plp
.234d	60		               rts
.234e			putnch
.234e	08		               php
.234f	e0 00		               cpx  #$00
.2351	f0 06		               beq  out
.2353	20 d2 ff	again          jsr  $ffd2
.2356	ca		               dex
.2357	d0 fa		               bne  again
.2359	28		out            plp
.235a	60		               rts
.235b			putch
.235b	08		               php
.235c	20 d2 ff	               jsr  $ffd2
.235f	28		               plp
.2360	60		               rts
.2361			puts
.2361	20 59 24	               jsr  push
.2364	86 fb		               stx  zpage1
.2366	84 fc		               sty  zpage1+1
.2368	a0 00		               ldy  #0
.236a	b1 fb		next           lda  (zpage1),y
.236c	f0 09		               beq  exit
.236e	20 5b 23	               jsr  putch
.2371	20 b1 25	               jsr  inczp1
.2374	4c 6a 23	               jmp  next
.2377	20 97 24	exit           jsr  pop
.237a	60		               rts
.237b			gotoxy
.237b	08		               php
.237c	18		               clc
.237d	8a		               txa
.237e	48		               pha
.237f	98		               tya
.2380	aa		               tax
.2381	68		               pla
.2382	a8		               tay
.2383	20 f0 ff	               jsr  kplot
.2386	28		               plp
.2387	60		               rts
.2388			cursor
=$0286			bascol    =    $0286
.2388	08		               php            ;tourlou
.2389	48		               pha
.238a	90 12		               bcc  restore
.238c	20 f0 ff	               jsr  kplot
.238f	8c b0 23	               sty  cx
.2392	8e b1 23	               stx  cy
.2395	ad 86 02	               lda  bascol
.2398	8d b2 23	               sta  bcol
.239b	4c ad 23	               jmp  out
.239e	ae b1 23	restore        ldx  cy
.23a1	ac b0 23	               ldy  cx
.23a4	20 f0 ff	               jsr  kplot
.23a7	ad b2 23	               lda  bcol
.23aa	8d 86 02	               sta  bascol
.23ad	68		out            pla
.23ae	28		               plp
.23af	60		               rts
>23b0	00		cx   .byte     $00
>23b1	00		cy   .byte     $00
>23b2	00		bcol .byte     $00
.23b3			cursave
.23b3	08		               php
.23b4	38		               sec
.23b5	20 88 23	               jsr  cursor
.23b8	28		               plp
.23b9	60		               rts
.23ba			curput
.23ba	08		               php
.23bb	18		               clc
.23bc	20 88 23	               jsr  cursor
.23bf	28		               plp
.23c0	60		               rts
.23c1			putsxy
.23c1	20 59 24	               jsr  push
.23c4	86 fb		               stx  zpage1
.23c6	84 fc		               sty  zpage1+1
.23c8	a0 00		               ldy  #$00
.23ca	b1 fb		               lda  (zpage1),y
.23cc	aa		               tax
.23cd	20 b1 25	               jsr  inczp1
.23d0	b1 fb		               lda  (zpage1),y
.23d2	a8		               tay
.23d3	20 7b 23	               jsr  gotoxy
.23d6	20 b1 25	               jsr  inczp1
.23d9	a6 fb		               ldx  zpage1
.23db	a4 fc		               ldy  zpage1+1
.23dd	20 61 23	               jsr  puts
.23e0	20 97 24	               jsr  pop
.23e3	60		               rts
>23e4	00 00		straddr   .word     $00
>23e6	00		px        .byte     $00
>23e7	00		py        .byte     $00
>23e8	00 00		zp1       .word     $00
.23ea			putscxy
.23ea	20 59 24	               jsr  push
.23ed	84 fc		               sty  zpage1+1
.23ef	86 fb		               stx  zpage1
.23f1	ad 86 02	               lda  bascol
.23f4	8d 14 24	               sta  bc
.23f7	a0 00		               ldy #$00
.23f9	b1 fb		               lda  (zpage1),y
.23fb	8d 86 02	               sta  bascol
.23fe	20 b1 25	               jsr  inczp1
.2401	a6 fb		               ldx  zpage1
.2403	a4 fc		               ldy  zpage1+1
.2405	20 c1 23	               jsr  putsxy
.2408	ad 14 24	               lda  bc
.240b	8d 86 02	               sta  bascol
.240e	20 97 24	               jsr  pop
.2411	60		               rts
>2412	00 00		straddr  .word      $00
>2414	00		bc       .byte      $00
>2415	00 00		zp1      .word      $00
.2417			putrahex
.2417	08		               php
.2418	48		               pha
.2419	20 dc 26	               jsr  atohex
.241c	a9 7b		               lda  #<a2hexstr
.241e	a0 26		               ldy  #>a2hexstr
.2420	20 61 23	               jsr  puts
.2423	68		               pla
.2424	28		               plp
.2425	60		               rts
.2426			kputrahexxy
.2426			bputrahexxy
.2426			putrahexxy
.2426	08		               php
.2427	20 dc 26	               jsr  atohex
.242a	a9 78		               lda  #<a2hexpos
.242c	a0 26		               ldy  #>a2hexpos
.242e	20 c1 23	               jsr  putsxy
.2431	68		               pla
.2432	28		               plp
.2433	60		               rts
.2434			putrahexcxy
.2434	08		               php
.2435	20 dc 26	               jsr  atohex
.2438	a9 78		               lda  #<a2hexpos
.243a	a0 26		               ldy  #>a2hexpos
.243c	20 ea 23	               jsr  putscxy
.243f	68		               pla
.2440	28		               plp
.2441	60		               rts
.2442			setinverse
.2442	48		               pha
.2443	a9 12		               lda  #$12
.2445	20 d2 ff	               jsr  $ffd2
.2448	68		               pla
.2449	60		               rts
.244a			clrinverse
.244a	48		               pha
.244b	a9 92		               lda  #$92
.244d	20 d2 ff	               jsr  $ffd2
.2450	68		               pla
.2451	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>2452	00		rp        .byte     0
>2453	00		ra        .byte     0
>2454	00 00		pc        .word     0
.2456	20 59 24	               jsr  push
.2459			push
.2459	08		          php            ; stack : flg, pcl, pch
.245a	78		          sei
.245b	8d 53 24	          sta  ra        ; save a
.245e	68		          pla            ; stack : pcl, pch
.245f	8d 52 24	          sta  rp        ; save rp
.2462	68		          pla            ; stack : pch
.2463	8d 54 24	          sta  pc        ; save pcl
.2466	68		          pla            ; stack : -
.2467	8d 55 24	          sta  pc+1      ; save pch
.246a	a5 fb		          lda  zpage1    ; get zpage1 low byte
.246c	48		          pha            ; stack : zp1l
.246d	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.246f	48		          pha            ; stack : zp1h, zp1l
.2470	a5 fd		          lda  zpage2    ; get zpage2 low byte
.2472	48		          pha            ; stack : zp2l, zp1h, zp1l
.2473	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.2475	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.2476	ad 52 24	          lda  rp        ; get rp
.2479	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.247a	ad 53 24	          lda  ra        ; get a
.247d	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.247e	8a		          txa            ; get x
.247f	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2480	98		          tya            ; get y
.2481	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2482	ad 55 24	          lda  pc+1      ; get pch
.2485	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2486	ad 54 24	          lda  pc        ; get pcl
.2489	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.248a	ad 52 24	          lda  rp        ; get rp
.248d	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.248e	ad 53 24	          lda  ra        ; get a
.2491	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2492	58		          cli
.2493	60		          rts
.2494			pullall
.2494			pull
.2494	20 97 24	               jsr  pop
.2497			pop
.2497	78		          sei
.2498	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.2499	8d 54 24	          sta  pc        ; save pcl
.249c	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.249d	8d 55 24	          sta  pc+1      ; save pch
.24a0	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.24a1	a8		          tay            ; set y
.24a2	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.24a3	aa		          tax            ; set x
.24a4	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.24a5	8d 53 24	          sta  ra        ; save a
.24a8	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.24a9	8d 52 24	          sta  rp        ; save rp
.24ac	68		          pla            ; stack : zp2l, zp1h, zp1l
.24ad	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.24af	68		          pla            ; stack : zp1h, zp1l
.24b0	85 fd		          sta  zpage2    ; get zpage2 High byte
.24b2	68		          pla            ; stack : zp1l
.24b3	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.24b5	68		          pla            ; stack :
.24b6	85 fb		          sta  zpage1    ; get zpage1 High byte
.24b8	ad 55 24	          lda  pc+1      ; get pch
.24bb	48		          pha            ; stack : pch
.24bc	ad 54 24	          lda  pc
.24bf	48		          pha            ; stack : pcl, pch
.24c0	ad 52 24	          lda  rp        ; get rp
.24c3	48		          pha            ; stack : rp, pcl, pch
.24c4	ad 53 24	          lda  ra        ; set ra
.24c7	58		          cli
.24c8	28		          plp            ; stack : pcl, pch
.24c9	60		          rts
.24ca			pushreg
.24ca	08		          php            ; stack : flg, pcl, pch
.24cb	78		          sei
.24cc	8d 53 24	          sta  ra        ; save a
.24cf	68		          pla            ; stack : pcl, pch
.24d0	8d 52 24	          sta  rp        ; save rp
.24d3	68		          pla            ; stack : pch
.24d4	8d 54 24	          sta  pc        ; save pcl
.24d7	68		          pla            ; stack : -
.24d8	8d 55 24	          sta  pc+1      ; save pch
.24db	ad 52 24	          lda  rp        ; get rp
.24de	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.24df	ad 53 24	          lda  ra        ; get a
.24e2	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.24e3	8a		          txa            ; get x
.24e4	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.24e5	98		          tya            ; get y
.24e6	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24e7	ad 55 24	          lda  pc+1      ; get pch
.24ea	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24eb	ad 54 24	          lda  pc        ; get pcl
.24ee	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24ef	ad 52 24	          lda  rp        ; get rp
.24f2	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24f3	ad 53 24	          lda  ra        ; get a
.24f6	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24f7	58		          cli
.24f8	60		          rts
.24f9			pullreg
.24f9			popreg
.24f9	78		          sei
.24fa	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24fb	8d 54 24	          sta  pc        ; save pcl
.24fe	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.24ff	8d 55 24	          sta  pc+1      ; save pch
.2502	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.2503	a8		          tay            ; set y
.2504	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.2505	aa		          tax            ; set x
.2506	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.2507	8d 53 24	          sta  ra        ; save a
.250a	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.250b	8d 52 24	          sta  rp        ; save rp
.250e	ad 55 24	          lda  pc+1      ; get pch
.2511	48		          pha            ; stack : pch
.2512	ad 54 24	          lda  pc
.2515	48		          pha            ; stack : pcl, pch
.2516	ad 52 24	          lda  rp        ; get rp
.2519	48		          pha            ; stack : rp, pcl, pch
.251a	ad 53 24	          lda  ra        ; set ra
.251d	58		          cli
.251e	28		          plp            ; stack : pcl, pch
.251f	60		          rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.2520			blkfill
.2520	20 59 24	bf0            jsr  push
.2523	20 df 25	               jsr  savezp1
.2526	84 fc		               sty  zpage1+1
.2528	a0 00		               ldy  #$00
.252a	84 fb		               sty  zpage1
.252c	91 fb		bf1            sta  (zpage1),y
.252e	c8		               iny
.252f	d0 fb		               bne  bf1
.2531	20 ee 25	               jsr  restzp1
.2534	20 97 24	               jsr  pop
.2537	60		               rts
.2538			memfill
.2538	20 59 24	               jsr  push
.253b	20 20 25	mf1            jsr  blkfill
.253e	c8		               iny
.253f	ca		               dex
.2540	d0 f9		               bne  mf1
.2542	20 97 24	               jsr  pop
.2545	60		               rts
.2546			memmove
.2546	20 59 24	               jsr  push
.2549	ba		               tsx            ; On se crée un pointeur ...
.254a	8a		               txa
.254b	18		               clc
.254c	69 0b		               adc  #11
.254e	a8		               tay
.254f	a2 06		               ldx  #$06
.2551	b9 00 01	nextbyte       lda  $0100,y
.2554	99 a0 25	               sta  words,y
.2557	c8		               iny
.2558	ca		               dex
.2559	d0 f6		               bne  nextbyte
.255b	ad a0 25	               lda  s
.255e	8d 77 25	               sta  source+1
.2561	ad a1 25	               lda  s+1
.2564	8d 78 25	               sta  source+2
.2567	ad a2 25	               lda  d
.256a	8d 74 25	               sta  destin+1
.256d	ad a3 25	               lda  d+1
.2570	8d 75 25	               sta  destin+2
.2573	ad ff ff	destin         lda  $ffff
.2576	8d ff ff	source         sta  $ffff
.2579	ee 74 25	               inc  destin+1
.257c	d0 03		               bne  src
.257e	ee 75 25	               inc  destin+2
.2581	ee 77 25	src            inc  source+1
.2584	d0 03		               bne  cnt
.2586	ee 78 25	               inc  source+2
.2589	ad a4 25	cnt            lda  compte
.258c	d0 08		               bne  decit
.258e	ad a5 25	               lda  compte+1
.2591	f0 09		               beq  fini
.2593	ce a5 25	               dec  compte+1
.2596	ce a4 25	decit          dec  compte
.2599	4c 73 25	               jmp  destin
.259c	20 97 24	fini           jsr  pop
.259f	60		               rts
.25a0			words
>25a0	00 00		s         .word     $0000
>25a2	00 00		d         .word     $0000
>25a4	00 00		compte    .word     $0000
.25a6			decword
.25a6	20 59 24	               jsr  push
.25a9	86 fd		               stx  zpage2
.25ab	84 fe		               sty  zpage2+1
.25ad	20 97 24	               jsr  pop
.25b0	60		               rts
.25b1			inczpage1
.25b1			inczp1
.25b1	08		               php
.25b2	48		               pha
.25b3	e6 fb		               inc  zpage1
.25b5	a5 fb		               lda  zpage1
.25b7	d0 02		               bne  nopage
.25b9	e6 fc		               inc  zpage1+1
.25bb	68		nopage         pla
.25bc	28		               plp
.25bd	60		               rts
.25be			deczpage1
.25be			deczp1
.25be	08		                php
.25bf	48		                pha
.25c0	c6 fb		                dec  zpage1
.25c2	d0 02		                bne  nopage
.25c4	c6 fc		                dec  zpage1+1
.25c6	68		nopage          pla
.25c7	28		                plp
.25c8	60		                rts
.25c9			inczpage2
.25c9			inczp2
.25c9	08		               php
.25ca	48		               pha
.25cb	e6 fd		               inc  zpage2
.25cd	a5 fd		               lda  zpage2
.25cf	d0 02		               bne  nopage
.25d1	e6 fe		               inc  zpage2+1
.25d3	68		nopage         pla
.25d4	28		               plp
.25d5	60		               rts
.25d6			deczpage2
.25d6			deczp2
.25d6	08		               php
.25d7	c6 fd		               dec  zpage2
.25d9	d0 02		               bne  nopage
.25db	c6 fe		               dec  zpage2+1
.25dd	28		nopage         plp
.25de	60		               rts
.25df			savezp1
.25df	08		               php
.25e0	48		               pha
.25e1	a5 fb		               lda  zpage1
.25e3	8d 70 26	               sta  zp1
.25e6	a5 fc		               lda  zpage1+1
.25e8	8d 71 26	               sta  zp1+1
.25eb	68		               pla
.25ec	28		               plp
.25ed	60		               rts
.25ee			restzp1
.25ee	08		               php
.25ef	48		               pha
.25f0	ad 70 26	               lda zp1
.25f3	85 fb		               sta zpage1
.25f5	ad 71 26	               lda zp1+1
.25f8	85 fc		               sta zpage1+1
.25fa	68		               pla
.25fb	28		               plp
.25fc	60		               rts
.25fd			savezp2
.25fd	08		         php
.25fe	48		         pha
.25ff	a5 fd		         lda zpage2
.2601	8d 72 26	         sta zp2
.2604	a5 fe		         lda zpage2+1
.2606	8d 73 26	         sta zp2+1
.2609	68		         pla
.260a	28		         plp
.260b	60		         rts
.260c			restzp2
.260c	08		                php
.260d	48		                pha
.260e	ad 72 26	                lda  zp2
.2611	85 fd		                sta  zpage2
.2613	ad 73 26	                lda  zp2+1
.2616	85 fe		                sta  zpage2+1
.2618	68		                pla
.2619	28		                plp
.261a	60		                rts
.261b			xy2addr
.261b	08		                php
.261c	48		                pha
.261d	8a		                txa
.261e	48		                pha
.261f	98		                tya
.2620	48		                pha
.2621	ad 6b 26	                lda     addr1+1
.2624	8d 6d 26	                sta     addr2+1
.2627	ad 6a 26	                lda     addr1
.262a	8d 6c 26	                sta     addr2
.262d	c0 00		                cpy     #$00
.262f	f0 0f		                beq     addx
.2631	18		moreline        clc
.2632	6d 69 26	                adc     ymult
.2635	90 03		                bcc     norepy
.2637	ee 6d 26	                inc     addr2+1
.263a	8d 6c 26	norepy          sta     addr2
.263d	88		                dey
.263e	d0 f1		                bne     moreline
.2640	8a		addx            txa
.2641	18		                clc
.2642	6d 6c 26	                adc     addr2
.2645	90 03		                bcc     thatsit
.2647	ee 6d 26	                inc     addr2+1
.264a	8d 6c 26	thatsit         sta     addr2
.264d	68		                pla
.264e	a8		                tay
.264f	68		                pla
.2650	aa		                tax
.2651	68		                pla
.2652	28		                plp
.2653	60		                rts
.2654			loop
.2654	ce 74 26	               dec  loopcount
.2657	d0 03		               bne  norep
.2659	ce 75 26	               dec  loopcount+1
.265c	ad 74 26	norep          lda  loopcount
.265f	c9 00		               cmp  #$00
.2661	d0 05		               bne  out
.2663	4d 75 26	               eor  loopcount+1
.2666	c9 ff		               cmp  #$ff
.2668	60		out            rts
>2669	28		ymult          .byte     40
>266a	00 00		addr1          .word     $0000
>266c	00 00		addr2          .word     $0000
>266e	00 00		bytecnt        .word     $0000
>2670	00 00		zp1            .word   $0000
>2672	00 00		zp2            .word   $0000
>2674	00 00		loopcount      .word     $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>2676	01		a2hexcol       .byte     1              ; pour aputscxy
>2677	00		a2hexbkcol     .byte     %00000000
.2678			a2hexpos
>2678	00		a2hexpx        .byte     0              ; pour aputsxy
>2679	00		a2hexpy        .byte     0
>267a	24		a2hexprefix    .byte     "$"            ; pour aputs
>267b	00 00		a2hexstr       .word     $00
>267d	00 00		               .word     $00
>267f	00		               .byte     0              ; 0 end string
>2680	30 30 30 30	abin           .null     "00000000"
>2684	30 30 30 30 00
>2689	20 20 20 00	adec           .null     "   "
.268d			putahexfmtxy
.268d	20 59 24	               jsr  push
.2690	20 dc 26	               jsr  atohex
.2693	ae 78 26	               ldx  a2hexpx
.2696	ac 79 26	               ldy  a2hexpy
.2699	20 7b 23	               jsr  gotoxy
.269c	a2 7a		               ldx  #<a2hexprefix
.269e	a0 26		               ldy  #>a2hexprefix
.26a0	20 61 23	               jsr  puts
.26a3	20 97 24	               jsr  pop
.26a6	60		               rts
.26a7			putahexfmt
.26a7	20 59 24	               jsr  push
.26aa	20 dc 26	               jsr  atohex
.26ad	a2 7a		               ldx  #<a2hexprefix
.26af	a0 26		               ldy  #>a2hexprefix
.26b1	20 61 23	               jsr  puts
.26b4	20 97 24	               jsr  pop
.26b7	60		               rts
.26b8			putahex
.26b8	20 59 24	               jsr  push
.26bb	20 dc 26	               jsr  atohex
.26be	a2 7b		               ldx  #<a2hexstr
.26c0	a0 26		               ldy  #>a2hexstr
.26c2	20 61 23	               jsr  puts
.26c5	20 97 24	               jsr  pop
.26c8	60		               rts
.26c9			nibtohex
.26c9	08		               php
.26ca	29 0f		               and  #$0f
.26cc	f8		               sed
.26cd	18		               clc
.26ce	69 90		               adc  #$90
.26d0	69 40		               adc  #$40
.26d2	d8		               cld
.26d3	28		               plp
.26d4	60		               rts
.26d5			lsra4bits
.26d5	08		               php
.26d6	4a		               lsr
.26d7	4a		               lsr
.26d8	4a		               lsr
.26d9	4a		               lsr
.26da	28		               plp
.26db	60		               rts
.26dc			atohex
.26dc	08		               php
.26dd	48		               pha
.26de	48		               pha
.26df	20 d5 26	               jsr  lsra4bits
.26e2	20 c9 26	               jsr  nibtohex
.26e5	8d 7b 26	               sta  a2hexstr
.26e8	68		               pla
.26e9	20 c9 26	               jsr  nibtohex
.26ec	8d 7c 26	               sta  a2hexstr+1
.26ef	a9 00		               lda  #$00                ; set end of string
.26f1	8d 7d 26	               sta  a2hexstr+2
.26f4	68		               pla
.26f5	28		               plp
.26f6	60		               rts
.26f7			xy2hex
.26f7	20 59 24	               jsr  push
.26fa	20 dc 26	               jsr  atohex
.26fd	8a		               txa
.26fe	48		               pha
.26ff	20 d5 26	               jsr  lsra4bits
.2702	20 c9 26	               jsr  nibtohex
.2705	8d 7b 26	               sta  a2hexstr
.2708	68		               pla
.2709	20 c9 26	               jsr  nibtohex
.270c	8d 7c 26	               sta  a2hexstr+1
.270f	98		               tya
.2710	48		               pha
.2711	20 d5 26	               jsr  lsra4bits
.2714	20 c9 26	               jsr  nibtohex
.2717	8d 7d 26	               sta  a2hexstr+2
.271a	68		               pla
.271b	20 c9 26	               jsr  nibtohex
.271e	8d 7e 26	               sta  a2hexstr+3
.2721	a9 00		               lda  #$00                ; 0 ended string
.2723	8d 7f 26	               sta  a2hexstr+4
.2726	20 97 24	               jsr  pop
.2729			atobin
.2729	20 59 24	               jsr  push
.272c	a2 08		               ldx  #8
.272e	a0 00		               ldy  #0
.2730	18		               clc
.2731	2a		nextbit        rol
.2732	48		               pha
.2733	69 00		               adc  #$00
.2735	29 01		               and  #$01
.2737	20 c9 26	               jsr  nibtohex
.273a	99 80 26	               sta  abin,y
.273d	68		               pla
.273e	c8		               iny
.273f	ca		               dex
.2740	d0 ef		               bne  nextbit
.2742	a9 00		               lda  #0
.2744	99 80 26	               sta  abin,y
.2747	20 94 24	               jsr  pull
.274a	60		               rts
.274b			putabin
.274b	20 29 27	               jsr     atobin
.274e	20 59 24	               jsr     push
.2751	a2 80		               ldx     #<abin
.2753	a0 26		               ldy     #>abin
.2755	20 61 23	               jsr     puts
.2758	20 97 24	               jsr     pop
.275b	60		               rts
.275c			printabin
.275c	20 59 24	               jsr     push
.275f	a2 80		               ldx     #<abin
.2761	a0 26		               ldy     #>abin
.2763	20 61 23	               jsr     puts
.2766	20 97 24	               jsr     pop
.2769	60		               rts
.276a			putabinfmt
.276a	08		               php
.276b	48		               pha
.276c	a9 25		               lda     #"%"
.276e	20 5b 23	               jsr     putch
.2771	68		               pla
.2772	20 4b 27	               jsr     putabin
.2775	28		               plp
.2776	60		               rts
.2777			putabinxy
.2777	20 7b 23	               jsr     gotoxy
.277a	20 4b 27	               jsr     putabin
.277d	60		               rts
.277e			putabinfmtxy
.277e	20 7b 23	               jsr     gotoxy
.2781	20 6a 27	               jsr     putabinfmt
.2784	60		               rts
.2785			atodec
.2785	20 59 24	               jsr  push
.2788	f8		               sed            ; On se place en mode décimal.
.2789	aa		               tax            ; On déplace a dans x.
.278a	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.278c	a9 00		               lda  #$00      ; 0 dans A.
.278e	18		nextbit        clc            ; Bit carry a 0.
.278f	69 01		               adc  #$01      ; Ajoute 1 a A.
.2791	90 01		               bcc  decx      ; Pas de carry, pas de report.
.2793	c8		               iny            ; On incrémente Y
.2794	ca		decx           dex            ; X=X-1
.2795	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.2797	48		               pha            ; A sur le stack.
.2798	98		               tya            ; Y dans A (MSB)
.2799	20 c9 26	               jsr  nibtohex  ; a hex petsci ...
.279c	8d 89 26	               sta  adec      ; ... dans tampon.
.279f	68		               pla            ; Récupere A
.27a0	48		               pha            ;
.27a1	20 c9 26	               jsr  nibtohex
.27a4	8d 8b 26	               sta  adec+2
.27a7	68		               pla
.27a8	6a		               ror
.27a9	6a		               ror
.27aa	6a		               ror
.27ab	6a		               ror
.27ac	20 c9 26	               jsr  nibtohex
.27af	8d 8a 26	               sta  adec+1
.27b2	d8		               cld            ; On revient en mode binaire.
.27b3	20 94 24	               jsr  pull
.27b6	60		               rts
.27b7			putadec
.27b7	20 59 24	               jsr  push
.27ba	20 85 27	               jsr  atodec
.27bd	a2 89		               ldx  #<adec
.27bf	a0 26		               ldy  #>adec+1
.27c1	20 61 23	               jsr  puts
.27c4	20 97 24	               jsr  pop
.27c7	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>27c8	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>27cc	00 00 00 00 00 00 00 00 00 0d 00 00
>27d8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>27dc	00 00 00 00 00 00 00 00 00 00 00 00
>27e8	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>27ec	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>27f8	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>27fc	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>2808	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>280c	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>2818	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>281c	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>2828	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>282c	00 00 00 00 00 00 00 00 00 00 00 00
>2838	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>283c	00 00 00 00 00 00 00 00 00 00 00 00
>2848	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>284c	00 00 00 00 00 00 00 00 00 00 00 00
>2858	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>285c	00 00 00 00 00 00 00 00 00 00 00 00
>2868	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>286c	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>2878	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>287c	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>2888	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>288c	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>2898	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>289c	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>28a8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>28ac	00 00 00 00 00 00 00 00 00 00 00 00
>28b8	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>28bc	00 00 00 00 00 00 00 00 00 00 00 00
.28c8			waitstop
.28c8	20 59 24	               jsr  push
.28cb	20 ed f6	wait           jsr  k_stop
.28ce	d0 fb		               bne  wait
.28d0	20 97 24	               jsr  pop
.28d3	60		               rts
.28d4			anykey
.28d4	08		               php
.28d5	48		               pha
.28d6	a5 cb		nokey          lda 203
.28d8	c9 40		               cmp #64
.28da	f0 fa		               beq nokey
.28dc	20 e2 28	               jsr releasekey
.28df	68		               pla
.28e0	28		               plp
.28e1	60		               rts
.28e2			releasekey
.28e2	08		               php
.28e3	48		               pha
.28e4	a5 cb		keypressed     lda 203
.28e6	c9 40		               cmp #64
.28e8	d0 fa		               bne keypressed
.28ea	68		               pla
.28eb	28		               plp
.28ec	60		               rts
.28ed			getkey
.28ed	20 e4 ff	again          jsr  getin
.28f0	c9 00		               cmp  #0
.28f2	f0 f9		               beq  again
.28f4	60		               rts
.28f5			kbflushbuff
.28f5	08		               php
.28f6	48		               pha
.28f7	20 e4 ff	again          jsr  getin
.28fa	c9 00		               cmp  #0
.28fc	d0 f9		               bne  again
.28fe	68		               pla
.28ff	28		               plp
.2900	60		               rts
.2901			waitkey
.2901	20 59 24	               jsr  push
.2904	8d 52 29	               sta  thekey
.2907	20 e4 ff	nope           jsr  getin
.290a	20 d2 ff	               jsr  chrout
.290d	cd 52 29	               cmp  thekey
.2910	d0 f5		               bne  nope
.2912	20 d2 ff	               jsr  chrout
.2915	20 97 24	               jsr  pop
.2918	60		               rts
.2919			waitspace
.2919	20 59 24	               jsr  push
.291c	a9 7f		wait           lda  #$7f  ;%01111111
.291e	8d 00 dc	               sta  $dc00
.2921	ad 01 dc	               lda  $dc01
.2924	29 10		               and  #$10  ;mask %00010000
.2926	d0 f4		               bne  wait
.2928	20 97 24	               jsr  pop
.292b			waitsstop
.292b	20 59 24	               jsr  push
.292e	20 ed f6	wait           jsr  k_stop  ;%01111111
.2931	d0 fb		               bne  wait
.2933	20 97 24	               jsr  pop
.2936			waitreturn
.2936	20 59 24	               jsr  push
.2939	ad 53 29	               lda  thecount
.293c	8d 00 04	               sta  scrnram
.293f	a9 02		               lda  #$02
.2941	8d 00 d8	               sta  colorram
.2944	20 e4 ff	nope           jsr  getin
.2947	c9 0d		nohex          cmp  #$0d
.2949	d0 f9		               bne  nope
.294b	ee 53 29	               inc  thecount
.294e	20 97 24	               jsr  pop
.2951	60		               rts
>2952	00		thekey         .byte   0
>2953	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-disk.asm

.2954			diskerror
.2954	20 59 24	               jsr  push
.2957	ad 37 2b	               lda  dsk_dev   ; Select device 8
.295a	85 ba		               sta  $ba       ;
.295c	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.295f	a9 6f		               lda  #$6f
.2961	85 b9		               sta  $b9       ;
.2963	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.2966	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.2969	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.296c	c9 0d		               cmp  #$0d      ; Is it CR ?
.296e	d0 f6		               bne  nextchar  ; No, get next char
.2970	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.2973	20 97 24	               jsr  pop
.2976	60		               rts
.2977			diskdir
.2977	20 59 24	               jsr  push
.297a	a9 24		               lda  #$24      ; L012C - Filename is "$"
.297c	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.297e	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.2980	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.2982	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.2984	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.2986	a9 01		               lda  #$01      ; L0138 - set ...
.2988	85 b7		               sta  $b7       ; L013A - ... length of current filename
.298a	ad 37 2b	               lda  dsk_dev   ; L013C - set 8 as ...
.298d	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.298f	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.2991	85 b9		               sta  $b9       ; L0142 - ... secondary address
.2993	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.2996	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.2998	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.299b	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.299d	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.29a0	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.29a2	85 90		               sta  $90       ; L0153 - ... kernal status word.
.29a4	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.29a6	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.29a8	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.29ab	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.29ad	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.29af	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.29b1	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.29b4	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.29b6	d0 28		               bne  exit      ; L0167
.29b8	a4 fb		               ldy  $fb       ; L0169
.29ba	88		               dey            ; L016b
.29bb	d0 e9		               bne  loop1     ; L016C - If not last, loop
.29bd	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.29bf	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.29c2	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.29c4	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.29c7	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.29ca	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.29cc	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.29ce	aa		               tax            ; L017F - tfr a in x
.29cf	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.29d1	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.29d4	4c c7 29	               jmp  loop3     ; L0185 - get another byte
.29d7	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.29d9	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.29dc	a0 02		               ldy  #$02      ; L018D - set Y to 2
.29de	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.29e0	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.29e3	20 97 24	               jsr  pop
.29e6	60		               rts            ; L0194
.29e7			directory
.29e7	20 77 29	               jsr  diskdir
.29ea	20 54 29	               jsr  diskerror
.29ed	60		               rts
.29ee			memtofile
.29ee	20 11 2b	               jsr  dsk_putmesg
.29f1	20 59 24	               jsr  push
.29f4	ad 3b 2b	               lda  dsk_fnlen
.29f7	ae 39 2b	               ldx  dsk_fnptr      ; load fname addr. lbyte
.29fa	ac 3a 2b	               ldy  dsk_fnptr+1
.29fd	20 bd ff	               jsr  setnam         ; call setnam
.2a00	ad 38 2b	               lda  dsk_lfsno
.2a03	ae 37 2b	               ldx  dsk_dev        ; specified device
.2a06	a0 00		skip           ldy  #$00
.2a08	20 ba ff	               jsr  setlfs         ; call setlfs
.2a0b	ad 33 2b	               lda  dsk_data_s     ; put data start lbyte in stal
.2a0e	85 c1		               sta  stal
.2a10	ad 34 2b	               lda  dsk_data_s+1   ; put data start hbyte in stal
.2a13	85 c2		               sta  stal+1
.2a15	ae 35 2b	               ldx  dsk_data_e     ; put data end lbyte in x
.2a18	ac 36 2b	               ldy  dsk_data_e+1   ; put data end hbyte in y
.2a1b	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.2a1d	20 d8 ff	               jsr  save           ; call save
.2a20	90 00		               bcc  noerror        ; if carry set, a load error has happened
.2a22	20 97 24	noerror        jsr  pop
.2a25	60		               rts
.2a26			filetomem
.2a26	20 59 24	               jsr push
.2a29	ad 3b 2b	               lda dsk_fnlen  ; Loads filename lenght.
.2a2c	ae 39 2b	               ldx dsk_fnptr  ; Points x and y to the filename
.2a2f	ac 3a 2b	               ldy dsk_fnptr+1;pointer
.2a32	20 bd ff	               jsr setnam     ; call setnam
.2a35	ad 38 2b	               lda dsk_lfsno  ; Loads Acc with the logical file number
.2a38	ae 37 2b	               ldx dsk_dev    ; default to device 8
.2a3b	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.2a3d	20 ba ff	               jsr setlfs     ; call setlfs
.2a40	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.2a42	20 d5 ff	               jsr load       ; call load
.2a45	90 03		               bcc noerror      ; if carry set, a load error has happened
.2a47	20 4e 2a	               jsr  error
.2a4a	20 97 24	noerror        jsr pop
.2a4d	60		               rts
.2a4e			error
.2a4e	20 59 24	               jsr  push
.2a51	c9 01		isit01         cmp  #$01
.2a53	d0 07		               bne  isit02
.2a55	a2 a2		               ldx  #<dsk_emsg01
.2a57	a0 2a		               ldy  #>dsk_emsg01
.2a59	4c 93 2a	               jmp  printerror
.2a5c	c9 02		isit02         cmp  #$02
.2a5e	d0 07		               bne  isit05
.2a60	a2 b6		               ldx  #<dsk_emsg02
.2a62	a0 2a		               ldy  #>dsk_emsg02
.2a64	4c 93 2a	               jmp  printerror
.2a67	c9 05		isit05         cmp  #$05
.2a69	d0 07		               bne  isit04
.2a6b	a2 c9		               ldx  #<dsk_emsg05
.2a6d	a0 2a		               ldy  #>dsk_emsg05
.2a6f	4c 93 2a	               jmp  printerror
.2a72	c9 04		isit04         cmp  #$04
.2a74	d0 07		               bne  isit1d
.2a76	a2 d9		               ldx  #<dsk_emsg04
.2a78	a0 2a		               ldy  #>dsk_emsg04
.2a7a	4c 93 2a	               jmp  printerror
.2a7d	c9 1d		isit1d         cmp  #$1d
.2a7f	d0 07		               bne  isit00
.2a81	a2 ee		               ldx  #<dsk_emsg1d
.2a83	a0 2a		               ldy  #>dsk_emsg1d
.2a85	4c 93 2a	               jmp  printerror
.2a88	c9 00		isit00         cmp  #$00
.2a8a	d0 0a		               bne  noerror
.2a8c	a2 04		               ldx  #<dsk_emsg00
.2a8e	a0 2b		               ldy  #>dsk_emsg00
.2a90	4c 93 2a	               jmp  printerror
.2a93	20 61 23	printerror     jsr  puts
.2a96	20 97 24	noerror        jsr  pop
.2a99	60		               rts
>2a9a	8d		dsk_msg1       .byte     141
>2a9b	53 55 43 43	               .null     "succes"
>2a9f	45 53 00
>2aa2	8d		dsk_emsg01     .byte     141
>2aa3	46 49 43 48	               .null     "fichier non ouvert"
>2aa7	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>2ab6	11		dsk_emsg02     .byte     17
>2ab7	45 52 52 45	               .null     "erreur d'ecriture"
>2abb	55 52 20 44 27 45 43 52 49 54 55 52 45 00
>2ac9	11		dsk_emsg05     .byte     17
>2aca	4c 45 43 54	               .null     "lecteur absent"
>2ace	45 55 52 20 41 42 53 45 4e 54 00
>2ad9	11		dsk_emsg04     .byte     17
>2ada	46 49 43 48	               .null     "fichier introuvable"
>2ade	49 45 52 20 49 4e 54 52 4f 55 56 41 42 4c 45 00
>2aee	11		dsk_emsg1d     .byte     17
>2aef	45 52 52 45	               .null     "erreur de chargement"
>2af3	55 52 20 44 45 20 43 48 41 52 47 45 4d 45 4e 54
>2b03	00
>2b04	11		dsk_emsg00     .byte     17
>2b05	42 52 45 41	               .null     "break error"
>2b09	4b 20 45 52 52 4f 52 00
.2b11			dsk_putmesg
.2b11	20 59 24	               jsr push
.2b14	a2 3c		               ldx #<dsk_msg0
.2b16	a0 2b		               ldy #>dsk_msg0
.2b18	20 61 23	               jsr puts
.2b1b	a9 20		               lda #$20
.2b1d	20 5b 23	               jsr putch
.2b20	ae 39 2b	               ldx dsk_fnptr
.2b23	ac 3a 2b	               ldy dsk_fnptr+1
.2b26	20 61 23	               jsr puts
.2b29	ad 38 2b	               lda dsk_lfsno
.2b2c	20 c3 ff	               jsr close
.2b2f	20 97 24	               jsr pop
.2b32	60		               rts
>2b33	00 00		dsk_data_s     .word     $0000     ; Data start example addresses
>2b35	00 20		dsk_data_e     .word     $2000     ; Data end
>2b37	08		dsk_dev        .byte     $08       ; Device number
>2b38	00		dsk_lfsno      .byte     $00       ; Logical file number
>2b39	00 00		dsk_fnptr      .word     $00       ; Pointer to filename
>2b3b	00		dsk_fnlen      .byte     0         ; Number of character in filename.
>2b3c	8d		dsk_msg0       .byte     141       ; Miscilinaous file message.
>2b3d	53 41 56 49	               .null     "saving "
>2b41	4e 47 20 00

;******  Return to file: charedit.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Tue Sep 16 22:59:33 2025

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20250422-224206"	version  = "20250422-224206"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande PRINT du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart     jmp   main           ; Le programme principale doit s'appeler "main"

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.0854			main
.0854	20 3f c2	               jsr  push
.0857	20 0c c1	               jsr  scrmaninit
.085a	08		               php
.085b	48		               pha
.085c	a9 08		               lda  #$08
.085e	20 d2 ff	               jsr  $ffd2
.0861	68		               pla
.0862	28		               plp
.0863	20 eb 0a	               jsr  drawcredits
.0866	20 ad c2	               jsr  pushreg
.0869	a2 f4		               ldx  #<menu_msg
.086b	a0 1d		               ldy  #>menu_msg
.086d	20 d6 c1	               jsr  putscxy
.0870	20 dc c2	               jsr  popreg
.0873	20 00 c0	               jsr  screendis
.0876	20 db 10	               jsr  copycharset
.0879	20 2c c1	               jsr  cls
.087c	20 c5 10	               jsr  setscreenptr
.087f	20 86 0b	               jsr  setdefaultchar
.0882	20 36 11	               jsr  staticscreen
.0885	20 08 10	               jsr  drawbitmap
.0888	a9 00		               lda  #$00
.088a	8d a6 09	               sta  fkeyset
.088d	20 8b 11	               jsr  drawfkeys
.0890	a9 00		               lda  #$00
.0892	20 ad c2	               jsr  pushreg
.0895	a2 51		               ldx  #<blankmsg
.0897	a0 1b		               ldy  #>blankmsg
.0899	20 d6 c1	               jsr  putscxy
.089c	a2 7d		               ldx  #<prompt_msg
.089e	a0 1b		               ldy  #>prompt_msg
.08a0	20 d6 c1	               jsr  putscxy
.08a3	20 dc c2	               jsr  popreg
.08a6	20 ed c5	               jsr  kbflushbuff
.08a9	20 0d c0	               jsr  screenena
.08ac	20 97 0d	               jsr  keyaction
.08af	20 2c c1	               jsr  cls
.08b2	20 eb 0a	               jsr  drawcredits
.08b5	20 ad c2	               jsr  pushreg
.08b8	a2 7d		               ldx  #<bye_msg
.08ba	a0 1f		               ldy  #>bye_msg
.08bc	20 d6 c1	               jsr  putscxy
.08bf	20 dc c2	               jsr  popreg
.08c2	20 ad c2	               jsr  pushreg
.08c5	a2 9f		               ldx  #<any_msg
.08c7	a0 1f		               ldy  #>any_msg
.08c9	20 d6 c1	               jsr  putscxy
.08cc	20 dc c2	               jsr  popreg
.08cf	20 e5 c5	               jsr  getkey
.08d2	20 2c c1	               jsr  cls
.08d5	20 7a c2	endmain        jsr  pop
.08d8	00		               brk
.08d9			savetofile
.08d9	20 3f c2	               jsr  pushall
.08dc	a9 b7		               lda  #<fname
.08de	8d 31 c9	               sta  dsk_fnptr
.08e1	a9 09		               lda  #>fname
.08e3	8d 32 c9	               sta  dsk_fnptr+1
.08e6	a9 0d		               lda  #(device-fname-1)
.08e8	8d 33 c9	               sta  dsk_fnlen
.08eb	ad c5 09	               lda  device
.08ee	29 0f		               and  #$0f
.08f0	8d 30 c9	               sta  dsk_lfsno
.08f3	8d 2f c9	               sta  dsk_dev
.08f6	a9 00		               lda  #<bitmapmem
.08f8	8d 2b c9	               sta  dsk_data_s
.08fb	a9 28		               lda  #>bitmapmem
.08fd	8d 2c c9	               sta  dsk_data_s+1
.0900	a9 00		               lda  #<endofaddr
.0902	8d 2d c9	               sta  dsk_data_e
.0905	a9 48		               lda  #>endofaddr
.0907	8d 2e c9	               sta  dsk_data_e+1
.090a	20 ad c2	               jsr  pushreg
.090d	a2 51		               ldx  #<blankmsg
.090f	a0 1b		               ldy  #>blankmsg
.0911	20 d6 c1	               jsr  putscxy
.0914	20 dc c2	               jsr  popreg
.0917	20 ad c2	               jsr  pushreg
.091a	a2 98		               ldx  #<wait_msg
.091c	a0 1b		               ldy  #>wait_msg
.091e	20 d6 c1	               jsr  putscxy
.0921	20 dc c2	               jsr  popreg
.0924	20 ad c2	               jsr  pushreg
.0927	a2 01		               ldx  #1
.0929	a0 04		               ldy  #4
.092b	20 63 c1	               jsr  gotoxy
.092e	20 dc c2	               jsr  popreg
.0931	20 e6 c7	               jsr  memtofile
.0934	20 7a c2	               jsr  popall
.0937	60		               rts
.0938			loadfromfile
.0938	20 3f c2	               jsr  pushall
.093b	a9 b7		               lda  #<fname
.093d	8d 31 c9	               sta  dsk_fnptr
.0940	a9 09		               lda  #>fname
.0942	8d 32 c9	               sta  dsk_fnptr+1
.0945	a9 0d		               lda  #(device-fname-1)
.0947	8d 33 c9	               sta  dsk_fnlen
.094a	ad c5 09	               lda  device
.094d	29 0f		               and  #$0f
.094f	8d 2f c9	               sta  dsk_dev
.0952	8d 30 c9	               sta  dsk_lfsno
.0955	a9 00		               lda  #<bitmapmem
.0957	8d 2b c9	               sta  dsk_data_s
.095a	a9 28		               lda  #>bitmapmem
.095c	8d 2c c9	               sta  dsk_data_s+1
.095f	a9 00		               lda  #<endofaddr
.0961	8d 2d c9	               sta  dsk_data_e
.0964	a9 48		               lda  #>endofaddr
.0966	8d 2e c9	               sta  dsk_data_e+1
.0969	20 ad c2	               jsr  pushreg
.096c	a2 51		               ldx  #<blankmsg
.096e	a0 1b		               ldy  #>blankmsg
.0970	20 d6 c1	               jsr  putscxy
.0973	20 dc c2	               jsr  popreg
.0976	20 ad c2	               jsr  pushreg
.0979	a2 98		               ldx  #<wait_msg
.097b	a0 1b		               ldy  #>wait_msg
.097d	20 d6 c1	               jsr  putscxy
.0980	20 dc c2	               jsr  popreg
.0983	20 ad c2	               jsr  pushreg
.0986	a2 01		               ldx  #1
.0988	a0 04		               ldy  #4
.098a	20 63 c1	               jsr  gotoxy
.098d	20 dc c2	               jsr  popreg
.0990	20 1e c8	               jsr  filetomem
.0993	20 7a c2	               jsr  popall
.0996	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>0997	00 d0		startaddr      .word     $d000               ; 53248
>0999	00 f0		stopaddr       .word     mstopaddr           ; 55296
>099b	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>099d	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>09a1	08 04 02 01
>09a5	00		editmode       .byte     0
>09a6	00		fkeyset        .byte     0
>09a7	00		currentchar    .byte     0
>09a8	00		currentkey     .byte     0
>09a9	00		previouskey    .byte     0
>09aa	00		bitmapoffset   .byte     0
>09ab	00 00		mapaddr        .word     0
>09ad	00 00		byteaddr       .word     0
>09af	00 00		gridaddr       .word     0
>09b1	09		cursln         .byte     grid_top
>09b2	01		curscl         .byte     grid_left
>09b3	05 1b 03 12	pfname         .byte     vvert,27,3,18
>09b7	40 30 3a	fname          .text     "@0:"
>09ba	4f 52 49 47	name           .text     "origin"
>09be	49 4e
>09c0	2e 43 48 52	ext            .null     ".chr"
>09c4	00
>09c5	08		device         .byte     8

;******  Processing file: routines.asm

.09c6			screenredraw
.09c6	20 ad c2	               jsr  pushreg
.09c9	20 00 c0	               jsr  screendis
.09cc	20 2c c1	               jsr  cls
.09cf	20 36 11	               jsr  staticscreen
.09d2	20 08 10	               jsr  drawbitmap
.09d5	20 8b 11	               jsr  drawfkeys
.09d8	20 ad c2	               jsr  pushreg
.09db	a2 0d		               ldx  #13
.09dd	a0 0c		               ldy  #12
.09df	20 63 c1	               jsr  gotoxy
.09e2	20 dc c2	               jsr  popreg
.09e5	ad a8 09	               lda  currentkey
.09e8	20 43 c1	               jsr  putch
.09eb	20 ad c2	               jsr  pushreg
.09ee	a2 51		               ldx  #<blankmsg
.09f0	a0 1b		               ldy  #>blankmsg
.09f2	20 d6 c1	               jsr  putscxy
.09f5	a2 7d		               ldx  #<prompt_msg
.09f7	a0 1b		               ldy  #>prompt_msg
.09f9	20 d6 c1	               jsr  putscxy
.09fc	20 dc c2	               jsr  popreg
.09ff	20 0d c0	               jsr  screenena
.0a02	20 dc c2	               jsr  popreg
.0a05	60		               rts
.0a06			getfname
.0a06	20 ad c2	               jsr  pushreg
.0a09	20 ad c2	               jsr  pushreg
.0a0c	a2 51		               ldx  #<blankmsg
.0a0e	a0 1b		               ldy  #>blankmsg
.0a10	20 d6 c1	               jsr  putscxy
.0a13	a2 93		               ldx  #<fname_msg
.0a15	a0 1d		               ldy  #>fname_msg
.0a17	20 d6 c1	               jsr  putscxy
.0a1a	20 dc c2	               jsr  popreg
.0a1d	a2 00		               ldx  #$00
.0a1f	8e 53 0a	               stx  count
.0a22	20 54 0a	getanother     jsr  getalphanum
.0a25	20 43 c1	               jsr  putch
.0a28	ae 53 0a	               ldx  count
.0a2b	9d ba 09	               sta  name,x
.0a2e	ee 53 0a	               inc  count
.0a31	ae 53 0a	               ldx  count
.0a34	e0 06		               cpx  #$06
.0a36	f0 03		               beq  finish
.0a38	4c 22 0a	               jmp  getanother
.0a3b			finish
.0a3b	20 ad c2	               jsr  pushreg
.0a3e	a2 51		               ldx  #<blankmsg
.0a40	a0 1b		               ldy  #>blankmsg
.0a42	20 d6 c1	               jsr  putscxy
.0a45	a2 b3		               ldx  #<pfname
.0a47	a0 09		               ldy  #>pfname
.0a49	20 d6 c1	               jsr  putscxy
.0a4c	20 dc c2	               jsr  popreg
.0a4f	20 dc c2	               jsr  popreg
.0a52	60		               rts
>0a53	00		count          .byte     0
.0a54			getalphanum
.0a54	20 ad c2	               jsr  pushreg
.0a57	20 e5 c5	getanother     jsr  getkey
.0a5a	c9 30		               cmp  #$30      ; 0
.0a5c	30 f9		               bmi  getanother
.0a5e	c9 3a		               cmp  #$3a      ; 9+1
.0a60	30 0b		               bmi  goodone
.0a62	c9 41		isitletter     cmp  #$41      ; A
.0a64	30 f1		               bmi  getanother
.0a66	c9 5b		               cmp  #$5b      ; Z+1
.0a68	30 03		               bmi  goodone
.0a6a	4c 57 0a	               jmp  getanother
.0a6d	8d 77 0a	goodone        sta  tempbyte
.0a70	20 dc c2	               jsr  popreg
.0a73	ad 77 0a	               lda  tempbyte
.0a76	60		               rts
>0a77	00		tempbyte       .byte     0
.0a78			copychar
.0a78	20 3f c2	               jsr  pushall
.0a7b	20 b4 0a	               jsr  getvalidkey
.0a7e	ad 9b 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0a81	85 fb		               sta  zpage1
.0a83	ad 9c 09	               lda  bitmapaddr+1
.0a86	85 fc		               sta  zpage1+1
.0a88	ae ea 0a	               ldx  copykey
.0a8b	bd 4c c6	               lda  asciitorom,x
.0a8e	aa		               tax
.0a8f	e0 00		               cpx  #$00
.0a91	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0a93	a9 08		addagain       lda  #$08
.0a95	20 53 13	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0a98	ca		               dex                 ; pour chaque caracteres
.0a99	d0 f8		               bne  addagain
.0a9b	ad ab 09	no_offset      lda  mapaddr        ; le caractere actuel
.0a9e	85 fd		               sta  zpage2         ;
.0aa0	ad ac 09	               lda  mapaddr+1      ;
.0aa3	85 fe		               sta  zpage2+1       ;
.0aa5	a0 00		               ldy  #$00
.0aa7	b1 fb		nextbyte       lda  (zpage1),y
.0aa9	91 fd		               sta  (zpage2),y
.0aab	c8		               iny
.0aac	c0 08		               cpy  #$08
.0aae	d0 f7		               bne  nextbyte
.0ab0	20 7a c2	out            jsr  popall
.0ab3	60		               rts
.0ab4			getvalidkey
.0ab4	20 ad c2	               jsr  pushreg
.0ab7	20 ad c2	               jsr  pushreg
.0aba	a2 51		               ldx  #<blankmsg
.0abc	a0 1b		               ldy  #>blankmsg
.0abe	20 d6 c1	               jsr  putscxy
.0ac1	a2 6a		               ldx  #<copychar_msg
.0ac3	a0 1d		               ldy  #>copychar_msg
.0ac5	20 d6 c1	               jsr  putscxy
.0ac8	20 dc c2	               jsr  popreg
.0acb	20 e5 c5	getgoodkey     jsr  getkey
.0ace	8d ea 0a	               sta  copykey
.0ad1	aa		               tax
.0ad2	bc 4c c6	               ldy  asciitorom,x
.0ad5	c4 00		               cpy  $00
.0ad7	d0 0a		               bne  goodone
.0ad9	ae ea 0a	               ldx  copykey
.0adc	e0 40		               cpx  #$40
.0ade	f0 03		               beq  goodone
.0ae0	4c cb 0a	               jmp  getgoodkey
.0ae3	20 43 c1	goodone        jsr  putch
.0ae6	20 dc c2	               jsr  popreg
.0ae9	60		               rts
>0aea	00		copykey        .byte 0
.0aeb			drawcredits
.0aeb	20 ad c2	               jsr  pushreg
.0aee	20 2c c1	               jsr  cls
.0af1	20 ad c2	               jsr  pushreg
.0af4	a2 09		               ldx  #<whoami0
.0af6	a0 1e		               ldy  #>whoami0
.0af8	20 d6 c1	               jsr  putscxy
.0afb	20 dc c2	               jsr  popreg
.0afe	20 ad c2	               jsr  pushreg
.0b01	a2 2e		               ldx  #<whoami1
.0b03	a0 1e		               ldy  #>whoami1
.0b05	20 d6 c1	               jsr  putscxy
.0b08	20 dc c2	               jsr  popreg
.0b0b	20 ad c2	               jsr  pushreg
.0b0e	a2 55		               ldx  #<whoami2
.0b10	a0 1e		               ldy  #>whoami2
.0b12	20 d6 c1	               jsr  putscxy
.0b15	20 dc c2	               jsr  popreg
.0b18	20 ad c2	               jsr  pushreg
.0b1b	a2 7a		               ldx  #<whoami3
.0b1d	a0 1e		               ldy  #>whoami3
.0b1f	20 d6 c1	               jsr  putscxy
.0b22	20 dc c2	               jsr  popreg
.0b25	20 ad c2	               jsr  pushreg
.0b28	a2 9f		               ldx  #<whoami4
.0b2a	a0 1e		               ldy  #>whoami4
.0b2c	20 d6 c1	               jsr  putscxy
.0b2f	20 dc c2	               jsr  popreg
.0b32	20 ad c2	               jsr  pushreg
.0b35	a2 c4		               ldx  #<whoami5
.0b37	a0 1e		               ldy  #>whoami5
.0b39	20 d6 c1	               jsr  putscxy
.0b3c	20 dc c2	               jsr  popreg
.0b3f	20 ad c2	               jsr  pushreg
.0b42	a2 e9		               ldx  #<whoami6
.0b44	a0 1e		               ldy  #>whoami6
.0b46	20 d6 c1	               jsr  putscxy
.0b49	20 dc c2	               jsr  popreg
.0b4c	20 ad c2	               jsr  pushreg
.0b4f	a2 0e		               ldx  #<whoami7
.0b51	a0 1f		               ldy  #>whoami7
.0b53	20 d6 c1	               jsr  putscxy
.0b56	20 dc c2	               jsr  popreg
.0b59	20 ad c2	               jsr  pushreg
.0b5c	a2 33		               ldx  #<whoami8
.0b5e	a0 1f		               ldy  #>whoami8
.0b60	20 d6 c1	               jsr  putscxy
.0b63	20 dc c2	               jsr  popreg
.0b66	20 ad c2	               jsr  pushreg
.0b69	a2 58		               ldx  #<whoami9
.0b6b	a0 1f		               ldy  #>whoami9
.0b6d	20 d6 c1	               jsr  putscxy
.0b70	20 dc c2	               jsr  popreg
.0b73	20 71 13	               jsr  delay
.0b76	20 71 13	               jsr  delay
.0b79	20 71 13	               jsr  delay
.0b7c	20 71 13	               jsr  delay
.0b7f	20 71 13	               jsr  delay
.0b82	20 dc c2	               jsr  popreg
.0b85	60		               rts
.0b86			setdefaultchar
.0b86	20 ad c2	               jsr  pushreg
.0b89	a9 40		               lda  #$40
.0b8b	8d a8 09	               sta  currentkey
.0b8e	aa		               tax
.0b8f	bc 4c c6	               ldy  asciitorom,x
.0b92	8c aa 09	               sty  bitmapoffset
.0b95	20 50 0c	               jsr  drawkeyval
.0b98	20 08 10	               jsr  drawbitmap
.0b9b	20 ad c2	               jsr  pushreg
.0b9e	a2 0d		               ldx  #13
.0ba0	a0 0c		               ldy  #12
.0ba2	20 63 c1	               jsr  gotoxy
.0ba5	20 dc c2	               jsr  popreg
.0ba8	20 43 c1	               jsr  putch
.0bab	20 ad c2	               jsr  pushreg
.0bae	a2 11		               ldx  #17
.0bb0	a0 05		               ldy  #5
.0bb2	20 63 c1	               jsr  gotoxy
.0bb5	20 dc c2	               jsr  popreg
.0bb8	20 7d c5	               jsr  atodec
.0bbb	20 ad c2	               jsr  pushreg
.0bbe	a2 7a		               ldx  #<adec
.0bc0	a0 c4		               ldy  #>adec
.0bc2	20 49 c1	               jsr  puts
.0bc5	20 dc c2	               jsr  popreg
.0bc8	20 dc c2	               jsr  popreg
.0bcb	60		               rts
.0bcc			resetmenuacolor
.0bcc	20 ad c2	               jsr  pushreg
.0bcf	a9 03		               lda  #menu1col1
.0bd1	8d f8 1f	               sta  f1abutton
.0bd4	8d 2e 20	               sta  f3abutton
.0bd7	8d 64 20	               sta  f5abutton
.0bda	8d 9a 20	               sta  f7abutton
.0bdd	a9 0e		               lda  #menu1col2
.0bdf	8d 13 20	               sta  f2abutton
.0be2	8d 49 20	               sta  f4abutton
.0be5	8d 7f 20	               sta  f6abutton
.0be8	8d b5 20	               sta  f8abutton
.0beb	20 dc c2	               jsr  popreg
.0bee	60		               rts
.0bef			resetmenubcolor
.0bef	20 ad c2	               jsr  pushreg
.0bf2	a9 0f		               lda  #menu2col1
.0bf4	8d d0 20	               sta  f1bbutton
.0bf7	8d 06 21	               sta  f3bbutton
.0bfa	8d 3c 21	               sta  f5bbutton
.0bfd	8d 72 21	               sta  f7bbutton
.0c00	a9 0f		               lda  #menu2col1
.0c02	8d eb 20	               sta  f2bbutton
.0c05	8d 21 21	               sta  f4bbutton
.0c08	8d 57 21	               sta  f6bbutton
.0c0b	8d 8d 21	               sta  f8bbutton
.0c0e	20 dc c2	               jsr  popreg
.0c11	60		               rts
.0c12			setmenuacolor
.0c12	20 ad c2	               jsr  pushreg
.0c15	8d f8 1f	               sta  f1abutton
.0c18	8d 13 20	               sta  f2abutton
.0c1b	8d 2e 20	               sta  f3abutton
.0c1e	8d 49 20	               sta  f4abutton
.0c21	8d 64 20	               sta  f5abutton
.0c24	8d 7f 20	               sta  f6abutton
.0c27	8d 9a 20	               sta  f7abutton
.0c2a	8d b5 20	               sta  f8abutton
.0c2d	20 dc c2	               jsr  popreg
.0c30	60		               rts
.0c31			setmenubcolor
.0c31	20 ad c2	               jsr  pushreg
.0c34	8d d0 20	               sta  f1bbutton
.0c37	8d eb 20	               sta  f2bbutton
.0c3a	8d 06 21	               sta  f3bbutton
.0c3d	8d 21 21	               sta  f4bbutton
.0c40	8d 3c 21	               sta  f5bbutton
.0c43	8d 57 21	               sta  f6bbutton
.0c46	8d 72 21	               sta  f7bbutton
.0c49	8d 8d 21	               sta  f8bbutton
.0c4c	20 dc c2	               jsr  popreg
.0c4f	60		               rts
.0c50			drawkeyval
.0c50	20 ad c2	               jsr  pushreg
.0c53	20 ad c2	               jsr  pushreg
.0c56	a2 01		               ldx  #1
.0c58	a0 13		               ldy  #19
.0c5a	20 63 c1	               jsr  gotoxy
.0c5d	20 dc c2	               jsr  popreg
.0c60	ad a8 09	               lda  currentkey
.0c63	20 43 c1	               jsr  putch
.0c66	48		               pha
.0c67	a9 3d		               lda  #'='
.0c69	20 43 c1	               jsr  putch
.0c6c	a9 25		               lda  #'%'
.0c6e	20 43 c1	               jsr  putch
.0c71	68		               pla
.0c72	20 43 c5	               jsr  putabin
.0c75	20 ad c2	               jsr  pushreg
.0c78	a2 01		               ldx  #1
.0c7a	a0 14		               ldy  #20
.0c7c	20 63 c1	               jsr  gotoxy
.0c7f	20 dc c2	               jsr  popreg
.0c82	20 ad c2	               jsr  pushreg
.0c85	a2 51		               ldx  #<txt1
.0c87	a0 0d		               ldy  #>txt1
.0c89	20 49 c1	               jsr  puts
.0c8c	20 dc c2	               jsr  popreg
.0c8f	a9 24		               lda  #'$'
.0c91	20 43 c1	               jsr  putch
.0c94	ad a8 09	               lda  currentkey
.0c97	20 a9 c4	               jsr  putahex
.0c9a	20 ad c2	               jsr  pushreg
.0c9d	a2 01		               ldx  #1
.0c9f	a0 15		               ldy  #21
.0ca1	20 63 c1	               jsr  gotoxy
.0ca4	20 dc c2	               jsr  popreg
.0ca7	20 ad c2	               jsr  pushreg
.0caa	a2 5c		               ldx  #<txt2
.0cac	a0 0d		               ldy  #>txt2
.0cae	20 49 c1	               jsr  puts
.0cb1	20 dc c2	               jsr  popreg
.0cb4	a9 24		               lda  #'$'
.0cb6	20 43 c1	               jsr  putch
.0cb9	ad 9c 09	               lda  bitmapaddr+1
.0cbc	20 a9 c4	               jsr  putahex
.0cbf	ad 9b 09	               lda  bitmapaddr
.0cc2	20 a9 c4	               jsr  putahex
.0cc5	20 ad c2	               jsr  pushreg
.0cc8	a2 01		               ldx  #1
.0cca	a0 16		               ldy  #22
.0ccc	20 63 c1	               jsr  gotoxy
.0ccf	20 dc c2	               jsr  popreg
.0cd2	20 ad c2	               jsr  pushreg
.0cd5	a2 67		               ldx  #<txt3
.0cd7	a0 0d		               ldy  #>txt3
.0cd9	20 49 c1	               jsr  puts
.0cdc	20 dc c2	               jsr  popreg
.0cdf	a9 24		               lda  #'$'
.0ce1	20 43 c1	               jsr  putch
.0ce4	ad aa 09	               lda  bitmapoffset
.0ce7	20 a9 c4	               jsr  putahex
.0cea	20 ad c2	               jsr  pushreg
.0ced	a2 01		               ldx  #1
.0cef	a0 17		               ldy  #23
.0cf1	20 63 c1	               jsr  gotoxy
.0cf4	20 dc c2	               jsr  popreg
.0cf7	20 ad c2	               jsr  pushreg
.0cfa	a2 74		               ldx  #<txt4
.0cfc	a0 0d		               ldy  #>txt4
.0cfe	20 49 c1	               jsr  puts
.0d01	20 dc c2	               jsr  popreg
.0d04	a9 24		               lda  #'$'
.0d06	20 43 c1	               jsr  putch
.0d09	ad ac 09	               lda  mapaddr+1
.0d0c	20 a9 c4	               jsr  putahex
.0d0f	ad ab 09	               lda  mapaddr
.0d12	20 a9 c4	               jsr  putahex
.0d15	20 ad c2	               jsr  pushreg
.0d18	a2 01		               ldx  #1
.0d1a	a0 18		               ldy  #24
.0d1c	20 63 c1	               jsr  gotoxy
.0d1f	20 dc c2	               jsr  popreg
.0d22	20 ad c2	               jsr  pushreg
.0d25	a2 7f		               ldx  #<txt5
.0d27	a0 0d		               ldy  #>txt5
.0d29	20 49 c1	               jsr  puts
.0d2c	20 dc c2	               jsr  popreg
.0d2f	ad b2 09	               lda  curscl
.0d32	20 a9 c4	               jsr  putahex
.0d35	a9 da		               lda  #$da
.0d37	20 43 c1	               jsr  putch
.0d3a	ad b1 09	               lda  cursln
.0d3d	20 a9 c4	               jsr  putahex
.0d40	20 dc c2	               jsr  popreg
.0d43	60		               rts
>0d44	50 45 54 53	txt0           .null     "petscii :   "
>0d48	43 49 49 20 3a 20 20 20 00
>0d51	4b 45 59 20	txt1           .null     "key code: "
>0d55	43 4f 44 45 3a 20 00
>0d5c	42 49 54 4d	txt2           .null     "bitmap..: "
>0d60	41 50 2e 2e 3a 20 00
>0d67	4f 46 46 53	txt3           .null     "offset..:   "
>0d6b	45 54 2e 2e 3a 20 20 20 00
>0d74	4d 41 50 41	txt4           .null     "mapaddr.: "
>0d78	44 44 52 2e 3a 20 00
>0d7f	43 55 52 53	txt5           .null     "cursval.: "
>0d83	56 41 4c 2e 3a 20 00
>0d8a	53 54 41 43	txt6           .null     "stack......:"
>0d8e	4b 2e 2e 2e 2e 2e 2e 3a 00
.0d97			keyaction
.0d97	20 ad c2	               jsr  pushreg
.0d9a	20 e5 c5	keyloop        jsr  getkey
.0d9d	c9 85		f1             cmp  #key_f1
.0d9f	d0 03		               bne  f2
.0da1	4c 1c 0e	               jmp  dof1
.0da4	c9 89		f2             cmp  #key_f2
.0da6	d0 03		               bne  f3
.0da8	4c 22 0e	               jmp  dof2
.0dab	c9 86		f3             cmp  #key_f3
.0dad	d0 03		               bne  f4
.0daf	4c 28 0e	               jmp  dof3
.0db2	c9 8a		f4             cmp  #key_f4
.0db4	d0 03		               bne  f5
.0db6	4c 2e 0e	               jmp  dof4
.0db9	c9 87		f5             cmp  #key_f5
.0dbb	d0 03		               bne  f6
.0dbd	4c 34 0e	               jmp  dof5
.0dc0	c9 8b		f6             cmp  #key_f6
.0dc2	d0 03		               bne  f7
.0dc4	4c 3a 0e	               jmp  dof6
.0dc7	c9 88		f7             cmp  #key_f7
.0dc9	d0 03		               bne  f8
.0dcb	4c 40 0e	               jmp  dof7
.0dce	c9 8c		f8             cmp  #key_f8
.0dd0	d0 03		               bne  ctrlx
.0dd2	4c 46 0e	               jmp  dof8
.0dd5	c9 18		ctrlx          cmp  #ctrl_x
.0dd7	d0 03		               bne  ctrlr
.0dd9	4c 52 0e	               jmp  doquit
.0ddc	c9 12		ctrlr          cmp  #ctrl_r
.0dde	d0 03		               bne  ishex14
.0de0	4c 4c 0e	               jmp  doredraw
.0de3	c9 14		ishex14        cmp  #$14
.0de5	d0 03		               bne  ishex12
.0de7	4c 9a 0d	               jmp  keyloop
.0dea	c9 12		ishex12        cmp  #$12
.0dec	d0 03		               bne  reste
.0dee	4c 9a 0d	               jmp  keyloop
.0df1			reste
.0df1	20 ad c2	               jsr  pushreg
.0df4	a2 0d		               ldx  #13
.0df6	a0 0c		               ldy  #12
.0df8	20 63 c1	               jsr  gotoxy
.0dfb	20 dc c2	               jsr  popreg
.0dfe	20 43 c1	               jsr  putch
.0e01	48		               pha                 ; remembers
.0e02	ad a8 09	               lda  currentkey     ; the
.0e05	8d a9 09	               sta  previouskey    ; previous key
.0e08	68		               pla                 ;
.0e09	8d a8 09	               sta  currentkey     ; an store current
.0e0c	aa		               tax
.0e0d	bc 4c c6	               ldy  asciitorom,x
.0e10	8c aa 09	               sty  bitmapoffset
.0e13	20 50 0c	               jsr  drawkeyval
.0e16	20 08 10	               jsr  drawbitmap
.0e19	4c 9a 0d	               jmp  keyloop
.0e1c	20 87 13	dof1           jsr  f1action  ;edit/reverse
.0e1f	4c 9a 0d	               jmp  keyloop
.0e22	20 a8 14	dof2           jsr  f2action  ;save/flip vert
.0e25	4c 9a 0d	               jmp  keyloop
.0e28	20 5c 15	dof3           jsr  f3action  ;load/flip horz
.0e2b	4c 9a 0d	               jmp  keyloop
.0e2e	20 39 16	dof4           jsr  f4action  ;copy/scroll r
.0e31	4c 9a 0d	               jmp  keyloop
.0e34	20 19 17	dof5           jsr  f5action  ;clear/scroll l
.0e37	4c 9a 0d	               jmp  keyloop
.0e3a	20 cd 17	dof6           jsr  f6action  ;fill;/scroll up
.0e3d	4c 9a 0d	               jmp  keyloop
.0e40	20 81 18	dof7           jsr  f7action  ;clear;/scroll down
.0e43	4c 9a 0d	               jmp  keyloop
.0e46	20 3a 19	dof8           jsr  f8action  ; function
.0e49	4c 9a 0d	               jmp  keyloop
.0e4c	20 c6 09	doredraw       jsr  screenredraw
.0e4f	4c 9a 0d	               jmp  keyloop
.0e52	20 dc c2	doquit         jsr  popreg
.0e55	60		               rts
.0e56			editor
.0e56	20 ad c2	               jsr  pushreg
.0e59	20 ad c2	               jsr  pushreg
.0e5c	a2 51		               ldx  #<blankmsg
.0e5e	a0 1b		               ldy  #>blankmsg
.0e60	20 d6 c1	               jsr  putscxy
.0e63	a2 f4		               ldx  #<exit_msg
.0e65	a0 1d		               ldy  #>exit_msg
.0e67	20 d6 c1	               jsr  putscxy
.0e6a	20 dc c2	               jsr  popreg
.0e6d	20 ad c2	               jsr  pushreg
.0e70	a2 51		               ldx  #<blankmsg
.0e72	a0 1b		               ldy  #>blankmsg
.0e74	20 d6 c1	               jsr  putscxy
.0e77	a2 b4		               ldx  #<edit_msg
.0e79	a0 1b		               ldy  #>edit_msg
.0e7b	20 d6 c1	               jsr  putscxy
.0e7e	20 dc c2	               jsr  popreg
.0e81	20 c4 0f	               jsr  setcurs
.0e84	ad a8 09	               lda  currentkey
.0e87	20 ad c2	               jsr  pushreg
.0e8a	a2 11		               ldx  #17
.0e8c	a0 05		               ldy  #5
.0e8e	20 63 c1	               jsr  gotoxy
.0e91	20 dc c2	               jsr  popreg
.0e94	20 7d c5	               jsr  atodec
.0e97	20 ad c2	               jsr  pushreg
.0e9a	a2 7a		               ldx  #<adec
.0e9c	a0 c4		               ldy  #>adec
.0e9e	20 49 c1	               jsr  puts
.0ea1	20 dc c2	               jsr  popreg
.0ea4	20 08 10	               jsr  drawbitmap
.0ea7	20 e5 c5	ed_loop        jsr  getkey
.0eaa	c9 85		f1             cmp  #f1key
.0eac	d0 03		               bne  cu
.0eae	4c 96 0f	               jmp  do_ctrlx
.0eb1	c9 91		cu             cmp  #cursu
.0eb3	d0 03		               bne  cd
.0eb5	4c 41 0f	               jmp  do_up
.0eb8	c9 11		cd             cmp  #cursd
.0eba	d0 03		               bne  cl
.0ebc	4c 54 0f	               jmp  do_down
.0ebf	c9 9d		cl             cmp  #cursl
.0ec1	d0 03		               bne  cr
.0ec3	4c 67 0f	               jmp  do_left
.0ec6	c9 1d		cr             cmp  #cursr
.0ec8	d0 03		               bne  cx
.0eca	4c 7a 0f	               jmp  do_right
.0ecd	c9 18		cx             cmp  #ctrl_x
.0ecf	d0 03		               bne  sp
.0ed1	4c 96 0f	               jmp  do_ctrlx
.0ed4	c9 20		sp             cmp  #$20
.0ed6	d0 03		               bne  ishex14
.0ed8	4c 8d 0f	               jmp  do_swap
.0edb	c9 14		ishex14        cmp  #$14
.0edd	d0 03		               bne  ishex12
.0edf	4c 8d 0f	               jmp  do_swap
.0ee2	c9 12		ishex12        cmp  #$12
.0ee4	d0 03		               bne  rest
.0ee6	4c 8d 0f	               jmp  do_swap
.0ee9			rest
.0ee9	20 ad c2	               jsr  pushreg
.0eec	a2 0d		               ldx  #13
.0eee	a0 0c		               ldy  #12
.0ef0	20 63 c1	               jsr  gotoxy
.0ef3	20 dc c2	               jsr  popreg
.0ef6	20 43 c1	               jsr  putch
.0ef9	48		               pha
.0efa	ad a8 09	               lda  currentkey
.0efd	8d a9 09	               sta  previouskey
.0f00	68		               pla
.0f01	8d a8 09	               sta  currentkey
.0f04	aa		               tax
.0f05	bc 4c c6	               ldy  asciitorom,x
.0f08	8c aa 09	               sty  bitmapoffset
.0f0b	20 50 0c	               jsr  drawkeyval
.0f0e	20 08 10	               jsr  drawbitmap
.0f11	20 ad c2	               jsr  pushreg
.0f14	a2 0d		               ldx  #13
.0f16	a0 0c		               ldy  #12
.0f18	20 63 c1	               jsr  gotoxy
.0f1b	20 dc c2	               jsr  popreg
.0f1e	20 43 c1	               jsr  putch
.0f21	20 ad c2	               jsr  pushreg
.0f24	a2 11		               ldx  #17
.0f26	a0 05		               ldy  #5
.0f28	20 63 c1	               jsr  gotoxy
.0f2b	20 dc c2	               jsr  popreg
.0f2e	20 7d c5	               jsr  atodec
.0f31	20 ad c2	               jsr  pushreg
.0f34	a2 7a		               ldx  #<adec
.0f36	a0 c4		               ldy  #>adec
.0f38	20 49 c1	               jsr  puts
.0f3b	20 dc c2	               jsr  popreg
.0f3e	4c 93 0f	               jmp  totop
.0f41	ad b1 09	do_up          lda  cursln
.0f44	c9 09		               cmp  #grid_top
.0f46	f0 4b		               beq  totop
.0f48	20 e6 0f	               jsr  clrcurs
.0f4b	ce b1 09	               dec  cursln
.0f4e	20 c4 0f	               jsr  setcurs
.0f51	4c 93 0f	               jmp  totop
.0f54	ad b1 09	do_down        lda  cursln
.0f57	c9 10		               cmp  #grid_bot
.0f59	f0 38		               beq  totop
.0f5b	20 e6 0f	               jsr  clrcurs
.0f5e	ee b1 09	               inc  cursln
.0f61	20 c4 0f	               jsr  setcurs
.0f64	4c 93 0f	               jmp  totop
.0f67	ad b2 09	do_left        lda  curscl
.0f6a	c9 01		               cmp  #grid_left
.0f6c	f0 25		               beq  totop
.0f6e	20 e6 0f	               jsr  clrcurs
.0f71	ce b2 09	               dec  curscl
.0f74	20 c4 0f	               jsr  setcurs
.0f77	4c 93 0f	               jmp  totop
.0f7a	ad b2 09	do_right       lda  curscl
.0f7d	c9 08		               cmp  #grid_right
.0f7f	f0 12		               beq  totop
.0f81	20 e6 0f	               jsr  clrcurs
.0f84	ee b2 09	               inc  curscl
.0f87	20 c4 0f	               jsr  setcurs
.0f8a	4c 93 0f	               jmp  totop
.0f8d	20 9d 0f	do_swap        jsr  do_eor
.0f90	20 08 10	               jsr  drawbitmap
.0f93	4c a7 0e	totop          jmp  ed_loop
.0f96	20 e6 0f	do_ctrlx       jsr  clrcurs
.0f99	20 dc c2	               jsr  popreg
.0f9c	60		               rts
.0f9d			do_eor
.0f9d	20 ad c2	               jsr  pushreg
.0fa0	ad ab 09	               lda  mapaddr
.0fa3	85 fd		               sta  zpage2
.0fa5	ad ac 09	               lda  mapaddr+1
.0fa8	85 fe		               sta  zpage2+1
.0faa	ae b1 09	               ldx  cursln     ; calcul de
.0fad	ca		               dex            ; l'offset de
.0fae	8a		               txa            ; la
.0faf	29 f7		               and  #$f7      ; ligne
.0fb1	a8		               tay
.0fb2	ae b2 09	               ldx  curscl
.0fb5	ca		               dex
.0fb6	bd 9d 09	               lda  eorval,x
.0fb9	51 fd		               eor  (zpage2),y
.0fbb	20 50 0c	               jsr  drawkeyval
.0fbe	91 fd		               sta  (zpage2),y
.0fc0	20 dc c2	               jsr  popreg
.0fc3	60		               rts
.0fc4			setcurs
.0fc4	20 ad c2	               jsr  pushreg
.0fc7	a2 01		               ldx  #grid_left
.0fc9	ac b1 09	               ldy  cursln
.0fcc	20 63 c1	               jsr  gotoxy
.0fcf	a9 da		               lda  #$da
.0fd1	20 43 c1	               jsr  putch
.0fd4	ae b2 09	               ldx  curscl
.0fd7	e8		               inx
.0fd8	a0 08		               ldy  #grid_top-1
.0fda	20 63 c1	               jsr  gotoxy
.0fdd	a9 da		               lda  #$da
.0fdf	20 43 c1	               jsr  putch
.0fe2	20 dc c2	               jsr  popreg
.0fe5	60		               rts
.0fe6			clrcurs
.0fe6	20 ad c2	               jsr  pushreg
.0fe9	a2 01		               ldx  #grid_left
.0feb	ac b1 09	               ldy  cursln
.0fee	20 63 c1	               jsr  gotoxy
.0ff1	a9 20		               lda  #$20
.0ff3	20 43 c1	               jsr  putch
.0ff6	ae b2 09	               ldx  curscl
.0ff9	e8		               inx
.0ffa	a0 08		               ldy  #grid_top-1
.0ffc	20 63 c1	               jsr  gotoxy
.0fff	a9 20		               lda  #$20
.1001	20 43 c1	               jsr  putch
.1004	20 dc c2	               jsr  popreg
.1007	60		               rts
.1008			drawbitmap
.1008	20 3f c2	               jsr  pushall
.100b	20 6f 10	               jsr  calcmapaddr
.100e	ad ab 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.1011	85 fb		               sta  zpage1
.1013	ad ac 09	               lda  mapaddr+1
.1016	85 fc		               sta  zpage1+1
.1018	a0 00		drawchar       ldy  #$00
.101a	a2 09		               ldx  #grid_top      ;on replace la ...
.101c	8e 25 10	               stx  isy+1          ;ligne de départ
.101f	20 3f c2	nextline       jsr  push
.1022	a2 02		               ldx  #grid_left+1        ; la colonne
.1024	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.1026	20 63 c1	               jsr  gotoxy
.1029	20 7a c2	               jsr  pop
.102c	b1 fb		               lda  (zpage1),y     ; on li une ligne
.102e	20 1a c5	               jsr  atobin
.1031	20 9e 10	               jsr  abintograph
.1034	20 ad c2	               jsr  pushreg
.1037	a2 71		               ldx  #<abin
.1039	a0 c4		               ldy  #>abin
.103b	20 49 c1	               jsr  puts
.103e	20 dc c2	               jsr  popreg
.1041	ee 25 10	               inc  isy+1
.1044	c8		               iny
.1045	c0 08		               cpy  #$08
.1047	30 d6		               bmi  nextline
.1049	20 50 10	               jsr  highlight
.104c	20 7a c2	               jsr  popall
.104f	60		               rts
.1050			highlight
.1050	20 ad c2	               jsr  pushreg
.1053	ae a9 09	               ldx  previouskey
.1056	bd 4c c6	               lda  asciitorom,x
.1059	aa		               tax
.105a	a9 0f		               lda  #charscolor
.105c	9d 00 d8	               sta  colorram,x
.105f	ae a8 09	               ldx  currentkey
.1062	bd 4c c6	               lda  asciitorom,x
.1065	aa		               tax
.1066	a9 01		               lda  #charcolor
.1068	9d 00 d8	               sta  colorram,x
.106b	20 dc c2	               jsr  popreg
.106e	60		               rts
.106f			calcmapaddr
.106f	20 3f c2	               jsr  pushall
.1072	ad 9b 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.1075	85 fb		               sta  zpage1
.1077	ad 9c 09	               lda  bitmapaddr+1
.107a	85 fc		               sta  zpage1+1
.107c	ae aa 09	               ldx  bitmapoffset
.107f	e0 00		               cpx  #$00
.1081	f0 08		               beq  thesame         ; sommes nous déja à 0
.1083	a9 08		addagain       lda  #$08
.1085	20 53 13	               jsr  zp1addnum      ; on augmente de 8 byte ...
.1088	ca		               dex                 ; pour chaque caracteres
.1089	d0 f8		               bne  addagain
.108b	48		thesame        pha
.108c	a5 fb		               lda  zpage1
.108e	8d ab 09	               sta  mapaddr
.1091	a5 fc		               lda  zpage1+1
.1093	8d ac 09	               sta  mapaddr+1
.1096	68		               pla
.1097	20 50 0c	               jsr  drawkeyval
.109a	20 7a c2	out            jsr  popall
.109d	60		               rts
.109e			abintograph
.109e	20 3f c2	               jsr  pushall
.10a1	a9 71		               lda  #<abin
.10a3	85 fb		               sta  zpage1
.10a5	a9 c4		               lda  #>abin+1
.10a7	85 fc		               sta  zpage1+1
.10a9	a0 00		               ldy  #$00
.10ab	b1 fb		nextbit        lda  (zpage1),y
.10ad	c9 30		               cmp  #$30
.10af	f0 07		               beq  itszero
.10b1	a9 d1		itsone         lda  #$d1
.10b3	91 fb		               sta  (zpage1),y
.10b5	4c bc 10	               jmp  next
.10b8	a9 2e		itszero        lda  #$2e
.10ba	91 fb		               sta  (zpage1),y
.10bc	c8		next           iny
.10bd	c0 08		               cpy  #$08
.10bf	30 ea		               bmi  nextbit
.10c1	20 7a c2	               jsr  popall
.10c4	60		               rts
.10c5			setscreenptr
.10c5	20 ad c2	               jsr  pushreg
.10c8	a9 08		               lda  #$08      ; basic commande to disable ...
.10ca	20 d2 ff	               jsr  chrout    ; ... character set change.
.10cd	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.10d0	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.10d2	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.10d4	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.10d7	20 dc c2	               jsr  popreg
.10da	60		               rts
.10db			copycharset
.10db	20 ad c2	               jsr  pushreg
.10de	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.10e1	29 fe		               and  #%11111110     ;254
.10e3	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.10e6	a5 01		               lda  u6510map       ;$01
.10e8	29 fb		               and  #%11111011     ;251
.10ea	85 01		               sta  u6510map       ;$01
.10ec	20 01 11	               jsr  memcopy
.10ef	a5 01		               lda  u6510map       ;$01
.10f1	09 04		               ora  #%00000100
.10f3	85 01		               sta  u6510map       ;$01
.10f5	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.10f8	09 01		               ora  #%00000001     ;254
.10fa	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.10fd	20 dc c2	               jsr  popreg
.1100	60		               rts
.1101			memcopy
.1101	20 3f c2	               jsr  pushall
.1104	ad 97 09	               lda  startaddr
.1107	85 fb		               sta  zpage1
.1109	ad 98 09	               lda  startaddr+1
.110c	85 fc		               sta  zpage1+1
.110e	ad 9b 09	               lda  bitmapaddr
.1111	85 fd		               sta  zpage2
.1113	ad 9c 09	               lda  bitmapaddr+1
.1116	85 fe		               sta  zpage2+1
.1118	a0 00		               ldy  #$00
.111a	b1 fb		onemore        lda  (zpage1),y
.111c	91 fd		               sta  (zpage2),y
.111e	20 94 c3	               jsr  inczp1
.1121	20 b2 c3	               jsr  inczp2
.1124	a5 fc		               lda  zpage1+1
.1126	cd 9a 09	               cmp  stopaddr+1
.1129	d0 ef		               bne  onemore
.112b	a5 fb		               lda  zpage1
.112d	cd 99 09	               cmp  stopaddr
.1130	d0 e8		               bne  onemore
.1132	20 7a c2	               jsr  popall
.1135	60		               rts
.1136			staticscreen
.1136	48		               pha
.1137	a9 0b		               lda  #bordure
.1139	8d 20 d0	               sta  $d020
.113c	68		               pla
.113d	48		               pha
.113e	a9 00		               lda  #fond
.1140	8d 21 d0	               sta  $d021
.1143	68		               pla
.1144	20 aa 12	               jsr  drawlines
.1147	20 86 12	               jsr  drawallchars
.114a	20 f2 12	               jsr  drawgrid
.114d	20 8b 11	               jsr  drawfkeys
.1150	a9 0a		               lda  #vrose
.1152	8d dd 1d	               sta  redraw_msg
.1155	20 ad c2	               jsr  pushreg
.1158	a2 51		               ldx  #<blankmsg
.115a	a0 1b		               ldy  #>blankmsg
.115c	20 d6 c1	               jsr  putscxy
.115f	a2 dd		               ldx  #<redraw_msg
.1161	a0 1d		               ldy  #>redraw_msg
.1163	20 d6 c1	               jsr  putscxy
.1166	20 dc c2	               jsr  popreg
.1169	20 ad c2	               jsr  pushreg
.116c	a2 51		               ldx  #<blankmsg
.116e	a0 1b		               ldy  #>blankmsg
.1170	20 d6 c1	               jsr  putscxy
.1173	a2 c8		               ldx  #<quit_msg
.1175	a0 1d		               ldy  #>quit_msg
.1177	20 d6 c1	               jsr  putscxy
.117a	20 dc c2	               jsr  popreg
.117d	20 ad c2	               jsr  pushreg
.1180	a2 00		               ldx  #0
.1182	a0 07		               ldy  #7
.1184	20 63 c1	               jsr  gotoxy
.1187	20 dc c2	               jsr  popreg
.118a	60		               rts
.118b			drawfkeys
.118b	20 ad c2	               jsr  pushreg
.118e	ad a6 09	               lda  fkeyset
.1191	c9 00		               cmp  #$0
.1193	d0 78		               bne  secondks
.1195	20 ad c2	               jsr  pushreg
.1198	a2 c2		               ldx  #<titremenu1
.119a	a0 1f		               ldy  #>titremenu1
.119c	20 d6 c1	               jsr  putscxy
.119f	20 dc c2	               jsr  popreg
.11a2	20 ad c2	               jsr  pushreg
.11a5	a2 f8		               ldx  #<f1abutton
.11a7	a0 1f		               ldy  #>f1abutton
.11a9	20 d6 c1	               jsr  putscxy
.11ac	20 dc c2	               jsr  popreg
.11af	20 ad c2	               jsr  pushreg
.11b2	a2 13		               ldx  #<f2abutton
.11b4	a0 20		               ldy  #>f2abutton
.11b6	20 d6 c1	               jsr  putscxy
.11b9	20 dc c2	               jsr  popreg
.11bc	20 ad c2	               jsr  pushreg
.11bf	a2 2e		               ldx  #<f3abutton
.11c1	a0 20		               ldy  #>f3abutton
.11c3	20 d6 c1	               jsr  putscxy
.11c6	20 dc c2	               jsr  popreg
.11c9	20 ad c2	               jsr  pushreg
.11cc	a2 49		               ldx  #<f4abutton
.11ce	a0 20		               ldy  #>f4abutton
.11d0	20 d6 c1	               jsr  putscxy
.11d3	20 dc c2	               jsr  popreg
.11d6	20 ad c2	               jsr  pushreg
.11d9	a2 64		               ldx  #<f5abutton
.11db	a0 20		               ldy  #>f5abutton
.11dd	20 d6 c1	               jsr  putscxy
.11e0	20 dc c2	               jsr  popreg
.11e3	20 ad c2	               jsr  pushreg
.11e6	a2 7f		               ldx  #<f6abutton
.11e8	a0 20		               ldy  #>f6abutton
.11ea	20 d6 c1	               jsr  putscxy
.11ed	20 dc c2	               jsr  popreg
.11f0	20 ad c2	               jsr  pushreg
.11f3	a2 9a		               ldx  #<f7abutton
.11f5	a0 20		               ldy  #>f7abutton
.11f7	20 d6 c1	               jsr  putscxy
.11fa	20 dc c2	               jsr  popreg
.11fd	20 ad c2	               jsr  pushreg
.1200	a2 b5		               ldx  #<f8abutton
.1202	a0 20		               ldy  #>f8abutton
.1204	20 d6 c1	               jsr  putscxy
.1207	20 dc c2	               jsr  popreg
.120a	4c 82 12	               jmp end
.120d			secondks
.120d	20 ad c2	               jsr  pushreg
.1210	a2 dd		               ldx  #<titremenu2
.1212	a0 1f		               ldy  #>titremenu2
.1214	20 d6 c1	               jsr  putscxy
.1217	20 dc c2	               jsr  popreg
.121a	20 ad c2	               jsr  pushreg
.121d	a2 d0		               ldx  #<f1bbutton
.121f	a0 20		               ldy  #>f1bbutton
.1221	20 d6 c1	               jsr  putscxy
.1224	20 dc c2	               jsr  popreg
.1227	20 ad c2	               jsr  pushreg
.122a	a2 eb		               ldx  #<f2bbutton
.122c	a0 20		               ldy  #>f2bbutton
.122e	20 d6 c1	               jsr  putscxy
.1231	20 dc c2	               jsr  popreg
.1234	20 ad c2	               jsr  pushreg
.1237	a2 06		               ldx  #<f3bbutton
.1239	a0 21		               ldy  #>f3bbutton
.123b	20 d6 c1	               jsr  putscxy
.123e	20 dc c2	               jsr  popreg
.1241	20 ad c2	               jsr  pushreg
.1244	a2 21		               ldx  #<f4bbutton
.1246	a0 21		               ldy  #>f4bbutton
.1248	20 d6 c1	               jsr  putscxy
.124b	20 dc c2	               jsr  popreg
.124e	20 ad c2	               jsr  pushreg
.1251	a2 3c		               ldx  #<f5bbutton
.1253	a0 21		               ldy  #>f5bbutton
.1255	20 d6 c1	               jsr  putscxy
.1258	20 dc c2	               jsr  popreg
.125b	20 ad c2	               jsr  pushreg
.125e	a2 57		               ldx  #<f6bbutton
.1260	a0 21		               ldy  #>f6bbutton
.1262	20 d6 c1	               jsr  putscxy
.1265	20 dc c2	               jsr  popreg
.1268	20 ad c2	               jsr  pushreg
.126b	a2 72		               ldx  #<f7bbutton
.126d	a0 21		               ldy  #>f7bbutton
.126f	20 d6 c1	               jsr  putscxy
.1272	20 dc c2	               jsr  popreg
.1275	20 ad c2	               jsr  pushreg
.1278	a2 8d		               ldx  #<f8bbutton
.127a	a0 21		               ldy  #>f8bbutton
.127c	20 d6 c1	               jsr  putscxy
.127f	20 dc c2	               jsr  popreg
.1282	20 dc c2	end            jsr  popreg
.1285	60		               rts
.1286			drawallchars
.1286	20 ad c2	               jsr pushreg
.1289	20 ad c2	               jsr  pushreg
.128c	a2 00		               ldx  #0
.128e	a0 00		               ldy  #0
.1290	20 63 c1	               jsr  gotoxy
.1293	20 dc c2	               jsr  popreg
.1296	a2 00		               ldx  #$00
.1298	8a		nextc          txa
.1299	9d 00 04	               sta  scrnnewram,x
.129c	a9 0f		               lda  #charscolor
.129e	9d 00 d8	               sta  colorram,x
.12a1	e8		               inx
.12a2	e0 80		               cpx  #$80
.12a4	d0 f2		               bne  nextc
.12a6	20 dc c2	               jsr  popreg
.12a9	60		               rts
.12aa			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.12aa	20 3f c2	               jsr  pushall
.12ad	a2 28		               ldx  #40
.12af	a9 40		               lda  #64
.12b1	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.12b4	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.12b7	ca		               dex
.12b8	e0 10		hline          cpx  #vlinepos
.12ba	10 03		               bpl  notyet
.12bc	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.12bf	e0 00		notyet         cpx  #$00
.12c1	d0 ee		               bne  nextl
.12c3	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.12c5	85 fb		               sta  zpage1
.12c7	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.12c9	85 fc		               sta  zpage1+1
.12cb	a0 00		               ldy  #0
.12cd	a9 72		               lda  #114
.12cf	91 fb		               sta  (zpage1),y
.12d1	20 61 13	               jsr  zp1add40
.12d4	a2 12		               ldx  #24-hline2
.12d6	a9 5d		               lda  #93
.12d8	91 fb		another93      sta  (zpage1),y
.12da	20 61 13	               jsr  zp1add40
.12dd	ca		               dex
.12de	d0 f8		               bne  another93
.12e0	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.12e2	85 fb		               sta  zpage1
.12e4	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.12e6	85 fc		               sta  zpage1+1
.12e8	a0 00		               ldy  #0
.12ea	a9 73		               lda  #115
.12ec	91 fb		               sta  (zpage1),y
.12ee	20 7a c2	               jsr  popall
.12f1	60		               rts
.12f2			drawgrid
.12f2	20 3f c2	               jsr  pushall
.12f5	20 00 c0	               jsr  screendis
.12f8	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.12fa	85 fb		               sta  zpage1
.12fc	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.12fe	85 fc		               sta  zpage1+1
.1300	a2 08		               ldx  #8
.1302	a9 65		nextbox        lda  #101
.1304	a0 09		               ldy  #9
.1306	91 fb		               sta  (zpage1),y
.1308	88		               dey
.1309	a9 2e		               lda  #$2e
.130b	91 fb		nextcol        sta  (zpage1),y
.130d	88		               dey
.130e	d0 fb		               bne  nextcol
.1310	20 61 13	               jsr  zp1add40
.1313	ca		               dex
.1314	d0 ec		               bne  nextbox
.1316	a0 08		               ldy  #8
.1318	a9 77		               lda  #119
.131a	91 fb		nextlin        sta  (zpage1),y
.131c	88		               dey
.131d	d0 fb		               bne  nextlin
.131f	a9 3e		               lda  #$3e
.1321	8d eb 05	               sta  scrnnewram+(40*(12))+11
.1324	a9 70		               lda  #$70                     ;+
.1326	8d c4 05	               sta  scrnnewram+(40*(11))+12
.1329	a9 43		               lda  #$43                     ;-
.132b	8d c5 05	               sta  scrnnewram+(40*(11))+13
.132e	a9 6e		               lda  #$6e                     ;+
.1330	8d c6 05	               sta  scrnnewram+(40*(11))+14
.1333	a9 5d		               lda  #$5d                     ;|
.1335	8d ec 05	               sta  scrnnewram+(40*(12))+12
.1338	a9 5d		               lda  #$5d                     ;|
.133a	8d ee 05	               sta  scrnnewram+(40*(12))+14
.133d	a9 6d		               lda  #$6d                     ;+
.133f	8d 14 06	               sta  scrnnewram+(40*(13))+12
.1342	a9 43		               lda  #$43                     ;-
.1344	8d 15 06	               sta  scrnnewram+(40*(13))+13
.1347	a9 7d		               lda  #$7d                     ;+
.1349	8d 16 06	               sta  scrnnewram+(40*(13))+14
.134c	20 0d c0	               jsr screenena
.134f	20 7a c2	               jsr  popall
.1352	60		               rts
.1353			zp1addnum
.1353	08		               php
.1354	48		               pha
.1355	18		               clc
.1356	65 fb		               adc  zpage1
.1358	90 02		               bcc  nocarry
.135a	e6 fc		               inc  zpage1+1
.135c	85 fb		nocarry        sta  zpage1
.135e	68		               pla
.135f	28		               plp
.1360	60		               rts
.1361			zp1add40
.1361	08		               php
.1362	48		               pha
.1363	18		               clc
.1364	a5 fb		               lda  zpage1
.1366	69 28		               adc  #40
.1368	90 02		               bcc  nocarry
.136a	e6 fc		               inc  zpage1+1
.136c	85 fb		nocarry        sta  zpage1
.136e	68		               pla
.136f	28		               plp
.1370	60		               rts
.1371			delay
.1371	20 ad c2	               jsr  pushreg
.1374	a9 00		               lda  #$0
.1376	aa		               tax
.1377	a8		               tay
.1378	ca		xagain         dex
.1379	ca		               dex
.137a	88		yagain         dey
.137b	c0 00		               cpy  #$00
.137d	d0 fb		               bne  yagain
.137f	e0 00		               cpx  #$00
.1381	d0 f5		               bne  xagain
.1383	20 dc c2	               jsr  popreg
.1386	60		               rts
.1387			f1action
.1387	48		               pha
.1388	a9 ff		               lda  #$ff
.138a	8d a5 09	               sta  editmode
.138d	ad a6 09	               lda  fkeyset
.1390	f0 03		               beq  menua
.1392	4c 4a 14	               jmp  menub
.1395			menua
.1395	20 ad c2	               jsr  pushreg
.1398	a2 51		               ldx  #<blankmsg
.139a	a0 1b		               ldy  #>blankmsg
.139c	20 d6 c1	               jsr  putscxy
.139f	a2 b4		               ldx  #<f1a_msg
.13a1	a0 1b		               ldy  #>f1a_msg
.13a3	20 d6 c1	               jsr  putscxy
.13a6	20 dc c2	               jsr  popreg
.13a9	20 ad c2	               jsr  pushreg
.13ac	ad f8 1f	               lda  f1abutton
.13af	48		               pha
.13b0	a9 92		               lda  #146
.13b2	8d 0a 20	               sta  f1abutton+18
.13b5	a9 01		               lda  #flashcol
.13b7	8d f8 1f	               sta  f1abutton
.13ba	a2 f8		               ldx  #<f1abutton
.13bc	a0 1f		               ldy  #>f1abutton
.13be	20 d6 c1	               jsr  putscxy
.13c1	20 71 13	               jsr  delay
.13c4	a9 12		               lda  #18
.13c6	8d 0a 20	               sta  f1abutton+18
.13c9	68		               pla
.13ca	8d f8 1f	               sta  f1abutton
.13cd	a2 f8		               ldx  #<f1abutton
.13cf	a0 1f		               ldy  #>f1abutton
.13d1	20 d6 c1	               jsr  putscxy
.13d4	20 dc c2	               jsr  popreg
.13d7	a9 0b		               lda  #vgris
.13d9	20 12 0c	               jsr  setmenuacolor
.13dc	a9 03		               lda  #menu1col1
.13de	8d f8 1f	               sta  f1abutton
.13e1	20 8b 11	               jsr  drawfkeys
.13e4	a9 0b		               lda  #vgris
.13e6	8d dd 1d	               sta  redraw_msg
.13e9	20 ad c2	               jsr  pushreg
.13ec	a2 51		               ldx  #<blankmsg
.13ee	a0 1b		               ldy  #>blankmsg
.13f0	20 d6 c1	               jsr  putscxy
.13f3	a2 dd		               ldx  #<redraw_msg
.13f5	a0 1d		               ldy  #>redraw_msg
.13f7	20 d6 c1	               jsr  putscxy
.13fa	20 dc c2	               jsr  popreg
.13fd	20 56 0e	               jsr  editor
.1400	a9 0a		               lda  #vrose
.1402	8d dd 1d	               sta  redraw_msg
.1405	20 ad c2	               jsr  pushreg
.1408	a2 51		               ldx  #<blankmsg
.140a	a0 1b		               ldy  #>blankmsg
.140c	20 d6 c1	               jsr  putscxy
.140f	a2 dd		               ldx  #<redraw_msg
.1411	a0 1d		               ldy  #>redraw_msg
.1413	20 d6 c1	               jsr  putscxy
.1416	20 dc c2	               jsr  popreg
.1419	20 ad c2	               jsr  pushreg
.141c	a2 51		               ldx  #<blankmsg
.141e	a0 1b		               ldy  #>blankmsg
.1420	20 d6 c1	               jsr  putscxy
.1423	a2 c8		               ldx  #<quit_msg
.1425	a0 1d		               ldy  #>quit_msg
.1427	20 d6 c1	               jsr  putscxy
.142a	20 dc c2	               jsr  popreg
.142d	20 ad c2	               jsr  pushreg
.1430	a2 51		               ldx  #<blankmsg
.1432	a0 1b		               ldy  #>blankmsg
.1434	20 d6 c1	               jsr  putscxy
.1437	a2 24		               ldx  #<menua_msg
.1439	a0 1d		               ldy  #>menua_msg
.143b	20 d6 c1	               jsr  putscxy
.143e	20 dc c2	               jsr  popreg
.1441	20 cc 0b	               jsr  resetmenuacolor
.1444	20 8b 11	               jsr  drawfkeys
.1447	4c 92 14	               jmp  out
.144a			menub
.144a	20 ad c2	               jsr  pushreg
.144d	a2 51		               ldx  #<blankmsg
.144f	a0 1b		               ldy  #>blankmsg
.1451	20 d6 c1	               jsr  putscxy
.1454	a2 8a		               ldx  #<f1b_msg
.1456	a0 1c		               ldy  #>f1b_msg
.1458	20 d6 c1	               jsr  putscxy
.145b	20 dc c2	               jsr  popreg
.145e	20 ad c2	               jsr  pushreg
.1461	ad d0 20	               lda  f1bbutton
.1464	48		               pha
.1465	a9 92		               lda  #146
.1467	8d e2 20	               sta  f1bbutton+18
.146a	a9 01		               lda  #flashcol
.146c	8d d0 20	               sta  f1bbutton
.146f	a2 d0		               ldx  #<f1bbutton
.1471	a0 20		               ldy  #>f1bbutton
.1473	20 d6 c1	               jsr  putscxy
.1476	20 71 13	               jsr  delay
.1479	a9 12		               lda  #18
.147b	8d e2 20	               sta  f1bbutton+18
.147e	68		               pla
.147f	8d d0 20	               sta  f1bbutton
.1482	a2 d0		               ldx  #<f1bbutton
.1484	a0 20		               ldy  #>f1bbutton
.1486	20 d6 c1	               jsr  putscxy
.1489	20 dc c2	               jsr  popreg
.148c	20 1e 1b	               jsr  flipvert
.148f	20 08 10	               jsr  drawbitmap
.1492	68		out            pla
.1493	20 ad c2	               jsr  pushreg
.1496	a2 51		               ldx  #<blankmsg
.1498	a0 1b		               ldy  #>blankmsg
.149a	20 d6 c1	               jsr  putscxy
.149d	a2 7d		               ldx  #<prompt_msg
.149f	a0 1b		               ldy  #>prompt_msg
.14a1	20 d6 c1	               jsr  putscxy
.14a4	20 dc c2	               jsr  popreg
.14a7	60		               rts
.14a8			f2action
.14a8	48		               pha
.14a9	a9 00		               lda  #$0
.14ab	8d a5 09	               sta  editmode
.14ae	ad a6 09	               lda  fkeyset
.14b1	d0 4b		               bne  menub
.14b3	20 ad c2	               jsr  pushreg
.14b6	a2 51		               ldx  #<blankmsg
.14b8	a0 1b		               ldy  #>blankmsg
.14ba	20 d6 c1	               jsr  putscxy
.14bd	a2 cf		               ldx  #<f2a_msg
.14bf	a0 1b		               ldy  #>f2a_msg
.14c1	20 d6 c1	               jsr  putscxy
.14c4	20 dc c2	               jsr  popreg
.14c7	20 ad c2	               jsr  pushreg
.14ca	ad 13 20	               lda  f2abutton
.14cd	48		               pha
.14ce	a9 92		               lda  #146
.14d0	8d 25 20	               sta  f2abutton+18
.14d3	a9 01		               lda  #flashcol
.14d5	8d 13 20	               sta  f2abutton
.14d8	a2 13		               ldx  #<f2abutton
.14da	a0 20		               ldy  #>f2abutton
.14dc	20 d6 c1	               jsr  putscxy
.14df	20 71 13	               jsr  delay
.14e2	a9 12		               lda  #18
.14e4	8d 25 20	               sta  f2abutton+18
.14e7	68		               pla
.14e8	8d 13 20	               sta  f2abutton
.14eb	a2 13		               ldx  #<f2abutton
.14ed	a0 20		               ldy  #>f2abutton
.14ef	20 d6 c1	               jsr  putscxy
.14f2	20 dc c2	               jsr  popreg
.14f5	20 78 0a	               jsr  copychar
.14f8	20 08 10	               jsr  drawbitmap
.14fb	4c 46 15	               jmp  out
.14fe			menub
.14fe	20 ad c2	               jsr  pushreg
.1501	a2 51		               ldx  #<blankmsg
.1503	a0 1b		               ldy  #>blankmsg
.1505	20 d6 c1	               jsr  putscxy
.1508	a2 a3		               ldx  #<f2b_msg
.150a	a0 1c		               ldy  #>f2b_msg
.150c	20 d6 c1	               jsr  putscxy
.150f	20 dc c2	               jsr  popreg
.1512	20 ad c2	               jsr  pushreg
.1515	ad eb 20	               lda  f2bbutton
.1518	48		               pha
.1519	a9 92		               lda  #146
.151b	8d fd 20	               sta  f2bbutton+18
.151e	a9 01		               lda  #flashcol
.1520	8d eb 20	               sta  f2bbutton
.1523	a2 eb		               ldx  #<f2bbutton
.1525	a0 20		               ldy  #>f2bbutton
.1527	20 d6 c1	               jsr  putscxy
.152a	20 71 13	               jsr  delay
.152d	a9 12		               lda  #18
.152f	8d fd 20	               sta  f2bbutton+18
.1532	68		               pla
.1533	8d eb 20	               sta  f2bbutton
.1536	a2 eb		               ldx  #<f2bbutton
.1538	a0 20		               ldy  #>f2bbutton
.153a	20 d6 c1	               jsr  putscxy
.153d	20 dc c2	               jsr  popreg
.1540	20 f1 1a	               jsr  fliphorz
.1543	20 08 10	               jsr  drawbitmap
.1546	68		out            pla
.1547	20 ad c2	               jsr  pushreg
.154a	a2 51		               ldx  #<blankmsg
.154c	a0 1b		               ldy  #>blankmsg
.154e	20 d6 c1	               jsr  putscxy
.1551	a2 7d		               ldx  #<prompt_msg
.1553	a0 1b		               ldy  #>prompt_msg
.1555	20 d6 c1	               jsr  putscxy
.1558	20 dc c2	               jsr  popreg
.155b	60		               rts
.155c			f3action
.155c	48		               pha
.155d	a9 00		               lda  #$0
.155f	8d a5 09	               sta  editmode
.1562	ad a6 09	               lda  fkeyset
.1565	d0 74		               bne  menub
.1567	20 ad c2	               jsr  pushreg
.156a	ad 2e 20	               lda  f3abutton
.156d	48		               pha
.156e	a9 92		               lda  #146
.1570	8d 40 20	               sta  f3abutton+18
.1573	a9 01		               lda  #flashcol
.1575	8d 2e 20	               sta  f3abutton
.1578	a2 2e		               ldx  #<f3abutton
.157a	a0 20		               ldy  #>f3abutton
.157c	20 d6 c1	               jsr  putscxy
.157f	20 71 13	               jsr  delay
.1582	a9 12		               lda  #18
.1584	8d 40 20	               sta  f3abutton+18
.1587	68		               pla
.1588	8d 2e 20	               sta  f3abutton
.158b	a2 2e		               ldx  #<f3abutton
.158d	a0 20		               ldy  #>f3abutton
.158f	20 d6 c1	               jsr  putscxy
.1592	20 dc c2	               jsr  popreg
.1595	20 ad c2	               jsr  pushreg
.1598	a2 51		               ldx  #<blankmsg
.159a	a0 1b		               ldy  #>blankmsg
.159c	20 d6 c1	               jsr  putscxy
.159f	a2 ec		               ldx  #<f3a_msg
.15a1	a0 1b		               ldy  #>f3a_msg
.15a3	20 d6 c1	               jsr  putscxy
.15a6	20 dc c2	               jsr  popreg
.15a9	20 e5 c5	getagain       jsr  getkey
.15ac	c9 31		               cmp  #$31
.15ae	f0 0b		               beq  devok
.15b0	c9 38		               cmp  #$38
.15b2	f0 07		               beq  devok
.15b4	c9 39		               cmp  #$39
.15b6	f0 03		               beq  devok
.15b8	4c a9 15	               jmp  getagain
.15bb	8d c5 09	devok          sta  device
.15be	20 06 0a	               jsr  getfname
.15c1	20 ad c2	               jsr  pushreg
.15c4	a2 51		               ldx  #<blankmsg
.15c6	a0 1b		               ldy  #>blankmsg
.15c8	20 d6 c1	               jsr  putscxy
.15cb	a2 98		               ldx  #<wait_msg
.15cd	a0 1b		               ldy  #>wait_msg
.15cf	20 d6 c1	               jsr  putscxy
.15d2	20 dc c2	               jsr  popreg
.15d5	20 d9 08	               jsr  savetofile
.15d8	4c 23 16	               jmp  out
.15db			menub
.15db	20 ad c2	               jsr  pushreg
.15de	a2 51		               ldx  #<blankmsg
.15e0	a0 1b		               ldy  #>blankmsg
.15e2	20 d6 c1	               jsr  putscxy
.15e5	a2 be		               ldx  #<f3b_msg
.15e7	a0 1c		               ldy  #>f3b_msg
.15e9	20 d6 c1	               jsr  putscxy
.15ec	20 dc c2	               jsr  popreg
.15ef	20 ad c2	               jsr  pushreg
.15f2	ad 06 21	               lda  f3bbutton
.15f5	48		               pha
.15f6	a9 92		               lda  #146
.15f8	8d 18 21	               sta  f3bbutton+18
.15fb	a9 01		               lda  #flashcol
.15fd	8d 06 21	               sta  f3bbutton
.1600	a2 06		               ldx  #<f3bbutton
.1602	a0 21		               ldy  #>f3bbutton
.1604	20 d6 c1	               jsr  putscxy
.1607	20 71 13	               jsr  delay
.160a	a9 12		               lda  #18
.160c	8d 18 21	               sta  f3bbutton+18
.160f	68		               pla
.1610	8d 06 21	               sta  f3bbutton
.1613	a2 06		               ldx  #<f3bbutton
.1615	a0 21		               ldy  #>f3bbutton
.1617	20 d6 c1	               jsr  putscxy
.161a	20 dc c2	               jsr  popreg
.161d	20 80 1a	               jsr  scrollright
.1620	20 08 10	               jsr  drawbitmap
.1623	68		out            pla
.1624	20 ad c2	               jsr  pushreg
.1627	a2 51		               ldx  #<blankmsg
.1629	a0 1b		               ldy  #>blankmsg
.162b	20 d6 c1	               jsr  putscxy
.162e	a2 7d		               ldx  #<prompt_msg
.1630	a0 1b		               ldy  #>prompt_msg
.1632	20 d6 c1	               jsr  putscxy
.1635	20 dc c2	               jsr  popreg
.1638	60		               rts
.1639			f4action
.1639	48		               pha
.163a	a9 00		               lda  #$0
.163c	8d a5 09	               sta  editmode
.163f	ad a6 09	               lda  fkeyset
.1642	d0 77		               bne  menub
.1644	20 ad c2	               jsr  pushreg
.1647	ad 49 20	               lda  f4abutton
.164a	48		               pha
.164b	a9 92		               lda  #146
.164d	8d 5b 20	               sta  f4abutton+18
.1650	a9 01		               lda  #flashcol
.1652	8d 49 20	               sta  f4abutton
.1655	a2 49		               ldx  #<f4abutton
.1657	a0 20		               ldy  #>f4abutton
.1659	20 d6 c1	               jsr  putscxy
.165c	20 71 13	               jsr  delay
.165f	a9 12		               lda  #18
.1661	8d 5b 20	               sta  f4abutton+18
.1664	68		               pla
.1665	8d 49 20	               sta  f4abutton
.1668	a2 49		               ldx  #<f4abutton
.166a	a0 20		               ldy  #>f4abutton
.166c	20 d6 c1	               jsr  putscxy
.166f	20 dc c2	               jsr  popreg
.1672	20 ad c2	               jsr  pushreg
.1675	a2 51		               ldx  #<blankmsg
.1677	a0 1b		               ldy  #>blankmsg
.1679	20 d6 c1	               jsr  putscxy
.167c	a2 11		               ldx  #<f4a_msg
.167e	a0 1c		               ldy  #>f4a_msg
.1680	20 d6 c1	               jsr  putscxy
.1683	20 dc c2	               jsr  popreg
.1686	20 e5 c5	getagain       jsr  getkey
.1689	c9 31		               cmp  #$31
.168b	f0 0b		               beq  devok
.168d	c9 38		               cmp  #$38
.168f	f0 07		               beq  devok
.1691	c9 39		               cmp  #$39
.1693	f0 03		               beq  devok
.1695	4c 86 16	               jmp  getagain
.1698	8d c5 09	devok          sta  device
.169b	20 06 0a	               jsr  getfname
.169e	20 ad c2	               jsr  pushreg
.16a1	a2 51		               ldx  #<blankmsg
.16a3	a0 1b		               ldy  #>blankmsg
.16a5	20 d6 c1	               jsr  putscxy
.16a8	a2 98		               ldx  #<wait_msg
.16aa	a0 1b		               ldy  #>wait_msg
.16ac	20 d6 c1	               jsr  putscxy
.16af	20 dc c2	               jsr  popreg
.16b2	20 38 09	               jsr  loadfromfile
.16b5	20 c6 09	               jsr  screenredraw
.16b8	4c 03 17	               jmp  out
.16bb			menub
.16bb	20 ad c2	               jsr  pushreg
.16be	a2 51		               ldx  #<blankmsg
.16c0	a0 1b		               ldy  #>blankmsg
.16c2	20 d6 c1	               jsr  putscxy
.16c5	a2 d3		               ldx  #<f4b_msg
.16c7	a0 1c		               ldy  #>f4b_msg
.16c9	20 d6 c1	               jsr  putscxy
.16cc	20 dc c2	               jsr  popreg
.16cf	20 ad c2	               jsr  pushreg
.16d2	ad 21 21	               lda  f4bbutton
.16d5	48		               pha
.16d6	a9 92		               lda  #146
.16d8	8d 33 21	               sta  f4bbutton+18
.16db	a9 01		               lda  #flashcol
.16dd	8d 21 21	               sta  f4bbutton
.16e0	a2 21		               ldx  #<f4bbutton
.16e2	a0 21		               ldy  #>f4bbutton
.16e4	20 d6 c1	               jsr  putscxy
.16e7	20 71 13	               jsr  delay
.16ea	a9 12		               lda  #18
.16ec	8d 33 21	               sta  f4bbutton+18
.16ef	68		               pla
.16f0	8d 21 21	               sta  f4bbutton
.16f3	a2 21		               ldx  #<f4bbutton
.16f5	a0 21		               ldy  #>f4bbutton
.16f7	20 d6 c1	               jsr  putscxy
.16fa	20 dc c2	               jsr  popreg
.16fd	20 a5 1a	               jsr  scrollleft
.1700	20 08 10	               jsr  drawbitmap
.1703	68		out            pla
.1704	20 ad c2	               jsr  pushreg
.1707	a2 51		               ldx  #<blankmsg
.1709	a0 1b		               ldy  #>blankmsg
.170b	20 d6 c1	               jsr  putscxy
.170e	a2 7d		               ldx  #<prompt_msg
.1710	a0 1b		               ldy  #>prompt_msg
.1712	20 d6 c1	               jsr  putscxy
.1715	20 dc c2	               jsr  popreg
.1718	60		               rts
.1719			f5action
.1719	48		               pha
.171a	a9 00		               lda  #$0
.171c	8d a5 09	               sta  editmode
.171f	ad a6 09	               lda  fkeyset
.1722	d0 4b		               bne  menub
.1724	20 ad c2	               jsr  pushreg
.1727	a2 51		               ldx  #<blankmsg
.1729	a0 1b		               ldy  #>blankmsg
.172b	20 d6 c1	               jsr  putscxy
.172e	a2 38		               ldx  #<f5a_msg
.1730	a0 1c		               ldy  #>f5a_msg
.1732	20 d6 c1	               jsr  putscxy
.1735	20 dc c2	               jsr  popreg
.1738	20 ad c2	               jsr  pushreg
.173b	ad 64 20	               lda  f5abutton
.173e	48		               pha
.173f	a9 92		               lda  #146
.1741	8d 76 20	               sta  f5abutton+18
.1744	a9 01		               lda  #flashcol
.1746	8d 64 20	               sta  f5abutton
.1749	a2 64		               ldx  #<f5abutton
.174b	a0 20		               ldy  #>f5abutton
.174d	20 d6 c1	               jsr  putscxy
.1750	20 71 13	               jsr  delay
.1753	a9 12		               lda  #18
.1755	8d 76 20	               sta  f5abutton+18
.1758	68		               pla
.1759	8d 64 20	               sta  f5abutton
.175c	a2 64		               ldx  #<f5abutton
.175e	a0 20		               ldy  #>f5abutton
.1760	20 d6 c1	               jsr  putscxy
.1763	20 dc c2	               jsr  popreg
.1766	20 d1 1a	               jsr  clearchar
.1769	20 08 10	               jsr  drawbitmap
.176c	4c b7 17	               jmp  out
.176f			menub
.176f	20 ad c2	               jsr  pushreg
.1772	a2 51		               ldx  #<blankmsg
.1774	a0 1b		               ldy  #>blankmsg
.1776	20 d6 c1	               jsr  putscxy
.1779	a2 e7		               ldx  #<f5b_msg
.177b	a0 1c		               ldy  #>f5b_msg
.177d	20 d6 c1	               jsr  putscxy
.1780	20 dc c2	               jsr  popreg
.1783	20 ad c2	               jsr  pushreg
.1786	ad 3c 21	               lda  f5bbutton
.1789	48		               pha
.178a	a9 92		               lda  #146
.178c	8d 4e 21	               sta  f5bbutton+18
.178f	a9 01		               lda  #flashcol
.1791	8d 3c 21	               sta  f5bbutton
.1794	a2 3c		               ldx  #<f5bbutton
.1796	a0 21		               ldy  #>f5bbutton
.1798	20 d6 c1	               jsr  putscxy
.179b	20 71 13	               jsr  delay
.179e	a9 12		               lda  #18
.17a0	8d 4e 21	               sta  f5bbutton+18
.17a3	68		               pla
.17a4	8d 3c 21	               sta  f5bbutton
.17a7	a2 3c		               ldx  #<f5bbutton
.17a9	a0 21		               ldy  #>f5bbutton
.17ab	20 d6 c1	               jsr  putscxy
.17ae	20 dc c2	               jsr  popreg
.17b1	20 0e 1a	               jsr  scrollup
.17b4	20 08 10	               jsr  drawbitmap
.17b7	68		out            pla
.17b8	20 ad c2	               jsr  pushreg
.17bb	a2 51		               ldx  #<blankmsg
.17bd	a0 1b		               ldy  #>blankmsg
.17bf	20 d6 c1	               jsr  putscxy
.17c2	a2 7d		               ldx  #<prompt_msg
.17c4	a0 1b		               ldy  #>prompt_msg
.17c6	20 d6 c1	               jsr  putscxy
.17c9	20 dc c2	               jsr  popreg
.17cc	60		               rts
.17cd			f6action
.17cd	48		               pha
.17ce	a9 00		               lda  #$0
.17d0	8d a5 09	               sta  editmode
.17d3	ad a6 09	               lda  fkeyset
.17d6	d0 4b		               bne  menub
.17d8	20 ad c2	               jsr  pushreg
.17db	a2 51		               ldx  #<blankmsg
.17dd	a0 1b		               ldy  #>blankmsg
.17df	20 d6 c1	               jsr  putscxy
.17e2	a2 52		               ldx  #<f6a_msg
.17e4	a0 1c		               ldy  #>f6a_msg
.17e6	20 d6 c1	               jsr  putscxy
.17e9	20 dc c2	               jsr  popreg
.17ec	20 ad c2	               jsr  pushreg
.17ef	ad 7f 20	               lda  f6abutton
.17f2	48		               pha
.17f3	a9 92		               lda  #146
.17f5	8d 91 20	               sta  f6abutton+18
.17f8	a9 01		               lda  #flashcol
.17fa	8d 7f 20	               sta  f6abutton
.17fd	a2 7f		               ldx  #<f6abutton
.17ff	a0 20		               ldy  #>f6abutton
.1801	20 d6 c1	               jsr  putscxy
.1804	20 71 13	               jsr  delay
.1807	a9 12		               lda  #18
.1809	8d 91 20	               sta  f6abutton+18
.180c	68		               pla
.180d	8d 7f 20	               sta  f6abutton
.1810	a2 7f		               ldx  #<f6abutton
.1812	a0 20		               ldy  #>f6abutton
.1814	20 d6 c1	               jsr  putscxy
.1817	20 dc c2	               jsr  popreg
.181a	20 c7 1a	               jsr  fillchar
.181d	20 08 10	               jsr  drawbitmap
.1820	4c 6b 18	               jmp  out
.1823			menub
.1823	20 ad c2	               jsr  pushreg
.1826	a2 51		               ldx  #<blankmsg
.1828	a0 1b		               ldy  #>blankmsg
.182a	20 d6 c1	               jsr  putscxy
.182d	a2 f9		               ldx  #<f6b_msg
.182f	a0 1c		               ldy  #>f6b_msg
.1831	20 d6 c1	               jsr  putscxy
.1834	20 dc c2	               jsr  popreg
.1837	20 ad c2	               jsr  pushreg
.183a	ad 57 21	               lda  f6bbutton
.183d	48		               pha
.183e	a9 92		               lda  #146
.1840	8d 69 21	               sta  f6bbutton+18
.1843	a9 01		               lda  #flashcol
.1845	8d 57 21	               sta  f6bbutton
.1848	a2 57		               ldx  #<f6bbutton
.184a	a0 21		               ldy  #>f6bbutton
.184c	20 d6 c1	               jsr  putscxy
.184f	20 71 13	               jsr  delay
.1852	a9 12		               lda  #18
.1854	8d 69 21	               sta  f6bbutton+18
.1857	68		               pla
.1858	8d 57 21	               sta  f6bbutton
.185b	a2 57		               ldx  #<f6bbutton
.185d	a0 21		               ldy  #>f6bbutton
.185f	20 d6 c1	               jsr  putscxy
.1862	20 dc c2	               jsr  popreg
.1865	20 46 1a	               jsr  scrolldown
.1868	20 08 10	               jsr  drawbitmap
.186b	68		out            pla
.186c	20 ad c2	               jsr  pushreg
.186f	a2 51		               ldx  #<blankmsg
.1871	a0 1b		               ldy  #>blankmsg
.1873	20 d6 c1	               jsr  putscxy
.1876	a2 7d		               ldx  #<prompt_msg
.1878	a0 1b		               ldy  #>prompt_msg
.187a	20 d6 c1	               jsr  putscxy
.187d	20 dc c2	               jsr  popreg
.1880	60		               rts
.1881			f7action
.1881	48		               pha
.1882	a9 00		               lda  #$0
.1884	8d a5 09	               sta  editmode
.1887	ad a6 09	               lda  fkeyset
.188a	d0 4b		               bne  menub
.188c	20 ad c2	               jsr  pushreg
.188f	a2 51		               ldx  #<blankmsg
.1891	a0 1b		               ldy  #>blankmsg
.1893	20 d6 c1	               jsr  putscxy
.1896	a2 6c		               ldx  #<f7a_msg
.1898	a0 1c		               ldy  #>f7a_msg
.189a	20 d6 c1	               jsr  putscxy
.189d	20 dc c2	               jsr  popreg
.18a0	20 ad c2	               jsr  pushreg
.18a3	ad 9a 20	               lda  f7abutton
.18a6	48		               pha
.18a7	a9 92		               lda  #146
.18a9	8d ac 20	               sta  f7abutton+18
.18ac	a9 01		               lda  #flashcol
.18ae	8d 9a 20	               sta  f7abutton
.18b1	a2 9a		               ldx  #<f7abutton
.18b3	a0 20		               ldy  #>f7abutton
.18b5	20 d6 c1	               jsr  putscxy
.18b8	20 71 13	               jsr  delay
.18bb	a9 12		               lda  #18
.18bd	8d ac 20	               sta  f7abutton+18
.18c0	68		               pla
.18c1	8d 9a 20	               sta  f7abutton
.18c4	a2 9a		               ldx  #<f7abutton
.18c6	a0 20		               ldy  #>f7abutton
.18c8	20 d6 c1	               jsr  putscxy
.18cb	20 dc c2	               jsr  popreg
.18ce	20 db 10	               jsr  copycharset
.18d1	20 08 10	               jsr  drawbitmap
.18d4	4c 24 19	               jmp  out
.18d7	a9 00		menub          lda  #$0
.18d9	8d a5 09	               sta  editmode
.18dc	20 ad c2	               jsr  pushreg
.18df	a2 51		               ldx  #<blankmsg
.18e1	a0 1b		               ldy  #>blankmsg
.18e3	20 d6 c1	               jsr  putscxy
.18e6	a2 0d		               ldx  #<f7b_msg
.18e8	a0 1d		               ldy  #>f7b_msg
.18ea	20 d6 c1	               jsr  putscxy
.18ed	20 dc c2	               jsr  popreg
.18f0	20 ad c2	               jsr  pushreg
.18f3	ad 72 21	               lda  f7bbutton
.18f6	48		               pha
.18f7	a9 92		               lda  #146
.18f9	8d 84 21	               sta  f7bbutton+18
.18fc	a9 01		               lda  #flashcol
.18fe	8d 72 21	               sta  f7bbutton
.1901	a2 72		               ldx  #<f7bbutton
.1903	a0 21		               ldy  #>f7bbutton
.1905	20 d6 c1	               jsr  putscxy
.1908	20 71 13	               jsr  delay
.190b	a9 12		               lda  #18
.190d	8d 84 21	               sta  f7bbutton+18
.1910	68		               pla
.1911	8d 72 21	               sta  f7bbutton
.1914	a2 72		               ldx  #<f7bbutton
.1916	a0 21		               ldy  #>f7bbutton
.1918	20 d6 c1	               jsr  putscxy
.191b	20 dc c2	               jsr  popreg
.191e	20 ee 19	               jsr  reverse
.1921	20 08 10	               jsr  drawbitmap
.1924	68		out            pla
.1925	20 ad c2	               jsr  pushreg
.1928	a2 51		               ldx  #<blankmsg
.192a	a0 1b		               ldy  #>blankmsg
.192c	20 d6 c1	               jsr  putscxy
.192f	a2 7d		               ldx  #<prompt_msg
.1931	a0 1b		               ldy  #>prompt_msg
.1933	20 d6 c1	               jsr  putscxy
.1936	20 dc c2	               jsr  popreg
.1939	60		               rts
.193a			f8action
.193a	08		               php
.193b	48		               pha
.193c	a9 00		               lda  #$0
.193e	8d a5 09	               sta  editmode
.1941	ad a6 09	               lda  fkeyset
.1944	d0 45		               bne  menub
.1946	20 ad c2	               jsr  pushreg
.1949	a2 51		               ldx  #<blankmsg
.194b	a0 1b		               ldy  #>blankmsg
.194d	20 d6 c1	               jsr  putscxy
.1950	a2 47		               ldx  #<menub_msg
.1952	a0 1d		               ldy  #>menub_msg
.1954	20 d6 c1	               jsr  putscxy
.1957	20 dc c2	               jsr  popreg
.195a	20 ad c2	               jsr  pushreg
.195d	ad b5 20	               lda  f8abutton
.1960	48		               pha
.1961	a9 92		               lda  #146
.1963	8d c7 20	               sta  f8abutton+18
.1966	a9 01		               lda  #flashcol
.1968	8d b5 20	               sta  f8abutton
.196b	a2 b5		               ldx  #<f8abutton
.196d	a0 20		               ldy  #>f8abutton
.196f	20 d6 c1	               jsr  putscxy
.1972	20 71 13	               jsr  delay
.1975	a9 12		               lda  #18
.1977	8d c7 20	               sta  f8abutton+18
.197a	68		               pla
.197b	8d b5 20	               sta  f8abutton
.197e	a2 b5		               ldx  #<f8abutton
.1980	a0 20		               ldy  #>f8abutton
.1982	20 d6 c1	               jsr  putscxy
.1985	20 dc c2	               jsr  popreg
.1988	4c cd 19	               jmp  swapit
.198b			menub
.198b	20 ad c2	               jsr  pushreg
.198e	a2 51		               ldx  #<blankmsg
.1990	a0 1b		               ldy  #>blankmsg
.1992	20 d6 c1	               jsr  putscxy
.1995	a2 24		               ldx  #<menua_msg
.1997	a0 1d		               ldy  #>menua_msg
.1999	20 d6 c1	               jsr  putscxy
.199c	20 dc c2	               jsr  popreg
.199f	20 ad c2	               jsr  pushreg
.19a2	ad 8d 21	               lda  f8bbutton
.19a5	48		               pha
.19a6	a9 92		               lda  #146
.19a8	8d 9f 21	               sta  f8bbutton+18
.19ab	a9 01		               lda  #flashcol
.19ad	8d 8d 21	               sta  f8bbutton
.19b0	a2 8d		               ldx  #<f8bbutton
.19b2	a0 21		               ldy  #>f8bbutton
.19b4	20 d6 c1	               jsr  putscxy
.19b7	20 71 13	               jsr  delay
.19ba	a9 12		               lda  #18
.19bc	8d 9f 21	               sta  f8bbutton+18
.19bf	68		               pla
.19c0	8d 8d 21	               sta  f8bbutton
.19c3	a2 8d		               ldx  #<f8bbutton
.19c5	a0 21		               ldy  #>f8bbutton
.19c7	20 d6 c1	               jsr  putscxy
.19ca	20 dc c2	               jsr  popreg
.19cd	49 ff		swapit         eor  #$ff
.19cf	8d a6 09	               sta  fkeyset
.19d2	20 8b 11	               jsr  drawfkeys
.19d5	68		               pla
.19d6	48		               pha
.19d7	20 ad c2	               jsr  pushreg
.19da	a2 51		               ldx  #<blankmsg
.19dc	a0 1b		               ldy  #>blankmsg
.19de	20 d6 c1	               jsr  putscxy
.19e1	a2 7d		               ldx  #<prompt_msg
.19e3	a0 1b		               ldy  #>prompt_msg
.19e5	20 d6 c1	               jsr  putscxy
.19e8	20 dc c2	               jsr  popreg
.19eb	68		               pla
.19ec	28		               plp
.19ed	60		               rts
.19ee			reverse
.19ee	20 3f c2	               jsr  pushall
.19f1	48		               pha
.19f2	ad ab 09	               lda  mapaddr
.19f5	85 fd		               sta  $fd
.19f7	ad ac 09	               lda  mapaddr+1
.19fa	85 fe		               sta  $fe
.19fc	68		               pla
.19fd	a0 00		               ldy  #$00
.19ff	b1 fd		again          lda  (zpage2),y
.1a01	49 ff		               eor  #$ff
.1a03	91 fd		               sta  (zpage2),y
.1a05	c8		               iny
.1a06	c0 08		               cpy  #$08
.1a08	d0 f5		               bne  again
.1a0a	20 7a c2	               jsr  popall
.1a0d	60		               rts
.1a0e			scrollup
.1a0e	20 3f c2	               jsr  pushall
.1a11	48		               pha
.1a12	ad ab 09	               lda  mapaddr
.1a15	85 fb		               sta  $fb
.1a17	ad ac 09	               lda  mapaddr+1
.1a1a	85 fc		               sta  $fc
.1a1c	68		               pla
.1a1d	48		               pha
.1a1e	ad ab 09	               lda  mapaddr
.1a21	85 fd		               sta  $fd
.1a23	ad ac 09	               lda  mapaddr+1
.1a26	85 fe		               sta  $fe
.1a28	68		               pla
.1a29	20 b2 c3	               jsr  inczp2
.1a2c	a0 00		               ldy  #$00
.1a2e	b1 fb		               lda  (zpage1),y
.1a30	8d 45 1a	               sta  tmpbyte
.1a33	b1 fd		again          lda  (zpage2),y
.1a35	91 fb		               sta  (zpage1),y
.1a37	c8		               iny
.1a38	c0 07		               cpy  #$07
.1a3a	d0 f7		               bne  again
.1a3c	ad 45 1a	               lda  tmpbyte
.1a3f	91 fb		               sta  (zpage1),y
.1a41	20 7a c2	               jsr  popall
.1a44	60		               rts
>1a45	00		tmpbyte        .byte     $00
.1a46			scrolldown
.1a46	20 3f c2	               jsr  pushall
.1a49	48		               pha
.1a4a	ad ab 09	               lda  mapaddr
.1a4d	85 fb		               sta  $fb
.1a4f	ad ac 09	               lda  mapaddr+1
.1a52	85 fc		               sta  $fc
.1a54	68		               pla
.1a55	48		               pha
.1a56	ad ab 09	               lda  mapaddr
.1a59	85 fd		               sta  $fd
.1a5b	ad ac 09	               lda  mapaddr+1
.1a5e	85 fe		               sta  $fe
.1a60	68		               pla
.1a61	20 b2 c3	               jsr  inczp2
.1a64	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.1a66	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.1a68	8d 7f 1a	               sta  tmpbyte             ;xxxxxxxx
.1a6b	88		again          dey                      ;xxxxxxxx
.1a6c	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.1a6e	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.1a70	c0 00		               cpy  #$00                ;xxxxxxxx
.1a72	d0 f7		               bne  again               ;xxxxxxxx
.1a74	a0 00		               ldy  #$00
.1a76	ad 7f 1a	               lda  tmpbyte
.1a79	91 fb		               sta  (zpage1),y
.1a7b	20 7a c2	               jsr  popall
.1a7e	60		               rts
>1a7f	00		tmpbyte        .byte     $00
.1a80			scrollright
.1a80	20 3f c2	               jsr  pushall
.1a83	48		               pha
.1a84	ad ab 09	               lda  mapaddr
.1a87	85 fb		               sta  $fb
.1a89	ad ac 09	               lda  mapaddr+1
.1a8c	85 fc		               sta  $fc
.1a8e	68		               pla
.1a8f	a0 00		               ldy  #$00
.1a91	b1 fb		again          lda  (zpage1),y
.1a93	18		               clc
.1a94	6a		               ror
.1a95	90 03		               bcc  zero
.1a97	18		               clc
.1a98	69 80		one            adc  #$80
.1a9a	91 fb		zero           sta  (zpage1),y
.1a9c	c8		               iny
.1a9d	c0 08		               cpy  #$08
.1a9f	d0 f0		               bne  again
.1aa1	20 7a c2	               jsr  popall
.1aa4	60		               rts
.1aa5			scrollleft
.1aa5	20 3f c2	               jsr  pushall
.1aa8	48		               pha
.1aa9	ad ab 09	               lda  mapaddr
.1aac	85 fb		               sta  $fb
.1aae	ad ac 09	               lda  mapaddr+1
.1ab1	85 fc		               sta  $fc
.1ab3	68		               pla
.1ab4	a0 00		               ldy  #$00
.1ab6	b1 fb		again          lda  (zpage1),y
.1ab8	18		               clc
.1ab9	2a		               rol
.1aba	69 00		               adc  #$00
.1abc	91 fb		               sta  (zpage1),y
.1abe	c8		               iny
.1abf	c0 08		               cpy  #$08
.1ac1	d0 f3		               bne  again
.1ac3	20 7a c2	               jsr  popall
.1ac6	60		               rts
.1ac7			fillchar
.1ac7	08		               php
.1ac8	48		               pha
.1ac9	a9 ff		               lda  #$ff
.1acb	20 db 1a	               jsr  allsame
.1ace	68		               pla
.1acf	28		               plp
.1ad0	60		               rts
.1ad1			clearchar
.1ad1	08		               php
.1ad2	48		               pha
.1ad3	a9 00		               lda  #$00
.1ad5	20 db 1a	               jsr  allsame
.1ad8	68		               pla
.1ad9	28		               plp
.1ada	60		               rts
.1adb			allsame
.1adb	48		               pha
.1adc	ad ab 09	               lda  mapaddr
.1adf	85 fd		               sta  $fd
.1ae1	ad ac 09	               lda  mapaddr+1
.1ae4	85 fe		               sta  $fe
.1ae6	68		               pla
.1ae7	a0 00		               ldy  #$00
.1ae9	91 fd		again          sta  (zpage2),y
.1aeb	c8		               iny
.1aec	c0 08		               cpy  #$08
.1aee	d0 f9		               bne  again
.1af0	60		               rts
.1af1			fliphorz
.1af1	20 3f c2	               jsr  pushall
.1af4	48		               pha
.1af5	ad ab 09	               lda  mapaddr
.1af8	85 fd		               sta  $fd
.1afa	ad ac 09	               lda  mapaddr+1
.1afd	85 fe		               sta  $fe
.1aff	68		               pla
.1b00	a0 00		               ldy  #$00
.1b02	b1 fd		nextbyte       lda  (zpage2),y
.1b04	a2 00		               ldx  #$00
.1b06	2a		rolagain       rol
.1b07	6e 1d 1b	               ror  tmpbyte
.1b0a	e8		               inx
.1b0b	e0 08		               cpx  #$08
.1b0d	30 f7		               bmi  rolagain
.1b0f	ad 1d 1b	               lda  tmpbyte
.1b12	91 fd		               sta  (zpage2),y
.1b14	c8		               iny
.1b15	c0 08		               cpy  #$08
.1b17	30 e9		               bmi  nextbyte
.1b19	20 7a c2	               jsr  popall
.1b1c	60		               rts
>1b1d	00		tmpbyte        .byte     $00
.1b1e			flipvert
.1b1e	20 3f c2	               jsr  pushall
.1b21	48		               pha
.1b22	ad ab 09	               lda  mapaddr
.1b25	85 fd		               sta  $fd
.1b27	ad ac 09	               lda  mapaddr+1
.1b2a	85 fe		               sta  $fe
.1b2c	68		               pla
.1b2d	a0 00		               ldy  #$00
.1b2f	b1 fd		tostack        lda  (zpage2),y
.1b31	48		               pha
.1b32	c8		               iny
.1b33	c0 08		               cpy  #$08
.1b35	d0 f8		               bne  tostack
.1b37	a0 00		               ldy  #$00
.1b39	68		fromstack      pla
.1b3a	91 fd		               sta  (zpage2),y
.1b3c	c8		               iny
.1b3d	c0 08		               cpy  #$08
.1b3f	d0 f8		               bne  fromstack
.1b41	20 7a c2	               jsr  popall
.1b44	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: strings_en.asm

>1b45	0a 01 05	editor_msg     .byte vrose,1,5
>1b48	5b 45 44 49	               .null     "[editor]"
>1b4c	54 4f 52 5d 00
>1b51	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1b55	20 20 20 20	               .null     "                                       "
>1b59	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b69	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1b79	20 20 20 00
>1b7d	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>1b81	20 45 4e 54	               .null     " enter f-key command :"
>1b85	45 52 20 46 2d 4b 45 59 20 43 4f 4d 4d 41 4e 44
>1b95	20 3a 00
>1b98	03 00 05 92	wait_msg       .byte     mesgcol,0,5,146
>1b9c	20 4f 4e 45	               .null     " one moment please ... "
>1ba0	20 4d 4f 4d 45 4e 54 20 50 4c 45 41 53 45 20 2e
>1bb0	2e 2e 20 00
.1bb4			f1a_msg
>1bb4	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>1bb8	20 45 44 49	               .null     " edit mode: chr$(   )",146
>1bbc	54 20 4d 4f 44 45 3a 20 43 48 52 24 28 20 20 20
>1bcc	29 92 00
.1bcf			f2a_msg
>1bcf	03 00 05	copy_msg       .byte     mesgcol,0,5
>1bd2	20 45 4e 54	               .null     " enter character to copy:"
>1bd6	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1be6	43 4f 50 59 3a 00
.1bec			f3a_msg
>1bec	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1bf0	20 53 41 56	               .null     " save on witch device? (1/8/9): "
>1bf4	45 20 4f 4e 20 57 49 54 43 48 20 44 45 56 49 43
>1c04	45 3f 20 28 31 2f 38 2f 39 29 3a 20 00
.1c11			f4a_msg
>1c11	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1c15	20 4c 4f 41	               .null     " load from witch device? (1/8/9): "
>1c19	44 20 46 52 4f 4d 20 57 49 54 43 48 20 44 45 56
>1c29	49 43 45 3f 20 28 31 2f 38 2f 39 29 3a 20 00
.1c38			f5a_msg
>1c38	03 00 05	clear_msg      .byte     mesgcol,0,5
>1c3b	20 43 4c 45	               .null     " clear char: chr$(   )"
>1c3f	41 52 20 43 48 41 52 3a 20 43 48 52 24 28 20 20
>1c4f	20 29 00
.1c52			f6a_msg
>1c52	03 00 05	fill_msg       .byte     mesgcol,0,5
>1c55	20 46 49 4c	               .null     " fill char:  chr$(   )"
>1c59	4c 20 43 48 41 52 3a 20 20 43 48 52 24 28 20 20
>1c69	20 29 00
.1c6c			f7a_msg
>1c6c	03 00 05	work_msg       .byte     mesgcol,0,5
>1c6f	20 52 45 53	               .null     " restoring all characters."
>1c73	54 4f 52 49 4e 47 20 41 4c 4c 20 43 48 41 52 41
>1c83	43 54 45 52 53 2e 00
.1c8a			f1b_msg
>1c8a	03 00 05	invr_msg       .byte     mesgcol,0,5
>1c8d	20 46 4c 49	               .null     " flipping vertically:"
>1c91	50 50 49 4e 47 20 56 45 52 54 49 43 41 4c 4c 59
>1ca1	3a 00
.1ca3			f2b_msg
>1ca3	03 00 05	flip_msg       .byte     mesgcol,0,5
>1ca6	20 46 4c 49	               .null     " flipping horizontally:"
>1caa	50 50 49 4e 47 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1cba	4c 59 3a 00
.1cbe			f3b_msg
>1cbe	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1cc1	20 53 43 52	               .null     " scrolling right:"
>1cc5	4f 4c 4c 49 4e 47 20 52 49 47 48 54 3a 00
.1cd3			f4b_msg
>1cd3	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1cd6	20 53 43 52	               .null     " scrolling left:"
>1cda	4f 4c 4c 49 4e 47 20 4c 45 46 54 3a 00
.1ce7			f5b_msg
>1ce7	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1cea	20 53 43 52	               .null     " scrolling up:"
>1cee	4f 4c 4c 49 4e 47 20 55 50 3a 00
.1cf9			f6b_msg
>1cf9	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1cfc	20 53 43 52	               .null     " scrolling down:"
>1d00	4f 4c 4c 49 4e 47 20 44 4f 57 4e 3a 00
.1d0d			f7b_msg
>1d0d	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1d10	20 52 45 56	               .null     " reverse character:"
>1d14	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1d24	03 00 05	menua_msg      .byte     mesgcol,0,5
>1d27	20 59 4f 55	               .null     " you are being moved to menu 1."
>1d2b	20 41 52 45 20 42 45 49 4e 47 20 4d 4f 56 45 44
>1d3b	20 54 4f 20 4d 45 4e 55 20 31 2e 00
>1d47	03 00 05	menub_msg      .byte     mesgcol,0,5
>1d4a	20 59 4f 55	               .null     " you are being moved to menu 2."
>1d4e	20 41 52 45 20 42 45 49 4e 47 20 4d 4f 56 45 44
>1d5e	20 54 4f 20 4d 45 4e 55 20 32 2e 00
>1d6a	07 00 05	copychar_msg   .byte     vjaune,0,5
>1d6d	20 45 4e 54	               .null     " enter character to copy from (?).",157,157,157
>1d71	45 52 20 43 48 41 52 41 43 54 45 52 20 54 4f 20
>1d81	43 4f 50 59 20 46 52 4f 4d 20 28 3f 29 2e 9d 9d
>1d91	9d 00
>1d93	07 00 05	fname_msg      .byte     vjaune,0,5
>1d96	20 45 4e 54	               .null     " enter a 6 letter filename : ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1d9a	45 52 20 41 20 36 20 4c 45 54 54 45 52 20 46 49
>1daa	4c 45 4e 41 4d 45 20 3a 20 a4 a4 a4 a4 a4 a4 2e
>1dba	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1dc8	04 15 18 12	quit_msg       .byte     vmauve,21,24,18
>1dcc	43 54 52 4c	               .text     "ctrl-x",146
>1dd0	2d 58 92
>1dd3	20 54 4f 20	               .null     " to quit."
>1dd7	51 55 49 54 2e 00
>1ddd	0a 14 16 12	redraw_msg     .byte     vrose,20,22,18
>1de1	43 54 52 4c	               .text     "ctrl-r",146
>1de5	2d 52 92
>1de8	20 54 4f 20	               .null     " to redraw."
>1dec	52 45 44 52 41 57 2e 00
.1df4			menu_msg
>1df4	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1df8	43 54 52 4c	               .text     "ctrl-x",146
>1dfc	2d 58 92
>1dff	20 54 4f 20	               .null     " to menu."
>1e03	4d 45 4e 55 2e 00
>1e09	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1e0d	20 20 20 20	               .null     "                               ",146
>1e11	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1e21	20 20 20 20 20 20 20 20 20 20 20 92 00
>1e2e	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1e32	20 20 20 20	               .null     "          ",146," charedit ",18,"           ",146
>1e36	20 20 20 20 20 20 92 20 43 48 41 52 45 44 49 54
>1e46	20 12 20 20 20 20 20 20 20 20 20 20 20 92 00
>1e55	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1e59	20 20 20 20	               .null     "                               ",146
>1e5d	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1e6d	20 20 20 20 20 20 20 20 20 20 20 92 00
>1e7a	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1e7e	20 20 20 46	               .null     "   from isbn : 0-942386-29-9   ",146
>1e82	52 4f 4d 20 49 53 42 4e 20 3a 20 30 2d 39 34 32
>1e92	33 38 36 2d 32 39 2d 39 20 20 20 92 00
>1e9f	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1ea3	20 20 20 20	               .null     "        by john heilborn       ",146
>1ea7	20 20 20 20 42 59 20 4a 4f 48 4e 20 48 45 49 4c
>1eb7	42 4f 52 4e 20 20 20 20 20 20 20 92 00
>1ec4	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1ec8	20 20 20 20	               .null     "                               ",146
>1ecc	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1edc	20 20 20 20 20 20 20 20 20 20 20 92 00
>1ee9	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1eed	20 43 4f 44	               .null     " coded in assembly language by ",146
>1ef1	45 44 20 49 4e 20 41 53 53 45 4d 42 4c 59 20 4c
>1f01	41 4e 47 55 41 47 45 20 42 59 20 92 00
>1f0e	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1f12	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1f16	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1f26	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1f33	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1f37	20 20 20 20	               .null     "    version:",version,"    ",146
>1f3b	56 45 52 53 49 4f 4e 3a 32 30 32 35 30 34 32 32
>1f4b	2d 32 32 34 32 30 36 20 20 20 20 92 00
>1f58	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1f5c	20 20 20 20	               .null     "                               ",146
>1f60	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1f70	20 20 20 20 20 20 20 20 20 20 20 92 00
>1f7d	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1f81	20 54 48 41	               .null     " thanks and have a good day ",146
>1f85	4e 4b 53 20 41 4e 44 20 48 41 56 45 20 41 20 47
>1f95	4f 4f 44 20 44 41 59 20 92 00
>1f9f	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1fa3	20 20 55 53	               .null         "  use the [anykey] to basic  ",146
>1fa7	45 20 54 48 45 20 5b 41 4e 59 4b 45 59 5d 20 54
>1fb7	4f 20 42 41 53 49 43 20 20 92 00
>1fc2	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1fc5	12 20 20 20	               .null     18,"   function set #1   ",146
>1fc9	46 55 4e 43 54 49 4f 4e 20 53 45 54 20 23 31 20
>1fd9	20 20 92 00
>1fdd	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1fe0	12 20 20 20	               .null     18,"   function set #2   ",146
>1fe4	46 55 4e 43 54 49 4f 4e 20 53 45 54 20 23 32 20
>1ff4	20 20 92 00
>1ff8	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1ffb	45 44 49 54	               .text     "edit character."
>1fff	20 43 48 41 52 41 43 54 45 52 2e
>200a	12		               .byte     18             ; position 15
>200b	a9 20 46 31	               .null     $a9," f1 ",223,146
>200f	20 df 92 00
>2013	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>2016	43 4f 50 59	               .text     "copy from......"
>201a	20 46 52 4f 4d 2e 2e 2e 2e 2e 2e
>2025	12		               .byte     18   ; position 15
>2026	20 20 46 32	               .null     "  f2  ",146
>202a	20 20 92 00
>202e	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>2031	53 41 56 45	               .text     "save to........"
>2035	20 54 4f 2e 2e 2e 2e 2e 2e 2e 2e
>2040	12		               .byte     18            ; position 15
>2041	a9 20 46 33	               .null     $a9," f3 ",223,146
>2045	20 df 92 00
>2049	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>204c	4c 4f 41 44	               .text     "load from......"
>2050	20 46 52 4f 4d 2e 2e 2e 2e 2e 2e
>205b	12		               .byte     18             ; position 15
>205c	20 20 46 34	               .null     "  f4  ",146
>2060	20 20 92 00
>2064	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>2067	43 4c 45 41	               .text     "clear.........."
>206b	52 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e
>2076	12		               .byte     18             ; position 15
>2077	a9 20 46 35	               .null     $a9," f5 ",223,146
>207b	20 df 92 00
>207f	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>2082	46 49 4c 4c	               .text     "fill..........."
>2086	2e 2e 2e 2e 2e 2e 2e 2e 2e 2e 2e
>2091	12		               .byte     18             ; position 15
>2092	20 20 46 36	               .null     "  f6  ",146
>2096	20 20 92 00
>209a	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>209d	52 45 53 54	               .text     "restore all...."
>20a1	4f 52 45 20 41 4c 4c 2e 2e 2e 2e
>20ac	12		               .byte     18             ; position 15
>20ad	a9 20 46 37	               .null     $a9," f7 ",223,146
>20b1	20 df 92 00
>20b5	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>20b8	47 4f 20 54	               .text     "go to menu #2.."
>20bc	4f 20 4d 45 4e 55 20 23 32 2e 2e
>20c7	12		               .byte     18             ; position 15
>20c8	20 20 46 38	               .null     "  f8  ", 146
>20cc	20 20 92 00
>20d0	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>20d3	56 45 52 54	               .text     "vertical flip.."
>20d7	49 43 41 4c 20 46 4c 49 50 2e 2e
>20e2	12		               .byte     18             ; position 15
>20e3	a9 20 46 31	               .null     $a9," f1 ",223,146
>20e7	20 df 92 00
>20eb	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>20ee	48 4f 52 5a	               .text     "horzontal flip."
>20f2	4f 4e 54 41 4c 20 46 4c 49 50 2e
>20fd	12		               .byte     18             ; position 15
>20fe	20 20 46 32	               .null     "  f2  ",146
>2102	20 20 92 00
>2106	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>2109	53 43 52 4f	               .text     "scroll to right"
>210d	4c 4c 20 54 4f 20 52 49 47 48 54
>2118	12		               .byte     18             ; position 15
>2119	a9 20 46 33	               .null     $a9," f3 ",223,146
>211d	20 df 92 00
>2121	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>2124	53 43 52 4f	               .text     "scroll to left."
>2128	4c 4c 20 54 4f 20 4c 45 46 54 2e
>2133	12		               .byte     18             ; position 15
>2134	20 20 46 34	               .null     "  f4  ",146
>2138	20 20 92 00
>213c	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>213f	53 43 52 4f	               .text     "scroll up......"
>2143	4c 4c 20 55 50 2e 2e 2e 2e 2e 2e
>214e	12		               .byte     18             ; position 15
>214f	a9 20 46 35	               .null     $a9," f5 ",223,146
>2153	20 df 92 00
>2157	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>215a	53 43 52 4f	               .text     "scroll down...."
>215e	4c 4c 20 44 4f 57 4e 2e 2e 2e 2e
>2169	12		               .byte     18             ; position 15
>216a	20 20 46 36	               .null     "  f6  ",146
>216e	20 20 92 00
>2172	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>2175	52 45 56 45	               .text     "reverse bits..."
>2179	52 53 45 20 42 49 54 53 2e 2e 2e
>2184	12		               .byte     18             ; position 15
>2185	a9 20 46 37	               .null     $a9," f7 ",223,146
>2189	20 df 92 00
>218d	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>2190	47 4f 20 54	               .text     "go to menu #1.."
>2194	4f 20 4d 45 4e 55 20 23 31 2e 2e
>219f	12		               .byte     18             ; position 15
>21a0	20 20 46 38	               .null     "  f8  ", 146
>21a4	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>21a8	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>21ac	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.21b0	20 54 08	libtart        jsr  main           ; Programme principale doit s'appeler "main"

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.c000			screendis
.c000	08		               php
.c001	48		               pha
.c002	ad 11 d0	               lda  $d011
.c005	29 ef		               and  #%11101111
.c007	8d 11 d0	               sta  $d011
.c00a	68		               pla
.c00b	28		               plp
.c00c	60		               rts
.c00d			screenena
.c00d	08		               php
.c00e	48		               pha
.c00f	ad 11 d0	               lda  $d011
.c012	09 10		               ora  #%00010000
.c014	8d 11 d0	               sta  $d011
.c017	68		               pla
.c018	28		               plp
.c019	60		               rts
=8192			bmpram = 8192
.c01a			victohighres
.c01a	08		               php
.c01b	48		               pha
.c01c	ad 11 d0	               lda  vicmiscfnc
.c01f	09 20		               ora  #%00100000     ; 32
.c021	8d 11 d0	               sta  vicmiscfnc
.c024	ad 18 d0	               lda  vicmemptr
.c027	09 08		               ora  #%00001000     ; $08
.c029	8d 18 d0	               sta  vicmemptr
.c02c	a9 ff		               lda  #$ff           ; 255
.c02e	85 37		               sta  $0037
.c030	a9 1f		               lda  #$1f           ; 31
.c032	85 38		               sta  $0038
.c034	68		               pla
.c035	28		               plp
.c036	60		               rts
.c037			victonormal
.c037	08		               php
.c038	48		               pha
.c039	ad 11 d0	               lda  vicmiscfnc
.c03c	29 df		               and  #%11011111     ; 233
.c03e	8d 11 d0	               sta  vicmiscfnc
.c041	ad 18 d0	               lda  vicmemptr
.c044	29 f7		               and  #%11110111     ; $08
.c046	8d 18 d0	               sta  vicmemptr
.c049	a9 00		               lda  #$00
.c04b	85 37		               sta  $0037
.c04d	a9 a0		               lda  #$a0
.c04f	85 38		               sta  $0038
.c051	20 2c c1	               jsr  cls
.c054	68		               pla
.c055	28		               plp
.c056	60		               rts
.c057			vicbmpclear
.c057	20 3f c2	               jsr  push
.c05a	a9 04		               lda  #cmauve
.c05c	20 85 c0	               jsr  setvicbmpbackcol
.c05f	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.c061	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.c063	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.c065	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.c067	48		               pha
.c068	a9 ff		               lda  #<$0000+(8191)
.c06a	8d 63 c4	               sta  loopcount
.c06d	a9 1f		               lda  #>$0000+(8191)
.c06f	8d 64 c4	               sta  loopcount+1
.c072	68		               pla
.c073	a0 00		               ldy  #$00
.c075	a9 0f		next           lda  #$0f
.c077	91 fb		               sta  (zpage1),y
.c079	20 94 c3	               jsr  inczpage1
.c07c	20 43 c4	               jsr  loop
.c07f	d0 f4		               bne  next
.c081	20 7a c2	               jsr  pop
.c084	60		               rts
.c085			setvicbmpbackcol
.c085	20 3f c2	               jsr  push
.c088	29 0f		               and  #$0f
.c08a	8d b8 c0	               sta  vicbmpbackcol
.c08d	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.c08f	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.c091	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.c093	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.c095	48		               pha
.c096	a9 00		               lda  #<$0000+(1024)
.c098	8d 63 c4	               sta  loopcount
.c09b	a9 04		               lda  #>$0000+(1024)
.c09d	8d 64 c4	               sta  loopcount+1
.c0a0	68		               pla
.c0a1	a0 00		               ldy  #$00
.c0a3	b1 fb		next           lda  (zpage1),y
.c0a5	29 f0		               and  #$f0
.c0a7	0d b8 c0	               ora  vicbmpbackcol
.c0aa	91 fb		               sta  (zpage1),y
.c0ac	20 94 c3	               jsr  inczpage1
.c0af	20 43 c4	               jsr  loop
.c0b2	d0 ef		               bne  next
.c0b4	20 7a c2	               jsr  pop
.c0b7	60		               rts
>c0b8	00		vicbmpbackcol  .byte     $00
.c0b9			setvicbmpforecol
.c0b9	20 3f c2	               jsr  push
.c0bc	2a		               rol
.c0bd	2a		               rol
.c0be	2a		               rol
.c0bf	2a		               rol
.c0c0	29 f0		               and  #$f0
.c0c2	8d f0 c0	               sta  vicbmpforecol
.c0c5	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.c0c7	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.c0c9	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.c0cb	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.c0cd	48		               pha
.c0ce	a9 00		               lda  #<$0000+(1024)
.c0d0	8d 63 c4	               sta  loopcount
.c0d3	a9 04		               lda  #>$0000+(1024)
.c0d5	8d 64 c4	               sta  loopcount+1
.c0d8	68		               pla
.c0d9	a0 00		               ldy  #$00
.c0db	b1 fb		next           lda  (zpage1),y
.c0dd	29 0f		               and  #$0f
.c0df	0d f0 c0	               ora  vicbmpforecol
.c0e2	91 fb		               sta  (zpage1),y
.c0e4	20 94 c3	               jsr  inczpage1
.c0e7	20 43 c4	               jsr  loop
.c0ea	d0 ef		               bne  next
.c0ec	20 7a c2	               jsr  pop
.c0ef	60		               rts
>c0f0	00		vicbmpforecol  .byte     $00
.c0f1			bmphrcalccoords
.c0f1	20 3f c2	               jsr  push
.c0f4	18		               clc       ; On met Carry à 0
.c0f5	6a		               ror       ; le bit 0 de a dans carry  ?/2
.c0f6	8a		               txa       ; x dans a
.c0f7	4a		               lsr       ; ?/4
.c0f8	4a		               lsr       ; ?/8 a = (ax)/8
.c0f9	8d 0a c1	               sta  bmphrcol
.c0fc	98		               tya       ; Y dans a
.c0fd	4a		               lsr       ; ?/2
.c0fe	4a		               lsr       ; ?/4
.c0ff	4a		               lsr       ; ?/8 a=Y/8
.c100	8d 09 c1	               sta  bmphrrow
.c103	48		               pha
.c104	98		               tya
.c105	20 7a c2	               jsr  pop
.c108	60		               rts
.c109			vicbmpfill
>c109	00		bmphrrow       .byte     $00
>c10a	00		bmphrcol       .byte     $00
>c10b	00		bmphrmask      .byte     $00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.c10c			scrmaninit
.c10c	20 ad c2	               jsr  pushreg        ; Sauvegarde tous les registres
.c10f	20 00 c0	               jsr  screendis      ; Disable screen
.c112	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.c114	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.c117	a9 05		               lda  #vvert         ; vert pour la couleur
.c119	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.c11c	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.c11e	8d 86 02	               sta  bascol         ; texte.
.c121	20 2c c1	               jsr  cls            ; Efface l'écran.
.c124	20 0d c0	               jsr  screenena      ; enable screen
.c127	20 dc c2	               jsr  popreg         ; Récupère tous les registres.
.c12a	60		               rts
>c12b	8e		characterset   .byte b_uppercase
.c12c			cls
.c12c	08		               php                 ; Sauvegarde les registres
.c12d	48		               pha                 ;   modifiés.
.c12e	a9 93		               lda  #$93           ; Affiche le code basic de
.c130	20 43 c1	               jsr  putch          ;   d'effacement d'écran.
.c133	68		               pla                 ; Récupère les registres
.c134	28		               plp                 ;   modifiés.
.c135	60		               rts
.c136			putnch
.c136	20 ad c2	               jsr  pushreg        ; Sauvegarde tous les registres.
.c139	20 d2 ff	again          jsr  $ffd2          ; On affiche A.
.c13c	ca		               dex                 ; Un de moins à faire.
.c13d	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.c13f	20 dc c2	out            jsr  popreg         ; Récupère tous les registres.
.c142	60		               rts
.c143			putch
.c143	08		               php                 ; Sauvegarde le registre de status.
.c144	20 d2 ff	               jsr  $ffd2          ; Affiche le caractère de Acc.
.c147	28		               plp                 ; Récupère le registre de status.
.c148	60		               rts
.c149			puts
.c149	20 3f c2	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.c14c	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.c14e	84 fc		               sty  zpage1+1       ;   dans ZP1.
.c150	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.c152	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.c154	f0 09		               beq  exit           ; Si $00 on sort.
.c156	20 43 c1	               jsr  putch          ; Affiche le caractères.
.c159	20 94 c3	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c15c	4c 52 c1	               jmp  next           ; Saute chercher le prochain carac.
.c15f	20 7a c2	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.c162	60		               rts
.c163			gotoxy
.c163	08		               php                 ; Sauvegarde le registre de
.c164	48		               pha                 ;   status et le registre a.
.c165	18		               clc                 ; Carry = 1 pour que kplot
.c166	8a		               txa                 ;   positionne le curseur.
.c167	48		               pha                 ; On inverse X et Y pcq kplot
.c168	98		               tya                 ;
.c169	aa		               tax                 ;   prend X comme la ligne
.c16a	68		               pla                 ;
.c16b	a8		               tay                 ;   et Y comme la colonne.
.c16c	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.c16f	68		               pla                 ; Récupère le registre a et
.c170	28		               plp                 ;   le registre de status.
.c171	60		               rts
.c172			cursor
=$0286			bascol    =    $0286               ; debugme
.c172	20 ad c2	               jsr  pushreg        ; Sauvegarde tous les registres.
.c175	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.c177	20 f0 ff	               jsr  kplot          ; On récupère la position du
.c17a	8c 9c c1	               sty  cx             ;   curseur et on la sauvegarde
.c17d	8e 9d c1	               stx  cy             ;   dans les vars locales.
.c180	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.c183	8d 9e c1	               sta  bcol           ; BASIC du texte.
.c186	4c 98 c1	               jmp  out            ; c'est fini on sort.
.c189	ae 9d c1	restore        ldx  cy             ; Comme C=1, On charge x avec
.c18c	ac 9c c1	               ldy  cx             ;   la ligne, y ace  la col.
.c18f	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.c192	ad 9e c1	               lda  bcol           ; On replace la couleur par basic
.c195	8d 86 02	               sta  bascol         ;   sauvegardé.
.c198	20 dc c2	out            jsr  popreg         ; Récupère tous les registres.
.c19b	60		               rts
>c19c	00		cx   .byte     $00
>c19d	00		cy   .byte     $00
>c19e	00		bcol .byte     $00
.c19f			cursave
.c19f	08		               php
.c1a0	38		               sec
.c1a1	20 72 c1	               jsr  cursor         ; Voir cette fonction plus haut.
.c1a4	28		               plp
.c1a5	60		               rts
.c1a6			curput
.c1a6	08		               php
.c1a7	18		               clc
.c1a8	20 72 c1	               jsr  cursor         ; Voir cette fonction plus haut.
.c1ab	28		               plp
.c1ac	60		               rts
.c1ad			putsxy
.c1ad	20 3f c2	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.c1b0	86 fb		               stx  zpage1         ; On place la position de la
.c1b2	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.c1b4	a0 00		               ldy  #$00           ; On charge l'index à 0.
.c1b6	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.c1b8	aa		               tax                 ;   dans X.
.c1b9	20 94 c3	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c1bc	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.c1be	a8		               tay                 ; dans Y.
.c1bf	20 63 c1	               jsr  gotoxy         ; on positionne le curseur.
.c1c2	20 94 c3	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c1c5	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.c1c7	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.c1c9	20 49 c1	               jsr  puts           ;   l'affiche.
.c1cc	20 7a c2	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.c1cf	60		               rts
>c1d0	00 00		straddr   .word     $00
>c1d2	00		px        .byte     $00
>c1d3	00		py        .byte     $00
>c1d4	00 00		zp1       .word     $00
.c1d6			putscxy
.c1d6	20 3f c2	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.c1d9	86 fb		               stx  zpage1         ; On place la position de la
.c1db	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.c1dd	a0 00		               ldy  #$00           ; On charge l'index à 0.
.c1df	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.c1e2	48		               pha                 ;   actuelle de basic.
.c1e3	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.c1e5	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.c1e8	20 94 c3	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c1eb	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.c1ed	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.c1ef	20 ad c1	               jsr  putsxy         ;   l'affiche.
.c1f2	68		               pla                 ; On replace la couleur basic
.c1f3	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.c1f6	20 7a c2	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.c1f9	60		               rts
.c1fa			putrahex
.c1fa	20 ad c2	               jsr  pushreg        ; Sauvegarde tous les registres.
.c1fd	20 cd c4	               jsr  atohex         ; Conversion de a chaîne hexa.
.c200	a2 6a		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.c202	a0 c4		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.c204	20 49 c1	               jsr  puts           ; Affiche la chaîne.
.c207	20 dc c2	               jsr  popreg         ; Récupère tous les registres.
.c20a	60		               rts
.c20b			kputrahexxy
.c20b			bputrahexxy
.c20b			putrahexxy
.c20b	08		               php                 ; Sauvegarde le registre de
.c20c	48		               pha                 ;   status et le registre a.
.c20d	20 cd c4	               jsr  atohex         ; Convertion de a en hexadécimal.
.c210	a2 67		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.c212	a0 c4		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.c214	20 ad c1	               jsr  putsxy         ; Positionne et affiche la chaîne.
.c217	68		               pla                 ; Récupère le registre a et
.c218	28		               plp                 ;   le registre de status.
.c219	60		               rts
.c21a			putrahexcxy
.c21a	20 ad c2	               jsr  pushreg        ; Sauvegarde tous les registres.
.c21d	20 cd c4	               jsr  atohex         ; Convertion de a en hexadécimal.
.c220	a2 67		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.c222	a0 c4		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.c224	20 ad c1	               jsr  putsxy         ; Colore, positionne et affiche la
.c227	20 dc c2	               jsr  popreg         ; Récupère tous les registres.
.c22a	60		               rts
.c22b			setinverse
.c22b	48		               pha
.c22c	a9 12		               lda  #$12
.c22e	20 d2 ff	               jsr  $ffd2
.c231	68		               pla
.c232	60		               rts
.c233			clrinverse
.c233	48		               pha
.c234	a9 92		               lda  #$92
.c236	20 d2 ff	               jsr  $ffd2
.c239	68		               pla
.c23a	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>c23b	00		rp        .byte     0
>c23c	00		ra        .byte     0
>c23d	00 00		pc        .word     0
.c23f			pushall
.c23f			push
.c23f	08		          php            ; stack : flg, pcl, pch
.c240	78		          sei
.c241	8d 3c c2	          sta  ra        ; save a
.c244	68		          pla            ; stack : pcl, pch
.c245	8d 3b c2	          sta  rp        ; save rp
.c248	68		          pla            ; stack : pch
.c249	8d 3d c2	          sta  pc        ; save pcl
.c24c	68		          pla            ; stack : -
.c24d	8d 3e c2	          sta  pc+1      ; save pch
.c250	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c252	48		          pha            ; stack : zp1l
.c253	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c255	48		          pha            ; stack : zp1h, zp1l
.c256	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c258	48		          pha            ; stack : zp2l, zp1h, zp1l
.c259	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c25b	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c25c	ad 3b c2	          lda  rp        ; get rp
.c25f	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c260	ad 3c c2	          lda  ra        ; get a
.c263	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c264	8a		          txa            ; get x
.c265	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c266	98		          tya            ; get y
.c267	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c268	ad 3e c2	          lda  pc+1      ; get pch
.c26b	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c26c	ad 3d c2	          lda  pc        ; get pcl
.c26f	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c270	ad 3b c2	          lda  rp        ; get rp
.c273	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c274	ad 3c c2	          lda  ra        ; get a
.c277	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c278	58		          cli
.c279	60		          rts
.c27a			pullall
.c27a			pull
.c27a			popall
.c27a			pop
.c27a	78		          sei
.c27b	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c27c	8d 3d c2	          sta  pc        ; save pcl
.c27f	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c280	8d 3e c2	          sta  pc+1      ; save pch
.c283	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c284	a8		          tay            ; set y
.c285	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c286	aa		          tax            ; set x
.c287	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c288	8d 3c c2	          sta  ra        ; save a
.c28b	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c28c	8d 3b c2	          sta  rp        ; save rp
.c28f	68		          pla            ; stack : zp2l, zp1h, zp1l
.c290	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c292	68		          pla            ; stack : zp1h, zp1l
.c293	85 fd		          sta  zpage2    ; get zpage2 High byte
.c295	68		          pla            ; stack : zp1l
.c296	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c298	68		          pla            ; stack :
.c299	85 fb		          sta  zpage1    ; get zpage1 High byte
.c29b	ad 3e c2	          lda  pc+1      ; get pch
.c29e	48		          pha            ; stack : pch
.c29f	ad 3d c2	          lda  pc
.c2a2	48		          pha            ; stack : pcl, pch
.c2a3	ad 3b c2	          lda  rp        ; get rp
.c2a6	48		          pha            ; stack : rp, pcl, pch
.c2a7	ad 3c c2	          lda  ra        ; set ra
.c2aa	58		          cli
.c2ab	28		          plp            ; stack : pcl, pch
.c2ac	60		          rts
.c2ad			pushreg
.c2ad	08		          php            ; stack : flg, pcl, pch
.c2ae	78		          sei
.c2af	8d 3c c2	          sta  ra        ; save a
.c2b2	68		          pla            ; stack : pcl, pch
.c2b3	8d 3b c2	          sta  rp        ; save rp
.c2b6	68		          pla            ; stack : pch
.c2b7	8d 3d c2	          sta  pc        ; save pcl
.c2ba	68		          pla            ; stack : -
.c2bb	8d 3e c2	          sta  pc+1      ; save pch
.c2be	ad 3b c2	          lda  rp        ; get rp
.c2c1	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c2c2	ad 3c c2	          lda  ra        ; get a
.c2c5	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c2c6	8a		          txa            ; get x
.c2c7	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2c8	98		          tya            ; get y
.c2c9	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2ca	ad 3e c2	          lda  pc+1      ; get pch
.c2cd	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2ce	ad 3d c2	          lda  pc        ; get pcl
.c2d1	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2d2	ad 3b c2	          lda  rp        ; get rp
.c2d5	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2d6	ad 3c c2	          lda  ra        ; get a
.c2d9	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2da	58		          cli
.c2db	60		          rts
.c2dc			pullreg
.c2dc			popreg
.c2dc	78		          sei
.c2dd	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2de	8d 3d c2	          sta  pc        ; save pcl
.c2e1	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2e2	8d 3e c2	          sta  pc+1      ; save pch
.c2e5	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2e6	a8		          tay            ; set y
.c2e7	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c2e8	aa		          tax            ; set x
.c2e9	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c2ea	8d 3c c2	          sta  ra        ; save a
.c2ed	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c2ee	8d 3b c2	          sta  rp        ; save rp
.c2f1	ad 3e c2	          lda  pc+1      ; get pch
.c2f4	48		          pha            ; stack : pch
.c2f5	ad 3d c2	          lda  pc
.c2f8	48		          pha            ; stack : pcl, pch
.c2f9	ad 3b c2	          lda  rp        ; get rp
.c2fc	48		          pha            ; stack : rp, pcl, pch
.c2fd	ad 3c c2	          lda  ra        ; set ra
.c300	58		          cli
.c301	28		          plp            ; stack : pcl, pch
.c302	60		          rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c303			blkfill
.c303	20 3f c2	bf0            jsr  push
.c306	20 ce c3	               jsr  savezp1
.c309	84 fc		               sty  zpage1+1
.c30b	a0 00		               ldy  #$00
.c30d	84 fb		               sty  zpage1
.c30f	91 fb		bf1            sta  (zpage1),y
.c311	c8		               iny
.c312	d0 fb		               bne  bf1
.c314	20 dd c3	               jsr  restzp1
.c317	20 7a c2	               jsr  pop
.c31a	60		               rts
.c31b			memfill
.c31b	20 3f c2	               jsr  push
.c31e	20 03 c3	mf1            jsr  blkfill
.c321	c8		               iny
.c322	ca		               dex
.c323	d0 f9		               bne  mf1
.c325	20 7a c2	               jsr  pop
.c328	60		               rts
.c329			memmove
.c329	20 3f c2	               jsr  push
.c32c	ba		               tsx            ; On se crée un pointeur ...
.c32d	8a		               txa
.c32e	18		               clc
.c32f	69 0b		               adc  #11
.c331	a8		               tay
.c332	a2 06		               ldx  #$06
.c334	b9 00 01	nextbyte       lda  $0100,y
.c337	99 83 c3	               sta  words,y
.c33a	c8		               iny
.c33b	ca		               dex
.c33c	d0 f6		               bne  nextbyte
.c33e	ad 83 c3	               lda  s
.c341	8d 5a c3	               sta  source+1
.c344	ad 84 c3	               lda  s+1
.c347	8d 5b c3	               sta  source+2
.c34a	ad 85 c3	               lda  d
.c34d	8d 57 c3	               sta  destin+1
.c350	ad 86 c3	               lda  d+1
.c353	8d 58 c3	               sta  destin+2
.c356	ad ff ff	destin         lda  $ffff
.c359	8d ff ff	source         sta  $ffff
.c35c	ee 57 c3	               inc  destin+1
.c35f	d0 03		               bne  src
.c361	ee 58 c3	               inc  destin+2
.c364	ee 5a c3	src            inc  source+1
.c367	d0 03		               bne  cnt
.c369	ee 5b c3	               inc  source+2
.c36c	ad 87 c3	cnt            lda  compte
.c36f	d0 08		               bne  decit
.c371	ad 88 c3	               lda  compte+1
.c374	f0 09		               beq  fini
.c376	ce 88 c3	               dec  compte+1
.c379	ce 87 c3	decit          dec  compte
.c37c	4c 56 c3	               jmp  destin
.c37f	20 7a c2	fini           jsr  pop
.c382	60		               rts
.c383			words
>c383	00 00		s         .word     $0000
>c385	00 00		d         .word     $0000
>c387	00 00		compte    .word     $0000
.c389			decword
.c389	20 3f c2	               jsr  push
.c38c	86 fd		               stx  zpage2
.c38e	84 fe		               sty  zpage2+1
.c390	20 7a c2	               jsr  pop
.c393	60		               rts
.c394			inczpage1
.c394			inczp1
.c394	08		               php
.c395	48		               pha
.c396	e6 fb		               inc  zpage1
.c398	a5 fb		               lda  zpage1
.c39a	d0 02		               bne  nopage
.c39c	e6 fc		               inc  zpage1+1
.c39e	68		nopage         pla
.c39f	28		               plp
.c3a0	60		               rts
.c3a1			deczpage1
.c3a1			deczp1
.c3a1	08		               php
.c3a2	48		               pha
.c3a3	c6 fb		               dec  zpage1
.c3a5	a5 fb		               lda  zpage1
.c3a7	c9 ff		               cmp  #$ff
.c3a9	f0 02		               beq  report
.c3ab	d0 02		               bne  nopage
.c3ad	c6 fc		report         dec  zpage1+1
.c3af	68		nopage         pla
.c3b0	28		               plp
.c3b1	60		               rts
.c3b2			inczpage2
.c3b2			inczp2
.c3b2	08		               php
.c3b3	48		               pha
.c3b4	e6 fd		               inc  zpage2
.c3b6	a5 fd		               lda  zpage2
.c3b8	d0 02		               bne  nopage
.c3ba	e6 fe		               inc  zpage2+1
.c3bc	68		nopage         pla
.c3bd	28		               plp
.c3be	60		               rts
.c3bf			deczpage2
.c3bf			deczp2
.c3bf	08		               php
.c3c0	c6 fd		               dec  zpage2
.c3c2	a5 fd		               lda  zpage2
.c3c4	c9 ff		               cmp  #$ff
.c3c6	f0 02		               beq  report
.c3c8	d0 02		               bne  nopage
.c3ca	c6 fe		report         dec  zpage2+1
.c3cc	28		nopage         plp
.c3cd	60		               rts
.c3ce			savezp1
.c3ce	08		               php
.c3cf	48		               pha
.c3d0	a5 fb		               lda  zpage1
.c3d2	8d 5f c4	               sta  zp1
.c3d5	a5 fc		               lda  zpage1+1
.c3d7	8d 60 c4	               sta  zp1+1
.c3da	68		               pla
.c3db	28		               plp
.c3dc	60		               rts
.c3dd			restzp1
.c3dd	08		               php
.c3de	48		               pha
.c3df	ad 5f c4	               lda  zp1
.c3e2	85 fb		               sta  zpage1
.c3e4	ad 60 c4	               lda  zp1+1
.c3e7	85 fc		               sta  zpage1+1
.c3e9	68		               pla
.c3ea	28		               plp
.c3eb	60		               rts
.c3ec			savezp2
.c3ec	08		               php
.c3ed	48		               pha
.c3ee	a5 fd		               lda  zpage2
.c3f0	8d 61 c4	               sta  zp2
.c3f3	a5 fe		               lda  zpage2+1
.c3f5	8d 62 c4	               sta  zp2+1
.c3f8	68		               pla
.c3f9	28		               plp
.c3fa	60		               rts
.c3fb			restzp2
.c3fb	08		               php
.c3fc	48		               pha
.c3fd	ad 61 c4	               lda  zp2
.c400	85 fd		               sta  zpage2
.c402	ad 62 c4	               lda  zp2+1
.c405	85 fe		               sta  zpage2+1
.c407	68		               pla
.c408	28		               plp
.c409	60		               rts
.c40a			xy2addr
.c40a	08		               php
.c40b	48		               pha
.c40c	8a		               txa
.c40d	48		               pha
.c40e	98		               tya
.c40f	48		               pha
.c410	ad 5a c4	               lda  addr1+1
.c413	8d 5c c4	               sta  addr2+1
.c416	ad 59 c4	               lda  addr1
.c419	8d 5b c4	               sta  addr2
.c41c	c0 00		               cpy  #$00
.c41e	f0 0f		               beq  addx
.c420	18		moreline       clc
.c421	6d 58 c4	               adc  ymult
.c424	90 03		               bcc  norepy
.c426	ee 5c c4	               inc  addr2+1
.c429	8d 5b c4	norepy         sta  addr2
.c42c	88		               dey
.c42d	d0 f1		               bne  moreline
.c42f	8a		addx           txa
.c430	18		               clc
.c431	6d 5b c4	               adc  addr2
.c434	90 03		               bcc  thatsit
.c436	ee 5c c4	               inc  addr2+1
.c439	8d 5b c4	thatsit        sta  addr2
.c43c	68		               pla
.c43d	a8		               tay
.c43e	68		               pla
.c43f	aa		               tax
.c440	68		               pla
.c441	28		               plp
.c442	60		               rts
.c443			loop
.c443	ce 63 c4	               dec  loopcount
.c446	d0 03		               bne  norep
.c448	ce 64 c4	               dec  loopcount+1
.c44b	ad 63 c4	norep          lda  loopcount
.c44e	c9 00		               cmp  #$00
.c450	d0 05		               bne  out
.c452	4d 64 c4	               eor  loopcount+1
.c455	c9 ff		               cmp  #$ff
.c457	60		out            rts
>c458	28		ymult          .byte     40
>c459	00 00		addr1          .word     $0000
>c45b	00 00		addr2          .word     $0000
>c45d	00 00		bytecnt        .word     $0000
>c45f	00 00		zp1            .word     $0000
>c461	00 00		zp2            .word     $0000
>c463	00 00		loopcount      .word     $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c465	01		a2hexcol       .byte     1              ; pour aputscxy
>c466	00		a2hexbkcol     .byte     %00000000
.c467			a2hexpos
>c467	00		a2hexpx        .byte     0              ; pour aputsxy
>c468	00		a2hexpy        .byte     0
>c469	24		a2hexprefix    .byte     "$"            ; pour aputs
>c46a	00 00		a2hexstr       .word     $00
>c46c	00 00		               .word     $00
>c46e	00		               .byte     0              ; 0 end string
>c46f	01		abincol        .byte     1
>c470	00		abinbkcol      .byte     %00000000
>c471	30 30 30 30	abin           .null     "00000000"
>c475	30 30 30 30 00
>c47a	20 20 20 00	adec           .null     "   "
.c47e			putahexfmtxy
.c47e	20 3f c2	               jsr  push
.c481	20 cd c4	               jsr  atohex
.c484	ae 67 c4	               ldx  a2hexpx
.c487	ac 68 c4	               ldy  a2hexpy
.c48a	20 63 c1	               jsr  gotoxy
.c48d	a2 69		               ldx  #<a2hexprefix
.c48f	a0 c4		               ldy  #>a2hexprefix
.c491	20 49 c1	               jsr  puts
.c494	20 7a c2	               jsr  pop
.c497	60		               rts
.c498			putahexfmt
.c498	20 3f c2	               jsr  push
.c49b	20 cd c4	               jsr  atohex
.c49e	a2 69		               ldx  #<a2hexprefix
.c4a0	a0 c4		               ldy  #>a2hexprefix
.c4a2	20 49 c1	               jsr  puts
.c4a5	20 7a c2	               jsr  pop
.c4a8	60		               rts
.c4a9			putahex
.c4a9	20 3f c2	               jsr  push
.c4ac	20 cd c4	               jsr  atohex
.c4af	a2 6a		               ldx  #<a2hexstr
.c4b1	a0 c4		               ldy  #>a2hexstr
.c4b3	20 49 c1	               jsr  puts
.c4b6	20 7a c2	               jsr  pop
.c4b9	60		               rts
.c4ba			nibtohex
.c4ba	08		               php
.c4bb	29 0f		               and  #$0f
.c4bd	f8		               sed
.c4be	18		               clc
.c4bf	69 90		               adc  #$90
.c4c1	69 40		               adc  #$40
.c4c3	d8		               cld
.c4c4	28		               plp
.c4c5	60		               rts
.c4c6			lsra4bits
.c4c6	08		               php
.c4c7	4a		               lsr
.c4c8	4a		               lsr
.c4c9	4a		               lsr
.c4ca	4a		               lsr
.c4cb	28		               plp
.c4cc	60		               rts
.c4cd			atohex
.c4cd	08		               php
.c4ce	48		               pha
.c4cf	48		               pha
.c4d0	20 c6 c4	               jsr  lsra4bits
.c4d3	20 ba c4	               jsr  nibtohex
.c4d6	8d 6a c4	               sta  a2hexstr
.c4d9	68		               pla
.c4da	20 ba c4	               jsr  nibtohex
.c4dd	8d 6b c4	               sta  a2hexstr+1
.c4e0	a9 00		               lda  #$00                ; set end of string
.c4e2	8d 6c c4	               sta  a2hexstr+2
.c4e5	68		               pla
.c4e6	28		               plp
.c4e7	60		               rts
.c4e8			xy2hex
.c4e8	20 3f c2	               jsr  push
.c4eb	20 cd c4	               jsr  atohex
.c4ee	8a		               txa
.c4ef	48		               pha
.c4f0	20 c6 c4	               jsr  lsra4bits
.c4f3	20 ba c4	               jsr  nibtohex
.c4f6	8d 6a c4	               sta  a2hexstr
.c4f9	68		               pla
.c4fa	20 ba c4	               jsr  nibtohex
.c4fd	8d 6b c4	               sta  a2hexstr+1
.c500	98		               tya
.c501	48		               pha
.c502	20 c6 c4	               jsr  lsra4bits
.c505	20 ba c4	               jsr  nibtohex
.c508	8d 6c c4	               sta  a2hexstr+2
.c50b	68		               pla
.c50c	20 ba c4	               jsr  nibtohex
.c50f	8d 6d c4	               sta  a2hexstr+3
.c512	a9 00		               lda  #$00                ; 0 ended string
.c514	8d 6e c4	               sta  a2hexstr+4
.c517	20 7a c2	               jsr  pop
.c51a			atobin
.c51a	20 3f c2	               jsr  push
.c51d	a2 08		               ldx  #8
.c51f	a0 00		               ldy  #0
.c521	18		               clc
.c522	2a		nextbit        rol
.c523	48		               pha
.c524	69 00		               adc  #$00
.c526	29 01		               and  #$01
.c528	20 ba c4	               jsr  nibtohex
.c52b	99 71 c4	               sta  abin,y
.c52e	68		               pla
.c52f	c8		               iny
.c530	ca		               dex
.c531	d0 ef		               bne  nextbit
.c533	a9 00		               lda  #0
.c535	99 71 c4	               sta  abin,y
.c538	20 7a c2	               jsr  pull
.c53b	60		               rts
.c53c			abinsetmccol
.c53c	20 ad c2	               jsr  pushreg
.c53f	20 dc c2	               jsr  popreg
.c542	60		               rts
.c543			putabin
.c543	20 1a c5	               jsr     atobin
.c546	20 3f c2	               jsr     push
.c549	a2 71		               ldx     #<abin
.c54b	a0 c4		               ldy     #>abin
.c54d	20 49 c1	               jsr     puts
.c550	20 7a c2	               jsr     pop
.c553	60		               rts
.c554			printabin
.c554	20 3f c2	               jsr     push
.c557	a2 71		               ldx     #<abin
.c559	a0 c4		               ldy     #>abin
.c55b	20 49 c1	               jsr     puts
.c55e	20 7a c2	               jsr     pop
.c561	60		               rts
.c562			putabinfmt
.c562	08		               php
.c563	48		               pha
.c564	a9 25		               lda     #"%"
.c566	20 43 c1	               jsr     putch
.c569	68		               pla
.c56a	20 43 c5	               jsr     putabin
.c56d	28		               plp
.c56e	60		               rts
.c56f			putabinxy
.c56f	20 63 c1	               jsr     gotoxy
.c572	20 43 c5	               jsr     putabin
.c575	60		               rts
.c576			putabinfmtxy
.c576	20 63 c1	               jsr     gotoxy
.c579	20 62 c5	               jsr     putabinfmt
.c57c	60		               rts
.c57d			atodec
.c57d	20 3f c2	               jsr  push
.c580	f8		               sed            ; On se place en mode décimal.
.c581	aa		               tax            ; On déplace a dans x.
.c582	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.c584	a9 00		               lda  #$00      ; 0 dans A.
.c586	18		nextbit        clc            ; Bit carry a 0.
.c587	69 01		               adc  #$01      ; Ajoute 1 a A.
.c589	90 01		               bcc  decx      ; Pas de carry, pas de report.
.c58b	c8		               iny            ; On incrémente Y
.c58c	ca		decx           dex            ; X=X-1
.c58d	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.c58f	48		               pha            ; A sur le stack.
.c590	98		               tya            ; Y dans A (MSB)
.c591	20 ba c4	               jsr  nibtohex  ; a hex petsci ...
.c594	8d 7a c4	               sta  adec      ; ... dans tampon.
.c597	68		               pla            ; Récupere A
.c598	48		               pha            ;
.c599	20 ba c4	               jsr  nibtohex
.c59c	8d 7c c4	               sta  adec+2
.c59f	68		               pla
.c5a0	6a		               ror
.c5a1	6a		               ror
.c5a2	6a		               ror
.c5a3	6a		               ror
.c5a4	20 ba c4	               jsr  nibtohex
.c5a7	8d 7b c4	               sta  adec+1
.c5aa	d8		               cld            ; On revient en mode binaire.
.c5ab	20 7a c2	               jsr  pull
.c5ae	60		               rts
.c5af			putadec
.c5af	20 3f c2	               jsr  push
.c5b2	20 7d c5	               jsr  atodec
.c5b5	a2 7a		               ldx  #<adec
.c5b7	a0 c4		               ldy  #>adec+1
.c5b9	20 49 c1	               jsr  puts
.c5bc	20 7a c2	               jsr  pop
.c5bf	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.c5c0			waitstop
.c5c0	20 3f c2	               jsr  push
.c5c3	20 ed f6	wait           jsr  k_stop
.c5c6	d0 fb		               bne  wait
.c5c8	20 7a c2	               jsr  pop
.c5cb	60		               rts
.c5cc			anykey
.c5cc	08		               php
.c5cd	48		               pha
.c5ce	a5 cb		nokey          lda 203
.c5d0	c9 40		               cmp #64
.c5d2	f0 fa		               beq nokey
.c5d4	20 da c5	               jsr releasekey
.c5d7	68		               pla
.c5d8	28		               plp
.c5d9	60		               rts
.c5da			releasekey
.c5da	08		               php
.c5db	48		               pha
.c5dc	a5 cb		keypressed     lda 203
.c5de	c9 40		               cmp #64
.c5e0	d0 fa		               bne keypressed
.c5e2	68		               pla
.c5e3	28		               plp
.c5e4	60		               rts
.c5e5			getkey
.c5e5	20 e4 ff	gkagain        jsr  getin
.c5e8	c9 00		               cmp  #0
.c5ea	f0 f9		               beq  gkagain
.c5ec	60		               rts
.c5ed			kbflushbuff
.c5ed	08		               php
.c5ee	48		               pha
.c5ef	20 e4 ff	again          jsr  getin
.c5f2	c9 00		               cmp  #0
.c5f4	d0 f9		               bne  again
.c5f6	68		               pla
.c5f7	28		               plp
.c5f8	60		               rts
.c5f9			waitkey
.c5f9	20 3f c2	               jsr  push
.c5fc	8d 4a c6	               sta  thekey
.c5ff	20 e4 ff	nope           jsr  getin
.c602	20 d2 ff	               jsr  chrout
.c605	cd 4a c6	               cmp  thekey
.c608	d0 f5		               bne  nope
.c60a	20 d2 ff	               jsr  chrout
.c60d	20 7a c2	               jsr  pop
.c610	60		               rts
.c611			waitspace
.c611	20 3f c2	               jsr  push
.c614	a9 7f		wait           lda  #$7f  ;%01111111
.c616	8d 00 dc	               sta  $dc00
.c619	ad 01 dc	               lda  $dc01
.c61c	29 10		               and  #$10  ;mask %00010000
.c61e	d0 f4		               bne  wait
.c620	20 7a c2	               jsr  pop
.c623			waitsstop
.c623	20 3f c2	               jsr  push
.c626	20 ed f6	wait           jsr  k_stop  ;%01111111
.c629	d0 fb		               bne  wait
.c62b	20 7a c2	               jsr  pop
.c62e			waitreturn
.c62e	20 3f c2	               jsr  push
.c631	ad 4b c6	               lda  thecount
.c634	8d 00 04	               sta  scrnram
.c637	a9 02		               lda  #$02
.c639	8d 00 d8	               sta  colorram
.c63c	20 e4 ff	nope           jsr  getin
.c63f	c9 0d		nohex          cmp  #$0d
.c641	d0 f9		               bne  nope
.c643	ee 4b c6	               inc  thecount
.c646	20 7a c2	               jsr  pop
.c649	60		               rts
>c64a	00		thekey         .byte   0
>c64b	01		thecount       .byte   $01
>c64c	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>c650	00 00 00 00 00 00 00 00 00 0d 00 00
>c65c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>c660	00 00 00 00 00 00 00 00 00 00 00 00
>c66c	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>c670	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>c67c	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>c680	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>c68c	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>c690	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>c69c	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>c6a0	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>c6ac	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>c6b0	00 00 00 00 00 00 00 00 00 00 00 00
>c6bc	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>c6c0	00 00 00 00 00 00 00 00 00 00 00 00
>c6cc	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>c6d0	00 00 00 00 00 00 00 00 00 00 00 00
>c6dc	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>c6e0	00 00 00 00 00 00 00 00 00 00 00 00
>c6ec	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>c6f0	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>c6fc	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>c700	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>c70c	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>c710	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>c71c	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>c720	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>c72c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>c730	00 00 00 00 00 00 00 00 00 00 00 00
>c73c	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>c740	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-disk.asm

.c74c			diskerror
.c74c	20 3f c2	               jsr  push
.c74f	ad 2f c9	               lda  dsk_dev   ; Select device 8
.c752	85 ba		               sta  $ba       ;
.c754	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.c757	a9 6f		               lda  #$6f
.c759	85 b9		               sta  $b9       ;
.c75b	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.c75e	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.c761	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.c764	c9 0d		               cmp  #$0d      ; Is it CR ?
.c766	d0 f6		               bne  nextchar  ; No, get next char
.c768	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.c76b	20 7a c2	               jsr  pop
.c76e	60		               rts
.c76f			diskdir
.c76f	20 3f c2	               jsr  push
.c772	a9 24		               lda  #$24      ; L012C - Filename is "$"
.c774	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.c776	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.c778	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.c77a	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.c77c	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.c77e	a9 01		               lda  #$01      ; L0138 - set ...
.c780	85 b7		               sta  $b7       ; L013A - ... length of current filename
.c782	ad 2f c9	               lda  dsk_dev   ; L013C - set 8 as ...
.c785	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.c787	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.c789	85 b9		               sta  $b9       ; L0142 - ... secondary address
.c78b	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.c78e	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.c790	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.c793	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.c795	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.c798	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.c79a	85 90		               sta  $90       ; L0153 - ... kernal status word.
.c79c	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.c79e	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.c7a0	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.c7a3	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.c7a5	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.c7a7	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.c7a9	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.c7ac	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.c7ae	d0 28		               bne  exit      ; L0167
.c7b0	a4 fb		               ldy  $fb       ; L0169
.c7b2	88		               dey            ; L016b
.c7b3	d0 e9		               bne  loop1     ; L016C - If not last, loop
.c7b5	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.c7b7	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.c7ba	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.c7bc	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.c7bf	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.c7c2	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.c7c4	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.c7c6	aa		               tax            ; L017F - tfr a in x
.c7c7	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.c7c9	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.c7cc	4c bf c7	               jmp  loop3     ; L0185 - get another byte
.c7cf	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.c7d1	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.c7d4	a0 02		               ldy  #$02      ; L018D - set Y to 2
.c7d6	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.c7d8	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.c7db	20 7a c2	               jsr  pop
.c7de	60		               rts            ; L0194
.c7df			directory
.c7df	20 6f c7	               jsr  diskdir
.c7e2	20 4c c7	               jsr  diskerror
.c7e5	60		               rts
.c7e6			memtofile
.c7e6	20 09 c9	               jsr  dsk_putmesg
.c7e9	20 3f c2	               jsr  push
.c7ec	ad 33 c9	               lda  dsk_fnlen
.c7ef	ae 31 c9	               ldx  dsk_fnptr      ; load fname addr. lbyte
.c7f2	ac 32 c9	               ldy  dsk_fnptr+1
.c7f5	20 bd ff	               jsr  setnam         ; call setnam
.c7f8	ad 30 c9	               lda  dsk_lfsno
.c7fb	ae 2f c9	               ldx  dsk_dev        ; specified device
.c7fe	a0 00		skip           ldy  #$00
.c800	20 ba ff	               jsr  setlfs         ; call setlfs
.c803	ad 2b c9	               lda  dsk_data_s     ; put data start lbyte in stal
.c806	85 c1		               sta  stal
.c808	ad 2c c9	               lda  dsk_data_s+1   ; put data start hbyte in stal
.c80b	85 c2		               sta  stal+1
.c80d	ae 2d c9	               ldx  dsk_data_e     ; put data end lbyte in x
.c810	ac 2e c9	               ldy  dsk_data_e+1   ; put data end hbyte in y
.c813	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.c815	20 d8 ff	               jsr  save           ; call save
.c818	90 00		               bcc  noerror        ; if carry set, a load error has happened
.c81a	20 7a c2	noerror        jsr  pop
.c81d	60		               rts
.c81e			filetomem
.c81e	20 3f c2	               jsr push
.c821	ad 33 c9	               lda dsk_fnlen  ; Loads filename lenght.
.c824	ae 31 c9	               ldx dsk_fnptr  ; Points x and y to the filename
.c827	ac 32 c9	               ldy dsk_fnptr+1;pointer
.c82a	20 bd ff	               jsr setnam     ; call setnam
.c82d	ad 30 c9	               lda dsk_lfsno  ; Loads Acc with the logical file number
.c830	ae 2f c9	               ldx dsk_dev    ; default to device 8
.c833	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.c835	20 ba ff	               jsr setlfs     ; call setlfs
.c838	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.c83a	20 d5 ff	               jsr load       ; call load
.c83d	90 03		               bcc noerror      ; if carry set, a load error has happened
.c83f	20 46 c8	               jsr  error
.c842	20 7a c2	noerror        jsr pop
.c845	60		               rts
.c846			error
.c846	20 3f c2	               jsr  push
.c849	c9 01		isit01         cmp  #$01
.c84b	d0 07		               bne  isit02
.c84d	a2 9a		               ldx  #<dsk_emsg01
.c84f	a0 c8		               ldy  #>dsk_emsg01
.c851	4c 8b c8	               jmp  printerror
.c854	c9 02		isit02         cmp  #$02
.c856	d0 07		               bne  isit05
.c858	a2 ae		               ldx  #<dsk_emsg02
.c85a	a0 c8		               ldy  #>dsk_emsg02
.c85c	4c 8b c8	               jmp  printerror
.c85f	c9 05		isit05         cmp  #$05
.c861	d0 07		               bne  isit04
.c863	a2 c1		               ldx  #<dsk_emsg05
.c865	a0 c8		               ldy  #>dsk_emsg05
.c867	4c 8b c8	               jmp  printerror
.c86a	c9 04		isit04         cmp  #$04
.c86c	d0 07		               bne  isit1d
.c86e	a2 d1		               ldx  #<dsk_emsg04
.c870	a0 c8		               ldy  #>dsk_emsg04
.c872	4c 8b c8	               jmp  printerror
.c875	c9 1d		isit1d         cmp  #$1d
.c877	d0 07		               bne  isit00
.c879	a2 e6		               ldx  #<dsk_emsg1d
.c87b	a0 c8		               ldy  #>dsk_emsg1d
.c87d	4c 8b c8	               jmp  printerror
.c880	c9 00		isit00         cmp  #$00
.c882	d0 0a		               bne  noerror
.c884	a2 fc		               ldx  #<dsk_emsg00
.c886	a0 c8		               ldy  #>dsk_emsg00
.c888	4c 8b c8	               jmp  printerror
.c88b	20 49 c1	printerror     jsr  puts
.c88e	20 7a c2	noerror        jsr  pop
.c891	60		               rts
>c892	8d		dsk_msg1       .byte     141
>c893	53 55 43 43	               .null     "succes"
>c897	45 53 00
>c89a	8d		dsk_emsg01     .byte     141
>c89b	46 49 43 48	               .null     "fichier non ouvert"
>c89f	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>c8ae	11		dsk_emsg02     .byte     17
>c8af	45 52 52 45	               .null     "erreur d'ecriture"
>c8b3	55 52 20 44 27 45 43 52 49 54 55 52 45 00
>c8c1	11		dsk_emsg05     .byte     17
>c8c2	4c 45 43 54	               .null     "lecteur absent"
>c8c6	45 55 52 20 41 42 53 45 4e 54 00
>c8d1	11		dsk_emsg04     .byte     17
>c8d2	46 49 43 48	               .null     "fichier introuvable"
>c8d6	49 45 52 20 49 4e 54 52 4f 55 56 41 42 4c 45 00
>c8e6	11		dsk_emsg1d     .byte     17
>c8e7	45 52 52 45	               .null     "erreur de chargement"
>c8eb	55 52 20 44 45 20 43 48 41 52 47 45 4d 45 4e 54
>c8fb	00
>c8fc	11		dsk_emsg00     .byte     17
>c8fd	42 52 45 41	               .null     "break error"
>c901	4b 20 45 52 52 4f 52 00
.c909			dsk_putmesg
.c909	20 3f c2	               jsr push
.c90c	a2 34		               ldx #<dsk_msg0
.c90e	a0 c9		               ldy #>dsk_msg0
.c910	20 49 c1	               jsr puts
.c913	a9 20		               lda #$20
.c915	20 43 c1	               jsr putch
.c918	ae 31 c9	               ldx dsk_fnptr
.c91b	ac 32 c9	               ldy dsk_fnptr+1
.c91e	20 49 c1	               jsr puts
.c921	ad 30 c9	               lda dsk_lfsno
.c924	20 c3 ff	               jsr close
.c927	20 7a c2	               jsr pop
.c92a	60		               rts
>c92b	00 00		dsk_data_s     .word     $0000     ; Data start example addresses
>c92d	00 20		dsk_data_e     .word     $2000     ; Data end
>c92f	08		dsk_dev        .byte     $08       ; Device number
>c930	00		dsk_lfsno      .byte     $00       ; Logical file number
>c931	00 00		dsk_fnptr      .word     $00       ; Pointer to filename
>c933	00		dsk_fnlen      .byte     0         ; Number of character in filename.
>c934	8d		dsk_msg0       .byte     141       ; Miscilinaous file message.
>c935	53 41 56 49	               .null     "saving "
>c939	4e 47 20 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-showregs-sd.asm

.c93d			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.c93d	08		               php                 ; Sauvegarde le registre de status sur stack.
.c93e	8d 32 cb	               sta  rega           ; Sauvegarde Acc en mémoire.
.c941	68		               pla                 ; Récupère le registre de status du stack.
.c942	8d 35 cb	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.c945	8e 33 cb	               stx  regx           ; Sauvegarde le registre X en mémoire.
.c948	8c 34 cb	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.c94b	ba		               tsx                 ; Copie le registre S dans X.
.c94c	8e 36 cb	               stx  regs           ; Sauvegarde le registre S en mémoire.
.c94f	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.c950	8d 38 cb	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.c953	8d 3a cb	               sta  regpcl2        ; ... une seconde fois.
.c956	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.c957	8d 37 cb	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.c95a	8d 39 cb	               sta  regpch2        ; ... une seconde fois.
.c95d	ad 32 cb	               lda  rega           ; On commence par le registre Acc.
.c960	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c961	20 ba c4	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c964	8d cf ca	               sta  vala+1         ; ... et le place dans la chaine.
.c967	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c968	20 c6 c4	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c96b	20 ba c4	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c96e	8d ce ca	               sta  vala           ; ... et le place dans la chaine.
.c971	ad 34 cb	               lda  regy           ; Ensuite, le registre Y.
.c974	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c975	20 ba c4	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c978	8d e6 ca	               sta  valy+1         ; ... et le place dans la chaine.
.c97b	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c97c	20 c6 c4	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c97f	20 ba c4	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c982	8d e5 ca	               sta  valy           ; ... et le place dans la chaine.
.c985	ad 33 cb	               lda  regx           ; Ensuite, le registre X.
.c988	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c989	20 ba c4	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c98c	8d da ca	               sta  valx+1         ; ... et le place dans la chaine.
.c98f	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c990	20 c6 c4	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c993	20 ba c4	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c996	8d d9 ca	               sta  valx           ; ... et le place dans la chaine.
.c999	ad 35 cb	               lda  regp           ; Ensuite, le registre de status.
.c99c	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c99d	20 ba c4	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c9a0	8d f1 ca	               sta  valp+1         ; ... et le place dans la chaine.
.c9a3	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c9a4	20 c6 c4	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c9a7	20 ba c4	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c9aa	8d f0 ca	               sta  valp           ; ... et le place dans la chaine.
.c9ad	ad 36 cb	               lda  regs           ; Ensuite, le pointeur de stack.
.c9b0	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c9b1	20 ba c4	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c9b4	8d fc ca	               sta  vals+1         ; ... et le place dans la chaine.
.c9b7	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c9b8	20 c6 c4	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c9bb	20 ba c4	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c9be	8d fb ca	               sta  vals           ; ... et le place dans la chaine.
.c9c1	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.c9c2	ad 3a cb	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.c9c5	69 00		               adc  #$00           ; On y ajoute 1.
.c9c7	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.c9c9	ee 39 cb	               inc  regpch2        ; ... en incrémentant le MSB.
.c9cc	8d 3a cb	noreport       sta  regpcl2        ; On le sauvegarde.
.c9cf	ad 3a cb	               lda  regpcl2        ; On récupère la partie basse du compteur.
.c9d2	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c9d3	20 ba c4	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c9d6	8d 0c cb	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.c9d9	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c9da	20 c6 c4	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c9dd	20 ba c4	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c9e0	8d 0b cb	               sta  valpcl         ; ... et lace le code à la position "--X-".
.c9e3	ad 39 cb	               lda regpch2         ; On récupère la partie haute du compteur.
.c9e6	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c9e7	20 ba c4	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c9ea	8d 0a cb	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.c9ed	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.c9ee	20 c6 c4	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.c9f1	20 ba c4	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.c9f4	8d 09 cb	               sta  valpch         ; ... et lace le code à la position "X---".
.c9f7	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.c9f9	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.c9fa	20 ba c4	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.c9fd	8d 1d cb	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.ca00	68		               pla
.ca01	20 c6 c4	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.ca04	20 ba c4	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.ca07	8d 1c cb	               sta  valz1l         ; ... et lace le code à la position "--X-".
.ca0a	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.ca0c	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.ca0d	20 ba c4	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.ca10	8d 1b cb	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.ca13	68		               pla
.ca14	20 c6 c4	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.ca17	20 ba c4	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.ca1a	8d 1a cb	               sta  valz1h         ; ... et lace le code à la position "X---".
.ca1d	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.ca1f	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.ca20	20 ba c4	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.ca23	8d 2e cb	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.ca26	68		               pla
.ca27	20 c6 c4	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.ca2a	20 ba c4	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.ca2d	8d 2d cb	               sta  valz2l         ; ... et lace le code à la position "--X-".
.ca30	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.ca32	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.ca33	20 ba c4	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.ca36	8d 2c cb	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.ca39	68		               pla
.ca3a	20 c6 c4	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.ca3d	20 ba c4	               jsr  nibtohex
.ca40	8d 2b cb	               sta  valz2h         ; ... et lace le code à la position "X---".
.ca43	20 ad c2	               jsr  pushreg
.ca46	a2 c6		               ldx  #<srega
.ca48	a0 ca		               ldy  #>srega
.ca4a	20 d6 c1	               jsr  putscxy
.ca4d	20 dc c2	               jsr  popreg
.ca50	20 ad c2	               jsr  pushreg
.ca53	a2 d2		               ldx  #<sregx
.ca55	a0 ca		               ldy  #>sregx
.ca57	20 d6 c1	               jsr  putscxy
.ca5a	20 dc c2	               jsr  popreg
.ca5d	20 ad c2	               jsr  pushreg
.ca60	a2 dd		               ldx  #<sregy
.ca62	a0 ca		               ldy  #>sregy
.ca64	20 d6 c1	               jsr  putscxy
.ca67	20 dc c2	               jsr  popreg
.ca6a	20 ad c2	               jsr  pushreg
.ca6d	a2 e9		               ldx  #<sregp
.ca6f	a0 ca		               ldy  #>sregp
.ca71	20 d6 c1	               jsr  putscxy
.ca74	20 dc c2	               jsr  popreg
.ca77	20 ad c2	               jsr  pushreg
.ca7a	a2 f4		               ldx  #<sregs
.ca7c	a0 ca		               ldy  #>sregs
.ca7e	20 d6 c1	               jsr  putscxy
.ca81	20 dc c2	               jsr  popreg
.ca84	20 ad c2	               jsr  pushreg
.ca87	a2 00		               ldx  #<sregpc
.ca89	a0 cb		               ldy  #>sregpc
.ca8b	20 d6 c1	               jsr  putscxy
.ca8e	20 dc c2	               jsr  popreg
.ca91	20 ad c2	               jsr  pushreg
.ca94	a2 10		               ldx  #<sregz1
.ca96	a0 cb		               ldy  #>sregz1
.ca98	20 d6 c1	               jsr  putscxy
.ca9b	20 dc c2	               jsr  popreg
.ca9e	20 ad c2	               jsr  pushreg
.caa1	a2 21		               ldx  #<sregz2
.caa3	a0 cb		               ldy  #>sregz2
.caa5	20 d6 c1	               jsr  putscxy
.caa8	20 dc c2	               jsr  popreg
.caab	ad 37 cb	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.caae	48		               pha                 ; ... à la bonne position sur la pile.
.caaf	ad 38 cb	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.cab2	48		               pha                 ; ... à la bonne position sur la pile.
.cab3	ae 36 cb	               ldx  regs           ; On replace tous les registre à leurs ...
.cab6	9a		               txs                 ; ...
.cab7	ac 34 cb	               ldy  regy           ; ...
.caba	ae 33 cb	               ldx  regx           ; ...
.cabd	ad 35 cb	               lda  regp           ; ...
.cac0	48		               pha                 ; ...
.cac1	ad 32 cb	               lda  rega           ; ...
.cac4	28		               plp                 ; ... valeurs initiales
.cac5	60		               rts
>cac6	07 01 17	srega   .byte   cyellow,coln+1,line
>cac9	20 20 41 3a	        .text   '  a:$' ;4,24
>cacd	24
>cace	00 00 20 00	vala    .byte   0,0,32,0
>cad2	03 09 17	sregx   .byte   ccyan,coln+9,line
>cad5	20 58 3a 24	        .text   ' x:$' ;4,24
>cad9	00 00 20 00	valx    .byte   0,0,32,0
>cadd	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>cae0	20 59 3a 20	        .text   ' y: $' ;4,24
>cae4	24
>cae5	00 00 20 00	valy    .byte   0,0,32,0
>cae9	08 18 17	sregp   .byte   corange,coln+24,line
>caec	20 50 3a 24	        .text   ' p:$' ;4,24
>caf0	00 00 20 00	valp    .byte   0,0,32,0
>caf4	0a 1f 17	sregs   .byte   clightred,coln+31,line
>caf7	20 53 3a 24	        .text   ' s:$' ;4,24
>cafb	00 00 20 20	vals    .byte   0,0,32,32,0
>caff	00
>cb00	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>cb04	20 50 43 3a	        .text   ' pc:$' ;4,24
>cb08	24
>cb09	00 00		valpch  .byte   0,0
>cb0b	00 00 20 20	valpcl  .byte   0,0,32,32,0
>cb0f	00
>cb10	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>cb14	20 5a 50 31	        .text   ' zp1:$' ;4,24
>cb18	3a 24
>cb1a	00 00		valz1h  .byte   0,0
>cb1c	00 00 20 20	valz1l  .byte   0,0,32,32,0
>cb20	00
>cb21	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>cb25	20 5a 50 32	        .text   ' zp2:$' ;4,24
>cb29	3a 24
>cb2b	00 00		valz2h  .byte   0,0
>cb2d	00 00 20 20	valz2l  .byte   0,0,32,32,0
>cb31	00
>cb32	00		rega    .byte   0
>cb33	00		regx    .byte   0
>cb34	00		regy    .byte   0
>cb35	00		regp    .byte   0
>cb36	00		regs    .byte   0
>cb37	00		regpch  .byte   0
>cb38	00		regpcl  .byte   0
>cb39	00		regpch2 .byte   0
>cb3a	00		regpcl2 .byte   0
>cb3b	00		vzp1h   .byte   0
>cb3c	00		vzp1l   .byte   0
>cb3d	00		vzp2h   .byte   0
>cb3e	00		vzp2l   .byte   0

;******  Return to file: charedit.asm


;******  End of listing

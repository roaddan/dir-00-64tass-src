
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L charedit.txt -o charedit.prg charedit.asm
; Wed Oct 30 20:57:40 2024

;Offset	;Hex		;Source

;******  Processing input file: charedit.asm

="20241030-204144"	version  = "20241030-204144"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: charedit.asm


;******  Processing file: localmacro.asm


;******  Return to file: charedit.asm

=18			fkeyleft       =    18
=9			f1top          =    9
=$0400			scrnnewram     =    $0400
=10			charsdef       =    10
=9			grid_top       =    9
=1			grid_left      =    1
=16			grid_bot       =    grid_top + 7
=8			grid_right     =    grid_left + 7
=$0b			bordure        =    vgris
=$00			fond           =    vnoir
=$03			mesgcol        =    vcyan
=$03			menu1col1      =    vcyan
=$0e			menu1col2      =    vbleu1
=$0f			menu2col1      =    vgris2
=$0c			menu2col2      =    vgris1
=$01			flashcol       =    vblanc
=$07			whoamicol      =    vjaune
=$01			charcolor      =    vblanc
=$0f			charscolor     =    vgris2
.0854			main
.0854	20 8e 22	               jsr  push
.0857	20 60 21	               jsr  scrmaninit
.085a	08		               php
.085b	48		               pha
.085c	a9 08		               lda  #$08
.085e	20 d2 ff	               jsr  $ffd2
.0861	68		               pla
.0862	28		               plp
.0863	20 c8 0a	               jsr  drawcredits
.0866	a2 8b		               ldx #<menu_msg
.0868	a0 1d		               ldy #>menu_msg
.086a	20 26 22	               jsr putscxy
.086d	20 46 21	               jsr  screendis
.0870	20 79 10	               jsr  copycharset
.0873	20 80 21	               jsr  cls
.0876	20 63 10	               jsr  setscreenptr
.0879	20 27 0b	               jsr  setdefaultchar
.087c	20 d4 10	               jsr  staticscreen
.087f	20 a6 0f	               jsr  drawbitmap
.0882	a9 00		               lda  #$00
.0884	8d 7c 09	               sta  fkeyset
.0887	20 29 11	               jsr  drawfkeys
.088a	a9 00		               lda  #$00
.088c	20 8e 22	               jsr  push
.088f	a2 a4		               ldx  #<blankmsg
.0891	a0 1a		               ldy  #>blankmsg
.0893	20 26 22	               jsr  putscxy
.0896	a2 d0		               ldx  #<prompt_msg
.0898	a0 1a		               ldy  #>prompt_msg
.089a	20 26 22	               jsr  putscxy
.089d	20 cd 22	               jsr  pop
.08a0	20 53 21	               jsr  screenena
.08a3	20 38 0d	               jsr  keyaction
.08a6	20 80 21	               jsr  cls
.08a9	20 c8 0a	               jsr  drawcredits
.08ac	a2 14		               ldx #<bye_msg
.08ae	a0 1f		               ldy #>bye_msg
.08b0	20 26 22	               jsr putscxy
.08b3	a2 36		               ldx #<any_msg
.08b5	a0 1f		               ldy #>any_msg
.08b7	20 26 22	               jsr putscxy
.08ba	20 bf 26	               jsr  getkey
.08bd	20 80 21	               jsr  cls
.08c0	20 cd 22	endmain        jsr  pop
.08c3	20 66 fe	               jsr  k_warmboot
.08c6	60		               rts
.08c7			savetofile
.08c7	20 8e 22	               jsr  push
.08ca	a9 8d		               lda  #<fname
.08cc	8d 59 28	               sta  dsk_fnptr
.08cf	a9 09		               lda  #>fname
.08d1	8d 5a 28	               sta  dsk_fnptr+1
.08d4	a9 0d		               lda  #(device-fname-1)
.08d6	8d 5b 28	               sta  dsk_fnlen
.08d9	ad 9b 09	               lda  device
.08dc	29 0f		               and  #$0f
.08de	8d 58 28	               sta  dsk_lfsno
.08e1	8d 57 28	               sta  dsk_dev
.08e4	a9 00		               lda  #<bitmapmem
.08e6	8d 53 28	               sta  dsk_data_s
.08e9	a9 28		               lda  #>bitmapmem
.08eb	8d 54 28	               sta  dsk_data_s+1
.08ee	a9 00		               lda  #<endofaddr
.08f0	8d 55 28	               sta  dsk_data_e
.08f3	a9 48		               lda  #>endofaddr
.08f5	8d 56 28	               sta  dsk_data_e+1
.08f8	a2 a4		               ldx #<blankmsg
.08fa	a0 1a		               ldy #>blankmsg
.08fc	20 26 22	               jsr putscxy
.08ff	a2 f6		               ldx #<wait_msg
.0901	a0 1a		               ldy #>wait_msg
.0903	20 26 22	               jsr putscxy
.0906	20 8e 22	               jsr  push
.0909	a2 01		               ldx  #1
.090b	a0 04		               ldy  #4
.090d	20 b7 21	               jsr  gotoxy
.0910	20 cd 22	               jsr  pop
.0913	20 c0 27	               jsr  memtofile
.0916	20 cd 22	               jsr  pop
.0919	60		               rts
.091a			loadfromfile
.091a	20 8e 22	               jsr  push
.091d	a9 8d		               lda  #<fname
.091f	8d 59 28	               sta  dsk_fnptr
.0922	a9 09		               lda  #>fname
.0924	8d 5a 28	               sta  dsk_fnptr+1
.0927	a9 0d		               lda  #(device-fname-1)
.0929	8d 5b 28	               sta  dsk_fnlen
.092c	ad 9b 09	               lda  device
.092f	29 0f		               and  #$0f
.0931	8d 57 28	               sta  dsk_dev
.0934	8d 58 28	               sta  dsk_lfsno
.0937	a9 00		               lda  #<bitmapmem
.0939	8d 53 28	               sta  dsk_data_s
.093c	a9 28		               lda  #>bitmapmem
.093e	8d 54 28	               sta  dsk_data_s+1
.0941	a9 00		               lda  #<endofaddr
.0943	8d 55 28	               sta  dsk_data_e
.0946	a9 48		               lda  #>endofaddr
.0948	8d 56 28	               sta  dsk_data_e+1
.094b	a2 a4		               ldx #<blankmsg
.094d	a0 1a		               ldy #>blankmsg
.094f	20 26 22	               jsr putscxy
.0952	a2 f6		               ldx #<wait_msg
.0954	a0 1a		               ldy #>wait_msg
.0956	20 26 22	               jsr putscxy
.0959	20 8e 22	               jsr  push
.095c	a2 01		               ldx  #1
.095e	a0 04		               ldy  #4
.0960	20 b7 21	               jsr  gotoxy
.0963	20 cd 22	               jsr  pop
.0966	20 f8 27	               jsr  filetomem
.0969	20 cd 22	               jsr  pop
.096c	60		               rts
=10240			bitmapmem      =         charsdef * 1024     ;Calcul position ram des caracteres.
=18432			endofaddr      =         (charsdef * 1024) + (4*$800)
=61440			mstopaddr      =         $d000+(4*$800)
>096d	00 d0		startaddr      .word     $d000               ; 53248
>096f	00 f0		stopaddr       .word     mstopaddr           ; 55296
>0971	00 28		bitmapaddr     .word     bitmapmem           ; $3000, 12288
>0973	80 40 20 10	eorval         .byte     $80,$40,$20,$10,$08,$04,$02,$01
>0977	08 04 02 01
>097b	00		editmode       .byte     0
>097c	00		fkeyset        .byte     0
>097d	00		currentchar    .byte     0
>097e	00		currentkey     .byte     0
>097f	00		previouskey    .byte     0
>0980	00		bitmapoffset   .byte     0
>0981	00 00		mapaddr        .word     0
>0983	00 00		byteaddr       .word     0
>0985	00 00		gridaddr       .word     0
>0987	09		cursln         .byte     grid_top
>0988	01		curscl         .byte     grid_left
>0989	05 1b 03 12	pfname         .byte     vvert,27,3,18
>098d	40 30 3a	fname          .text     "@0:"
>0990	4f 52 49 47	name           .text     "origin"
>0994	49 4e
>0996	2e 43 48 52	ext            .null     ".chr"
>099a	00
>099b	08		device         .byte     8

;******  Processing file: routines.asm

.099c			template
.099c	20 8e 22	               jsr  push
.099f	20 cd 22	               jsr  pop
.09a2	60		               rts
.09a3			screenredraw
.09a3	20 8e 22	               jsr  push
.09a6	20 46 21	               jsr  screendis
.09a9	20 80 21	               jsr  cls
.09ac	20 d4 10	               jsr  staticscreen
.09af	20 a6 0f	               jsr  drawbitmap
.09b2	20 29 11	               jsr  drawfkeys
.09b5	20 8e 22	               jsr  push
.09b8	a2 0d		               ldx  #13
.09ba	a0 0c		               ldy  #12
.09bc	20 b7 21	               jsr  gotoxy
.09bf	20 cd 22	               jsr  pop
.09c2	ad 7e 09	               lda  currentkey
.09c5	20 97 21	               jsr  putch
.09c8	20 8e 22	               jsr  push
.09cb	a2 a4		               ldx  #<blankmsg
.09cd	a0 1a		               ldy  #>blankmsg
.09cf	20 26 22	               jsr  putscxy
.09d2	a2 d0		               ldx  #<prompt_msg
.09d4	a0 1a		               ldy  #>prompt_msg
.09d6	20 26 22	               jsr  putscxy
.09d9	20 cd 22	               jsr  pop
.09dc	20 53 21	               jsr  screenena
.09df	20 cd 22	               jsr  pop
.09e2	60		               rts
.09e3			getfname
.09e3	20 8e 22	               jsr  push
.09e6	20 8e 22	               jsr  push
.09e9	a2 a4		               ldx  #<blankmsg
.09eb	a0 1a		               ldy  #>blankmsg
.09ed	20 26 22	               jsr  putscxy
.09f0	a2 29		               ldx  #<fname_msg
.09f2	a0 1d		               ldy  #>fname_msg
.09f4	20 26 22	               jsr  putscxy
.09f7	20 cd 22	               jsr  pop
.09fa	a2 00		               ldx  #$00
.09fc	8e 30 0a	               stx  count
.09ff	20 31 0a	getanother     jsr  getalphanum
.0a02	20 97 21	               jsr  putch
.0a05	ae 30 0a	               ldx  count
.0a08	9d 90 09	               sta  name,x
.0a0b	ee 30 0a	               inc  count
.0a0e	ae 30 0a	               ldx  count
.0a11	e0 06		               cpx  #$06
.0a13	f0 03		               beq  finish
.0a15	4c ff 09	               jmp  getanother
.0a18			finish
.0a18	20 8e 22	               jsr  push
.0a1b	a2 a4		               ldx  #<blankmsg
.0a1d	a0 1a		               ldy  #>blankmsg
.0a1f	20 26 22	               jsr  putscxy
.0a22	a2 89		               ldx  #<pfname
.0a24	a0 09		               ldy  #>pfname
.0a26	20 26 22	               jsr  putscxy
.0a29	20 cd 22	               jsr  pop
.0a2c	20 cd 22	               jsr  pop
.0a2f	60		               rts
>0a30	00		count          .byte     0
.0a31			getalphanum
.0a31	20 8e 22	               jsr  push
.0a34	20 bf 26	getanother     jsr  getkey
.0a37	c9 30		               cmp  #$30      ; 0
.0a39	30 f9		               bmi  getanother
.0a3b	c9 3a		               cmp  #$3a      ; 9+1
.0a3d	30 0b		               bmi  goodone
.0a3f	c9 41		isitletter     cmp  #$41      ; A
.0a41	30 f1		               bmi  getanother
.0a43	c9 5b		               cmp  #$5b      ; Z+1
.0a45	30 03		               bmi  goodone
.0a47	4c 34 0a	               jmp  getanother
.0a4a	8d 54 0a	goodone        sta  tempbyte
.0a4d	20 cd 22	               jsr  pop
.0a50	ad 54 0a	               lda  tempbyte
.0a53	60		               rts
>0a54	00		tempbyte       .byte     0
.0a55			copychar
.0a55	20 8e 22	               jsr  push
.0a58	20 91 0a	               jsr  getvalidkey
.0a5b	ad 71 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.0a5e	85 fb		               sta  zpage1
.0a60	ad 72 09	               lda  bitmapaddr+1
.0a63	85 fc		               sta  zpage1+1
.0a65	ae c7 0a	               ldx  copykey
.0a68	bd 9a 25	               lda  asciitorom,x
.0a6b	aa		               tax
.0a6c	e0 00		               cpx  #$00
.0a6e	f0 08		               beq  no_offset      ; sommes nous déja à 0
.0a70	a9 08		addagain       lda  #$08
.0a72	20 85 12	               jsr  zp1addnum      ; on augmente de 8 byte ...
.0a75	ca		               dex                 ; pour chaque caracteres
.0a76	d0 f8		               bne  addagain
.0a78	ad 81 09	no_offset      lda  mapaddr        ; le caractere actuel
.0a7b	85 fd		               sta  zpage2         ;
.0a7d	ad 82 09	               lda  mapaddr+1      ;
.0a80	85 fe		               sta  zpage2+1       ;
.0a82	a0 00		               ldy  #$00
.0a84	b1 fb		nextbyte       lda  (zpage1),y
.0a86	91 fd		               sta  (zpage2),y
.0a88	c8		               iny
.0a89	c0 08		               cpy  #$08
.0a8b	d0 f7		               bne  nextbyte
.0a8d	20 cd 22	out            jsr  pop
.0a90	60		               rts
.0a91			getvalidkey
.0a91	20 8e 22	               jsr  push
.0a94	20 8e 22	               jsr  push
.0a97	a2 a4		               ldx  #<blankmsg
.0a99	a0 1a		               ldy  #>blankmsg
.0a9b	20 26 22	               jsr  putscxy
.0a9e	a2 00		               ldx  #<copychar_msg
.0aa0	a0 1d		               ldy  #>copychar_msg
.0aa2	20 26 22	               jsr  putscxy
.0aa5	20 cd 22	               jsr  pop
.0aa8	20 bf 26	getgoodkey     jsr  getkey
.0aab	8d c7 0a	               sta  copykey
.0aae	aa		               tax
.0aaf	bc 9a 25	               ldy  asciitorom,x
.0ab2	c4 00		               cpy  $00
.0ab4	d0 0a		               bne  goodone
.0ab6	ae c7 0a	               ldx  copykey
.0ab9	e0 40		               cpx  #$40
.0abb	f0 03		               beq  goodone
.0abd	4c a8 0a	               jmp  getgoodkey
.0ac0	20 97 21	goodone        jsr  putch
.0ac3	20 cd 22	               jsr  pop
.0ac6	60		               rts
>0ac7	00		copykey        .byte 0
.0ac8			drawcredits
.0ac8	20 8e 22	               jsr  push
.0acb	20 80 21	               jsr  cls
.0ace	a2 a0		               ldx #<whoami0
.0ad0	a0 1d		               ldy #>whoami0
.0ad2	20 26 22	               jsr putscxy
.0ad5	a2 c5		               ldx #<whoami1
.0ad7	a0 1d		               ldy #>whoami1
.0ad9	20 26 22	               jsr putscxy
.0adc	a2 ec		               ldx #<whoami2
.0ade	a0 1d		               ldy #>whoami2
.0ae0	20 26 22	               jsr putscxy
.0ae3	a2 11		               ldx #<whoami3
.0ae5	a0 1e		               ldy #>whoami3
.0ae7	20 26 22	               jsr putscxy
.0aea	a2 36		               ldx #<whoami4
.0aec	a0 1e		               ldy #>whoami4
.0aee	20 26 22	               jsr putscxy
.0af1	a2 5b		               ldx #<whoami5
.0af3	a0 1e		               ldy #>whoami5
.0af5	20 26 22	               jsr putscxy
.0af8	a2 80		               ldx #<whoami6
.0afa	a0 1e		               ldy #>whoami6
.0afc	20 26 22	               jsr putscxy
.0aff	a2 a5		               ldx #<whoami7
.0b01	a0 1e		               ldy #>whoami7
.0b03	20 26 22	               jsr putscxy
.0b06	a2 ca		               ldx #<whoami8
.0b08	a0 1e		               ldy #>whoami8
.0b0a	20 26 22	               jsr putscxy
.0b0d	a2 ef		               ldx #<whoami9
.0b0f	a0 1e		               ldy #>whoami9
.0b11	20 26 22	               jsr putscxy
.0b14	20 a3 12	               jsr  delay
.0b17	20 a3 12	               jsr  delay
.0b1a	20 a3 12	               jsr  delay
.0b1d	20 a3 12	               jsr  delay
.0b20	20 a3 12	               jsr  delay
.0b23	20 cd 22	               jsr  pop
.0b26	60		               rts
.0b27			setdefaultchar
.0b27	20 8e 22	               jsr  push
.0b2a	a9 40		               lda  #$40
.0b2c	8d 7e 09	               sta  currentkey
.0b2f	aa		               tax
.0b30	bc 9a 25	               ldy  asciitorom,x
.0b33	8c 80 09	               sty  bitmapoffset
.0b36	20 f1 0b	               jsr  drawkeyval
.0b39	20 a6 0f	               jsr  drawbitmap
.0b3c	20 8e 22	               jsr  push
.0b3f	a2 0d		               ldx  #13
.0b41	a0 0c		               ldy  #12
.0b43	20 b7 21	               jsr  gotoxy
.0b46	20 cd 22	               jsr  pop
.0b49	20 97 21	               jsr  putch
.0b4c	20 8e 22	               jsr  push
.0b4f	a2 11		               ldx  #17
.0b51	a0 05		               ldy  #5
.0b53	20 b7 21	               jsr  gotoxy
.0b56	20 cd 22	               jsr  pop
.0b59	20 54 25	               jsr  atodec
.0b5c	20 8e 22	               jsr  push
.0b5f	a2 58		isx            ldx  #<adec
.0b61	a0 24		isy            ldy  #>adec
.0b63	20 9d 21	               jsr  puts
.0b66	20 cd 22	               jsr  pull
.0b69	20 cd 22	               jsr  pop
.0b6c	60		               rts
.0b6d			resetmenuacolor
.0b6d	20 8e 22	               jsr  push
.0b70	a9 03		               lda  #menu1col1
.0b72	8d 8e 1f	               sta  f1abutton
.0b75	8d c4 1f	               sta  f3abutton
.0b78	8d fa 1f	               sta  f5abutton
.0b7b	8d 30 20	               sta  f7abutton
.0b7e	a9 0e		               lda  #menu1col2
.0b80	8d a9 1f	               sta  f2abutton
.0b83	8d df 1f	               sta  f4abutton
.0b86	8d 15 20	               sta  f6abutton
.0b89	8d 4b 20	               sta  f8abutton
.0b8c	20 cd 22	               jsr  pop
.0b8f	60		               rts
.0b90			resetmenubcolor
.0b90	20 8e 22	               jsr  push
.0b93	a9 0f		               lda  #menu2col1
.0b95	8d 66 20	               sta  f1bbutton
.0b98	8d 9c 20	               sta  f3bbutton
.0b9b	8d d2 20	               sta  f5bbutton
.0b9e	8d 08 21	               sta  f7bbutton
.0ba1	a9 0f		               lda  #menu2col1
.0ba3	8d 81 20	               sta  f2bbutton
.0ba6	8d b7 20	               sta  f4bbutton
.0ba9	8d ed 20	               sta  f6bbutton
.0bac	8d 23 21	               sta  f8bbutton
.0baf	20 cd 22	               jsr  pop
.0bb2	60		               rts
.0bb3			setmenuacolor
.0bb3	20 8e 22	               jsr  push
.0bb6	8d 8e 1f	               sta  f1abutton
.0bb9	8d a9 1f	               sta  f2abutton
.0bbc	8d c4 1f	               sta  f3abutton
.0bbf	8d df 1f	               sta  f4abutton
.0bc2	8d fa 1f	               sta  f5abutton
.0bc5	8d 15 20	               sta  f6abutton
.0bc8	8d 30 20	               sta  f7abutton
.0bcb	8d 4b 20	               sta  f8abutton
.0bce	20 cd 22	               jsr  pop
.0bd1	60		               rts
.0bd2			setmenubcolor
.0bd2	20 8e 22	               jsr  push
.0bd5	8d 66 20	               sta  f1bbutton
.0bd8	8d 81 20	               sta  f2bbutton
.0bdb	8d 9c 20	               sta  f3bbutton
.0bde	8d b7 20	               sta  f4bbutton
.0be1	8d d2 20	               sta  f5bbutton
.0be4	8d ed 20	               sta  f6bbutton
.0be7	8d 08 21	               sta  f7bbutton
.0bea	8d 23 21	               sta  f8bbutton
.0bed	20 cd 22	               jsr  pop
.0bf0	60		               rts
.0bf1			drawkeyval
.0bf1	20 8e 22	               jsr  push
.0bf4	20 8e 22	               jsr  push
.0bf7	a2 01		               ldx  #1
.0bf9	a0 13		               ldy  #19
.0bfb	20 b7 21	               jsr  gotoxy
.0bfe	20 cd 22	               jsr  pop
.0c01	ad 7e 09	               lda  currentkey
.0c04	20 97 21	               jsr  putch
.0c07	48		               pha
.0c08	a9 3d		               lda  #'='
.0c0a	20 97 21	               jsr  putch
.0c0d	a9 25		               lda  #'%'
.0c0f	20 97 21	               jsr  putch
.0c12	68		               pla
.0c13	20 1a 25	               jsr  putabin
.0c16	20 8e 22	               jsr  push
.0c19	a2 01		               ldx  #1
.0c1b	a0 14		               ldy  #20
.0c1d	20 b7 21	               jsr  gotoxy
.0c20	20 cd 22	               jsr  pop
.0c23	20 8e 22	               jsr  push
.0c26	a2 f2		isx            ldx  #<txt1
.0c28	a0 0c		isy            ldy  #>txt1
.0c2a	20 9d 21	               jsr  puts
.0c2d	20 cd 22	               jsr  pull
.0c30	a9 24		               lda  #'$'
.0c32	20 97 21	               jsr  putch
.0c35	ad 7e 09	               lda  currentkey
.0c38	20 87 24	               jsr  putahex
.0c3b	20 8e 22	               jsr  push
.0c3e	a2 01		               ldx  #1
.0c40	a0 15		               ldy  #21
.0c42	20 b7 21	               jsr  gotoxy
.0c45	20 cd 22	               jsr  pop
.0c48	20 8e 22	               jsr  push
.0c4b	a2 fd		isx            ldx  #<txt2
.0c4d	a0 0c		isy            ldy  #>txt2
.0c4f	20 9d 21	               jsr  puts
.0c52	20 cd 22	               jsr  pull
.0c55	a9 24		               lda  #'$'
.0c57	20 97 21	               jsr  putch
.0c5a	ad 72 09	               lda  bitmapaddr+1
.0c5d	20 87 24	               jsr  putahex
.0c60	ad 71 09	               lda  bitmapaddr
.0c63	20 87 24	               jsr  putahex
.0c66	20 8e 22	               jsr  push
.0c69	a2 01		               ldx  #1
.0c6b	a0 16		               ldy  #22
.0c6d	20 b7 21	               jsr  gotoxy
.0c70	20 cd 22	               jsr  pop
.0c73	20 8e 22	               jsr  push
.0c76	a2 08		isx            ldx  #<txt3
.0c78	a0 0d		isy            ldy  #>txt3
.0c7a	20 9d 21	               jsr  puts
.0c7d	20 cd 22	               jsr  pull
.0c80	a9 24		               lda  #'$'
.0c82	20 97 21	               jsr  putch
.0c85	ad 80 09	               lda  bitmapoffset
.0c88	20 87 24	               jsr  putahex
.0c8b	20 8e 22	               jsr  push
.0c8e	a2 01		               ldx  #1
.0c90	a0 17		               ldy  #23
.0c92	20 b7 21	               jsr  gotoxy
.0c95	20 cd 22	               jsr  pop
.0c98	20 8e 22	               jsr  push
.0c9b	a2 15		isx            ldx  #<txt4
.0c9d	a0 0d		isy            ldy  #>txt4
.0c9f	20 9d 21	               jsr  puts
.0ca2	20 cd 22	               jsr  pull
.0ca5	a9 24		               lda  #'$'
.0ca7	20 97 21	               jsr  putch
.0caa	ad 82 09	               lda  mapaddr+1
.0cad	20 87 24	               jsr  putahex
.0cb0	ad 81 09	               lda  mapaddr
.0cb3	20 87 24	               jsr  putahex
.0cb6	20 8e 22	               jsr  push
.0cb9	a2 01		               ldx  #1
.0cbb	a0 18		               ldy  #24
.0cbd	20 b7 21	               jsr  gotoxy
.0cc0	20 cd 22	               jsr  pop
.0cc3	20 8e 22	               jsr  push
.0cc6	a2 20		isx            ldx  #<txt5
.0cc8	a0 0d		isy            ldy  #>txt5
.0cca	20 9d 21	               jsr  puts
.0ccd	20 cd 22	               jsr  pull
.0cd0	ad 88 09	               lda  curscl
.0cd3	20 87 24	               jsr  putahex
.0cd6	a9 da		               lda  #$da
.0cd8	20 97 21	               jsr  putch
.0cdb	ad 87 09	               lda  cursln
.0cde	20 87 24	               jsr  putahex
.0ce1	20 cd 22	               jsr  pop
.0ce4	60		               rts
>0ce5	50 45 54 53	txt0           .null     "petscii :   "
>0ce9	43 49 49 20 3a 20 20 20 00
>0cf2	4b 45 59 20	txt1           .null     "key code: "
>0cf6	43 4f 44 45 3a 20 00
>0cfd	42 49 54 4d	txt2           .null     "bitmap..: "
>0d01	41 50 2e 2e 3a 20 00
>0d08	4f 46 46 53	txt3           .null     "offset..:   "
>0d0c	45 54 2e 2e 3a 20 20 20 00
>0d15	4d 41 50 41	txt4           .null     "mapaddr.: "
>0d19	44 44 52 2e 3a 20 00
>0d20	43 55 52 53	txt5           .null     "cursval.: "
>0d24	56 41 4c 2e 3a 20 00
>0d2b	53 54 41 43	txt6           .null     "stack......:"
>0d2f	4b 2e 2e 2e 2e 2e 2e 3a 00
.0d38			keyaction
.0d38	20 8e 22	               jsr  push
.0d3b	20 bf 26	loop           jsr  getkey
.0d3e	c9 85		f1             cmp  #key_f1
.0d40	d0 03		               bne  f2
.0d42	4c c0 0d	               jmp  dof1
.0d45	c9 89		f2             cmp  #key_f2
.0d47	d0 03		               bne  f3
.0d49	4c c6 0d	               jmp  dof2
.0d4c	c9 86		f3             cmp  #key_f3
.0d4e	d0 03		               bne  f4
.0d50	4c cc 0d	               jmp  dof3
.0d53	c9 8a		f4             cmp  #key_f4
.0d55	d0 03		               bne  f5
.0d57	4c d2 0d	               jmp  dof4
.0d5a	c9 87		f5             cmp  #key_f5
.0d5c	d0 03		               bne  f6
.0d5e	4c d8 0d	               jmp  dof5
.0d61	c9 8b		f6             cmp  #key_f6
.0d63	d0 03		               bne  f7
.0d65	4c de 0d	               jmp  dof6
.0d68	c9 88		f7             cmp  #key_f7
.0d6a	d0 03		               bne  f8
.0d6c	4c e4 0d	               jmp  dof7
.0d6f	c9 8c		f8             cmp  #key_f8
.0d71	d0 03		               bne  ctrlx
.0d73	4c ea 0d	               jmp  dof8
.0d76	c9 18		ctrlx          cmp  #ctrl_x
.0d78	d0 03		               bne  ctrlr
.0d7a	4c f0 0d	               jmp  doquit
.0d7d	c9 12		ctrlr          cmp  #ctrl_r
.0d7f	d0 06		               bne  ishex14
.0d81	20 a3 09	               jsr  screenredraw
.0d84	4c 3b 0d	               jmp  loop
.0d87	c9 14		ishex14        cmp  #$14
.0d89	d0 03		               bne  ishex12
.0d8b	4c 3b 0d	               jmp  loop
.0d8e	c9 12		ishex12        cmp  #$12
.0d90	d0 03		               bne  reste
.0d92	4c 3b 0d	               jmp  loop
.0d95			reste
.0d95	20 8e 22	               jsr  push
.0d98	a2 0d		               ldx  #13
.0d9a	a0 0c		               ldy  #12
.0d9c	20 b7 21	               jsr  gotoxy
.0d9f	20 cd 22	               jsr  pop
.0da2	20 97 21	               jsr  putch
.0da5	48		               pha
.0da6	ad 7e 09	               lda  currentkey
.0da9	8d 7f 09	               sta  previouskey
.0dac	68		               pla
.0dad	8d 7e 09	               sta  currentkey
.0db0	aa		               tax
.0db1	bc 9a 25	               ldy  asciitorom,x
.0db4	8c 80 09	               sty  bitmapoffset
.0db7	20 f1 0b	               jsr  drawkeyval
.0dba	20 a6 0f	               jsr  drawbitmap
.0dbd	4c 3b 0d	               jmp  loop
.0dc0	20 b9 12	dof1           jsr  f1action  ;edit/reverse
.0dc3	4c 3b 0d	               jmp  loop
.0dc6	20 de 13	dof2           jsr  f2action  ;save/flip vert
.0dc9	4c 3b 0d	               jmp  loop
.0dcc	20 96 14	dof3           jsr  f3action  ;load/flip horz
.0dcf	4c 3b 0d	               jmp  loop
.0dd2	20 77 15	dof4           jsr  f4action  ;copy/scroll r
.0dd5	4c 3b 0d	               jmp  loop
.0dd8	20 5b 16	dof5           jsr  f5action  ;clear/scroll l
.0ddb	4c 3b 0d	               jmp  loop
.0dde	20 13 17	dof6           jsr  f6action  ;fill;/scroll up
.0de1	4c 3b 0d	               jmp  loop
.0de4	20 cb 17	dof7           jsr  f7action  ;clear;/scroll down
.0de7	4c 3b 0d	               jmp  loop
.0dea	20 88 18	dof8           jsr  f8action  ; function
.0ded	4c 3b 0d	               jmp  loop
.0df0	20 cd 22	doquit         jsr  pop
.0df3	60		               rts
.0df4			editor
.0df4	20 8e 22	               jsr  push
.0df7	20 8e 22	               jsr  push
.0dfa	a2 a4		               ldx  #<blankmsg
.0dfc	a0 1a		               ldy  #>blankmsg
.0dfe	20 26 22	               jsr  putscxy
.0e01	a2 8b		               ldx  #<exit_msg
.0e03	a0 1d		               ldy  #>exit_msg
.0e05	20 26 22	               jsr  putscxy
.0e08	20 cd 22	               jsr  pop
.0e0b	20 8e 22	               jsr  push
.0e0e	a2 a4		               ldx  #<blankmsg
.0e10	a0 1a		               ldy  #>blankmsg
.0e12	20 26 22	               jsr  putscxy
.0e15	a2 12		               ldx  #<edit_msg
.0e17	a0 1b		               ldy  #>edit_msg
.0e19	20 26 22	               jsr  putscxy
.0e1c	20 cd 22	               jsr  pop
.0e1f	20 62 0f	               jsr  setcurs
.0e22	ad 7e 09	               lda  currentkey
.0e25	20 8e 22	               jsr  push
.0e28	a2 11		               ldx  #17
.0e2a	a0 05		               ldy  #5
.0e2c	20 b7 21	               jsr  gotoxy
.0e2f	20 cd 22	               jsr  pop
.0e32	20 54 25	               jsr  atodec
.0e35	20 8e 22	               jsr  push
.0e38	a2 58		isx            ldx  #<adec
.0e3a	a0 24		isy            ldy  #>adec
.0e3c	20 9d 21	               jsr  puts
.0e3f	20 cd 22	               jsr  pull
.0e42	20 a6 0f	               jsr  drawbitmap
.0e45	20 bf 26	ed_loop        jsr  getkey
.0e48	c9 85		f1             cmp  #f1key
.0e4a	d0 03		               bne  cu
.0e4c	4c 34 0f	               jmp  do_ctrlx
.0e4f	c9 91		cu             cmp  #cursu
.0e51	d0 03		               bne  cd
.0e53	4c df 0e	               jmp  do_up
.0e56	c9 11		cd             cmp  #cursd
.0e58	d0 03		               bne  cl
.0e5a	4c f2 0e	               jmp  do_down
.0e5d	c9 9d		cl             cmp  #cursl
.0e5f	d0 03		               bne  cr
.0e61	4c 05 0f	               jmp  do_left
.0e64	c9 1d		cr             cmp  #cursr
.0e66	d0 03		               bne  cx
.0e68	4c 18 0f	               jmp  do_right
.0e6b	c9 18		cx             cmp  #ctrl_x
.0e6d	d0 03		               bne  sp
.0e6f	4c 34 0f	               jmp  do_ctrlx
.0e72	c9 20		sp             cmp  #$20
.0e74	d0 03		               bne  ishex14
.0e76	4c 2b 0f	               jmp  do_swap
.0e79	c9 14		ishex14        cmp  #$14
.0e7b	d0 03		               bne  ishex12
.0e7d	4c 2b 0f	               jmp  do_swap
.0e80	c9 12		ishex12        cmp  #$12
.0e82	d0 03		               bne  rest
.0e84	4c 2b 0f	               jmp  do_swap
.0e87			rest
.0e87	20 8e 22	               jsr  push
.0e8a	a2 0d		               ldx  #13
.0e8c	a0 0c		               ldy  #12
.0e8e	20 b7 21	               jsr  gotoxy
.0e91	20 cd 22	               jsr  pop
.0e94	20 97 21	               jsr  putch
.0e97	48		               pha
.0e98	ad 7e 09	               lda  currentkey
.0e9b	8d 7f 09	               sta  previouskey
.0e9e	68		               pla
.0e9f	8d 7e 09	               sta  currentkey
.0ea2	aa		               tax
.0ea3	bc 9a 25	               ldy  asciitorom,x
.0ea6	8c 80 09	               sty  bitmapoffset
.0ea9	20 f1 0b	               jsr  drawkeyval
.0eac	20 a6 0f	               jsr  drawbitmap
.0eaf	20 8e 22	               jsr  push
.0eb2	a2 0d		               ldx  #13
.0eb4	a0 0c		               ldy  #12
.0eb6	20 b7 21	               jsr  gotoxy
.0eb9	20 cd 22	               jsr  pop
.0ebc	20 97 21	               jsr  putch
.0ebf	20 8e 22	               jsr  push
.0ec2	a2 11		               ldx  #17
.0ec4	a0 05		               ldy  #5
.0ec6	20 b7 21	               jsr  gotoxy
.0ec9	20 cd 22	               jsr  pop
.0ecc	20 54 25	               jsr  atodec
.0ecf	20 8e 22	               jsr  push
.0ed2	a2 58		isx            ldx  #<adec
.0ed4	a0 24		isy            ldy  #>adec
.0ed6	20 9d 21	               jsr  puts
.0ed9	20 cd 22	               jsr  pull
.0edc	4c 31 0f	               jmp  totop
.0edf	ad 87 09	do_up          lda  cursln
.0ee2	c9 09		               cmp  #grid_top
.0ee4	f0 4b		               beq  totop
.0ee6	20 84 0f	               jsr  clrcurs
.0ee9	ce 87 09	               dec  cursln
.0eec	20 62 0f	               jsr  setcurs
.0eef	4c 31 0f	               jmp  totop
.0ef2	ad 87 09	do_down        lda  cursln
.0ef5	c9 10		               cmp  #grid_bot
.0ef7	f0 38		               beq  totop
.0ef9	20 84 0f	               jsr  clrcurs
.0efc	ee 87 09	               inc  cursln
.0eff	20 62 0f	               jsr  setcurs
.0f02	4c 31 0f	               jmp  totop
.0f05	ad 88 09	do_left        lda  curscl
.0f08	c9 01		               cmp  #grid_left
.0f0a	f0 25		               beq  totop
.0f0c	20 84 0f	               jsr  clrcurs
.0f0f	ce 88 09	               dec  curscl
.0f12	20 62 0f	               jsr  setcurs
.0f15	4c 31 0f	               jmp  totop
.0f18	ad 88 09	do_right       lda  curscl
.0f1b	c9 08		               cmp  #grid_right
.0f1d	f0 12		               beq  totop
.0f1f	20 84 0f	               jsr  clrcurs
.0f22	ee 88 09	               inc  curscl
.0f25	20 62 0f	               jsr  setcurs
.0f28	4c 31 0f	               jmp  totop
.0f2b	20 3b 0f	do_swap        jsr  do_eor
.0f2e	20 a6 0f	               jsr  drawbitmap
.0f31	4c 45 0e	totop          jmp  ed_loop
.0f34	20 84 0f	do_ctrlx       jsr  clrcurs
.0f37	20 cd 22	               jsr  pop
.0f3a	60		               rts
.0f3b			do_eor
.0f3b	20 8e 22	               jsr  push
.0f3e	ad 81 09	               lda  mapaddr
.0f41	85 fd		               sta  zpage2
.0f43	ad 82 09	               lda  mapaddr+1
.0f46	85 fe		               sta  zpage2+1
.0f48	ae 87 09	               ldx  cursln     ; calcul de
.0f4b	ca		               dex            ; l'offset de
.0f4c	8a		               txa            ; la
.0f4d	29 f7		               and  #$f7      ; ligne
.0f4f	a8		               tay
.0f50	ae 88 09	               ldx  curscl
.0f53	ca		               dex
.0f54	bd 73 09	               lda  eorval,x
.0f57	51 fd		               eor  (zpage2),y
.0f59	20 f1 0b	               jsr  drawkeyval
.0f5c	91 fd		               sta  (zpage2),y
.0f5e	20 cd 22	               jsr  pop
.0f61	60		               rts
.0f62			setcurs
.0f62	20 8e 22	               jsr  push
.0f65	a2 01		               ldx  #grid_left
.0f67	ac 87 09	               ldy  cursln
.0f6a	20 b7 21	               jsr  gotoxy
.0f6d	a9 da		               lda  #$da
.0f6f	20 97 21	               jsr  putch
.0f72	ae 88 09	               ldx  curscl
.0f75	e8		               inx
.0f76	a0 08		               ldy  #grid_top-1
.0f78	20 b7 21	               jsr  gotoxy
.0f7b	a9 da		               lda  #$da
.0f7d	20 97 21	               jsr  putch
.0f80	20 cd 22	               jsr  pop
.0f83	60		               rts
.0f84			clrcurs
.0f84	20 8e 22	               jsr  push
.0f87	a2 01		               ldx  #grid_left
.0f89	ac 87 09	               ldy  cursln
.0f8c	20 b7 21	               jsr  gotoxy
.0f8f	a9 20		               lda  #$20
.0f91	20 97 21	               jsr  putch
.0f94	ae 88 09	               ldx  curscl
.0f97	e8		               inx
.0f98	a0 08		               ldy  #grid_top-1
.0f9a	20 b7 21	               jsr  gotoxy
.0f9d	a9 20		               lda  #$20
.0f9f	20 97 21	               jsr  putch
.0fa2	20 cd 22	               jsr  pop
.0fa5	60		               rts
.0fa6			drawbitmap
.0fa6	20 8e 22	               jsr  push
.0fa9	20 0d 10	               jsr  calcmapaddr
.0fac	ad 81 09	               lda  mapaddr        ; on pointe sur la table des bitmaps
.0faf	85 fb		               sta  zpage1
.0fb1	ad 82 09	               lda  mapaddr+1
.0fb4	85 fc		               sta  zpage1+1
.0fb6	a0 00		drawchar       ldy  #$00
.0fb8	a2 09		               ldx  #grid_top      ;on replace la ...
.0fba	8e c3 0f	               stx  isy+1          ;ligne de départ
.0fbd	20 8e 22	nextline       jsr  push
.0fc0	a2 02		               ldx  #grid_left+1        ; la colonne
.0fc2	a0 00		isy            ldy  #$00      ; la ligne (autoinc)
.0fc4	20 b7 21	               jsr  gotoxy
.0fc7	20 cd 22	               jsr  pop
.0fca	b1 fb		               lda  (zpage1),y     ; on li une ligne
.0fcc	20 f8 24	               jsr  atobin
.0fcf	20 3c 10	               jsr  abintograph
.0fd2	20 8e 22	               jsr  push
.0fd5	a2 4f		isx            ldx  #<abin
.0fd7	a0 24		isy            ldy  #>abin
.0fd9	20 9d 21	               jsr  puts
.0fdc	20 cd 22	               jsr  pull
.0fdf	ee c3 0f	               inc  isy+1
.0fe2	c8		               iny
.0fe3	c0 08		               cpy  #$08
.0fe5	30 d6		               bmi  nextline
.0fe7	20 ee 0f	               jsr  highlight
.0fea	20 cd 22	               jsr  pop
.0fed	60		               rts
.0fee			highlight
.0fee	20 8e 22	               jsr  push
.0ff1	ae 7f 09	               ldx  previouskey
.0ff4	bd 9a 25	               lda  asciitorom,x
.0ff7	aa		               tax
.0ff8	a9 0f		               lda  #charscolor
.0ffa	9d 00 d8	               sta  colorram,x
.0ffd	ae 7e 09	               ldx  currentkey
.1000	bd 9a 25	               lda  asciitorom,x
.1003	aa		               tax
.1004	a9 01		               lda  #charcolor
.1006	9d 00 d8	               sta  colorram,x
.1009	20 cd 22	               jsr  pop
.100c	60		               rts
.100d			calcmapaddr
.100d	20 8e 22	               jsr  push
.1010	ad 71 09	               lda  bitmapaddr     ; on pointe sur la table des bitmaps
.1013	85 fb		               sta  zpage1
.1015	ad 72 09	               lda  bitmapaddr+1
.1018	85 fc		               sta  zpage1+1
.101a	ae 80 09	               ldx  bitmapoffset
.101d	e0 00		               cpx  #$00
.101f	f0 08		               beq  thesame         ; sommes nous déja à 0
.1021	a9 08		addagain       lda  #$08
.1023	20 85 12	               jsr  zp1addnum      ; on augmente de 8 byte ...
.1026	ca		               dex                 ; pour chaque caracteres
.1027	d0 f8		               bne  addagain
.1029	48		thesame        pha
.102a	a5 fb		               lda  zpage1
.102c	8d 81 09	               sta  mapaddr
.102f	a5 fc		               lda  zpage1+1
.1031	8d 82 09	               sta  mapaddr+1
.1034	68		               pla
.1035	20 f1 0b	               jsr  drawkeyval
.1038	20 cd 22	out            jsr  pop
.103b	60		               rts
.103c			abintograph
.103c	20 8e 22	               jsr  push
.103f	a9 4f		               lda  #<abin
.1041	85 fb		               sta  zpage1
.1043	a9 24		               lda  #>abin+1
.1045	85 fc		               sta  zpage1+1
.1047	a0 00		               ldy  #$00
.1049	b1 fb		nextbit        lda  (zpage1),y
.104b	c9 30		               cmp  #$30
.104d	f0 07		               beq  itszero
.104f	a9 d1		itsone         lda  #$d1
.1051	91 fb		               sta  (zpage1),y
.1053	4c 5a 10	               jmp  next
.1056	a9 2e		itszero        lda  #$2e
.1058	91 fb		               sta  (zpage1),y
.105a	c8		next           iny
.105b	c0 08		               cpy  #$08
.105d	30 ea		               bmi  nextbit
.105f	20 cd 22	               jsr  pop
.1062	60		               rts
.1063			setscreenptr
.1063	20 8e 22	               jsr  push
.1066	a9 08		               lda  #$08      ; basic commande to disable ...
.1068	20 d2 ff	               jsr  chrout    ; ... character set change.
.106b	ad 18 d0	               lda  vicmemptr      ;$d018, 53272
.106e	29 f0		               and  #%11110000     ; On conserve les bits 7654 de ce registre ...
.1070	09 0a		               ora  #charsdef      ; on place les bits 3210 à %xxxx001x ce qui ...
.1072	8d 18 d0	               sta  vicmemptr      ; $d018, 53272
.1075	20 cd 22	               jsr  pop
.1078	60		               rts
.1079			copycharset
.1079	20 8e 22	               jsr  push
.107c	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.107f	29 fe		               and  #%11111110     ;254
.1081	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.1084	a5 01		               lda  u6510map       ;$01
.1086	29 fb		               and  #%11111011     ;251
.1088	85 01		               sta  u6510map       ;$01
.108a	20 9f 10	               jsr  memcopy
.108d	a5 01		               lda  u6510map       ;$01
.108f	09 04		               ora  #%00000100
.1091	85 01		               sta  u6510map       ;$01
.1093	ad 0e dc	               lda  cia1cra        ;$dc0e, 56334 cia1 control register A
.1096	09 01		               ora  #%00000001     ;254
.1098	8d 0e dc	               sta  cia1cra        ;$dc0e, 56334 cia1 control register A
.109b	20 cd 22	               jsr  pop
.109e	60		               rts
.109f			memcopy
.109f	20 8e 22	               jsr  push
.10a2	ad 6d 09	               lda  startaddr
.10a5	85 fb		               sta  zpage1
.10a7	ad 6e 09	               lda  startaddr+1
.10aa	85 fc		               sta  zpage1+1
.10ac	ad 71 09	               lda  bitmapaddr
.10af	85 fd		               sta  zpage2
.10b1	ad 72 09	               lda  bitmapaddr+1
.10b4	85 fe		               sta  zpage2+1
.10b6	a0 00		               ldy  #$00
.10b8	b1 fb		onemore        lda  (zpage1),y
.10ba	91 fd		               sta  (zpage2),y
.10bc	20 95 23	               jsr  inczp1
.10bf	20 ad 23	               jsr  inczp2
.10c2	a5 fc		               lda  zpage1+1
.10c4	cd 70 09	               cmp  stopaddr+1
.10c7	d0 ef		               bne  onemore
.10c9	a5 fb		               lda  zpage1
.10cb	cd 6f 09	               cmp  stopaddr
.10ce	d0 e8		               bne  onemore
.10d0	20 cd 22	               jsr  pop
.10d3	60		               rts
.10d4			staticscreen
.10d4	48		               pha
.10d5	a9 0b		               lda  #bordure
.10d7	8d 20 d0	               sta  $d020
.10da	68		               pla
.10db	48		               pha
.10dc	a9 00		               lda  #fond
.10de	8d 21 d0	               sta  $d021
.10e1	68		               pla
.10e2	20 dc 11	               jsr  drawlines
.10e5	20 b8 11	               jsr  drawallchars
.10e8	20 24 12	               jsr  drawgrid
.10eb	20 29 11	               jsr  drawfkeys
.10ee	a9 0a		               lda  #vrose
.10f0	8d 73 1d	               sta  redraw_msg
.10f3	20 8e 22	               jsr  push
.10f6	a2 a4		               ldx  #<blankmsg
.10f8	a0 1a		               ldy  #>blankmsg
.10fa	20 26 22	               jsr  putscxy
.10fd	a2 73		               ldx  #<redraw_msg
.10ff	a0 1d		               ldy  #>redraw_msg
.1101	20 26 22	               jsr  putscxy
.1104	20 cd 22	               jsr  pop
.1107	20 8e 22	               jsr  push
.110a	a2 a4		               ldx  #<blankmsg
.110c	a0 1a		               ldy  #>blankmsg
.110e	20 26 22	               jsr  putscxy
.1111	a2 5e		               ldx  #<quit_msg
.1113	a0 1d		               ldy  #>quit_msg
.1115	20 26 22	               jsr  putscxy
.1118	20 cd 22	               jsr  pop
.111b	20 8e 22	               jsr  push
.111e	a2 00		               ldx  #0
.1120	a0 07		               ldy  #7
.1122	20 b7 21	               jsr  gotoxy
.1125	20 cd 22	               jsr  pop
.1128	60		               rts
.1129			drawfkeys
.1129	20 8e 22	               jsr  push
.112c	ad 7c 09	               lda  fkeyset
.112f	c9 00		               cmp  #$0
.1131	d0 42		               bne  secondks
.1133	a2 58		               ldx #<titremenu1
.1135	a0 1f		               ldy #>titremenu1
.1137	20 26 22	               jsr putscxy
.113a	a2 8e		               ldx #<f1abutton
.113c	a0 1f		               ldy #>f1abutton
.113e	20 26 22	               jsr putscxy
.1141	a2 a9		               ldx #<f2abutton
.1143	a0 1f		               ldy #>f2abutton
.1145	20 26 22	               jsr putscxy
.1148	a2 c4		               ldx #<f3abutton
.114a	a0 1f		               ldy #>f3abutton
.114c	20 26 22	               jsr putscxy
.114f	a2 df		               ldx #<f4abutton
.1151	a0 1f		               ldy #>f4abutton
.1153	20 26 22	               jsr putscxy
.1156	a2 fa		               ldx #<f5abutton
.1158	a0 1f		               ldy #>f5abutton
.115a	20 26 22	               jsr putscxy
.115d	a2 15		               ldx #<f6abutton
.115f	a0 20		               ldy #>f6abutton
.1161	20 26 22	               jsr putscxy
.1164	a2 30		               ldx #<f7abutton
.1166	a0 20		               ldy #>f7abutton
.1168	20 26 22	               jsr putscxy
.116b	a2 4b		               ldx #<f8abutton
.116d	a0 20		               ldy #>f8abutton
.116f	20 26 22	               jsr putscxy
.1172	4c b4 11	               jmp end
.1175			secondks
.1175	a2 73		               ldx #<titremenu2
.1177	a0 1f		               ldy #>titremenu2
.1179	20 26 22	               jsr putscxy
.117c	a2 66		               ldx #<f1bbutton
.117e	a0 20		               ldy #>f1bbutton
.1180	20 26 22	               jsr putscxy
.1183	a2 81		               ldx #<f2bbutton
.1185	a0 20		               ldy #>f2bbutton
.1187	20 26 22	               jsr putscxy
.118a	a2 9c		               ldx #<f3bbutton
.118c	a0 20		               ldy #>f3bbutton
.118e	20 26 22	               jsr putscxy
.1191	a2 b7		               ldx #<f4bbutton
.1193	a0 20		               ldy #>f4bbutton
.1195	20 26 22	               jsr putscxy
.1198	a2 d2		               ldx #<f5bbutton
.119a	a0 20		               ldy #>f5bbutton
.119c	20 26 22	               jsr putscxy
.119f	a2 ed		               ldx #<f6bbutton
.11a1	a0 20		               ldy #>f6bbutton
.11a3	20 26 22	               jsr putscxy
.11a6	a2 08		               ldx #<f7bbutton
.11a8	a0 21		               ldy #>f7bbutton
.11aa	20 26 22	               jsr putscxy
.11ad	a2 23		               ldx #<f8bbutton
.11af	a0 21		               ldy #>f8bbutton
.11b1	20 26 22	               jsr putscxy
.11b4	20 cd 22	end            jsr  pop
.11b7	60		               rts
.11b8			drawallchars
.11b8	20 8e 22	               jsr push
.11bb	20 8e 22	               jsr  push
.11be	a2 00		               ldx  #0
.11c0	a0 00		               ldy  #0
.11c2	20 b7 21	               jsr  gotoxy
.11c5	20 cd 22	               jsr  pop
.11c8	a2 00		               ldx  #$00
.11ca	8a		nextc          txa
.11cb	9d 00 04	               sta  scrnnewram,x
.11ce	a9 0f		               lda  #charscolor
.11d0	9d 00 d8	               sta  colorram,x
.11d3	e8		               inx
.11d4	e0 80		               cpx  #$80
.11d6	d0 f2		               bne  nextc
.11d8	20 cd 22	               jsr  pop
.11db	60		               rts
.11dc			drawlines
=4			hline1=4
=6			hline2=6
=18			hline3=18
=16			vlinepos=16
=1272			vzplit=scrnnewram+(6*40)+8
.11dc	20 8e 22	               jsr  push
.11df	a2 28		               ldx  #40
.11e1	a9 40		               lda  #64
.11e3	9d 9f 04	nextl          sta  scrnnewram+(40*hline1)-1,x  ;On imprime les deux grande
.11e6	9d ef 04	               sta  scrnnewram+(40*hline2)-1,x  ; lignes horizontales
.11e9	ca		               dex
.11ea	e0 10		hline          cpx  #vlinepos
.11ec	10 03		               bpl  notyet
.11ee	9d d0 06	               sta  scrnnewram+(40*hline3),x    ;On imprime la demiligne horz.
.11f1	e0 00		notyet         cpx  #$00
.11f3	d0 ee		               bne  nextl
.11f5	a9 00		               lda  #<scrnnewram+(40*(hline2))+vlinepos
.11f7	85 fb		               sta  zpage1
.11f9	a9 05		               lda  #>scrnnewram+(40*(hline2))+vlinepos
.11fb	85 fc		               sta  zpage1+1
.11fd	a0 00		               ldy  #0
.11ff	a9 72		               lda  #114
.1201	91 fb		               sta  (zpage1),y
.1203	20 93 12	               jsr  zp1add40
.1206	a2 12		               ldx  #24-hline2
.1208	a9 5d		               lda  #93
.120a	91 fb		another93      sta  (zpage1),y
.120c	20 93 12	               jsr  zp1add40
.120f	ca		               dex
.1210	d0 f8		               bne  another93
.1212	a9 e0		               lda  #<scrnnewram+(40*(hline3))+vlinepos
.1214	85 fb		               sta  zpage1
.1216	a9 06		               lda  #>scrnnewram+(40*(hline3))+vlinepos
.1218	85 fc		               sta  zpage1+1
.121a	a0 00		               ldy  #0
.121c	a9 73		               lda  #115
.121e	91 fb		               sta  (zpage1),y
.1220	20 cd 22	               jsr  pop
.1223	60		               rts
.1224			drawgrid
.1224	20 8e 22	               jsr  push
.1227	20 46 21	               jsr  screendis
.122a	a9 69		               lda  #<scrnnewram+(40*(grid_top))+grid_left
.122c	85 fb		               sta  zpage1
.122e	a9 05		               lda  #>scrnnewram+(40*(grid_top))+grid_left
.1230	85 fc		               sta  zpage1+1
.1232	a2 08		               ldx  #8
.1234	a9 65		nextbox        lda  #101
.1236	a0 09		               ldy  #9
.1238	91 fb		               sta  (zpage1),y
.123a	88		               dey
.123b	a9 2e		               lda  #$2e
.123d	91 fb		nextcol        sta  (zpage1),y
.123f	88		               dey
.1240	d0 fb		               bne  nextcol
.1242	20 93 12	               jsr  zp1add40
.1245	ca		               dex
.1246	d0 ec		               bne  nextbox
.1248	a0 08		               ldy  #8
.124a	a9 77		               lda  #119
.124c	91 fb		nextlin        sta  (zpage1),y
.124e	88		               dey
.124f	d0 fb		               bne  nextlin
.1251	a9 3e		               lda  #$3e
.1253	8d eb 05	               sta  scrnnewram+(40*(12))+11
.1256	a9 70		               lda  #$70                     ;+
.1258	8d c4 05	               sta  scrnnewram+(40*(11))+12
.125b	a9 43		               lda  #$43                     ;-
.125d	8d c5 05	               sta  scrnnewram+(40*(11))+13
.1260	a9 6e		               lda  #$6e                     ;+
.1262	8d c6 05	               sta  scrnnewram+(40*(11))+14
.1265	a9 5d		               lda  #$5d                     ;|
.1267	8d ec 05	               sta  scrnnewram+(40*(12))+12
.126a	a9 5d		               lda  #$5d                     ;|
.126c	8d ee 05	               sta  scrnnewram+(40*(12))+14
.126f	a9 6d		               lda  #$6d                     ;+
.1271	8d 14 06	               sta  scrnnewram+(40*(13))+12
.1274	a9 43		               lda  #$43                     ;-
.1276	8d 15 06	               sta  scrnnewram+(40*(13))+13
.1279	a9 7d		               lda  #$7d                     ;+
.127b	8d 16 06	               sta  scrnnewram+(40*(13))+14
.127e	20 53 21	               jsr screenena
.1281	20 cd 22	               jsr  pop
.1284	60		               rts
.1285			zp1addnum
.1285	08		               php
.1286	48		               pha
.1287	18		               clc
.1288	65 fb		               adc  zpage1
.128a	90 02		               bcc  nocarry
.128c	e6 fc		               inc  zpage1+1
.128e	85 fb		nocarry        sta  zpage1
.1290	68		               pla
.1291	28		               plp
.1292	60		               rts
.1293			zp1add40
.1293	08		               php
.1294	48		               pha
.1295	18		               clc
.1296	a5 fb		               lda  zpage1
.1298	69 28		               adc  #40
.129a	90 02		               bcc  nocarry
.129c	e6 fc		               inc  zpage1+1
.129e	85 fb		nocarry        sta  zpage1
.12a0	68		               pla
.12a1	28		               plp
.12a2	60		               rts
.12a3			delay
.12a3	20 8e 22	               jsr  push
.12a6	a9 00		               lda  #$0
.12a8	aa		               tax
.12a9	a8		               tay
.12aa	ca		xagain         dex
.12ab	ca		               dex
.12ac	88		yagain         dey
.12ad	c0 00		               cpy  #$00
.12af	d0 fb		               bne  yagain
.12b1	e0 00		               cpx  #$00
.12b3	d0 f5		               bne  xagain
.12b5	20 cd 22	               jsr  pop
.12b8	60		               rts
.12b9			f1action
.12b9	48		               pha
.12ba	a9 ff		               lda  #$ff
.12bc	8d 7b 09	               sta  editmode
.12bf	ad 7c 09	               lda  fkeyset
.12c2	f0 03		               beq  menua
.12c4	4c 7e 13	               jmp  menub
.12c7			menua
.12c7	20 8e 22	               jsr  push
.12ca	a2 a4		               ldx  #<blankmsg
.12cc	a0 1a		               ldy  #>blankmsg
.12ce	20 26 22	               jsr  putscxy
.12d1	a2 12		               ldx  #<f1a_msg
.12d3	a0 1b		               ldy  #>f1a_msg
.12d5	20 26 22	               jsr  putscxy
.12d8	20 cd 22	               jsr  pop
.12db	08		               php
.12dc	48		               pha
.12dd	8a		               txa
.12de	48		               pha
.12df	ad 8e 1f	               lda  f1abutton
.12e2	48		               pha
.12e3	a9 92		               lda  #146
.12e5	8d a0 1f	               sta  f1abutton+18
.12e8	a9 01		               lda  #flashcol
.12ea	8d 8e 1f	               sta  f1abutton
.12ed	a2 8e		               ldx  #<f1abutton
.12ef	a0 1f		               ldy  #>f1abutton
.12f1	20 26 22	               jsr  putscxy
.12f4	20 a3 12	               jsr  delay
.12f7	a9 12		               lda  #18
.12f9	8d a0 1f	               sta  f1abutton+18
.12fc	68		               pla
.12fd	8d 8e 1f	               sta  f1abutton
.1300	a2 8e		               ldx  #<f1abutton
.1302	a0 1f		               ldy  #>f1abutton
.1304	20 26 22	               jsr  putscxy
.1307	68		               pla
.1308	aa		               tax
.1309	68		               pla
.130a	28		               plp
.130b	a9 0b		               lda  #vgris
.130d	20 b3 0b	               jsr  setmenuacolor
.1310	a9 03		               lda  #menu1col1
.1312	8d 8e 1f	               sta  f1abutton
.1315	20 29 11	               jsr  drawfkeys
.1318	a9 0b		               lda  #vgris
.131a	8d 73 1d	               sta  redraw_msg
.131d	20 8e 22	               jsr  push
.1320	a2 a4		               ldx  #<blankmsg
.1322	a0 1a		               ldy  #>blankmsg
.1324	20 26 22	               jsr  putscxy
.1327	a2 73		               ldx  #<redraw_msg
.1329	a0 1d		               ldy  #>redraw_msg
.132b	20 26 22	               jsr  putscxy
.132e	20 cd 22	               jsr  pop
.1331	20 f4 0d	               jsr  editor
.1334	a9 0a		               lda  #vrose
.1336	8d 73 1d	               sta  redraw_msg
.1339	20 8e 22	               jsr  push
.133c	a2 a4		               ldx  #<blankmsg
.133e	a0 1a		               ldy  #>blankmsg
.1340	20 26 22	               jsr  putscxy
.1343	a2 73		               ldx  #<redraw_msg
.1345	a0 1d		               ldy  #>redraw_msg
.1347	20 26 22	               jsr  putscxy
.134a	20 cd 22	               jsr  pop
.134d	20 8e 22	               jsr  push
.1350	a2 a4		               ldx  #<blankmsg
.1352	a0 1a		               ldy  #>blankmsg
.1354	20 26 22	               jsr  putscxy
.1357	a2 5e		               ldx  #<quit_msg
.1359	a0 1d		               ldy  #>quit_msg
.135b	20 26 22	               jsr  putscxy
.135e	20 cd 22	               jsr  pop
.1361	20 8e 22	               jsr  push
.1364	a2 a4		               ldx  #<blankmsg
.1366	a0 1a		               ldy  #>blankmsg
.1368	20 26 22	               jsr  putscxy
.136b	a2 b6		               ldx  #<menua_msg
.136d	a0 1c		               ldy  #>menua_msg
.136f	20 26 22	               jsr  putscxy
.1372	20 cd 22	               jsr  pop
.1375	20 6d 0b	               jsr  resetmenuacolor
.1378	20 29 11	               jsr  drawfkeys
.137b	4c c8 13	               jmp  out
.137e			menub
.137e	20 8e 22	               jsr  push
.1381	a2 a4		               ldx  #<blankmsg
.1383	a0 1a		               ldy  #>blankmsg
.1385	20 26 22	               jsr  putscxy
.1388	a2 fa		               ldx  #<f1b_msg
.138a	a0 1b		               ldy  #>f1b_msg
.138c	20 26 22	               jsr  putscxy
.138f	20 cd 22	               jsr  pop
.1392	08		               php
.1393	48		               pha
.1394	8a		               txa
.1395	48		               pha
.1396	ad 66 20	               lda  f1bbutton
.1399	48		               pha
.139a	a9 92		               lda  #146
.139c	8d 78 20	               sta  f1bbutton+18
.139f	a9 01		               lda  #flashcol
.13a1	8d 66 20	               sta  f1bbutton
.13a4	a2 66		               ldx  #<f1bbutton
.13a6	a0 20		               ldy  #>f1bbutton
.13a8	20 26 22	               jsr  putscxy
.13ab	20 a3 12	               jsr  delay
.13ae	a9 12		               lda  #18
.13b0	8d 78 20	               sta  f1bbutton+18
.13b3	68		               pla
.13b4	8d 66 20	               sta  f1bbutton
.13b7	a2 66		               ldx  #<f1bbutton
.13b9	a0 20		               ldy  #>f1bbutton
.13bb	20 26 22	               jsr  putscxy
.13be	68		               pla
.13bf	aa		               tax
.13c0	68		               pla
.13c1	28		               plp
.13c2	20 70 1a	               jsr  flipvert
.13c5	20 a6 0f	               jsr  drawbitmap
.13c8	68		out            pla
.13c9	20 8e 22	               jsr  push
.13cc	a2 a4		               ldx  #<blankmsg
.13ce	a0 1a		               ldy  #>blankmsg
.13d0	20 26 22	               jsr  putscxy
.13d3	a2 d0		               ldx  #<prompt_msg
.13d5	a0 1a		               ldy  #>prompt_msg
.13d7	20 26 22	               jsr  putscxy
.13da	20 cd 22	               jsr  pop
.13dd	60		               rts
.13de			f2action
.13de	48		               pha
.13df	a9 00		               lda  #$0
.13e1	8d 7b 09	               sta  editmode
.13e4	ad 7c 09	               lda  fkeyset
.13e7	d0 4d		               bne  menub
.13e9	20 8e 22	               jsr  push
.13ec	a2 a4		               ldx  #<blankmsg
.13ee	a0 1a		               ldy  #>blankmsg
.13f0	20 26 22	               jsr  putscxy
.13f3	a2 2d		               ldx  #<f2a_msg
.13f5	a0 1b		               ldy  #>f2a_msg
.13f7	20 26 22	               jsr  putscxy
.13fa	20 cd 22	               jsr  pop
.13fd	08		               php
.13fe	48		               pha
.13ff	8a		               txa
.1400	48		               pha
.1401	ad a9 1f	               lda  f2abutton
.1404	48		               pha
.1405	a9 92		               lda  #146
.1407	8d bb 1f	               sta  f2abutton+18
.140a	a9 01		               lda  #flashcol
.140c	8d a9 1f	               sta  f2abutton
.140f	a2 a9		               ldx  #<f2abutton
.1411	a0 1f		               ldy  #>f2abutton
.1413	20 26 22	               jsr  putscxy
.1416	20 a3 12	               jsr  delay
.1419	a9 12		               lda  #18
.141b	8d bb 1f	               sta  f2abutton+18
.141e	68		               pla
.141f	8d a9 1f	               sta  f2abutton
.1422	a2 a9		               ldx  #<f2abutton
.1424	a0 1f		               ldy  #>f2abutton
.1426	20 26 22	               jsr  putscxy
.1429	68		               pla
.142a	aa		               tax
.142b	68		               pla
.142c	28		               plp
.142d	20 55 0a	               jsr  copychar
.1430	20 a6 0f	               jsr  drawbitmap
.1433	4c 80 14	               jmp  out
.1436			menub
.1436	20 8e 22	               jsr  push
.1439	a2 a4		               ldx  #<blankmsg
.143b	a0 1a		               ldy  #>blankmsg
.143d	20 26 22	               jsr  putscxy
.1440	a2 16		               ldx  #<f2b_msg
.1442	a0 1c		               ldy  #>f2b_msg
.1444	20 26 22	               jsr  putscxy
.1447	20 cd 22	               jsr  pop
.144a	08		               php
.144b	48		               pha
.144c	8a		               txa
.144d	48		               pha
.144e	ad 81 20	               lda  f2bbutton
.1451	48		               pha
.1452	a9 92		               lda  #146
.1454	8d 93 20	               sta  f2bbutton+18
.1457	a9 01		               lda  #flashcol
.1459	8d 81 20	               sta  f2bbutton
.145c	a2 81		               ldx  #<f2bbutton
.145e	a0 20		               ldy  #>f2bbutton
.1460	20 26 22	               jsr  putscxy
.1463	20 a3 12	               jsr  delay
.1466	a9 12		               lda  #18
.1468	8d 93 20	               sta  f2bbutton+18
.146b	68		               pla
.146c	8d 81 20	               sta  f2bbutton
.146f	a2 81		               ldx  #<f2bbutton
.1471	a0 20		               ldy  #>f2bbutton
.1473	20 26 22	               jsr  putscxy
.1476	68		               pla
.1477	aa		               tax
.1478	68		               pla
.1479	28		               plp
.147a	20 43 1a	               jsr  fliphorz
.147d	20 a6 0f	               jsr  drawbitmap
.1480	68		out            pla
.1481	20 8e 22	               jsr  push
.1484	a2 a4		               ldx  #<blankmsg
.1486	a0 1a		               ldy  #>blankmsg
.1488	20 26 22	               jsr  putscxy
.148b	a2 d0		               ldx  #<prompt_msg
.148d	a0 1a		               ldy  #>prompt_msg
.148f	20 26 22	               jsr  putscxy
.1492	20 cd 22	               jsr  pop
.1495	60		               rts
.1496			f3action
.1496	48		               pha
.1497	a9 00		               lda  #$0
.1499	8d 7b 09	               sta  editmode
.149c	ad 7c 09	               lda  fkeyset
.149f	d0 76		               bne  menub
.14a1	08		               php
.14a2	48		               pha
.14a3	8a		               txa
.14a4	48		               pha
.14a5	ad c4 1f	               lda  f3abutton
.14a8	48		               pha
.14a9	a9 92		               lda  #146
.14ab	8d d6 1f	               sta  f3abutton+18
.14ae	a9 01		               lda  #flashcol
.14b0	8d c4 1f	               sta  f3abutton
.14b3	a2 c4		               ldx  #<f3abutton
.14b5	a0 1f		               ldy  #>f3abutton
.14b7	20 26 22	               jsr  putscxy
.14ba	20 a3 12	               jsr  delay
.14bd	a9 12		               lda  #18
.14bf	8d d6 1f	               sta  f3abutton+18
.14c2	68		               pla
.14c3	8d c4 1f	               sta  f3abutton
.14c6	a2 c4		               ldx  #<f3abutton
.14c8	a0 1f		               ldy  #>f3abutton
.14ca	20 26 22	               jsr  putscxy
.14cd	68		               pla
.14ce	aa		               tax
.14cf	68		               pla
.14d0	28		               plp
.14d1	20 8e 22	               jsr  push
.14d4	a2 a4		               ldx  #<blankmsg
.14d6	a0 1a		               ldy  #>blankmsg
.14d8	20 26 22	               jsr  putscxy
.14db	a2 4e		               ldx  #<f3a_msg
.14dd	a0 1b		               ldy  #>f3a_msg
.14df	20 26 22	               jsr  putscxy
.14e2	20 cd 22	               jsr  pop
.14e5	20 bf 26	getagain       jsr  getkey
.14e8	c9 31		               cmp  #$31
.14ea	f0 0b		               beq  devok
.14ec	c9 38		               cmp  #$38
.14ee	f0 07		               beq  devok
.14f0	c9 39		               cmp  #$39
.14f2	f0 03		               beq  devok
.14f4	4c e5 14	               jmp  getagain
.14f7	8d 9b 09	devok          sta  device
.14fa	20 e3 09	               jsr  getfname
.14fd	20 8e 22	               jsr  push
.1500	a2 a4		               ldx  #<blankmsg
.1502	a0 1a		               ldy  #>blankmsg
.1504	20 26 22	               jsr  putscxy
.1507	a2 f6		               ldx  #<wait_msg
.1509	a0 1a		               ldy  #>wait_msg
.150b	20 26 22	               jsr  putscxy
.150e	20 cd 22	               jsr  pop
.1511	20 c7 08	               jsr  savetofile
.1514	4c 61 15	               jmp  out
.1517			menub
.1517	20 8e 22	               jsr  push
.151a	a2 a4		               ldx  #<blankmsg
.151c	a0 1a		               ldy  #>blankmsg
.151e	20 26 22	               jsr  putscxy
.1521	a2 34		               ldx  #<f3b_msg
.1523	a0 1c		               ldy  #>f3b_msg
.1525	20 26 22	               jsr  putscxy
.1528	20 cd 22	               jsr  pop
.152b	08		               php
.152c	48		               pha
.152d	8a		               txa
.152e	48		               pha
.152f	ad 9c 20	               lda  f3bbutton
.1532	48		               pha
.1533	a9 92		               lda  #146
.1535	8d ae 20	               sta  f3bbutton+18
.1538	a9 01		               lda  #flashcol
.153a	8d 9c 20	               sta  f3bbutton
.153d	a2 9c		               ldx  #<f3bbutton
.153f	a0 20		               ldy  #>f3bbutton
.1541	20 26 22	               jsr  putscxy
.1544	20 a3 12	               jsr  delay
.1547	a9 12		               lda  #18
.1549	8d ae 20	               sta  f3bbutton+18
.154c	68		               pla
.154d	8d 9c 20	               sta  f3bbutton
.1550	a2 9c		               ldx  #<f3bbutton
.1552	a0 20		               ldy  #>f3bbutton
.1554	20 26 22	               jsr  putscxy
.1557	68		               pla
.1558	aa		               tax
.1559	68		               pla
.155a	28		               plp
.155b	20 ce 19	               jsr  scrollright
.155e	20 a6 0f	               jsr  drawbitmap
.1561	68		out            pla
.1562	20 8e 22	               jsr  push
.1565	a2 a4		               ldx  #<blankmsg
.1567	a0 1a		               ldy  #>blankmsg
.1569	20 26 22	               jsr  putscxy
.156c	a2 d0		               ldx  #<prompt_msg
.156e	a0 1a		               ldy  #>prompt_msg
.1570	20 26 22	               jsr  putscxy
.1573	20 cd 22	               jsr  pop
.1576	60		               rts
.1577			f4action
.1577	48		               pha
.1578	a9 00		               lda  #$0
.157a	8d 7b 09	               sta  editmode
.157d	ad 7c 09	               lda  fkeyset
.1580	d0 79		               bne  menub
.1582	08		               php
.1583	48		               pha
.1584	8a		               txa
.1585	48		               pha
.1586	ad df 1f	               lda  f4abutton
.1589	48		               pha
.158a	a9 92		               lda  #146
.158c	8d f1 1f	               sta  f4abutton+18
.158f	a9 01		               lda  #flashcol
.1591	8d df 1f	               sta  f4abutton
.1594	a2 df		               ldx  #<f4abutton
.1596	a0 1f		               ldy  #>f4abutton
.1598	20 26 22	               jsr  putscxy
.159b	20 a3 12	               jsr  delay
.159e	a9 12		               lda  #18
.15a0	8d f1 1f	               sta  f4abutton+18
.15a3	68		               pla
.15a4	8d df 1f	               sta  f4abutton
.15a7	a2 df		               ldx  #<f4abutton
.15a9	a0 1f		               ldy  #>f4abutton
.15ab	20 26 22	               jsr  putscxy
.15ae	68		               pla
.15af	aa		               tax
.15b0	68		               pla
.15b1	28		               plp
.15b2	20 8e 22	               jsr  push
.15b5	a2 a4		               ldx  #<blankmsg
.15b7	a0 1a		               ldy  #>blankmsg
.15b9	20 26 22	               jsr  putscxy
.15bc	a2 7b		               ldx  #<f4a_msg
.15be	a0 1b		               ldy  #>f4a_msg
.15c0	20 26 22	               jsr  putscxy
.15c3	20 cd 22	               jsr  pop
.15c6	20 bf 26	getagain       jsr  getkey
.15c9	c9 31		               cmp  #$31
.15cb	f0 0b		               beq  devok
.15cd	c9 38		               cmp  #$38
.15cf	f0 07		               beq  devok
.15d1	c9 39		               cmp  #$39
.15d3	f0 03		               beq  devok
.15d5	4c c6 15	               jmp  getagain
.15d8	8d 9b 09	devok          sta  device
.15db	20 e3 09	               jsr  getfname
.15de	20 8e 22	               jsr  push
.15e1	a2 a4		               ldx  #<blankmsg
.15e3	a0 1a		               ldy  #>blankmsg
.15e5	20 26 22	               jsr  putscxy
.15e8	a2 f6		               ldx  #<wait_msg
.15ea	a0 1a		               ldy  #>wait_msg
.15ec	20 26 22	               jsr  putscxy
.15ef	20 cd 22	               jsr  pop
.15f2	20 1a 09	               jsr  loadfromfile
.15f5	20 a3 09	               jsr  screenredraw
.15f8	4c 45 16	               jmp  out
.15fb			menub
.15fb	20 8e 22	               jsr  push
.15fe	a2 a4		               ldx  #<blankmsg
.1600	a0 1a		               ldy  #>blankmsg
.1602	20 26 22	               jsr  putscxy
.1605	a2 50		               ldx  #<f4b_msg
.1607	a0 1c		               ldy  #>f4b_msg
.1609	20 26 22	               jsr  putscxy
.160c	20 cd 22	               jsr  pop
.160f	08		               php
.1610	48		               pha
.1611	8a		               txa
.1612	48		               pha
.1613	ad b7 20	               lda  f4bbutton
.1616	48		               pha
.1617	a9 92		               lda  #146
.1619	8d c9 20	               sta  f4bbutton+18
.161c	a9 01		               lda  #flashcol
.161e	8d b7 20	               sta  f4bbutton
.1621	a2 b7		               ldx  #<f4bbutton
.1623	a0 20		               ldy  #>f4bbutton
.1625	20 26 22	               jsr  putscxy
.1628	20 a3 12	               jsr  delay
.162b	a9 12		               lda  #18
.162d	8d c9 20	               sta  f4bbutton+18
.1630	68		               pla
.1631	8d b7 20	               sta  f4bbutton
.1634	a2 b7		               ldx  #<f4bbutton
.1636	a0 20		               ldy  #>f4bbutton
.1638	20 26 22	               jsr  putscxy
.163b	68		               pla
.163c	aa		               tax
.163d	68		               pla
.163e	28		               plp
.163f	20 f3 19	               jsr  scrollleft
.1642	20 a6 0f	               jsr  drawbitmap
.1645	68		out            pla
.1646	20 8e 22	               jsr  push
.1649	a2 a4		               ldx  #<blankmsg
.164b	a0 1a		               ldy  #>blankmsg
.164d	20 26 22	               jsr  putscxy
.1650	a2 d0		               ldx  #<prompt_msg
.1652	a0 1a		               ldy  #>prompt_msg
.1654	20 26 22	               jsr  putscxy
.1657	20 cd 22	               jsr  pop
.165a	60		               rts
.165b			f5action
.165b	48		               pha
.165c	a9 00		               lda  #$0
.165e	8d 7b 09	               sta  editmode
.1661	ad 7c 09	               lda  fkeyset
.1664	d0 4d		               bne  menub
.1666	20 8e 22	               jsr  push
.1669	a2 a4		               ldx  #<blankmsg
.166b	a0 1a		               ldy  #>blankmsg
.166d	20 26 22	               jsr  putscxy
.1670	a2 a3		               ldx  #<f5a_msg
.1672	a0 1b		               ldy  #>f5a_msg
.1674	20 26 22	               jsr  putscxy
.1677	20 cd 22	               jsr  pop
.167a	08		               php
.167b	48		               pha
.167c	8a		               txa
.167d	48		               pha
.167e	ad fa 1f	               lda  f5abutton
.1681	48		               pha
.1682	a9 92		               lda  #146
.1684	8d 0c 20	               sta  f5abutton+18
.1687	a9 01		               lda  #flashcol
.1689	8d fa 1f	               sta  f5abutton
.168c	a2 fa		               ldx  #<f5abutton
.168e	a0 1f		               ldy  #>f5abutton
.1690	20 26 22	               jsr  putscxy
.1693	20 a3 12	               jsr  delay
.1696	a9 12		               lda  #18
.1698	8d 0c 20	               sta  f5abutton+18
.169b	68		               pla
.169c	8d fa 1f	               sta  f5abutton
.169f	a2 fa		               ldx  #<f5abutton
.16a1	a0 1f		               ldy  #>f5abutton
.16a3	20 26 22	               jsr  putscxy
.16a6	68		               pla
.16a7	aa		               tax
.16a8	68		               pla
.16a9	28		               plp
.16aa	20 21 1a	               jsr  clearchar
.16ad	20 a6 0f	               jsr  drawbitmap
.16b0	4c fd 16	               jmp  out
.16b3			menub
.16b3	20 8e 22	               jsr  push
.16b6	a2 a4		               ldx  #<blankmsg
.16b8	a0 1a		               ldy  #>blankmsg
.16ba	20 26 22	               jsr  putscxy
.16bd	a2 6c		               ldx  #<f5b_msg
.16bf	a0 1c		               ldy  #>f5b_msg
.16c1	20 26 22	               jsr  putscxy
.16c4	20 cd 22	               jsr  pop
.16c7	08		               php
.16c8	48		               pha
.16c9	8a		               txa
.16ca	48		               pha
.16cb	ad d2 20	               lda  f5bbutton
.16ce	48		               pha
.16cf	a9 92		               lda  #146
.16d1	8d e4 20	               sta  f5bbutton+18
.16d4	a9 01		               lda  #flashcol
.16d6	8d d2 20	               sta  f5bbutton
.16d9	a2 d2		               ldx  #<f5bbutton
.16db	a0 20		               ldy  #>f5bbutton
.16dd	20 26 22	               jsr  putscxy
.16e0	20 a3 12	               jsr  delay
.16e3	a9 12		               lda  #18
.16e5	8d e4 20	               sta  f5bbutton+18
.16e8	68		               pla
.16e9	8d d2 20	               sta  f5bbutton
.16ec	a2 d2		               ldx  #<f5bbutton
.16ee	a0 20		               ldy  #>f5bbutton
.16f0	20 26 22	               jsr  putscxy
.16f3	68		               pla
.16f4	aa		               tax
.16f5	68		               pla
.16f6	28		               plp
.16f7	20 5c 19	               jsr  scrollup
.16fa	20 a6 0f	               jsr  drawbitmap
.16fd	68		out            pla
.16fe	20 8e 22	               jsr  push
.1701	a2 a4		               ldx  #<blankmsg
.1703	a0 1a		               ldy  #>blankmsg
.1705	20 26 22	               jsr  putscxy
.1708	a2 d0		               ldx  #<prompt_msg
.170a	a0 1a		               ldy  #>prompt_msg
.170c	20 26 22	               jsr  putscxy
.170f	20 cd 22	               jsr  pop
.1712	60		               rts
.1713			f6action
.1713	48		               pha
.1714	a9 00		               lda  #$0
.1716	8d 7b 09	               sta  editmode
.1719	ad 7c 09	               lda  fkeyset
.171c	d0 4d		               bne  menub
.171e	20 8e 22	               jsr  push
.1721	a2 a4		               ldx  #<blankmsg
.1723	a0 1a		               ldy  #>blankmsg
.1725	20 26 22	               jsr  putscxy
.1728	a2 bf		               ldx  #<f6a_msg
.172a	a0 1b		               ldy  #>f6a_msg
.172c	20 26 22	               jsr  putscxy
.172f	20 cd 22	               jsr  pop
.1732	08		               php
.1733	48		               pha
.1734	8a		               txa
.1735	48		               pha
.1736	ad 15 20	               lda  f6abutton
.1739	48		               pha
.173a	a9 92		               lda  #146
.173c	8d 27 20	               sta  f6abutton+18
.173f	a9 01		               lda  #flashcol
.1741	8d 15 20	               sta  f6abutton
.1744	a2 15		               ldx  #<f6abutton
.1746	a0 20		               ldy  #>f6abutton
.1748	20 26 22	               jsr  putscxy
.174b	20 a3 12	               jsr  delay
.174e	a9 12		               lda  #18
.1750	8d 27 20	               sta  f6abutton+18
.1753	68		               pla
.1754	8d 15 20	               sta  f6abutton
.1757	a2 15		               ldx  #<f6abutton
.1759	a0 20		               ldy  #>f6abutton
.175b	20 26 22	               jsr  putscxy
.175e	68		               pla
.175f	aa		               tax
.1760	68		               pla
.1761	28		               plp
.1762	20 15 1a	               jsr  fillchar
.1765	20 a6 0f	               jsr  drawbitmap
.1768	4c b5 17	               jmp  out
.176b			menub
.176b	20 8e 22	               jsr  push
.176e	a2 a4		               ldx  #<blankmsg
.1770	a0 1a		               ldy  #>blankmsg
.1772	20 26 22	               jsr  putscxy
.1775	a2 86		               ldx  #<f6b_msg
.1777	a0 1c		               ldy  #>f6b_msg
.1779	20 26 22	               jsr  putscxy
.177c	20 cd 22	               jsr  pop
.177f	08		               php
.1780	48		               pha
.1781	8a		               txa
.1782	48		               pha
.1783	ad ed 20	               lda  f6bbutton
.1786	48		               pha
.1787	a9 92		               lda  #146
.1789	8d ff 20	               sta  f6bbutton+18
.178c	a9 01		               lda  #flashcol
.178e	8d ed 20	               sta  f6bbutton
.1791	a2 ed		               ldx  #<f6bbutton
.1793	a0 20		               ldy  #>f6bbutton
.1795	20 26 22	               jsr  putscxy
.1798	20 a3 12	               jsr  delay
.179b	a9 12		               lda  #18
.179d	8d ff 20	               sta  f6bbutton+18
.17a0	68		               pla
.17a1	8d ed 20	               sta  f6bbutton
.17a4	a2 ed		               ldx  #<f6bbutton
.17a6	a0 20		               ldy  #>f6bbutton
.17a8	20 26 22	               jsr  putscxy
.17ab	68		               pla
.17ac	aa		               tax
.17ad	68		               pla
.17ae	28		               plp
.17af	20 94 19	               jsr  scrolldown
.17b2	20 a6 0f	               jsr  drawbitmap
.17b5	68		out            pla
.17b6	20 8e 22	               jsr  push
.17b9	a2 a4		               ldx  #<blankmsg
.17bb	a0 1a		               ldy  #>blankmsg
.17bd	20 26 22	               jsr  putscxy
.17c0	a2 d0		               ldx  #<prompt_msg
.17c2	a0 1a		               ldy  #>prompt_msg
.17c4	20 26 22	               jsr  putscxy
.17c7	20 cd 22	               jsr  pop
.17ca	60		               rts
.17cb			f7action
.17cb	48		               pha
.17cc	a9 00		               lda  #$0
.17ce	8d 7b 09	               sta  editmode
.17d1	ad 7c 09	               lda  fkeyset
.17d4	d0 4d		               bne  menub
.17d6	20 8e 22	               jsr  push
.17d9	a2 a4		               ldx  #<blankmsg
.17db	a0 1a		               ldy  #>blankmsg
.17dd	20 26 22	               jsr  putscxy
.17e0	a2 dc		               ldx  #<f7a_msg
.17e2	a0 1b		               ldy  #>f7a_msg
.17e4	20 26 22	               jsr  putscxy
.17e7	20 cd 22	               jsr  pop
.17ea	08		               php
.17eb	48		               pha
.17ec	8a		               txa
.17ed	48		               pha
.17ee	ad 30 20	               lda  f7abutton
.17f1	48		               pha
.17f2	a9 92		               lda  #146
.17f4	8d 42 20	               sta  f7abutton+18
.17f7	a9 01		               lda  #flashcol
.17f9	8d 30 20	               sta  f7abutton
.17fc	a2 30		               ldx  #<f7abutton
.17fe	a0 20		               ldy  #>f7abutton
.1800	20 26 22	               jsr  putscxy
.1803	20 a3 12	               jsr  delay
.1806	a9 12		               lda  #18
.1808	8d 42 20	               sta  f7abutton+18
.180b	68		               pla
.180c	8d 30 20	               sta  f7abutton
.180f	a2 30		               ldx  #<f7abutton
.1811	a0 20		               ldy  #>f7abutton
.1813	20 26 22	               jsr  putscxy
.1816	68		               pla
.1817	aa		               tax
.1818	68		               pla
.1819	28		               plp
.181a	20 79 10	               jsr  copycharset
.181d	20 a6 0f	               jsr  drawbitmap
.1820	4c 72 18	               jmp  out
.1823	a9 00		menub          lda  #$0
.1825	8d 7b 09	               sta  editmode
.1828	20 8e 22	               jsr  push
.182b	a2 a4		               ldx  #<blankmsg
.182d	a0 1a		               ldy  #>blankmsg
.182f	20 26 22	               jsr  putscxy
.1832	a2 9f		               ldx  #<f7b_msg
.1834	a0 1c		               ldy  #>f7b_msg
.1836	20 26 22	               jsr  putscxy
.1839	20 cd 22	               jsr  pop
.183c	08		               php
.183d	48		               pha
.183e	8a		               txa
.183f	48		               pha
.1840	ad 08 21	               lda  f7bbutton
.1843	48		               pha
.1844	a9 92		               lda  #146
.1846	8d 1a 21	               sta  f7bbutton+18
.1849	a9 01		               lda  #flashcol
.184b	8d 08 21	               sta  f7bbutton
.184e	a2 08		               ldx  #<f7bbutton
.1850	a0 21		               ldy  #>f7bbutton
.1852	20 26 22	               jsr  putscxy
.1855	20 a3 12	               jsr  delay
.1858	a9 12		               lda  #18
.185a	8d 1a 21	               sta  f7bbutton+18
.185d	68		               pla
.185e	8d 08 21	               sta  f7bbutton
.1861	a2 08		               ldx  #<f7bbutton
.1863	a0 21		               ldy  #>f7bbutton
.1865	20 26 22	               jsr  putscxy
.1868	68		               pla
.1869	aa		               tax
.186a	68		               pla
.186b	28		               plp
.186c	20 3c 19	               jsr  reverse
.186f	20 a6 0f	               jsr  drawbitmap
.1872	68		out            pla
.1873	20 8e 22	               jsr  push
.1876	a2 a4		               ldx  #<blankmsg
.1878	a0 1a		               ldy  #>blankmsg
.187a	20 26 22	               jsr  putscxy
.187d	a2 d0		               ldx  #<prompt_msg
.187f	a0 1a		               ldy  #>prompt_msg
.1881	20 26 22	               jsr  putscxy
.1884	20 cd 22	               jsr  pop
.1887	60		               rts
.1888			f8action
.1888	48		               pha
.1889	a9 00		               lda  #$0
.188b	8d 7b 09	               sta  editmode
.188e	ad 7c 09	               lda  fkeyset
.1891	d0 47		               bne  menub
.1893	20 8e 22	               jsr  push
.1896	a2 a4		               ldx  #<blankmsg
.1898	a0 1a		               ldy  #>blankmsg
.189a	20 26 22	               jsr  putscxy
.189d	a2 db		               ldx  #<menub_msg
.189f	a0 1c		               ldy  #>menub_msg
.18a1	20 26 22	               jsr  putscxy
.18a4	20 cd 22	               jsr  pop
.18a7	08		               php
.18a8	48		               pha
.18a9	8a		               txa
.18aa	48		               pha
.18ab	ad 4b 20	               lda  f8abutton
.18ae	48		               pha
.18af	a9 92		               lda  #146
.18b1	8d 5d 20	               sta  f8abutton+18
.18b4	a9 01		               lda  #flashcol
.18b6	8d 4b 20	               sta  f8abutton
.18b9	a2 4b		               ldx  #<f8abutton
.18bb	a0 20		               ldy  #>f8abutton
.18bd	20 26 22	               jsr  putscxy
.18c0	20 a3 12	               jsr  delay
.18c3	a9 12		               lda  #18
.18c5	8d 5d 20	               sta  f8abutton+18
.18c8	68		               pla
.18c9	8d 4b 20	               sta  f8abutton
.18cc	a2 4b		               ldx  #<f8abutton
.18ce	a0 20		               ldy  #>f8abutton
.18d0	20 26 22	               jsr  putscxy
.18d3	68		               pla
.18d4	aa		               tax
.18d5	68		               pla
.18d6	28		               plp
.18d7	4c 1e 19	               jmp  swapit
.18da			menub
.18da	20 8e 22	               jsr  push
.18dd	a2 a4		               ldx  #<blankmsg
.18df	a0 1a		               ldy  #>blankmsg
.18e1	20 26 22	               jsr  putscxy
.18e4	a2 b6		               ldx  #<menua_msg
.18e6	a0 1c		               ldy  #>menua_msg
.18e8	20 26 22	               jsr  putscxy
.18eb	20 cd 22	               jsr  pop
.18ee	08		               php
.18ef	48		               pha
.18f0	8a		               txa
.18f1	48		               pha
.18f2	ad 23 21	               lda  f8bbutton
.18f5	48		               pha
.18f6	a9 92		               lda  #146
.18f8	8d 35 21	               sta  f8bbutton+18
.18fb	a9 01		               lda  #flashcol
.18fd	8d 23 21	               sta  f8bbutton
.1900	a2 23		               ldx  #<f8bbutton
.1902	a0 21		               ldy  #>f8bbutton
.1904	20 26 22	               jsr  putscxy
.1907	20 a3 12	               jsr  delay
.190a	a9 12		               lda  #18
.190c	8d 35 21	               sta  f8bbutton+18
.190f	68		               pla
.1910	8d 23 21	               sta  f8bbutton
.1913	a2 23		               ldx  #<f8bbutton
.1915	a0 21		               ldy  #>f8bbutton
.1917	20 26 22	               jsr  putscxy
.191a	68		               pla
.191b	aa		               tax
.191c	68		               pla
.191d	28		               plp
.191e	49 ff		swapit         eor  #$ff
.1920	8d 7c 09	               sta  fkeyset
.1923	20 29 11	               jsr  drawfkeys
.1926	68		               pla
.1927	20 8e 22	               jsr  push
.192a	a2 a4		               ldx  #<blankmsg
.192c	a0 1a		               ldy  #>blankmsg
.192e	20 26 22	               jsr  putscxy
.1931	a2 d0		               ldx  #<prompt_msg
.1933	a0 1a		               ldy  #>prompt_msg
.1935	20 26 22	               jsr  putscxy
.1938	20 cd 22	               jsr  pop
.193b	60		               rts
.193c			reverse
.193c	20 8e 22	               jsr  push
.193f	48		               pha
.1940	ad 81 09	               lda  mapaddr
.1943	85 fd		               sta  $fd
.1945	ad 82 09	               lda  mapaddr+1
.1948	85 fe		               sta  $fe
.194a	68		               pla
.194b	a0 00		               ldy  #$00
.194d	b1 fd		again          lda  (zpage2),y
.194f	49 ff		               eor  #$ff
.1951	91 fd		               sta  (zpage2),y
.1953	c8		               iny
.1954	c0 08		               cpy  #$08
.1956	d0 f5		               bne  again
.1958	20 cd 22	               jsr  pop
.195b	60		               rts
.195c			scrollup
.195c	20 8e 22	               jsr  push
.195f	48		               pha
.1960	ad 81 09	               lda  mapaddr
.1963	85 fb		               sta  $fb
.1965	ad 82 09	               lda  mapaddr+1
.1968	85 fc		               sta  $fc
.196a	68		               pla
.196b	48		               pha
.196c	ad 81 09	               lda  mapaddr
.196f	85 fd		               sta  $fd
.1971	ad 82 09	               lda  mapaddr+1
.1974	85 fe		               sta  $fe
.1976	68		               pla
.1977	20 ad 23	               jsr  inczp2
.197a	a0 00		               ldy  #$00
.197c	b1 fb		               lda  (zpage1),y
.197e	8d 93 19	               sta  tmpbyte
.1981	b1 fd		again          lda  (zpage2),y
.1983	91 fb		               sta  (zpage1),y
.1985	c8		               iny
.1986	c0 07		               cpy  #$07
.1988	d0 f7		               bne  again
.198a	ad 93 19	               lda  tmpbyte
.198d	91 fb		               sta  (zpage1),y
.198f	20 cd 22	               jsr  pop
.1992	60		               rts
>1993	00		tmpbyte        .byte     $00
.1994			scrolldown
.1994	20 8e 22	               jsr  push
.1997	48		               pha
.1998	ad 81 09	               lda  mapaddr
.199b	85 fb		               sta  $fb
.199d	ad 82 09	               lda  mapaddr+1
.19a0	85 fc		               sta  $fc
.19a2	68		               pla
.19a3	48		               pha
.19a4	ad 81 09	               lda  mapaddr
.19a7	85 fd		               sta  $fd
.19a9	ad 82 09	               lda  mapaddr+1
.19ac	85 fe		               sta  $fe
.19ae	68		               pla
.19af	20 ad 23	               jsr  inczp2
.19b2	a0 07		               ldy  #$07                ;xxxxxxxx zpage1
.19b4	b1 fb		               lda  (zpage1),y          ;xxxxxxxx zpage2
.19b6	8d cd 19	               sta  tmpbyte             ;xxxxxxxx
.19b9	88		again          dey                      ;xxxxxxxx
.19ba	b1 fb		               lda  (zpage1),y          ;xxxxxxxx
.19bc	91 fd		               sta  (zpage2),y          ;xxxxxxxx
.19be	c0 00		               cpy  #$00                ;xxxxxxxx
.19c0	d0 f7		               bne  again               ;xxxxxxxx
.19c2	a0 00		               ldy  #$00
.19c4	ad cd 19	               lda  tmpbyte
.19c7	91 fb		               sta  (zpage1),y
.19c9	20 cd 22	               jsr  pop
.19cc	60		               rts
>19cd	00		tmpbyte        .byte     $00
.19ce			scrollright
.19ce	20 8e 22	               jsr  push
.19d1	48		               pha
.19d2	ad 81 09	               lda  mapaddr
.19d5	85 fb		               sta  $fb
.19d7	ad 82 09	               lda  mapaddr+1
.19da	85 fc		               sta  $fc
.19dc	68		               pla
.19dd	a0 00		               ldy  #$00
.19df	b1 fb		again          lda  (zpage1),y
.19e1	18		               clc
.19e2	6a		               ror
.19e3	90 03		               bcc  zero
.19e5	18		               clc
.19e6	69 80		one            adc  #$80
.19e8	91 fb		zero           sta  (zpage1),y
.19ea	c8		               iny
.19eb	c0 08		               cpy  #$08
.19ed	d0 f0		               bne  again
.19ef	20 cd 22	               jsr  pop
.19f2	60		               rts
.19f3			scrollleft
.19f3	20 8e 22	               jsr  push
.19f6	48		               pha
.19f7	ad 81 09	               lda  mapaddr
.19fa	85 fb		               sta  $fb
.19fc	ad 82 09	               lda  mapaddr+1
.19ff	85 fc		               sta  $fc
.1a01	68		               pla
.1a02	a0 00		               ldy  #$00
.1a04	b1 fb		again          lda  (zpage1),y
.1a06	18		               clc
.1a07	2a		               rol
.1a08	69 00		               adc  #$00
.1a0a	91 fb		               sta  (zpage1),y
.1a0c	c8		               iny
.1a0d	c0 08		               cpy  #$08
.1a0f	d0 f3		               bne  again
.1a11	20 cd 22	               jsr  pop
.1a14	60		               rts
.1a15			fillchar
.1a15	20 8e 22	               jsr  push
.1a18	a9 ff		               lda  #$ff
.1a1a	20 2d 1a	               jsr  allsame
.1a1d	20 cd 22	               jsr  pop
.1a20	60		               rts
.1a21			clearchar
.1a21	20 8e 22	               jsr  push
.1a24	a9 00		               lda  #$00
.1a26	20 2d 1a	               jsr  allsame
.1a29	20 cd 22	               jsr  pop
.1a2c	60		               rts
.1a2d			allsame
.1a2d	48		               pha
.1a2e	ad 81 09	               lda  mapaddr
.1a31	85 fd		               sta  $fd
.1a33	ad 82 09	               lda  mapaddr+1
.1a36	85 fe		               sta  $fe
.1a38	68		               pla
.1a39	a0 00		               ldy  #$00
.1a3b	91 fd		again          sta  (zpage2),y
.1a3d	c8		               iny
.1a3e	c0 08		               cpy  #$08
.1a40	d0 f9		               bne  again
.1a42	60		               rts
.1a43			fliphorz
.1a43	20 8e 22	               jsr  push
.1a46	48		               pha
.1a47	ad 81 09	               lda  mapaddr
.1a4a	85 fd		               sta  $fd
.1a4c	ad 82 09	               lda  mapaddr+1
.1a4f	85 fe		               sta  $fe
.1a51	68		               pla
.1a52	a0 00		               ldy  #$00
.1a54	b1 fd		nextbyte       lda  (zpage2),y
.1a56	a2 00		               ldx  #$00
.1a58	2a		rolagain       rol
.1a59	6e 6f 1a	               ror  tmpbyte
.1a5c	e8		               inx
.1a5d	e0 08		               cpx  #$08
.1a5f	30 f7		               bmi  rolagain
.1a61	ad 6f 1a	               lda  tmpbyte
.1a64	91 fd		               sta  (zpage2),y
.1a66	c8		               iny
.1a67	c0 08		               cpy  #$08
.1a69	30 e9		               bmi  nextbyte
.1a6b	20 cd 22	               jsr  pop
.1a6e	60		               rts
>1a6f	00		tmpbyte        .byte     $00
.1a70			flipvert
.1a70	20 8e 22	               jsr  push
.1a73	48		               pha
.1a74	ad 81 09	               lda  mapaddr
.1a77	85 fd		               sta  $fd
.1a79	ad 82 09	               lda  mapaddr+1
.1a7c	85 fe		               sta  $fe
.1a7e	68		               pla
.1a7f	a0 00		               ldy  #$00
.1a81	b1 fd		tostack        lda  (zpage2),y
.1a83	48		               pha
.1a84	c8		               iny
.1a85	c0 08		               cpy  #$08
.1a87	d0 f8		               bne  tostack
.1a89	a0 00		               ldy  #$00
.1a8b	68		fromstack      pla
.1a8c	91 fd		               sta  (zpage2),y
.1a8e	c8		               iny
.1a8f	c0 08		               cpy  #$08
.1a91	d0 f8		               bne  fromstack
.1a93	20 cd 22	               jsr  pop
.1a96	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: messages_fr.asm

>1a97	0a 01 05	editor_msg     .byte vrose,1,5
>1a9a	5b 45 44 49	               .null     "[editeur]"
>1a9e	54 45 55 52 5d 00
>1aa4	03 00 05 92	blankmsg       .byte     mesgcol,0,5,146
>1aa8	20 20 20 20	               .null     "                                       "
>1aac	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1abc	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1acc	20 20 20 00
>1ad0	03 00 05 92	prompt_msg     .byte     mesgcol,0,5,146
>1ad4	20 55 54 49	               .null     " utilisez les clefs de fonction :"
>1ad8	4c 49 53 45 5a 20 4c 45 53 20 43 4c 45 46 53 20
>1ae8	44 45 20 46 4f 4e 43 54 49 4f 4e 20 3a 00
>1af6	03 00 05 92	wait_msg       .byte     mesgcol,0,5,146
>1afa	20 55 4e 20	               .null     " un instant s.v.p. ... "
>1afe	49 4e 53 54 41 4e 54 20 53 2e 56 2e 50 2e 20 2e
>1b0e	2e 2e 20 00
.1b12			f1a_msg
>1b12	03 00 05 92	edit_msg       .byte     mesgcol,0,5,146     ;18
>1b16	20 4d 4f 44	               .null     " mode edit: chr$(   )",146
>1b1a	45 20 45 44 49 54 3a 20 43 48 52 24 28 20 20 20
>1b2a	29 92 00
.1b2d			f2a_msg
>1b2d	03 00 05	copy_msg       .byte     mesgcol,0,5
>1b30	20 45 4e 54	               .null     " entez le character a copier:"
>1b34	45 5a 20 4c 45 20 43 48 41 52 41 43 54 45 52 20
>1b44	41 20 43 4f 50 49 45 52 3a 00
.1b4e			f3a_msg
>1b4e	03 00 05 92	save_msg       .byte     mesgcol,0,5,146
>1b52	20 53 41 55	               .null     " sauvegarder sur quel lecteur? (1/8/9): "
>1b56	56 45 47 41 52 44 45 52 20 53 55 52 20 51 55 45
>1b66	4c 20 4c 45 43 54 45 55 52 3f 20 28 31 2f 38 2f
>1b76	39 29 3a 20 00
.1b7b			f4a_msg
>1b7b	03 00 05 92	load_msg       .byte     mesgcol,0,5,146
>1b7f	20 43 48 41	               .null     " charger de quel lecteur? (1,8,9): "
>1b83	52 47 45 52 20 44 45 20 51 55 45 4c 20 4c 45 43
>1b93	54 45 55 52 3f 20 28 31 2c 38 2c 39 29 3a 20 00
.1ba3			f5a_msg
>1ba3	03 00 05	clear_msg      .byte     mesgcol,0,5
>1ba6	20 45 46 46	               .null     " effacer char: chr$(   )"
>1baa	41 43 45 52 20 43 48 41 52 3a 20 43 48 52 24 28
>1bba	20 20 20 29 00
.1bbf			f6a_msg
>1bbf	03 00 05	fill_msg       .byte     mesgcol,0,5
>1bc2	20 52 45 4d	               .null     " remplir char:  chr$(   )"
>1bc6	50 4c 49 52 20 43 48 41 52 3a 20 20 43 48 52 24
>1bd6	28 20 20 20 29 00
.1bdc			f7a_msg
>1bdc	03 00 05	work_msg       .byte     mesgcol,0,5
>1bdf	20 52 45 43	               .null     " recuperer les caracteres."
>1be3	55 50 45 52 45 52 20 4c 45 53 20 43 41 52 41 43
>1bf3	54 45 52 45 53 2e 00
.1bfa			f1b_msg
>1bfa	03 00 05	invr_msg       .byte     mesgcol,0,5
>1bfd	20 42 41 53	               .null     " basculer verticalement:"
>1c01	43 55 4c 45 52 20 56 45 52 54 49 43 41 4c 45 4d
>1c11	45 4e 54 3a 00
.1c16			f2b_msg
>1c16	03 00 05	flip_msg       .byte     mesgcol,0,5
>1c19	20 42 41 53	               .null     " basculer horizontalement:"
>1c1d	43 55 4c 45 52 20 48 4f 52 49 5a 4f 4e 54 41 4c
>1c2d	45 4d 45 4e 54 3a 00
.1c34			f3b_msg
>1c34	03 00 05	scrollr_msg    .byte     mesgcol,0,5
>1c37	20 44 45 46	               .null     " defiler vers la droite:"
>1c3b	49 4c 45 52 20 56 45 52 53 20 4c 41 20 44 52 4f
>1c4b	49 54 45 3a 00
.1c50			f4b_msg
>1c50	03 00 05	scrolll_msg    .byte     mesgcol,0,5
>1c53	20 44 45 46	               .null     " defiler vers la gauche:"
>1c57	49 4c 45 52 20 56 45 52 53 20 4c 41 20 47 41 55
>1c67	43 48 45 3a 00
.1c6c			f5b_msg
>1c6c	03 00 05	scrollu_msg    .byte     mesgcol,0,5
>1c6f	20 44 45 46	               .null     " defiler vers le haut:"
>1c73	49 4c 45 52 20 56 45 52 53 20 4c 45 20 48 41 55
>1c83	54 3a 00
.1c86			f6b_msg
>1c86	03 00 05	scrolld_msg    .byte     mesgcol,0,5
>1c89	20 44 45 46	               .null     " defiler vers le bas:"
>1c8d	49 4c 45 52 20 56 45 52 53 20 4c 45 20 42 41 53
>1c9d	3a 00
.1c9f			f7b_msg
>1c9f	03 00 05	rvrs_msg       .byte     mesgcol,0,5
>1ca2	20 52 45 56	               .null     " reverse character:"
>1ca6	45 52 53 45 20 43 48 41 52 41 43 54 45 52 3a 00
>1cb6	03 00 05	menua_msg      .byte     mesgcol,0,5
>1cb9	20 56 4f 55	               .null     " vous etes dirige vers le menu 1."
>1cbd	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1ccd	52 53 20 4c 45 20 4d 45 4e 55 20 31 2e 00
>1cdb	03 00 05	menub_msg      .byte     mesgcol,0,5
>1cde	20 56 4f 55	               .null     " vous etes dirige vers le menu 2."
>1ce2	53 20 45 54 45 53 20 44 49 52 49 47 45 20 56 45
>1cf2	52 53 20 4c 45 20 4d 45 4e 55 20 32 2e 00
>1d00	07 00 05	copychar_msg   .byte     vjaune,0,5
>1d03	20 45 4e 54	               .null     " entrez le caractera a copier (?).",157,157,157
>1d07	52 45 5a 20 4c 45 20 43 41 52 41 43 54 45 52 41
>1d17	20 41 20 43 4f 50 49 45 52 20 28 3f 29 2e 9d 9d
>1d27	9d 00
>1d29	07 00 05	fname_msg      .byte     vjaune,0,5
>1d2c	20 4e 4f 4d	               .null     " nom du fichier (6 lettres): ",$a4,$a4,$a4,$a4,$a4,$a4,".chr",157,157,157,157,157,157,157,157,157,157
>1d30	20 44 55 20 46 49 43 48 49 45 52 20 28 36 20 4c
>1d40	45 54 54 52 45 53 29 3a 20 a4 a4 a4 a4 a4 a4 2e
>1d50	43 48 52 9d 9d 9d 9d 9d 9d 9d 9d 9d 9d 00
>1d5e	04 15 18 12	quit_msg       .byte     vmauve,21,24,18
>1d62	43 54 52 4c	               .text     "ctrl-x",146
>1d66	2d 58 92
>1d69	2d 51 55 49	               .null     "-quitter."
>1d6d	54 54 45 52 2e 00
>1d73	0a 12 16 12	redraw_msg     .byte     vrose,18,22,18
>1d77	43 54 52 4c	               .text     "ctrl-r",146
>1d7b	2d 52 92
>1d7e	20 52 41 46	               .null     " rafraichir."
>1d82	52 41 49 43 48 49 52 2e 00
.1d8b			menu_msg
>1d8b	0d 15 18 12	exit_msg       .byte     vvert1,21,24,18
>1d8f	43 54 52 4c	               .text     "ctrl-x",146
>1d93	2d 58 92
>1d96	20 41 55 20	               .null     " au menu."
>1d9a	4d 45 4e 55 2e 00
>1da0	07 04 06 12	whoami0        .byte     whoamicol,4,6,18
>1da4	20 20 20 20	               .null     "                               ",146
>1da8	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1db8	20 20 20 20 20 20 20 20 20 20 20 92 00
>1dc5	07 04 07 12	whoami1        .byte     whoamicol,4,7,18
>1dc9	20 20 20 20	               .null     "       ",146," c h a r e d i t ",18,"       ",146
>1dcd	20 20 20 92 20 43 20 48 20 41 20 52 20 45 20 44
>1ddd	20 49 20 54 20 12 20 20 20 20 20 20 20 92 00
>1dec	07 04 08 12	whoami2        .byte     whoamicol,4,8,18
>1df0	20 20 20 20	               .null     "                               ",146
>1df4	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1e04	20 20 20 20 20 20 20 20 20 20 20 92 00
>1e11	07 04 09 12	whoami3        .byte     whoamicol,4,9,18
>1e15	20 54 49 52	               .null     " tirez de isbn : 0-942386-29-9 ",146
>1e19	45 5a 20 44 45 20 49 53 42 4e 20 3a 20 30 2d 39
>1e29	34 32 33 38 36 2d 32 39 2d 39 20 92 00
>1e36	07 04 0a 12	whoami4        .byte     whoamicol,4,10,18
>1e3a	20 20 20 20	               .null     "       par john heilborn       ",146
>1e3e	20 20 20 50 41 52 20 4a 4f 48 4e 20 48 45 49 4c
>1e4e	42 4f 52 4e 20 20 20 20 20 20 20 92 00
>1e5b	07 04 0b 12	whoami5        .byte     whoamicol,4,11,18
>1e5f	20 20 20 20	               .null     "                               ",146
>1e63	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1e73	20 20 20 20 20 20 20 20 20 20 20 92 00
>1e80	07 04 0c 12	whoami6        .byte     whoamicol,4,12,18
>1e84	20 20 20 20	               .null     "     code en assembleur par    ",146
>1e88	20 43 4f 44 45 20 45 4e 20 41 53 53 45 4d 42 4c
>1e98	45 55 52 20 50 41 52 20 20 20 20 92 00
>1ea5	07 04 0d 12	whoami7        .byte     whoamicol,4,13,18
>1ea9	20 44 41 4e	               .null     " daniel lafrance quebec/canada ",146
>1ead	49 45 4c 20 4c 41 46 52 41 4e 43 45 20 51 55 45
>1ebd	42 45 43 2f 43 41 4e 41 44 41 20 92 00
>1eca	07 04 0e 12	whoami8        .byte     whoamicol,4,14,18
>1ece	20 20 20 20	               .null     "    version:",version,"    ",146
>1ed2	56 45 52 53 49 4f 4e 3a 32 30 32 34 31 30 33 30
>1ee2	2d 32 30 34 31 34 34 20 20 20 20 92 00
>1eef	07 04 0f 12	whoami9        .byte     whoamicol,4,15,18
>1ef3	20 20 20 20	               .null     "                               ",146
>1ef7	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1f07	20 20 20 20 20 20 20 20 20 20 20 92 00
>1f14	03 06 10 14	bye_msg        .byte     vcyan,6,16,20
>1f18	20 20 20 20	               .null     "      bonjour et merci      ",146
>1f1c	20 20 42 4f 4e 4a 4f 55 52 20 45 54 20 4d 45 52
>1f2c	43 49 20 20 20 20 20 20 92 00
>1f36	0d 05 18 12	any_msg        .byte     vvert1,5,24,18
>1f3a	20 41 50 50	               .null     " appuyez une cle pour basic ",146
>1f3e	55 59 45 5a 20 55 4e 45 20 43 4c 45 20 50 4f 55
>1f4e	52 20 42 41 53 49 43 20 92 00
>1f58	03 12 07	titremenu1     .byte     menu1col1,fkeyleft,f1top-2       ;133
>1f5b	12 20 4a 45	               .null     18," jeu de fonctions #1 ",146
>1f5f	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1f6f	31 20 92 00
>1f73	0f 12 07	titremenu2     .byte     menu2col1,fkeyleft,f1top-2       ;133
>1f76	12 20 4a 45	               .null     18," jeu de fonctions #2 ",146
>1f7a	55 20 44 45 20 46 4f 4e 43 54 49 4f 4e 53 20 23
>1f8a	32 20 92 00
>1f8e	03 12 09	f1abutton      .byte     menu1col1,fkeyleft,f1top       ;133
>1f91	45 44 49 54	               .text     "editer carac..."
>1f95	45 52 20 43 41 52 41 43 2e 2e 2e
>1fa0	12		               .byte     18             ; position 15
>1fa1	a9 20 46 31	               .null     $a9," f1 ",223,146
>1fa5	20 df 92 00
>1fa9	0e 12 0a	f2abutton      .byte     menu1col2,fkeyleft,f1top+1     ;138
>1fac	43 4f 50 49	               .text     "copier un carac"
>1fb0	45 52 20 55 4e 20 43 41 52 41 43
>1fbb	12		               .byte     18   ; position 15
>1fbc	20 20 46 32	               .null     "  f2  ",146
>1fc0	20 20 92 00
>1fc4	03 12 0c	f3abutton      .byte     menu1col1,fkeyleft,f1top+3     ;137
>1fc7	53 41 56 45	               .text     "savegarder sur."
>1fcb	47 41 52 44 45 52 20 53 55 52 2e
>1fd6	12		               .byte     18            ; position 15
>1fd7	a9 20 46 33	               .null     $a9," f3 ",223,146
>1fdb	20 df 92 00
>1fdf	0e 12 0d	f4abutton      .byte     menu1col2,fkeyleft,f1top+4     ;134
>1fe2	43 48 41 52	               .text     "charger de....."
>1fe6	47 45 52 20 44 45 2e 2e 2e 2e 2e
>1ff1	12		               .byte     18             ; position 15
>1ff2	20 20 46 34	               .null     "  f4  ",146
>1ff6	20 20 92 00
>1ffa	03 12 0f	f5abutton      .byte     menu1col1,fkeyleft,f1top+6     ;135
>1ffd	4d 45 54 54	               .text     "mettre tout a 0"
>2001	52 45 20 54 4f 55 54 20 41 20 30
>200c	12		               .byte     18             ; position 15
>200d	a9 20 46 35	               .null     $a9," f5 ",223,146
>2011	20 df 92 00
>2015	0e 12 10	f6abutton      .byte     menu1col2,fkeyleft,f1top+7    ;139
>2018	4d 45 54 54	               .text     "mettre tout a 1"
>201c	52 45 20 54 4f 55 54 20 41 20 31
>2027	12		               .byte     18             ; position 15
>2028	20 20 46 36	               .null     "  f6  ",146
>202c	20 20 92 00
>2030	03 12 12	f7abutton      .byte     menu1col1,fkeyleft,f1top+9    ;136
>2033	52 45 43 55	               .text     "recuperer rom.."
>2037	50 45 52 45 52 20 52 4f 4d 2e 2e
>2042	12		               .byte     18             ; position 15
>2043	a9 20 46 37	               .null     $a9," f7 ",223,146
>2047	20 df 92 00
>204b	0e 12 13	f8abutton      .byte     menu1col2,fkeyleft,f1top+10
>204e	41 4c 4c 45	               .text     "aller au menu2."
>2052	52 20 41 55 20 4d 45 4e 55 32 2e
>205d	12		               .byte     18             ; position 15
>205e	20 20 46 38	               .null     "  f8  ", 146
>2062	20 20 92 00
>2066	0f 12 09	f1bbutton      .byte     menu2col1,fkeyleft,f1top
>2069	42 41 53 43	               .text     "basculer vert.."
>206d	55 4c 45 52 20 56 45 52 54 2e 2e
>2078	12		               .byte     18             ; position 15
>2079	a9 20 46 31	               .null     $a9," f1 ",223,146
>207d	20 df 92 00
>2081	0c 12 0a	f2bbutton      .byte     menu2col2,fkeyleft,f1top+1
>2084	42 41 53 43	               .text     "basculer horz.."
>2088	55 4c 45 52 20 48 4f 52 5a 2e 2e
>2093	12		               .byte     18             ; position 15
>2094	20 20 46 32	               .null     "  f2  ",146
>2098	20 20 92 00
>209c	0f 12 0c	f3bbutton      .byte     menu2col1,fkeyleft,f1top+3
>209f	44 45 46 49	               .text     "defiler droite."
>20a3	4c 45 52 20 44 52 4f 49 54 45 2e
>20ae	12		               .byte     18             ; position 15
>20af	a9 20 46 33	               .null     $a9," f3 ",223,146
>20b3	20 df 92 00
>20b7	0c 12 0d	f4bbutton      .byte     menu2col2,fkeyleft,f1top+4
>20ba	44 45 46 49	               .text     "defiler gauche."
>20be	4c 45 52 20 47 41 55 43 48 45 2e
>20c9	12		               .byte     18             ; position 15
>20ca	20 20 46 34	               .null     "  f4  ",146
>20ce	20 20 92 00
>20d2	0f 12 0f	f5bbutton      .byte     menu2col1,fkeyleft,f1top+6
>20d5	44 45 46 49	               .text     "defiler haut..."
>20d9	4c 45 52 20 48 41 55 54 2e 2e 2e
>20e4	12		               .byte     18             ; position 15
>20e5	a9 20 46 35	               .null     $a9," f5 ",223,146
>20e9	20 df 92 00
>20ed	0c 12 10	f6bbutton      .byte     menu2col2,fkeyleft,f1top+7
>20f0	44 45 46 49	               .text     "defiler bas...."
>20f4	4c 45 52 20 42 41 53 2e 2e 2e 2e
>20ff	12		               .byte     18             ; position 15
>2100	20 20 46 36	               .null     "  f6  ",146
>2104	20 20 92 00
>2108	0f 12 12	f7bbutton      .byte     menu2col1,fkeyleft,f1top+9
>210b	49 4e 56 45	               .text     "inverser bits.."
>210f	52 53 45 52 20 42 49 54 53 2e 2e
>211a	12		               .byte     18             ; position 15
>211b	a9 20 46 37	               .null     $a9," f7 ",223,146
>211f	20 df 92 00
>2123	0c 12 13	f8bbutton      .byte     menu2col2,fkeyleft,f1top+10
>2126	41 4c 4c 45	               .text     "aller au menu1."
>212a	52 20 41 55 20 4d 45 4e 55 31 2e
>2135	12		               .byte     18             ; position 15
>2136	20 20 46 38	               .null     "  f8  ", 146
>213a	20 20 92 00

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>213e	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>2142	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.2146			libtart

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_vftf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.2146			screendis
.2146	08		               php
.2147	48		               pha
.2148	ad 11 d0	               lda  $d011
.214b	29 ef		               and  #%11101111
.214d	8d 11 d0	               sta  $d011
.2150	68		               pla
.2151	28		               plp
.2152	60		               rts
.2153			screenena
.2153	08		               php
.2154	48		               pha
.2155	ad 11 d0	               lda  $d011
.2158	09 10		               ora  #%00010000
.215a	8d 11 d0	               sta  $d011
.215d	68		               pla
.215e	28		               plp
.215f	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.2160			scrmaninit
.2160	20 8e 22	               jsr  push
.2163	a9 06		               lda  #vbleu
.2165	8d 21 d0	               sta  vicbackcol
.2168	a9 05		               lda  #vvert
.216a	8d 20 d0	               sta  vicbordcol
.216d	a9 01		               lda  #vblanc
.216f	8d 86 02	               sta  bascol
.2172	ad 00 04	               lda  scrnram
.2175	8d 00 04	               sta  scrnram
.2178	20 80 21	               jsr  cls
.217b	20 cd 22	               jsr  pop
.217e	60		               rts
>217f	8e		characterset   .byte b_uppercase
.2180			cls
.2180	08		               php
.2181	48		               pha
.2182	a9 93		               lda  #$93
.2184	20 97 21	               jsr  putch
.2187	68		               pla
.2188	28		               plp
.2189	60		               rts
.218a			putnch
.218a	08		               php
.218b	e0 00		               cpx  #$00
.218d	f0 06		               beq  out
.218f	20 d2 ff	again          jsr  $ffd2
.2192	ca		               dex
.2193	d0 fa		               bne  again
.2195	28		out            plp
.2196	60		               rts
.2197			putch
.2197	08		               php
.2198	20 d2 ff	               jsr  $ffd2
.219b	28		               plp
.219c	60		               rts
.219d			puts
.219d	20 8e 22	               jsr  push
.21a0	86 fb		               stx  zpage1
.21a2	84 fc		               sty  zpage1+1
.21a4	a0 00		               ldy  #0
.21a6	b1 fb		next           lda  (zpage1),y
.21a8	f0 09		               beq  exit
.21aa	20 97 21	               jsr  putch
.21ad	20 95 23	               jsr  inczp1
.21b0	4c a6 21	               jmp  next
.21b3	20 cd 22	exit           jsr  pop
.21b6	60		               rts
.21b7			gotoxy
.21b7	08		               php
.21b8	18		               clc
.21b9	8a		               txa
.21ba	48		               pha
.21bb	98		               tya
.21bc	aa		               tax
.21bd	68		               pla
.21be	a8		               tay
.21bf	20 f0 ff	               jsr  kplot
.21c2	28		               plp
.21c3	60		               rts
.21c4			cursor
=$0286			bascol    =    $0286
.21c4	08		               php
.21c5	48		               pha
.21c6	90 12		               bcc  restore
.21c8	20 f0 ff	               jsr  kplot
.21cb	8c ec 21	               sty  cx
.21ce	8e ed 21	               stx  cy
.21d1	ad 86 02	               lda  bascol
.21d4	8d ee 21	               sta  bcol
.21d7	4c e9 21	               jmp  out
.21da	ae ed 21	restore        ldx  cy
.21dd	ac ec 21	               ldy  cx
.21e0	20 f0 ff	               jsr  kplot
.21e3	ad ee 21	               lda  bcol
.21e6	8d 86 02	               sta  bascol
.21e9	68		out            pla
.21ea	28		               plp
.21eb	60		               rts
>21ec	00		cx   .byte     $00
>21ed	00		cy   .byte     $00
>21ee	00		bcol .byte     $00
.21ef			cursave
.21ef	08		               php
.21f0	38		               sec
.21f1	20 c4 21	               jsr  cursor
.21f4	28		               plp
.21f5	60		               rts
.21f6			curput
.21f6	08		               php
.21f7	18		               clc
.21f8	20 c4 21	               jsr  cursor
.21fb	28		               plp
.21fc	60		               rts
.21fd			putsxy
.21fd	20 8e 22	               jsr  push
.2200	86 fb		               stx  zpage1
.2202	84 fc		               sty  zpage1+1
.2204	a0 00		               ldy  #$00
.2206	b1 fb		               lda  (zpage1),y
.2208	aa		               tax
.2209	20 95 23	               jsr  inczp1
.220c	b1 fb		               lda  (zpage1),y
.220e	a8		               tay
.220f	20 b7 21	               jsr  gotoxy
.2212	20 95 23	               jsr  inczp1
.2215	a6 fb		               ldx  zpage1
.2217	a4 fc		               ldy  zpage1+1
.2219	20 9d 21	               jsr  puts
.221c	20 cd 22	               jsr  pop
.221f	60		               rts
>2220	00 00		straddr   .word     $00
>2222	00		px        .byte     $00
>2223	00		py        .byte     $00
>2224	00 00		zp1       .word     $00
.2226			putscxy
.2226	20 8e 22	               jsr  push
.2229	84 fc		               sty  zpage1+1
.222b	86 fb		               stx  zpage1
.222d	ad 86 02	               lda  bascol
.2230	8d 50 22	               sta  bc
.2233	a0 00		               ldy #$00
.2235	b1 fb		               lda  (zpage1),y
.2237	8d 86 02	               sta  bascol
.223a	20 95 23	               jsr  inczp1
.223d	a6 fb		               ldx  zpage1
.223f	a4 fc		               ldy  zpage1+1
.2241	20 fd 21	               jsr  putsxy
.2244	ad 50 22	               lda  bc
.2247	8d 86 02	               sta  bascol
.224a	20 cd 22	               jsr  pop
.224d	60		               rts
>224e	00 00		straddr  .word      $00
>2250	00		bc       .byte      $00
>2251	00 00		zp1      .word      $00
.2253			putrahex
.2253	08		               php
.2254	48		               pha
.2255	20 ab 24	               jsr  a2hex
.2258	a9 4a		               lda  #<a2hexstr
.225a	a0 24		               ldy  #>a2hexstr
.225c	20 9d 21	               jsr  puts
.225f	68		               pla
.2260	28		               plp
.2261	60		               rts
.2262			kputrahexxy
.2262			bputrahexxy
.2262			putrahexxy
.2262	08		               php
.2263	20 ab 24	               jsr  a2hex
.2266	a9 47		               lda  #<a2hexpos
.2268	a0 24		               ldy  #>a2hexpos
.226a	20 fd 21	               jsr  putsxy
.226d	68		               pla
.226e	28		               plp
.226f	60		               rts
.2270			putrahexcxy
.2270	08		               php
.2271	20 ab 24	               jsr  a2hex
.2274	a9 47		               lda  #<a2hexpos
.2276	a0 24		               ldy  #>a2hexpos
.2278	20 26 22	               jsr  putscxy
.227b	68		               pla
.227c	28		               plp
.227d	60		               rts
.227e			setinverse
.227e	48		               pha
.227f	a9 12		               lda  #$12
.2281	20 d2 ff	               jsr  $ffd2
.2284	68		               pla
.2285	60		               rts
.2286			clrinverse
.2286	48		               pha
.2287	a9 92		               lda  #$92
.2289	20 d2 ff	               jsr  $ffd2
.228c	68		               pla
.228d	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.228e			push
.228e	08		          php            ; stack : flg, pcl, pch
.228f	78		          sei
.2290	8d ca 22	          sta  ra        ; save a
.2293	68		          pla            ; stack : pcl, pch
.2294	8d c9 22	          sta  rp        ; save rp
.2297	68		          pla            ; stack : pch
.2298	8d cb 22	          sta  pc        ; save pcl
.229b	68		          pla            ; stack : -
.229c	8d cc 22	          sta  pc+1      ; save pch
.229f	a5 fb		          lda  zpage1    ; get zpage1 low byte
.22a1	48		          pha            ; stack : zp1l
.22a2	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.22a4	48		          pha            ; stack : zp1h, zp1l
.22a5	a5 fd		          lda  zpage2    ; get zpage2 low byte
.22a7	48		          pha            ; stack : zp2l, zp1h, zp1l
.22a8	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.22aa	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.22ab	ad c9 22	          lda  rp        ; get rp
.22ae	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.22af	ad ca 22	          lda  ra        ; get a
.22b2	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.22b3	8a		          txa            ; get x
.22b4	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.22b5	98		          tya            ; get y
.22b6	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22b7	ad cc 22	          lda  pc+1      ; get pch
.22ba	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22bb	ad cb 22	          lda  pc        ; get pcl
.22be	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22bf	ad c9 22	          lda  rp        ; get rp
.22c2	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22c3	ad ca 22	          lda  ra        ; get a
.22c6	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22c7	58		          cli
.22c8	60		          rts
>22c9	00		rp        .byte     0
>22ca	00		ra        .byte     0
>22cb	00 00		pc        .word     0
.22cd			pull
.22cd			pop
.22cd	78		          sei
.22ce	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22cf	8d 02 23	          sta  pc        ; save pcl
.22d2	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.22d3	8d 03 23	          sta  pc+1      ; save pch
.22d6	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.22d7	a8		          tay            ; set y
.22d8	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.22d9	aa		          tax            ; set x
.22da	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.22db	8d 01 23	          sta  ra        ; save a
.22de	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.22df	8d 00 23	          sta  rp        ; save rp
.22e2	68		          pla            ; stack : zp2l, zp1h, zp1l
.22e3	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.22e5	68		          pla            ; stack : zp1h, zp1l
.22e6	85 fd		          sta  zpage2    ; get zpage2 High byte
.22e8	68		          pla            ; stack : zp1l
.22e9	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.22eb	68		          pla            ; stack :
.22ec	85 fb		          sta  zpage1    ; get zpage1 High byte
.22ee	ad 03 23	          lda  pc+1      ; get pch
.22f1	48		          pha            ; stack : pch
.22f2	ad 02 23	          lda  pc
.22f5	48		          pha            ; stack : pcl, pch
.22f6	ad 00 23	          lda  rp        ; get rp
.22f9	48		          pha            ; stack : rp, pcl, pch
.22fa	ad 01 23	          lda  ra        ; set ra
.22fd	58		          cli
.22fe	28		          plp            ; stack : pcl, pch
.22ff	60		          rts
>2300	00		rp        .byte     0
>2301	00		ra        .byte     0
>2302	00 00		pc        .word     0

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.2304			blkfill
.2304	20 8e 22	bf0            jsr  push
.2307	20 c5 23	               jsr  savezp1
.230a	84 fc		               sty  zpage1+1
.230c	a0 00		               ldy  #$00
.230e	84 fb		               sty  zpage1
.2310	91 fb		bf1            sta  (zpage1),y
.2312	c8		               iny
.2313	d0 fb		               bne  bf1
.2315	20 d4 23	               jsr  restzp1
.2318	20 cd 22	               jsr  pop
.231b	60		               rts
.231c			memfill
.231c	20 8e 22	               jsr  push
.231f	20 04 23	mf1            jsr  blkfill
.2322	c8		               iny
.2323	ca		               dex
.2324	d0 f9		               bne  mf1
.2326	20 cd 22	               jsr  pop
.2329	60		               rts
.232a			memmove
.232a	20 8e 22	               jsr  push
.232d	ba		               tsx            ; On se crée un pointeur ...
.232e	8a		               txa
.232f	18		               clc
.2330	69 0b		               adc  #11
.2332	a8		               tay
.2333	a2 06		               ldx  #$06
.2335	b9 00 01	nextbyte       lda  $0100,y
.2338	99 84 23	               sta  words,y
.233b	c8		               iny
.233c	ca		               dex
.233d	d0 f6		               bne  nextbyte
.233f	ad 84 23	               lda  s
.2342	8d 5b 23	               sta  source+1
.2345	ad 85 23	               lda  s+1
.2348	8d 5c 23	               sta  source+2
.234b	ad 86 23	               lda  d
.234e	8d 58 23	               sta  destin+1
.2351	ad 87 23	               lda  d+1
.2354	8d 59 23	               sta  destin+2
.2357	ad ff ff	destin         lda  $ffff
.235a	8d ff ff	source         sta  $ffff
.235d	ee 58 23	               inc  destin+1
.2360	d0 03		               bne  src
.2362	ee 59 23	               inc  destin+2
.2365	ee 5b 23	src            inc  source+1
.2368	d0 03		               bne  cnt
.236a	ee 5c 23	               inc  source+2
.236d	ad 88 23	cnt            lda  compte
.2370	d0 08		               bne  decit
.2372	ad 89 23	               lda  compte+1
.2375	f0 09		               beq  fini
.2377	ce 89 23	               dec  compte+1
.237a	ce 88 23	decit          dec  compte
.237d	4c 57 23	               jmp  destin
.2380	20 cd 22	fini           jsr  pop
.2383	60		               rts
.2384			words
>2384	00 00		s         .word     $0000
>2386	00 00		d         .word     $0000
>2388	00 00		compte    .word     $0000
.238a			decword
.238a	20 8e 22	               jsr  push
.238d	86 fd		               stx  zpage2
.238f	84 fe		               sty  zpage2+1
.2391	20 cd 22	               jsr  pop
.2394	60		               rts
.2395			inczp1
.2395	08		               php
.2396	48		               pha
.2397	e6 fb		               inc  zpage1
.2399	a5 fb		               lda  zpage1
.239b	d0 02		               bne  nopage
.239d	e6 fc		               inc  zpage1+1
.239f	68		nopage         pla
.23a0	28		               plp
.23a1	60		               rts
.23a2			deczp1
.23a2	08		                php
.23a3	48		                pha
.23a4	c6 fb		                dec  zpage1
.23a6	d0 02		                bne  nopage
.23a8	c6 fc		                dec  zpage1+1
.23aa	68		nopage          pla
.23ab	28		                plp
.23ac	60		                rts
.23ad			inczp2
.23ad	08		               php
.23ae	48		               pha
.23af	e6 fd		               inc  zpage2
.23b1	a5 fd		               lda  zpage2
.23b3	d0 02		               bne  nopage
.23b5	e6 fe		               inc  zpage2+1
.23b7	68		nopage         pla
.23b8	28		               plp
.23b9	60		               rts
.23ba			deczp2
.23ba	08		               php
.23bb	48		               pha
.23bc	a5 fd		               lda  zpage2
.23be	d0 02		               bne  nopage
.23c0	c6 fe		               dec  zpage2+1
.23c2	68		nopage         pla
.23c3	28		               plp
.23c4	60		               rts
.23c5			savezp1
.23c5	08		               php
.23c6	48		               pha
.23c7	a5 fb		               lda  zpage1
.23c9	8d 41 24	               sta  zp1
.23cc	a5 fc		               lda  zpage1+1
.23ce	8d 42 24	               sta  zp1+1
.23d1	68		               pla
.23d2	28		               plp
.23d3	60		               rts
.23d4			restzp1
.23d4	08		               php
.23d5	48		               pha
.23d6	ad 41 24	               lda zp1
.23d9	85 fb		               sta zpage1
.23db	ad 42 24	               lda zp1+1
.23de	85 fc		               sta zpage1+1
.23e0	68		               pla
.23e1	28		               plp
.23e2	60		               rts
.23e3			savezp2
.23e3	08		         php
.23e4	48		         pha
.23e5	a5 fd		         lda zpage2
.23e7	8d 43 24	         sta zp2
.23ea	a5 fe		         lda zpage2+1
.23ec	8d 44 24	         sta zp2+1
.23ef	68		         pla
.23f0	28		         plp
.23f1	60		         rts
.23f2			restzp2
.23f2	08		                php
.23f3	48		                pha
.23f4	ad 43 24	                lda  zp2
.23f7	85 fd		                sta  zpage2
.23f9	ad 44 24	                lda  zp2+1
.23fc	85 fe		                sta  zpage2+1
.23fe	68		                pla
.23ff	28		                plp
.2400	60		                rts
.2401			xy2addr
.2401	08		                php
.2402	48		                pha
.2403	8a		                txa
.2404	48		                pha
.2405	98		                tya
.2406	48		                pha
.2407	ad 3c 24	                lda     addr1+1
.240a	8d 3e 24	                sta     addr2+1
.240d	ad 3b 24	                lda     addr1
.2410	8d 3d 24	                sta     addr2
.2413	c0 00		                cpy     #$00
.2415	f0 0f		                beq     addx
.2417	18		moreline        clc
.2418	6d 3a 24	                adc     ymult
.241b	90 03		                bcc     norepy
.241d	ee 3e 24	                inc     addr2+1
.2420	8d 3d 24	norepy          sta     addr2
.2423	88		                dey
.2424	d0 f1		                bne     moreline
.2426	8a		addx            txa
.2427	18		                clc
.2428	6d 3d 24	                adc     addr2
.242b	90 03		                bcc     thatsit
.242d	ee 3e 24	                inc     addr2+1
.2430	8d 3d 24	thatsit         sta     addr2
.2433	68		                pla
.2434	a8		                tay
.2435	68		                pla
.2436	aa		                tax
.2437	68		                pla
.2438	28		                plp
.2439	60		                rts
>243a	28		ymult          .byte     40
>243b	00 00		addr1          .word     $0000
>243d	00 00		addr2          .word     $0000
>243f	00 00		bytecnt        .word     $0000
>2441	00 00		zp1        .word   $0000
>2443	00 00		zp2        .word   $0000

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>2445	01		a2hexcol       .byte     1              ; pour aputscxy
>2446	00		a2hexbkcol     .byte     %00000000
.2447			a2hexpos
>2447	00		a2hexpx        .byte     0              ; pour aputsxy
>2448	00		a2hexpy        .byte     0
>2449	24		a2hexprefix    .byte     "$"            ; pour aputs
>244a	00 00		a2hexstr       .word     $00
>244c	00 00		               .word     $00
>244e	00		               .byte     0              ; 0 end string
>244f	30 30 30 30	abin           .null     "00000000"
>2453	30 30 30 30 00
>2458	20 20 20 00	adec           .null     "   "
.245c			putahexfmtxy
.245c	20 8e 22	               jsr  push
.245f	20 ab 24	               jsr  a2hex
.2462	ae 47 24	               ldx  a2hexpx
.2465	ac 48 24	               ldy  a2hexpy
.2468	20 b7 21	               jsr  gotoxy
.246b	a2 49		               ldx  #<a2hexprefix
.246d	a0 24		               ldy  #>a2hexprefix
.246f	20 9d 21	               jsr  puts
.2472	20 cd 22	               jsr  pop
.2475	60		               rts
.2476			putahexfmt
.2476	20 8e 22	               jsr  push
.2479	20 ab 24	               jsr  a2hex
.247c	a2 49		               ldx  #<a2hexprefix
.247e	a0 24		               ldy  #>a2hexprefix
.2480	20 9d 21	               jsr  puts
.2483	20 cd 22	               jsr  pop
.2486	60		               rts
.2487			putahex
.2487	20 8e 22	               jsr  push
.248a	20 ab 24	               jsr  a2hex
.248d	a2 4a		               ldx  #<a2hexstr
.248f	a0 24		               ldy  #>a2hexstr
.2491	20 9d 21	               jsr  puts
.2494	20 cd 22	               jsr  pop
.2497	60		               rts
.2498			nib2hex
.2498	08		               php
.2499	29 0f		               and  #$0f
.249b	f8		               sed
.249c	18		               clc
.249d	69 90		               adc  #$90
.249f	69 40		               adc  #$40
.24a1	d8		               cld
.24a2	28		               plp
.24a3	60		               rts
.24a4			lsra4bits
.24a4	08		               php
.24a5	4a		               lsr
.24a6	4a		               lsr
.24a7	4a		               lsr
.24a8	4a		               lsr
.24a9	28		               plp
.24aa	60		               rts
.24ab			a2hex
.24ab	08		               php
.24ac	48		               pha
.24ad	48		               pha
.24ae	20 a4 24	               jsr  lsra4bits
.24b1	20 98 24	               jsr  nib2hex
.24b4	8d 4a 24	               sta  a2hexstr
.24b7	68		               pla
.24b8	20 98 24	               jsr  nib2hex
.24bb	8d 4b 24	               sta  a2hexstr+1
.24be	a9 00		               lda  #$00                ; set end of string
.24c0	8d 4c 24	               sta  a2hexstr+2
.24c3	68		               pla
.24c4	28		               plp
.24c5	60		               rts
.24c6			xy2hex
.24c6	20 8e 22	               jsr  push
.24c9	20 ab 24	               jsr  a2hex
.24cc	8a		               txa
.24cd	48		               pha
.24ce	20 a4 24	               jsr  lsra4bits
.24d1	20 98 24	               jsr  nib2hex
.24d4	8d 4a 24	               sta  a2hexstr
.24d7	68		               pla
.24d8	20 98 24	               jsr  nib2hex
.24db	8d 4b 24	               sta  a2hexstr+1
.24de	98		               tya
.24df	48		               pha
.24e0	20 a4 24	               jsr  lsra4bits
.24e3	20 98 24	               jsr  nib2hex
.24e6	8d 4c 24	               sta  a2hexstr+2
.24e9	68		               pla
.24ea	20 98 24	               jsr  nib2hex
.24ed	8d 4d 24	               sta  a2hexstr+3
.24f0	a9 00		               lda  #$00                ; 0 ended string
.24f2	8d 4e 24	               sta  a2hexstr+4
.24f5	20 cd 22	               jsr  pop
.24f8			atobin
.24f8	20 8e 22	               jsr  push
.24fb	a2 08		               ldx  #8
.24fd	a0 00		               ldy  #0
.24ff	18		               clc
.2500	2a		nextbit        rol
.2501	48		               pha
.2502	69 00		               adc  #$00
.2504	29 01		               and  #$01
.2506	20 98 24	               jsr  nib2hex
.2509	99 4f 24	               sta  abin,y
.250c	68		               pla
.250d	c8		               iny
.250e	ca		               dex
.250f	d0 ef		               bne  nextbit
.2511	a9 00		               lda  #0
.2513	99 4f 24	               sta  abin,y
.2516	20 cd 22	               jsr  pull
.2519	60		               rts
.251a			putabin
.251a	20 f8 24	               jsr     atobin
.251d	20 8e 22	               jsr     push
.2520	a2 4f		               ldx     #<abin
.2522	a0 24		               ldy     #>abin
.2524	20 9d 21	               jsr     puts
.2527	20 cd 22	               jsr     pop
.252a	60		               rts
.252b			printabin
.252b	20 8e 22	               jsr     push
.252e	a2 4f		               ldx     #<abin
.2530	a0 24		               ldy     #>abin
.2532	20 9d 21	               jsr     puts
.2535	20 cd 22	               jsr     pop
.2538	60		               rts
.2539			putabinfmt
.2539	08		               php
.253a	48		               pha
.253b	a9 25		               lda     #"%"
.253d	20 97 21	               jsr     putch
.2540	68		               pla
.2541	20 1a 25	               jsr     putabin
.2544	28		               plp
.2545	60		               rts
.2546			putabinxy
.2546	20 b7 21	               jsr     gotoxy
.2549	20 1a 25	               jsr     putabin
.254c	60		               rts
.254d			putabinfmtxy
.254d	20 b7 21	               jsr     gotoxy
.2550	20 39 25	               jsr     putabinfmt
.2553	60		               rts
.2554			atodec
.2554	20 8e 22	               jsr  push
.2557	f8		               sed
.2558	aa		               tax
.2559	a0 00		               ldy  #$00
.255b	a9 00		               lda  #$00
.255d	18		nextbit        clc
.255e	69 01		               adc  #$01
.2560	90 01		               bcc  decx
.2562	c8		               iny
.2563	ca		decx           dex
.2564	d0 f7		               bne  nextbit
.2566	48		               pha
.2567	98		               tya
.2568	20 98 24	               jsr  nib2hex
.256b	8d 58 24	               sta  adec
.256e	68		               pla
.256f	48		               pha
.2570	20 98 24	               jsr  nib2hex
.2573	8d 5a 24	               sta  adec+2
.2576	68		               pla
.2577	6a		               ror
.2578	6a		               ror
.2579	6a		               ror
.257a	6a		               ror
.257b	20 98 24	               jsr  nib2hex
.257e	8d 59 24	               sta  adec+1
.2581	d8		               cld
.2582	20 cd 22	               jsr  pull
.2585	60		               rts
>2586	00 00 00	buffer         .byte     0,0,0
.2589			putadec
.2589	20 8e 22	               jsr  push
.258c	20 54 25	               jsr  atodec
.258f	a2 58		               ldx  #<adec
.2591	a0 24		               ldy  #>adec+1
.2593	20 9d 21	               jsr  puts
.2596	20 cd 22	               jsr  pop
.2599	60		               rts

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>259a	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>259e	00 00 00 00 00 00 00 00 00 0d 00 00
>25aa	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>25ae	00 00 00 00 00 00 00 00 00 00 00 00
>25ba	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>25be	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>25ca	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>25ce	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>25da	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>25de	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>25ea	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>25ee	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>25fa	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>25fe	00 00 00 00 00 00 00 00 00 00 00 00
>260a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>260e	00 00 00 00 00 00 00 00 00 00 00 00
>261a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>261e	00 00 00 00 00 00 00 00 00 00 00 00
>262a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>262e	00 00 00 00 00 00 00 00 00 00 00 00
>263a	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>263e	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>264a	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>264e	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>265a	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>265e	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>266a	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>266e	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>267a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>267e	00 00 00 00 00 00 00 00 00 00 00 00
>268a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>268e	00 00 00 00 00 00 00 00 00 00 00 00
.269a			waitstop
.269a	20 8e 22	               jsr  push
.269d	20 ed f6	wait           jsr  k_stop
.26a0	d0 fb		               bne  wait
.26a2	20 cd 22	               jsr  pop
.26a5	60		               rts
.26a6			anykey
.26a6	08		               php
.26a7	48		               pha
.26a8	a5 cb		nokey          lda 203
.26aa	c9 40		               cmp #64
.26ac	f0 fa		               beq nokey
.26ae	20 b4 26	               jsr releasekey
.26b1	68		               pla
.26b2	28		               plp
.26b3	60		               rts
.26b4			releasekey
.26b4	08		               php
.26b5	48		               pha
.26b6	a5 cb		keypressed     lda 203
.26b8	c9 40		               cmp #64
.26ba	d0 fa		               bne keypressed
.26bc	68		               pla
.26bd	28		               plp
.26be	60		               rts
.26bf			getkey
.26bf	20 e4 ff	again          jsr  getin
.26c2	c9 00		               cmp  #0
.26c4	f0 f9		               beq  again
.26c6	60		               rts
.26c7			kbflushbuff
.26c7	08		               php
.26c8	48		               pha
.26c9	20 e4 ff	again          jsr  getin
.26cc	c9 00		               cmp  #0
.26ce	d0 f9		               bne  again
.26d0	68		               pla
.26d1	28		               plp
.26d2	60		               rts
.26d3			waitkey
.26d3	20 8e 22	               jsr  push
.26d6	8d 24 27	               sta  thekey
.26d9	20 e4 ff	nope           jsr  getin
.26dc	20 d2 ff	               jsr  chrout
.26df	cd 24 27	               cmp  thekey
.26e2	d0 f5		               bne  nope
.26e4	20 d2 ff	               jsr  chrout
.26e7	20 cd 22	               jsr  pop
.26ea	60		               rts
.26eb			waitspace
.26eb	20 8e 22	               jsr  push
.26ee	a9 7f		wait           lda  #$7f  ;%01111111
.26f0	8d 00 dc	               sta  $dc00
.26f3	ad 01 dc	               lda  $dc01
.26f6	29 10		               and  #$10  ;mask %00010000
.26f8	d0 f4		               bne  wait
.26fa	20 cd 22	               jsr  pop
.26fd			waitsstop
.26fd	20 8e 22	               jsr  push
.2700	20 ed f6	wait           jsr  k_stop  ;%01111111
.2703	d0 fb		               bne  wait
.2705	20 cd 22	               jsr  pop
.2708			waitreturn
.2708	20 8e 22	               jsr  push
.270b	ad 25 27	               lda  thecount
.270e	8d 00 04	               sta  scrnram
.2711	a9 02		               lda  #$02
.2713	8d 00 d8	               sta  colorram
.2716	20 e4 ff	nope           jsr  getin
.2719	c9 0d		nohex          cmp  #$0d
.271b	d0 f9		               bne  nope
.271d	ee 25 27	               inc  thecount
.2720	20 cd 22	               jsr  pop
.2723	60		               rts
>2724	00		thekey         .byte   0
>2725	01		thecount       .byte   $01

;******  Return to file: charedit.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-disk.asm

.2726			diskerror
.2726	20 8e 22	               jsr  push
.2729	ad 57 28	               lda  dsk_dev   ; Select device 8
.272c	85 ba		               sta  $ba       ;
.272e	20 b4 ff	               jsr  talk      ; $ffb4 |a  , iec-cmd dev parle
.2731	a9 6f		               lda  #$6f
.2733	85 b9		               sta  $b9       ;
.2735	20 96 ff	               jsr  tksa      ; $ff96 |a  , talk adresse sec.
.2738	20 a5 ff	nextchar       jsr  acptr     ; $ffa5 |a  , rx serie.
.273b	20 d2 ff	               jsr  chrout    ; $ffd2 |a  , sort un car.
.273e	c9 0d		               cmp  #$0d      ; Is it CR ?
.2740	d0 f6		               bne  nextchar  ; No, get next char
.2742	20 ab ff	               jsr  untlk     ;$ffab      , iec-cmc stop talk
.2745	20 cd 22	               jsr  pop
.2748	60		               rts
.2749			diskdir
.2749	20 8e 22	               jsr  push
.274c	a9 24		               lda  #$24      ; L012C - Filename is "$"
.274e	85 fb		               sta  $fb       ; L012E - Zpage1 msb
.2750	a9 fb		               lda  #$fb      ; L0130 - Set current filename
.2752	85 bb		               sta  $bb       ; L0132 - Current filename msb.
.2754	a9 00		               lda  #$00      ; L0134 - to Zpage 1
.2756	85 bc		               sta  $bc       ; L0136 - Current filename lsb.
.2758	a9 01		               lda  #$01      ; L0138 - set ...
.275a	85 b7		               sta  $b7       ; L013A - ... length of current filename
.275c	ad 57 28	               lda  dsk_dev   ; L013C - set 8 as ...
.275f	85 ba		               sta  $ba       ; L013E - ... current serial sevice.
.2761	a9 60		               lda  #$60      ; L0140 - set $60 to ...
.2763	85 b9		               sta  $b9       ; L0142 - ... secondary address
.2765	20 d5 f3	               jsr  sfopen    ; L0144 - $f3d5 Serial file open.
.2768	a5 ba		               lda  $ba       ; L0147 - Command device $ba ($08) ...%10111010
.276a	20 b4 ff	               jsr  talk      ; L0149 - $ffb4 ... to talk.
.276d	a5 b9		               lda  $b9       ; L014C - Command sec. device ($60) ...
.276f	20 96 ff	               jsr  tksa      ; L014E - $ff96 ... to talk.
.2772	a9 00		               lda  #$00      ; L0151 - put $00 in ...
.2774	85 90		               sta  $90       ; L0153 - ... kernal status word.
.2776	a0 03		               ldy  #$03      ; L0155 - To read 3 bytes, put $03 in
.2778	84 fb		loop1          sty  $fb       ; L0157 - Zpage 1 Msb
.277a	20 a5 ff	               jsr  acptr     ; L0159 - $ffa5 Recoit un byte du port serie.
.277d	85 fc		               sta  $fc       ; L015C - Store byte in zpage 1 lsb
.277f	a4 90		               ldy  $90       ; L015E - Load kernal status word.
.2781	d0 2f		               bne  exit      ; L0160 - If any error, EXIT.
.2783	20 a5 ff	               jsr  $ffa5     ; L0162 - jsr acptr
.2786	a4 90		               ldy  $90       ; L0165 - Load byte counter,
.2788	d0 28		               bne  exit      ; L0167
.278a	a4 fb		               ldy  $fb       ; L0169
.278c	88		               dey            ; L016b
.278d	d0 e9		               bne  loop1     ; L016C - If not last, loop
.278f	a6 fc		               ldx  $fc       ; L016E - Load the recieved byte in X.
.2791	20 cd bd	               jsr  b_putint  ; L0170 - $bdcd print file size
.2794	a9 20		               lda  #$20      ; L0173 - Load space character and ...
.2796	20 d2 ff	               jsr  chrout    ; L0175 - $ffd2 ... print it.
.2799	20 a5 ff	loop3          jsr  acptr     ; L0178 - $ffa5 Recoit un byte du port serie.
.279c	a6 90		               ldx  $90       ; L017B - Load kernal status word.
.279e	d0 12		               bne  exit      ; L017D - If any error, EXIT.
.27a0	aa		               tax            ; L017F - tfr a in x
.27a1	f0 06		               beq  loop2     ; L0180 - Byte is 0 loop1
.27a3	20 d2 ff	               jsr  chrout    ; L0182 - $ffd2 ... print it.
.27a6	4c 99 27	               jmp  loop3     ; L0185 - get another byte
.27a9	a9 0d		loop2          lda  #$0d      ; L0188  - Load CR in a
.27ab	20 d2 ff	               jsr  chrout    ; L018A - $ffd2 ... print it.
.27ae	a0 02		               ldy  #$02      ; L018D - set Y to 2
.27b0	d0 c6		               bne  loop1     ; L018f - Loop to next dir entry.
.27b2	20 42 f6	exit           jsr  sfclose   ; L0191 - $f642 ... close file.
.27b5	20 cd 22	               jsr  pop
.27b8	60		               rts            ; L0194
.27b9			directory
.27b9	20 49 27	               jsr  diskdir
.27bc	20 26 27	               jsr  diskerror
.27bf	60		               rts
.27c0			memtofile
.27c0	20 31 28	               jsr  dsk_putmesg
.27c3	20 8e 22	               jsr  push
.27c6	ad 5b 28	               lda  dsk_fnlen
.27c9	ae 59 28	               ldx  dsk_fnptr      ; load fname addr. lbyte
.27cc	ac 5a 28	               ldy  dsk_fnptr+1
.27cf	20 bd ff	               jsr  setnam         ; call setnam
.27d2	ad 58 28	               lda  dsk_lfsno
.27d5	ae 57 28	               ldx  dsk_dev        ; specified device
.27d8	a0 00		skip           ldy  #$00
.27da	20 ba ff	               jsr  setlfs         ; call setlfs
.27dd	ad 53 28	               lda  dsk_data_s     ; put data start lbyte in stal
.27e0	85 c1		               sta  stal
.27e2	ad 54 28	               lda  dsk_data_s+1   ; put data start hbyte in stal
.27e5	85 c2		               sta  stal+1
.27e7	ae 55 28	               ldx  dsk_data_e     ; put data end lbyte in x
.27ea	ac 56 28	               ldy  dsk_data_e+1   ; put data end hbyte in y
.27ed	a9 c1		               lda  #stal          ; start address located in $c1/$c2
.27ef	20 d8 ff	               jsr  save           ; call save
.27f2	90 00		               bcc  noerror        ; if carry set, a load error has happened
.27f4	20 cd 22	noerror        jsr  pop
.27f7	60		               rts
.27f8			filetomem
.27f8	20 8e 22	               jsr push
.27fb	ad 5b 28	               lda dsk_fnlen
.27fe	ae 59 28	               ldx dsk_fnptr
.2801	ac 5a 28	               ldy dsk_fnptr+1
.2804	20 bd ff	               jsr setnam     ; call setnam
.2807	ad 58 28	               lda dsk_lfsno
.280a	ae 57 28	               ldx dsk_dev    ; default to device 8
.280d	a0 01		               ldy #$01       ; not $01 means: load to address stored in file
.280f	20 ba ff	               jsr setlfs     ; call setlfs
.2812	a9 00		               lda #$00       ; $00 means: load to memory (not verify)
.2814	20 d5 ff	               jsr load       ; call load
.2817	90 03		               bcc noerror      ; if carry set, a load error has happened
.2819	20 20 28	               jsr  error
.281c	20 cd 22	noerror        jsr pop
.281f	60		               rts
.2820			error
.2820	60		               rts
.2821	a2 6c		error1         ldx  #<dsk_emsg1
.2823	a0 28		               ldy  #>dsk_emsg1
.2825	20 9d 21	               jsr  puts
.2828	60		               rts
.2829	a2 80		error2         ldx #<dsk_emsg2
.282b	a0 28		               ldy #>dsk_emsg2
.282d	20 9d 21	               jsr puts
.2830	60		               rts
.2831			dsk_putmesg
.2831	20 8e 22	               jsr push
.2834	a2 5c		               ldx #<dsk_msg0
.2836	a0 28		               ldy #>dsk_msg0
.2838	20 9d 21	               jsr puts
.283b	a9 20		               lda #$20
.283d	20 97 21	               jsr putch
.2840	ae 59 28	               ldx dsk_fnptr
.2843	ac 5a 28	               ldy dsk_fnptr+1
.2846	20 9d 21	               jsr puts
.2849	ad 58 28	               lda dsk_lfsno
.284c	20 c3 ff	               jsr close
.284f	20 cd 22	               jsr pop
.2852	60		               rts
>2853	00 00		dsk_data_s     .word     $0000    ; example addresses
>2855	00 20		dsk_data_e     .word     $2000
>2857	08		dsk_dev        .byte     $08
>2858	00		dsk_lfsno      .byte     $00
>2859	00 00		dsk_fnptr      .word     $00
>285b	00		dsk_fnlen      .byte     0
>285c	8d		dsk_msg0       .byte     141
>285d	53 41 56 49	               .null     "saving"
>2861	4e 47 00
>2864	8d		dsk_msg1       .byte     141
>2865	53 55 43 43	               .null     "succes"
>2869	45 53 00
>286c	8d		dsk_emsg1      .byte     141
>286d	46 49 43 48	               .null     "fichier non ouvert"
>2871	49 45 52 20 4e 4f 4e 20 4f 55 56 45 52 54 00
>2880	11		dsk_emsg2      .byte     17
>2881	45 52 52 45	               .null     "erreur d'ecriture"
>2885	55 52 20 44 27 45 43 52 49 54 55 52 45 00

;******  Return to file: charedit.asm


;******  End of listing

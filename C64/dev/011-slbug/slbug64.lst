
; 64tass Turbo Assembler Macro V1.52.1237? listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L slbug64.lst -o slbug64.prg slbug64.asm
; Thu Dec  5 17:36:42 2024

;Offset	;Hex		;Source

;******  Processing input file: slbug64.asm

="20241205-163838"	                Version = "20241205-163838"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1     .word bcmd2   	;Adresse de la commande basic suivante.
>0803	01 00				.word 1   	;Numero de la ligne Basic.
>0805	8f				.byte $8F		;Le token de la commande REM du Basic
>0806	2a 50 52 4f			.text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2     .word bcmd3   	;Adresse de la commande basic suivante.
>082b	02 00				.word 2   	;Numero de la ligne Basic.
>082d	8f				.byte $8F		;Le token de la commande REM du Basic
>082e	2a 50 41 52			.text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00				.byte $00		;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3     .word bcmd4   	;Adresse de la commande basic suivante.
>0846	03 00				.word 3   	;Numero de la ligne Basic.
>0848	9e				.byte $9e		;Le token de la commande PRINT du Basic
>0849	30 32 31 32			.text format("%05d",hpgmstart)
>084d	39
>084e	00				.byte $00		;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4	.word $0000    ;L'adresse de la commande Basic suivante.
.0851	4c 54 08	hpgmstart       jmp      main  ; le programme principale doit s'appeler "main"

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: slbug64.asm

.0854			main
.0854	20 60 c2	               jsr  scrmaninit
.0857	08		               php
.0858	48		               pha
.0859	a9 0e		               lda  #14
.085b	20 d2 ff	               jsr  $ffd2
.085e	68		               pla
.085f	28		               plp
.0860	08		               php
.0861	48		               pha
.0862	a9 08		               lda  #$08
.0864	20 d2 ff	               jsr  $ffd2
.0867	68		               pla
.0868	28		               plp
.0869	a9 00		               lda #cnoir
.086b	8d 20 d0	               sta vicbordcol
.086e	a9 0b		               lda  #cgris0
.0870	8d 21 d0	               sta  vicbackcol
.0873	a9 01		               lda  #cblanc
.0875	8d 86 02	               sta  bascol
.0878	20 80 c2	               jsr  cls
.087b	20 1b c0	               jsr help
.087e	20 00 c0	               jsr slbug64
.0881	4c 74 a4	               jmp b_warmstart
.0884	60		               rts
.c000			slbug64
.c000	48		                pha
.c001	20 a6 c7	                jsr anykey
.c004	ad 20 d0	                lda vicbordcol
.c007	8d 1a c0	                sta byte
.c00a	a9 10		                lda #$10
.c00c	8d 20 d0	                sta vicbordcol
.c00f	20 a6 c7	                jsr anykey
.c012	ad 1a c0	                lda byte
.c015	8d 20 d0	                sta vicbordcol
.c018	68		                pla
.c019	60		                rts
>c01a	00		byte            .byte 0
.c01b			help
.c01b	20 80 c2	               jsr cls
.c01e	20 8e c3	               jsr  push
.c021	a2 04		               ldx  #<line
.c023	a0 c2		               ldy  #>line
.c025	20 9d c2	               jsr  puts
.c028	20 cd c3	               jsr  pull
.c02b	20 8e c3	               jsr  push
.c02e	a2 94		               ldx  #<headera
.c030	a0 c0		               ldy  #>headera
.c032	20 9d c2	               jsr  puts
.c035	20 cd c3	               jsr  pull
.c038	20 8e c3	               jsr  push
.c03b	a2 04		               ldx  #<line
.c03d	a0 c2		               ldy  #>line
.c03f	20 9d c2	               jsr  puts
.c042	20 cd c3	               jsr  pull
.c045	20 8e c3	               jsr  push
.c048	a2 b6		               ldx  #<headerb
.c04a	a0 c0		               ldy  #>headerb
.c04c	20 9d c2	               jsr  puts
.c04f	20 cd c3	               jsr  pull
.c052	20 8e c3	               jsr  push
.c055	a2 04		               ldx  #<line
.c057	a0 c2		               ldy  #>line
.c059	20 9d c2	               jsr  puts
.c05c	20 cd c3	               jsr  pull
.c05f	20 8e c3	               jsr  push
.c062	a2 3b		               ldx  #<headerc
.c064	a0 c1		               ldy  #>headerc
.c066	20 9d c2	               jsr  puts
.c069	20 cd c3	               jsr  pull
.c06c	20 8e c3	               jsr  push
.c06f	a2 04		               ldx  #<line
.c071	a0 c2		               ldy  #>line
.c073	20 9d c2	               jsr  puts
.c076	20 cd c3	               jsr  pull
.c079	20 8e c3	               jsr  push
.c07c	a2 7e		               ldx  #<shortcuts
.c07e	a0 c1		               ldy  #>shortcuts
.c080	20 9d c2	               jsr  puts
.c083	20 cd c3	               jsr  pull
.c086	20 8e c3	               jsr  push
.c089	a2 04		               ldx  #<line
.c08b	a0 c2		               ldy  #>line
.c08d	20 9d c2	               jsr  puts
.c090	20 cd c3	               jsr  pull
.c093	60		               rts
.c094			headera
>c094	2a 2a 2a 2a	               .text          "**** SL-BUG 64 Version 4.00 ****"
>c098	20 d3 cc 2d c2 d5 c7 20 36 34 20 d6 45 52 53 49
>c0a8	4f 4e 20 34 2e 30 30 20 2a 2a 2a 2a
>c0b4	0d 00		               .byte   $0d,0
>c0b6	2a 20 20 20	headerb        .text          "*       POUR COMMODORE 64      *"
>c0ba	20 20 20 20 d0 cf d5 d2 20 c3 cf cd cd cf c4 cf
>c0ca	d2 c5 20 36 34 20 20 20 20 20 20 2a
>c0d6	0d		               .byte   $0d
>c0d7	2a 20 20 c9	               .text          "*  IDEE ORIGINALE: S. LEBLANC  *"
>c0db	c4 c5 c5 20 cf d2 c9 c7 c9 ce c1 cc c5 3a 20 d3
>c0eb	2e 20 cc c5 c2 cc c1 ce c3 20 20 2a
>c0f7	0d		               .byte   $0d
>c0f8	2a 20 d6 45	               .text          "* Version originale sur MC6809 *"
>c0fc	52 53 49 4f 4e 20 4f 52 49 47 49 4e 41 4c 45 20
>c10c	53 55 52 20 cd c3 36 38 30 39 20 2a
>c118	0d		               .byte   $0d
>c119	2a 20 d0 cf	               .text          "* PORT C64 PAR DANIEL LAFRANCE *"
>c11d	d2 d4 20 c3 36 34 20 d0 c1 d2 20 c4 c1 ce c9 c5
>c12d	cc 20 cc c1 c6 d2 c1 ce c3 c5 20 2a
>c139	0d 00		               .byte   $0d,0
>c13b	2a 20 20 20	headerc        .text          "*          (c) 2024            *"
>c13f	20 20 20 20 20 20 20 28 43 29 20 32 30 32 34 20
>c14f	20 20 20 20 20 20 20 20 20 20 20 2a
>c15b	0d		               .byte   $0d
>c15c	2a 20 d6 45	               .text   format("* Version: %-20s*",Version)
>c160	52 53 49 4f 4e 3a 20 32 30 32 34 31 32 30 35 2d
>c170	31 36 33 38 33 38 20 20 20 20 20 2a
>c17c	0d 00		               .byte   $0d,0
>c17e	0d		shortcuts      .byte   $0d
>c17f	2a 2d 2d 2d	               .text          "*---- R A C C O U R C I S -----*"
>c183	2d 20 d2 20 c1 20 c3 20 c3 20 cf 20 d5 20 d2 20
>c193	c3 20 c9 20 d3 20 2d 2d 2d 2d 2d 2a
>c19f	0d		               .byte   $0d
>c1a0	2a 20 c5 58	               .text   format("* Execution.: SYS%5d ($%X) *",slbug64,slbug64)
>c1a4	45 43 55 54 49 4f 4e 2e 3a 20 d3 d9 d3 34 39 31
>c1b4	35 32 20 28 24 c3 30 30 30 29 20 2a
>c1c0	0d		               .byte   $0d
>c1c1	2a 20 c1 49	               .text   format("* Aide......: SYS%5d ($%X) *",help,help)
>c1c5	44 45 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34 39 31
>c1d5	37 39 20 28 24 c3 30 31 c2 29 20 2a
>c1e1	0d		               .byte   $0d
>c1e2	2a 20 c3 cc	               .text   format("* CLS.......: SYS%5d ($%X) *",cls,cls)
>c1e6	d3 2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 34 39 37
>c1f6	39 32 20 28 24 c3 32 38 30 29 20 2a
>c202	0d 00		               .byte   $0d,0
>c204	2a 2d 2d 2d	line           .text          "*------------------------------*"
>c208	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>c218	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2a
>c224	0d 00		               .byte   $0d,0
>c226	20 cc 41 4e	helptext       .text   format(" Lancement de slbug64  : SYS%5d",slbug64)
>c22a	43 45 4d 45 4e 54 20 44 45 20 53 4c 42 55 47 36
>c23a	34 20 20 3a 20 d3 d9 d3 34 39 31 35 32
>c247	0d		               .byte   $0d
>c248	20 45 58 2e	                .text   format(" ex.: SYS%5d",slbug64)
>c24c	3a 20 d3 d9 d3 34 39 31 35 32
>c256	0d 00		               .byte   $0d,0

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>c258	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>c25c	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms= $e1d4 ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk  = $ed09 ; Send Talk command to serial bus.
=$ed0c			slisten= $ed0c ; Send LISTEN command to serial bus.
=$ed40			sflush = $ed40 ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2= $edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2 = $edb9 ; Send TALK secondary addressto serial bus.
=$eddd			sbout  = $eddd ; Write byte to serial bus.
=$edef			sutalk = $edef ; Send UNTalk command to serial bus.
=$edfe			sulisten= $edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh= $ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow= $ee8e ; Set CLOCK OUT to low
=$ee97			sdathigh= $ee97 ; Set DATA OUT to High
=$eea0			sdatlow= $eea0 ; Set DATA OUT to low
=$eea9			sclkdta= $eea9 ; Read CLOCK IN and DATA IN.
=$f1ad			sbread = $f1ad ; Read one byte from serial port.
=$f237			sstdin = $F237 ; Define serial bus as standard input; do not send TALK
=$f279			sstdout= $F279 ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen = $F3D5 ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose= $F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose= $F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose= $F642 ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout= $FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr  = $ffa5 ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin  = $ffc6 ; jmp ($031e) Define an input channel.
=$ffc9			chkout = $ffc9 ; jmp ($0320) Define an output channel.
=$ffcf			chrin  = $ffcf ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout = $ffd2 ; jmp ($0326) Output a character
=$ff81			cint   = $ff81 ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout  = $ffa8 ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall  = $ffe7 ; jmp ($032c) Close all open files
=$ffc3			close  = $ffc3 ; jmp ($031c) Close a logical file
=$ffcc			clrchn = $ffcc ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin  = $ffe4 ; jmp ($032a) Get a character.
=$fff3			iobase = $fff3 ; jmp $e500 Define i/o memory page
=$ff84			ioinit = $ff84 ; ($fda3) Initialize i/o devices.
=$ffb1			listen = $ffb1 ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load   = $ffd5 ; jmp $f4e9 Load device to RAM.
=$ff9c			membot = $ff9c ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop = $ff99 ; jmp $fe25 Get/Set top of ram
=$ffc0			open   = $ffc0 ; jmp ($031a) Open a logical file
=$fff0			plot   = $fff0 ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas = $ff87 ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim  = $ffde ; jmp $f6dd Read system clock
=$ffb7			readst = $ffb7 ; jmp $fe07 Read i/o status word
=$ff8a			restor = $ff8a ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save   = $ffd8 ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey = $ff9f ; jmp $ea87 Scan the keyboard
=$ffed			screen = $ffed ; jmp $e505 Return screen format
=$ff93			second = $ff93 ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs = $ffba ; jmp $fe00 Set up a logical file
=$ff90			setmsg = $ff90 ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam = $ffbd ; jmp $fdf9 Set up file name
=$ffdb			settim = $ffdb ; jmp $f6e4 Set the system clock.
=$ffa2			settmo = $ffa2 ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop   = $ffe1 ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk   = $ffb4 ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa   = $ff96 ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim  = $ffea ; jmp $f69b Update the system clock
=$ffae			unlsn  = $ffae ; jmp $edfe Send an unlisten command
=$ffab			untlk  = $ffab ; jmp $edef Send an untalk command
=$ff8d			vector = $ff8d ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.          ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.  ;a--;---; a= dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.     ;---;a--; a= Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.  ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial.;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.       ;--y;---; y= msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .        ;a--;---; a= file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.            ;axy;---; a= # start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode.;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.  ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.             ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.         ;---;---; z= 1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.        ;a--;---; a= len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.      ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)        ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.        ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                 ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.       ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                ;a--;---; a= ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.             ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.        ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.             ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.             ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.        ;a--;---; a= SA or #$60
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.
.c260			libtart

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

=0			bkcol=0
=0			bkcol0=0
=0			bkcol1=0
=0			bkcol2=0
=0			bkcol3=0
.c260			scrmaninit
.c260	20 8e c3	               jsr  push
.c263	a9 06		               lda  #vbleu
.c265	8d 21 d0	               sta  vicbackcol
.c268	a9 05		               lda  #vvert
.c26a	8d 20 d0	               sta  vicbordcol
.c26d	a9 01		               lda  #vblanc
.c26f	8d 86 02	               sta  bascol
.c272	ad 00 04	               lda  scrnram
.c275	8d 00 04	               sta  scrnram
.c278	20 80 c2	               jsr  cls
.c27b	20 cd c3	               jsr  pop
.c27e	60		               rts
>c27f	8e		characterset   .byte b_uppercase
.c280			cls
.c280	08		               php
.c281	48		               pha
.c282	a9 93		               lda  #$93
.c284	20 97 c2	               jsr  putch
.c287	68		               pla
.c288	28		               plp
.c289	60		               rts
.c28a			putnch
.c28a	08		               php
.c28b	e0 00		               cpx  #$00
.c28d	f0 06		               beq  out
.c28f	20 d2 ff	again          jsr  $ffd2
.c292	ca		               dex
.c293	d0 fa		               bne  again
.c295	28		out            plp
.c296	60		               rts
.c297			putch
.c297	08		               php
.c298	20 d2 ff	               jsr  $ffd2
.c29b	28		               plp
.c29c	60		               rts
.c29d			puts
.c29d	20 8e c3	               jsr  push
.c2a0	86 fb		               stx  zpage1
.c2a2	84 fc		               sty  zpage1+1
.c2a4	a0 00		               ldy  #0
.c2a6	b1 fb		next           lda  (zpage1),y
.c2a8	f0 09		               beq  exit
.c2aa	20 97 c2	               jsr  putch
.c2ad	20 95 c4	               jsr  inczp1
.c2b0	4c a6 c2	               jmp  next
.c2b3	20 cd c3	exit           jsr  pop
.c2b6	60		               rts
.c2b7			gotoxy
.c2b7	08		               php
.c2b8	18		               clc
.c2b9	8a		               txa
.c2ba	48		               pha
.c2bb	98		               tya
.c2bc	aa		               tax
.c2bd	68		               pla
.c2be	a8		               tay
.c2bf	20 f0 ff	               jsr  kplot
.c2c2	28		               plp
.c2c3	60		               rts
.c2c4			cursor
=$0286			bascol    =    $0286
.c2c4	08		               php
.c2c5	48		               pha
.c2c6	90 12		               bcc  restore
.c2c8	20 f0 ff	               jsr  kplot
.c2cb	8c ec c2	               sty  cx
.c2ce	8e ed c2	               stx  cy
.c2d1	ad 86 02	               lda  bascol
.c2d4	8d ee c2	               sta  bcol
.c2d7	4c e9 c2	               jmp  out
.c2da	ae ed c2	restore        ldx  cy
.c2dd	ac ec c2	               ldy  cx
.c2e0	20 f0 ff	               jsr  kplot
.c2e3	ad ee c2	               lda  bcol
.c2e6	8d 86 02	               sta  bascol
.c2e9	68		out            pla
.c2ea	28		               plp
.c2eb	60		               rts
>c2ec	00		cx   .byte     $00
>c2ed	00		cy   .byte     $00
>c2ee	00		bcol .byte     $00
.c2ef			cursave
.c2ef	08		               php
.c2f0	38		               sec
.c2f1	20 c4 c2	               jsr  cursor
.c2f4	28		               plp
.c2f5	60		               rts
.c2f6			curput
.c2f6	08		               php
.c2f7	18		               clc
.c2f8	20 c4 c2	               jsr  cursor
.c2fb	28		               plp
.c2fc	60		               rts
.c2fd			putsxy
.c2fd	20 8e c3	               jsr  push
.c300	86 fb		               stx  zpage1
.c302	84 fc		               sty  zpage1+1
.c304	a0 00		               ldy  #$00
.c306	b1 fb		               lda  (zpage1),y
.c308	aa		               tax
.c309	20 95 c4	               jsr  inczp1
.c30c	b1 fb		               lda  (zpage1),y
.c30e	a8		               tay
.c30f	20 b7 c2	               jsr  gotoxy
.c312	20 95 c4	               jsr  inczp1
.c315	a6 fb		               ldx  zpage1
.c317	a4 fc		               ldy  zpage1+1
.c319	20 9d c2	               jsr  puts
.c31c	20 cd c3	               jsr  pop
.c31f	60		               rts
>c320	00 00		straddr   .word     $00
>c322	00		px        .byte     $00
>c323	00		py        .byte     $00
>c324	00 00		zp1       .word     $00
.c326			putscxy
.c326	20 8e c3	               jsr  push
.c329	84 fc		               sty  zpage1+1
.c32b	86 fb		               stx  zpage1
.c32d	ad 86 02	               lda  bascol
.c330	8d 50 c3	               sta  bc
.c333	a0 00		               ldy #$00
.c335	b1 fb		               lda  (zpage1),y
.c337	8d 86 02	               sta  bascol
.c33a	20 95 c4	               jsr  inczp1
.c33d	a6 fb		               ldx  zpage1
.c33f	a4 fc		               ldy  zpage1+1
.c341	20 fd c2	               jsr  putsxy
.c344	ad 50 c3	               lda  bc
.c347	8d 86 02	               sta  bascol
.c34a	20 cd c3	               jsr  pop
.c34d	60		               rts
>c34e	00 00		straddr  .word      $00
>c350	00		bc       .byte      $00
>c351	00 00		zp1      .word      $00
.c353			putrahex
.c353	08		               php
.c354	48		               pha
.c355	20 ab c5	               jsr  atohex
.c358	a9 4a		               lda  #<a2hexstr
.c35a	a0 c5		               ldy  #>a2hexstr
.c35c	20 9d c2	               jsr  puts
.c35f	68		               pla
.c360	28		               plp
.c361	60		               rts
.c362			kputrahexxy
.c362			bputrahexxy
.c362			putrahexxy
.c362	08		               php
.c363	20 ab c5	               jsr  atohex
.c366	a9 47		               lda  #<a2hexpos
.c368	a0 c5		               ldy  #>a2hexpos
.c36a	20 fd c2	               jsr  putsxy
.c36d	68		               pla
.c36e	28		               plp
.c36f	60		               rts
.c370			putrahexcxy
.c370	08		               php
.c371	20 ab c5	               jsr  atohex
.c374	a9 47		               lda  #<a2hexpos
.c376	a0 c5		               ldy  #>a2hexpos
.c378	20 26 c3	               jsr  putscxy
.c37b	68		               pla
.c37c	28		               plp
.c37d	60		               rts
.c37e			setinverse
.c37e	48		               pha
.c37f	a9 12		               lda  #$12
.c381	20 d2 ff	               jsr  $ffd2
.c384	68		               pla
.c385	60		               rts
.c386			clrinverse
.c386	48		               pha
.c387	a9 92		               lda  #$92
.c389	20 d2 ff	               jsr  $ffd2
.c38c	68		               pla
.c38d	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

.c38e			push
.c38e	08		          php            ; stack : flg, pcl, pch
.c38f	78		          sei
.c390	8d ca c3	          sta  ra        ; save a
.c393	68		          pla            ; stack : pcl, pch
.c394	8d c9 c3	          sta  rp        ; save rp
.c397	68		          pla            ; stack : pch
.c398	8d cb c3	          sta  pc        ; save pcl
.c39b	68		          pla            ; stack : -
.c39c	8d cc c3	          sta  pc+1      ; save pch
.c39f	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c3a1	48		          pha            ; stack : zp1l
.c3a2	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c3a4	48		          pha            ; stack : zp1h, zp1l
.c3a5	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c3a7	48		          pha            ; stack : zp2l, zp1h, zp1l
.c3a8	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c3aa	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c3ab	ad c9 c3	          lda  rp        ; get rp
.c3ae	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c3af	ad ca c3	          lda  ra        ; get a
.c3b2	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c3b3	8a		          txa            ; get x
.c3b4	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c3b5	98		          tya            ; get y
.c3b6	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c3b7	ad cc c3	          lda  pc+1      ; get pch
.c3ba	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c3bb	ad cb c3	          lda  pc        ; get pcl
.c3be	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c3bf	ad c9 c3	          lda  rp        ; get rp
.c3c2	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c3c3	ad ca c3	          lda  ra        ; get a
.c3c6	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c3c7	58		          cli
.c3c8	60		          rts
>c3c9	00		rp        .byte     0
>c3ca	00		ra        .byte     0
>c3cb	00 00		pc        .word     0
.c3cd			pull
.c3cd			pop
.c3cd	78		          sei
.c3ce	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c3cf	8d 02 c4	          sta  pc        ; save pcl
.c3d2	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c3d3	8d 03 c4	          sta  pc+1      ; save pch
.c3d6	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c3d7	a8		          tay            ; set y
.c3d8	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c3d9	aa		          tax            ; set x
.c3da	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c3db	8d 01 c4	          sta  ra        ; save a
.c3de	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c3df	8d 00 c4	          sta  rp        ; save rp
.c3e2	68		          pla            ; stack : zp2l, zp1h, zp1l
.c3e3	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c3e5	68		          pla            ; stack : zp1h, zp1l
.c3e6	85 fd		          sta  zpage2    ; get zpage2 High byte
.c3e8	68		          pla            ; stack : zp1l
.c3e9	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c3eb	68		          pla            ; stack :
.c3ec	85 fb		          sta  zpage1    ; get zpage1 High byte
.c3ee	ad 03 c4	          lda  pc+1      ; get pch
.c3f1	48		          pha            ; stack : pch
.c3f2	ad 02 c4	          lda  pc
.c3f5	48		          pha            ; stack : pcl, pch
.c3f6	ad 00 c4	          lda  rp        ; get rp
.c3f9	48		          pha            ; stack : rp, pcl, pch
.c3fa	ad 01 c4	          lda  ra        ; set ra
.c3fd	58		          cli
.c3fe	28		          plp            ; stack : pcl, pch
.c3ff	60		          rts
>c400	00		rp        .byte     0
>c401	00		ra        .byte     0
>c402	00 00		pc        .word     0

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c404			blkfill
.c404	20 8e c3	bf0            jsr  push
.c407	20 c5 c4	               jsr  savezp1
.c40a	84 fc		               sty  zpage1+1
.c40c	a0 00		               ldy  #$00
.c40e	84 fb		               sty  zpage1
.c410	91 fb		bf1            sta  (zpage1),y
.c412	c8		               iny
.c413	d0 fb		               bne  bf1
.c415	20 d4 c4	               jsr  restzp1
.c418	20 cd c3	               jsr  pop
.c41b	60		               rts
.c41c			memfill
.c41c	20 8e c3	               jsr  push
.c41f	20 04 c4	mf1            jsr  blkfill
.c422	c8		               iny
.c423	ca		               dex
.c424	d0 f9		               bne  mf1
.c426	20 cd c3	               jsr  pop
.c429	60		               rts
.c42a			memmove
.c42a	20 8e c3	               jsr  push
.c42d	ba		               tsx            ; On se crée un pointeur ...
.c42e	8a		               txa
.c42f	18		               clc
.c430	69 0b		               adc  #11
.c432	a8		               tay
.c433	a2 06		               ldx  #$06
.c435	b9 00 01	nextbyte       lda  $0100,y
.c438	99 84 c4	               sta  words,y
.c43b	c8		               iny
.c43c	ca		               dex
.c43d	d0 f6		               bne  nextbyte
.c43f	ad 84 c4	               lda  s
.c442	8d 5b c4	               sta  source+1
.c445	ad 85 c4	               lda  s+1
.c448	8d 5c c4	               sta  source+2
.c44b	ad 86 c4	               lda  d
.c44e	8d 58 c4	               sta  destin+1
.c451	ad 87 c4	               lda  d+1
.c454	8d 59 c4	               sta  destin+2
.c457	ad ff ff	destin         lda  $ffff
.c45a	8d ff ff	source         sta  $ffff
.c45d	ee 58 c4	               inc  destin+1
.c460	d0 03		               bne  src
.c462	ee 59 c4	               inc  destin+2
.c465	ee 5b c4	src            inc  source+1
.c468	d0 03		               bne  cnt
.c46a	ee 5c c4	               inc  source+2
.c46d	ad 88 c4	cnt            lda  compte
.c470	d0 08		               bne  decit
.c472	ad 89 c4	               lda  compte+1
.c475	f0 09		               beq  fini
.c477	ce 89 c4	               dec  compte+1
.c47a	ce 88 c4	decit          dec  compte
.c47d	4c 57 c4	               jmp  destin
.c480	20 cd c3	fini           jsr  pop
.c483	60		               rts
.c484			words
>c484	00 00		s         .word     $0000
>c486	00 00		d         .word     $0000
>c488	00 00		compte    .word     $0000
.c48a			decword
.c48a	20 8e c3	               jsr  push
.c48d	86 fd		               stx  zpage2
.c48f	84 fe		               sty  zpage2+1
.c491	20 cd c3	               jsr  pop
.c494	60		               rts
.c495			inczp1
.c495	08		               php
.c496	48		               pha
.c497	e6 fb		               inc  zpage1
.c499	a5 fb		               lda  zpage1
.c49b	d0 02		               bne  nopage
.c49d	e6 fc		               inc  zpage1+1
.c49f	68		nopage         pla
.c4a0	28		               plp
.c4a1	60		               rts
.c4a2			deczp1
.c4a2	08		                php
.c4a3	48		                pha
.c4a4	c6 fb		                dec  zpage1
.c4a6	d0 02		                bne  nopage
.c4a8	c6 fc		                dec  zpage1+1
.c4aa	68		nopage          pla
.c4ab	28		                plp
.c4ac	60		                rts
.c4ad			inczp2
.c4ad	08		               php
.c4ae	48		               pha
.c4af	e6 fd		               inc  zpage2
.c4b1	a5 fd		               lda  zpage2
.c4b3	d0 02		               bne  nopage
.c4b5	e6 fe		               inc  zpage2+1
.c4b7	68		nopage         pla
.c4b8	28		               plp
.c4b9	60		               rts
.c4ba			deczp2
.c4ba	08		               php
.c4bb	48		               pha
.c4bc	a5 fd		               lda  zpage2
.c4be	d0 02		               bne  nopage
.c4c0	c6 fe		               dec  zpage2+1
.c4c2	68		nopage         pla
.c4c3	28		               plp
.c4c4	60		               rts
.c4c5			savezp1
.c4c5	08		               php
.c4c6	48		               pha
.c4c7	a5 fb		               lda  zpage1
.c4c9	8d 41 c5	               sta  zp1
.c4cc	a5 fc		               lda  zpage1+1
.c4ce	8d 42 c5	               sta  zp1+1
.c4d1	68		               pla
.c4d2	28		               plp
.c4d3	60		               rts
.c4d4			restzp1
.c4d4	08		               php
.c4d5	48		               pha
.c4d6	ad 41 c5	               lda zp1
.c4d9	85 fb		               sta zpage1
.c4db	ad 42 c5	               lda zp1+1
.c4de	85 fc		               sta zpage1+1
.c4e0	68		               pla
.c4e1	28		               plp
.c4e2	60		               rts
.c4e3			savezp2
.c4e3	08		         php
.c4e4	48		         pha
.c4e5	a5 fd		         lda zpage2
.c4e7	8d 43 c5	         sta zp2
.c4ea	a5 fe		         lda zpage2+1
.c4ec	8d 44 c5	         sta zp2+1
.c4ef	68		         pla
.c4f0	28		         plp
.c4f1	60		         rts
.c4f2			restzp2
.c4f2	08		                php
.c4f3	48		                pha
.c4f4	ad 43 c5	                lda  zp2
.c4f7	85 fd		                sta  zpage2
.c4f9	ad 44 c5	                lda  zp2+1
.c4fc	85 fe		                sta  zpage2+1
.c4fe	68		                pla
.c4ff	28		                plp
.c500	60		                rts
.c501			xy2addr
.c501	08		                php
.c502	48		                pha
.c503	8a		                txa
.c504	48		                pha
.c505	98		                tya
.c506	48		                pha
.c507	ad 3c c5	                lda     addr1+1
.c50a	8d 3e c5	                sta     addr2+1
.c50d	ad 3b c5	                lda     addr1
.c510	8d 3d c5	                sta     addr2
.c513	c0 00		                cpy     #$00
.c515	f0 0f		                beq     addx
.c517	18		moreline        clc
.c518	6d 3a c5	                adc     ymult
.c51b	90 03		                bcc     norepy
.c51d	ee 3e c5	                inc     addr2+1
.c520	8d 3d c5	norepy          sta     addr2
.c523	88		                dey
.c524	d0 f1		                bne     moreline
.c526	8a		addx            txa
.c527	18		                clc
.c528	6d 3d c5	                adc     addr2
.c52b	90 03		                bcc     thatsit
.c52d	ee 3e c5	                inc     addr2+1
.c530	8d 3d c5	thatsit         sta     addr2
.c533	68		                pla
.c534	a8		                tay
.c535	68		                pla
.c536	aa		                tax
.c537	68		                pla
.c538	28		                plp
.c539	60		                rts
>c53a	28		ymult          .byte     40
>c53b	00 00		addr1          .word     $0000
>c53d	00 00		addr2          .word     $0000
>c53f	00 00		bytecnt        .word     $0000
>c541	00 00		zp1        .word   $0000
>c543	00 00		zp2        .word   $0000

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c545	01		a2hexcol       .byte     1              ; pour aputscxy
>c546	00		a2hexbkcol     .byte     %00000000
.c547			a2hexpos
>c547	00		a2hexpx        .byte     0              ; pour aputsxy
>c548	00		a2hexpy        .byte     0
>c549	24		a2hexprefix    .byte     "$"            ; pour aputs
>c54a	00 00		a2hexstr       .word     $00
>c54c	00 00		               .word     $00
>c54e	00		               .byte     0              ; 0 end string
>c54f	30 30 30 30	abin           .null     "00000000"
>c553	30 30 30 30 00
>c558	20 20 20 00	adec           .null     "   "
.c55c			putahexfmtxy
.c55c	20 8e c3	               jsr  push
.c55f	20 ab c5	               jsr  atohex
.c562	ae 47 c5	               ldx  a2hexpx
.c565	ac 48 c5	               ldy  a2hexpy
.c568	20 b7 c2	               jsr  gotoxy
.c56b	a2 49		               ldx  #<a2hexprefix
.c56d	a0 c5		               ldy  #>a2hexprefix
.c56f	20 9d c2	               jsr  puts
.c572	20 cd c3	               jsr  pop
.c575	60		               rts
.c576			putahexfmt
.c576	20 8e c3	               jsr  push
.c579	20 ab c5	               jsr  atohex
.c57c	a2 49		               ldx  #<a2hexprefix
.c57e	a0 c5		               ldy  #>a2hexprefix
.c580	20 9d c2	               jsr  puts
.c583	20 cd c3	               jsr  pop
.c586	60		               rts
.c587			putahex
.c587	20 8e c3	               jsr  push
.c58a	20 ab c5	               jsr  atohex
.c58d	a2 4a		               ldx  #<a2hexstr
.c58f	a0 c5		               ldy  #>a2hexstr
.c591	20 9d c2	               jsr  puts
.c594	20 cd c3	               jsr  pop
.c597	60		               rts
.c598			nibtohex
.c598	08		               php
.c599	29 0f		               and  #$0f
.c59b	f8		               sed
.c59c	18		               clc
.c59d	69 90		               adc  #$90
.c59f	69 40		               adc  #$40
.c5a1	d8		               cld
.c5a2	28		               plp
.c5a3	60		               rts
.c5a4			lsra4bits
.c5a4	08		               php
.c5a5	4a		               lsr
.c5a6	4a		               lsr
.c5a7	4a		               lsr
.c5a8	4a		               lsr
.c5a9	28		               plp
.c5aa	60		               rts
.c5ab			atohex
.c5ab	08		               php
.c5ac	48		               pha
.c5ad	48		               pha
.c5ae	20 a4 c5	               jsr  lsra4bits
.c5b1	20 98 c5	               jsr  nibtohex
.c5b4	8d 4a c5	               sta  a2hexstr
.c5b7	68		               pla
.c5b8	20 98 c5	               jsr  nibtohex
.c5bb	8d 4b c5	               sta  a2hexstr+1
.c5be	a9 00		               lda  #$00                ; set end of string
.c5c0	8d 4c c5	               sta  a2hexstr+2
.c5c3	68		               pla
.c5c4	28		               plp
.c5c5	60		               rts
.c5c6			xy2hex
.c5c6	20 8e c3	               jsr  push
.c5c9	20 ab c5	               jsr  atohex
.c5cc	8a		               txa
.c5cd	48		               pha
.c5ce	20 a4 c5	               jsr  lsra4bits
.c5d1	20 98 c5	               jsr  nibtohex
.c5d4	8d 4a c5	               sta  a2hexstr
.c5d7	68		               pla
.c5d8	20 98 c5	               jsr  nibtohex
.c5db	8d 4b c5	               sta  a2hexstr+1
.c5de	98		               tya
.c5df	48		               pha
.c5e0	20 a4 c5	               jsr  lsra4bits
.c5e3	20 98 c5	               jsr  nibtohex
.c5e6	8d 4c c5	               sta  a2hexstr+2
.c5e9	68		               pla
.c5ea	20 98 c5	               jsr  nibtohex
.c5ed	8d 4d c5	               sta  a2hexstr+3
.c5f0	a9 00		               lda  #$00                ; 0 ended string
.c5f2	8d 4e c5	               sta  a2hexstr+4
.c5f5	20 cd c3	               jsr  pop
.c5f8			atobin
.c5f8	20 8e c3	               jsr  push
.c5fb	a2 08		               ldx  #8
.c5fd	a0 00		               ldy  #0
.c5ff	18		               clc
.c600	2a		nextbit        rol
.c601	48		               pha
.c602	69 00		               adc  #$00
.c604	29 01		               and  #$01
.c606	20 98 c5	               jsr  nibtohex
.c609	99 4f c5	               sta  abin,y
.c60c	68		               pla
.c60d	c8		               iny
.c60e	ca		               dex
.c60f	d0 ef		               bne  nextbit
.c611	a9 00		               lda  #0
.c613	99 4f c5	               sta  abin,y
.c616	20 cd c3	               jsr  pull
.c619	60		               rts
.c61a			putabin
.c61a	20 f8 c5	               jsr     atobin
.c61d	20 8e c3	               jsr     push
.c620	a2 4f		               ldx     #<abin
.c622	a0 c5		               ldy     #>abin
.c624	20 9d c2	               jsr     puts
.c627	20 cd c3	               jsr     pop
.c62a	60		               rts
.c62b			printabin
.c62b	20 8e c3	               jsr     push
.c62e	a2 4f		               ldx     #<abin
.c630	a0 c5		               ldy     #>abin
.c632	20 9d c2	               jsr     puts
.c635	20 cd c3	               jsr     pop
.c638	60		               rts
.c639			putabinfmt
.c639	08		               php
.c63a	48		               pha
.c63b	a9 25		               lda     #"%"
.c63d	20 97 c2	               jsr     putch
.c640	68		               pla
.c641	20 1a c6	               jsr     putabin
.c644	28		               plp
.c645	60		               rts
.c646			putabinxy
.c646	20 b7 c2	               jsr     gotoxy
.c649	20 1a c6	               jsr     putabin
.c64c	60		               rts
.c64d			putabinfmtxy
.c64d	20 b7 c2	               jsr     gotoxy
.c650	20 39 c6	               jsr     putabinfmt
.c653	60		               rts
.c654			atodec
.c654	20 8e c3	               jsr  push
.c657	f8		               sed
.c658	aa		               tax
.c659	a0 00		               ldy  #$00
.c65b	a9 00		               lda  #$00
.c65d	18		nextbit        clc
.c65e	69 01		               adc  #$01
.c660	90 01		               bcc  decx
.c662	c8		               iny
.c663	ca		decx           dex
.c664	d0 f7		               bne  nextbit
.c666	48		               pha
.c667	98		               tya
.c668	20 98 c5	               jsr  nibtohex
.c66b	8d 58 c5	               sta  adec
.c66e	68		               pla
.c66f	48		               pha
.c670	20 98 c5	               jsr  nibtohex
.c673	8d 5a c5	               sta  adec+2
.c676	68		               pla
.c677	6a		               ror
.c678	6a		               ror
.c679	6a		               ror
.c67a	6a		               ror
.c67b	20 98 c5	               jsr  nibtohex
.c67e	8d 59 c5	               sta  adec+1
.c681	d8		               cld
.c682	20 cd c3	               jsr  pull
.c685	60		               rts
>c686	00 00 00	buffer         .byte     0,0,0
.c689			putadec
.c689	20 8e c3	               jsr  push
.c68c	20 54 c6	               jsr  atodec
.c68f	a2 58		               ldx  #<adec
.c691	a0 c5		               ldy  #>adec+1
.c693	20 9d c2	               jsr  puts
.c696	20 cd c3	               jsr  pop
.c699	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
>c69a	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>c69e	00 00 00 00 00 00 00 00 00 0d 00 00
>c6aa	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>c6ae	00 00 00 00 00 00 00 00 00 00 00 00
>c6ba	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>c6be	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>c6ca	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>c6ce	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>c6da	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>c6de	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>c6ea	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>c6ee	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>c6fa	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>c6fe	00 00 00 00 00 00 00 00 00 00 00 00
>c70a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>c70e	00 00 00 00 00 00 00 00 00 00 00 00
>c71a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>c71e	00 00 00 00 00 00 00 00 00 00 00 00
>c72a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>c72e	00 00 00 00 00 00 00 00 00 00 00 00
>c73a	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>c73e	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>c74a	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>c74e	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>c75a	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>c75e	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>c76a	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>c76e	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>c77a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>c77e	00 00 00 00 00 00 00 00 00 00 00 00
>c78a	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>c78e	00 00 00 00 00 00 00 00 00 00 00 00
.c79a			waitstop
.c79a	20 8e c3	               jsr  push
.c79d	20 ed f6	wait           jsr  k_stop
.c7a0	d0 fb		               bne  wait
.c7a2	20 cd c3	               jsr  pop
.c7a5	60		               rts
.c7a6			anykey
.c7a6	08		               php
.c7a7	48		               pha
.c7a8	a5 cb		nokey          lda 203
.c7aa	c9 40		               cmp #64
.c7ac	f0 fa		               beq nokey
.c7ae	20 b4 c7	               jsr releasekey
.c7b1	68		               pla
.c7b2	28		               plp
.c7b3	60		               rts
.c7b4			releasekey
.c7b4	08		               php
.c7b5	48		               pha
.c7b6	a5 cb		keypressed     lda 203
.c7b8	c9 40		               cmp #64
.c7ba	d0 fa		               bne keypressed
.c7bc	68		               pla
.c7bd	28		               plp
.c7be	60		               rts
.c7bf			getkey
.c7bf	20 e4 ff	again          jsr  getin
.c7c2	c9 00		               cmp  #0
.c7c4	f0 f9		               beq  again
.c7c6	60		               rts
.c7c7			kbflushbuff
.c7c7	08		               php
.c7c8	48		               pha
.c7c9	20 e4 ff	again          jsr  getin
.c7cc	c9 00		               cmp  #0
.c7ce	d0 f9		               bne  again
.c7d0	68		               pla
.c7d1	28		               plp
.c7d2	60		               rts
.c7d3			waitkey
.c7d3	20 8e c3	               jsr  push
.c7d6	8d 24 c8	               sta  thekey
.c7d9	20 e4 ff	nope           jsr  getin
.c7dc	20 d2 ff	               jsr  chrout
.c7df	cd 24 c8	               cmp  thekey
.c7e2	d0 f5		               bne  nope
.c7e4	20 d2 ff	               jsr  chrout
.c7e7	20 cd c3	               jsr  pop
.c7ea	60		               rts
.c7eb			waitspace
.c7eb	20 8e c3	               jsr  push
.c7ee	a9 7f		wait           lda  #$7f  ;%01111111
.c7f0	8d 00 dc	               sta  $dc00
.c7f3	ad 01 dc	               lda  $dc01
.c7f6	29 10		               and  #$10  ;mask %00010000
.c7f8	d0 f4		               bne  wait
.c7fa	20 cd c3	               jsr  pop
.c7fd			waitsstop
.c7fd	20 8e c3	               jsr  push
.c800	20 ed f6	wait           jsr  k_stop  ;%01111111
.c803	d0 fb		               bne  wait
.c805	20 cd c3	               jsr  pop
.c808			waitreturn
.c808	20 8e c3	               jsr  push
.c80b	ad 25 c8	               lda  thecount
.c80e	8d 00 04	               sta  scrnram
.c811	a9 02		               lda  #$02
.c813	8d 00 d8	               sta  colorram
.c816	20 e4 ff	nope           jsr  getin
.c819	c9 0d		nohex          cmp  #$0d
.c81b	d0 f9		               bne  nope
.c81d	ee 25 c8	               inc  thecount
.c820	20 cd c3	               jsr  pop
.c823	60		               rts
>c824	00		thekey         .byte   0
>c825	01		thecount       .byte   $01

;******  Return to file: slbug64.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L slbug64.txt -o slbug64.prg slbug64.asm
; Thu Sep 25 19:14:29 2025

;Offset	;Hex		;Source

;******  Processing input file: slbug64.asm

="20250925-190639"	                Version = "20250925-190639"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 55 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"
.0854	60		              rts                  ; ... doit se rerminer par un RTS.

;******  Return to file: slbug64.asm

.0855			main
.0855	20 91 10	               jsr  scrmaninit
.0858	08		               php
.0859	48		               pha
.085a	a9 0e		               lda  #14
.085c	20 d2 ff	               jsr  $ffd2
.085f	68		               pla
.0860	28		               plp
.0861	08		               php
.0862	48		               pha
.0863	a9 08		               lda  #$08
.0865	20 d2 ff	               jsr  $ffd2
.0868	68		               pla
.0869	28		               plp
.086a	a9 05		               lda  #cvert
.086c	8d 20 d0	               sta  vicbordcol
.086f	a9 06		               lda  #cbleu
.0871	8d 21 d0	               sta  vicbackcol
.0874	a9 01		               lda  #cblanc
.0876	8d 86 02	               sta  bascol
.0879	20 b1 10	               jsr  cls
.087c	20 70 0b	               jsr  help
.087f	20 51 15	               jsr  anykey
.0882	20 96 08	               jsr  slbug64
.0885	20 32 12	               jsr  pushreg
.0888	a2 00		               ldx  #0
.088a	a0 00		               ldy  #0
.088c	20 e8 10	               jsr  gotoxy
.088f	20 61 12	               jsr  popreg
.0892	20 51 15	               jsr  anykey
.0895	60		               rts
.0896			slbug64
.0896	08		                php
.0897	48		                pha
.0898	ad 21 d0	                lda vicbackcol
.089b	48		                pha
.089c	a9 00		                lda #cnoir
.089e	8d 21 d0	                sta vicbackcol
.08a1	8d 20 d0	                sta vicbordcol
.08a4	20 d5 16	                jsr showregs
.08a7	20 51 15	                jsr anykey
.08aa	68		                pla
.08ab	20 32 12	               jsr  pushreg
.08ae	a2 00		               ldx  #0
.08b0	a0 00		               ldy  #0
.08b2	20 e8 10	               jsr  gotoxy
.08b5	20 61 12	               jsr  popreg
.08b8	08		            php
.08b9	48		            pha
.08ba	a9 01		            lda #1
.08bc	8d a4 19	            sta drawbox_top
.08bf	8d a8 19	            sta drawbox_curline
.08c2	a9 01		            lda #1
.08c4	8d a5 19	            sta drawbox_left
.08c7	a9 11		            lda #17
.08c9	8d a6 19	            sta drawbox_width
.08cc	a9 05		            lda #5
.08ce	8d a7 19	            sta drawbox_height
.08d1	a9 11		            lda #cblanc+reverse
.08d3	8d a9 19	            sta drawbox_colour
.08d6	68		            pla
.08d7	28		            plp
.08d8	20 81 19	            jsr db_drawbox
.08db	20 32 12	                jsr  pushreg
.08de	ad 86 02	                lda  bascol
.08e1	48		                pha
.08e2	a9 11		                lda  #cblanc+reverse
.08e4	8d 86 02	                sta  bascol
.08e7	a0 02		                ldy  #1+1
.08e9	a2 01		                ldx  #1
.08eb	18		                clc
.08ec	20 f0 ff	                jsr  plot
.08ef	a2 ec		                ldx  #<titre
.08f1	a0 0e		                ldy  #>titre
.08f3	20 ce 10	                jsr  puts
.08f6	68		                pla
.08f7	8d 86 02	                sta  bascol
.08fa	20 61 12	                jsr  popreg
.08fd	08		            php
.08fe	48		            pha
.08ff	a9 03		            lda #3
.0901	8d a4 19	            sta drawbox_top
.0904	8d a8 19	            sta drawbox_curline
.0907	a9 03		            lda #3
.0909	8d a5 19	            sta drawbox_left
.090c	a9 11		            lda #17
.090e	8d a6 19	            sta drawbox_width
.0911	a9 05		            lda #5
.0913	8d a7 19	            sta drawbox_height
.0916	a9 1f		            lda #cgris3+reverse
.0918	8d a9 19	            sta drawbox_colour
.091b	68		            pla
.091c	28		            plp
.091d	20 81 19	            jsr db_drawbox
.0920	20 32 12	                jsr  pushreg
.0923	ad 86 02	                lda  bascol
.0926	48		                pha
.0927	a9 1f		                lda  #cgris3+reverse
.0929	8d 86 02	                sta  bascol
.092c	a0 04		                ldy  #3+1
.092e	a2 03		                ldx  #3
.0930	18		                clc
.0931	20 f0 ff	                jsr  plot
.0934	a2 ec		                ldx  #<titre
.0936	a0 0e		                ldy  #>titre
.0938	20 ce 10	                jsr  puts
.093b	68		                pla
.093c	8d 86 02	                sta  bascol
.093f	20 61 12	                jsr  popreg
.0942	08		            php
.0943	48		            pha
.0944	a9 05		            lda #5
.0946	8d a4 19	            sta drawbox_top
.0949	8d a8 19	            sta drawbox_curline
.094c	a9 05		            lda #5
.094e	8d a5 19	            sta drawbox_left
.0951	a9 11		            lda #17
.0953	8d a6 19	            sta drawbox_width
.0956	a9 05		            lda #5
.0958	8d a7 19	            sta drawbox_height
.095b	a9 1c		            lda #cgris1+reverse
.095d	8d a9 19	            sta drawbox_colour
.0960	68		            pla
.0961	28		            plp
.0962	20 81 19	            jsr db_drawbox
.0965	20 32 12	                jsr  pushreg
.0968	ad 86 02	                lda  bascol
.096b	48		                pha
.096c	a9 1c		                lda  #cgris1+reverse
.096e	8d 86 02	                sta  bascol
.0971	a0 06		                ldy  #5+1
.0973	a2 05		                ldx  #5
.0975	18		                clc
.0976	20 f0 ff	                jsr  plot
.0979	a2 ec		                ldx  #<titre
.097b	a0 0e		                ldy  #>titre
.097d	20 ce 10	                jsr  puts
.0980	68		                pla
.0981	8d 86 02	                sta  bascol
.0984	20 61 12	                jsr  popreg
.0987	08		            php
.0988	48		            pha
.0989	a9 07		            lda #7
.098b	8d a4 19	            sta drawbox_top
.098e	8d a8 19	            sta drawbox_curline
.0991	a9 07		            lda #7
.0993	8d a5 19	            sta drawbox_left
.0996	a9 11		            lda #17
.0998	8d a6 19	            sta drawbox_width
.099b	a9 05		            lda #5
.099d	8d a7 19	            sta drawbox_height
.09a0	a9 1b		            lda #cgris0+reverse
.09a2	8d a9 19	            sta drawbox_colour
.09a5	68		            pla
.09a6	28		            plp
.09a7	20 81 19	            jsr db_drawbox
.09aa	20 32 12	                jsr  pushreg
.09ad	ad 86 02	                lda  bascol
.09b0	48		                pha
.09b1	a9 1b		                lda  #cgris0+reverse
.09b3	8d 86 02	                sta  bascol
.09b6	a0 08		                ldy  #7+1
.09b8	a2 07		                ldx  #7
.09ba	18		                clc
.09bb	20 f0 ff	                jsr  plot
.09be	a2 ec		                ldx  #<titre
.09c0	a0 0e		                ldy  #>titre
.09c2	20 ce 10	                jsr  puts
.09c5	68		                pla
.09c6	8d 86 02	                sta  bascol
.09c9	20 61 12	                jsr  popreg
.09cc	08		            php
.09cd	48		            pha
.09ce	a9 09		            lda #9
.09d0	8d a4 19	            sta drawbox_top
.09d3	8d a8 19	            sta drawbox_curline
.09d6	a9 09		            lda #9
.09d8	8d a5 19	            sta drawbox_left
.09db	a9 11		            lda #17
.09dd	8d a6 19	            sta drawbox_width
.09e0	a9 05		            lda #5
.09e2	8d a7 19	            sta drawbox_height
.09e5	a9 12		            lda #crouge+reverse
.09e7	8d a9 19	            sta drawbox_colour
.09ea	68		            pla
.09eb	28		            plp
.09ec	20 81 19	            jsr db_drawbox
.09ef	20 32 12	                jsr  pushreg
.09f2	ad 86 02	                lda  bascol
.09f5	48		                pha
.09f6	a9 12		                lda  #crouge+reverse
.09f8	8d 86 02	                sta  bascol
.09fb	a0 0a		                ldy  #9+1
.09fd	a2 09		                ldx  #9
.09ff	18		                clc
.0a00	20 f0 ff	                jsr  plot
.0a03	a2 ec		                ldx  #<titre
.0a05	a0 0e		                ldy  #>titre
.0a07	20 ce 10	                jsr  puts
.0a0a	68		                pla
.0a0b	8d 86 02	                sta  bascol
.0a0e	20 61 12	                jsr  popreg
.0a11	08		            php
.0a12	48		            pha
.0a13	a9 0b		            lda #11
.0a15	8d a4 19	            sta drawbox_top
.0a18	8d a8 19	            sta drawbox_curline
.0a1b	a9 0b		            lda #11
.0a1d	8d a5 19	            sta drawbox_left
.0a20	a9 11		            lda #17
.0a22	8d a6 19	            sta drawbox_width
.0a25	a9 05		            lda #5
.0a27	8d a7 19	            sta drawbox_height
.0a2a	a9 1a		            lda #crose+reverse
.0a2c	8d a9 19	            sta drawbox_colour
.0a2f	68		            pla
.0a30	28		            plp
.0a31	20 81 19	            jsr db_drawbox
.0a34	20 32 12	                jsr  pushreg
.0a37	ad 86 02	                lda  bascol
.0a3a	48		                pha
.0a3b	a9 1a		                lda  #crose+reverse
.0a3d	8d 86 02	                sta  bascol
.0a40	a0 0c		                ldy  #11+1
.0a42	a2 0b		                ldx  #11
.0a44	18		                clc
.0a45	20 f0 ff	                jsr  plot
.0a48	a2 ec		                ldx  #<titre
.0a4a	a0 0e		                ldy  #>titre
.0a4c	20 ce 10	                jsr  puts
.0a4f	68		                pla
.0a50	8d 86 02	                sta  bascol
.0a53	20 61 12	                jsr  popreg
.0a56	08		            php
.0a57	48		            pha
.0a58	a9 0d		            lda #13
.0a5a	8d a4 19	            sta drawbox_top
.0a5d	8d a8 19	            sta drawbox_curline
.0a60	a9 0d		            lda #13
.0a62	8d a5 19	            sta drawbox_left
.0a65	a9 11		            lda #17
.0a67	8d a6 19	            sta drawbox_width
.0a6a	a9 05		            lda #5
.0a6c	8d a7 19	            sta drawbox_height
.0a6f	a9 14		            lda #cmauve+reverse
.0a71	8d a9 19	            sta drawbox_colour
.0a74	68		            pla
.0a75	28		            plp
.0a76	20 81 19	            jsr db_drawbox
.0a79	20 32 12	                jsr  pushreg
.0a7c	ad 86 02	                lda  bascol
.0a7f	48		                pha
.0a80	a9 14		                lda  #cmauve+reverse
.0a82	8d 86 02	                sta  bascol
.0a85	a0 0e		                ldy  #13+1
.0a87	a2 0d		                ldx  #13
.0a89	18		                clc
.0a8a	20 f0 ff	                jsr  plot
.0a8d	a2 ec		                ldx  #<titre
.0a8f	a0 0e		                ldy  #>titre
.0a91	20 ce 10	                jsr  puts
.0a94	68		                pla
.0a95	8d 86 02	                sta  bascol
.0a98	20 61 12	                jsr  popreg
.0a9b	08		            php
.0a9c	48		            pha
.0a9d	a9 0f		            lda #15
.0a9f	8d a4 19	            sta drawbox_top
.0aa2	8d a8 19	            sta drawbox_curline
.0aa5	a9 0f		            lda #15
.0aa7	8d a5 19	            sta drawbox_left
.0aaa	a9 11		            lda #17
.0aac	8d a6 19	            sta drawbox_width
.0aaf	a9 05		            lda #5
.0ab1	8d a7 19	            sta drawbox_height
.0ab4	a9 16		            lda #cbleu+reverse
.0ab6	8d a9 19	            sta drawbox_colour
.0ab9	68		            pla
.0aba	28		            plp
.0abb	20 81 19	            jsr db_drawbox
.0abe	20 32 12	                jsr  pushreg
.0ac1	ad 86 02	                lda  bascol
.0ac4	48		                pha
.0ac5	a9 16		                lda  #cbleu+reverse
.0ac7	8d 86 02	                sta  bascol
.0aca	a0 10		                ldy  #15+1
.0acc	a2 0f		                ldx  #15
.0ace	18		                clc
.0acf	20 f0 ff	                jsr  plot
.0ad2	a2 ec		                ldx  #<titre
.0ad4	a0 0e		                ldy  #>titre
.0ad6	20 ce 10	                jsr  puts
.0ad9	68		                pla
.0ada	8d 86 02	                sta  bascol
.0add	20 61 12	                jsr  popreg
.0ae0	08		            php
.0ae1	48		            pha
.0ae2	a9 11		            lda #17
.0ae4	8d a4 19	            sta drawbox_top
.0ae7	8d a8 19	            sta drawbox_curline
.0aea	a9 11		            lda #17
.0aec	8d a5 19	            sta drawbox_left
.0aef	a9 11		            lda #17
.0af1	8d a6 19	            sta drawbox_width
.0af4	a9 05		            lda #5
.0af6	8d a7 19	            sta drawbox_height
.0af9	a9 13		            lda #ccyan+reverse
.0afb	8d a9 19	            sta drawbox_colour
.0afe	68		            pla
.0aff	28		            plp
.0b00	20 81 19	            jsr db_drawbox
.0b03	20 32 12	                jsr  pushreg
.0b06	ad 86 02	                lda  bascol
.0b09	48		                pha
.0b0a	a9 13		                lda  #ccyan+reverse
.0b0c	8d 86 02	                sta  bascol
.0b0f	a0 12		                ldy  #17+1
.0b11	a2 11		                ldx  #17
.0b13	18		                clc
.0b14	20 f0 ff	                jsr  plot
.0b17	a2 ec		                ldx  #<titre
.0b19	a0 0e		                ldy  #>titre
.0b1b	20 ce 10	                jsr  puts
.0b1e	68		                pla
.0b1f	8d 86 02	                sta  bascol
.0b22	20 61 12	                jsr  popreg
.0b25	08		            php
.0b26	48		            pha
.0b27	a9 13		            lda #19
.0b29	8d a4 19	            sta drawbox_top
.0b2c	8d a8 19	            sta drawbox_curline
.0b2f	a9 13		            lda #19
.0b31	8d a5 19	            sta drawbox_left
.0b34	a9 11		            lda #17
.0b36	8d a6 19	            sta drawbox_width
.0b39	a9 05		            lda #5
.0b3b	8d a7 19	            sta drawbox_height
.0b3e	a9 15		            lda #cvert+reverse
.0b40	8d a9 19	            sta drawbox_colour
.0b43	68		            pla
.0b44	28		            plp
.0b45	20 81 19	            jsr db_drawbox
.0b48	20 32 12	                jsr  pushreg
.0b4b	ad 86 02	                lda  bascol
.0b4e	48		                pha
.0b4f	a9 15		                lda  #cvert+reverse
.0b51	8d 86 02	                sta  bascol
.0b54	a0 14		                ldy  #19+1
.0b56	a2 13		                ldx  #19
.0b58	18		                clc
.0b59	20 f0 ff	                jsr  plot
.0b5c	a2 ec		                ldx  #<titre
.0b5e	a0 0e		                ldy  #>titre
.0b60	20 ce 10	                jsr  puts
.0b63	68		                pla
.0b64	8d 86 02	                sta  bascol
.0b67	20 61 12	                jsr  popreg
.0b6a	20 d5 16	                jsr showregs
.0b6d	68		                pla
.0b6e	28		                plp
.0b6f	60		                rts
=$10			reverse = $10
.0b70			help
=4			left = 4
=4			top = 4
=$1			color = cblanc
=$a			color2 = crose
.0b70	20 c4 11	                jsr pushall
.0b73	20 b1 10	                jsr cls
.0b76	a9 0d		                lda #$0d
.0b78	20 c8 10	                jsr putch
.0b7b	20 c8 10	                jsr putch
.0b7e	20 c8 10	                jsr putch
.0b81	20 c8 10	                jsr putch
.0b84	a9 12		                lda #b_rvs_on
.0b86	20 c8 10	                jsr putch
.0b89	08		            php
.0b8a	48		            pha
.0b8b	a9 04		            lda #top
.0b8d	8d a4 19	            sta drawbox_top
.0b90	8d a8 19	            sta drawbox_curline
.0b93	a9 04		            lda #left
.0b95	8d a5 19	            sta drawbox_left
.0b98	a9 20		            lda #32
.0b9a	8d a6 19	            sta drawbox_width
.0b9d	a9 0a		            lda #10
.0b9f	8d a7 19	            sta drawbox_height
.0ba2	a9 11		            lda #color+reverse
.0ba4	8d a9 19	            sta drawbox_colour
.0ba7	68		            pla
.0ba8	28		            plp
.0ba9	20 81 19	            jsr db_drawbox
.0bac	20 32 12	                jsr  pushreg
.0baf	ad 86 02	                lda  bascol
.0bb2	48		                pha
.0bb3	a9 11		                lda  #color+reverse
.0bb5	8d 86 02	                sta  bascol
.0bb8	a0 05		                ldy  #left+1
.0bba	a2 04		                ldx  #top
.0bbc	18		                clc
.0bbd	20 f0 ff	                jsr  plot
.0bc0	a2 92		                ldx  #<texta
.0bc2	a0 0d		                ldy  #>texta
.0bc4	20 ce 10	                jsr  puts
.0bc7	68		                pla
.0bc8	8d 86 02	                sta  bascol
.0bcb	20 61 12	                jsr  popreg
.0bce	20 32 12	                jsr  pushreg
.0bd1	ad 86 02	                lda  bascol
.0bd4	48		                pha
.0bd5	a9 01		                lda  #color
.0bd7	8d 86 02	                sta  bascol
.0bda	a0 05		                ldy  #left+1
.0bdc	a2 06		                ldx  #top+2
.0bde	18		                clc
.0bdf	20 f0 ff	                jsr  plot
.0be2	a2 ad		                ldx  #<textb
.0be4	a0 0d		                ldy  #>textb
.0be6	20 ce 10	                jsr  puts
.0be9	68		                pla
.0bea	8d 86 02	                sta  bascol
.0bed	20 61 12	                jsr  popreg
.0bf0	20 32 12	                jsr  pushreg
.0bf3	ad 86 02	                lda  bascol
.0bf6	48		                pha
.0bf7	a9 01		                lda  #color
.0bf9	8d 86 02	                sta  bascol
.0bfc	a0 05		                ldy  #left+1
.0bfe	a2 07		                ldx  #top+3
.0c00	18		                clc
.0c01	20 f0 ff	                jsr  plot
.0c04	a2 cc		                ldx  #<textc
.0c06	a0 0d		                ldy  #>textc
.0c08	20 ce 10	                jsr  puts
.0c0b	68		                pla
.0c0c	8d 86 02	                sta  bascol
.0c0f	20 61 12	                jsr  popreg
.0c12	20 32 12	                jsr  pushreg
.0c15	ad 86 02	                lda  bascol
.0c18	48		                pha
.0c19	a9 01		                lda  #color
.0c1b	8d 86 02	                sta  bascol
.0c1e	a0 05		                ldy  #left+1
.0c20	a2 08		                ldx  #top+4
.0c22	18		                clc
.0c23	20 f0 ff	                jsr  plot
.0c26	a2 eb		                ldx  #<textd
.0c28	a0 0d		                ldy  #>textd
.0c2a	20 ce 10	                jsr  puts
.0c2d	68		                pla
.0c2e	8d 86 02	                sta  bascol
.0c31	20 61 12	                jsr  popreg
.0c34	20 32 12	                jsr  pushreg
.0c37	ad 86 02	                lda  bascol
.0c3a	48		                pha
.0c3b	a9 01		                lda  #color
.0c3d	8d 86 02	                sta  bascol
.0c40	a0 05		                ldy  #left+1
.0c42	a2 0a		                ldx  #top+6
.0c44	18		                clc
.0c45	20 f0 ff	                jsr  plot
.0c48	a2 0a		                ldx  #<texte
.0c4a	a0 0e		                ldy  #>texte
.0c4c	20 ce 10	                jsr  puts
.0c4f	68		                pla
.0c50	8d 86 02	                sta  bascol
.0c53	20 61 12	                jsr  popreg
.0c56	20 32 12	                jsr  pushreg
.0c59	ad 86 02	                lda  bascol
.0c5c	48		                pha
.0c5d	a9 01		                lda  #color
.0c5f	8d 86 02	                sta  bascol
.0c62	a0 05		                ldy  #left+1
.0c64	a2 0b		                ldx  #top+7
.0c66	18		                clc
.0c67	20 f0 ff	                jsr  plot
.0c6a	a2 29		                ldx  #<textf
.0c6c	a0 0e		                ldy  #>textf
.0c6e	20 ce 10	                jsr  puts
.0c71	68		                pla
.0c72	8d 86 02	                sta  bascol
.0c75	20 61 12	                jsr  popreg
.0c78	20 32 12	                jsr  pushreg
.0c7b	ad 86 02	                lda  bascol
.0c7e	48		                pha
.0c7f	a9 01		                lda  #color
.0c81	8d 86 02	                sta  bascol
.0c84	a0 05		                ldy  #left+1
.0c86	a2 0c		                ldx  #top+8
.0c88	18		                clc
.0c89	20 f0 ff	                jsr  plot
.0c8c	a2 48		                ldx  #<textg
.0c8e	a0 0e		                ldy  #>textg
.0c90	20 ce 10	                jsr  puts
.0c93	68		                pla
.0c94	8d 86 02	                sta  bascol
.0c97	20 61 12	                jsr  popreg
.0c9a	08		            php
.0c9b	48		            pha
.0c9c	a9 0f		            lda #top+11
.0c9e	8d a4 19	            sta drawbox_top
.0ca1	8d a8 19	            sta drawbox_curline
.0ca4	a9 04		            lda #left
.0ca6	8d a5 19	            sta drawbox_left
.0ca9	a9 20		            lda #32
.0cab	8d a6 19	            sta drawbox_width
.0cae	a9 06		            lda #6
.0cb0	8d a7 19	            sta drawbox_height
.0cb3	a9 1a		            lda #color2+reverse
.0cb5	8d a9 19	            sta drawbox_colour
.0cb8	68		            pla
.0cb9	28		            plp
.0cba	20 81 19	            jsr db_drawbox
.0cbd	20 32 12	                jsr  pushreg
.0cc0	ad 86 02	                lda  bascol
.0cc3	48		                pha
.0cc4	a9 1a		                lda  #color2+reverse
.0cc6	8d 86 02	                sta  bascol
.0cc9	a0 05		                ldy  #left+1
.0ccb	a2 0f		                ldx  #top+11
.0ccd	18		                clc
.0cce	20 f0 ff	                jsr  plot
.0cd1	a2 67		                ldx  #<texth
.0cd3	a0 0e		                ldy  #>texth
.0cd5	20 ce 10	                jsr  puts
.0cd8	68		                pla
.0cd9	8d 86 02	                sta  bascol
.0cdc	20 61 12	                jsr  popreg
.0cdf	20 32 12	                jsr  pushreg
.0ce2	ad 86 02	                lda  bascol
.0ce5	48		                pha
.0ce6	a9 0a		                lda  #color2
.0ce8	8d 86 02	                sta  bascol
.0ceb	a0 05		                ldy  #left+1
.0ced	a2 11		                ldx  #top+13
.0cef	18		                clc
.0cf0	20 f0 ff	                jsr  plot
.0cf3	a2 76		                ldx  #<texti
.0cf5	a0 0e		                ldy  #>texti
.0cf7	20 ce 10	                jsr  puts
.0cfa	68		                pla
.0cfb	8d 86 02	                sta  bascol
.0cfe	20 61 12	                jsr  popreg
.0d01	20 32 12	                jsr  pushreg
.0d04	ad 86 02	                lda  bascol
.0d07	48		                pha
.0d08	a9 0a		                lda  #color2
.0d0a	8d 86 02	                sta  bascol
.0d0d	a0 05		                ldy  #left+1
.0d0f	a2 12		                ldx  #top+14
.0d11	18		                clc
.0d12	20 f0 ff	                jsr  plot
.0d15	a2 95		                ldx  #<textj
.0d17	a0 0e		                ldy  #>textj
.0d19	20 ce 10	                jsr  puts
.0d1c	68		                pla
.0d1d	8d 86 02	                sta  bascol
.0d20	20 61 12	                jsr  popreg
.0d23	20 32 12	                jsr  pushreg
.0d26	ad 86 02	                lda  bascol
.0d29	48		                pha
.0d2a	a9 0a		                lda  #color2
.0d2c	8d 86 02	                sta  bascol
.0d2f	a0 05		                ldy  #left+1
.0d31	a2 13		                ldx  #top+15
.0d33	18		                clc
.0d34	20 f0 ff	                jsr  plot
.0d37	a2 b4		                ldx  #<textk
.0d39	a0 0e		                ldy  #>textk
.0d3b	20 ce 10	                jsr  puts
.0d3e	68		                pla
.0d3f	8d 86 02	                sta  bascol
.0d42	20 61 12	                jsr  popreg
.0d45	a9 92		                lda #b_rvs_off
.0d47	20 c8 10	                jsr putch
.0d4a	20 32 12	                jsr  pushreg
.0d4d	ad 86 02	                lda  bascol
.0d50	48		                pha
.0d51	a9 01		                lda  #cblanc
.0d53	8d 86 02	                sta  bascol
.0d56	a0 0f		                ldy  #39-24
.0d58	a2 18		                ldx  #24
.0d5a	18		                clc
.0d5b	20 f0 ff	                jsr  plot
.0d5e	a2 d3		                ldx  #<textl
.0d60	a0 0e		                ldy  #>textl
.0d62	20 ce 10	                jsr  puts
.0d65	68		                pla
.0d66	8d 86 02	                sta  bascol
.0d69	20 61 12	                jsr  popreg
.0d6c	20 ff 11	                jsr popall
.0d6f	60		                rts

;******  Processing file: chaines_fr.asm

=158			headtcol        =   b_jaune
=158			normtcol        =   b_jaune
>0d70	00		nextline        .byte   0
>0d71	20 20 20 20	line            .null           "                                "
>0d75	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0d85	20 20 20 20 20 20 20 20 20 20 20 20 00
>0d92	92		texta           .byte           b_rvs_off
>0d93	20 d3 cc 2d	                .text           " SL-BUG 64 Version 4.00 "
>0d97	c2 d5 c7 20 36 34 20 d6 45 52 53 49 4f 4e 20 34
>0da7	2e 30 30 20
>0dab	12 00		                .byte           b_rvs_on,0
>0dad	20 20 20 20	textb           .null           "     Version Commodore 64     "
>0db1	20 d6 45 52 53 49 4f 4e 20 c3 4f 4d 4d 4f 44 4f
>0dc1	52 45 20 36 34 20 20 20 20 20 00
>0dcc	20 20 c9 44	textc           .null           "  Idee Originale sur MC-6809  "
>0dd0	45 45 20 cf 52 49 47 49 4e 41 4c 45 20 53 55 52
>0de0	20 cd c3 2d 36 38 30 39 20 20 00
>0deb	20 20 d0 41	textd           .null           "  Par Serge Leblanc mai 1994  "
>0def	52 20 d3 45 52 47 45 20 cc 45 42 4c 41 4e 43 20
>0dff	4d 41 49 20 31 39 39 34 20 20 00
>0e0a	20 d0 4f 52	texte           .null           " Port C64 par Daniel Lafrance "
>0e0e	54 20 c3 36 34 20 50 41 52 20 c4 41 4e 49 45 4c
>0e1e	20 cc 41 46 52 41 4e 43 45 20 00
>0e29	20 20 20 20	textf           .null           "       (c) Octobre 2025       "
>0e2d	20 20 20 28 43 29 20 cf 43 54 4f 42 52 45 20 32
>0e3d	30 32 35 20 20 20 20 20 20 20 00
>0e48	20 20 20 d6	textg           .null   format( "   Version: %-17s ",Version)
>0e4c	45 52 53 49 4f 4e 3a 20 32 30 32 35 30 39 32 35
>0e5c	2d 31 39 30 36 33 39 20 20 20 00
>0e67	92		texth           .byte           b_rvs_off
>0e68	20 d2 c1 c3	                .text           " RACCOURCIS "
>0e6c	c3 cf d5 d2 c3 c9 d3 20
>0e74	12 00		                .byte           b_rvs_on,0
>0e76	20 c5 58 45	texti           .null   format( " Execution.: SYS%5d ($%4X) ",slbug64,slbug64)
>0e7a	43 55 54 49 4f 4e 2e 3a 20 d3 d9 d3 20 32 31 39
>0e8a	38 20 28 24 20 38 39 36 29 20 00
>0e95	20 c1 49 44	textj           .null   format( " Aide......: SYS%5d ($%4X) ",help,help)
>0e99	45 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 39 32
>0ea9	38 20 28 24 20 c2 37 30 29 20 00
>0eb4	20 c3 cc d3	textk           .null   format( " CLS.......: SYS%5d ($%4X) ",cls,cls)
>0eb8	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 34 32 37
>0ec8	33 20 28 24 31 30 c2 31 29 20 00
>0ed3	d5 4e 45 20	textl           .null           "Une clef pour continuer!"
>0ed7	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0ee7	55 45 52 21 00
>0eec	d7 49 4e 44	titre           .null   "Window Title"
>0ef0	4f 57 20 d4 49 54 4c 45 00
>0ef9	b0 c0 c0 c0	tline   .byte   176,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,174,0
>0efd	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>0f0d	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ae 00
>0f1a	ab c0 c0 c0	mline   .byte   171,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,179,0
>0f1e	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>0f2e	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 b3 00
>0f3b	ad c0 c0 c0	bline   .byte   173,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,189,0
>0f3f	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>0f4f	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 bd 00
>0f5c	dd 20 20 20	eline   .byte   221,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,221,0
>0f60	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0f70	20 20 20 20 20 20 20 20 20 20 20 dd 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0f7d	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0f81	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black         =   144  ;0,  ctrl-1
=5			b_white         =   5    ;1,  ctrl-2
=28			b_red           =   28   ;2,  ctrl-3
=159			b_cyan          =   159  ;3,  ctrl-4
=156			b_purple        =   156  ;4,  ctrl-5
=30			b_green         =   30   ;5,  ctrl-6
=31			b_blue          =   31   ;6,  ctrl-7
=158			b_yellow        =   158  ;7,  ctrl-8
=129			b_orange        =   129  ;8,  C=-1
=149			b_brown         =   149  ;9,  C=-2
=150			b_ltred         =   150  ;10, C=-3
=155			b_gray3         =   155  ;11, C=-4
=155			b_grey3         =   155  ;11, C=-4
=152			b_gray2         =   152  ;12, C=-5
=152			b_grey2         =   152  ;13, C=-5
=153			b_ltgreen       =   153  ;13, C=-6
=154			b_ltblue        =   154  ;14, C=-7
=151			b_gray1         =   151  ;15, C=-8
=151			b_grey1         =   151  ;15, C=-8
=144			b_noir          =   144  ;0,  ctrl-1
=5			b_blanc         =   5    ;1,  ctrl-2
=28			b_rouge         =   28   ;2,  ctrl-3
=156			b_mauve         =   156  ;4,  ctrl-5
=30			b_vert          =   30   ;5,  ctrl-6
=31			b_bleu          =   31   ;6,  ctrl-7
=158			b_jaune         =   158  ;7,  ctrl-8
=149			b_brun          =   149  ;9,  C=-2
=150			b_rose          =   150  ;10, C=-3
=155			b_gris3         =   155  ;11, C=-4
=152			b_gris2         =   152  ;12, C=-5
=153			b_vert2         =   153  ;13, C=-6
=154			b_blue2         =   154  ;14, C=-7
=151			b_gris1         =   151  ;15, C=-8
=151			b_gris          =   151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.0f85			screendis
.0f85	08		               php
.0f86	48		               pha
.0f87	ad 11 d0	               lda  $d011
.0f8a	29 ef		               and  #%11101111
.0f8c	8d 11 d0	               sta  $d011
.0f8f	68		               pla
.0f90	28		               plp
.0f91	60		               rts
.0f92			screenena
.0f92	08		               php
.0f93	48		               pha
.0f94	ad 11 d0	               lda  $d011
.0f97	09 10		               ora  #%00010000
.0f99	8d 11 d0	               sta  $d011
.0f9c	68		               pla
.0f9d	28		               plp
.0f9e	60		               rts
=8192			bmpram = 8192
.0f9f			victohighres
.0f9f	08		               php
.0fa0	48		               pha
.0fa1	ad 11 d0	               lda  vicmiscfnc
.0fa4	09 20		               ora  #%00100000     ; 32
.0fa6	8d 11 d0	               sta  vicmiscfnc
.0fa9	ad 18 d0	               lda  vicmemptr
.0fac	09 08		               ora  #%00001000     ; $08
.0fae	8d 18 d0	               sta  vicmemptr
.0fb1	a9 ff		               lda  #$ff           ; 255
.0fb3	85 37		               sta  $0037
.0fb5	a9 1f		               lda  #$1f           ; 31
.0fb7	85 38		               sta  $0038
.0fb9	68		               pla
.0fba	28		               plp
.0fbb	60		               rts
.0fbc			victonormal
.0fbc	08		               php
.0fbd	48		               pha
.0fbe	ad 11 d0	               lda  vicmiscfnc
.0fc1	29 df		               and  #%11011111     ; 233
.0fc3	8d 11 d0	               sta  vicmiscfnc
.0fc6	ad 18 d0	               lda  vicmemptr
.0fc9	29 f7		               and  #%11110111     ; $08
.0fcb	8d 18 d0	               sta  vicmemptr
.0fce	a9 00		               lda  #$00
.0fd0	85 37		               sta  $0037
.0fd2	a9 a0		               lda  #$a0
.0fd4	85 38		               sta  $0038
.0fd6	20 b1 10	               jsr  cls
.0fd9	68		               pla
.0fda	28		               plp
.0fdb	60		               rts
.0fdc			vicbmpclear
.0fdc	20 c4 11	               jsr  push
.0fdf	a9 04		               lda  #cmauve
.0fe1	20 0a 10	               jsr  setvicbmpbackcol
.0fe4	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.0fe6	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.0fe8	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.0fea	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.0fec	48		               pha
.0fed	a9 ff		               lda  #<$0000+(8191)
.0fef	8d e8 13	               sta  loopcount
.0ff2	a9 1f		               lda  #>$0000+(8191)
.0ff4	8d e9 13	               sta  loopcount+1
.0ff7	68		               pla
.0ff8	a0 00		               ldy  #$00
.0ffa	a9 0f		next           lda  #$0f
.0ffc	91 fb		               sta  (zpage1),y
.0ffe	20 19 13	               jsr  inczpage1
.1001	20 c8 13	               jsr  loop
.1004	d0 f4		               bne  next
.1006	20 ff 11	               jsr  pop
.1009	60		               rts
.100a			setvicbmpbackcol
.100a	20 c4 11	               jsr  push
.100d	29 0f		               and  #$0f
.100f	8d 3d 10	               sta  vicbmpbackcol
.1012	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.1014	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.1016	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.1018	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.101a	48		               pha
.101b	a9 00		               lda  #<$0000+(1024)
.101d	8d e8 13	               sta  loopcount
.1020	a9 04		               lda  #>$0000+(1024)
.1022	8d e9 13	               sta  loopcount+1
.1025	68		               pla
.1026	a0 00		               ldy  #$00
.1028	b1 fb		next           lda  (zpage1),y
.102a	29 f0		               and  #$f0
.102c	0d 3d 10	               ora  vicbmpbackcol
.102f	91 fb		               sta  (zpage1),y
.1031	20 19 13	               jsr  inczpage1
.1034	20 c8 13	               jsr  loop
.1037	d0 ef		               bne  next
.1039	20 ff 11	               jsr  pop
.103c	60		               rts
>103d	00		vicbmpbackcol  .byte     $00
.103e			setvicbmpforecol
.103e	20 c4 11	               jsr  push
.1041	2a		               rol
.1042	2a		               rol
.1043	2a		               rol
.1044	2a		               rol
.1045	29 f0		               and  #$f0
.1047	8d 75 10	               sta  vicbmpforecol
.104a	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.104c	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.104e	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.1050	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.1052	48		               pha
.1053	a9 00		               lda  #<$0000+(1024)
.1055	8d e8 13	               sta  loopcount
.1058	a9 04		               lda  #>$0000+(1024)
.105a	8d e9 13	               sta  loopcount+1
.105d	68		               pla
.105e	a0 00		               ldy  #$00
.1060	b1 fb		next           lda  (zpage1),y
.1062	29 0f		               and  #$0f
.1064	0d 75 10	               ora  vicbmpforecol
.1067	91 fb		               sta  (zpage1),y
.1069	20 19 13	               jsr  inczpage1
.106c	20 c8 13	               jsr  loop
.106f	d0 ef		               bne  next
.1071	20 ff 11	               jsr  pop
.1074	60		               rts
>1075	00		vicbmpforecol  .byte     $00
.1076			bmphrcalccoords
.1076	20 c4 11	               jsr  push
.1079	18		               clc       ; On met Carry à 0
.107a	6a		               ror       ; le bit 0 de a dans carry  ?/2
.107b	8a		               txa       ; x dans a
.107c	4a		               lsr       ; ?/4
.107d	4a		               lsr       ; ?/8 a = (ax)/8
.107e	8d 8f 10	               sta  bmphrcol
.1081	98		               tya       ; Y dans a
.1082	4a		               lsr       ; ?/2
.1083	4a		               lsr       ; ?/4
.1084	4a		               lsr       ; ?/8 a=Y/8
.1085	8d 8e 10	               sta  bmphrrow
.1088	48		               pha
.1089	98		               tya
.108a	20 ff 11	               jsr  pop
.108d	60		               rts
.108e			vicbmpfill
>108e	00		bmphrrow       .byte     $00
>108f	00		bmphrcol       .byte     $00
>1090	00		bmphrmask      .byte     $00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.1091			scrmaninit
.1091	20 32 12	               jsr  pushreg        ; Sauvegarde tous les registres
.1094	20 85 0f	               jsr  screendis      ; Disable screen
.1097	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.1099	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.109c	a9 05		               lda  #vvert         ; vert pour la couleur
.109e	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.10a1	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.10a3	8d 86 02	               sta  bascol         ; texte.
.10a6	20 b1 10	               jsr  cls            ; Efface l'écran.
.10a9	20 92 0f	               jsr  screenena      ; enable screen
.10ac	20 61 12	               jsr  popreg         ; Récupère tous les registres.
.10af	60		               rts
>10b0	8e		characterset   .byte b_uppercase
.10b1			cls
.10b1	08		               php                 ; Sauvegarde les registres
.10b2	48		               pha                 ;   modifiés.
.10b3	a9 93		               lda  #$93           ; Affiche le code basic de
.10b5	20 d2 ff	               jsr  chrout         ;   d'effacement d'écran.
.10b8	68		               pla                 ; Récupère les registres
.10b9	28		               plp                 ;   modifiés.
.10ba	60		               rts
.10bb			putnch
.10bb	20 32 12	               jsr  pushreg        ; Sauvegarde tous les registres.
.10be	20 d2 ff	again          jsr  chrout         ; On affiche A.
.10c1	ca		               dex                 ; Un de moins à faire.
.10c2	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.10c4	20 61 12	out            jsr  popreg         ; Récupère tous les registres.
.10c7	60		               rts
.10c8			putch
.10c8	08		               php                 ; Sauvegarde le registre de status.
.10c9	20 d2 ff	               jsr  chrout         ; Affiche le caractère de Acc.
.10cc	28		               plp                 ; Récupère le registre de status.
.10cd	60		               rts
.10ce			puts
.10ce	20 c4 11	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.10d1	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.10d3	84 fc		               sty  zpage1+1       ;   dans ZP1.
.10d5	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.10d7	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.10d9	f0 09		               beq  exit           ; Si $00 on sort.
.10db	20 d2 ff	               jsr  chrout         ; Affiche le caractères.
.10de	20 19 13	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.10e1	4c d7 10	               jmp  next           ; Saute chercher le prochain carac.
.10e4	20 ff 11	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.10e7	60		               rts
.10e8			gotoxy
.10e8	08		               php                 ; Sauvegarde le registre de
.10e9	48		               pha                 ;   status et le registre a.
.10ea	18		               clc                 ; Carry = 1 pour que kplot
.10eb	8a		               txa                 ;   positionne le curseur.
.10ec	48		               pha                 ; On inverse X et Y pcq kplot
.10ed	98		               tya                 ;
.10ee	aa		               tax                 ;   prend X comme la ligne
.10ef	68		               pla                 ;
.10f0	a8		               tay                 ;   et Y comme la colonne.
.10f1	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.10f4	68		               pla                 ; Récupère le registre a et
.10f5	28		               plp                 ;   le registre de status.
.10f6	60		               rts
.10f7			cursor
=$0286			bascol    =    $0286               ; debugme
.10f7	20 32 12	               jsr  pushreg        ; Sauvegarde tous les registres.
.10fa	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.10fc	20 f0 ff	               jsr  kplot          ; On récupère la position du
.10ff	8c 21 11	               sty  cx             ;   curseur et on la sauvegarde
.1102	8e 22 11	               stx  cy             ;   dans les vars locales.
.1105	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.1108	8d 23 11	               sta  bcol           ; BASIC du texte.
.110b	4c 1d 11	               jmp  out            ; c'est fini on sort.
.110e	ae 22 11	restore        ldx  cy             ; Comme C=1, On charge x avec
.1111	ac 21 11	               ldy  cx             ;   la ligne, y ace  la col.
.1114	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.1117	ad 23 11	               lda  bcol           ; On replace la couleur par basic
.111a	8d 86 02	               sta  bascol         ;   sauvegardé.
.111d	20 61 12	out            jsr  popreg         ; Récupère tous les registres.
.1120	60		               rts
>1121	00		cx   .byte     $00
>1122	00		cy   .byte     $00
>1123	00		bcol .byte     $00
.1124			cursave
.1124	08		               php
.1125	38		               sec
.1126	20 f7 10	               jsr  cursor         ; Voir cette fonction plus haut.
.1129	28		               plp
.112a	60		               rts
.112b			curput
.112b	08		               php
.112c	18		               clc
.112d	20 f7 10	               jsr  cursor         ; Voir cette fonction plus haut.
.1130	28		               plp
.1131	60		               rts
.1132			putsxy
.1132	20 c4 11	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.1135	86 fb		               stx  zpage1         ; On place la position de la
.1137	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.1139	a0 00		               ldy  #$00           ; On charge l'index à 0.
.113b	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.113d	aa		               tax                 ;   dans X.
.113e	20 19 13	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1141	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.1143	a8		               tay                 ; dans Y.
.1144	20 e8 10	               jsr  gotoxy         ; on positionne le curseur.
.1147	20 19 13	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.114a	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.114c	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.114e	20 ce 10	               jsr  puts           ;   l'affiche.
.1151	20 ff 11	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.1154	60		               rts
>1155	00 00		straddr   .word     $00
>1157	00		px        .byte     $00
>1158	00		py        .byte     $00
>1159	00 00		zp1       .word     $00
.115b			putscxy
.115b	20 c4 11	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.115e	86 fb		               stx  zpage1         ; On place la position de la
.1160	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.1162	a0 00		               ldy  #$00           ; On charge l'index à 0.
.1164	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.1167	48		               pha                 ;   actuelle de basic.
.1168	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.116a	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.116d	20 19 13	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1170	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.1172	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.1174	20 32 11	               jsr  putsxy         ;   l'affiche.
.1177	68		               pla                 ; On replace la couleur basic
.1178	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.117b	20 ff 11	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.117e	60		               rts
.117f			putrahex
.117f	20 32 12	               jsr  pushreg        ; Sauvegarde tous les registres.
.1182	20 52 14	               jsr  atohex         ; Conversion de a chaîne hexa.
.1185	a2 ef		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.1187	a0 13		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.1189	20 ce 10	               jsr  puts           ; Affiche la chaîne.
.118c	20 61 12	               jsr  popreg         ; Récupère tous les registres.
.118f	60		               rts
.1190			kputrahexxy
.1190			bputrahexxy
.1190			putrahexxy
.1190	08		               php                 ; Sauvegarde le registre de
.1191	48		               pha                 ;   status et le registre a.
.1192	20 52 14	               jsr  atohex         ; Convertion de a en hexadécimal.
.1195	a2 ec		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.1197	a0 13		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.1199	20 32 11	               jsr  putsxy         ; Positionne et affiche la chaîne.
.119c	68		               pla                 ; Récupère le registre a et
.119d	28		               plp                 ;   le registre de status.
.119e	60		               rts
.119f			putrahexcxy
.119f	20 32 12	               jsr  pushreg        ; Sauvegarde tous les registres.
.11a2	20 52 14	               jsr  atohex         ; Convertion de a en hexadécimal.
.11a5	a2 ec		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.11a7	a0 13		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.11a9	20 32 11	               jsr  putsxy         ; Colore, positionne et affiche la
.11ac	20 61 12	               jsr  popreg         ; Récupère tous les registres.
.11af	60		               rts
.11b0			setinverse
.11b0	48		               pha
.11b1	a9 12		               lda  #$12
.11b3	20 d2 ff	               jsr  chrout
.11b6	68		               pla
.11b7	60		               rts
.11b8			clrinverse
.11b8	48		               pha
.11b9	a9 92		               lda  #$92
.11bb	20 d2 ff	               jsr  chrout
.11be	68		               pla
.11bf	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>11c0	00		rp        .byte     0
>11c1	00		ra        .byte     0
>11c2	00 00		pc        .word     0
.11c4			pushall
.11c4			push
.11c4	08		          php            ; stack : flg, pcl, pch
.11c5	78		          sei
.11c6	8d c1 11	          sta  ra        ; save a
.11c9	68		          pla            ; stack : pcl, pch
.11ca	8d c0 11	          sta  rp        ; save rp
.11cd	68		          pla            ; stack : pch
.11ce	8d c2 11	          sta  pc        ; save pcl
.11d1	68		          pla            ; stack : -
.11d2	8d c3 11	          sta  pc+1      ; save pch
.11d5	a5 fb		          lda  zpage1    ; get zpage1 low byte
.11d7	48		          pha            ; stack : zp1l
.11d8	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.11da	48		          pha            ; stack : zp1h, zp1l
.11db	a5 fd		          lda  zpage2    ; get zpage2 low byte
.11dd	48		          pha            ; stack : zp2l, zp1h, zp1l
.11de	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.11e0	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.11e1	ad c0 11	          lda  rp        ; get rp
.11e4	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.11e5	ad c1 11	          lda  ra        ; get a
.11e8	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.11e9	8a		          txa            ; get x
.11ea	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.11eb	98		          tya            ; get y
.11ec	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.11ed	ad c3 11	          lda  pc+1      ; get pch
.11f0	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.11f1	ad c2 11	          lda  pc        ; get pcl
.11f4	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.11f5	ad c0 11	          lda  rp        ; get rp
.11f8	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.11f9	ad c1 11	          lda  ra        ; get a
.11fc	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.11fd	58		          cli
.11fe	60		          rts
.11ff			pullall
.11ff			pull
.11ff			popall
.11ff			pop
.11ff	78		          sei
.1200	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1201	8d c2 11	          sta  pc        ; save pcl
.1204	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1205	8d c3 11	          sta  pc+1      ; save pch
.1208	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1209	a8		          tay            ; set y
.120a	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.120b	aa		          tax            ; set x
.120c	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.120d	8d c1 11	          sta  ra        ; save a
.1210	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1211	8d c0 11	          sta  rp        ; save rp
.1214	68		          pla            ; stack : zp2l, zp1h, zp1l
.1215	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1217	68		          pla            ; stack : zp1h, zp1l
.1218	85 fd		          sta  zpage2    ; get zpage2 High byte
.121a	68		          pla            ; stack : zp1l
.121b	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.121d	68		          pla            ; stack :
.121e	85 fb		          sta  zpage1    ; get zpage1 High byte
.1220	ad c3 11	          lda  pc+1      ; get pch
.1223	48		          pha            ; stack : pch
.1224	ad c2 11	          lda  pc
.1227	48		          pha            ; stack : pcl, pch
.1228	ad c0 11	          lda  rp        ; get rp
.122b	48		          pha            ; stack : rp, pcl, pch
.122c	ad c1 11	          lda  ra        ; set ra
.122f	58		          cli
.1230	28		          plp            ; stack : pcl, pch
.1231	60		          rts
.1232			pushreg
.1232	08		          php            ; stack : flg, pcl, pch
.1233	78		          sei
.1234	8d c1 11	          sta  ra        ; save a
.1237	68		          pla            ; stack : pcl, pch
.1238	8d c0 11	          sta  rp        ; save rp
.123b	68		          pla            ; stack : pch
.123c	8d c2 11	          sta  pc        ; save pcl
.123f	68		          pla            ; stack : -
.1240	8d c3 11	          sta  pc+1      ; save pch
.1243	ad c0 11	          lda  rp        ; get rp
.1246	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1247	ad c1 11	          lda  ra        ; get a
.124a	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.124b	8a		          txa            ; get x
.124c	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.124d	98		          tya            ; get y
.124e	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.124f	ad c3 11	          lda  pc+1      ; get pch
.1252	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1253	ad c2 11	          lda  pc        ; get pcl
.1256	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1257	ad c0 11	          lda  rp        ; get rp
.125a	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.125b	ad c1 11	          lda  ra        ; get a
.125e	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.125f	58		          cli
.1260	60		          rts
.1261			pullreg
.1261			popreg
.1261	78		          sei
.1262	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1263	8d c2 11	          sta  pc        ; save pcl
.1266	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1267	8d c3 11	          sta  pc+1      ; save pch
.126a	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.126b	a8		          tay            ; set y
.126c	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.126d	aa		          tax            ; set x
.126e	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.126f	8d c1 11	          sta  ra        ; save a
.1272	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1273	8d c0 11	          sta  rp        ; save rp
.1276	ad c3 11	          lda  pc+1      ; get pch
.1279	48		          pha            ; stack : pch
.127a	ad c2 11	          lda  pc
.127d	48		          pha            ; stack : pcl, pch
.127e	ad c0 11	          lda  rp        ; get rp
.1281	48		          pha            ; stack : rp, pcl, pch
.1282	ad c1 11	          lda  ra        ; set ra
.1285	58		          cli
.1286	28		          plp            ; stack : pcl, pch
.1287	60		          rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.1288			blkfill
.1288	20 c4 11	bf0            jsr  push
.128b	20 53 13	               jsr  savezp1
.128e	84 fc		               sty  zpage1+1
.1290	a0 00		               ldy  #$00
.1292	84 fb		               sty  zpage1
.1294	91 fb		bf1            sta  (zpage1),y
.1296	c8		               iny
.1297	d0 fb		               bne  bf1
.1299	20 62 13	               jsr  restzp1
.129c	20 ff 11	               jsr  pop
.129f	60		               rts
.12a0			memfill
.12a0	20 c4 11	               jsr  push
.12a3	20 88 12	mf1            jsr  blkfill
.12a6	c8		               iny
.12a7	ca		               dex
.12a8	d0 f9		               bne  mf1
.12aa	20 ff 11	               jsr  pop
.12ad	60		               rts
.12ae			memmove
.12ae	20 c4 11	               jsr  push
.12b1	ba		               tsx            ; On se crée un pointeur ...
.12b2	8a		               txa
.12b3	18		               clc
.12b4	69 0b		               adc  #11
.12b6	a8		               tay
.12b7	a2 06		               ldx  #$06
.12b9	b9 00 01	nextbyte       lda  $0100,y
.12bc	99 08 13	               sta  words,y
.12bf	c8		               iny
.12c0	ca		               dex
.12c1	d0 f6		               bne  nextbyte
.12c3	ad 08 13	               lda  s
.12c6	8d df 12	               sta  source+1
.12c9	ad 09 13	               lda  s+1
.12cc	8d e0 12	               sta  source+2
.12cf	ad 0a 13	               lda  d
.12d2	8d dc 12	               sta  destin+1
.12d5	ad 0b 13	               lda  d+1
.12d8	8d dd 12	               sta  destin+2
.12db	ad ff ff	destin         lda  $ffff
.12de	8d ff ff	source         sta  $ffff
.12e1	ee dc 12	               inc  destin+1
.12e4	d0 03		               bne  src
.12e6	ee dd 12	               inc  destin+2
.12e9	ee df 12	src            inc  source+1
.12ec	d0 03		               bne  cnt
.12ee	ee e0 12	               inc  source+2
.12f1	ad 0c 13	cnt            lda  compte
.12f4	d0 08		               bne  decit
.12f6	ad 0d 13	               lda  compte+1
.12f9	f0 09		               beq  fini
.12fb	ce 0d 13	               dec  compte+1
.12fe	ce 0c 13	decit          dec  compte
.1301	4c db 12	               jmp  destin
.1304	20 ff 11	fini           jsr  pop
.1307	60		               rts
.1308			words
>1308	00 00		s         .word     $0000
>130a	00 00		d         .word     $0000
>130c	00 00		compte    .word     $0000
.130e			decword
.130e	20 c4 11	               jsr  push
.1311	86 fd		               stx  zpage2
.1313	84 fe		               sty  zpage2+1
.1315	20 ff 11	               jsr  pop
.1318	60		               rts
.1319			inczpage1
.1319			inczp1
.1319	08		               php
.131a	48		               pha
.131b	e6 fb		               inc  zpage1
.131d	a5 fb		               lda  zpage1
.131f	d0 02		               bne  nopage
.1321	e6 fc		               inc  zpage1+1
.1323	68		nopage         pla
.1324	28		               plp
.1325	60		               rts
.1326			deczpage1
.1326			deczp1
.1326	08		               php
.1327	48		               pha
.1328	c6 fb		               dec  zpage1
.132a	a5 fb		               lda  zpage1
.132c	c9 ff		               cmp  #$ff
.132e	f0 02		               beq  report
.1330	d0 02		               bne  nopage
.1332	c6 fc		report         dec  zpage1+1
.1334	68		nopage         pla
.1335	28		               plp
.1336	60		               rts
.1337			inczpage2
.1337			inczp2
.1337	08		               php
.1338	48		               pha
.1339	e6 fd		               inc  zpage2
.133b	a5 fd		               lda  zpage2
.133d	d0 02		               bne  nopage
.133f	e6 fe		               inc  zpage2+1
.1341	68		nopage         pla
.1342	28		               plp
.1343	60		               rts
.1344			deczpage2
.1344			deczp2
.1344	08		               php
.1345	c6 fd		               dec  zpage2
.1347	a5 fd		               lda  zpage2
.1349	c9 ff		               cmp  #$ff
.134b	f0 02		               beq  report
.134d	d0 02		               bne  nopage
.134f	c6 fe		report         dec  zpage2+1
.1351	28		nopage         plp
.1352	60		               rts
.1353			savezp1
.1353	08		               php
.1354	48		               pha
.1355	a5 fb		               lda  zpage1
.1357	8d e4 13	               sta  zp1
.135a	a5 fc		               lda  zpage1+1
.135c	8d e5 13	               sta  zp1+1
.135f	68		               pla
.1360	28		               plp
.1361	60		               rts
.1362			restzp1
.1362	08		               php
.1363	48		               pha
.1364	ad e4 13	               lda  zp1
.1367	85 fb		               sta  zpage1
.1369	ad e5 13	               lda  zp1+1
.136c	85 fc		               sta  zpage1+1
.136e	68		               pla
.136f	28		               plp
.1370	60		               rts
.1371			savezp2
.1371	08		               php
.1372	48		               pha
.1373	a5 fd		               lda  zpage2
.1375	8d e6 13	               sta  zp2
.1378	a5 fe		               lda  zpage2+1
.137a	8d e7 13	               sta  zp2+1
.137d	68		               pla
.137e	28		               plp
.137f	60		               rts
.1380			restzp2
.1380	08		               php
.1381	48		               pha
.1382	ad e6 13	               lda  zp2
.1385	85 fd		               sta  zpage2
.1387	ad e7 13	               lda  zp2+1
.138a	85 fe		               sta  zpage2+1
.138c	68		               pla
.138d	28		               plp
.138e	60		               rts
.138f			xy2addr
.138f	08		               php
.1390	48		               pha
.1391	8a		               txa
.1392	48		               pha
.1393	98		               tya
.1394	48		               pha
.1395	ad df 13	               lda  addr1+1
.1398	8d e1 13	               sta  addr2+1
.139b	ad de 13	               lda  addr1
.139e	8d e0 13	               sta  addr2
.13a1	c0 00		               cpy  #$00
.13a3	f0 0f		               beq  addx
.13a5	18		moreline       clc
.13a6	6d dd 13	               adc  ymult
.13a9	90 03		               bcc  norepy
.13ab	ee e1 13	               inc  addr2+1
.13ae	8d e0 13	norepy         sta  addr2
.13b1	88		               dey
.13b2	d0 f1		               bne  moreline
.13b4	8a		addx           txa
.13b5	18		               clc
.13b6	6d e0 13	               adc  addr2
.13b9	90 03		               bcc  thatsit
.13bb	ee e1 13	               inc  addr2+1
.13be	8d e0 13	thatsit        sta  addr2
.13c1	68		               pla
.13c2	a8		               tay
.13c3	68		               pla
.13c4	aa		               tax
.13c5	68		               pla
.13c6	28		               plp
.13c7	60		               rts
.13c8			loop
.13c8	ce e8 13	               dec  loopcount
.13cb	d0 03		               bne  norep
.13cd	ce e9 13	               dec  loopcount+1
.13d0	ad e8 13	norep          lda  loopcount
.13d3	c9 00		               cmp  #$00
.13d5	d0 05		               bne  out
.13d7	4d e9 13	               eor  loopcount+1
.13da	c9 ff		               cmp  #$ff
.13dc	60		out            rts
>13dd	28		ymult          .byte     40
>13de	00 00		addr1          .word     $0000
>13e0	00 00		addr2          .word     $0000
>13e2	00 00		bytecnt        .word     $0000
>13e4	00 00		zp1            .word     $0000
>13e6	00 00		zp2            .word     $0000
>13e8	00 00		loopcount      .word     $0000

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>13ea	01		a2hexcol       .byte     1              ; pour aputscxy
>13eb	00		a2hexbkcol     .byte     %00000000
.13ec			a2hexpos
>13ec	00		a2hexpx        .byte     0              ; pour aputsxy
>13ed	00		a2hexpy        .byte     0
>13ee	24		a2hexprefix    .byte     "$"            ; pour aputs
>13ef	00 00		a2hexstr       .word     $00
>13f1	00 00		               .word     $00
>13f3	00		               .byte     0              ; 0 end string
>13f4	01		abincol        .byte     1
>13f5	00		abinbkcol      .byte     %00000000
>13f6	30 30 30 30	abin           .null     "00000000"
>13fa	30 30 30 30 00
>13ff	20 20 20 00	adec           .null     "   "
.1403			putahexfmtxy
.1403	20 c4 11	               jsr  push
.1406	20 52 14	               jsr  atohex
.1409	ae ec 13	               ldx  a2hexpx
.140c	ac ed 13	               ldy  a2hexpy
.140f	20 e8 10	               jsr  gotoxy
.1412	a2 ee		               ldx  #<a2hexprefix
.1414	a0 13		               ldy  #>a2hexprefix
.1416	20 ce 10	               jsr  puts
.1419	20 ff 11	               jsr  pop
.141c	60		               rts
.141d			putahexfmt
.141d	20 c4 11	               jsr  push
.1420	20 52 14	               jsr  atohex
.1423	a2 ee		               ldx  #<a2hexprefix
.1425	a0 13		               ldy  #>a2hexprefix
.1427	20 ce 10	               jsr  puts
.142a	20 ff 11	               jsr  pop
.142d	60		               rts
.142e			putahex
.142e	20 c4 11	               jsr  push
.1431	20 52 14	               jsr  atohex
.1434	a2 ef		               ldx  #<a2hexstr
.1436	a0 13		               ldy  #>a2hexstr
.1438	20 ce 10	               jsr  puts
.143b	20 ff 11	               jsr  pop
.143e	60		               rts
.143f			nibtohex
.143f	08		               php
.1440	29 0f		               and  #$0f
.1442	f8		               sed
.1443	18		               clc
.1444	69 90		               adc  #$90
.1446	69 40		               adc  #$40
.1448	d8		               cld
.1449	28		               plp
.144a	60		               rts
.144b			lsra4bits
.144b	08		               php
.144c	4a		               lsr
.144d	4a		               lsr
.144e	4a		               lsr
.144f	4a		               lsr
.1450	28		               plp
.1451	60		               rts
.1452			atohex
.1452	08		               php
.1453	48		               pha
.1454	48		               pha
.1455	20 4b 14	               jsr  lsra4bits
.1458	20 3f 14	               jsr  nibtohex
.145b	8d ef 13	               sta  a2hexstr
.145e	68		               pla
.145f	20 3f 14	               jsr  nibtohex
.1462	8d f0 13	               sta  a2hexstr+1
.1465	a9 00		               lda  #$00                ; set end of string
.1467	8d f1 13	               sta  a2hexstr+2
.146a	68		               pla
.146b	28		               plp
.146c	60		               rts
.146d			xy2hex
.146d	20 c4 11	               jsr  push
.1470	20 52 14	               jsr  atohex
.1473	8a		               txa
.1474	48		               pha
.1475	20 4b 14	               jsr  lsra4bits
.1478	20 3f 14	               jsr  nibtohex
.147b	8d ef 13	               sta  a2hexstr
.147e	68		               pla
.147f	20 3f 14	               jsr  nibtohex
.1482	8d f0 13	               sta  a2hexstr+1
.1485	98		               tya
.1486	48		               pha
.1487	20 4b 14	               jsr  lsra4bits
.148a	20 3f 14	               jsr  nibtohex
.148d	8d f1 13	               sta  a2hexstr+2
.1490	68		               pla
.1491	20 3f 14	               jsr  nibtohex
.1494	8d f2 13	               sta  a2hexstr+3
.1497	a9 00		               lda  #$00                ; 0 ended string
.1499	8d f3 13	               sta  a2hexstr+4
.149c	20 ff 11	               jsr  pop
.149f			atobin
.149f	20 c4 11	               jsr  push
.14a2	a2 08		               ldx  #8
.14a4	a0 00		               ldy  #0
.14a6	18		               clc
.14a7	2a		nextbit        rol
.14a8	48		               pha
.14a9	69 00		               adc  #$00
.14ab	29 01		               and  #$01
.14ad	20 3f 14	               jsr  nibtohex
.14b0	99 f6 13	               sta  abin,y
.14b3	68		               pla
.14b4	c8		               iny
.14b5	ca		               dex
.14b6	d0 ef		               bne  nextbit
.14b8	a9 00		               lda  #0
.14ba	99 f6 13	               sta  abin,y
.14bd	20 ff 11	               jsr  pull
.14c0	60		               rts
.14c1			abinsetmccol
.14c1	20 32 12	               jsr  pushreg
.14c4	20 61 12	               jsr  popreg
.14c7	60		               rts
.14c8			putabin
.14c8	20 9f 14	               jsr     atobin
.14cb	20 c4 11	               jsr     push
.14ce	a2 f6		               ldx     #<abin
.14d0	a0 13		               ldy     #>abin
.14d2	20 ce 10	               jsr     puts
.14d5	20 ff 11	               jsr     pop
.14d8	60		               rts
.14d9			printabin
.14d9	20 c4 11	               jsr     push
.14dc	a2 f6		               ldx     #<abin
.14de	a0 13		               ldy     #>abin
.14e0	20 ce 10	               jsr     puts
.14e3	20 ff 11	               jsr     pop
.14e6	60		               rts
.14e7			putabinfmt
.14e7	08		               php
.14e8	48		               pha
.14e9	a9 25		               lda     #"%"
.14eb	20 c8 10	               jsr     putch
.14ee	68		               pla
.14ef	20 c8 14	               jsr     putabin
.14f2	28		               plp
.14f3	60		               rts
.14f4			putabinxy
.14f4	20 e8 10	               jsr     gotoxy
.14f7	20 c8 14	               jsr     putabin
.14fa	60		               rts
.14fb			putabinfmtxy
.14fb	20 e8 10	               jsr     gotoxy
.14fe	20 e7 14	               jsr     putabinfmt
.1501	60		               rts
.1502			atodec
.1502	20 c4 11	               jsr  push
.1505	f8		               sed            ; On se place en mode décimal.
.1506	aa		               tax            ; On déplace a dans x.
.1507	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.1509	a9 00		               lda  #$00      ; 0 dans A.
.150b	18		nextbit        clc            ; Bit carry a 0.
.150c	69 01		               adc  #$01      ; Ajoute 1 a A.
.150e	90 01		               bcc  decx      ; Pas de carry, pas de report.
.1510	c8		               iny            ; On incrémente Y
.1511	ca		decx           dex            ; X=X-1
.1512	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.1514	48		               pha            ; A sur le stack.
.1515	98		               tya            ; Y dans A (MSB)
.1516	20 3f 14	               jsr  nibtohex  ; a hex petsci ...
.1519	8d ff 13	               sta  adec      ; ... dans tampon.
.151c	68		               pla            ; Récupere A
.151d	48		               pha            ;
.151e	20 3f 14	               jsr  nibtohex
.1521	8d 01 14	               sta  adec+2
.1524	68		               pla
.1525	6a		               ror
.1526	6a		               ror
.1527	6a		               ror
.1528	6a		               ror
.1529	20 3f 14	               jsr  nibtohex
.152c	8d 00 14	               sta  adec+1
.152f	d8		               cld            ; On revient en mode binaire.
.1530	20 ff 11	               jsr  pull
.1533	60		               rts
.1534			putadec
.1534	20 c4 11	               jsr  push
.1537	20 02 15	               jsr  atodec
.153a	a2 ff		               ldx  #<adec
.153c	a0 14		               ldy  #>adec+1
.153e	20 ce 10	               jsr  puts
.1541	20 ff 11	               jsr  pop
.1544	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.1545			waitstop
.1545	20 c4 11	               jsr  push
.1548	20 ed f6	wait           jsr  k_stop
.154b	d0 fb		               bne  wait
.154d	20 ff 11	               jsr  pop
.1550	60		               rts
.1551			anykey
.1551	08		               php
.1552	48		               pha
.1553	a5 cb		nokey          lda 203
.1555	c9 40		               cmp #64
.1557	f0 fa		               beq nokey
.1559	20 63 15	               jsr releasekey
.155c	a9 00		               lda #0
.155e	85 c6		               sta 198
.1560	68		               pla
.1561	28		               plp
.1562	60		               rts
.1563			releasekey
.1563	08		               php
.1564	48		               pha
.1565	a5 cb		keypressed     lda 203
.1567	c9 40		               cmp #64
.1569	d0 fa		               bne keypressed
.156b	68		               pla
.156c	28		               plp
.156d	60		               rts
.156e			getkey
.156e	20 e4 ff	gkagain        jsr  getin
.1571	c9 00		               cmp  #0
.1573	f0 f9		               beq  gkagain
.1575	60		               rts
.1576			kbflushbuff
.1576	08		               php
.1577	48		               pha
.1578	20 e4 ff	again          jsr  getin
.157b	c9 00		               cmp  #0
.157d	d0 f9		               bne  again
.157f	68		               pla
.1580	28		               plp
.1581	60		               rts
.1582			waitkey
.1582	20 c4 11	               jsr  push
.1585	8d d3 15	               sta  thekey
.1588	20 e4 ff	nope           jsr  getin
.158b	20 d2 ff	               jsr  chrout
.158e	cd d3 15	               cmp  thekey
.1591	d0 f5		               bne  nope
.1593	20 d2 ff	               jsr  chrout
.1596	20 ff 11	               jsr  pop
.1599	60		               rts
.159a			waitspace
.159a	20 c4 11	               jsr  push
.159d	a9 7f		wait           lda  #$7f  ;%01111111
.159f	8d 00 dc	               sta  $dc00
.15a2	ad 01 dc	               lda  $dc01
.15a5	29 10		               and  #$10  ;mask %00010000
.15a7	d0 f4		               bne  wait
.15a9	20 ff 11	               jsr  pop
.15ac			waitsstop
.15ac	20 c4 11	               jsr  push
.15af	20 ed f6	wait           jsr  k_stop  ;%01111111
.15b2	d0 fb		               bne  wait
.15b4	20 ff 11	               jsr  pop
.15b7			waitreturn
.15b7	20 c4 11	               jsr  push
.15ba	ad d4 15	               lda  thecount
.15bd	8d 00 04	               sta  scrnram
.15c0	a9 02		               lda  #$02
.15c2	8d 00 d8	               sta  colorram
.15c5	20 e4 ff	nope           jsr  getin
.15c8	c9 0d		nohex          cmp  #$0d
.15ca	d0 f9		               bne  nope
.15cc	ee d4 15	               inc  thecount
.15cf	20 ff 11	               jsr  pop
.15d2	60		               rts
>15d3	00		thekey         .byte   0
>15d4	01		thecount       .byte   $01
>15d5	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>15d9	00 00 00 00 00 00 00 00 00 0d 00 00
>15e5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>15e9	00 00 00 00 00 00 00 00 00 00 00 00
>15f5	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>15f9	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1605	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1609	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1615	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1619	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1625	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1629	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1635	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1639	00 00 00 00 00 00 00 00 00 00 00 00
>1645	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1649	00 00 00 00 00 00 00 00 00 00 00 00
>1655	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1659	00 00 00 00 00 00 00 00 00 00 00 00
>1665	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1669	00 00 00 00 00 00 00 00 00 00 00 00
>1675	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1679	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1685	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1689	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1695	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1699	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>16a5	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>16a9	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>16b5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>16b9	00 00 00 00 00 00 00 00 00 00 00 00
>16c5	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>16c9	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-showregs.asm

.16d5			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.16d5	08		               php                 ; Sauvegarde le registre de status sur stack.
.16d6	8d d0 18	               sta  rega           ; Sauvegarde Acc en mémoire.
.16d9	68		               pla                 ; Récupère le registre de status du stack.
.16da	8d d3 18	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.16dd	8e d1 18	               stx  regx           ; Sauvegarde le registre X en mémoire.
.16e0	8c d2 18	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.16e3	ba		               tsx                 ; Copie le registre S dans X.
.16e4	8e d4 18	               stx  regs           ; Sauvegarde le registre S en mémoire.
.16e7	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.16e8	8d d6 18	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.16eb	8d d8 18	               sta  regpcl2        ; ... une seconde fois.
.16ee	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.16ef	8d d5 18	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.16f2	8d d7 18	               sta  regpch2        ; ... une seconde fois.
.16f5	ad d0 18	               lda  rega           ; On commence par le registre Acc.
.16f8	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.16f9	20 3f 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.16fc	8d 6d 18	               sta  vala+1         ; ... et le place dans la chaine.
.16ff	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1700	20 4b 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1703	20 3f 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1706	8d 6c 18	               sta  vala           ; ... et le place dans la chaine.
.1709	ad d2 18	               lda  regy           ; Ensuite, le registre Y.
.170c	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.170d	20 3f 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1710	8d 84 18	               sta  valy+1         ; ... et le place dans la chaine.
.1713	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1714	20 4b 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1717	20 3f 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.171a	8d 83 18	               sta  valy           ; ... et le place dans la chaine.
.171d	ad d1 18	               lda  regx           ; Ensuite, le registre X.
.1720	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1721	20 3f 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1724	8d 78 18	               sta  valx+1         ; ... et le place dans la chaine.
.1727	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1728	20 4b 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.172b	20 3f 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.172e	8d 77 18	               sta  valx           ; ... et le place dans la chaine.
.1731	ad d3 18	               lda  regp           ; Ensuite, le registre de status.
.1734	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1735	20 3f 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1738	8d 8f 18	               sta  valp+1         ; ... et le place dans la chaine.
.173b	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.173c	20 4b 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.173f	20 3f 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1742	8d 8e 18	               sta  valp           ; ... et le place dans la chaine.
.1745	ad d4 18	               lda  regs           ; Ensuite, le pointeur de stack.
.1748	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1749	20 3f 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.174c	8d 9a 18	               sta  vals+1         ; ... et le place dans la chaine.
.174f	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1750	20 4b 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1753	20 3f 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1756	8d 99 18	               sta  vals           ; ... et le place dans la chaine.
.1759	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.175a	ad d8 18	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.175d	69 00		               adc  #$00           ; On y ajoute 1.
.175f	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.1761	ee d7 18	               inc  regpch2        ; ... en incrémentant le MSB.
.1764	8d d8 18	noreport       sta  regpcl2        ; On le sauvegarde.
.1767	ad d8 18	               lda  regpcl2        ; On récupère la partie basse du compteur.
.176a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.176b	20 3f 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.176e	8d aa 18	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.1771	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1772	20 4b 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1775	20 3f 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1778	8d a9 18	               sta  valpcl         ; ... et lace le code à la position "--X-".
.177b	ad d7 18	               lda regpch2         ; On récupère la partie haute du compteur.
.177e	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.177f	20 3f 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1782	8d a8 18	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.1785	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1786	20 4b 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1789	20 3f 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.178c	8d a7 18	               sta  valpch         ; ... et lace le code à la position "X---".
.178f	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.1791	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1792	20 3f 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1795	8d bb 18	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.1798	68		               pla
.1799	20 4b 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.179c	20 3f 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.179f	8d ba 18	               sta  valz1l         ; ... et lace le code à la position "--X-".
.17a2	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.17a4	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.17a5	20 3f 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.17a8	8d b9 18	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.17ab	68		               pla
.17ac	20 4b 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.17af	20 3f 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.17b2	8d b8 18	               sta  valz1h         ; ... et lace le code à la position "X---".
.17b5	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.17b7	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.17b8	20 3f 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.17bb	8d cc 18	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.17be	68		               pla
.17bf	20 4b 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.17c2	20 3f 14	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.17c5	8d cb 18	               sta  valz2l         ; ... et lace le code à la position "--X-".
.17c8	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.17ca	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.17cb	20 3f 14	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.17ce	8d ca 18	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.17d1	68		               pla
.17d2	20 4b 14	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.17d5	20 3f 14	               jsr  nibtohex
.17d8	8d c9 18	               sta  valz2h         ; ... et lace le code à la position "X---".
.17db	20 b0 11	               jsr  setinverse     ; On se place en mode inverse vidéo.
.17de	20 32 12	               jsr  pushreg
.17e1	a2 64		               ldx  #<srega
.17e3	a0 18		               ldy  #>srega
.17e5	20 5b 11	               jsr  putscxy
.17e8	20 61 12	               jsr  popreg
.17eb	20 32 12	               jsr  pushreg
.17ee	a2 70		               ldx  #<sregx
.17f0	a0 18		               ldy  #>sregx
.17f2	20 5b 11	               jsr  putscxy
.17f5	20 61 12	               jsr  popreg
.17f8	20 32 12	               jsr  pushreg
.17fb	a2 7b		               ldx  #<sregy
.17fd	a0 18		               ldy  #>sregy
.17ff	20 5b 11	               jsr  putscxy
.1802	20 61 12	               jsr  popreg
.1805	20 32 12	               jsr  pushreg
.1808	a2 87		               ldx  #<sregp
.180a	a0 18		               ldy  #>sregp
.180c	20 5b 11	               jsr  putscxy
.180f	20 61 12	               jsr  popreg
.1812	20 32 12	               jsr  pushreg
.1815	a2 92		               ldx  #<sregs
.1817	a0 18		               ldy  #>sregs
.1819	20 5b 11	               jsr  putscxy
.181c	20 61 12	               jsr  popreg
.181f	20 32 12	               jsr  pushreg
.1822	a2 9e		               ldx  #<sregpc
.1824	a0 18		               ldy  #>sregpc
.1826	20 5b 11	               jsr  putscxy
.1829	20 61 12	               jsr  popreg
.182c	20 32 12	               jsr  pushreg
.182f	a2 ae		               ldx  #<sregz1
.1831	a0 18		               ldy  #>sregz1
.1833	20 5b 11	               jsr  putscxy
.1836	20 61 12	               jsr  popreg
.1839	20 32 12	               jsr  pushreg
.183c	a2 bf		               ldx  #<sregz2
.183e	a0 18		               ldy  #>sregz2
.1840	20 5b 11	               jsr  putscxy
.1843	20 61 12	               jsr  popreg
.1846	20 b8 11	               jsr  clrinverse     ; On quitte le mode inverse vidéo.
.1849	ad d5 18	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.184c	48		               pha                 ; ... à la bonne position sur la pile.
.184d	ad d6 18	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.1850	48		               pha                 ; ... à la bonne position sur la pile.
.1851	ae d4 18	               ldx  regs           ; On replace tous les registre à leurs ...
.1854	9a		               txs                 ; ...
.1855	ac d2 18	               ldy  regy           ; ...
.1858	ae d1 18	               ldx  regx           ; ...
.185b	ad d3 18	               lda  regp           ; ...
.185e	48		               pha                 ; ...
.185f	ad d0 18	               lda  rega           ; ...
.1862	28		               plp                 ; ... valeurs initiales
.1863	60		               rts
>1864	07 01 17	srega   .byte   cyellow,coln+1,line
>1867	20 20 41 3a	        .text   '  a:$' ;4,24
>186b	24
>186c	00 00 20 00	vala    .byte   0,0,32,0
>1870	03 09 17	sregx   .byte   ccyan,coln+9,line
>1873	20 58 3a 24	        .text   ' x:$' ;4,24
>1877	00 00 20 00	valx    .byte   0,0,32,0
>187b	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>187e	20 59 3a 20	        .text   ' y: $' ;4,24
>1882	24
>1883	00 00 20 00	valy    .byte   0,0,32,0
>1887	08 18 17	sregp   .byte   corange,coln+24,line
>188a	20 50 3a 24	        .text   ' p:$' ;4,24
>188e	00 00 20 00	valp    .byte   0,0,32,0
>1892	0a 1f 17	sregs   .byte   clightred,coln+31,line
>1895	20 53 3a 24	        .text   ' s:$' ;4,24
>1899	00 00 20 20	vals    .byte   0,0,32,32,0
>189d	00
>189e	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>18a2	20 50 43 3a	        .text   ' pc:$' ;4,24
>18a6	24
>18a7	00 00		valpch  .byte   0,0
>18a9	00 00 20 20	valpcl  .byte   0,0,32,32,0
>18ad	00
>18ae	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>18b2	20 5a 50 31	        .text   ' zp1:$' ;4,24
>18b6	3a 24
>18b8	00 00		valz1h  .byte   0,0
>18ba	00 00 20 20	valz1l  .byte   0,0,32,32,0
>18be	00
>18bf	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>18c3	20 5a 50 32	        .text   ' zp2:$' ;4,24
>18c7	3a 24
>18c9	00 00		valz2h  .byte   0,0
>18cb	00 00 20 20	valz2l  .byte   0,0,32,32,0
>18cf	00
>18d0	00		rega    .byte   0
>18d1	00		regx    .byte   0
>18d2	00		regy    .byte   0
>18d3	00		regp    .byte   0
>18d4	00		regs    .byte   0
>18d5	00		regpch  .byte   0
>18d6	00		regpcl  .byte   0
>18d7	00		regpch2 .byte   0
>18d8	00		regpcl2 .byte   0
>18d9	00		vzp1h   .byte   0
>18da	00		vzp1l   .byte   0
>18db	00		vzp2h   .byte   0
>18dc	00		vzp2l   .byte   0

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-drawbox.asm

.18dd			db_tline
.18dd	08		            php
.18de	48		            pha
.18df	a9 b0		            lda #tleft
.18e1	8d a1 19	            sta db_left
.18e4	a9 c0		            lda #hline
.18e6	8d a3 19	            sta db_mid
.18e9	a9 ae		            lda #tright
.18eb	8d a2 19	            sta db_right
.18ee	28		            plp
.18ef	68		            pla
.18f0	20 39 19	            jsr db_drawline
.18f3	60		            rts
.18f4			db_bline
.18f4	08		            php
.18f5	48		            pha
.18f6	a9 ad		            lda #bleft
.18f8	8d a1 19	            sta db_left
.18fb	a9 c0		            lda #hline
.18fd	8d a3 19	            sta db_mid
.1900	a9 bd		            lda #bright
.1902	8d a2 19	            sta db_right
.1905	28		            plp
.1906	68		            pla
.1907	20 39 19	            jsr db_drawline
.190a	60		            rts
.190b			db_eline
.190b	08		            php
.190c	48		            pha
.190d	a9 dd		            lda #vline
.190f	8d a1 19	            sta db_left
.1912	a9 20		            lda #$20
.1914	8d a3 19	            sta db_mid
.1917	a9 dd		            lda #vline
.1919	8d a2 19	            sta db_right
.191c	28		            plp
.191d	68		            pla
.191e	20 39 19	            jsr db_drawline
.1921	60		            rts
.1922			db_mline
.1922	08		            php
.1923	48		            pha
.1924	a9 ab		            lda #mleft
.1926	8d a1 19	            sta db_left
.1929	a9 c0		            lda #hline
.192b	8d a3 19	            sta db_mid
.192e	a9 b3		            lda #mright
.1930	8d a2 19	            sta db_right
.1933	28		            plp
.1934	68		            pla
.1935	20 39 19	            jsr db_drawline
.1938	60		            rts
.1939			db_drawline
.1939	20 32 12	            jsr pushreg
.193c	ad 86 02	            lda bascol
.193f	8d aa 19	            sta drawbox_bascol
.1942	ad a9 19	            lda drawbox_colour
.1945	8d 86 02	            sta bascol
.1948	c9 10		            cmp #$10
.194a	30 05		            bmi noreverse
.194c	a9 12		            lda #18
.194e	20 d2 ff	            jsr chrout
.1951			noreverse
.1951	ae a8 19	            ldx drawbox_curline
.1954	ac a5 19	            ldy drawbox_left
.1957	18		            clc
.1958	20 f0 ff	            jsr plot
.195b	ad a1 19	            lda db_left
.195e	20 d2 ff	            jsr chrout
.1961	ad a3 19	            lda db_mid
.1964	ae a6 19	            ldx drawbox_width
.1967	ca		            dex
.1968	ca		            dex
.1969	20 bb 10	            jsr putnch
.196c	ad a2 19	            lda db_right
.196f	20 d2 ff	            jsr chrout
.1972	a9 92		            lda #146
.1974	20 d2 ff	            jsr chrout
.1977	ad aa 19	            lda drawbox_bascol
.197a	8d 86 02	            sta bascol
.197d	20 61 12	            jsr popreg
.1980	60		            rts
.1981			db_drawbox
.1981	20 32 12	            jsr pushreg
.1984	ae a7 19	            ldx drawbox_height
.1987	ca		            dex
.1988	20 dd 18	            jsr db_tline
.198b	ca		            dex
.198c	f0 09		            beq lastline
.198e	ee a8 19	moreline    inc drawbox_curline
.1991	20 0b 19	            jsr db_eline
.1994	ca		            dex
.1995	d0 f7		            bne moreline
.1997	ee a8 19	lastline    inc drawbox_curline
.199a	20 f4 18	            jsr db_bline
.199d	20 61 12	            jsr popreg
.19a0	60		            rts
=176			tleft       =   176
=174			tright      =   174
=173			bleft       =   173
=189			bright      =   189
=171			mleft       =   171
=179			mright      =   179
=221			vline       =   221
=192			hline       =   192
>19a1	00		db_left         .byte   0
>19a2	00		db_right        .byte   0
>19a3	00		db_mid          .byte   0
>19a4	00		drawbox_top     .byte   0
>19a5	00		drawbox_left    .byte   0
>19a6	00		drawbox_width   .byte   0
>19a7	00		drawbox_height  .byte   0
>19a8	00		drawbox_curline .byte   0
>19a9	00		drawbox_colour  .byte   0
>19aa	00		drawbox_bascol  .byte   0

;******  Return to file: slbug64.asm


;******  End of listing

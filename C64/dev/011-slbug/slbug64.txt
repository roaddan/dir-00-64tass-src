
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L slbug64.txt -o slbug64.prg slbug64.asm
; Fri Oct 17 17:22:40 2025

;Offset	;Hex		;Source

;******  Processing input file: slbug64.asm

="20251017-125301"	            Version = "20251017-125301"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	20 50 52 4f	               .text " programmation assembleur sur c64."
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2e
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	20 50 41 52	               .text " par daniel lafrance."
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2e
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 55 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"
.0854	60		              rts                  ; ... doit se rerminer par un RTS.

;******  Return to file: slbug64.asm

.0855			main
.0855	20 8a 16	            jsr anykey
.0858	60		            rts
.0859			main2
.0859	20 c8 11	            jsr scrmaninit  ; Met en place la gestion d'écran.
.085c	08		               php
.085d	48		               pha
.085e	a9 0e		               lda  #14
.0860	20 d2 ff	               jsr  $ffd2
.0863	68		               pla
.0864	28		               plp
.0865	08		               php
.0866	48		               pha
.0867	a9 08		               lda  #$08
.0869	20 d2 ff	               jsr  $ffd2
.086c	68		               pla
.086d	28		               plp
.086e	20 69 13	               jsr  pushreg
.0871	48		               pha
.0872	a9 05		               lda  #cvert
.0874	8d 20 d0	               sta  $d020
.0877	68		               pla
.0878	48		               pha
.0879	a9 06		               lda  #cbleu
.087b	8d 21 d0	               sta  $d021
.087e	68		               pla
.087f	48		               pha
.0880	a9 01		               lda  #cblanc
.0882	8d 86 02	               sta  bascol
.0885	68		               pla
.0886	20 98 13	               jsr  popreg
.0889	20 e8 11	            jsr cls         ; Efface l'écran.
.088c	20 98 0c	            jsr help        ; Affiche le menu d'aide.
.088f	20 8a 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.0892	20 dc 08	            jsr slbug64     ; Lance la fonction principale.
.0895	20 69 13	               jsr  pushreg
.0898	a2 00		               ldx  #0
.089a	a0 00		               ldy  #0
.089c	20 1f 12	               jsr  gotoxy
.089f	20 98 13	               jsr  popreg
.08a2	20 8a 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.08a5	20 98 0c	            jsr help        ; Affiche l'écran d'aide.
.08a8	20 8a 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.08ab	20 e8 11	            jsr cls         ; Efface l'écran.
.08ae	20 69 13	               jsr  pushreg
.08b1	48		               pha
.08b2	a9 0e		               lda  #cbleupale
.08b4	8d 20 d0	               sta  $d020
.08b7	68		               pla
.08b8	48		               pha
.08b9	a9 06		               lda  #cbleu
.08bb	8d 21 d0	               sta  $d021
.08be	68		               pla
.08bf	48		               pha
.08c0	a9 01		               lda  #cblanc
.08c2	8d 86 02	               sta  bascol
.08c5	68		               pla
.08c6	20 98 13	               jsr  popreg
.08c9	08		               php
.08ca	48		               pha
.08cb	a9 09		               lda  #$09
.08cd	20 d2 ff	               jsr  $ffd2
.08d0	68		               pla
.08d1	28		               plp
.08d2	08		               php
.08d3	48		               pha
.08d4	a9 8e		               lda  #b_uppercase
.08d6	20 d2 ff	               jsr  $ffd2
.08d9	68		               pla
.08da	28		               plp
.08db	60		            rts
.08dc			slbug64
.08dc	20 e0 08	            jsr boxdrawtest
.08df	60		            rts
.08e0			boxdrawtest
.08e0	08		            php
.08e1	48		            pha
.08e2	ad 21 d0	            lda vicbackcol
.08e5	48		            pha
.08e6	a9 00		            lda #cnoir      ; \
.08e8	8d 21 d0	            sta vicbackcol  ;  > Bordure et fond en noir.
.08eb	8d 20 d0	            sta vicbordcol  ; /
.08ee	20 8a 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.08f1	68		            pla
.08f2	20 69 13	               jsr  pushreg
.08f5	a2 00		               ldx  #0
.08f7	a0 00		               ldy  #0
.08f9	20 1f 12	               jsr  gotoxy
.08fc	20 98 13	               jsr  popreg
.08ff	20 e8 11	            jsr cls
.0902	08		               php
.0903	48		               pha
.0904	a9 0e		               lda  #14
.0906	20 d2 ff	               jsr  $ffd2
.0909	68		               pla
.090a	28		               plp
.090b	08		               php
.090c	48		               pha
.090d	a9 08		               lda  #$08
.090f	20 d2 ff	               jsr  $ffd2
.0912	68		               pla
.0913	28		               plp
.0914	08		                php                 ; Sauvegarde les registres.
.0915	48		                pha
.0916	a9 00		                lda #0           ; Initialise le paramètre top et la ...
.0918	8d c3 1a	                sta drawbox_top
.091b	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.091e	a9 00		                lda #0          ; Initialise le paramètre left.
.0920	8d c4 1a	                sta drawbox_left
.0923	a9 28		                lda #40         ; Initialise le paramètre width.
.0925	8d c5 1a	                sta drawbox_width
.0928	a9 18		                lda #24        ; Initialise le paramètre height.
.092a	8d c6 1a	                sta drawbox_height
.092d	a9 0c		                lda #cgris1        ; Initialise le paramètre colour.
.092f	8d c7 1a	                sta drawbox_colour
.0932	68		                pla                 ; Récupère les registres.
.0933	28		                plp
.0934	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0937	a9 12		                    lda #18         ; le titre zzzzzz
.0939	20 d2 ff	                    jsr chrout
.093c	20 69 13	                jsr pushreg
.093f	ad 86 02	                lda bascol
.0942	48		                pha
.0943	a9 0c		                lda #cgris1
.0945	8d 86 02	                sta bascol
.0948	a0 01		                ldy #0+1
.094a	a2 00		                ldx  #0
.094c	18		                clc
.094d	20 f0 ff	                jsr  plot
.0950	a2 26		                ldx  #<titre
.0952	a0 10		                ldy  #>titre
.0954	20 05 12	                jsr  puts
.0957	68		                pla
.0958	8d 86 02	                sta  bascol
.095b	20 98 13	                jsr  popreg
.095e	a9 92		                    lda #146
.0960	20 d2 ff	                    jsr chrout
.0963	08		                php                 ; Sauvegarde les registres.
.0964	48		                pha
.0965	a9 01		                lda #1           ; Initialise le paramètre top et la ...
.0967	8d c3 1a	                sta drawbox_top
.096a	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.096d	a9 01		                lda #1          ; Initialise le paramètre left.
.096f	8d c4 1a	                sta drawbox_left
.0972	a9 26		                lda #38         ; Initialise le paramètre width.
.0974	8d c5 1a	                sta drawbox_width
.0977	a9 05		                lda #5        ; Initialise le paramètre height.
.0979	8d c6 1a	                sta drawbox_height
.097c	a9 17		                lda #cjaune+reverse        ; Initialise le paramètre colour.
.097e	8d c7 1a	                sta drawbox_colour
.0981	68		                pla                 ; Récupère les registres.
.0982	28		                plp
.0983	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0986	20 69 13	                jsr pushreg
.0989	ad 86 02	                lda bascol
.098c	48		                pha
.098d	a9 17		                lda #cjaune+reverse
.098f	8d 86 02	                sta bascol
.0992	a0 02		                ldy #1+1
.0994	a2 01		                ldx  #1
.0996	18		                clc
.0997	20 f0 ff	                jsr  plot
.099a	a2 26		                ldx  #<titre
.099c	a0 10		                ldy  #>titre
.099e	20 05 12	                jsr  puts
.09a1	68		                pla
.09a2	8d 86 02	                sta  bascol
.09a5	20 98 13	                jsr  popreg
.09a8	08		                php                 ; Sauvegarde les registres.
.09a9	48		                pha
.09aa	a9 06		                lda #6           ; Initialise le paramètre top et la ...
.09ac	8d c3 1a	                sta drawbox_top
.09af	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.09b2	a9 01		                lda #1          ; Initialise le paramètre left.
.09b4	8d c4 1a	                sta drawbox_left
.09b7	a9 13		                lda #19         ; Initialise le paramètre width.
.09b9	8d c5 1a	                sta drawbox_width
.09bc	a9 11		                lda #17        ; Initialise le paramètre height.
.09be	8d c6 1a	                sta drawbox_height
.09c1	a9 13		                lda #ccyan+reverse        ; Initialise le paramètre colour.
.09c3	8d c7 1a	                sta drawbox_colour
.09c6	68		                pla                 ; Récupère les registres.
.09c7	28		                plp
.09c8	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.09cb	20 69 13	                jsr pushreg
.09ce	ad 86 02	                lda bascol
.09d1	48		                pha
.09d2	a9 13		                lda #ccyan+reverse
.09d4	8d 86 02	                sta bascol
.09d7	a0 02		                ldy #1+1
.09d9	a2 06		                ldx  #6
.09db	18		                clc
.09dc	20 f0 ff	                jsr  plot
.09df	a2 26		                ldx  #<titre
.09e1	a0 10		                ldy  #>titre
.09e3	20 05 12	                jsr  puts
.09e6	68		                pla
.09e7	8d 86 02	                sta  bascol
.09ea	20 98 13	                jsr  popreg
.09ed	08		                php                 ; Sauvegarde les registres.
.09ee	48		                pha
.09ef	a9 06		                lda #6           ; Initialise le paramètre top et la ...
.09f1	8d c3 1a	                sta drawbox_top
.09f4	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.09f7	a9 14		                lda #20          ; Initialise le paramètre left.
.09f9	8d c4 1a	                sta drawbox_left
.09fc	a9 13		                lda #19         ; Initialise le paramètre width.
.09fe	8d c5 1a	                sta drawbox_width
.0a01	a9 11		                lda #17        ; Initialise le paramètre height.
.0a03	8d c6 1a	                sta drawbox_height
.0a06	a9 05		                lda #cvert        ; Initialise le paramètre colour.
.0a08	8d c7 1a	                sta drawbox_colour
.0a0b	68		                pla                 ; Récupère les registres.
.0a0c	28		                plp
.0a0d	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0a10	a9 12		                    lda #18         ; le titre zzzzzz
.0a12	20 d2 ff	                    jsr chrout
.0a15	20 69 13	                jsr pushreg
.0a18	ad 86 02	                lda bascol
.0a1b	48		                pha
.0a1c	a9 05		                lda #cvert
.0a1e	8d 86 02	                sta bascol
.0a21	a0 15		                ldy #20+1
.0a23	a2 06		                ldx  #6
.0a25	18		                clc
.0a26	20 f0 ff	                jsr  plot
.0a29	a2 26		                ldx  #<titre
.0a2b	a0 10		                ldy  #>titre
.0a2d	20 05 12	                jsr  puts
.0a30	68		                pla
.0a31	8d 86 02	                sta  bascol
.0a34	20 98 13	                jsr  popreg
.0a37	a9 92		                    lda #146
.0a39	20 d2 ff	                    jsr chrout
.0a3c	20 8a 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.0a3f	08		                php                 ; Sauvegarde les registres.
.0a40	48		                pha
.0a41	a9 05		                lda #5           ; Initialise le paramètre top et la ...
.0a43	8d c3 1a	                sta drawbox_top
.0a46	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0a49	a9 05		                lda #5          ; Initialise le paramètre left.
.0a4b	8d c4 1a	                sta drawbox_left
.0a4e	a9 14		                lda #20         ; Initialise le paramètre width.
.0a50	8d c5 1a	                sta drawbox_width
.0a53	a9 05		                lda #5        ; Initialise le paramètre height.
.0a55	8d c6 1a	                sta drawbox_height
.0a58	a9 1c		                lda #cgris1+reverse        ; Initialise le paramètre colour.
.0a5a	8d c7 1a	                sta drawbox_colour
.0a5d	68		                pla                 ; Récupère les registres.
.0a5e	28		                plp
.0a5f	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0a62	20 69 13	                jsr pushreg
.0a65	ad 86 02	                lda bascol
.0a68	48		                pha
.0a69	a9 1c		                lda #cgris1+reverse
.0a6b	8d 86 02	                sta bascol
.0a6e	a0 06		                ldy #5+1
.0a70	a2 05		                ldx  #5
.0a72	18		                clc
.0a73	20 f0 ff	                jsr  plot
.0a76	a2 26		                ldx  #<titre
.0a78	a0 10		                ldy  #>titre
.0a7a	20 05 12	                jsr  puts
.0a7d	68		                pla
.0a7e	8d 86 02	                sta  bascol
.0a81	20 98 13	                jsr  popreg
.0a84	08		                php                 ; Sauvegarde les registres.
.0a85	48		                pha
.0a86	a9 07		                lda #7           ; Initialise le paramètre top et la ...
.0a88	8d c3 1a	                sta drawbox_top
.0a8b	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0a8e	a9 07		                lda #7          ; Initialise le paramètre left.
.0a90	8d c4 1a	                sta drawbox_left
.0a93	a9 14		                lda #20         ; Initialise le paramètre width.
.0a95	8d c5 1a	                sta drawbox_width
.0a98	a9 05		                lda #5        ; Initialise le paramètre height.
.0a9a	8d c6 1a	                sta drawbox_height
.0a9d	a9 0b		                lda #cgris0        ; Initialise le paramètre colour.
.0a9f	8d c7 1a	                sta drawbox_colour
.0aa2	68		                pla                 ; Récupère les registres.
.0aa3	28		                plp
.0aa4	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0aa7	a9 12		                    lda #18         ; le titre zzzzzz
.0aa9	20 d2 ff	                    jsr chrout
.0aac	20 69 13	                jsr pushreg
.0aaf	ad 86 02	                lda bascol
.0ab2	48		                pha
.0ab3	a9 0b		                lda #cgris0
.0ab5	8d 86 02	                sta bascol
.0ab8	a0 08		                ldy #7+1
.0aba	a2 07		                ldx  #7
.0abc	18		                clc
.0abd	20 f0 ff	                jsr  plot
.0ac0	a2 26		                ldx  #<titre
.0ac2	a0 10		                ldy  #>titre
.0ac4	20 05 12	                jsr  puts
.0ac7	68		                pla
.0ac8	8d 86 02	                sta  bascol
.0acb	20 98 13	                jsr  popreg
.0ace	a9 92		                    lda #146
.0ad0	20 d2 ff	                    jsr chrout
.0ad3	08		                php                 ; Sauvegarde les registres.
.0ad4	48		                pha
.0ad5	a9 09		                lda #9           ; Initialise le paramètre top et la ...
.0ad7	8d c3 1a	                sta drawbox_top
.0ada	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0add	a9 09		                lda #9          ; Initialise le paramètre left.
.0adf	8d c4 1a	                sta drawbox_left
.0ae2	a9 14		                lda #20         ; Initialise le paramètre width.
.0ae4	8d c5 1a	                sta drawbox_width
.0ae7	a9 05		                lda #5        ; Initialise le paramètre height.
.0ae9	8d c6 1a	                sta drawbox_height
.0aec	a9 1a		                lda #crose+reverse        ; Initialise le paramètre colour.
.0aee	8d c7 1a	                sta drawbox_colour
.0af1	68		                pla                 ; Récupère les registres.
.0af2	28		                plp
.0af3	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0af6	20 69 13	                jsr pushreg
.0af9	ad 86 02	                lda bascol
.0afc	48		                pha
.0afd	a9 1a		                lda #crose+reverse
.0aff	8d 86 02	                sta bascol
.0b02	a0 0a		                ldy #9+1
.0b04	a2 09		                ldx  #9
.0b06	18		                clc
.0b07	20 f0 ff	                jsr  plot
.0b0a	a2 26		                ldx  #<titre
.0b0c	a0 10		                ldy  #>titre
.0b0e	20 05 12	                jsr  puts
.0b11	68		                pla
.0b12	8d 86 02	                sta  bascol
.0b15	20 98 13	                jsr  popreg
.0b18	08		                php                 ; Sauvegarde les registres.
.0b19	48		                pha
.0b1a	a9 0b		                lda #11           ; Initialise le paramètre top et la ...
.0b1c	8d c3 1a	                sta drawbox_top
.0b1f	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0b22	a9 0b		                lda #11          ; Initialise le paramètre left.
.0b24	8d c4 1a	                sta drawbox_left
.0b27	a9 14		                lda #20         ; Initialise le paramètre width.
.0b29	8d c5 1a	                sta drawbox_width
.0b2c	a9 05		                lda #5        ; Initialise le paramètre height.
.0b2e	8d c6 1a	                sta drawbox_height
.0b31	a9 02		                lda #crouge        ; Initialise le paramètre colour.
.0b33	8d c7 1a	                sta drawbox_colour
.0b36	68		                pla                 ; Récupère les registres.
.0b37	28		                plp
.0b38	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0b3b	a9 12		                    lda #18         ; le titre zzzzzz
.0b3d	20 d2 ff	                    jsr chrout
.0b40	20 69 13	                jsr pushreg
.0b43	ad 86 02	                lda bascol
.0b46	48		                pha
.0b47	a9 02		                lda #crouge
.0b49	8d 86 02	                sta bascol
.0b4c	a0 0c		                ldy #11+1
.0b4e	a2 0b		                ldx  #11
.0b50	18		                clc
.0b51	20 f0 ff	                jsr  plot
.0b54	a2 26		                ldx  #<titre
.0b56	a0 10		                ldy  #>titre
.0b58	20 05 12	                jsr  puts
.0b5b	68		                pla
.0b5c	8d 86 02	                sta  bascol
.0b5f	20 98 13	                jsr  popreg
.0b62	a9 92		                    lda #146
.0b64	20 d2 ff	                    jsr chrout
.0b67	08		                php                 ; Sauvegarde les registres.
.0b68	48		                pha
.0b69	a9 0d		                lda #13           ; Initialise le paramètre top et la ...
.0b6b	8d c3 1a	                sta drawbox_top
.0b6e	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0b71	a9 0d		                lda #13          ; Initialise le paramètre left.
.0b73	8d c4 1a	                sta drawbox_left
.0b76	a9 14		                lda #20         ; Initialise le paramètre width.
.0b78	8d c5 1a	                sta drawbox_width
.0b7b	a9 05		                lda #5        ; Initialise le paramètre height.
.0b7d	8d c6 1a	                sta drawbox_height
.0b80	a9 14		                lda #cmauve+reverse        ; Initialise le paramètre colour.
.0b82	8d c7 1a	                sta drawbox_colour
.0b85	68		                pla                 ; Récupère les registres.
.0b86	28		                plp
.0b87	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0b8a	20 69 13	                jsr pushreg
.0b8d	ad 86 02	                lda bascol
.0b90	48		                pha
.0b91	a9 14		                lda #cmauve+reverse
.0b93	8d 86 02	                sta bascol
.0b96	a0 0e		                ldy #13+1
.0b98	a2 0d		                ldx  #13
.0b9a	18		                clc
.0b9b	20 f0 ff	                jsr  plot
.0b9e	a2 26		                ldx  #<titre
.0ba0	a0 10		                ldy  #>titre
.0ba2	20 05 12	                jsr  puts
.0ba5	68		                pla
.0ba6	8d 86 02	                sta  bascol
.0ba9	20 98 13	                jsr  popreg
.0bac	08		                php                 ; Sauvegarde les registres.
.0bad	48		                pha
.0bae	a9 0f		                lda #15           ; Initialise le paramètre top et la ...
.0bb0	8d c3 1a	                sta drawbox_top
.0bb3	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0bb6	a9 0f		                lda #15          ; Initialise le paramètre left.
.0bb8	8d c4 1a	                sta drawbox_left
.0bbb	a9 14		                lda #20         ; Initialise le paramètre width.
.0bbd	8d c5 1a	                sta drawbox_width
.0bc0	a9 05		                lda #5        ; Initialise le paramètre height.
.0bc2	8d c6 1a	                sta drawbox_height
.0bc5	a9 06		                lda #cbleu        ; Initialise le paramètre colour.
.0bc7	8d c7 1a	                sta drawbox_colour
.0bca	68		                pla                 ; Récupère les registres.
.0bcb	28		                plp
.0bcc	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0bcf	a9 12		                    lda #18         ; le titre zzzzzz
.0bd1	20 d2 ff	                    jsr chrout
.0bd4	20 69 13	                jsr pushreg
.0bd7	ad 86 02	                lda bascol
.0bda	48		                pha
.0bdb	a9 06		                lda #cbleu
.0bdd	8d 86 02	                sta bascol
.0be0	a0 10		                ldy #15+1
.0be2	a2 0f		                ldx  #15
.0be4	18		                clc
.0be5	20 f0 ff	                jsr  plot
.0be8	a2 26		                ldx  #<titre
.0bea	a0 10		                ldy  #>titre
.0bec	20 05 12	                jsr  puts
.0bef	68		                pla
.0bf0	8d 86 02	                sta  bascol
.0bf3	20 98 13	                jsr  popreg
.0bf6	a9 92		                    lda #146
.0bf8	20 d2 ff	                    jsr chrout
.0bfb	08		                php                 ; Sauvegarde les registres.
.0bfc	48		                pha
.0bfd	a9 11		                lda #17           ; Initialise le paramètre top et la ...
.0bff	8d c3 1a	                sta drawbox_top
.0c02	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0c05	a9 11		                lda #17          ; Initialise le paramètre left.
.0c07	8d c4 1a	                sta drawbox_left
.0c0a	a9 14		                lda #20         ; Initialise le paramètre width.
.0c0c	8d c5 1a	                sta drawbox_width
.0c0f	a9 05		                lda #5        ; Initialise le paramètre height.
.0c11	8d c6 1a	                sta drawbox_height
.0c14	a9 13		                lda #ccyan+reverse        ; Initialise le paramètre colour.
.0c16	8d c7 1a	                sta drawbox_colour
.0c19	68		                pla                 ; Récupère les registres.
.0c1a	28		                plp
.0c1b	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0c1e	20 69 13	                jsr pushreg
.0c21	ad 86 02	                lda bascol
.0c24	48		                pha
.0c25	a9 13		                lda #ccyan+reverse
.0c27	8d 86 02	                sta bascol
.0c2a	a0 12		                ldy #17+1
.0c2c	a2 11		                ldx  #17
.0c2e	18		                clc
.0c2f	20 f0 ff	                jsr  plot
.0c32	a2 26		                ldx  #<titre
.0c34	a0 10		                ldy  #>titre
.0c36	20 05 12	                jsr  puts
.0c39	68		                pla
.0c3a	8d 86 02	                sta  bascol
.0c3d	20 98 13	                jsr  popreg
.0c40	08		                php                 ; Sauvegarde les registres.
.0c41	48		                pha
.0c42	a9 13		                lda #19           ; Initialise le paramètre top et la ...
.0c44	8d c3 1a	                sta drawbox_top
.0c47	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0c4a	a9 13		                lda #19          ; Initialise le paramètre left.
.0c4c	8d c4 1a	                sta drawbox_left
.0c4f	a9 14		                lda #20         ; Initialise le paramètre width.
.0c51	8d c5 1a	                sta drawbox_width
.0c54	a9 05		                lda #5        ; Initialise le paramètre height.
.0c56	8d c6 1a	                sta drawbox_height
.0c59	a9 05		                lda #cvert        ; Initialise le paramètre colour.
.0c5b	8d c7 1a	                sta drawbox_colour
.0c5e	68		                pla                 ; Récupère les registres.
.0c5f	28		                plp
.0c60	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0c63	a9 12		                    lda #18         ; le titre zzzzzz
.0c65	20 d2 ff	                    jsr chrout
.0c68	20 69 13	                jsr pushreg
.0c6b	ad 86 02	                lda bascol
.0c6e	48		                pha
.0c6f	a9 05		                lda #cvert
.0c71	8d 86 02	                sta bascol
.0c74	a0 14		                ldy #19+1
.0c76	a2 13		                ldx  #19
.0c78	18		                clc
.0c79	20 f0 ff	                jsr  plot
.0c7c	a2 26		                ldx  #<titre
.0c7e	a0 10		                ldy  #>titre
.0c80	20 05 12	                jsr  puts
.0c83	68		                pla
.0c84	8d 86 02	                sta  bascol
.0c87	20 98 13	                jsr  popreg
.0c8a	a9 92		                    lda #146
.0c8c	20 d2 ff	                    jsr chrout
.0c8f	20 8a 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.0c92	20 f7 17	            jsr showregs
.0c95	68		            pla
.0c96	28		            plp
.0c97	60		            rts
=16			reverse = 16
.0c98			help
.0c98	20 fb 12	            jsr pushall
.0c9b	20 e8 11	            jsr cls
.0c9e	08		               php
.0c9f	48		               pha
.0ca0	a9 0e		               lda  #14
.0ca2	20 d2 ff	               jsr  $ffd2
.0ca5	68		               pla
.0ca6	28		               plp
.0ca7	08		               php
.0ca8	48		               pha
.0ca9	a9 08		               lda  #$08
.0cab	20 d2 ff	               jsr  $ffd2
.0cae	68		               pla
.0caf	28		               plp
.0cb0	a9 0d		            lda #$0d
.0cb2	20 ff 11	            jsr putch
.0cb5	20 ff 11	            jsr putch
.0cb8	20 ff 11	            jsr putch
.0cbb	20 ff 11	            jsr putch
.0cbe	a9 12		            lda #b_rvs_on
.0cc0	20 ff 11	            jsr putch
.0cc3	08		                php                 ; Sauvegarde les registres.
.0cc4	48		                pha
.0cc5	a9 04		                lda #top           ; Initialise le paramètre top et la ...
.0cc7	8d c3 1a	                sta drawbox_top
.0cca	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0ccd	a9 04		                lda #left          ; Initialise le paramètre left.
.0ccf	8d c4 1a	                sta drawbox_left
.0cd2	a9 20		                lda #32         ; Initialise le paramètre width.
.0cd4	8d c5 1a	                sta drawbox_width
.0cd7	a9 0a		                lda #10        ; Initialise le paramètre height.
.0cd9	8d c6 1a	                sta drawbox_height
.0cdc	a9 11		                lda #color+reverse        ; Initialise le paramètre colour.
.0cde	8d c7 1a	                sta drawbox_colour
.0ce1	68		                pla                 ; Récupère les registres.
.0ce2	28		                plp
.0ce3	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0ce6	20 69 13	                jsr pushreg
.0ce9	ad 86 02	                lda bascol
.0cec	48		                pha
.0ced	a9 11		                lda #color+reverse
.0cef	8d 86 02	                sta bascol
.0cf2	a0 05		                ldy #left+1
.0cf4	a2 04		                ldx  #top
.0cf6	18		                clc
.0cf7	20 f0 ff	                jsr  plot
.0cfa	a2 cc		                ldx  #<texta
.0cfc	a0 0e		                ldy  #>texta
.0cfe	20 05 12	                jsr  puts
.0d01	68		                pla
.0d02	8d 86 02	                sta  bascol
.0d05	20 98 13	                jsr  popreg
.0d08	20 69 13	                jsr pushreg
.0d0b	ad 86 02	                lda bascol
.0d0e	48		                pha
.0d0f	a9 01		                lda #color
.0d11	8d 86 02	                sta bascol
.0d14	a0 05		                ldy #left+1
.0d16	a2 06		                ldx  #top+2
.0d18	18		                clc
.0d19	20 f0 ff	                jsr  plot
.0d1c	a2 e7		                ldx  #<textb
.0d1e	a0 0e		                ldy  #>textb
.0d20	20 05 12	                jsr  puts
.0d23	68		                pla
.0d24	8d 86 02	                sta  bascol
.0d27	20 98 13	                jsr  popreg
.0d2a	20 69 13	                jsr pushreg
.0d2d	ad 86 02	                lda bascol
.0d30	48		                pha
.0d31	a9 01		                lda #color
.0d33	8d 86 02	                sta bascol
.0d36	a0 05		                ldy #left+1
.0d38	a2 07		                ldx  #top+3
.0d3a	18		                clc
.0d3b	20 f0 ff	                jsr  plot
.0d3e	a2 06		                ldx  #<textc
.0d40	a0 0f		                ldy  #>textc
.0d42	20 05 12	                jsr  puts
.0d45	68		                pla
.0d46	8d 86 02	                sta  bascol
.0d49	20 98 13	                jsr  popreg
.0d4c	20 69 13	                jsr pushreg
.0d4f	ad 86 02	                lda bascol
.0d52	48		                pha
.0d53	a9 01		                lda #color
.0d55	8d 86 02	                sta bascol
.0d58	a0 05		                ldy #left+1
.0d5a	a2 08		                ldx  #top+4
.0d5c	18		                clc
.0d5d	20 f0 ff	                jsr  plot
.0d60	a2 25		                ldx  #<textd
.0d62	a0 0f		                ldy  #>textd
.0d64	20 05 12	                jsr  puts
.0d67	68		                pla
.0d68	8d 86 02	                sta  bascol
.0d6b	20 98 13	                jsr  popreg
.0d6e	20 69 13	                jsr pushreg
.0d71	ad 86 02	                lda bascol
.0d74	48		                pha
.0d75	a9 01		                lda #color
.0d77	8d 86 02	                sta bascol
.0d7a	a0 05		                ldy #left+1
.0d7c	a2 0a		                ldx  #top+6
.0d7e	18		                clc
.0d7f	20 f0 ff	                jsr  plot
.0d82	a2 44		                ldx  #<texte
.0d84	a0 0f		                ldy  #>texte
.0d86	20 05 12	                jsr  puts
.0d89	68		                pla
.0d8a	8d 86 02	                sta  bascol
.0d8d	20 98 13	                jsr  popreg
.0d90	20 69 13	                jsr pushreg
.0d93	ad 86 02	                lda bascol
.0d96	48		                pha
.0d97	a9 01		                lda #color
.0d99	8d 86 02	                sta bascol
.0d9c	a0 05		                ldy #left+1
.0d9e	a2 0b		                ldx  #top+7
.0da0	18		                clc
.0da1	20 f0 ff	                jsr  plot
.0da4	a2 63		                ldx  #<textf
.0da6	a0 0f		                ldy  #>textf
.0da8	20 05 12	                jsr  puts
.0dab	68		                pla
.0dac	8d 86 02	                sta  bascol
.0daf	20 98 13	                jsr  popreg
.0db2	20 69 13	                jsr pushreg
.0db5	ad 86 02	                lda bascol
.0db8	48		                pha
.0db9	a9 01		                lda #color
.0dbb	8d 86 02	                sta bascol
.0dbe	a0 05		                ldy #left+1
.0dc0	a2 0c		                ldx  #top+8
.0dc2	18		                clc
.0dc3	20 f0 ff	                jsr  plot
.0dc6	a2 82		                ldx  #<textg
.0dc8	a0 0f		                ldy  #>textg
.0dca	20 05 12	                jsr  puts
.0dcd	68		                pla
.0dce	8d 86 02	                sta  bascol
.0dd1	20 98 13	                jsr  popreg
.0dd4	08		                php                 ; Sauvegarde les registres.
.0dd5	48		                pha
.0dd6	a9 0f		                lda #top+11           ; Initialise le paramètre top et la ...
.0dd8	8d c3 1a	                sta drawbox_top
.0ddb	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0dde	a9 04		                lda #left          ; Initialise le paramètre left.
.0de0	8d c4 1a	                sta drawbox_left
.0de3	a9 20		                lda #32         ; Initialise le paramètre width.
.0de5	8d c5 1a	                sta drawbox_width
.0de8	a9 06		                lda #6        ; Initialise le paramètre height.
.0dea	8d c6 1a	                sta drawbox_height
.0ded	a9 1a		                lda #color2+reverse        ; Initialise le paramètre colour.
.0def	8d c7 1a	                sta drawbox_colour
.0df2	68		                pla                 ; Récupère les registres.
.0df3	28		                plp
.0df4	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0df7	20 69 13	                jsr pushreg
.0dfa	ad 86 02	                lda bascol
.0dfd	48		                pha
.0dfe	a9 1a		                lda #color2+reverse
.0e00	8d 86 02	                sta bascol
.0e03	a0 05		                ldy #left+1
.0e05	a2 0f		                ldx  #top+11
.0e07	18		                clc
.0e08	20 f0 ff	                jsr  plot
.0e0b	a2 a1		                ldx  #<texth
.0e0d	a0 0f		                ldy  #>texth
.0e0f	20 05 12	                jsr  puts
.0e12	68		                pla
.0e13	8d 86 02	                sta  bascol
.0e16	20 98 13	                jsr  popreg
.0e19	20 69 13	                jsr pushreg
.0e1c	ad 86 02	                lda bascol
.0e1f	48		                pha
.0e20	a9 0a		                lda #color2
.0e22	8d 86 02	                sta bascol
.0e25	a0 05		                ldy #left+1
.0e27	a2 11		                ldx  #top+13
.0e29	18		                clc
.0e2a	20 f0 ff	                jsr  plot
.0e2d	a2 b0		                ldx  #<texti
.0e2f	a0 0f		                ldy  #>texti
.0e31	20 05 12	                jsr  puts
.0e34	68		                pla
.0e35	8d 86 02	                sta  bascol
.0e38	20 98 13	                jsr  popreg
.0e3b	20 69 13	                jsr pushreg
.0e3e	ad 86 02	                lda bascol
.0e41	48		                pha
.0e42	a9 0a		                lda #color2
.0e44	8d 86 02	                sta bascol
.0e47	a0 05		                ldy #left+1
.0e49	a2 12		                ldx  #top+14
.0e4b	18		                clc
.0e4c	20 f0 ff	                jsr  plot
.0e4f	a2 cf		                ldx  #<textj
.0e51	a0 0f		                ldy  #>textj
.0e53	20 05 12	                jsr  puts
.0e56	68		                pla
.0e57	8d 86 02	                sta  bascol
.0e5a	20 98 13	                jsr  popreg
.0e5d	20 69 13	                jsr pushreg
.0e60	ad 86 02	                lda bascol
.0e63	48		                pha
.0e64	a9 0a		                lda #color2
.0e66	8d 86 02	                sta bascol
.0e69	a0 05		                ldy #left+1
.0e6b	a2 13		                ldx  #top+15
.0e6d	18		                clc
.0e6e	20 f0 ff	                jsr  plot
.0e71	a2 ee		                ldx  #<textk
.0e73	a0 0f		                ldy  #>textk
.0e75	20 05 12	                jsr  puts
.0e78	68		                pla
.0e79	8d 86 02	                sta  bascol
.0e7c	20 98 13	                jsr  popreg
.0e7f	a9 92		            lda #b_rvs_off
.0e81	20 ff 11	            jsr putch
.0e84	20 69 13	                jsr pushreg
.0e87	ad 86 02	                lda bascol
.0e8a	48		                pha
.0e8b	a9 01		                lda #cblanc
.0e8d	8d 86 02	                sta bascol
.0e90	a0 0f		                ldy #39-24
.0e92	a2 18		                ldx  #24
.0e94	18		                clc
.0e95	20 f0 ff	                jsr  plot
.0e98	a2 0d		                ldx  #<textl
.0e9a	a0 10		                ldy  #>textl
.0e9c	20 05 12	                jsr  puts
.0e9f	68		                pla
.0ea0	8d 86 02	                sta  bascol
.0ea3	20 98 13	                jsr  popreg
.0ea6	20 36 13	            jsr popall
.0ea9	60		            rts
=4			left = 4
=4			top = 4
=$1			color = cblanc
=$a			color2 = crose

;******  Processing file: chaines_fr.asm

=158			headtcol        =   b_jaune
=158			normtcol        =   b_jaune
>0eaa	00		nextline        .byte   0
>0eab	20 20 20 20	line            .null           "                                "
>0eaf	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0ebf	20 20 20 20 20 20 20 20 20 20 20 20 00
>0ecc	92		texta           .byte           b_rvs_off
>0ecd	20 d3 cc 2d	                .text           " SL-BUG 64 Version 4.00 "
>0ed1	c2 d5 c7 20 36 34 20 d6 45 52 53 49 4f 4e 20 34
>0ee1	2e 30 30 20
>0ee5	12 00		                .byte           b_rvs_on,0
>0ee7	20 20 20 20	textb           .null           "     Version Commodore 64     "
>0eeb	20 d6 45 52 53 49 4f 4e 20 c3 4f 4d 4d 4f 44 4f
>0efb	52 45 20 36 34 20 20 20 20 20 00
>0f06	20 20 c9 44	textc           .null           "  Idee Originale sur MC-6809  "
>0f0a	45 45 20 cf 52 49 47 49 4e 41 4c 45 20 53 55 52
>0f1a	20 cd c3 2d 36 38 30 39 20 20 00
>0f25	20 20 d0 41	textd           .null           "  Par Serge Leblanc mai 1994  "
>0f29	52 20 d3 45 52 47 45 20 cc 45 42 4c 41 4e 43 20
>0f39	4d 41 49 20 31 39 39 34 20 20 00
>0f44	20 d0 4f 52	texte           .null           " Port C64 par Daniel Lafrance "
>0f48	54 20 c3 36 34 20 50 41 52 20 c4 41 4e 49 45 4c
>0f58	20 cc 41 46 52 41 4e 43 45 20 00
>0f63	20 20 20 20	textf           .null           "       (c) Octobre 2025       "
>0f67	20 20 20 28 43 29 20 cf 43 54 4f 42 52 45 20 32
>0f77	30 32 35 20 20 20 20 20 20 20 00
>0f82	20 20 20 d6	textg           .null   format( "   Version: %-17s ",Version)
>0f86	45 52 53 49 4f 4e 3a 20 32 30 32 35 31 30 31 37
>0f96	2d 31 32 35 33 30 31 20 20 20 00
>0fa1	92		texth           .byte           b_rvs_off
>0fa2	20 d2 c1 c3	                .text           " RACCOURCIS "
>0fa6	c3 cf d5 d2 c3 c9 d3 20
>0fae	12 00		                .byte           b_rvs_on,0
>0fb0	20 c5 58 45	texti           .null   format( " Execution.: SYS%5d ($%4X) ",slbug64,slbug64)
>0fb4	43 55 54 49 4f 4e 2e 3a 20 d3 d9 d3 20 32 32 36
>0fc4	38 20 28 24 20 38 c4 c3 29 20 00
>0fcf	20 c1 49 44	textj           .null   format( " Aide......: SYS%5d ($%4X) ",help,help)
>0fd3	45 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 32 32
>0fe3	34 20 28 24 20 c3 39 38 29 20 00
>0fee	20 c3 cc d3	textk           .null   format( " CLS.......: SYS%5d ($%4X) ",cls,cls)
>0ff2	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 34 35 38
>1002	34 20 28 24 31 31 c5 38 29 20 00
>100d	d5 4e 45 20	textl           .null           "Une clef pour continuer!"
>1011	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>1021	55 45 52 21 00
>1026	5b c6 45 4e	titre           .null   "[Fenetre]"
>102a	45 54 52 45 5d 00
>1030	b0 c0 c0 c0	tline   .byte   176,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,174,0
>1034	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>1044	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ae 00
>1051	ab c0 c0 c0	mline   .byte   171,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,179,0
>1055	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>1065	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 b3 00
>1072	ad c0 c0 c0	bline   .byte   173,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,189,0
>1076	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>1086	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 bd 00
>1093	dd 20 20 20	eline   .byte   221,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,221,0
>1097	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>10a7	20 20 20 20 20 20 20 20 20 20 20 dd 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>10b4	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>10b8	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black         =   144  ;0,  ctrl-1
=5			b_white         =   5    ;1,  ctrl-2
=28			b_red           =   28   ;2,  ctrl-3
=159			b_cyan          =   159  ;3,  ctrl-4
=156			b_purple        =   156  ;4,  ctrl-5
=30			b_green         =   30   ;5,  ctrl-6
=31			b_blue          =   31   ;6,  ctrl-7
=158			b_yellow        =   158  ;7,  ctrl-8
=129			b_orange        =   129  ;8,  C=-1
=149			b_brown         =   149  ;9,  C=-2
=150			b_ltred         =   150  ;10, C=-3
=155			b_gray3         =   155  ;11, C=-4
=155			b_grey3         =   155  ;11, C=-4
=152			b_gray2         =   152  ;12, C=-5
=152			b_grey2         =   152  ;13, C=-5
=153			b_ltgreen       =   153  ;13, C=-6
=154			b_ltblue        =   154  ;14, C=-7
=151			b_gray1         =   151  ;15, C=-8
=151			b_grey1         =   151  ;15, C=-8
=144			b_noir          =   144  ;0,  ctrl-1
=5			b_blanc         =   5    ;1,  ctrl-2
=28			b_rouge         =   28   ;2,  ctrl-3
=156			b_mauve         =   156  ;4,  ctrl-5
=30			b_vert          =   30   ;5,  ctrl-6
=31			b_bleu          =   31   ;6,  ctrl-7
=158			b_jaune         =   158  ;7,  ctrl-8
=149			b_brun          =   149  ;9,  C=-2
=150			b_rose          =   150  ;10, C=-3
=155			b_gris3         =   155  ;11, C=-4
=152			b_gris2         =   152  ;12, C=-5
=153			b_vert2         =   153  ;13, C=-6
=154			b_blue2         =   154  ;14, C=-7
=151			b_gris1         =   151  ;15, C=-8
=151			b_gris          =   151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.10bc			screendis
.10bc	08		               php
.10bd	48		               pha
.10be	ad 11 d0	               lda  $d011
.10c1	29 ef		               and  #%11101111
.10c3	8d 11 d0	               sta  $d011
.10c6	68		               pla
.10c7	28		               plp
.10c8	60		               rts
.10c9			screenena
.10c9	08		               php
.10ca	48		               pha
.10cb	ad 11 d0	               lda  $d011
.10ce	09 10		               ora  #%00010000
.10d0	8d 11 d0	               sta  $d011
.10d3	68		               pla
.10d4	28		               plp
.10d5	60		               rts
=8192			bmpram = 8192
.10d6			victohighres
.10d6	08		               php
.10d7	48		               pha
.10d8	ad 11 d0	               lda  vicmiscfnc
.10db	09 20		               ora  #%00100000     ; 32
.10dd	8d 11 d0	               sta  vicmiscfnc
.10e0	ad 18 d0	               lda  vicmemptr
.10e3	09 08		               ora  #%00001000     ; $08
.10e5	8d 18 d0	               sta  vicmemptr
.10e8	a9 ff		               lda  #$ff           ; 255
.10ea	85 37		               sta  $0037
.10ec	a9 1f		               lda  #$1f           ; 31
.10ee	85 38		               sta  $0038
.10f0	68		               pla
.10f1	28		               plp
.10f2	60		               rts
.10f3			victonormal
.10f3	08		               php
.10f4	48		               pha
.10f5	ad 11 d0	               lda  vicmiscfnc
.10f8	29 df		               and  #%11011111     ; 233
.10fa	8d 11 d0	               sta  vicmiscfnc
.10fd	ad 18 d0	               lda  vicmemptr
.1100	29 f7		               and  #%11110111     ; $08
.1102	8d 18 d0	               sta  vicmemptr
.1105	a9 00		               lda  #$00
.1107	85 37		               sta  $0037
.1109	a9 a0		               lda  #$a0
.110b	85 38		               sta  $0038
.110d	20 e8 11	               jsr  cls
.1110	68		               pla
.1111	28		               plp
.1112	60		               rts
.1113			vicbmpclear
.1113	20 fb 12	               jsr  push
.1116	a9 04		               lda  #cmauve
.1118	20 41 11	               jsr  setvicbmpbackcol
.111b	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.111d	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.111f	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.1121	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.1123	48		               pha
.1124	a9 ff		               lda  #<$0000+(8191)
.1126	8d 1f 15	               sta  loopcount
.1129	a9 1f		               lda  #>$0000+(8191)
.112b	8d 20 15	               sta  loopcount+1
.112e	68		               pla
.112f	a0 00		               ldy  #$00
.1131	a9 0f		next           lda  #$0f
.1133	91 fb		               sta  (zpage1),y
.1135	20 50 14	               jsr  inczpage1
.1138	20 ff 14	               jsr  loop
.113b	d0 f4		               bne  next
.113d	20 36 13	               jsr  pop
.1140	60		               rts
.1141			setvicbmpbackcol
.1141	20 fb 12	               jsr  push
.1144	29 0f		               and  #$0f
.1146	8d 74 11	               sta  vicbmpbackcol
.1149	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.114b	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.114d	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.114f	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.1151	48		               pha
.1152	a9 00		               lda  #<$0000+(1024)
.1154	8d 1f 15	               sta  loopcount
.1157	a9 04		               lda  #>$0000+(1024)
.1159	8d 20 15	               sta  loopcount+1
.115c	68		               pla
.115d	a0 00		               ldy  #$00
.115f	b1 fb		next           lda  (zpage1),y
.1161	29 f0		               and  #$f0
.1163	0d 74 11	               ora  vicbmpbackcol
.1166	91 fb		               sta  (zpage1),y
.1168	20 50 14	               jsr  inczpage1
.116b	20 ff 14	               jsr  loop
.116e	d0 ef		               bne  next
.1170	20 36 13	               jsr  pop
.1173	60		               rts
>1174	00		vicbmpbackcol  .byte     $00
.1175			setvicbmpforecol
.1175	20 fb 12	               jsr  push
.1178	2a		               rol
.1179	2a		               rol
.117a	2a		               rol
.117b	2a		               rol
.117c	29 f0		               and  #$f0
.117e	8d ac 11	               sta  vicbmpforecol
.1181	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.1183	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.1185	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.1187	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.1189	48		               pha
.118a	a9 00		               lda  #<$0000+(1024)
.118c	8d 1f 15	               sta  loopcount
.118f	a9 04		               lda  #>$0000+(1024)
.1191	8d 20 15	               sta  loopcount+1
.1194	68		               pla
.1195	a0 00		               ldy  #$00
.1197	b1 fb		next           lda  (zpage1),y
.1199	29 0f		               and  #$0f
.119b	0d ac 11	               ora  vicbmpforecol
.119e	91 fb		               sta  (zpage1),y
.11a0	20 50 14	               jsr  inczpage1
.11a3	20 ff 14	               jsr  loop
.11a6	d0 ef		               bne  next
.11a8	20 36 13	               jsr  pop
.11ab	60		               rts
>11ac	00		vicbmpforecol  .byte     $00
.11ad			bmphrcalccoords
.11ad	20 fb 12	               jsr  push
.11b0	18		               clc       ; On met Carry à 0
.11b1	6a		               ror       ; le bit 0 de a dans carry  ?/2
.11b2	8a		               txa       ; x dans a
.11b3	4a		               lsr       ; ?/4
.11b4	4a		               lsr       ; ?/8 a = (ax)/8
.11b5	8d c6 11	               sta  bmphrcol
.11b8	98		               tya       ; Y dans a
.11b9	4a		               lsr       ; ?/2
.11ba	4a		               lsr       ; ?/4
.11bb	4a		               lsr       ; ?/8 a=Y/8
.11bc	8d c5 11	               sta  bmphrrow
.11bf	48		               pha
.11c0	98		               tya
.11c1	20 36 13	               jsr  pop
.11c4	60		               rts
.11c5			vicbmpfill
>11c5	00		bmphrrow       .byte     $00
>11c6	00		bmphrcol       .byte     $00
>11c7	00		bmphrmask      .byte     $00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.11c8			scrmaninit
.11c8	20 69 13	               jsr  pushreg        ; Sauvegarde tous les registres
.11cb	20 bc 10	               jsr  screendis      ; Disable screen
.11ce	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.11d0	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.11d3	a9 05		               lda  #vvert         ; vert pour la couleur
.11d5	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.11d8	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.11da	8d 86 02	               sta  bascol         ; texte.
.11dd	20 e8 11	               jsr  cls            ; Efface l'écran.
.11e0	20 c9 10	               jsr  screenena      ; enable screen
.11e3	20 98 13	               jsr  popreg         ; Récupère tous les registres.
.11e6	60		               rts
>11e7	8e		characterset   .byte b_uppercase
.11e8			cls
.11e8	08		               php                 ; Sauvegarde les registres
.11e9	48		               pha                 ;   modifiés.
.11ea	a9 93		               lda  #$93           ; Affiche le code basic de
.11ec	20 d2 ff	               jsr  chrout         ;   d'effacement d'écran.
.11ef	68		               pla                 ; Récupère les registres
.11f0	28		               plp                 ;   modifiés.
.11f1	60		               rts
.11f2			putnch
.11f2	20 69 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.11f5	20 d2 ff	again          jsr  chrout         ; On affiche A.
.11f8	ca		               dex                 ; Un de moins à faire.
.11f9	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.11fb	20 98 13	out            jsr  popreg         ; Récupère tous les registres.
.11fe	60		               rts
.11ff			putch
.11ff	08		               php                 ; Sauvegarde le registre de status.
.1200	20 d2 ff	               jsr  chrout         ; Affiche le caractère de Acc.
.1203	28		               plp                 ; Récupère le registre de status.
.1204	60		               rts
.1205			puts
.1205	20 fb 12	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.1208	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.120a	84 fc		               sty  zpage1+1       ;   dans ZP1.
.120c	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.120e	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.1210	f0 09		               beq  exit           ; Si $00 on sort.
.1212	20 d2 ff	               jsr  chrout         ; Affiche le caractères.
.1215	20 50 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1218	4c 0e 12	               jmp  next           ; Saute chercher le prochain carac.
.121b	20 36 13	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.121e	60		               rts
.121f			gotoxy
.121f	08		               php                 ; Sauvegarde le registre de
.1220	48		               pha                 ;   status et le registre a.
.1221	18		               clc                 ; Carry = 1 pour que kplot
.1222	8a		               txa                 ;   positionne le curseur.
.1223	48		               pha                 ; On inverse X et Y pcq kplot
.1224	98		               tya                 ;
.1225	aa		               tax                 ;   prend X comme la ligne
.1226	68		               pla                 ;
.1227	a8		               tay                 ;   et Y comme la colonne.
.1228	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.122b	68		               pla                 ; Récupère le registre a et
.122c	28		               plp                 ;   le registre de status.
.122d	60		               rts
.122e			cursor
=$0286			bascol    =    $0286               ; debugme
.122e	20 69 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.1231	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.1233	20 f0 ff	               jsr  kplot          ; On récupère la position du
.1236	8c 58 12	               sty  cx             ;   curseur et on la sauvegarde
.1239	8e 59 12	               stx  cy             ;   dans les vars locales.
.123c	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.123f	8d 5a 12	               sta  bcol           ; BASIC du texte.
.1242	4c 54 12	               jmp  out            ; c'est fini on sort.
.1245	ae 59 12	restore        ldx  cy             ; Comme C=1, On charge x avec
.1248	ac 58 12	               ldy  cx             ;   la ligne, y ace  la col.
.124b	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.124e	ad 5a 12	               lda  bcol           ; On replace la couleur par basic
.1251	8d 86 02	               sta  bascol         ;   sauvegardé.
.1254	20 98 13	out            jsr  popreg         ; Récupère tous les registres.
.1257	60		               rts
>1258	00		cx   .byte     $00
>1259	00		cy   .byte     $00
>125a	00		bcol .byte     $00
.125b			cursave
.125b	08		               php
.125c	38		               sec
.125d	20 2e 12	               jsr  cursor         ; Voir cette fonction plus haut.
.1260	28		               plp
.1261	60		               rts
.1262			curput
.1262	08		               php
.1263	18		               clc
.1264	20 2e 12	               jsr  cursor         ; Voir cette fonction plus haut.
.1267	28		               plp
.1268	60		               rts
.1269			putsxy
.1269	20 fb 12	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.126c	86 fb		               stx  zpage1         ; On place la position de la
.126e	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.1270	a0 00		               ldy  #$00           ; On charge l'index à 0.
.1272	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.1274	aa		               tax                 ;   dans X.
.1275	20 50 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1278	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.127a	a8		               tay                 ; dans Y.
.127b	20 1f 12	               jsr  gotoxy         ; on positionne le curseur.
.127e	20 50 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1281	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.1283	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.1285	20 05 12	               jsr  puts           ;   l'affiche.
.1288	20 36 13	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.128b	60		               rts
>128c	00 00		straddr   .word     $00
>128e	00		px        .byte     $00
>128f	00		py        .byte     $00
>1290	00 00		zp1       .word     $00
.1292			putscxy
.1292	20 fb 12	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.1295	86 fb		               stx  zpage1         ; On place la position de la
.1297	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.1299	a0 00		               ldy  #$00           ; On charge l'index à 0.
.129b	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.129e	48		               pha                 ;   actuelle de basic.
.129f	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.12a1	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.12a4	20 50 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.12a7	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.12a9	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.12ab	20 69 12	               jsr  putsxy         ;   l'affiche.
.12ae	68		               pla                 ; On replace la couleur basic
.12af	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.12b2	20 36 13	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.12b5	60		               rts
.12b6			putrahex
.12b6	20 69 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.12b9	20 89 15	               jsr  atohex         ; Conversion de a chaîne hexa.
.12bc	a2 26		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.12be	a0 15		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.12c0	20 05 12	               jsr  puts           ; Affiche la chaîne.
.12c3	20 98 13	               jsr  popreg         ; Récupère tous les registres.
.12c6	60		               rts
.12c7			kputrahexxy
.12c7			bputrahexxy
.12c7			putrahexxy
.12c7	08		               php                 ; Sauvegarde le registre de
.12c8	48		               pha                 ;   status et le registre a.
.12c9	20 89 15	               jsr  atohex         ; Convertion de a en hexadécimal.
.12cc	a2 23		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.12ce	a0 15		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.12d0	20 69 12	               jsr  putsxy         ; Positionne et affiche la chaîne.
.12d3	68		               pla                 ; Récupère le registre a et
.12d4	28		               plp                 ;   le registre de status.
.12d5	60		               rts
.12d6			putrahexcxy
.12d6	20 69 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.12d9	20 89 15	               jsr  atohex         ; Convertion de a en hexadécimal.
.12dc	a2 23		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.12de	a0 15		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.12e0	20 69 12	               jsr  putsxy         ; Colore, positionne et affiche la
.12e3	20 98 13	               jsr  popreg         ; Récupère tous les registres.
.12e6	60		               rts
.12e7			setinverse
.12e7	48		               pha
.12e8	a9 12		               lda  #$12
.12ea	20 d2 ff	               jsr  chrout
.12ed	68		               pla
.12ee	60		               rts
.12ef			clrinverse
.12ef	48		               pha
.12f0	a9 92		               lda  #$92
.12f2	20 d2 ff	               jsr  chrout
.12f5	68		               pla
.12f6	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>12f7	00		rp        .byte     0
>12f8	00		ra        .byte     0
>12f9	00 00		pc        .word     0
.12fb			pushall
.12fb			push
.12fb	08		          php            ; stack : flg, pcl, pch
.12fc	78		          sei
.12fd	8d f8 12	          sta  ra        ; save a
.1300	68		          pla            ; stack : pcl, pch
.1301	8d f7 12	          sta  rp        ; save rp
.1304	68		          pla            ; stack : pch
.1305	8d f9 12	          sta  pc        ; save pcl
.1308	68		          pla            ; stack : -
.1309	8d fa 12	          sta  pc+1      ; save pch
.130c	a5 fb		          lda  zpage1    ; get zpage1 low byte
.130e	48		          pha            ; stack : zp1l
.130f	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1311	48		          pha            ; stack : zp1h, zp1l
.1312	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1314	48		          pha            ; stack : zp2l, zp1h, zp1l
.1315	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1317	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1318	ad f7 12	          lda  rp        ; get rp
.131b	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.131c	ad f8 12	          lda  ra        ; get a
.131f	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1320	8a		          txa            ; get x
.1321	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1322	98		          tya            ; get y
.1323	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1324	ad fa 12	          lda  pc+1      ; get pch
.1327	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1328	ad f9 12	          lda  pc        ; get pcl
.132b	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.132c	ad f7 12	          lda  rp        ; get rp
.132f	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1330	ad f8 12	          lda  ra        ; get a
.1333	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1334	58		          cli
.1335	60		          rts
.1336			pullall
.1336			pull
.1336			popall
.1336			pop
.1336	78		          sei
.1337	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1338	8d f9 12	          sta  pc        ; save pcl
.133b	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.133c	8d fa 12	          sta  pc+1      ; save pch
.133f	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1340	a8		          tay            ; set y
.1341	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1342	aa		          tax            ; set x
.1343	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1344	8d f8 12	          sta  ra        ; save a
.1347	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1348	8d f7 12	          sta  rp        ; save rp
.134b	68		          pla            ; stack : zp2l, zp1h, zp1l
.134c	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.134e	68		          pla            ; stack : zp1h, zp1l
.134f	85 fd		          sta  zpage2    ; get zpage2 High byte
.1351	68		          pla            ; stack : zp1l
.1352	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1354	68		          pla            ; stack :
.1355	85 fb		          sta  zpage1    ; get zpage1 High byte
.1357	ad fa 12	          lda  pc+1      ; get pch
.135a	48		          pha            ; stack : pch
.135b	ad f9 12	          lda  pc
.135e	48		          pha            ; stack : pcl, pch
.135f	ad f7 12	          lda  rp        ; get rp
.1362	48		          pha            ; stack : rp, pcl, pch
.1363	ad f8 12	          lda  ra        ; set ra
.1366	58		          cli
.1367	28		          plp            ; stack : pcl, pch
.1368	60		          rts
.1369			pushreg
.1369	08		          php            ; stack : flg, pcl, pch
.136a	78		          sei
.136b	8d f8 12	          sta  ra        ; save a
.136e	68		          pla            ; stack : pcl, pch
.136f	8d f7 12	          sta  rp        ; save rp
.1372	68		          pla            ; stack : pch
.1373	8d f9 12	          sta  pc        ; save pcl
.1376	68		          pla            ; stack : -
.1377	8d fa 12	          sta  pc+1      ; save pch
.137a	ad f7 12	          lda  rp        ; get rp
.137d	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.137e	ad f8 12	          lda  ra        ; get a
.1381	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1382	8a		          txa            ; get x
.1383	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1384	98		          tya            ; get y
.1385	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1386	ad fa 12	          lda  pc+1      ; get pch
.1389	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.138a	ad f9 12	          lda  pc        ; get pcl
.138d	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.138e	ad f7 12	          lda  rp        ; get rp
.1391	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1392	ad f8 12	          lda  ra        ; get a
.1395	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1396	58		          cli
.1397	60		          rts
.1398			pullreg
.1398			popreg
.1398	78		          sei
.1399	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.139a	8d f9 12	          sta  pc        ; save pcl
.139d	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.139e	8d fa 12	          sta  pc+1      ; save pch
.13a1	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.13a2	a8		          tay            ; set y
.13a3	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.13a4	aa		          tax            ; set x
.13a5	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.13a6	8d f8 12	          sta  ra        ; save a
.13a9	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.13aa	8d f7 12	          sta  rp        ; save rp
.13ad	ad fa 12	          lda  pc+1      ; get pch
.13b0	48		          pha            ; stack : pch
.13b1	ad f9 12	          lda  pc
.13b4	48		          pha            ; stack : pcl, pch
.13b5	ad f7 12	          lda  rp        ; get rp
.13b8	48		          pha            ; stack : rp, pcl, pch
.13b9	ad f8 12	          lda  ra        ; set ra
.13bc	58		          cli
.13bd	28		          plp            ; stack : pcl, pch
.13be	60		          rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.13bf			blkfill
.13bf	20 fb 12	bf0            jsr  push
.13c2	20 8a 14	               jsr  savezp1
.13c5	84 fc		               sty  zpage1+1
.13c7	a0 00		               ldy  #$00
.13c9	84 fb		               sty  zpage1
.13cb	91 fb		bf1            sta  (zpage1),y
.13cd	c8		               iny
.13ce	d0 fb		               bne  bf1
.13d0	20 99 14	               jsr  restzp1
.13d3	20 36 13	               jsr  pop
.13d6	60		               rts
.13d7			memfill
.13d7	20 fb 12	               jsr  push
.13da	20 bf 13	mf1            jsr  blkfill
.13dd	c8		               iny
.13de	ca		               dex
.13df	d0 f9		               bne  mf1
.13e1	20 36 13	               jsr  pop
.13e4	60		               rts
.13e5			memmove
.13e5	20 fb 12	               jsr  push
.13e8	ba		               tsx            ; On se crée un pointeur ...
.13e9	8a		               txa
.13ea	18		               clc
.13eb	69 0b		               adc  #11
.13ed	a8		               tay
.13ee	a2 06		               ldx  #$06
.13f0	b9 00 01	nextbyte       lda  $0100,y
.13f3	99 3f 14	               sta  words,y
.13f6	c8		               iny
.13f7	ca		               dex
.13f8	d0 f6		               bne  nextbyte
.13fa	ad 3f 14	               lda  s
.13fd	8d 16 14	               sta  source+1
.1400	ad 40 14	               lda  s+1
.1403	8d 17 14	               sta  source+2
.1406	ad 41 14	               lda  d
.1409	8d 13 14	               sta  destin+1
.140c	ad 42 14	               lda  d+1
.140f	8d 14 14	               sta  destin+2
.1412	ad ff ff	destin         lda  $ffff
.1415	8d ff ff	source         sta  $ffff
.1418	ee 13 14	               inc  destin+1
.141b	d0 03		               bne  src
.141d	ee 14 14	               inc  destin+2
.1420	ee 16 14	src            inc  source+1
.1423	d0 03		               bne  cnt
.1425	ee 17 14	               inc  source+2
.1428	ad 43 14	cnt            lda  compte
.142b	d0 08		               bne  decit
.142d	ad 44 14	               lda  compte+1
.1430	f0 09		               beq  fini
.1432	ce 44 14	               dec  compte+1
.1435	ce 43 14	decit          dec  compte
.1438	4c 12 14	               jmp  destin
.143b	20 36 13	fini           jsr  pop
.143e	60		               rts
.143f			words
>143f	00 00		s         .word     $0000
>1441	00 00		d         .word     $0000
>1443	00 00		compte    .word     $0000
.1445			decword
.1445	20 fb 12	               jsr  push
.1448	86 fd		               stx  zpage2
.144a	84 fe		               sty  zpage2+1
.144c	20 36 13	               jsr  pop
.144f	60		               rts
.1450			inczpage1
.1450			inczp1
.1450	08		               php
.1451	48		               pha
.1452	e6 fb		               inc  zpage1
.1454	a5 fb		               lda  zpage1
.1456	d0 02		               bne  nopage
.1458	e6 fc		               inc  zpage1+1
.145a	68		nopage         pla
.145b	28		               plp
.145c	60		               rts
.145d			deczpage1
.145d			deczp1
.145d	08		               php
.145e	48		               pha
.145f	c6 fb		               dec  zpage1
.1461	a5 fb		               lda  zpage1
.1463	c9 ff		               cmp  #$ff
.1465	f0 02		               beq  report
.1467	d0 02		               bne  nopage
.1469	c6 fc		report         dec  zpage1+1
.146b	68		nopage         pla
.146c	28		               plp
.146d	60		               rts
.146e			inczpage2
.146e			inczp2
.146e	08		               php
.146f	48		               pha
.1470	e6 fd		               inc  zpage2
.1472	a5 fd		               lda  zpage2
.1474	d0 02		               bne  nopage
.1476	e6 fe		               inc  zpage2+1
.1478	68		nopage         pla
.1479	28		               plp
.147a	60		               rts
.147b			deczpage2
.147b			deczp2
.147b	08		               php
.147c	c6 fd		               dec  zpage2
.147e	a5 fd		               lda  zpage2
.1480	c9 ff		               cmp  #$ff
.1482	f0 02		               beq  report
.1484	d0 02		               bne  nopage
.1486	c6 fe		report         dec  zpage2+1
.1488	28		nopage         plp
.1489	60		               rts
.148a			savezp1
.148a	08		               php
.148b	48		               pha
.148c	a5 fb		               lda  zpage1
.148e	8d 1b 15	               sta  zp1
.1491	a5 fc		               lda  zpage1+1
.1493	8d 1c 15	               sta  zp1+1
.1496	68		               pla
.1497	28		               plp
.1498	60		               rts
.1499			restzp1
.1499	08		               php
.149a	48		               pha
.149b	ad 1b 15	               lda  zp1
.149e	85 fb		               sta  zpage1
.14a0	ad 1c 15	               lda  zp1+1
.14a3	85 fc		               sta  zpage1+1
.14a5	68		               pla
.14a6	28		               plp
.14a7	60		               rts
.14a8			savezp2
.14a8	08		               php
.14a9	48		               pha
.14aa	a5 fd		               lda  zpage2
.14ac	8d 1d 15	               sta  zp2
.14af	a5 fe		               lda  zpage2+1
.14b1	8d 1e 15	               sta  zp2+1
.14b4	68		               pla
.14b5	28		               plp
.14b6	60		               rts
.14b7			restzp2
.14b7	08		               php
.14b8	48		               pha
.14b9	ad 1d 15	               lda  zp2
.14bc	85 fd		               sta  zpage2
.14be	ad 1e 15	               lda  zp2+1
.14c1	85 fe		               sta  zpage2+1
.14c3	68		               pla
.14c4	28		               plp
.14c5	60		               rts
.14c6			xy2addr
.14c6	08		               php
.14c7	48		               pha
.14c8	8a		               txa
.14c9	48		               pha
.14ca	98		               tya
.14cb	48		               pha
.14cc	ad 16 15	               lda  addr1+1
.14cf	8d 18 15	               sta  addr2+1
.14d2	ad 15 15	               lda  addr1
.14d5	8d 17 15	               sta  addr2
.14d8	c0 00		               cpy  #$00
.14da	f0 0f		               beq  addx
.14dc	18		moreline       clc
.14dd	6d 14 15	               adc  ymult
.14e0	90 03		               bcc  norepy
.14e2	ee 18 15	               inc  addr2+1
.14e5	8d 17 15	norepy         sta  addr2
.14e8	88		               dey
.14e9	d0 f1		               bne  moreline
.14eb	8a		addx           txa
.14ec	18		               clc
.14ed	6d 17 15	               adc  addr2
.14f0	90 03		               bcc  thatsit
.14f2	ee 18 15	               inc  addr2+1
.14f5	8d 17 15	thatsit        sta  addr2
.14f8	68		               pla
.14f9	a8		               tay
.14fa	68		               pla
.14fb	aa		               tax
.14fc	68		               pla
.14fd	28		               plp
.14fe	60		               rts
.14ff			loop
.14ff	ce 1f 15	               dec  loopcount
.1502	d0 03		               bne  norep
.1504	ce 20 15	               dec  loopcount+1
.1507	ad 1f 15	norep          lda  loopcount
.150a	c9 00		               cmp  #$00
.150c	d0 05		               bne  out
.150e	4d 20 15	               eor  loopcount+1
.1511	c9 ff		               cmp  #$ff
.1513	60		out            rts
>1514	28		ymult          .byte     40
>1515	00 00		addr1          .word     $0000
>1517	00 00		addr2          .word     $0000
>1519	00 00		bytecnt        .word     $0000
>151b	00 00		zp1            .word     $0000
>151d	00 00		zp2            .word     $0000
>151f	00 00		loopcount      .word     $0000

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1521	01		a2hexcol       .byte     1              ; pour aputscxy
>1522	00		a2hexbkcol     .byte     %00000000
.1523			a2hexpos
>1523	00		a2hexpx        .byte     0              ; pour aputsxy
>1524	00		a2hexpy        .byte     0
>1525	24		a2hexprefix    .byte     "$"            ; pour aputs
>1526	00 00		a2hexstr       .word     $00
>1528	00 00		               .word     $00
>152a	00		               .byte     0              ; 0 end string
>152b	01		abincol        .byte     1
>152c	00		abinbkcol      .byte     %00000000
>152d	30 30 30 30	abin           .null     "00000000"
>1531	30 30 30 30 00
>1536	20 20 20 00	adec           .null     "   "
.153a			putahexfmtxy
.153a	20 fb 12	               jsr  push
.153d	20 89 15	               jsr  atohex
.1540	ae 23 15	               ldx  a2hexpx
.1543	ac 24 15	               ldy  a2hexpy
.1546	20 1f 12	               jsr  gotoxy
.1549	a2 25		               ldx  #<a2hexprefix
.154b	a0 15		               ldy  #>a2hexprefix
.154d	20 05 12	               jsr  puts
.1550	20 36 13	               jsr  pop
.1553	60		               rts
.1554			putahexfmt
.1554	20 fb 12	               jsr  push
.1557	20 89 15	               jsr  atohex
.155a	a2 25		               ldx  #<a2hexprefix
.155c	a0 15		               ldy  #>a2hexprefix
.155e	20 05 12	               jsr  puts
.1561	20 36 13	               jsr  pop
.1564	60		               rts
.1565			putahex
.1565	20 fb 12	               jsr  push
.1568	20 89 15	               jsr  atohex
.156b	a2 26		               ldx  #<a2hexstr
.156d	a0 15		               ldy  #>a2hexstr
.156f	20 05 12	               jsr  puts
.1572	20 36 13	               jsr  pop
.1575	60		               rts
.1576			nibtohex
.1576	08		               php
.1577	29 0f		               and  #$0f
.1579	f8		               sed
.157a	18		               clc
.157b	69 90		               adc  #$90
.157d	69 40		               adc  #$40
.157f	d8		               cld
.1580	28		               plp
.1581	60		               rts
.1582			lsra4bits
.1582	08		               php
.1583	4a		               lsr
.1584	4a		               lsr
.1585	4a		               lsr
.1586	4a		               lsr
.1587	28		               plp
.1588	60		               rts
.1589			atohex
.1589	08		               php
.158a	48		               pha
.158b	48		               pha
.158c	20 82 15	               jsr  lsra4bits
.158f	20 76 15	               jsr  nibtohex
.1592	8d 26 15	               sta  a2hexstr
.1595	68		               pla
.1596	20 76 15	               jsr  nibtohex
.1599	8d 27 15	               sta  a2hexstr+1
.159c	a9 00		               lda  #$00                ; set end of string
.159e	8d 28 15	               sta  a2hexstr+2
.15a1	68		               pla
.15a2	28		               plp
.15a3	60		               rts
.15a4			xy2hex
.15a4	20 fb 12	               jsr  push
.15a7	20 89 15	               jsr  atohex
.15aa	8a		               txa
.15ab	48		               pha
.15ac	20 82 15	               jsr  lsra4bits
.15af	20 76 15	               jsr  nibtohex
.15b2	8d 26 15	               sta  a2hexstr
.15b5	68		               pla
.15b6	20 76 15	               jsr  nibtohex
.15b9	8d 27 15	               sta  a2hexstr+1
.15bc	98		               tya
.15bd	48		               pha
.15be	20 82 15	               jsr  lsra4bits
.15c1	20 76 15	               jsr  nibtohex
.15c4	8d 28 15	               sta  a2hexstr+2
.15c7	68		               pla
.15c8	20 76 15	               jsr  nibtohex
.15cb	8d 29 15	               sta  a2hexstr+3
.15ce	a9 00		               lda  #$00                ; 0 ended string
.15d0	8d 2a 15	               sta  a2hexstr+4
.15d3	20 36 13	               jsr  pop
.15d6			atobin
.15d6	20 fb 12	               jsr  push
.15d9	a2 08		               ldx  #8
.15db	a0 00		               ldy  #0
.15dd	18		               clc
.15de	2a		nextbit        rol
.15df	48		               pha
.15e0	69 00		               adc  #$00
.15e2	29 01		               and  #$01
.15e4	20 76 15	               jsr  nibtohex
.15e7	99 2d 15	               sta  abin,y
.15ea	68		               pla
.15eb	c8		               iny
.15ec	ca		               dex
.15ed	d0 ef		               bne  nextbit
.15ef	a9 00		               lda  #0
.15f1	99 2d 15	               sta  abin,y
.15f4	20 36 13	               jsr  pull
.15f7	60		               rts
.15f8			abinsetmccol
.15f8	20 69 13	               jsr  pushreg
.15fb	20 98 13	               jsr  popreg
.15fe	60		               rts
.15ff			putabin
.15ff	20 d6 15	               jsr     atobin
.1602	20 fb 12	               jsr     push
.1605	a2 2d		               ldx     #<abin
.1607	a0 15		               ldy     #>abin
.1609	20 05 12	               jsr     puts
.160c	20 36 13	               jsr     pop
.160f	60		               rts
.1610			printabin
.1610	20 fb 12	               jsr     push
.1613	a2 2d		               ldx     #<abin
.1615	a0 15		               ldy     #>abin
.1617	20 05 12	               jsr     puts
.161a	20 36 13	               jsr     pop
.161d	60		               rts
.161e			putabinfmt
.161e	08		               php
.161f	48		               pha
.1620	a9 25		               lda     #"%"
.1622	20 ff 11	               jsr     putch
.1625	68		               pla
.1626	20 ff 15	               jsr     putabin
.1629	28		               plp
.162a	60		               rts
.162b			putabinxy
.162b	20 1f 12	               jsr     gotoxy
.162e	20 ff 15	               jsr     putabin
.1631	60		               rts
.1632			putabinfmtxy
.1632	20 1f 12	               jsr     gotoxy
.1635	20 1e 16	               jsr     putabinfmt
.1638	60		               rts
.1639			atodec
.1639	20 fb 12	               jsr  push
.163c	f8		               sed            ; On se place en mode décimal.
.163d	aa		               tax            ; On déplace a dans x.
.163e	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.1640	a9 00		               lda  #$00      ; 0 dans A.
.1642	18		nextbit        clc            ; Bit carry a 0.
.1643	69 01		               adc  #$01      ; Ajoute 1 a A.
.1645	90 01		               bcc  decx      ; Pas de carry, pas de report.
.1647	c8		               iny            ; On incrémente Y
.1648	ca		decx           dex            ; X=X-1
.1649	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.164b	48		               pha            ; A sur le stack.
.164c	98		               tya            ; Y dans A (MSB)
.164d	20 76 15	               jsr  nibtohex  ; a hex petsci ...
.1650	8d 36 15	               sta  adec      ; ... dans tampon.
.1653	68		               pla            ; Récupere A
.1654	48		               pha            ;
.1655	20 76 15	               jsr  nibtohex
.1658	8d 38 15	               sta  adec+2
.165b	68		               pla
.165c	6a		               ror
.165d	6a		               ror
.165e	6a		               ror
.165f	6a		               ror
.1660	20 76 15	               jsr  nibtohex
.1663	8d 37 15	               sta  adec+1
.1666	d8		               cld            ; On revient en mode binaire.
.1667	20 36 13	               jsr  pull
.166a	60		               rts
.166b			putadec
.166b	20 fb 12	               jsr  push
.166e	20 39 16	               jsr  atodec
.1671	a2 36		               ldx  #<adec
.1673	a0 15		               ldy  #>adec+1
.1675	20 05 12	               jsr  puts
.1678	20 36 13	               jsr  pop
.167b	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.167c			waitstop
.167c	08		            php         ;\ Sauvegarde les drapeaux
.167d	48		            pha         ;/  et l'accumulateur.
.167e	a9 00		            lda #0      ;\ Efface le tampon
.1680	85 c6		            sta 198     ;/  du clavier.
.1682	20 ed f6	wait        jsr k_stop  ; Cherche la clef [RUN/STOP].
.1685	d0 fb		            bne  wait   ;  Elle n'est pas pesée.
.1687	68		            pla         ;\ Récupère l'accmulateur et
.1688	28		            plp         ;/  les drapeaux.
.1689	60		            rts
.168a			anykey
.168a	08		            php         ;\ Sauvegarde les drapeaux
.168b	48		            pha         ;/  et l'accumulateur.
.168c	a5 cb		nokey       lda 203     ; Lit la matrice de la clef actuelle dans le tampon.
.168e	c9 40		            cmp #64     ; Si 64 alors aucune clef n'est appuyée.
.1690	f0 fa		            beq nokey   ; On attend qu'il y en aie une.
.1692	20 98 16	            jsr kbfree  ; On attend que le clavier soit relâché.
.1695	68		            pla         ;\ Récupère l'accmulateur et
.1696	28		            plp         ;/  les drapeaux.
.1697	60		            rts
.1698			kbfree
.1698	08		            php         ;\ Sauvegarde les drapeaux
.1699	48		            pha         ;/  et l'accumulateur.
.169a	a5 cb		iskey       lda 203     ; Lit la matrice de la clef actuelle dans le tampon.
.169c	c9 40		            cmp #64     ; Si 64 alors aucune clef n'est appuyée.
.169e	d0 fa		            bne iskey   ; On attend qu'il y en aie aucune.
.16a0	68		            pla         ;\ Récupère l'accmulateur et
.16a1	28		            plp         ;/  les drapeaux.
.16a2	60		            rts
.16a3			getkey
.16a3	08		            php         ; Sauvegarde les drapeaux.
.16a4	20 e4 ff	gkagain     jsr getin   ; Tente de lire une clef.
.16a7	c9 00		            cmp #0      ; 0 si aucune.
.16a9	f0 f9		            beq gkagain ; Aucune, alors on attend.
.16ab	08		            php         ; Récupère les drapeaux.
.16ac	60		            rts
.16ad			kbflushbuff
.16ad	08		            php         ;\ Sauvegarde les drapeaux
.16ae	48		            pha         ;/  et l'accumulateur.
.16af	a9 00		            lda #0      ;\ Efface le tampon
.16b1	85 c6		            sta 198     ;/  du clavier.
.16b3	68		            pla         ;\ Récupère l'accmulateur et
.16b4	28		            plp         ;/  les drapeaux.
.16b5	60		            rts
.16b6			waitkey
.16b6	08		            php         ;\ Sauvegarde les drapeaux
.16b7	48		            pha         ;/  et l'accumulateur.
.16b8	8d f5 16	            sta thekey  ; Sauvegarde la clef attendue.
.16bb	a9 00		            lda #0      ;\ Efface le tampon
.16bd	85 c6		            sta 198     ;/  du clavier.
.16bf	20 e4 ff	nogood      jsr getin   ; Tente de lire une clef.
.16c2	cd f5 16	            cmp thekey  ; La compare avec celle attendue.
.16c5	d0 f8		            bne nogood  ; Boucle si ce l'est pas la bonne.
.16c7	20 d2 ff	            jsr chrout  ; L'affiche quand elle est bonne.
.16ca	68		            pla         ;\ Récupère l'accmulateur et
.16cb	28		            plp         ;/  les drapeaux.
.16cc	60		            rts
.16cd			waitspace
.16cd	08		            php         ;\ Sauvegarde les drapeaux
.16ce	48		            pha         ;/  et l'accumulateur.
.16cf	a9 00		            lda #0      ;\ Efface le tampon
.16d1	85 c6		            sta 198     ;/  du clavier.
.16d3	a9 cb		nospace     lda #203    ; Lit la matrice du clavier.
.16d5	c9 3c		            cmp #60     ; 60 dans la matrice = barre d'espace appuyée.
.16d7	08		            php         ; Sauvegarde les drapeaux pour la comparaison.
.16d8	a9 00		            lda #0      ;\ Efface le tampon
.16da	85 c6		            sta 198     ;/  du clavier.
.16dc	28		            plp         ; Récupère les drapeaux pour la comparaison.
.16dd	d0 f4		            bne nospace
.16df	68		            pla         ;\ Récupère l'accmulateur et
.16e0	28		            plp         ;/  les drapeaux.
.16e1			waitreturn
.16e1	08		            php         ;\ Sauvegarde les drapeaux
.16e2	48		            pha         ;/  et l'accumulateur.
.16e3	a9 00		            lda #0      ;\ Efface le tampon
.16e5	85 c6		            sta 198     ;/  du clavier.
.16e7	a9 cb		noreturn    lda #203    ; Lit la matrice du clavier.
.16e9	c9 01		            cmp #1      ; 1 dans la matrice = [RETURN] appuyé.
.16eb	08		            php         ; Sauvegarde les drapeaux pour la comparaison.
.16ec	a9 00		            lda #0      ;\ Efface le tampon
.16ee	85 c6		            sta 198     ;/  du clavier.
.16f0	28		            plp         ; Récupère les drapeaux pour la comparaison.
.16f1	d0 f4		            bne noreturn
.16f3	68		            pla         ;\ Récupère l'accmulateur et
.16f4	28		            plp         ;/  les drapeaux.
>16f5	00		thekey      .byte   0
>16f6	01		thecount    .byte   $01
>16f7	00 00 00 00	asciitorom  .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>16fb	00 00 00 00 00 00 00 00 00 0d 00 00
>1707	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>170b	00 00 00 00 00 00 00 00 00 00 00 00
>1717	20 21 22 23	            .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>171b	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1727	30 31 32 33	            .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>172b	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1737	00 01 02 03	            .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>173b	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1747	10 11 12 13	            .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>174b	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1757	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>175b	00 00 00 00 00 00 00 00 00 00 00 00
>1767	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>176b	00 00 00 00 00 00 00 00 00 00 00 00
>1777	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>177b	00 00 00 00 00 00 00 00 00 00 00 00
>1787	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>178b	00 00 00 00 00 00 00 00 00 00 00 00
>1797	60 61 62 63	            .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>179b	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>17a7	70 71 72 73	            .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>17ab	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>17b7	40 41 42 43	            .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>17bb	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>17c7	50 51 52 53	            .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>17cb	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>17d7	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>17db	00 00 00 00 00 00 00 00 00 00 00 00
>17e7	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>17eb	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-showregs.asm

.17f7			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.17f7	08		               php                 ; Sauvegarde le registre de status sur stack.
.17f8	8d f2 19	               sta  rega           ; Sauvegarde Acc en mémoire.
.17fb	68		               pla                 ; Récupère le registre de status du stack.
.17fc	8d f5 19	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.17ff	8e f3 19	               stx  regx           ; Sauvegarde le registre X en mémoire.
.1802	8c f4 19	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.1805	ba		               tsx                 ; Copie le registre S dans X.
.1806	8e f6 19	               stx  regs           ; Sauvegarde le registre S en mémoire.
.1809	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.180a	8d f8 19	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.180d	8d fa 19	               sta  regpcl2        ; ... une seconde fois.
.1810	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.1811	8d f7 19	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.1814	8d f9 19	               sta  regpch2        ; ... une seconde fois.
.1817	ad f2 19	               lda  rega           ; On commence par le registre Acc.
.181a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.181b	20 76 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.181e	8d 8f 19	               sta  vala+1         ; ... et le place dans la chaine.
.1821	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1822	20 82 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1825	20 76 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1828	8d 8e 19	               sta  vala           ; ... et le place dans la chaine.
.182b	ad f4 19	               lda  regy           ; Ensuite, le registre Y.
.182e	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.182f	20 76 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1832	8d a6 19	               sta  valy+1         ; ... et le place dans la chaine.
.1835	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1836	20 82 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1839	20 76 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.183c	8d a5 19	               sta  valy           ; ... et le place dans la chaine.
.183f	ad f3 19	               lda  regx           ; Ensuite, le registre X.
.1842	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1843	20 76 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1846	8d 9a 19	               sta  valx+1         ; ... et le place dans la chaine.
.1849	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.184a	20 82 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.184d	20 76 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1850	8d 99 19	               sta  valx           ; ... et le place dans la chaine.
.1853	ad f5 19	               lda  regp           ; Ensuite, le registre de status.
.1856	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1857	20 76 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.185a	8d b1 19	               sta  valp+1         ; ... et le place dans la chaine.
.185d	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.185e	20 82 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1861	20 76 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1864	8d b0 19	               sta  valp           ; ... et le place dans la chaine.
.1867	ad f6 19	               lda  regs           ; Ensuite, le pointeur de stack.
.186a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.186b	20 76 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.186e	8d bc 19	               sta  vals+1         ; ... et le place dans la chaine.
.1871	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1872	20 82 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1875	20 76 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1878	8d bb 19	               sta  vals           ; ... et le place dans la chaine.
.187b	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.187c	ad fa 19	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.187f	69 00		               adc  #$00           ; On y ajoute 1.
.1881	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.1883	ee f9 19	               inc  regpch2        ; ... en incrémentant le MSB.
.1886	8d fa 19	noreport       sta  regpcl2        ; On le sauvegarde.
.1889	ad fa 19	               lda  regpcl2        ; On récupère la partie basse du compteur.
.188c	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.188d	20 76 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1890	8d cc 19	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.1893	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1894	20 82 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1897	20 76 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.189a	8d cb 19	               sta  valpcl         ; ... et lace le code à la position "--X-".
.189d	ad f9 19	               lda regpch2         ; On récupère la partie haute du compteur.
.18a0	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18a1	20 76 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18a4	8d ca 19	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.18a7	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.18a8	20 82 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18ab	20 76 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18ae	8d c9 19	               sta  valpch         ; ... et lace le code à la position "X---".
.18b1	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.18b3	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18b4	20 76 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18b7	8d dd 19	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.18ba	68		               pla
.18bb	20 82 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18be	20 76 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18c1	8d dc 19	               sta  valz1l         ; ... et lace le code à la position "--X-".
.18c4	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.18c6	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18c7	20 76 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18ca	8d db 19	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.18cd	68		               pla
.18ce	20 82 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18d1	20 76 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18d4	8d da 19	               sta  valz1h         ; ... et lace le code à la position "X---".
.18d7	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.18d9	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18da	20 76 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18dd	8d ee 19	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.18e0	68		               pla
.18e1	20 82 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18e4	20 76 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18e7	8d ed 19	               sta  valz2l         ; ... et lace le code à la position "--X-".
.18ea	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.18ec	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18ed	20 76 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18f0	8d ec 19	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.18f3	68		               pla
.18f4	20 82 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18f7	20 76 15	               jsr  nibtohex
.18fa	8d eb 19	               sta  valz2h         ; ... et lace le code à la position "X---".
.18fd	20 e7 12	               jsr  setinverse     ; On se place en mode inverse vidéo.
.1900	20 69 13	               jsr  pushreg
.1903	a2 86		               ldx  #<srega
.1905	a0 19		               ldy  #>srega
.1907	20 92 12	               jsr  putscxy
.190a	20 98 13	               jsr  popreg
.190d	20 69 13	               jsr  pushreg
.1910	a2 92		               ldx  #<sregx
.1912	a0 19		               ldy  #>sregx
.1914	20 92 12	               jsr  putscxy
.1917	20 98 13	               jsr  popreg
.191a	20 69 13	               jsr  pushreg
.191d	a2 9d		               ldx  #<sregy
.191f	a0 19		               ldy  #>sregy
.1921	20 92 12	               jsr  putscxy
.1924	20 98 13	               jsr  popreg
.1927	20 69 13	               jsr  pushreg
.192a	a2 a9		               ldx  #<sregp
.192c	a0 19		               ldy  #>sregp
.192e	20 92 12	               jsr  putscxy
.1931	20 98 13	               jsr  popreg
.1934	20 69 13	               jsr  pushreg
.1937	a2 b4		               ldx  #<sregs
.1939	a0 19		               ldy  #>sregs
.193b	20 92 12	               jsr  putscxy
.193e	20 98 13	               jsr  popreg
.1941	20 69 13	               jsr  pushreg
.1944	a2 c0		               ldx  #<sregpc
.1946	a0 19		               ldy  #>sregpc
.1948	20 92 12	               jsr  putscxy
.194b	20 98 13	               jsr  popreg
.194e	20 69 13	               jsr  pushreg
.1951	a2 d0		               ldx  #<sregz1
.1953	a0 19		               ldy  #>sregz1
.1955	20 92 12	               jsr  putscxy
.1958	20 98 13	               jsr  popreg
.195b	20 69 13	               jsr  pushreg
.195e	a2 e1		               ldx  #<sregz2
.1960	a0 19		               ldy  #>sregz2
.1962	20 92 12	               jsr  putscxy
.1965	20 98 13	               jsr  popreg
.1968	20 ef 12	               jsr  clrinverse     ; On quitte le mode inverse vidéo.
.196b	ad f7 19	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.196e	48		               pha                 ; ... à la bonne position sur la pile.
.196f	ad f8 19	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.1972	48		               pha                 ; ... à la bonne position sur la pile.
.1973	ae f6 19	               ldx  regs           ; On replace tous les registre à leurs ...
.1976	9a		               txs                 ; ...
.1977	ac f4 19	               ldy  regy           ; ...
.197a	ae f3 19	               ldx  regx           ; ...
.197d	ad f5 19	               lda  regp           ; ...
.1980	48		               pha                 ; ...
.1981	ad f2 19	               lda  rega           ; ...
.1984	28		               plp                 ; ... valeurs initiales
.1985	60		               rts
>1986	07 01 17	srega   .byte   cyellow,coln+1,line
>1989	20 20 41 3a	        .text   '  a:$' ;4,24
>198d	24
>198e	00 00 20 00	vala    .byte   0,0,32,0
>1992	03 09 17	sregx   .byte   ccyan,coln+9,line
>1995	20 58 3a 24	        .text   ' x:$' ;4,24
>1999	00 00 20 00	valx    .byte   0,0,32,0
>199d	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>19a0	20 59 3a 20	        .text   ' y: $' ;4,24
>19a4	24
>19a5	00 00 20 00	valy    .byte   0,0,32,0
>19a9	08 18 17	sregp   .byte   corange,coln+24,line
>19ac	20 50 3a 24	        .text   ' p:$' ;4,24
>19b0	00 00 20 00	valp    .byte   0,0,32,0
>19b4	0a 1f 17	sregs   .byte   clightred,coln+31,line
>19b7	20 53 3a 24	        .text   ' s:$' ;4,24
>19bb	00 00 20 20	vals    .byte   0,0,32,32,0
>19bf	00
>19c0	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>19c4	20 50 43 3a	        .text   ' pc:$' ;4,24
>19c8	24
>19c9	00 00		valpch  .byte   0,0
>19cb	00 00 20 20	valpcl  .byte   0,0,32,32,0
>19cf	00
>19d0	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>19d4	20 5a 50 31	        .text   ' zp1:$' ;4,24
>19d8	3a 24
>19da	00 00		valz1h  .byte   0,0
>19dc	00 00 20 20	valz1l  .byte   0,0,32,32,0
>19e0	00
>19e1	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>19e5	20 5a 50 32	        .text   ' zp2:$' ;4,24
>19e9	3a 24
>19eb	00 00		valz2h  .byte   0,0
>19ed	00 00 20 20	valz2l  .byte   0,0,32,32,0
>19f1	00
>19f2	00		rega    .byte   0
>19f3	00		regx    .byte   0
>19f4	00		regy    .byte   0
>19f5	00		regp    .byte   0
>19f6	00		regs    .byte   0
>19f7	00		regpch  .byte   0
>19f8	00		regpcl  .byte   0
>19f9	00		regpch2 .byte   0
>19fa	00		regpcl2 .byte   0
>19fb	00		vzp1h   .byte   0
>19fc	00		vzp1l   .byte   0
>19fd	00		vzp2h   .byte   0
>19fe	00		vzp2l   .byte   0

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-drawbox.asm

.19ff			db_tline
.19ff	08		                php                 ; Sauvegarde les registres.
.1a00	48		                pha
.1a01	a9 b0		                lda #tleft          ; Coin suppérieur gauche.
.1a03	8d c0 1a	                sta db_left
.1a06	a9 c0		                lda #hline          ; Ligne horizontale.
.1a08	8d c2 1a	                sta db_mid
.1a0b	a9 ae		                lda #tright         ; Coin suppérieur droit.
.1a0d	8d c1 1a	                sta db_right
.1a10	28		                plp                 ; Récupère les registres.
.1a11	68		                pla
.1a12	20 5b 1a	                jsr db_drawline
.1a15	60		                rts
.1a16			db_bline
.1a16	08		                php                 ; Sauvegarde les registres.
.1a17	48		                pha
.1a18	a9 ad		                lda #bleft          ; Coin inférieur gauche.
.1a1a	8d c0 1a	                sta db_left
.1a1d	a9 c0		                lda #hline          ; Ligne horizontale.
.1a1f	8d c2 1a	                sta db_mid
.1a22	a9 bd		                lda #bright         ; Coin inférieur droit.
.1a24	8d c1 1a	                sta db_right
.1a27	28		                plp                 ; Récupère les registres.
.1a28	68		                pla
.1a29	20 5b 1a	                jsr db_drawline
.1a2c	60		                rts
.1a2d			db_eline
.1a2d	08		                php                 ; Sauvegarde les registres.
.1a2e	48		                pha
.1a2f	a9 dd		                lda #vline          ; Ligne verticale.
.1a31	8d c0 1a	                sta db_left
.1a34	a9 20		                lda #space          ; Caractère espace.
.1a36	8d c2 1a	                sta db_mid
.1a39	a9 dd		                lda #vline          ; Ligne verticale.
.1a3b	8d c1 1a	                sta db_right
.1a3e	28		                plp                 ; Récupère les registres.
.1a3f	68		                pla
.1a40	20 5b 1a	                jsr db_drawline
.1a43	60		                rts
.1a44			db_hline
.1a44	08		                php                 ; Sauvegarde les registres.
.1a45	48		                pha
.1a46	a9 ab		                lda #hleft          ; Extrémité gauche d'une ligne médianne.
.1a48	8d c0 1a	                sta db_left
.1a4b	a9 c0		                lda #hline          ; Ligne horizontale.
.1a4d	8d c2 1a	                sta db_mid
.1a50	a9 b3		                lda #hright         ; Extrémité droite d'une ligne médianne.
.1a52	8d c1 1a	                sta db_right
.1a55	28		                plp                 ; Récupère les registres.
.1a56	68		                pla
.1a57	20 5b 1a	                jsr db_drawline
.1a5a	60		                rts
.1a5b			db_drawline
.1a5b	20 69 13	                jsr pushreg         ; Sauvegarde les registres.
.1a5e	ad 86 02	                lda bascol          ; Sauvegarde de la ...
.1a61	8d c9 1a	                sta drawbox_bascol  ; ... couleur basic.
.1a64	ad c7 1a	                lda drawbox_colour  ; Sélectionne la couleur...
.1a67	8d 86 02	                sta bascol          ; ... de la fenêtre.
.1a6a	c9 10		                cmp #$10            ; Couleur inverse vidéo?
.1a6c	30 05		                bmi noreverse       ; Non ...
.1a6e	a9 12		                lda #18             ; Oui on place basic en inverse ...
.1a70	20 d2 ff	                jsr chrout          ; Vidéo.
.1a73	ae c8 1a	noreverse       ldx drawbox_curline ; On positionne le curseur au ...
.1a76	ac c4 1a	                ldy drawbox_left    ; ... coin suppérieur gauche ...
.1a79	18		                clc                 ; ... de la fenêtre.
.1a7a	20 f0 ff	                jsr plot
.1a7d	ad c0 1a	                lda db_left         ; On dessine le premier caractère.
.1a80	20 d2 ff	                jsr chrout
.1a83	ad c2 1a	                lda db_mid          ; On dessine la ligne horizontale ...
.1a86	ae c5 1a	                ldx drawbox_width   ; ... selon la largeur voulue ...
.1a89	ca		                dex                 ; ... de la fenêtre moins les ...
.1a8a	ca		                dex                 ; ... deux caractères d'extrémité.
.1a8b	20 f2 11	                jsr putnch
.1a8e	ad c1 1a	                lda db_right        ; On dessine le dernier caractère.
.1a91	20 d2 ff	                jsr chrout
.1a94	a9 92		                lda #146            ; On met fin à l'inverse vidéo.
.1a96	20 d2 ff	                jsr chrout
.1a99	ad c9 1a	                lda drawbox_bascol  ; On récupère et replace la ...
.1a9c	8d 86 02	                sta bascol          ; ... couleur de basic.
.1a9f	ee c8 1a	                inc drawbox_curline ; Passe à la ligne suivante.
.1aa2	20 98 13	                jsr popreg          ; Récupère les registres.
.1aa5	60		                rts
.1aa6			db_drawbox
.1aa6	20 69 13	                jsr pushreg         ; Sauvegarde les registres.
.1aa9	ae c6 1a	                ldx drawbox_height  ; Récupère la hauteur de la fenètre.
.1aac	20 ff 19	                jsr db_tline        ; Dessine la ligne suppérieure.
.1aaf	ca		                dex                 ; Soustrait 2 pour tenir compte des ...
.1ab0	ca		                dex                 ; lignes suppérieures et inférieures.
.1ab1	f0 06		                beq lastline        ; Si 0 pas de ligne vide dans la fenètre.
.1ab3	20 2d 1a	moreline        jsr db_eline        ; Dessine une ligne vide de la boîte.
.1ab6	ca		                dex                 ; Une ligne de moins à faire.
.1ab7	d0 fa		                bne moreline        ; On passe à la prochaine s'il en reste.
.1ab9	20 16 1a	lastline        jsr db_bline        ; Dessine la ligne inférieure.
.1abc	20 98 13	                jsr popreg          ; Récupère les registres.
.1abf	60		                rts
=176			tleft           =       176         ; Coin suppérieur gauche.
=174			tright          =       174         ; Coin suppérieur droit.
=173			bleft           =       173         ; Coin inférieur gauche.
=189			bright          =       189         ; Coin inférieur droit.
=171			hleft           =       171         ; Extrémité gauche d'une ligne médianne.
=179			hright          =       179         ; Extrémité droite d'une ligne médianne.
=221			vline           =       221         ; Ligne verticale.
=192			hline           =       192         ; Ligne horizontale.
=32			space           =       32          ; Caractère espace.
>1ac0	00		db_left         .byte   0           ; Caractère Gauche de la ligne courante.
>1ac1	00		db_right        .byte   0           ; Caractère droit de la ligne courante.
>1ac2	00		db_mid          .byte   0           ; Caractère central de la ligne courante.
>1ac3	00		drawbox_top     .byte   0           ; Coordonné du haut de la boite.
>1ac4	00		drawbox_left    .byte   0           ; Coordonné de la gauche de la boîte.
>1ac5	00		drawbox_width   .byte   0           ; Largeur de la boîte.
>1ac6	00		drawbox_height  .byte   0           ; Hauteur de la boîte.
>1ac7	00		drawbox_colour  .byte   0           ; Couleur de la boîte.
>1ac8	00		drawbox_curline .byte   0           ; No de la ligne courante à dessiner.
>1ac9	00		drawbox_bascol  .byte   0           ; Case de mémorisation de la couleur Basic.

;******  Return to file: slbug64.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L slbug64.txt -o slbug64.prg slbug64.asm
; Fri Oct 17 16:39:19 2025

;Offset	;Hex		;Source

;******  Processing input file: slbug64.asm

="20251017-125301"	            Version = "20251017-125301"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	20 50 52 4f	               .text " programmation assembleur sur c64."
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2e
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	20 50 41 52	               .text " par daniel lafrance."
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2e
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 55 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"
.0854	60		              rts                  ; ... doit se rerminer par un RTS.

;******  Return to file: slbug64.asm

.0855			main
.0855	20 c0 11	            jsr scrmaninit  ; Met en place la gestion d'écran.
.0858	08		               php
.0859	48		               pha
.085a	a9 0e		               lda  #14
.085c	20 d2 ff	               jsr  $ffd2
.085f	68		               pla
.0860	28		               plp
.0861	08		               php
.0862	48		               pha
.0863	a9 08		               lda  #$08
.0865	20 d2 ff	               jsr  $ffd2
.0868	68		               pla
.0869	28		               plp
.086a	20 61 13	               jsr  pushreg
.086d	48		               pha
.086e	a9 05		               lda  #cvert
.0870	8d 20 d0	               sta  $d020
.0873	68		               pla
.0874	48		               pha
.0875	a9 06		               lda  #cbleu
.0877	8d 21 d0	               sta  $d021
.087a	68		               pla
.087b	48		               pha
.087c	a9 01		               lda  #cblanc
.087e	8d 86 02	               sta  bascol
.0881	68		               pla
.0882	20 90 13	               jsr  popreg
.0885	20 e0 11	            jsr cls         ; Efface l'écran.
.0888	20 90 0c	            jsr help        ; Affiche le menu d'aide.
.088b	20 82 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.088e	20 d8 08	            jsr slbug64     ; Lance la fonction principale.
.0891	20 61 13	               jsr  pushreg
.0894	a2 00		               ldx  #0
.0896	a0 00		               ldy  #0
.0898	20 17 12	               jsr  gotoxy
.089b	20 90 13	               jsr  popreg
.089e	20 82 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.08a1	20 90 0c	            jsr help        ; Affiche l'écran d'aide.
.08a4	20 82 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.08a7	20 e0 11	            jsr cls         ; Efface l'écran.
.08aa	20 61 13	               jsr  pushreg
.08ad	48		               pha
.08ae	a9 0e		               lda  #cbleupale
.08b0	8d 20 d0	               sta  $d020
.08b3	68		               pla
.08b4	48		               pha
.08b5	a9 06		               lda  #cbleu
.08b7	8d 21 d0	               sta  $d021
.08ba	68		               pla
.08bb	48		               pha
.08bc	a9 01		               lda  #cblanc
.08be	8d 86 02	               sta  bascol
.08c1	68		               pla
.08c2	20 90 13	               jsr  popreg
.08c5	08		               php
.08c6	48		               pha
.08c7	a9 09		               lda  #$09
.08c9	20 d2 ff	               jsr  $ffd2
.08cc	68		               pla
.08cd	28		               plp
.08ce	08		               php
.08cf	48		               pha
.08d0	a9 8e		               lda  #b_uppercase
.08d2	20 d2 ff	               jsr  $ffd2
.08d5	68		               pla
.08d6	28		               plp
.08d7	60		            rts
.08d8			slbug64
.08d8	08		            php
.08d9	48		            pha
.08da	ad 21 d0	            lda vicbackcol
.08dd	48		            pha
.08de	a9 00		            lda #cnoir      ; \
.08e0	8d 21 d0	            sta vicbackcol  ;  > Bordure et fond en noir.
.08e3	8d 20 d0	            sta vicbordcol  ; /
.08e6	20 82 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.08e9	68		            pla
.08ea	20 61 13	               jsr  pushreg
.08ed	a2 00		               ldx  #0
.08ef	a0 00		               ldy  #0
.08f1	20 17 12	               jsr  gotoxy
.08f4	20 90 13	               jsr  popreg
.08f7	20 e0 11	            jsr cls
.08fa	08		               php
.08fb	48		               pha
.08fc	a9 0e		               lda  #14
.08fe	20 d2 ff	               jsr  $ffd2
.0901	68		               pla
.0902	28		               plp
.0903	08		               php
.0904	48		               pha
.0905	a9 08		               lda  #$08
.0907	20 d2 ff	               jsr  $ffd2
.090a	68		               pla
.090b	28		               plp
.090c	08		                php                 ; Sauvegarde les registres.
.090d	48		                pha
.090e	a9 00		                lda #0           ; Initialise le paramètre top et la ...
.0910	8d c3 1a	                sta drawbox_top
.0913	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0916	a9 00		                lda #0          ; Initialise le paramètre left.
.0918	8d c4 1a	                sta drawbox_left
.091b	a9 28		                lda #40         ; Initialise le paramètre width.
.091d	8d c5 1a	                sta drawbox_width
.0920	a9 18		                lda #24        ; Initialise le paramètre height.
.0922	8d c6 1a	                sta drawbox_height
.0925	a9 0c		                lda #cgris1        ; Initialise le paramètre colour.
.0927	8d c7 1a	                sta drawbox_colour
.092a	68		                pla                 ; Récupère les registres.
.092b	28		                plp
.092c	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.092f	a9 12		                    lda #18         ; le titre zzzzzz
.0931	20 d2 ff	                    jsr chrout
.0934	20 61 13	                jsr pushreg
.0937	ad 86 02	                lda bascol
.093a	48		                pha
.093b	a9 0c		                lda #cgris1
.093d	8d 86 02	                sta bascol
.0940	a0 01		                ldy #0+1
.0942	a2 00		                ldx  #0
.0944	18		                clc
.0945	20 f0 ff	                jsr  plot
.0948	a2 1e		                ldx  #<titre
.094a	a0 10		                ldy  #>titre
.094c	20 fd 11	                jsr  puts
.094f	68		                pla
.0950	8d 86 02	                sta  bascol
.0953	20 90 13	                jsr  popreg
.0956	a9 92		                    lda #146
.0958	20 d2 ff	                    jsr chrout
.095b	08		                php                 ; Sauvegarde les registres.
.095c	48		                pha
.095d	a9 01		                lda #1           ; Initialise le paramètre top et la ...
.095f	8d c3 1a	                sta drawbox_top
.0962	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0965	a9 01		                lda #1          ; Initialise le paramètre left.
.0967	8d c4 1a	                sta drawbox_left
.096a	a9 26		                lda #38         ; Initialise le paramètre width.
.096c	8d c5 1a	                sta drawbox_width
.096f	a9 05		                lda #5        ; Initialise le paramètre height.
.0971	8d c6 1a	                sta drawbox_height
.0974	a9 17		                lda #cjaune+reverse        ; Initialise le paramètre colour.
.0976	8d c7 1a	                sta drawbox_colour
.0979	68		                pla                 ; Récupère les registres.
.097a	28		                plp
.097b	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.097e	20 61 13	                jsr pushreg
.0981	ad 86 02	                lda bascol
.0984	48		                pha
.0985	a9 17		                lda #cjaune+reverse
.0987	8d 86 02	                sta bascol
.098a	a0 02		                ldy #1+1
.098c	a2 01		                ldx  #1
.098e	18		                clc
.098f	20 f0 ff	                jsr  plot
.0992	a2 1e		                ldx  #<titre
.0994	a0 10		                ldy  #>titre
.0996	20 fd 11	                jsr  puts
.0999	68		                pla
.099a	8d 86 02	                sta  bascol
.099d	20 90 13	                jsr  popreg
.09a0	08		                php                 ; Sauvegarde les registres.
.09a1	48		                pha
.09a2	a9 06		                lda #6           ; Initialise le paramètre top et la ...
.09a4	8d c3 1a	                sta drawbox_top
.09a7	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.09aa	a9 01		                lda #1          ; Initialise le paramètre left.
.09ac	8d c4 1a	                sta drawbox_left
.09af	a9 13		                lda #19         ; Initialise le paramètre width.
.09b1	8d c5 1a	                sta drawbox_width
.09b4	a9 11		                lda #17        ; Initialise le paramètre height.
.09b6	8d c6 1a	                sta drawbox_height
.09b9	a9 13		                lda #ccyan+reverse        ; Initialise le paramètre colour.
.09bb	8d c7 1a	                sta drawbox_colour
.09be	68		                pla                 ; Récupère les registres.
.09bf	28		                plp
.09c0	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.09c3	20 61 13	                jsr pushreg
.09c6	ad 86 02	                lda bascol
.09c9	48		                pha
.09ca	a9 13		                lda #ccyan+reverse
.09cc	8d 86 02	                sta bascol
.09cf	a0 02		                ldy #1+1
.09d1	a2 06		                ldx  #6
.09d3	18		                clc
.09d4	20 f0 ff	                jsr  plot
.09d7	a2 1e		                ldx  #<titre
.09d9	a0 10		                ldy  #>titre
.09db	20 fd 11	                jsr  puts
.09de	68		                pla
.09df	8d 86 02	                sta  bascol
.09e2	20 90 13	                jsr  popreg
.09e5	08		                php                 ; Sauvegarde les registres.
.09e6	48		                pha
.09e7	a9 06		                lda #6           ; Initialise le paramètre top et la ...
.09e9	8d c3 1a	                sta drawbox_top
.09ec	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.09ef	a9 14		                lda #20          ; Initialise le paramètre left.
.09f1	8d c4 1a	                sta drawbox_left
.09f4	a9 13		                lda #19         ; Initialise le paramètre width.
.09f6	8d c5 1a	                sta drawbox_width
.09f9	a9 11		                lda #17        ; Initialise le paramètre height.
.09fb	8d c6 1a	                sta drawbox_height
.09fe	a9 05		                lda #cvert        ; Initialise le paramètre colour.
.0a00	8d c7 1a	                sta drawbox_colour
.0a03	68		                pla                 ; Récupère les registres.
.0a04	28		                plp
.0a05	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0a08	a9 12		                    lda #18         ; le titre zzzzzz
.0a0a	20 d2 ff	                    jsr chrout
.0a0d	20 61 13	                jsr pushreg
.0a10	ad 86 02	                lda bascol
.0a13	48		                pha
.0a14	a9 05		                lda #cvert
.0a16	8d 86 02	                sta bascol
.0a19	a0 15		                ldy #20+1
.0a1b	a2 06		                ldx  #6
.0a1d	18		                clc
.0a1e	20 f0 ff	                jsr  plot
.0a21	a2 1e		                ldx  #<titre
.0a23	a0 10		                ldy  #>titre
.0a25	20 fd 11	                jsr  puts
.0a28	68		                pla
.0a29	8d 86 02	                sta  bascol
.0a2c	20 90 13	                jsr  popreg
.0a2f	a9 92		                    lda #146
.0a31	20 d2 ff	                    jsr chrout
.0a34	20 82 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.0a37	08		                php                 ; Sauvegarde les registres.
.0a38	48		                pha
.0a39	a9 05		                lda #5           ; Initialise le paramètre top et la ...
.0a3b	8d c3 1a	                sta drawbox_top
.0a3e	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0a41	a9 05		                lda #5          ; Initialise le paramètre left.
.0a43	8d c4 1a	                sta drawbox_left
.0a46	a9 14		                lda #20         ; Initialise le paramètre width.
.0a48	8d c5 1a	                sta drawbox_width
.0a4b	a9 05		                lda #5        ; Initialise le paramètre height.
.0a4d	8d c6 1a	                sta drawbox_height
.0a50	a9 1c		                lda #cgris1+reverse        ; Initialise le paramètre colour.
.0a52	8d c7 1a	                sta drawbox_colour
.0a55	68		                pla                 ; Récupère les registres.
.0a56	28		                plp
.0a57	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0a5a	20 61 13	                jsr pushreg
.0a5d	ad 86 02	                lda bascol
.0a60	48		                pha
.0a61	a9 1c		                lda #cgris1+reverse
.0a63	8d 86 02	                sta bascol
.0a66	a0 06		                ldy #5+1
.0a68	a2 05		                ldx  #5
.0a6a	18		                clc
.0a6b	20 f0 ff	                jsr  plot
.0a6e	a2 1e		                ldx  #<titre
.0a70	a0 10		                ldy  #>titre
.0a72	20 fd 11	                jsr  puts
.0a75	68		                pla
.0a76	8d 86 02	                sta  bascol
.0a79	20 90 13	                jsr  popreg
.0a7c	08		                php                 ; Sauvegarde les registres.
.0a7d	48		                pha
.0a7e	a9 07		                lda #7           ; Initialise le paramètre top et la ...
.0a80	8d c3 1a	                sta drawbox_top
.0a83	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0a86	a9 07		                lda #7          ; Initialise le paramètre left.
.0a88	8d c4 1a	                sta drawbox_left
.0a8b	a9 14		                lda #20         ; Initialise le paramètre width.
.0a8d	8d c5 1a	                sta drawbox_width
.0a90	a9 05		                lda #5        ; Initialise le paramètre height.
.0a92	8d c6 1a	                sta drawbox_height
.0a95	a9 0b		                lda #cgris0        ; Initialise le paramètre colour.
.0a97	8d c7 1a	                sta drawbox_colour
.0a9a	68		                pla                 ; Récupère les registres.
.0a9b	28		                plp
.0a9c	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0a9f	a9 12		                    lda #18         ; le titre zzzzzz
.0aa1	20 d2 ff	                    jsr chrout
.0aa4	20 61 13	                jsr pushreg
.0aa7	ad 86 02	                lda bascol
.0aaa	48		                pha
.0aab	a9 0b		                lda #cgris0
.0aad	8d 86 02	                sta bascol
.0ab0	a0 08		                ldy #7+1
.0ab2	a2 07		                ldx  #7
.0ab4	18		                clc
.0ab5	20 f0 ff	                jsr  plot
.0ab8	a2 1e		                ldx  #<titre
.0aba	a0 10		                ldy  #>titre
.0abc	20 fd 11	                jsr  puts
.0abf	68		                pla
.0ac0	8d 86 02	                sta  bascol
.0ac3	20 90 13	                jsr  popreg
.0ac6	a9 92		                    lda #146
.0ac8	20 d2 ff	                    jsr chrout
.0acb	08		                php                 ; Sauvegarde les registres.
.0acc	48		                pha
.0acd	a9 09		                lda #9           ; Initialise le paramètre top et la ...
.0acf	8d c3 1a	                sta drawbox_top
.0ad2	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0ad5	a9 09		                lda #9          ; Initialise le paramètre left.
.0ad7	8d c4 1a	                sta drawbox_left
.0ada	a9 14		                lda #20         ; Initialise le paramètre width.
.0adc	8d c5 1a	                sta drawbox_width
.0adf	a9 05		                lda #5        ; Initialise le paramètre height.
.0ae1	8d c6 1a	                sta drawbox_height
.0ae4	a9 1a		                lda #crose+reverse        ; Initialise le paramètre colour.
.0ae6	8d c7 1a	                sta drawbox_colour
.0ae9	68		                pla                 ; Récupère les registres.
.0aea	28		                plp
.0aeb	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0aee	20 61 13	                jsr pushreg
.0af1	ad 86 02	                lda bascol
.0af4	48		                pha
.0af5	a9 1a		                lda #crose+reverse
.0af7	8d 86 02	                sta bascol
.0afa	a0 0a		                ldy #9+1
.0afc	a2 09		                ldx  #9
.0afe	18		                clc
.0aff	20 f0 ff	                jsr  plot
.0b02	a2 1e		                ldx  #<titre
.0b04	a0 10		                ldy  #>titre
.0b06	20 fd 11	                jsr  puts
.0b09	68		                pla
.0b0a	8d 86 02	                sta  bascol
.0b0d	20 90 13	                jsr  popreg
.0b10	08		                php                 ; Sauvegarde les registres.
.0b11	48		                pha
.0b12	a9 0b		                lda #11           ; Initialise le paramètre top et la ...
.0b14	8d c3 1a	                sta drawbox_top
.0b17	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0b1a	a9 0b		                lda #11          ; Initialise le paramètre left.
.0b1c	8d c4 1a	                sta drawbox_left
.0b1f	a9 14		                lda #20         ; Initialise le paramètre width.
.0b21	8d c5 1a	                sta drawbox_width
.0b24	a9 05		                lda #5        ; Initialise le paramètre height.
.0b26	8d c6 1a	                sta drawbox_height
.0b29	a9 02		                lda #crouge        ; Initialise le paramètre colour.
.0b2b	8d c7 1a	                sta drawbox_colour
.0b2e	68		                pla                 ; Récupère les registres.
.0b2f	28		                plp
.0b30	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0b33	a9 12		                    lda #18         ; le titre zzzzzz
.0b35	20 d2 ff	                    jsr chrout
.0b38	20 61 13	                jsr pushreg
.0b3b	ad 86 02	                lda bascol
.0b3e	48		                pha
.0b3f	a9 02		                lda #crouge
.0b41	8d 86 02	                sta bascol
.0b44	a0 0c		                ldy #11+1
.0b46	a2 0b		                ldx  #11
.0b48	18		                clc
.0b49	20 f0 ff	                jsr  plot
.0b4c	a2 1e		                ldx  #<titre
.0b4e	a0 10		                ldy  #>titre
.0b50	20 fd 11	                jsr  puts
.0b53	68		                pla
.0b54	8d 86 02	                sta  bascol
.0b57	20 90 13	                jsr  popreg
.0b5a	a9 92		                    lda #146
.0b5c	20 d2 ff	                    jsr chrout
.0b5f	08		                php                 ; Sauvegarde les registres.
.0b60	48		                pha
.0b61	a9 0d		                lda #13           ; Initialise le paramètre top et la ...
.0b63	8d c3 1a	                sta drawbox_top
.0b66	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0b69	a9 0d		                lda #13          ; Initialise le paramètre left.
.0b6b	8d c4 1a	                sta drawbox_left
.0b6e	a9 14		                lda #20         ; Initialise le paramètre width.
.0b70	8d c5 1a	                sta drawbox_width
.0b73	a9 05		                lda #5        ; Initialise le paramètre height.
.0b75	8d c6 1a	                sta drawbox_height
.0b78	a9 14		                lda #cmauve+reverse        ; Initialise le paramètre colour.
.0b7a	8d c7 1a	                sta drawbox_colour
.0b7d	68		                pla                 ; Récupère les registres.
.0b7e	28		                plp
.0b7f	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0b82	20 61 13	                jsr pushreg
.0b85	ad 86 02	                lda bascol
.0b88	48		                pha
.0b89	a9 14		                lda #cmauve+reverse
.0b8b	8d 86 02	                sta bascol
.0b8e	a0 0e		                ldy #13+1
.0b90	a2 0d		                ldx  #13
.0b92	18		                clc
.0b93	20 f0 ff	                jsr  plot
.0b96	a2 1e		                ldx  #<titre
.0b98	a0 10		                ldy  #>titre
.0b9a	20 fd 11	                jsr  puts
.0b9d	68		                pla
.0b9e	8d 86 02	                sta  bascol
.0ba1	20 90 13	                jsr  popreg
.0ba4	08		                php                 ; Sauvegarde les registres.
.0ba5	48		                pha
.0ba6	a9 0f		                lda #15           ; Initialise le paramètre top et la ...
.0ba8	8d c3 1a	                sta drawbox_top
.0bab	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0bae	a9 0f		                lda #15          ; Initialise le paramètre left.
.0bb0	8d c4 1a	                sta drawbox_left
.0bb3	a9 14		                lda #20         ; Initialise le paramètre width.
.0bb5	8d c5 1a	                sta drawbox_width
.0bb8	a9 05		                lda #5        ; Initialise le paramètre height.
.0bba	8d c6 1a	                sta drawbox_height
.0bbd	a9 06		                lda #cbleu        ; Initialise le paramètre colour.
.0bbf	8d c7 1a	                sta drawbox_colour
.0bc2	68		                pla                 ; Récupère les registres.
.0bc3	28		                plp
.0bc4	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0bc7	a9 12		                    lda #18         ; le titre zzzzzz
.0bc9	20 d2 ff	                    jsr chrout
.0bcc	20 61 13	                jsr pushreg
.0bcf	ad 86 02	                lda bascol
.0bd2	48		                pha
.0bd3	a9 06		                lda #cbleu
.0bd5	8d 86 02	                sta bascol
.0bd8	a0 10		                ldy #15+1
.0bda	a2 0f		                ldx  #15
.0bdc	18		                clc
.0bdd	20 f0 ff	                jsr  plot
.0be0	a2 1e		                ldx  #<titre
.0be2	a0 10		                ldy  #>titre
.0be4	20 fd 11	                jsr  puts
.0be7	68		                pla
.0be8	8d 86 02	                sta  bascol
.0beb	20 90 13	                jsr  popreg
.0bee	a9 92		                    lda #146
.0bf0	20 d2 ff	                    jsr chrout
.0bf3	08		                php                 ; Sauvegarde les registres.
.0bf4	48		                pha
.0bf5	a9 11		                lda #17           ; Initialise le paramètre top et la ...
.0bf7	8d c3 1a	                sta drawbox_top
.0bfa	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0bfd	a9 11		                lda #17          ; Initialise le paramètre left.
.0bff	8d c4 1a	                sta drawbox_left
.0c02	a9 14		                lda #20         ; Initialise le paramètre width.
.0c04	8d c5 1a	                sta drawbox_width
.0c07	a9 05		                lda #5        ; Initialise le paramètre height.
.0c09	8d c6 1a	                sta drawbox_height
.0c0c	a9 13		                lda #ccyan+reverse        ; Initialise le paramètre colour.
.0c0e	8d c7 1a	                sta drawbox_colour
.0c11	68		                pla                 ; Récupère les registres.
.0c12	28		                plp
.0c13	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0c16	20 61 13	                jsr pushreg
.0c19	ad 86 02	                lda bascol
.0c1c	48		                pha
.0c1d	a9 13		                lda #ccyan+reverse
.0c1f	8d 86 02	                sta bascol
.0c22	a0 12		                ldy #17+1
.0c24	a2 11		                ldx  #17
.0c26	18		                clc
.0c27	20 f0 ff	                jsr  plot
.0c2a	a2 1e		                ldx  #<titre
.0c2c	a0 10		                ldy  #>titre
.0c2e	20 fd 11	                jsr  puts
.0c31	68		                pla
.0c32	8d 86 02	                sta  bascol
.0c35	20 90 13	                jsr  popreg
.0c38	08		                php                 ; Sauvegarde les registres.
.0c39	48		                pha
.0c3a	a9 13		                lda #19           ; Initialise le paramètre top et la ...
.0c3c	8d c3 1a	                sta drawbox_top
.0c3f	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0c42	a9 13		                lda #19          ; Initialise le paramètre left.
.0c44	8d c4 1a	                sta drawbox_left
.0c47	a9 14		                lda #20         ; Initialise le paramètre width.
.0c49	8d c5 1a	                sta drawbox_width
.0c4c	a9 05		                lda #5        ; Initialise le paramètre height.
.0c4e	8d c6 1a	                sta drawbox_height
.0c51	a9 05		                lda #cvert        ; Initialise le paramètre colour.
.0c53	8d c7 1a	                sta drawbox_colour
.0c56	68		                pla                 ; Récupère les registres.
.0c57	28		                plp
.0c58	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0c5b	a9 12		                    lda #18         ; le titre zzzzzz
.0c5d	20 d2 ff	                    jsr chrout
.0c60	20 61 13	                jsr pushreg
.0c63	ad 86 02	                lda bascol
.0c66	48		                pha
.0c67	a9 05		                lda #cvert
.0c69	8d 86 02	                sta bascol
.0c6c	a0 14		                ldy #19+1
.0c6e	a2 13		                ldx  #19
.0c70	18		                clc
.0c71	20 f0 ff	                jsr  plot
.0c74	a2 1e		                ldx  #<titre
.0c76	a0 10		                ldy  #>titre
.0c78	20 fd 11	                jsr  puts
.0c7b	68		                pla
.0c7c	8d 86 02	                sta  bascol
.0c7f	20 90 13	                jsr  popreg
.0c82	a9 92		                    lda #146
.0c84	20 d2 ff	                    jsr chrout
.0c87	20 82 16	            jsr anykey      ; Attend une clef et vide le tampon clavier.
.0c8a	20 f7 17	            jsr showregs
.0c8d	68		            pla
.0c8e	28		            plp
.0c8f	60		            rts
=16			reverse = 16
.0c90			help
.0c90	20 f3 12	            jsr pushall
.0c93	20 e0 11	            jsr cls
.0c96	08		               php
.0c97	48		               pha
.0c98	a9 0e		               lda  #14
.0c9a	20 d2 ff	               jsr  $ffd2
.0c9d	68		               pla
.0c9e	28		               plp
.0c9f	08		               php
.0ca0	48		               pha
.0ca1	a9 08		               lda  #$08
.0ca3	20 d2 ff	               jsr  $ffd2
.0ca6	68		               pla
.0ca7	28		               plp
.0ca8	a9 0d		            lda #$0d
.0caa	20 f7 11	            jsr putch
.0cad	20 f7 11	            jsr putch
.0cb0	20 f7 11	            jsr putch
.0cb3	20 f7 11	            jsr putch
.0cb6	a9 12		            lda #b_rvs_on
.0cb8	20 f7 11	            jsr putch
.0cbb	08		                php                 ; Sauvegarde les registres.
.0cbc	48		                pha
.0cbd	a9 04		                lda #top           ; Initialise le paramètre top et la ...
.0cbf	8d c3 1a	                sta drawbox_top
.0cc2	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0cc5	a9 04		                lda #left          ; Initialise le paramètre left.
.0cc7	8d c4 1a	                sta drawbox_left
.0cca	a9 20		                lda #32         ; Initialise le paramètre width.
.0ccc	8d c5 1a	                sta drawbox_width
.0ccf	a9 0a		                lda #10        ; Initialise le paramètre height.
.0cd1	8d c6 1a	                sta drawbox_height
.0cd4	a9 11		                lda #color+reverse        ; Initialise le paramètre colour.
.0cd6	8d c7 1a	                sta drawbox_colour
.0cd9	68		                pla                 ; Récupère les registres.
.0cda	28		                plp
.0cdb	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0cde	20 61 13	                jsr pushreg
.0ce1	ad 86 02	                lda bascol
.0ce4	48		                pha
.0ce5	a9 11		                lda #color+reverse
.0ce7	8d 86 02	                sta bascol
.0cea	a0 05		                ldy #left+1
.0cec	a2 04		                ldx  #top
.0cee	18		                clc
.0cef	20 f0 ff	                jsr  plot
.0cf2	a2 c4		                ldx  #<texta
.0cf4	a0 0e		                ldy  #>texta
.0cf6	20 fd 11	                jsr  puts
.0cf9	68		                pla
.0cfa	8d 86 02	                sta  bascol
.0cfd	20 90 13	                jsr  popreg
.0d00	20 61 13	                jsr pushreg
.0d03	ad 86 02	                lda bascol
.0d06	48		                pha
.0d07	a9 01		                lda #color
.0d09	8d 86 02	                sta bascol
.0d0c	a0 05		                ldy #left+1
.0d0e	a2 06		                ldx  #top+2
.0d10	18		                clc
.0d11	20 f0 ff	                jsr  plot
.0d14	a2 df		                ldx  #<textb
.0d16	a0 0e		                ldy  #>textb
.0d18	20 fd 11	                jsr  puts
.0d1b	68		                pla
.0d1c	8d 86 02	                sta  bascol
.0d1f	20 90 13	                jsr  popreg
.0d22	20 61 13	                jsr pushreg
.0d25	ad 86 02	                lda bascol
.0d28	48		                pha
.0d29	a9 01		                lda #color
.0d2b	8d 86 02	                sta bascol
.0d2e	a0 05		                ldy #left+1
.0d30	a2 07		                ldx  #top+3
.0d32	18		                clc
.0d33	20 f0 ff	                jsr  plot
.0d36	a2 fe		                ldx  #<textc
.0d38	a0 0e		                ldy  #>textc
.0d3a	20 fd 11	                jsr  puts
.0d3d	68		                pla
.0d3e	8d 86 02	                sta  bascol
.0d41	20 90 13	                jsr  popreg
.0d44	20 61 13	                jsr pushreg
.0d47	ad 86 02	                lda bascol
.0d4a	48		                pha
.0d4b	a9 01		                lda #color
.0d4d	8d 86 02	                sta bascol
.0d50	a0 05		                ldy #left+1
.0d52	a2 08		                ldx  #top+4
.0d54	18		                clc
.0d55	20 f0 ff	                jsr  plot
.0d58	a2 1d		                ldx  #<textd
.0d5a	a0 0f		                ldy  #>textd
.0d5c	20 fd 11	                jsr  puts
.0d5f	68		                pla
.0d60	8d 86 02	                sta  bascol
.0d63	20 90 13	                jsr  popreg
.0d66	20 61 13	                jsr pushreg
.0d69	ad 86 02	                lda bascol
.0d6c	48		                pha
.0d6d	a9 01		                lda #color
.0d6f	8d 86 02	                sta bascol
.0d72	a0 05		                ldy #left+1
.0d74	a2 0a		                ldx  #top+6
.0d76	18		                clc
.0d77	20 f0 ff	                jsr  plot
.0d7a	a2 3c		                ldx  #<texte
.0d7c	a0 0f		                ldy  #>texte
.0d7e	20 fd 11	                jsr  puts
.0d81	68		                pla
.0d82	8d 86 02	                sta  bascol
.0d85	20 90 13	                jsr  popreg
.0d88	20 61 13	                jsr pushreg
.0d8b	ad 86 02	                lda bascol
.0d8e	48		                pha
.0d8f	a9 01		                lda #color
.0d91	8d 86 02	                sta bascol
.0d94	a0 05		                ldy #left+1
.0d96	a2 0b		                ldx  #top+7
.0d98	18		                clc
.0d99	20 f0 ff	                jsr  plot
.0d9c	a2 5b		                ldx  #<textf
.0d9e	a0 0f		                ldy  #>textf
.0da0	20 fd 11	                jsr  puts
.0da3	68		                pla
.0da4	8d 86 02	                sta  bascol
.0da7	20 90 13	                jsr  popreg
.0daa	20 61 13	                jsr pushreg
.0dad	ad 86 02	                lda bascol
.0db0	48		                pha
.0db1	a9 01		                lda #color
.0db3	8d 86 02	                sta bascol
.0db6	a0 05		                ldy #left+1
.0db8	a2 0c		                ldx  #top+8
.0dba	18		                clc
.0dbb	20 f0 ff	                jsr  plot
.0dbe	a2 7a		                ldx  #<textg
.0dc0	a0 0f		                ldy  #>textg
.0dc2	20 fd 11	                jsr  puts
.0dc5	68		                pla
.0dc6	8d 86 02	                sta  bascol
.0dc9	20 90 13	                jsr  popreg
.0dcc	08		                php                 ; Sauvegarde les registres.
.0dcd	48		                pha
.0dce	a9 0f		                lda #top+11           ; Initialise le paramètre top et la ...
.0dd0	8d c3 1a	                sta drawbox_top
.0dd3	8d c8 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0dd6	a9 04		                lda #left          ; Initialise le paramètre left.
.0dd8	8d c4 1a	                sta drawbox_left
.0ddb	a9 20		                lda #32         ; Initialise le paramètre width.
.0ddd	8d c5 1a	                sta drawbox_width
.0de0	a9 06		                lda #6        ; Initialise le paramètre height.
.0de2	8d c6 1a	                sta drawbox_height
.0de5	a9 1a		                lda #color2+reverse        ; Initialise le paramètre colour.
.0de7	8d c7 1a	                sta drawbox_colour
.0dea	68		                pla                 ; Récupère les registres.
.0deb	28		                plp
.0dec	20 a6 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0def	20 61 13	                jsr pushreg
.0df2	ad 86 02	                lda bascol
.0df5	48		                pha
.0df6	a9 1a		                lda #color2+reverse
.0df8	8d 86 02	                sta bascol
.0dfb	a0 05		                ldy #left+1
.0dfd	a2 0f		                ldx  #top+11
.0dff	18		                clc
.0e00	20 f0 ff	                jsr  plot
.0e03	a2 99		                ldx  #<texth
.0e05	a0 0f		                ldy  #>texth
.0e07	20 fd 11	                jsr  puts
.0e0a	68		                pla
.0e0b	8d 86 02	                sta  bascol
.0e0e	20 90 13	                jsr  popreg
.0e11	20 61 13	                jsr pushreg
.0e14	ad 86 02	                lda bascol
.0e17	48		                pha
.0e18	a9 0a		                lda #color2
.0e1a	8d 86 02	                sta bascol
.0e1d	a0 05		                ldy #left+1
.0e1f	a2 11		                ldx  #top+13
.0e21	18		                clc
.0e22	20 f0 ff	                jsr  plot
.0e25	a2 a8		                ldx  #<texti
.0e27	a0 0f		                ldy  #>texti
.0e29	20 fd 11	                jsr  puts
.0e2c	68		                pla
.0e2d	8d 86 02	                sta  bascol
.0e30	20 90 13	                jsr  popreg
.0e33	20 61 13	                jsr pushreg
.0e36	ad 86 02	                lda bascol
.0e39	48		                pha
.0e3a	a9 0a		                lda #color2
.0e3c	8d 86 02	                sta bascol
.0e3f	a0 05		                ldy #left+1
.0e41	a2 12		                ldx  #top+14
.0e43	18		                clc
.0e44	20 f0 ff	                jsr  plot
.0e47	a2 c7		                ldx  #<textj
.0e49	a0 0f		                ldy  #>textj
.0e4b	20 fd 11	                jsr  puts
.0e4e	68		                pla
.0e4f	8d 86 02	                sta  bascol
.0e52	20 90 13	                jsr  popreg
.0e55	20 61 13	                jsr pushreg
.0e58	ad 86 02	                lda bascol
.0e5b	48		                pha
.0e5c	a9 0a		                lda #color2
.0e5e	8d 86 02	                sta bascol
.0e61	a0 05		                ldy #left+1
.0e63	a2 13		                ldx  #top+15
.0e65	18		                clc
.0e66	20 f0 ff	                jsr  plot
.0e69	a2 e6		                ldx  #<textk
.0e6b	a0 0f		                ldy  #>textk
.0e6d	20 fd 11	                jsr  puts
.0e70	68		                pla
.0e71	8d 86 02	                sta  bascol
.0e74	20 90 13	                jsr  popreg
.0e77	a9 92		            lda #b_rvs_off
.0e79	20 f7 11	            jsr putch
.0e7c	20 61 13	                jsr pushreg
.0e7f	ad 86 02	                lda bascol
.0e82	48		                pha
.0e83	a9 01		                lda #cblanc
.0e85	8d 86 02	                sta bascol
.0e88	a0 0f		                ldy #39-24
.0e8a	a2 18		                ldx  #24
.0e8c	18		                clc
.0e8d	20 f0 ff	                jsr  plot
.0e90	a2 05		                ldx  #<textl
.0e92	a0 10		                ldy  #>textl
.0e94	20 fd 11	                jsr  puts
.0e97	68		                pla
.0e98	8d 86 02	                sta  bascol
.0e9b	20 90 13	                jsr  popreg
.0e9e	20 2e 13	            jsr popall
.0ea1	60		            rts
=4			left = 4
=4			top = 4
=$1			color = cblanc
=$a			color2 = crose

;******  Processing file: chaines_fr.asm

=158			headtcol        =   b_jaune
=158			normtcol        =   b_jaune
>0ea2	00		nextline        .byte   0
>0ea3	20 20 20 20	line            .null           "                                "
>0ea7	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0eb7	20 20 20 20 20 20 20 20 20 20 20 20 00
>0ec4	92		texta           .byte           b_rvs_off
>0ec5	20 d3 cc 2d	                .text           " SL-BUG 64 Version 4.00 "
>0ec9	c2 d5 c7 20 36 34 20 d6 45 52 53 49 4f 4e 20 34
>0ed9	2e 30 30 20
>0edd	12 00		                .byte           b_rvs_on,0
>0edf	20 20 20 20	textb           .null           "     Version Commodore 64     "
>0ee3	20 d6 45 52 53 49 4f 4e 20 c3 4f 4d 4d 4f 44 4f
>0ef3	52 45 20 36 34 20 20 20 20 20 00
>0efe	20 20 c9 44	textc           .null           "  Idee Originale sur MC-6809  "
>0f02	45 45 20 cf 52 49 47 49 4e 41 4c 45 20 53 55 52
>0f12	20 cd c3 2d 36 38 30 39 20 20 00
>0f1d	20 20 d0 41	textd           .null           "  Par Serge Leblanc mai 1994  "
>0f21	52 20 d3 45 52 47 45 20 cc 45 42 4c 41 4e 43 20
>0f31	4d 41 49 20 31 39 39 34 20 20 00
>0f3c	20 d0 4f 52	texte           .null           " Port C64 par Daniel Lafrance "
>0f40	54 20 c3 36 34 20 50 41 52 20 c4 41 4e 49 45 4c
>0f50	20 cc 41 46 52 41 4e 43 45 20 00
>0f5b	20 20 20 20	textf           .null           "       (c) Octobre 2025       "
>0f5f	20 20 20 28 43 29 20 cf 43 54 4f 42 52 45 20 32
>0f6f	30 32 35 20 20 20 20 20 20 20 00
>0f7a	20 20 20 d6	textg           .null   format( "   Version: %-17s ",Version)
>0f7e	45 52 53 49 4f 4e 3a 20 32 30 32 35 31 30 31 37
>0f8e	2d 31 32 35 33 30 31 20 20 20 00
>0f99	92		texth           .byte           b_rvs_off
>0f9a	20 d2 c1 c3	                .text           " RACCOURCIS "
>0f9e	c3 cf d5 d2 c3 c9 d3 20
>0fa6	12 00		                .byte           b_rvs_on,0
>0fa8	20 c5 58 45	texti           .null   format( " Execution.: SYS%5d ($%4X) ",slbug64,slbug64)
>0fac	43 55 54 49 4f 4e 2e 3a 20 d3 d9 d3 20 32 32 36
>0fbc	34 20 28 24 20 38 c4 38 29 20 00
>0fc7	20 c1 49 44	textj           .null   format( " Aide......: SYS%5d ($%4X) ",help,help)
>0fcb	45 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 32 31
>0fdb	36 20 28 24 20 c3 39 30 29 20 00
>0fe6	20 c3 cc d3	textk           .null   format( " CLS.......: SYS%5d ($%4X) ",cls,cls)
>0fea	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 34 35 37
>0ffa	36 20 28 24 31 31 c5 30 29 20 00
>1005	d5 4e 45 20	textl           .null           "Une clef pour continuer!"
>1009	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>1019	55 45 52 21 00
>101e	5b c6 45 4e	titre           .null   "[Fenetre]"
>1022	45 54 52 45 5d 00
>1028	b0 c0 c0 c0	tline   .byte   176,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,174,0
>102c	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>103c	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ae 00
>1049	ab c0 c0 c0	mline   .byte   171,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,179,0
>104d	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>105d	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 b3 00
>106a	ad c0 c0 c0	bline   .byte   173,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,189,0
>106e	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>107e	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 bd 00
>108b	dd 20 20 20	eline   .byte   221,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,221,0
>108f	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>109f	20 20 20 20 20 20 20 20 20 20 20 dd 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>10ac	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>10b0	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black         =   144  ;0,  ctrl-1
=5			b_white         =   5    ;1,  ctrl-2
=28			b_red           =   28   ;2,  ctrl-3
=159			b_cyan          =   159  ;3,  ctrl-4
=156			b_purple        =   156  ;4,  ctrl-5
=30			b_green         =   30   ;5,  ctrl-6
=31			b_blue          =   31   ;6,  ctrl-7
=158			b_yellow        =   158  ;7,  ctrl-8
=129			b_orange        =   129  ;8,  C=-1
=149			b_brown         =   149  ;9,  C=-2
=150			b_ltred         =   150  ;10, C=-3
=155			b_gray3         =   155  ;11, C=-4
=155			b_grey3         =   155  ;11, C=-4
=152			b_gray2         =   152  ;12, C=-5
=152			b_grey2         =   152  ;13, C=-5
=153			b_ltgreen       =   153  ;13, C=-6
=154			b_ltblue        =   154  ;14, C=-7
=151			b_gray1         =   151  ;15, C=-8
=151			b_grey1         =   151  ;15, C=-8
=144			b_noir          =   144  ;0,  ctrl-1
=5			b_blanc         =   5    ;1,  ctrl-2
=28			b_rouge         =   28   ;2,  ctrl-3
=156			b_mauve         =   156  ;4,  ctrl-5
=30			b_vert          =   30   ;5,  ctrl-6
=31			b_bleu          =   31   ;6,  ctrl-7
=158			b_jaune         =   158  ;7,  ctrl-8
=149			b_brun          =   149  ;9,  C=-2
=150			b_rose          =   150  ;10, C=-3
=155			b_gris3         =   155  ;11, C=-4
=152			b_gris2         =   152  ;12, C=-5
=153			b_vert2         =   153  ;13, C=-6
=154			b_blue2         =   154  ;14, C=-7
=151			b_gris1         =   151  ;15, C=-8
=151			b_gris          =   151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.10b4			screendis
.10b4	08		               php
.10b5	48		               pha
.10b6	ad 11 d0	               lda  $d011
.10b9	29 ef		               and  #%11101111
.10bb	8d 11 d0	               sta  $d011
.10be	68		               pla
.10bf	28		               plp
.10c0	60		               rts
.10c1			screenena
.10c1	08		               php
.10c2	48		               pha
.10c3	ad 11 d0	               lda  $d011
.10c6	09 10		               ora  #%00010000
.10c8	8d 11 d0	               sta  $d011
.10cb	68		               pla
.10cc	28		               plp
.10cd	60		               rts
=8192			bmpram = 8192
.10ce			victohighres
.10ce	08		               php
.10cf	48		               pha
.10d0	ad 11 d0	               lda  vicmiscfnc
.10d3	09 20		               ora  #%00100000     ; 32
.10d5	8d 11 d0	               sta  vicmiscfnc
.10d8	ad 18 d0	               lda  vicmemptr
.10db	09 08		               ora  #%00001000     ; $08
.10dd	8d 18 d0	               sta  vicmemptr
.10e0	a9 ff		               lda  #$ff           ; 255
.10e2	85 37		               sta  $0037
.10e4	a9 1f		               lda  #$1f           ; 31
.10e6	85 38		               sta  $0038
.10e8	68		               pla
.10e9	28		               plp
.10ea	60		               rts
.10eb			victonormal
.10eb	08		               php
.10ec	48		               pha
.10ed	ad 11 d0	               lda  vicmiscfnc
.10f0	29 df		               and  #%11011111     ; 233
.10f2	8d 11 d0	               sta  vicmiscfnc
.10f5	ad 18 d0	               lda  vicmemptr
.10f8	29 f7		               and  #%11110111     ; $08
.10fa	8d 18 d0	               sta  vicmemptr
.10fd	a9 00		               lda  #$00
.10ff	85 37		               sta  $0037
.1101	a9 a0		               lda  #$a0
.1103	85 38		               sta  $0038
.1105	20 e0 11	               jsr  cls
.1108	68		               pla
.1109	28		               plp
.110a	60		               rts
.110b			vicbmpclear
.110b	20 f3 12	               jsr  push
.110e	a9 04		               lda  #cmauve
.1110	20 39 11	               jsr  setvicbmpbackcol
.1113	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.1115	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.1117	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.1119	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.111b	48		               pha
.111c	a9 ff		               lda  #<$0000+(8191)
.111e	8d 17 15	               sta  loopcount
.1121	a9 1f		               lda  #>$0000+(8191)
.1123	8d 18 15	               sta  loopcount+1
.1126	68		               pla
.1127	a0 00		               ldy  #$00
.1129	a9 0f		next           lda  #$0f
.112b	91 fb		               sta  (zpage1),y
.112d	20 48 14	               jsr  inczpage1
.1130	20 f7 14	               jsr  loop
.1133	d0 f4		               bne  next
.1135	20 2e 13	               jsr  pop
.1138	60		               rts
.1139			setvicbmpbackcol
.1139	20 f3 12	               jsr  push
.113c	29 0f		               and  #$0f
.113e	8d 6c 11	               sta  vicbmpbackcol
.1141	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.1143	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.1145	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.1147	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.1149	48		               pha
.114a	a9 00		               lda  #<$0000+(1024)
.114c	8d 17 15	               sta  loopcount
.114f	a9 04		               lda  #>$0000+(1024)
.1151	8d 18 15	               sta  loopcount+1
.1154	68		               pla
.1155	a0 00		               ldy  #$00
.1157	b1 fb		next           lda  (zpage1),y
.1159	29 f0		               and  #$f0
.115b	0d 6c 11	               ora  vicbmpbackcol
.115e	91 fb		               sta  (zpage1),y
.1160	20 48 14	               jsr  inczpage1
.1163	20 f7 14	               jsr  loop
.1166	d0 ef		               bne  next
.1168	20 2e 13	               jsr  pop
.116b	60		               rts
>116c	00		vicbmpbackcol  .byte     $00
.116d			setvicbmpforecol
.116d	20 f3 12	               jsr  push
.1170	2a		               rol
.1171	2a		               rol
.1172	2a		               rol
.1173	2a		               rol
.1174	29 f0		               and  #$f0
.1176	8d a4 11	               sta  vicbmpforecol
.1179	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.117b	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.117d	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.117f	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.1181	48		               pha
.1182	a9 00		               lda  #<$0000+(1024)
.1184	8d 17 15	               sta  loopcount
.1187	a9 04		               lda  #>$0000+(1024)
.1189	8d 18 15	               sta  loopcount+1
.118c	68		               pla
.118d	a0 00		               ldy  #$00
.118f	b1 fb		next           lda  (zpage1),y
.1191	29 0f		               and  #$0f
.1193	0d a4 11	               ora  vicbmpforecol
.1196	91 fb		               sta  (zpage1),y
.1198	20 48 14	               jsr  inczpage1
.119b	20 f7 14	               jsr  loop
.119e	d0 ef		               bne  next
.11a0	20 2e 13	               jsr  pop
.11a3	60		               rts
>11a4	00		vicbmpforecol  .byte     $00
.11a5			bmphrcalccoords
.11a5	20 f3 12	               jsr  push
.11a8	18		               clc       ; On met Carry à 0
.11a9	6a		               ror       ; le bit 0 de a dans carry  ?/2
.11aa	8a		               txa       ; x dans a
.11ab	4a		               lsr       ; ?/4
.11ac	4a		               lsr       ; ?/8 a = (ax)/8
.11ad	8d be 11	               sta  bmphrcol
.11b0	98		               tya       ; Y dans a
.11b1	4a		               lsr       ; ?/2
.11b2	4a		               lsr       ; ?/4
.11b3	4a		               lsr       ; ?/8 a=Y/8
.11b4	8d bd 11	               sta  bmphrrow
.11b7	48		               pha
.11b8	98		               tya
.11b9	20 2e 13	               jsr  pop
.11bc	60		               rts
.11bd			vicbmpfill
>11bd	00		bmphrrow       .byte     $00
>11be	00		bmphrcol       .byte     $00
>11bf	00		bmphrmask      .byte     $00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.11c0			scrmaninit
.11c0	20 61 13	               jsr  pushreg        ; Sauvegarde tous les registres
.11c3	20 b4 10	               jsr  screendis      ; Disable screen
.11c6	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.11c8	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.11cb	a9 05		               lda  #vvert         ; vert pour la couleur
.11cd	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.11d0	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.11d2	8d 86 02	               sta  bascol         ; texte.
.11d5	20 e0 11	               jsr  cls            ; Efface l'écran.
.11d8	20 c1 10	               jsr  screenena      ; enable screen
.11db	20 90 13	               jsr  popreg         ; Récupère tous les registres.
.11de	60		               rts
>11df	8e		characterset   .byte b_uppercase
.11e0			cls
.11e0	08		               php                 ; Sauvegarde les registres
.11e1	48		               pha                 ;   modifiés.
.11e2	a9 93		               lda  #$93           ; Affiche le code basic de
.11e4	20 d2 ff	               jsr  chrout         ;   d'effacement d'écran.
.11e7	68		               pla                 ; Récupère les registres
.11e8	28		               plp                 ;   modifiés.
.11e9	60		               rts
.11ea			putnch
.11ea	20 61 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.11ed	20 d2 ff	again          jsr  chrout         ; On affiche A.
.11f0	ca		               dex                 ; Un de moins à faire.
.11f1	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.11f3	20 90 13	out            jsr  popreg         ; Récupère tous les registres.
.11f6	60		               rts
.11f7			putch
.11f7	08		               php                 ; Sauvegarde le registre de status.
.11f8	20 d2 ff	               jsr  chrout         ; Affiche le caractère de Acc.
.11fb	28		               plp                 ; Récupère le registre de status.
.11fc	60		               rts
.11fd			puts
.11fd	20 f3 12	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.1200	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.1202	84 fc		               sty  zpage1+1       ;   dans ZP1.
.1204	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.1206	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.1208	f0 09		               beq  exit           ; Si $00 on sort.
.120a	20 d2 ff	               jsr  chrout         ; Affiche le caractères.
.120d	20 48 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1210	4c 06 12	               jmp  next           ; Saute chercher le prochain carac.
.1213	20 2e 13	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.1216	60		               rts
.1217			gotoxy
.1217	08		               php                 ; Sauvegarde le registre de
.1218	48		               pha                 ;   status et le registre a.
.1219	18		               clc                 ; Carry = 1 pour que kplot
.121a	8a		               txa                 ;   positionne le curseur.
.121b	48		               pha                 ; On inverse X et Y pcq kplot
.121c	98		               tya                 ;
.121d	aa		               tax                 ;   prend X comme la ligne
.121e	68		               pla                 ;
.121f	a8		               tay                 ;   et Y comme la colonne.
.1220	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.1223	68		               pla                 ; Récupère le registre a et
.1224	28		               plp                 ;   le registre de status.
.1225	60		               rts
.1226			cursor
=$0286			bascol    =    $0286               ; debugme
.1226	20 61 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.1229	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.122b	20 f0 ff	               jsr  kplot          ; On récupère la position du
.122e	8c 50 12	               sty  cx             ;   curseur et on la sauvegarde
.1231	8e 51 12	               stx  cy             ;   dans les vars locales.
.1234	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.1237	8d 52 12	               sta  bcol           ; BASIC du texte.
.123a	4c 4c 12	               jmp  out            ; c'est fini on sort.
.123d	ae 51 12	restore        ldx  cy             ; Comme C=1, On charge x avec
.1240	ac 50 12	               ldy  cx             ;   la ligne, y ace  la col.
.1243	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.1246	ad 52 12	               lda  bcol           ; On replace la couleur par basic
.1249	8d 86 02	               sta  bascol         ;   sauvegardé.
.124c	20 90 13	out            jsr  popreg         ; Récupère tous les registres.
.124f	60		               rts
>1250	00		cx   .byte     $00
>1251	00		cy   .byte     $00
>1252	00		bcol .byte     $00
.1253			cursave
.1253	08		               php
.1254	38		               sec
.1255	20 26 12	               jsr  cursor         ; Voir cette fonction plus haut.
.1258	28		               plp
.1259	60		               rts
.125a			curput
.125a	08		               php
.125b	18		               clc
.125c	20 26 12	               jsr  cursor         ; Voir cette fonction plus haut.
.125f	28		               plp
.1260	60		               rts
.1261			putsxy
.1261	20 f3 12	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.1264	86 fb		               stx  zpage1         ; On place la position de la
.1266	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.1268	a0 00		               ldy  #$00           ; On charge l'index à 0.
.126a	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.126c	aa		               tax                 ;   dans X.
.126d	20 48 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1270	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.1272	a8		               tay                 ; dans Y.
.1273	20 17 12	               jsr  gotoxy         ; on positionne le curseur.
.1276	20 48 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1279	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.127b	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.127d	20 fd 11	               jsr  puts           ;   l'affiche.
.1280	20 2e 13	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.1283	60		               rts
>1284	00 00		straddr   .word     $00
>1286	00		px        .byte     $00
>1287	00		py        .byte     $00
>1288	00 00		zp1       .word     $00
.128a			putscxy
.128a	20 f3 12	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.128d	86 fb		               stx  zpage1         ; On place la position de la
.128f	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.1291	a0 00		               ldy  #$00           ; On charge l'index à 0.
.1293	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.1296	48		               pha                 ;   actuelle de basic.
.1297	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.1299	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.129c	20 48 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.129f	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.12a1	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.12a3	20 61 12	               jsr  putsxy         ;   l'affiche.
.12a6	68		               pla                 ; On replace la couleur basic
.12a7	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.12aa	20 2e 13	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.12ad	60		               rts
.12ae			putrahex
.12ae	20 61 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.12b1	20 81 15	               jsr  atohex         ; Conversion de a chaîne hexa.
.12b4	a2 1e		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.12b6	a0 15		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.12b8	20 fd 11	               jsr  puts           ; Affiche la chaîne.
.12bb	20 90 13	               jsr  popreg         ; Récupère tous les registres.
.12be	60		               rts
.12bf			kputrahexxy
.12bf			bputrahexxy
.12bf			putrahexxy
.12bf	08		               php                 ; Sauvegarde le registre de
.12c0	48		               pha                 ;   status et le registre a.
.12c1	20 81 15	               jsr  atohex         ; Convertion de a en hexadécimal.
.12c4	a2 1b		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.12c6	a0 15		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.12c8	20 61 12	               jsr  putsxy         ; Positionne et affiche la chaîne.
.12cb	68		               pla                 ; Récupère le registre a et
.12cc	28		               plp                 ;   le registre de status.
.12cd	60		               rts
.12ce			putrahexcxy
.12ce	20 61 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.12d1	20 81 15	               jsr  atohex         ; Convertion de a en hexadécimal.
.12d4	a2 1b		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.12d6	a0 15		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.12d8	20 61 12	               jsr  putsxy         ; Colore, positionne et affiche la
.12db	20 90 13	               jsr  popreg         ; Récupère tous les registres.
.12de	60		               rts
.12df			setinverse
.12df	48		               pha
.12e0	a9 12		               lda  #$12
.12e2	20 d2 ff	               jsr  chrout
.12e5	68		               pla
.12e6	60		               rts
.12e7			clrinverse
.12e7	48		               pha
.12e8	a9 92		               lda  #$92
.12ea	20 d2 ff	               jsr  chrout
.12ed	68		               pla
.12ee	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>12ef	00		rp        .byte     0
>12f0	00		ra        .byte     0
>12f1	00 00		pc        .word     0
.12f3			pushall
.12f3			push
.12f3	08		          php            ; stack : flg, pcl, pch
.12f4	78		          sei
.12f5	8d f0 12	          sta  ra        ; save a
.12f8	68		          pla            ; stack : pcl, pch
.12f9	8d ef 12	          sta  rp        ; save rp
.12fc	68		          pla            ; stack : pch
.12fd	8d f1 12	          sta  pc        ; save pcl
.1300	68		          pla            ; stack : -
.1301	8d f2 12	          sta  pc+1      ; save pch
.1304	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1306	48		          pha            ; stack : zp1l
.1307	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1309	48		          pha            ; stack : zp1h, zp1l
.130a	a5 fd		          lda  zpage2    ; get zpage2 low byte
.130c	48		          pha            ; stack : zp2l, zp1h, zp1l
.130d	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.130f	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.1310	ad ef 12	          lda  rp        ; get rp
.1313	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1314	ad f0 12	          lda  ra        ; get a
.1317	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1318	8a		          txa            ; get x
.1319	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.131a	98		          tya            ; get y
.131b	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.131c	ad f2 12	          lda  pc+1      ; get pch
.131f	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1320	ad f1 12	          lda  pc        ; get pcl
.1323	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1324	ad ef 12	          lda  rp        ; get rp
.1327	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1328	ad f0 12	          lda  ra        ; get a
.132b	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.132c	58		          cli
.132d	60		          rts
.132e			pullall
.132e			pull
.132e			popall
.132e			pop
.132e	78		          sei
.132f	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1330	8d f1 12	          sta  pc        ; save pcl
.1333	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1334	8d f2 12	          sta  pc+1      ; save pch
.1337	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1338	a8		          tay            ; set y
.1339	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.133a	aa		          tax            ; set x
.133b	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.133c	8d f0 12	          sta  ra        ; save a
.133f	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1340	8d ef 12	          sta  rp        ; save rp
.1343	68		          pla            ; stack : zp2l, zp1h, zp1l
.1344	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1346	68		          pla            ; stack : zp1h, zp1l
.1347	85 fd		          sta  zpage2    ; get zpage2 High byte
.1349	68		          pla            ; stack : zp1l
.134a	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.134c	68		          pla            ; stack :
.134d	85 fb		          sta  zpage1    ; get zpage1 High byte
.134f	ad f2 12	          lda  pc+1      ; get pch
.1352	48		          pha            ; stack : pch
.1353	ad f1 12	          lda  pc
.1356	48		          pha            ; stack : pcl, pch
.1357	ad ef 12	          lda  rp        ; get rp
.135a	48		          pha            ; stack : rp, pcl, pch
.135b	ad f0 12	          lda  ra        ; set ra
.135e	58		          cli
.135f	28		          plp            ; stack : pcl, pch
.1360	60		          rts
.1361			pushreg
.1361	08		          php            ; stack : flg, pcl, pch
.1362	78		          sei
.1363	8d f0 12	          sta  ra        ; save a
.1366	68		          pla            ; stack : pcl, pch
.1367	8d ef 12	          sta  rp        ; save rp
.136a	68		          pla            ; stack : pch
.136b	8d f1 12	          sta  pc        ; save pcl
.136e	68		          pla            ; stack : -
.136f	8d f2 12	          sta  pc+1      ; save pch
.1372	ad ef 12	          lda  rp        ; get rp
.1375	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1376	ad f0 12	          lda  ra        ; get a
.1379	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.137a	8a		          txa            ; get x
.137b	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.137c	98		          tya            ; get y
.137d	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.137e	ad f2 12	          lda  pc+1      ; get pch
.1381	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1382	ad f1 12	          lda  pc        ; get pcl
.1385	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1386	ad ef 12	          lda  rp        ; get rp
.1389	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.138a	ad f0 12	          lda  ra        ; get a
.138d	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.138e	58		          cli
.138f	60		          rts
.1390			pullreg
.1390			popreg
.1390	78		          sei
.1391	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1392	8d f1 12	          sta  pc        ; save pcl
.1395	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1396	8d f2 12	          sta  pc+1      ; save pch
.1399	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.139a	a8		          tay            ; set y
.139b	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.139c	aa		          tax            ; set x
.139d	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.139e	8d f0 12	          sta  ra        ; save a
.13a1	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.13a2	8d ef 12	          sta  rp        ; save rp
.13a5	ad f2 12	          lda  pc+1      ; get pch
.13a8	48		          pha            ; stack : pch
.13a9	ad f1 12	          lda  pc
.13ac	48		          pha            ; stack : pcl, pch
.13ad	ad ef 12	          lda  rp        ; get rp
.13b0	48		          pha            ; stack : rp, pcl, pch
.13b1	ad f0 12	          lda  ra        ; set ra
.13b4	58		          cli
.13b5	28		          plp            ; stack : pcl, pch
.13b6	60		          rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.13b7			blkfill
.13b7	20 f3 12	bf0            jsr  push
.13ba	20 82 14	               jsr  savezp1
.13bd	84 fc		               sty  zpage1+1
.13bf	a0 00		               ldy  #$00
.13c1	84 fb		               sty  zpage1
.13c3	91 fb		bf1            sta  (zpage1),y
.13c5	c8		               iny
.13c6	d0 fb		               bne  bf1
.13c8	20 91 14	               jsr  restzp1
.13cb	20 2e 13	               jsr  pop
.13ce	60		               rts
.13cf			memfill
.13cf	20 f3 12	               jsr  push
.13d2	20 b7 13	mf1            jsr  blkfill
.13d5	c8		               iny
.13d6	ca		               dex
.13d7	d0 f9		               bne  mf1
.13d9	20 2e 13	               jsr  pop
.13dc	60		               rts
.13dd			memmove
.13dd	20 f3 12	               jsr  push
.13e0	ba		               tsx            ; On se crée un pointeur ...
.13e1	8a		               txa
.13e2	18		               clc
.13e3	69 0b		               adc  #11
.13e5	a8		               tay
.13e6	a2 06		               ldx  #$06
.13e8	b9 00 01	nextbyte       lda  $0100,y
.13eb	99 37 14	               sta  words,y
.13ee	c8		               iny
.13ef	ca		               dex
.13f0	d0 f6		               bne  nextbyte
.13f2	ad 37 14	               lda  s
.13f5	8d 0e 14	               sta  source+1
.13f8	ad 38 14	               lda  s+1
.13fb	8d 0f 14	               sta  source+2
.13fe	ad 39 14	               lda  d
.1401	8d 0b 14	               sta  destin+1
.1404	ad 3a 14	               lda  d+1
.1407	8d 0c 14	               sta  destin+2
.140a	ad ff ff	destin         lda  $ffff
.140d	8d ff ff	source         sta  $ffff
.1410	ee 0b 14	               inc  destin+1
.1413	d0 03		               bne  src
.1415	ee 0c 14	               inc  destin+2
.1418	ee 0e 14	src            inc  source+1
.141b	d0 03		               bne  cnt
.141d	ee 0f 14	               inc  source+2
.1420	ad 3b 14	cnt            lda  compte
.1423	d0 08		               bne  decit
.1425	ad 3c 14	               lda  compte+1
.1428	f0 09		               beq  fini
.142a	ce 3c 14	               dec  compte+1
.142d	ce 3b 14	decit          dec  compte
.1430	4c 0a 14	               jmp  destin
.1433	20 2e 13	fini           jsr  pop
.1436	60		               rts
.1437			words
>1437	00 00		s         .word     $0000
>1439	00 00		d         .word     $0000
>143b	00 00		compte    .word     $0000
.143d			decword
.143d	20 f3 12	               jsr  push
.1440	86 fd		               stx  zpage2
.1442	84 fe		               sty  zpage2+1
.1444	20 2e 13	               jsr  pop
.1447	60		               rts
.1448			inczpage1
.1448			inczp1
.1448	08		               php
.1449	48		               pha
.144a	e6 fb		               inc  zpage1
.144c	a5 fb		               lda  zpage1
.144e	d0 02		               bne  nopage
.1450	e6 fc		               inc  zpage1+1
.1452	68		nopage         pla
.1453	28		               plp
.1454	60		               rts
.1455			deczpage1
.1455			deczp1
.1455	08		               php
.1456	48		               pha
.1457	c6 fb		               dec  zpage1
.1459	a5 fb		               lda  zpage1
.145b	c9 ff		               cmp  #$ff
.145d	f0 02		               beq  report
.145f	d0 02		               bne  nopage
.1461	c6 fc		report         dec  zpage1+1
.1463	68		nopage         pla
.1464	28		               plp
.1465	60		               rts
.1466			inczpage2
.1466			inczp2
.1466	08		               php
.1467	48		               pha
.1468	e6 fd		               inc  zpage2
.146a	a5 fd		               lda  zpage2
.146c	d0 02		               bne  nopage
.146e	e6 fe		               inc  zpage2+1
.1470	68		nopage         pla
.1471	28		               plp
.1472	60		               rts
.1473			deczpage2
.1473			deczp2
.1473	08		               php
.1474	c6 fd		               dec  zpage2
.1476	a5 fd		               lda  zpage2
.1478	c9 ff		               cmp  #$ff
.147a	f0 02		               beq  report
.147c	d0 02		               bne  nopage
.147e	c6 fe		report         dec  zpage2+1
.1480	28		nopage         plp
.1481	60		               rts
.1482			savezp1
.1482	08		               php
.1483	48		               pha
.1484	a5 fb		               lda  zpage1
.1486	8d 13 15	               sta  zp1
.1489	a5 fc		               lda  zpage1+1
.148b	8d 14 15	               sta  zp1+1
.148e	68		               pla
.148f	28		               plp
.1490	60		               rts
.1491			restzp1
.1491	08		               php
.1492	48		               pha
.1493	ad 13 15	               lda  zp1
.1496	85 fb		               sta  zpage1
.1498	ad 14 15	               lda  zp1+1
.149b	85 fc		               sta  zpage1+1
.149d	68		               pla
.149e	28		               plp
.149f	60		               rts
.14a0			savezp2
.14a0	08		               php
.14a1	48		               pha
.14a2	a5 fd		               lda  zpage2
.14a4	8d 15 15	               sta  zp2
.14a7	a5 fe		               lda  zpage2+1
.14a9	8d 16 15	               sta  zp2+1
.14ac	68		               pla
.14ad	28		               plp
.14ae	60		               rts
.14af			restzp2
.14af	08		               php
.14b0	48		               pha
.14b1	ad 15 15	               lda  zp2
.14b4	85 fd		               sta  zpage2
.14b6	ad 16 15	               lda  zp2+1
.14b9	85 fe		               sta  zpage2+1
.14bb	68		               pla
.14bc	28		               plp
.14bd	60		               rts
.14be			xy2addr
.14be	08		               php
.14bf	48		               pha
.14c0	8a		               txa
.14c1	48		               pha
.14c2	98		               tya
.14c3	48		               pha
.14c4	ad 0e 15	               lda  addr1+1
.14c7	8d 10 15	               sta  addr2+1
.14ca	ad 0d 15	               lda  addr1
.14cd	8d 0f 15	               sta  addr2
.14d0	c0 00		               cpy  #$00
.14d2	f0 0f		               beq  addx
.14d4	18		moreline       clc
.14d5	6d 0c 15	               adc  ymult
.14d8	90 03		               bcc  norepy
.14da	ee 10 15	               inc  addr2+1
.14dd	8d 0f 15	norepy         sta  addr2
.14e0	88		               dey
.14e1	d0 f1		               bne  moreline
.14e3	8a		addx           txa
.14e4	18		               clc
.14e5	6d 0f 15	               adc  addr2
.14e8	90 03		               bcc  thatsit
.14ea	ee 10 15	               inc  addr2+1
.14ed	8d 0f 15	thatsit        sta  addr2
.14f0	68		               pla
.14f1	a8		               tay
.14f2	68		               pla
.14f3	aa		               tax
.14f4	68		               pla
.14f5	28		               plp
.14f6	60		               rts
.14f7			loop
.14f7	ce 17 15	               dec  loopcount
.14fa	d0 03		               bne  norep
.14fc	ce 18 15	               dec  loopcount+1
.14ff	ad 17 15	norep          lda  loopcount
.1502	c9 00		               cmp  #$00
.1504	d0 05		               bne  out
.1506	4d 18 15	               eor  loopcount+1
.1509	c9 ff		               cmp  #$ff
.150b	60		out            rts
>150c	28		ymult          .byte     40
>150d	00 00		addr1          .word     $0000
>150f	00 00		addr2          .word     $0000
>1511	00 00		bytecnt        .word     $0000
>1513	00 00		zp1            .word     $0000
>1515	00 00		zp2            .word     $0000
>1517	00 00		loopcount      .word     $0000

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1519	01		a2hexcol       .byte     1              ; pour aputscxy
>151a	00		a2hexbkcol     .byte     %00000000
.151b			a2hexpos
>151b	00		a2hexpx        .byte     0              ; pour aputsxy
>151c	00		a2hexpy        .byte     0
>151d	24		a2hexprefix    .byte     "$"            ; pour aputs
>151e	00 00		a2hexstr       .word     $00
>1520	00 00		               .word     $00
>1522	00		               .byte     0              ; 0 end string
>1523	01		abincol        .byte     1
>1524	00		abinbkcol      .byte     %00000000
>1525	30 30 30 30	abin           .null     "00000000"
>1529	30 30 30 30 00
>152e	20 20 20 00	adec           .null     "   "
.1532			putahexfmtxy
.1532	20 f3 12	               jsr  push
.1535	20 81 15	               jsr  atohex
.1538	ae 1b 15	               ldx  a2hexpx
.153b	ac 1c 15	               ldy  a2hexpy
.153e	20 17 12	               jsr  gotoxy
.1541	a2 1d		               ldx  #<a2hexprefix
.1543	a0 15		               ldy  #>a2hexprefix
.1545	20 fd 11	               jsr  puts
.1548	20 2e 13	               jsr  pop
.154b	60		               rts
.154c			putahexfmt
.154c	20 f3 12	               jsr  push
.154f	20 81 15	               jsr  atohex
.1552	a2 1d		               ldx  #<a2hexprefix
.1554	a0 15		               ldy  #>a2hexprefix
.1556	20 fd 11	               jsr  puts
.1559	20 2e 13	               jsr  pop
.155c	60		               rts
.155d			putahex
.155d	20 f3 12	               jsr  push
.1560	20 81 15	               jsr  atohex
.1563	a2 1e		               ldx  #<a2hexstr
.1565	a0 15		               ldy  #>a2hexstr
.1567	20 fd 11	               jsr  puts
.156a	20 2e 13	               jsr  pop
.156d	60		               rts
.156e			nibtohex
.156e	08		               php
.156f	29 0f		               and  #$0f
.1571	f8		               sed
.1572	18		               clc
.1573	69 90		               adc  #$90
.1575	69 40		               adc  #$40
.1577	d8		               cld
.1578	28		               plp
.1579	60		               rts
.157a			lsra4bits
.157a	08		               php
.157b	4a		               lsr
.157c	4a		               lsr
.157d	4a		               lsr
.157e	4a		               lsr
.157f	28		               plp
.1580	60		               rts
.1581			atohex
.1581	08		               php
.1582	48		               pha
.1583	48		               pha
.1584	20 7a 15	               jsr  lsra4bits
.1587	20 6e 15	               jsr  nibtohex
.158a	8d 1e 15	               sta  a2hexstr
.158d	68		               pla
.158e	20 6e 15	               jsr  nibtohex
.1591	8d 1f 15	               sta  a2hexstr+1
.1594	a9 00		               lda  #$00                ; set end of string
.1596	8d 20 15	               sta  a2hexstr+2
.1599	68		               pla
.159a	28		               plp
.159b	60		               rts
.159c			xy2hex
.159c	20 f3 12	               jsr  push
.159f	20 81 15	               jsr  atohex
.15a2	8a		               txa
.15a3	48		               pha
.15a4	20 7a 15	               jsr  lsra4bits
.15a7	20 6e 15	               jsr  nibtohex
.15aa	8d 1e 15	               sta  a2hexstr
.15ad	68		               pla
.15ae	20 6e 15	               jsr  nibtohex
.15b1	8d 1f 15	               sta  a2hexstr+1
.15b4	98		               tya
.15b5	48		               pha
.15b6	20 7a 15	               jsr  lsra4bits
.15b9	20 6e 15	               jsr  nibtohex
.15bc	8d 20 15	               sta  a2hexstr+2
.15bf	68		               pla
.15c0	20 6e 15	               jsr  nibtohex
.15c3	8d 21 15	               sta  a2hexstr+3
.15c6	a9 00		               lda  #$00                ; 0 ended string
.15c8	8d 22 15	               sta  a2hexstr+4
.15cb	20 2e 13	               jsr  pop
.15ce			atobin
.15ce	20 f3 12	               jsr  push
.15d1	a2 08		               ldx  #8
.15d3	a0 00		               ldy  #0
.15d5	18		               clc
.15d6	2a		nextbit        rol
.15d7	48		               pha
.15d8	69 00		               adc  #$00
.15da	29 01		               and  #$01
.15dc	20 6e 15	               jsr  nibtohex
.15df	99 25 15	               sta  abin,y
.15e2	68		               pla
.15e3	c8		               iny
.15e4	ca		               dex
.15e5	d0 ef		               bne  nextbit
.15e7	a9 00		               lda  #0
.15e9	99 25 15	               sta  abin,y
.15ec	20 2e 13	               jsr  pull
.15ef	60		               rts
.15f0			abinsetmccol
.15f0	20 61 13	               jsr  pushreg
.15f3	20 90 13	               jsr  popreg
.15f6	60		               rts
.15f7			putabin
.15f7	20 ce 15	               jsr     atobin
.15fa	20 f3 12	               jsr     push
.15fd	a2 25		               ldx     #<abin
.15ff	a0 15		               ldy     #>abin
.1601	20 fd 11	               jsr     puts
.1604	20 2e 13	               jsr     pop
.1607	60		               rts
.1608			printabin
.1608	20 f3 12	               jsr     push
.160b	a2 25		               ldx     #<abin
.160d	a0 15		               ldy     #>abin
.160f	20 fd 11	               jsr     puts
.1612	20 2e 13	               jsr     pop
.1615	60		               rts
.1616			putabinfmt
.1616	08		               php
.1617	48		               pha
.1618	a9 25		               lda     #"%"
.161a	20 f7 11	               jsr     putch
.161d	68		               pla
.161e	20 f7 15	               jsr     putabin
.1621	28		               plp
.1622	60		               rts
.1623			putabinxy
.1623	20 17 12	               jsr     gotoxy
.1626	20 f7 15	               jsr     putabin
.1629	60		               rts
.162a			putabinfmtxy
.162a	20 17 12	               jsr     gotoxy
.162d	20 16 16	               jsr     putabinfmt
.1630	60		               rts
.1631			atodec
.1631	20 f3 12	               jsr  push
.1634	f8		               sed            ; On se place en mode décimal.
.1635	aa		               tax            ; On déplace a dans x.
.1636	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.1638	a9 00		               lda  #$00      ; 0 dans A.
.163a	18		nextbit        clc            ; Bit carry a 0.
.163b	69 01		               adc  #$01      ; Ajoute 1 a A.
.163d	90 01		               bcc  decx      ; Pas de carry, pas de report.
.163f	c8		               iny            ; On incrémente Y
.1640	ca		decx           dex            ; X=X-1
.1641	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.1643	48		               pha            ; A sur le stack.
.1644	98		               tya            ; Y dans A (MSB)
.1645	20 6e 15	               jsr  nibtohex  ; a hex petsci ...
.1648	8d 2e 15	               sta  adec      ; ... dans tampon.
.164b	68		               pla            ; Récupere A
.164c	48		               pha            ;
.164d	20 6e 15	               jsr  nibtohex
.1650	8d 30 15	               sta  adec+2
.1653	68		               pla
.1654	6a		               ror
.1655	6a		               ror
.1656	6a		               ror
.1657	6a		               ror
.1658	20 6e 15	               jsr  nibtohex
.165b	8d 2f 15	               sta  adec+1
.165e	d8		               cld            ; On revient en mode binaire.
.165f	20 2e 13	               jsr  pull
.1662	60		               rts
.1663			putadec
.1663	20 f3 12	               jsr  push
.1666	20 31 16	               jsr  atodec
.1669	a2 2e		               ldx  #<adec
.166b	a0 15		               ldy  #>adec+1
.166d	20 fd 11	               jsr  puts
.1670	20 2e 13	               jsr  pop
.1673	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.1674			waitstop
.1674	08		            php         ;\ Sauvegarde les drapeaux
.1675	48		            pha         ;/  et l'accumulateur.
.1676	a9 00		            lda #0      ;\ Efface le tampon
.1678	85 c6		            sta 198     ;/  du clavier.
.167a	20 ed f6	wait        jsr k_stop  ; Cherche la clef [RUN/STOP].
.167d	d0 fb		            bne  wait   ;  Elle n'est pas pesée.
.167f	68		            pla         ;\ Récupère l'accmulateur et
.1680	28		            plp         ;/  les drapeaux.
.1681	60		            rts
.1682			anykey
.1682	08		            php         ;\ Sauvegarde les drapeaux
.1683	48		            pha         ;/  et l'accumulateur.
.1684	a9 00		            lda #0      ;\ Efface le tampon
.1686	85 c6		            sta 198     ;/  du clavier.
.1688	a5 cb		nokey       lda 203     ; Lit la matrice de la clef actuelle dans le tampon.
.168a	c9 40		            cmp #64     ; Si 64 alors aucune clef n'est appuyée.
.168c	f0 fa		            beq nokey   ; On attend qu'il y en aie une.
.168e	20 98 16	            jsr kbfree  ; On attend que le clavier soit relâché.
.1691	a9 00		            lda #0      ;\ Efface le tampon
.1693	85 c6		            sta 198     ;/  du clavier.
.1695	68		            pla         ;\ Récupère l'accmulateur et
.1696	28		            plp         ;/  les drapeaux.
.1697	60		            rts
.1698			kbfree
.1698	08		            php         ;\ Sauvegarde les drapeaux
.1699	48		            pha         ;/  et l'accumulateur.
.169a	a5 cb		iskey       lda 203     ; Lit la matrice de la clef actuelle dans le tampon.
.169c	c9 40		            cmp #64     ; Si 64 alors aucune clef n'est appuyée.
.169e	d0 fa		            bne iskey   ; On attend qu'il y en aie aucune.
.16a0	68		            pla         ;\ Récupère l'accmulateur et
.16a1	28		            plp         ;/  les drapeaux.
.16a2	60		            rts
.16a3			getkey
.16a3	08		            php         ; Sauvegarde les drapeaux.
.16a4	20 e4 ff	gkagain     jsr getin   ; Tente de lire une clef.
.16a7	c9 00		            cmp #0      ; 0 si aucune.
.16a9	f0 f9		            beq gkagain ; Aucune, alors on attend.
.16ab	08		            php         ; Récupère les drapeaux.
.16ac	60		            rts
.16ad			kbflushbuff
.16ad	08		            php         ;\ Sauvegarde les drapeaux
.16ae	48		            pha         ;/  et l'accumulateur.
.16af	a9 00		            lda #0      ;\ Efface le tampon
.16b1	85 c6		            sta 198     ;/  du clavier.
.16b3	68		            pla         ;\ Récupère l'accmulateur et
.16b4	28		            plp         ;/  les drapeaux.
.16b5	60		            rts
.16b6			waitkey
.16b6	08		            php         ;\ Sauvegarde les drapeaux
.16b7	48		            pha         ;/  et l'accumulateur.
.16b8	8d f5 16	            sta thekey  ; Sauvegarde la clef attendue.
.16bb	a9 00		            lda #0      ;\ Efface le tampon
.16bd	85 c6		            sta 198     ;/  du clavier.
.16bf	20 e4 ff	nogood      jsr getin   ; Tente de lire une clef.
.16c2	cd f5 16	            cmp thekey  ; La compare avec celle attendue.
.16c5	d0 f8		            bne nogood  ; Boucle si ce l'est pas la bonne.
.16c7	20 d2 ff	            jsr chrout  ; L'affiche quand elle est bonne.
.16ca	68		            pla         ;\ Récupère l'accmulateur et
.16cb	28		            plp         ;/  les drapeaux.
.16cc	60		            rts
.16cd			waitspace
.16cd	08		            php         ;\ Sauvegarde les drapeaux
.16ce	48		            pha         ;/  et l'accumulateur.
.16cf	a9 00		            lda #0      ;\ Efface le tampon
.16d1	85 c6		            sta 198     ;/  du clavier.
.16d3	a9 cb		nospace     lda #203    ; Lit la matrice du clavier.
.16d5	c9 3c		            cmp #60     ; 60 dans la matrice = barre d'espace appuyée.
.16d7	08		            php         ; Sauvegarde les drapeaux pour la comparaison.
.16d8	a9 00		            lda #0      ;\ Efface le tampon
.16da	85 c6		            sta 198     ;/  du clavier.
.16dc	28		            plp         ; Récupère les drapeaux pour la comparaison.
.16dd	d0 f4		            bne nospace
.16df	68		            pla         ;\ Récupère l'accmulateur et
.16e0	28		            plp         ;/  les drapeaux.
.16e1			waitreturn
.16e1	08		            php         ;\ Sauvegarde les drapeaux
.16e2	48		            pha         ;/  et l'accumulateur.
.16e3	a9 00		            lda #0      ;\ Efface le tampon
.16e5	85 c6		            sta 198     ;/  du clavier.
.16e7	a9 cb		noreturn    lda #203    ; Lit la matrice du clavier.
.16e9	c9 01		            cmp #1      ; 1 dans la matrice = [RETURN] appuyé.
.16eb	08		            php         ; Sauvegarde les drapeaux pour la comparaison.
.16ec	a9 00		            lda #0      ;\ Efface le tampon
.16ee	85 c6		            sta 198     ;/  du clavier.
.16f0	28		            plp         ; Récupère les drapeaux pour la comparaison.
.16f1	d0 f4		            bne noreturn
.16f3	68		            pla         ;\ Récupère l'accmulateur et
.16f4	28		            plp         ;/  les drapeaux.
>16f5	00		thekey      .byte   0
>16f6	01		thecount    .byte   $01
>16f7	00 00 00 00	asciitorom  .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>16fb	00 00 00 00 00 00 00 00 00 0d 00 00
>1707	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>170b	00 00 00 00 00 00 00 00 00 00 00 00
>1717	20 21 22 23	            .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>171b	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1727	30 31 32 33	            .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>172b	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1737	00 01 02 03	            .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>173b	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1747	10 11 12 13	            .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>174b	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1757	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>175b	00 00 00 00 00 00 00 00 00 00 00 00
>1767	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>176b	00 00 00 00 00 00 00 00 00 00 00 00
>1777	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>177b	00 00 00 00 00 00 00 00 00 00 00 00
>1787	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>178b	00 00 00 00 00 00 00 00 00 00 00 00
>1797	60 61 62 63	            .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>179b	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>17a7	70 71 72 73	            .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>17ab	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>17b7	40 41 42 43	            .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>17bb	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>17c7	50 51 52 53	            .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>17cb	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>17d7	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>17db	00 00 00 00 00 00 00 00 00 00 00 00
>17e7	00 00 00 00	            .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>17eb	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-showregs.asm

.17f7			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.17f7	08		               php                 ; Sauvegarde le registre de status sur stack.
.17f8	8d f2 19	               sta  rega           ; Sauvegarde Acc en mémoire.
.17fb	68		               pla                 ; Récupère le registre de status du stack.
.17fc	8d f5 19	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.17ff	8e f3 19	               stx  regx           ; Sauvegarde le registre X en mémoire.
.1802	8c f4 19	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.1805	ba		               tsx                 ; Copie le registre S dans X.
.1806	8e f6 19	               stx  regs           ; Sauvegarde le registre S en mémoire.
.1809	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.180a	8d f8 19	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.180d	8d fa 19	               sta  regpcl2        ; ... une seconde fois.
.1810	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.1811	8d f7 19	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.1814	8d f9 19	               sta  regpch2        ; ... une seconde fois.
.1817	ad f2 19	               lda  rega           ; On commence par le registre Acc.
.181a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.181b	20 6e 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.181e	8d 8f 19	               sta  vala+1         ; ... et le place dans la chaine.
.1821	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1822	20 7a 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1825	20 6e 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1828	8d 8e 19	               sta  vala           ; ... et le place dans la chaine.
.182b	ad f4 19	               lda  regy           ; Ensuite, le registre Y.
.182e	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.182f	20 6e 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1832	8d a6 19	               sta  valy+1         ; ... et le place dans la chaine.
.1835	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1836	20 7a 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1839	20 6e 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.183c	8d a5 19	               sta  valy           ; ... et le place dans la chaine.
.183f	ad f3 19	               lda  regx           ; Ensuite, le registre X.
.1842	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1843	20 6e 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1846	8d 9a 19	               sta  valx+1         ; ... et le place dans la chaine.
.1849	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.184a	20 7a 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.184d	20 6e 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1850	8d 99 19	               sta  valx           ; ... et le place dans la chaine.
.1853	ad f5 19	               lda  regp           ; Ensuite, le registre de status.
.1856	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1857	20 6e 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.185a	8d b1 19	               sta  valp+1         ; ... et le place dans la chaine.
.185d	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.185e	20 7a 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1861	20 6e 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1864	8d b0 19	               sta  valp           ; ... et le place dans la chaine.
.1867	ad f6 19	               lda  regs           ; Ensuite, le pointeur de stack.
.186a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.186b	20 6e 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.186e	8d bc 19	               sta  vals+1         ; ... et le place dans la chaine.
.1871	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1872	20 7a 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1875	20 6e 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1878	8d bb 19	               sta  vals           ; ... et le place dans la chaine.
.187b	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.187c	ad fa 19	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.187f	69 00		               adc  #$00           ; On y ajoute 1.
.1881	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.1883	ee f9 19	               inc  regpch2        ; ... en incrémentant le MSB.
.1886	8d fa 19	noreport       sta  regpcl2        ; On le sauvegarde.
.1889	ad fa 19	               lda  regpcl2        ; On récupère la partie basse du compteur.
.188c	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.188d	20 6e 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1890	8d cc 19	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.1893	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1894	20 7a 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1897	20 6e 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.189a	8d cb 19	               sta  valpcl         ; ... et lace le code à la position "--X-".
.189d	ad f9 19	               lda regpch2         ; On récupère la partie haute du compteur.
.18a0	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18a1	20 6e 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18a4	8d ca 19	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.18a7	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.18a8	20 7a 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18ab	20 6e 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18ae	8d c9 19	               sta  valpch         ; ... et lace le code à la position "X---".
.18b1	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.18b3	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18b4	20 6e 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18b7	8d dd 19	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.18ba	68		               pla
.18bb	20 7a 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18be	20 6e 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18c1	8d dc 19	               sta  valz1l         ; ... et lace le code à la position "--X-".
.18c4	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.18c6	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18c7	20 6e 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18ca	8d db 19	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.18cd	68		               pla
.18ce	20 7a 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18d1	20 6e 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18d4	8d da 19	               sta  valz1h         ; ... et lace le code à la position "X---".
.18d7	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.18d9	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18da	20 6e 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18dd	8d ee 19	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.18e0	68		               pla
.18e1	20 7a 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18e4	20 6e 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18e7	8d ed 19	               sta  valz2l         ; ... et lace le code à la position "--X-".
.18ea	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.18ec	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18ed	20 6e 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18f0	8d ec 19	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.18f3	68		               pla
.18f4	20 7a 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18f7	20 6e 15	               jsr  nibtohex
.18fa	8d eb 19	               sta  valz2h         ; ... et lace le code à la position "X---".
.18fd	20 df 12	               jsr  setinverse     ; On se place en mode inverse vidéo.
.1900	20 61 13	               jsr  pushreg
.1903	a2 86		               ldx  #<srega
.1905	a0 19		               ldy  #>srega
.1907	20 8a 12	               jsr  putscxy
.190a	20 90 13	               jsr  popreg
.190d	20 61 13	               jsr  pushreg
.1910	a2 92		               ldx  #<sregx
.1912	a0 19		               ldy  #>sregx
.1914	20 8a 12	               jsr  putscxy
.1917	20 90 13	               jsr  popreg
.191a	20 61 13	               jsr  pushreg
.191d	a2 9d		               ldx  #<sregy
.191f	a0 19		               ldy  #>sregy
.1921	20 8a 12	               jsr  putscxy
.1924	20 90 13	               jsr  popreg
.1927	20 61 13	               jsr  pushreg
.192a	a2 a9		               ldx  #<sregp
.192c	a0 19		               ldy  #>sregp
.192e	20 8a 12	               jsr  putscxy
.1931	20 90 13	               jsr  popreg
.1934	20 61 13	               jsr  pushreg
.1937	a2 b4		               ldx  #<sregs
.1939	a0 19		               ldy  #>sregs
.193b	20 8a 12	               jsr  putscxy
.193e	20 90 13	               jsr  popreg
.1941	20 61 13	               jsr  pushreg
.1944	a2 c0		               ldx  #<sregpc
.1946	a0 19		               ldy  #>sregpc
.1948	20 8a 12	               jsr  putscxy
.194b	20 90 13	               jsr  popreg
.194e	20 61 13	               jsr  pushreg
.1951	a2 d0		               ldx  #<sregz1
.1953	a0 19		               ldy  #>sregz1
.1955	20 8a 12	               jsr  putscxy
.1958	20 90 13	               jsr  popreg
.195b	20 61 13	               jsr  pushreg
.195e	a2 e1		               ldx  #<sregz2
.1960	a0 19		               ldy  #>sregz2
.1962	20 8a 12	               jsr  putscxy
.1965	20 90 13	               jsr  popreg
.1968	20 e7 12	               jsr  clrinverse     ; On quitte le mode inverse vidéo.
.196b	ad f7 19	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.196e	48		               pha                 ; ... à la bonne position sur la pile.
.196f	ad f8 19	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.1972	48		               pha                 ; ... à la bonne position sur la pile.
.1973	ae f6 19	               ldx  regs           ; On replace tous les registre à leurs ...
.1976	9a		               txs                 ; ...
.1977	ac f4 19	               ldy  regy           ; ...
.197a	ae f3 19	               ldx  regx           ; ...
.197d	ad f5 19	               lda  regp           ; ...
.1980	48		               pha                 ; ...
.1981	ad f2 19	               lda  rega           ; ...
.1984	28		               plp                 ; ... valeurs initiales
.1985	60		               rts
>1986	07 01 17	srega   .byte   cyellow,coln+1,line
>1989	20 20 41 3a	        .text   '  a:$' ;4,24
>198d	24
>198e	00 00 20 00	vala    .byte   0,0,32,0
>1992	03 09 17	sregx   .byte   ccyan,coln+9,line
>1995	20 58 3a 24	        .text   ' x:$' ;4,24
>1999	00 00 20 00	valx    .byte   0,0,32,0
>199d	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>19a0	20 59 3a 20	        .text   ' y: $' ;4,24
>19a4	24
>19a5	00 00 20 00	valy    .byte   0,0,32,0
>19a9	08 18 17	sregp   .byte   corange,coln+24,line
>19ac	20 50 3a 24	        .text   ' p:$' ;4,24
>19b0	00 00 20 00	valp    .byte   0,0,32,0
>19b4	0a 1f 17	sregs   .byte   clightred,coln+31,line
>19b7	20 53 3a 24	        .text   ' s:$' ;4,24
>19bb	00 00 20 20	vals    .byte   0,0,32,32,0
>19bf	00
>19c0	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>19c4	20 50 43 3a	        .text   ' pc:$' ;4,24
>19c8	24
>19c9	00 00		valpch  .byte   0,0
>19cb	00 00 20 20	valpcl  .byte   0,0,32,32,0
>19cf	00
>19d0	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>19d4	20 5a 50 31	        .text   ' zp1:$' ;4,24
>19d8	3a 24
>19da	00 00		valz1h  .byte   0,0
>19dc	00 00 20 20	valz1l  .byte   0,0,32,32,0
>19e0	00
>19e1	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>19e5	20 5a 50 32	        .text   ' zp2:$' ;4,24
>19e9	3a 24
>19eb	00 00		valz2h  .byte   0,0
>19ed	00 00 20 20	valz2l  .byte   0,0,32,32,0
>19f1	00
>19f2	00		rega    .byte   0
>19f3	00		regx    .byte   0
>19f4	00		regy    .byte   0
>19f5	00		regp    .byte   0
>19f6	00		regs    .byte   0
>19f7	00		regpch  .byte   0
>19f8	00		regpcl  .byte   0
>19f9	00		regpch2 .byte   0
>19fa	00		regpcl2 .byte   0
>19fb	00		vzp1h   .byte   0
>19fc	00		vzp1l   .byte   0
>19fd	00		vzp2h   .byte   0
>19fe	00		vzp2l   .byte   0

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-drawbox.asm

.19ff			db_tline
.19ff	08		                php                 ; Sauvegarde les registres.
.1a00	48		                pha
.1a01	a9 b0		                lda #tleft          ; Coin suppérieur gauche.
.1a03	8d c0 1a	                sta db_left
.1a06	a9 c0		                lda #hline          ; Ligne horizontale.
.1a08	8d c2 1a	                sta db_mid
.1a0b	a9 ae		                lda #tright         ; Coin suppérieur droit.
.1a0d	8d c1 1a	                sta db_right
.1a10	28		                plp                 ; Récupère les registres.
.1a11	68		                pla
.1a12	20 5b 1a	                jsr db_drawline
.1a15	60		                rts
.1a16			db_bline
.1a16	08		                php                 ; Sauvegarde les registres.
.1a17	48		                pha
.1a18	a9 ad		                lda #bleft          ; Coin inférieur gauche.
.1a1a	8d c0 1a	                sta db_left
.1a1d	a9 c0		                lda #hline          ; Ligne horizontale.
.1a1f	8d c2 1a	                sta db_mid
.1a22	a9 bd		                lda #bright         ; Coin inférieur droit.
.1a24	8d c1 1a	                sta db_right
.1a27	28		                plp                 ; Récupère les registres.
.1a28	68		                pla
.1a29	20 5b 1a	                jsr db_drawline
.1a2c	60		                rts
.1a2d			db_eline
.1a2d	08		                php                 ; Sauvegarde les registres.
.1a2e	48		                pha
.1a2f	a9 dd		                lda #vline          ; Ligne verticale.
.1a31	8d c0 1a	                sta db_left
.1a34	a9 20		                lda #space          ; Caractère espace.
.1a36	8d c2 1a	                sta db_mid
.1a39	a9 dd		                lda #vline          ; Ligne verticale.
.1a3b	8d c1 1a	                sta db_right
.1a3e	28		                plp                 ; Récupère les registres.
.1a3f	68		                pla
.1a40	20 5b 1a	                jsr db_drawline
.1a43	60		                rts
.1a44			db_hline
.1a44	08		                php                 ; Sauvegarde les registres.
.1a45	48		                pha
.1a46	a9 ab		                lda #hleft          ; Extrémité gauche d'une ligne médianne.
.1a48	8d c0 1a	                sta db_left
.1a4b	a9 c0		                lda #hline          ; Ligne horizontale.
.1a4d	8d c2 1a	                sta db_mid
.1a50	a9 b3		                lda #hright         ; Extrémité droite d'une ligne médianne.
.1a52	8d c1 1a	                sta db_right
.1a55	28		                plp                 ; Récupère les registres.
.1a56	68		                pla
.1a57	20 5b 1a	                jsr db_drawline
.1a5a	60		                rts
.1a5b			db_drawline
.1a5b	20 61 13	                jsr pushreg         ; Sauvegarde les registres.
.1a5e	ad 86 02	                lda bascol          ; Sauvegarde de la ...
.1a61	8d c9 1a	                sta drawbox_bascol  ; ... couleur basic.
.1a64	ad c7 1a	                lda drawbox_colour  ; Sélectionne la couleur...
.1a67	8d 86 02	                sta bascol          ; ... de la fenêtre.
.1a6a	c9 10		                cmp #$10            ; Couleur inverse vidéo?
.1a6c	30 05		                bmi noreverse       ; Non ...
.1a6e	a9 12		                lda #18             ; Oui on place basic en inverse ...
.1a70	20 d2 ff	                jsr chrout          ; Vidéo.
.1a73	ae c8 1a	noreverse       ldx drawbox_curline ; On positionne le curseur au ...
.1a76	ac c4 1a	                ldy drawbox_left    ; ... coin suppérieur gauche ...
.1a79	18		                clc                 ; ... de la fenêtre.
.1a7a	20 f0 ff	                jsr plot
.1a7d	ad c0 1a	                lda db_left         ; On dessine le premier caractère.
.1a80	20 d2 ff	                jsr chrout
.1a83	ad c2 1a	                lda db_mid          ; On dessine la ligne horizontale ...
.1a86	ae c5 1a	                ldx drawbox_width   ; ... selon la largeur voulue ...
.1a89	ca		                dex                 ; ... de la fenêtre moins les ...
.1a8a	ca		                dex                 ; ... deux caractères d'extrémité.
.1a8b	20 ea 11	                jsr putnch
.1a8e	ad c1 1a	                lda db_right        ; On dessine le dernier caractère.
.1a91	20 d2 ff	                jsr chrout
.1a94	a9 92		                lda #146            ; On met fin à l'inverse vidéo.
.1a96	20 d2 ff	                jsr chrout
.1a99	ad c9 1a	                lda drawbox_bascol  ; On récupère et replace la ...
.1a9c	8d 86 02	                sta bascol          ; ... couleur de basic.
.1a9f	ee c8 1a	                inc drawbox_curline ; Passe à la ligne suivante.
.1aa2	20 90 13	                jsr popreg          ; Récupère les registres.
.1aa5	60		                rts
.1aa6			db_drawbox
.1aa6	20 61 13	                jsr pushreg         ; Sauvegarde les registres.
.1aa9	ae c6 1a	                ldx drawbox_height  ; Récupère la hauteur de la fenètre.
.1aac	20 ff 19	                jsr db_tline        ; Dessine la ligne suppérieure.
.1aaf	ca		                dex                 ; Soustrait 2 pour tenir compte des ...
.1ab0	ca		                dex                 ; lignes suppérieures et inférieures.
.1ab1	f0 06		                beq lastline        ; Si 0 pas de ligne vide dans la fenètre.
.1ab3	20 2d 1a	moreline        jsr db_eline        ; Dessine une ligne vide de la boîte.
.1ab6	ca		                dex                 ; Une ligne de moins à faire.
.1ab7	d0 fa		                bne moreline        ; On passe à la prochaine s'il en reste.
.1ab9	20 16 1a	lastline        jsr db_bline        ; Dessine la ligne inférieure.
.1abc	20 90 13	                jsr popreg          ; Récupère les registres.
.1abf	60		                rts
=176			tleft           =       176         ; Coin suppérieur gauche.
=174			tright          =       174         ; Coin suppérieur droit.
=173			bleft           =       173         ; Coin inférieur gauche.
=189			bright          =       189         ; Coin inférieur droit.
=171			hleft           =       171         ; Extrémité gauche d'une ligne médianne.
=179			hright          =       179         ; Extrémité droite d'une ligne médianne.
=221			vline           =       221         ; Ligne verticale.
=192			hline           =       192         ; Ligne horizontale.
=32			space           =       32          ; Caractère espace.
>1ac0	00		db_left         .byte   0           ; Caractère Gauche de la ligne courante.
>1ac1	00		db_right        .byte   0           ; Caractère droit de la ligne courante.
>1ac2	00		db_mid          .byte   0           ; Caractère central de la ligne courante.
>1ac3	00		drawbox_top     .byte   0           ; Coordonné du haut de la boite.
>1ac4	00		drawbox_left    .byte   0           ; Coordonné de la gauche de la boîte.
>1ac5	00		drawbox_width   .byte   0           ; Largeur de la boîte.
>1ac6	00		drawbox_height  .byte   0           ; Hauteur de la boîte.
>1ac7	00		drawbox_colour  .byte   0           ; Couleur de la boîte.
>1ac8	00		drawbox_curline .byte   0           ; No de la ligne courante à dessiner.
>1ac9	00		drawbox_bascol  .byte   0           ; Case de mémorisation de la couleur Basic.

;******  Return to file: slbug64.asm


;******  End of listing


; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L slbug64.txt -o slbug64.prg slbug64.asm
; Fri Oct 17 14:30:40 2025

;Offset	;Hex		;Source

;******  Processing input file: slbug64.asm

="20251017-125301"	                Version = "20251017-125301"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	20 50 52 4f	               .text " programmation assembleur sur c64."
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2e
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	20 50 41 52	               .text " par daniel lafrance."
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2e
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 55 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"
.0854	60		              rts                  ; ... doit se rerminer par un RTS.

;******  Return to file: slbug64.asm

.0855			main
.0855	20 ba 11	               jsr  scrmaninit  ; Met en place la gestion d'écran
.0858	08		               php
.0859	48		               pha
.085a	a9 0e		               lda  #14
.085c	20 d2 ff	               jsr  $ffd2
.085f	68		               pla
.0860	28		               plp
.0861	08		               php
.0862	48		               pha
.0863	a9 08		               lda  #$08
.0865	20 d2 ff	               jsr  $ffd2
.0868	68		               pla
.0869	28		               plp
.086a	20 5b 13	               jsr  pushreg
.086d	48		               pha
.086e	a9 05		               lda  #cvert
.0870	8d 20 d0	               sta  $d020
.0873	68		               pla
.0874	48		               pha
.0875	a9 06		               lda  #cbleu
.0877	8d 21 d0	               sta  $d021
.087a	68		               pla
.087b	48		               pha
.087c	a9 01		               lda  #cblanc
.087e	8d 86 02	               sta  bascol
.0881	68		               pla
.0882	20 8a 13	               jsr  popreg
.0885	20 da 11	               jsr  cls
.0888	20 9c 0c	               jsr  help
.088b	20 7a 16	               jsr  anykey
.088e	20 d5 08	               jsr  slbug64
.0891	20 5b 13	               jsr  pushreg
.0894	a2 00		               ldx  #0
.0896	a0 00		               ldy  #0
.0898	20 11 12	               jsr  gotoxy
.089b	20 8a 13	               jsr  popreg
.089e	20 7a 16	               jsr  anykey
.08a1	20 da 11	               jsr  cls
.08a4	20 5b 13	               jsr  pushreg
.08a7	48		               pha
.08a8	a9 0e		               lda  #cbleupale
.08aa	8d 20 d0	               sta  $d020
.08ad	68		               pla
.08ae	48		               pha
.08af	a9 06		               lda  #cbleu
.08b1	8d 21 d0	               sta  $d021
.08b4	68		               pla
.08b5	48		               pha
.08b6	a9 01		               lda  #cblanc
.08b8	8d 86 02	               sta  bascol
.08bb	68		               pla
.08bc	20 8a 13	               jsr  popreg
.08bf	08		               php
.08c0	48		               pha
.08c1	a9 09		               lda  #$09
.08c3	20 d2 ff	               jsr  $ffd2
.08c6	68		               pla
.08c7	28		               plp
.08c8	08		               php
.08c9	48		               pha
.08ca	a9 8e		               lda  #b_uppercase
.08cc	20 d2 ff	               jsr  $ffd2
.08cf	68		               pla
.08d0	28		               plp
.08d1	20 9c a6	               jsr  $a69c
.08d4	60		               rts
.08d5			slbug64
.08d5	08		                php
.08d6	48		                pha
.08d7	ad 21 d0	                lda vicbackcol
.08da	48		                pha
.08db	a9 00		                lda #cnoir
.08dd	8d 21 d0	                sta vicbackcol
.08e0	8d 20 d0	                sta vicbordcol
.08e3	20 7a 16	                jsr anykey
.08e6	68		                pla
.08e7	20 5b 13	               jsr  pushreg
.08ea	a2 00		               ldx  #0
.08ec	a0 00		               ldy  #0
.08ee	20 11 12	               jsr  gotoxy
.08f1	20 8a 13	               jsr  popreg
.08f4	20 da 11	                jsr cls
.08f7	08		                php                 ; Sauvegarde les registres.
.08f8	48		                pha
.08f9	a9 00		                lda #0           ; Initialise le paramètre top et la ...
.08fb	8d ca 1a	                sta drawbox_top
.08fe	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0901	a9 00		                lda #0          ; Initialise le paramètre left.
.0903	8d cb 1a	                sta drawbox_left
.0906	a9 28		                lda #40         ; Initialise le paramètre width.
.0908	8d cc 1a	                sta drawbox_width
.090b	a9 18		                lda #24        ; Initialise le paramètre height.
.090d	8d cd 1a	                sta drawbox_height
.0910	a9 0c		                lda #cgris1        ; Initialise le paramètre colour.
.0912	8d ce 1a	                sta drawbox_colour
.0915	68		                pla                 ; Récupère les registres.
.0916	28		                plp
.0917	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.091a	a9 12		                    lda #18         ; le titre zzzzzz
.091c	20 d2 ff	                    jsr chrout
.091f	20 5b 13	                jsr pushreg
.0922	ad 86 02	                lda bascol
.0925	48		                pha
.0926	a9 0c		                lda #cgris1
.0928	8d 86 02	                sta bascol
.092b	a0 01		                ldy #0+1
.092d	a2 00		                ldx  #0
.092f	18		                clc
.0930	20 f0 ff	                jsr  plot
.0933	a2 18		                ldx  #<titre
.0935	a0 10		                ldy  #>titre
.0937	20 f7 11	                jsr  puts
.093a	68		                pla
.093b	8d 86 02	                sta  bascol
.093e	20 8a 13	                jsr  popreg
.0941	a9 92		                    lda #146
.0943	20 d2 ff	                    jsr chrout
.0946	ee 20 10	                inc titre+8
.0949	08		                php                 ; Sauvegarde les registres.
.094a	48		                pha
.094b	a9 01		                lda #1           ; Initialise le paramètre top et la ...
.094d	8d ca 1a	                sta drawbox_top
.0950	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0953	a9 01		                lda #1          ; Initialise le paramètre left.
.0955	8d cb 1a	                sta drawbox_left
.0958	a9 26		                lda #38         ; Initialise le paramètre width.
.095a	8d cc 1a	                sta drawbox_width
.095d	a9 05		                lda #5        ; Initialise le paramètre height.
.095f	8d cd 1a	                sta drawbox_height
.0962	a9 17		                lda #cjaune+reverse        ; Initialise le paramètre colour.
.0964	8d ce 1a	                sta drawbox_colour
.0967	68		                pla                 ; Récupère les registres.
.0968	28		                plp
.0969	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.096c	20 5b 13	                jsr pushreg
.096f	ad 86 02	                lda bascol
.0972	48		                pha
.0973	a9 17		                lda #cjaune+reverse
.0975	8d 86 02	                sta bascol
.0978	a0 02		                ldy #1+1
.097a	a2 01		                ldx  #1
.097c	18		                clc
.097d	20 f0 ff	                jsr  plot
.0980	a2 18		                ldx  #<titre
.0982	a0 10		                ldy  #>titre
.0984	20 f7 11	                jsr  puts
.0987	68		                pla
.0988	8d 86 02	                sta  bascol
.098b	20 8a 13	                jsr  popreg
.098e	ee 20 10	                inc titre+8
.0991	08		                php                 ; Sauvegarde les registres.
.0992	48		                pha
.0993	a9 06		                lda #6           ; Initialise le paramètre top et la ...
.0995	8d ca 1a	                sta drawbox_top
.0998	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.099b	a9 01		                lda #1          ; Initialise le paramètre left.
.099d	8d cb 1a	                sta drawbox_left
.09a0	a9 13		                lda #19         ; Initialise le paramètre width.
.09a2	8d cc 1a	                sta drawbox_width
.09a5	a9 11		                lda #17        ; Initialise le paramètre height.
.09a7	8d cd 1a	                sta drawbox_height
.09aa	a9 13		                lda #ccyan+reverse        ; Initialise le paramètre colour.
.09ac	8d ce 1a	                sta drawbox_colour
.09af	68		                pla                 ; Récupère les registres.
.09b0	28		                plp
.09b1	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.09b4	20 5b 13	                jsr pushreg
.09b7	ad 86 02	                lda bascol
.09ba	48		                pha
.09bb	a9 13		                lda #ccyan+reverse
.09bd	8d 86 02	                sta bascol
.09c0	a0 02		                ldy #1+1
.09c2	a2 06		                ldx  #6
.09c4	18		                clc
.09c5	20 f0 ff	                jsr  plot
.09c8	a2 18		                ldx  #<titre
.09ca	a0 10		                ldy  #>titre
.09cc	20 f7 11	                jsr  puts
.09cf	68		                pla
.09d0	8d 86 02	                sta  bascol
.09d3	20 8a 13	                jsr  popreg
.09d6	ee 20 10	                inc titre+8
.09d9	08		                php                 ; Sauvegarde les registres.
.09da	48		                pha
.09db	a9 06		                lda #6           ; Initialise le paramètre top et la ...
.09dd	8d ca 1a	                sta drawbox_top
.09e0	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.09e3	a9 14		                lda #20          ; Initialise le paramètre left.
.09e5	8d cb 1a	                sta drawbox_left
.09e8	a9 13		                lda #19         ; Initialise le paramètre width.
.09ea	8d cc 1a	                sta drawbox_width
.09ed	a9 11		                lda #17        ; Initialise le paramètre height.
.09ef	8d cd 1a	                sta drawbox_height
.09f2	a9 05		                lda #cvert        ; Initialise le paramètre colour.
.09f4	8d ce 1a	                sta drawbox_colour
.09f7	68		                pla                 ; Récupère les registres.
.09f8	28		                plp
.09f9	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.09fc	a9 12		                    lda #18         ; le titre zzzzzz
.09fe	20 d2 ff	                    jsr chrout
.0a01	20 5b 13	                jsr pushreg
.0a04	ad 86 02	                lda bascol
.0a07	48		                pha
.0a08	a9 05		                lda #cvert
.0a0a	8d 86 02	                sta bascol
.0a0d	a0 15		                ldy #20+1
.0a0f	a2 06		                ldx  #6
.0a11	18		                clc
.0a12	20 f0 ff	                jsr  plot
.0a15	a2 18		                ldx  #<titre
.0a17	a0 10		                ldy  #>titre
.0a19	20 f7 11	                jsr  puts
.0a1c	68		                pla
.0a1d	8d 86 02	                sta  bascol
.0a20	20 8a 13	                jsr  popreg
.0a23	a9 92		                    lda #146
.0a25	20 d2 ff	                    jsr chrout
.0a28	20 7a 16	                jsr anykey
.0a2b	ee 20 10	                inc titre+8
.0a2e	08		                php                 ; Sauvegarde les registres.
.0a2f	48		                pha
.0a30	a9 05		                lda #5           ; Initialise le paramètre top et la ...
.0a32	8d ca 1a	                sta drawbox_top
.0a35	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0a38	a9 05		                lda #5          ; Initialise le paramètre left.
.0a3a	8d cb 1a	                sta drawbox_left
.0a3d	a9 11		                lda #17         ; Initialise le paramètre width.
.0a3f	8d cc 1a	                sta drawbox_width
.0a42	a9 05		                lda #5        ; Initialise le paramètre height.
.0a44	8d cd 1a	                sta drawbox_height
.0a47	a9 1c		                lda #cgris1+reverse        ; Initialise le paramètre colour.
.0a49	8d ce 1a	                sta drawbox_colour
.0a4c	68		                pla                 ; Récupère les registres.
.0a4d	28		                plp
.0a4e	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0a51	20 5b 13	                jsr pushreg
.0a54	ad 86 02	                lda bascol
.0a57	48		                pha
.0a58	a9 1c		                lda #cgris1+reverse
.0a5a	8d 86 02	                sta bascol
.0a5d	a0 06		                ldy #5+1
.0a5f	a2 05		                ldx  #5
.0a61	18		                clc
.0a62	20 f0 ff	                jsr  plot
.0a65	a2 18		                ldx  #<titre
.0a67	a0 10		                ldy  #>titre
.0a69	20 f7 11	                jsr  puts
.0a6c	68		                pla
.0a6d	8d 86 02	                sta  bascol
.0a70	20 8a 13	                jsr  popreg
.0a73	ee 20 10	                inc titre+8
.0a76	08		                php                 ; Sauvegarde les registres.
.0a77	48		                pha
.0a78	a9 05		                lda #5           ; Initialise le paramètre top et la ...
.0a7a	8d ca 1a	                sta drawbox_top
.0a7d	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0a80	a9 14		                lda #20          ; Initialise le paramètre left.
.0a82	8d cb 1a	                sta drawbox_left
.0a85	a9 11		                lda #17         ; Initialise le paramètre width.
.0a87	8d cc 1a	                sta drawbox_width
.0a8a	a9 05		                lda #5        ; Initialise le paramètre height.
.0a8c	8d cd 1a	                sta drawbox_height
.0a8f	a9 0b		                lda #cgris0        ; Initialise le paramètre colour.
.0a91	8d ce 1a	                sta drawbox_colour
.0a94	68		                pla                 ; Récupère les registres.
.0a95	28		                plp
.0a96	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0a99	a9 12		                    lda #18         ; le titre zzzzzz
.0a9b	20 d2 ff	                    jsr chrout
.0a9e	20 5b 13	                jsr pushreg
.0aa1	ad 86 02	                lda bascol
.0aa4	48		                pha
.0aa5	a9 0b		                lda #cgris0
.0aa7	8d 86 02	                sta bascol
.0aaa	a0 15		                ldy #20+1
.0aac	a2 05		                ldx  #5
.0aae	18		                clc
.0aaf	20 f0 ff	                jsr  plot
.0ab2	a2 18		                ldx  #<titre
.0ab4	a0 10		                ldy  #>titre
.0ab6	20 f7 11	                jsr  puts
.0ab9	68		                pla
.0aba	8d 86 02	                sta  bascol
.0abd	20 8a 13	                jsr  popreg
.0ac0	a9 92		                    lda #146
.0ac2	20 d2 ff	                    jsr chrout
.0ac5	ee 20 10	                inc titre+8
.0ac8	08		                php                 ; Sauvegarde les registres.
.0ac9	48		                pha
.0aca	a9 09		                lda #9           ; Initialise le paramètre top et la ...
.0acc	8d ca 1a	                sta drawbox_top
.0acf	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0ad2	a9 09		                lda #9          ; Initialise le paramètre left.
.0ad4	8d cb 1a	                sta drawbox_left
.0ad7	a9 11		                lda #17         ; Initialise le paramètre width.
.0ad9	8d cc 1a	                sta drawbox_width
.0adc	a9 05		                lda #5        ; Initialise le paramètre height.
.0ade	8d cd 1a	                sta drawbox_height
.0ae1	a9 1a		                lda #crose+reverse        ; Initialise le paramètre colour.
.0ae3	8d ce 1a	                sta drawbox_colour
.0ae6	68		                pla                 ; Récupère les registres.
.0ae7	28		                plp
.0ae8	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0aeb	20 5b 13	                jsr pushreg
.0aee	ad 86 02	                lda bascol
.0af1	48		                pha
.0af2	a9 1a		                lda #crose+reverse
.0af4	8d 86 02	                sta bascol
.0af7	a0 0a		                ldy #9+1
.0af9	a2 09		                ldx  #9
.0afb	18		                clc
.0afc	20 f0 ff	                jsr  plot
.0aff	a2 18		                ldx  #<titre
.0b01	a0 10		                ldy  #>titre
.0b03	20 f7 11	                jsr  puts
.0b06	68		                pla
.0b07	8d 86 02	                sta  bascol
.0b0a	20 8a 13	                jsr  popreg
.0b0d	ee 20 10	                inc titre+8
.0b10	08		                php                 ; Sauvegarde les registres.
.0b11	48		                pha
.0b12	a9 0b		                lda #11           ; Initialise le paramètre top et la ...
.0b14	8d ca 1a	                sta drawbox_top
.0b17	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0b1a	a9 0b		                lda #11          ; Initialise le paramètre left.
.0b1c	8d cb 1a	                sta drawbox_left
.0b1f	a9 11		                lda #17         ; Initialise le paramètre width.
.0b21	8d cc 1a	                sta drawbox_width
.0b24	a9 05		                lda #5        ; Initialise le paramètre height.
.0b26	8d cd 1a	                sta drawbox_height
.0b29	a9 02		                lda #crouge        ; Initialise le paramètre colour.
.0b2b	8d ce 1a	                sta drawbox_colour
.0b2e	68		                pla                 ; Récupère les registres.
.0b2f	28		                plp
.0b30	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0b33	a9 12		                    lda #18         ; le titre zzzzzz
.0b35	20 d2 ff	                    jsr chrout
.0b38	20 5b 13	                jsr pushreg
.0b3b	ad 86 02	                lda bascol
.0b3e	48		                pha
.0b3f	a9 02		                lda #crouge
.0b41	8d 86 02	                sta bascol
.0b44	a0 0c		                ldy #11+1
.0b46	a2 0b		                ldx  #11
.0b48	18		                clc
.0b49	20 f0 ff	                jsr  plot
.0b4c	a2 18		                ldx  #<titre
.0b4e	a0 10		                ldy  #>titre
.0b50	20 f7 11	                jsr  puts
.0b53	68		                pla
.0b54	8d 86 02	                sta  bascol
.0b57	20 8a 13	                jsr  popreg
.0b5a	a9 92		                    lda #146
.0b5c	20 d2 ff	                    jsr chrout
.0b5f	ee 20 10	                inc titre+8
.0b62	08		                php                 ; Sauvegarde les registres.
.0b63	48		                pha
.0b64	a9 0d		                lda #13           ; Initialise le paramètre top et la ...
.0b66	8d ca 1a	                sta drawbox_top
.0b69	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0b6c	a9 0d		                lda #13          ; Initialise le paramètre left.
.0b6e	8d cb 1a	                sta drawbox_left
.0b71	a9 11		                lda #17         ; Initialise le paramètre width.
.0b73	8d cc 1a	                sta drawbox_width
.0b76	a9 05		                lda #5        ; Initialise le paramètre height.
.0b78	8d cd 1a	                sta drawbox_height
.0b7b	a9 14		                lda #cmauve+reverse        ; Initialise le paramètre colour.
.0b7d	8d ce 1a	                sta drawbox_colour
.0b80	68		                pla                 ; Récupère les registres.
.0b81	28		                plp
.0b82	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0b85	20 5b 13	                jsr pushreg
.0b88	ad 86 02	                lda bascol
.0b8b	48		                pha
.0b8c	a9 14		                lda #cmauve+reverse
.0b8e	8d 86 02	                sta bascol
.0b91	a0 0e		                ldy #13+1
.0b93	a2 0d		                ldx  #13
.0b95	18		                clc
.0b96	20 f0 ff	                jsr  plot
.0b99	a2 18		                ldx  #<titre
.0b9b	a0 10		                ldy  #>titre
.0b9d	20 f7 11	                jsr  puts
.0ba0	68		                pla
.0ba1	8d 86 02	                sta  bascol
.0ba4	20 8a 13	                jsr  popreg
.0ba7	ee 20 10	                inc titre+8
.0baa	08		                php                 ; Sauvegarde les registres.
.0bab	48		                pha
.0bac	a9 0f		                lda #15           ; Initialise le paramètre top et la ...
.0bae	8d ca 1a	                sta drawbox_top
.0bb1	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0bb4	a9 0f		                lda #15          ; Initialise le paramètre left.
.0bb6	8d cb 1a	                sta drawbox_left
.0bb9	a9 11		                lda #17         ; Initialise le paramètre width.
.0bbb	8d cc 1a	                sta drawbox_width
.0bbe	a9 05		                lda #5        ; Initialise le paramètre height.
.0bc0	8d cd 1a	                sta drawbox_height
.0bc3	a9 06		                lda #cbleu        ; Initialise le paramètre colour.
.0bc5	8d ce 1a	                sta drawbox_colour
.0bc8	68		                pla                 ; Récupère les registres.
.0bc9	28		                plp
.0bca	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0bcd	a9 12		                    lda #18         ; le titre zzzzzz
.0bcf	20 d2 ff	                    jsr chrout
.0bd2	20 5b 13	                jsr pushreg
.0bd5	ad 86 02	                lda bascol
.0bd8	48		                pha
.0bd9	a9 06		                lda #cbleu
.0bdb	8d 86 02	                sta bascol
.0bde	a0 10		                ldy #15+1
.0be0	a2 0f		                ldx  #15
.0be2	18		                clc
.0be3	20 f0 ff	                jsr  plot
.0be6	a2 18		                ldx  #<titre
.0be8	a0 10		                ldy  #>titre
.0bea	20 f7 11	                jsr  puts
.0bed	68		                pla
.0bee	8d 86 02	                sta  bascol
.0bf1	20 8a 13	                jsr  popreg
.0bf4	a9 92		                    lda #146
.0bf6	20 d2 ff	                    jsr chrout
.0bf9	ee 20 10	                inc titre+8
.0bfc	08		                php                 ; Sauvegarde les registres.
.0bfd	48		                pha
.0bfe	a9 11		                lda #17           ; Initialise le paramètre top et la ...
.0c00	8d ca 1a	                sta drawbox_top
.0c03	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0c06	a9 11		                lda #17          ; Initialise le paramètre left.
.0c08	8d cb 1a	                sta drawbox_left
.0c0b	a9 11		                lda #17         ; Initialise le paramètre width.
.0c0d	8d cc 1a	                sta drawbox_width
.0c10	a9 05		                lda #5        ; Initialise le paramètre height.
.0c12	8d cd 1a	                sta drawbox_height
.0c15	a9 13		                lda #ccyan+reverse        ; Initialise le paramètre colour.
.0c17	8d ce 1a	                sta drawbox_colour
.0c1a	68		                pla                 ; Récupère les registres.
.0c1b	28		                plp
.0c1c	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0c1f	20 5b 13	                jsr pushreg
.0c22	ad 86 02	                lda bascol
.0c25	48		                pha
.0c26	a9 13		                lda #ccyan+reverse
.0c28	8d 86 02	                sta bascol
.0c2b	a0 12		                ldy #17+1
.0c2d	a2 11		                ldx  #17
.0c2f	18		                clc
.0c30	20 f0 ff	                jsr  plot
.0c33	a2 18		                ldx  #<titre
.0c35	a0 10		                ldy  #>titre
.0c37	20 f7 11	                jsr  puts
.0c3a	68		                pla
.0c3b	8d 86 02	                sta  bascol
.0c3e	20 8a 13	                jsr  popreg
.0c41	ee 20 10	                inc titre+8
.0c44	08		                php                 ; Sauvegarde les registres.
.0c45	48		                pha
.0c46	a9 13		                lda #19           ; Initialise le paramètre top et la ...
.0c48	8d ca 1a	                sta drawbox_top
.0c4b	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0c4e	a9 13		                lda #19          ; Initialise le paramètre left.
.0c50	8d cb 1a	                sta drawbox_left
.0c53	a9 11		                lda #17         ; Initialise le paramètre width.
.0c55	8d cc 1a	                sta drawbox_width
.0c58	a9 05		                lda #5        ; Initialise le paramètre height.
.0c5a	8d cd 1a	                sta drawbox_height
.0c5d	a9 05		                lda #cvert        ; Initialise le paramètre colour.
.0c5f	8d ce 1a	                sta drawbox_colour
.0c62	68		                pla                 ; Récupère les registres.
.0c63	28		                plp
.0c64	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0c67	a9 12		                    lda #18         ; le titre zzzzzz
.0c69	20 d2 ff	                    jsr chrout
.0c6c	20 5b 13	                jsr pushreg
.0c6f	ad 86 02	                lda bascol
.0c72	48		                pha
.0c73	a9 05		                lda #cvert
.0c75	8d 86 02	                sta bascol
.0c78	a0 14		                ldy #19+1
.0c7a	a2 13		                ldx  #19
.0c7c	18		                clc
.0c7d	20 f0 ff	                jsr  plot
.0c80	a2 18		                ldx  #<titre
.0c82	a0 10		                ldy  #>titre
.0c84	20 f7 11	                jsr  puts
.0c87	68		                pla
.0c88	8d 86 02	                sta  bascol
.0c8b	20 8a 13	                jsr  popreg
.0c8e	a9 92		                    lda #146
.0c90	20 d2 ff	                    jsr chrout
.0c93	20 7a 16	                jsr anykey
.0c96	20 fe 17	                jsr showregs
.0c99	68		                pla
.0c9a	28		                plp
.0c9b	60		                rts
=16			reverse = 16
.0c9c			help
=4			left = 4
=4			top = 4
=$1			color = cblanc
=$a			color2 = crose
.0c9c	20 ed 12	                jsr pushall
.0c9f	20 da 11	                jsr cls
.0ca2	a9 0d		                lda #$0d
.0ca4	20 f1 11	                jsr putch
.0ca7	20 f1 11	                jsr putch
.0caa	20 f1 11	                jsr putch
.0cad	20 f1 11	                jsr putch
.0cb0	a9 12		                lda #b_rvs_on
.0cb2	20 f1 11	                jsr putch
.0cb5	08		                php                 ; Sauvegarde les registres.
.0cb6	48		                pha
.0cb7	a9 04		                lda #top           ; Initialise le paramètre top et la ...
.0cb9	8d ca 1a	                sta drawbox_top
.0cbc	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0cbf	a9 04		                lda #left          ; Initialise le paramètre left.
.0cc1	8d cb 1a	                sta drawbox_left
.0cc4	a9 20		                lda #32         ; Initialise le paramètre width.
.0cc6	8d cc 1a	                sta drawbox_width
.0cc9	a9 0a		                lda #10        ; Initialise le paramètre height.
.0ccb	8d cd 1a	                sta drawbox_height
.0cce	a9 11		                lda #color+reverse        ; Initialise le paramètre colour.
.0cd0	8d ce 1a	                sta drawbox_colour
.0cd3	68		                pla                 ; Récupère les registres.
.0cd4	28		                plp
.0cd5	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0cd8	20 5b 13	                jsr pushreg
.0cdb	ad 86 02	                lda bascol
.0cde	48		                pha
.0cdf	a9 11		                lda #color+reverse
.0ce1	8d 86 02	                sta bascol
.0ce4	a0 05		                ldy #left+1
.0ce6	a2 04		                ldx  #top
.0ce8	18		                clc
.0ce9	20 f0 ff	                jsr  plot
.0cec	a2 be		                ldx  #<texta
.0cee	a0 0e		                ldy  #>texta
.0cf0	20 f7 11	                jsr  puts
.0cf3	68		                pla
.0cf4	8d 86 02	                sta  bascol
.0cf7	20 8a 13	                jsr  popreg
.0cfa	20 5b 13	                jsr pushreg
.0cfd	ad 86 02	                lda bascol
.0d00	48		                pha
.0d01	a9 01		                lda #color
.0d03	8d 86 02	                sta bascol
.0d06	a0 05		                ldy #left+1
.0d08	a2 06		                ldx  #top+2
.0d0a	18		                clc
.0d0b	20 f0 ff	                jsr  plot
.0d0e	a2 d9		                ldx  #<textb
.0d10	a0 0e		                ldy  #>textb
.0d12	20 f7 11	                jsr  puts
.0d15	68		                pla
.0d16	8d 86 02	                sta  bascol
.0d19	20 8a 13	                jsr  popreg
.0d1c	20 5b 13	                jsr pushreg
.0d1f	ad 86 02	                lda bascol
.0d22	48		                pha
.0d23	a9 01		                lda #color
.0d25	8d 86 02	                sta bascol
.0d28	a0 05		                ldy #left+1
.0d2a	a2 07		                ldx  #top+3
.0d2c	18		                clc
.0d2d	20 f0 ff	                jsr  plot
.0d30	a2 f8		                ldx  #<textc
.0d32	a0 0e		                ldy  #>textc
.0d34	20 f7 11	                jsr  puts
.0d37	68		                pla
.0d38	8d 86 02	                sta  bascol
.0d3b	20 8a 13	                jsr  popreg
.0d3e	20 5b 13	                jsr pushreg
.0d41	ad 86 02	                lda bascol
.0d44	48		                pha
.0d45	a9 01		                lda #color
.0d47	8d 86 02	                sta bascol
.0d4a	a0 05		                ldy #left+1
.0d4c	a2 08		                ldx  #top+4
.0d4e	18		                clc
.0d4f	20 f0 ff	                jsr  plot
.0d52	a2 17		                ldx  #<textd
.0d54	a0 0f		                ldy  #>textd
.0d56	20 f7 11	                jsr  puts
.0d59	68		                pla
.0d5a	8d 86 02	                sta  bascol
.0d5d	20 8a 13	                jsr  popreg
.0d60	20 5b 13	                jsr pushreg
.0d63	ad 86 02	                lda bascol
.0d66	48		                pha
.0d67	a9 01		                lda #color
.0d69	8d 86 02	                sta bascol
.0d6c	a0 05		                ldy #left+1
.0d6e	a2 0a		                ldx  #top+6
.0d70	18		                clc
.0d71	20 f0 ff	                jsr  plot
.0d74	a2 36		                ldx  #<texte
.0d76	a0 0f		                ldy  #>texte
.0d78	20 f7 11	                jsr  puts
.0d7b	68		                pla
.0d7c	8d 86 02	                sta  bascol
.0d7f	20 8a 13	                jsr  popreg
.0d82	20 5b 13	                jsr pushreg
.0d85	ad 86 02	                lda bascol
.0d88	48		                pha
.0d89	a9 01		                lda #color
.0d8b	8d 86 02	                sta bascol
.0d8e	a0 05		                ldy #left+1
.0d90	a2 0b		                ldx  #top+7
.0d92	18		                clc
.0d93	20 f0 ff	                jsr  plot
.0d96	a2 55		                ldx  #<textf
.0d98	a0 0f		                ldy  #>textf
.0d9a	20 f7 11	                jsr  puts
.0d9d	68		                pla
.0d9e	8d 86 02	                sta  bascol
.0da1	20 8a 13	                jsr  popreg
.0da4	20 5b 13	                jsr pushreg
.0da7	ad 86 02	                lda bascol
.0daa	48		                pha
.0dab	a9 01		                lda #color
.0dad	8d 86 02	                sta bascol
.0db0	a0 05		                ldy #left+1
.0db2	a2 0c		                ldx  #top+8
.0db4	18		                clc
.0db5	20 f0 ff	                jsr  plot
.0db8	a2 74		                ldx  #<textg
.0dba	a0 0f		                ldy  #>textg
.0dbc	20 f7 11	                jsr  puts
.0dbf	68		                pla
.0dc0	8d 86 02	                sta  bascol
.0dc3	20 8a 13	                jsr  popreg
.0dc6	08		                php                 ; Sauvegarde les registres.
.0dc7	48		                pha
.0dc8	a9 0f		                lda #top+11           ; Initialise le paramètre top et la ...
.0dca	8d ca 1a	                sta drawbox_top
.0dcd	8d cf 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0dd0	a9 04		                lda #left          ; Initialise le paramètre left.
.0dd2	8d cb 1a	                sta drawbox_left
.0dd5	a9 20		                lda #32         ; Initialise le paramètre width.
.0dd7	8d cc 1a	                sta drawbox_width
.0dda	a9 06		                lda #6        ; Initialise le paramètre height.
.0ddc	8d cd 1a	                sta drawbox_height
.0ddf	a9 1a		                lda #color2+reverse        ; Initialise le paramètre colour.
.0de1	8d ce 1a	                sta drawbox_colour
.0de4	68		                pla                 ; Récupère les registres.
.0de5	28		                plp
.0de6	20 ad 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0de9	20 5b 13	                jsr pushreg
.0dec	ad 86 02	                lda bascol
.0def	48		                pha
.0df0	a9 1a		                lda #color2+reverse
.0df2	8d 86 02	                sta bascol
.0df5	a0 05		                ldy #left+1
.0df7	a2 0f		                ldx  #top+11
.0df9	18		                clc
.0dfa	20 f0 ff	                jsr  plot
.0dfd	a2 93		                ldx  #<texth
.0dff	a0 0f		                ldy  #>texth
.0e01	20 f7 11	                jsr  puts
.0e04	68		                pla
.0e05	8d 86 02	                sta  bascol
.0e08	20 8a 13	                jsr  popreg
.0e0b	20 5b 13	                jsr pushreg
.0e0e	ad 86 02	                lda bascol
.0e11	48		                pha
.0e12	a9 0a		                lda #color2
.0e14	8d 86 02	                sta bascol
.0e17	a0 05		                ldy #left+1
.0e19	a2 11		                ldx  #top+13
.0e1b	18		                clc
.0e1c	20 f0 ff	                jsr  plot
.0e1f	a2 a2		                ldx  #<texti
.0e21	a0 0f		                ldy  #>texti
.0e23	20 f7 11	                jsr  puts
.0e26	68		                pla
.0e27	8d 86 02	                sta  bascol
.0e2a	20 8a 13	                jsr  popreg
.0e2d	20 5b 13	                jsr pushreg
.0e30	ad 86 02	                lda bascol
.0e33	48		                pha
.0e34	a9 0a		                lda #color2
.0e36	8d 86 02	                sta bascol
.0e39	a0 05		                ldy #left+1
.0e3b	a2 12		                ldx  #top+14
.0e3d	18		                clc
.0e3e	20 f0 ff	                jsr  plot
.0e41	a2 c1		                ldx  #<textj
.0e43	a0 0f		                ldy  #>textj
.0e45	20 f7 11	                jsr  puts
.0e48	68		                pla
.0e49	8d 86 02	                sta  bascol
.0e4c	20 8a 13	                jsr  popreg
.0e4f	20 5b 13	                jsr pushreg
.0e52	ad 86 02	                lda bascol
.0e55	48		                pha
.0e56	a9 0a		                lda #color2
.0e58	8d 86 02	                sta bascol
.0e5b	a0 05		                ldy #left+1
.0e5d	a2 13		                ldx  #top+15
.0e5f	18		                clc
.0e60	20 f0 ff	                jsr  plot
.0e63	a2 e0		                ldx  #<textk
.0e65	a0 0f		                ldy  #>textk
.0e67	20 f7 11	                jsr  puts
.0e6a	68		                pla
.0e6b	8d 86 02	                sta  bascol
.0e6e	20 8a 13	                jsr  popreg
.0e71	a9 92		                lda #b_rvs_off
.0e73	20 f1 11	                jsr putch
.0e76	20 5b 13	                jsr pushreg
.0e79	ad 86 02	                lda bascol
.0e7c	48		                pha
.0e7d	a9 01		                lda #cblanc
.0e7f	8d 86 02	                sta bascol
.0e82	a0 0f		                ldy #39-24
.0e84	a2 18		                ldx  #24
.0e86	18		                clc
.0e87	20 f0 ff	                jsr  plot
.0e8a	a2 ff		                ldx  #<textl
.0e8c	a0 0f		                ldy  #>textl
.0e8e	20 f7 11	                jsr  puts
.0e91	68		                pla
.0e92	8d 86 02	                sta  bascol
.0e95	20 8a 13	                jsr  popreg
.0e98	20 28 13	                jsr popall
.0e9b	60		                rts

;******  Processing file: chaines_fr.asm

=158			headtcol        =   b_jaune
=158			normtcol        =   b_jaune
>0e9c	00		nextline        .byte   0
>0e9d	20 20 20 20	line            .null           "                                "
>0ea1	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0eb1	20 20 20 20 20 20 20 20 20 20 20 20 00
>0ebe	92		texta           .byte           b_rvs_off
>0ebf	20 d3 cc 2d	                .text           " SL-BUG 64 Version 4.00 "
>0ec3	c2 d5 c7 20 36 34 20 d6 45 52 53 49 4f 4e 20 34
>0ed3	2e 30 30 20
>0ed7	12 00		                .byte           b_rvs_on,0
>0ed9	20 20 20 20	textb           .null           "     Version Commodore 64     "
>0edd	20 d6 45 52 53 49 4f 4e 20 c3 4f 4d 4d 4f 44 4f
>0eed	52 45 20 36 34 20 20 20 20 20 00
>0ef8	20 20 c9 44	textc           .null           "  Idee Originale sur MC-6809  "
>0efc	45 45 20 cf 52 49 47 49 4e 41 4c 45 20 53 55 52
>0f0c	20 cd c3 2d 36 38 30 39 20 20 00
>0f17	20 20 d0 41	textd           .null           "  Par Serge Leblanc mai 1994  "
>0f1b	52 20 d3 45 52 47 45 20 cc 45 42 4c 41 4e 43 20
>0f2b	4d 41 49 20 31 39 39 34 20 20 00
>0f36	20 d0 4f 52	texte           .null           " Port C64 par Daniel Lafrance "
>0f3a	54 20 c3 36 34 20 50 41 52 20 c4 41 4e 49 45 4c
>0f4a	20 cc 41 46 52 41 4e 43 45 20 00
>0f55	20 20 20 20	textf           .null           "       (c) Octobre 2025       "
>0f59	20 20 20 28 43 29 20 cf 43 54 4f 42 52 45 20 32
>0f69	30 32 35 20 20 20 20 20 20 20 00
>0f74	20 20 20 d6	textg           .null   format( "   Version: %-17s ",Version)
>0f78	45 52 53 49 4f 4e 3a 20 32 30 32 35 31 30 31 37
>0f88	2d 31 32 35 33 30 31 20 20 20 00
>0f93	92		texth           .byte           b_rvs_off
>0f94	20 d2 c1 c3	                .text           " RACCOURCIS "
>0f98	c3 cf d5 d2 c3 c9 d3 20
>0fa0	12 00		                .byte           b_rvs_on,0
>0fa2	20 c5 58 45	texti           .null   format( " Execution.: SYS%5d ($%4X) ",slbug64,slbug64)
>0fa6	43 55 54 49 4f 4e 2e 3a 20 d3 d9 d3 20 32 32 36
>0fb6	31 20 28 24 20 38 c4 35 29 20 00
>0fc1	20 c1 49 44	textj           .null   format( " Aide......: SYS%5d ($%4X) ",help,help)
>0fc5	45 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 32 32
>0fd5	38 20 28 24 20 c3 39 c3 29 20 00
>0fe0	20 c3 cc d3	textk           .null   format( " CLS.......: SYS%5d ($%4X) ",cls,cls)
>0fe4	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 34 35 37
>0ff4	30 20 28 24 31 31 c4 c1 29 20 00
>0fff	d5 4e 45 20	textl           .null           "Une clef pour continuer!"
>1003	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>1013	55 45 52 21 00
>1018	c6 45 4e 45	titre           .null   "Fenetre A"
>101c	54 52 45 20 c1 00
>1022	b0 c0 c0 c0	tline   .byte   176,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,174,0
>1026	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>1036	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ae 00
>1043	ab c0 c0 c0	mline   .byte   171,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,179,0
>1047	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>1057	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 b3 00
>1064	ad c0 c0 c0	bline   .byte   173,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,189,0
>1068	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>1078	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 bd 00
>1085	dd 20 20 20	eline   .byte   221,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,221,0
>1089	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1099	20 20 20 20 20 20 20 20 20 20 20 dd 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>10a6	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>10aa	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black         =   144  ;0,  ctrl-1
=5			b_white         =   5    ;1,  ctrl-2
=28			b_red           =   28   ;2,  ctrl-3
=159			b_cyan          =   159  ;3,  ctrl-4
=156			b_purple        =   156  ;4,  ctrl-5
=30			b_green         =   30   ;5,  ctrl-6
=31			b_blue          =   31   ;6,  ctrl-7
=158			b_yellow        =   158  ;7,  ctrl-8
=129			b_orange        =   129  ;8,  C=-1
=149			b_brown         =   149  ;9,  C=-2
=150			b_ltred         =   150  ;10, C=-3
=155			b_gray3         =   155  ;11, C=-4
=155			b_grey3         =   155  ;11, C=-4
=152			b_gray2         =   152  ;12, C=-5
=152			b_grey2         =   152  ;13, C=-5
=153			b_ltgreen       =   153  ;13, C=-6
=154			b_ltblue        =   154  ;14, C=-7
=151			b_gray1         =   151  ;15, C=-8
=151			b_grey1         =   151  ;15, C=-8
=144			b_noir          =   144  ;0,  ctrl-1
=5			b_blanc         =   5    ;1,  ctrl-2
=28			b_rouge         =   28   ;2,  ctrl-3
=156			b_mauve         =   156  ;4,  ctrl-5
=30			b_vert          =   30   ;5,  ctrl-6
=31			b_bleu          =   31   ;6,  ctrl-7
=158			b_jaune         =   158  ;7,  ctrl-8
=149			b_brun          =   149  ;9,  C=-2
=150			b_rose          =   150  ;10, C=-3
=155			b_gris3         =   155  ;11, C=-4
=152			b_gris2         =   152  ;12, C=-5
=153			b_vert2         =   153  ;13, C=-6
=154			b_blue2         =   154  ;14, C=-7
=151			b_gris1         =   151  ;15, C=-8
=151			b_gris          =   151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.10ae			screendis
.10ae	08		               php
.10af	48		               pha
.10b0	ad 11 d0	               lda  $d011
.10b3	29 ef		               and  #%11101111
.10b5	8d 11 d0	               sta  $d011
.10b8	68		               pla
.10b9	28		               plp
.10ba	60		               rts
.10bb			screenena
.10bb	08		               php
.10bc	48		               pha
.10bd	ad 11 d0	               lda  $d011
.10c0	09 10		               ora  #%00010000
.10c2	8d 11 d0	               sta  $d011
.10c5	68		               pla
.10c6	28		               plp
.10c7	60		               rts
=8192			bmpram = 8192
.10c8			victohighres
.10c8	08		               php
.10c9	48		               pha
.10ca	ad 11 d0	               lda  vicmiscfnc
.10cd	09 20		               ora  #%00100000     ; 32
.10cf	8d 11 d0	               sta  vicmiscfnc
.10d2	ad 18 d0	               lda  vicmemptr
.10d5	09 08		               ora  #%00001000     ; $08
.10d7	8d 18 d0	               sta  vicmemptr
.10da	a9 ff		               lda  #$ff           ; 255
.10dc	85 37		               sta  $0037
.10de	a9 1f		               lda  #$1f           ; 31
.10e0	85 38		               sta  $0038
.10e2	68		               pla
.10e3	28		               plp
.10e4	60		               rts
.10e5			victonormal
.10e5	08		               php
.10e6	48		               pha
.10e7	ad 11 d0	               lda  vicmiscfnc
.10ea	29 df		               and  #%11011111     ; 233
.10ec	8d 11 d0	               sta  vicmiscfnc
.10ef	ad 18 d0	               lda  vicmemptr
.10f2	29 f7		               and  #%11110111     ; $08
.10f4	8d 18 d0	               sta  vicmemptr
.10f7	a9 00		               lda  #$00
.10f9	85 37		               sta  $0037
.10fb	a9 a0		               lda  #$a0
.10fd	85 38		               sta  $0038
.10ff	20 da 11	               jsr  cls
.1102	68		               pla
.1103	28		               plp
.1104	60		               rts
.1105			vicbmpclear
.1105	20 ed 12	               jsr  push
.1108	a9 04		               lda  #cmauve
.110a	20 33 11	               jsr  setvicbmpbackcol
.110d	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.110f	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.1111	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.1113	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.1115	48		               pha
.1116	a9 ff		               lda  #<$0000+(8191)
.1118	8d 11 15	               sta  loopcount
.111b	a9 1f		               lda  #>$0000+(8191)
.111d	8d 12 15	               sta  loopcount+1
.1120	68		               pla
.1121	a0 00		               ldy  #$00
.1123	a9 0f		next           lda  #$0f
.1125	91 fb		               sta  (zpage1),y
.1127	20 42 14	               jsr  inczpage1
.112a	20 f1 14	               jsr  loop
.112d	d0 f4		               bne  next
.112f	20 28 13	               jsr  pop
.1132	60		               rts
.1133			setvicbmpbackcol
.1133	20 ed 12	               jsr  push
.1136	29 0f		               and  #$0f
.1138	8d 66 11	               sta  vicbmpbackcol
.113b	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.113d	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.113f	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.1141	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.1143	48		               pha
.1144	a9 00		               lda  #<$0000+(1024)
.1146	8d 11 15	               sta  loopcount
.1149	a9 04		               lda  #>$0000+(1024)
.114b	8d 12 15	               sta  loopcount+1
.114e	68		               pla
.114f	a0 00		               ldy  #$00
.1151	b1 fb		next           lda  (zpage1),y
.1153	29 f0		               and  #$f0
.1155	0d 66 11	               ora  vicbmpbackcol
.1158	91 fb		               sta  (zpage1),y
.115a	20 42 14	               jsr  inczpage1
.115d	20 f1 14	               jsr  loop
.1160	d0 ef		               bne  next
.1162	20 28 13	               jsr  pop
.1165	60		               rts
>1166	00		vicbmpbackcol  .byte     $00
.1167			setvicbmpforecol
.1167	20 ed 12	               jsr  push
.116a	2a		               rol
.116b	2a		               rol
.116c	2a		               rol
.116d	2a		               rol
.116e	29 f0		               and  #$f0
.1170	8d 9e 11	               sta  vicbmpforecol
.1173	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.1175	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.1177	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.1179	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.117b	48		               pha
.117c	a9 00		               lda  #<$0000+(1024)
.117e	8d 11 15	               sta  loopcount
.1181	a9 04		               lda  #>$0000+(1024)
.1183	8d 12 15	               sta  loopcount+1
.1186	68		               pla
.1187	a0 00		               ldy  #$00
.1189	b1 fb		next           lda  (zpage1),y
.118b	29 0f		               and  #$0f
.118d	0d 9e 11	               ora  vicbmpforecol
.1190	91 fb		               sta  (zpage1),y
.1192	20 42 14	               jsr  inczpage1
.1195	20 f1 14	               jsr  loop
.1198	d0 ef		               bne  next
.119a	20 28 13	               jsr  pop
.119d	60		               rts
>119e	00		vicbmpforecol  .byte     $00
.119f			bmphrcalccoords
.119f	20 ed 12	               jsr  push
.11a2	18		               clc       ; On met Carry à 0
.11a3	6a		               ror       ; le bit 0 de a dans carry  ?/2
.11a4	8a		               txa       ; x dans a
.11a5	4a		               lsr       ; ?/4
.11a6	4a		               lsr       ; ?/8 a = (ax)/8
.11a7	8d b8 11	               sta  bmphrcol
.11aa	98		               tya       ; Y dans a
.11ab	4a		               lsr       ; ?/2
.11ac	4a		               lsr       ; ?/4
.11ad	4a		               lsr       ; ?/8 a=Y/8
.11ae	8d b7 11	               sta  bmphrrow
.11b1	48		               pha
.11b2	98		               tya
.11b3	20 28 13	               jsr  pop
.11b6	60		               rts
.11b7			vicbmpfill
>11b7	00		bmphrrow       .byte     $00
>11b8	00		bmphrcol       .byte     $00
>11b9	00		bmphrmask      .byte     $00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.11ba			scrmaninit
.11ba	20 5b 13	               jsr  pushreg        ; Sauvegarde tous les registres
.11bd	20 ae 10	               jsr  screendis      ; Disable screen
.11c0	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.11c2	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.11c5	a9 05		               lda  #vvert         ; vert pour la couleur
.11c7	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.11ca	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.11cc	8d 86 02	               sta  bascol         ; texte.
.11cf	20 da 11	               jsr  cls            ; Efface l'écran.
.11d2	20 bb 10	               jsr  screenena      ; enable screen
.11d5	20 8a 13	               jsr  popreg         ; Récupère tous les registres.
.11d8	60		               rts
>11d9	8e		characterset   .byte b_uppercase
.11da			cls
.11da	08		               php                 ; Sauvegarde les registres
.11db	48		               pha                 ;   modifiés.
.11dc	a9 93		               lda  #$93           ; Affiche le code basic de
.11de	20 d2 ff	               jsr  chrout         ;   d'effacement d'écran.
.11e1	68		               pla                 ; Récupère les registres
.11e2	28		               plp                 ;   modifiés.
.11e3	60		               rts
.11e4			putnch
.11e4	20 5b 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.11e7	20 d2 ff	again          jsr  chrout         ; On affiche A.
.11ea	ca		               dex                 ; Un de moins à faire.
.11eb	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.11ed	20 8a 13	out            jsr  popreg         ; Récupère tous les registres.
.11f0	60		               rts
.11f1			putch
.11f1	08		               php                 ; Sauvegarde le registre de status.
.11f2	20 d2 ff	               jsr  chrout         ; Affiche le caractère de Acc.
.11f5	28		               plp                 ; Récupère le registre de status.
.11f6	60		               rts
.11f7			puts
.11f7	20 ed 12	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.11fa	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.11fc	84 fc		               sty  zpage1+1       ;   dans ZP1.
.11fe	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.1200	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.1202	f0 09		               beq  exit           ; Si $00 on sort.
.1204	20 d2 ff	               jsr  chrout         ; Affiche le caractères.
.1207	20 42 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.120a	4c 00 12	               jmp  next           ; Saute chercher le prochain carac.
.120d	20 28 13	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.1210	60		               rts
.1211			gotoxy
.1211	08		               php                 ; Sauvegarde le registre de
.1212	48		               pha                 ;   status et le registre a.
.1213	18		               clc                 ; Carry = 1 pour que kplot
.1214	8a		               txa                 ;   positionne le curseur.
.1215	48		               pha                 ; On inverse X et Y pcq kplot
.1216	98		               tya                 ;
.1217	aa		               tax                 ;   prend X comme la ligne
.1218	68		               pla                 ;
.1219	a8		               tay                 ;   et Y comme la colonne.
.121a	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.121d	68		               pla                 ; Récupère le registre a et
.121e	28		               plp                 ;   le registre de status.
.121f	60		               rts
.1220			cursor
=$0286			bascol    =    $0286               ; debugme
.1220	20 5b 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.1223	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.1225	20 f0 ff	               jsr  kplot          ; On récupère la position du
.1228	8c 4a 12	               sty  cx             ;   curseur et on la sauvegarde
.122b	8e 4b 12	               stx  cy             ;   dans les vars locales.
.122e	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.1231	8d 4c 12	               sta  bcol           ; BASIC du texte.
.1234	4c 46 12	               jmp  out            ; c'est fini on sort.
.1237	ae 4b 12	restore        ldx  cy             ; Comme C=1, On charge x avec
.123a	ac 4a 12	               ldy  cx             ;   la ligne, y ace  la col.
.123d	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.1240	ad 4c 12	               lda  bcol           ; On replace la couleur par basic
.1243	8d 86 02	               sta  bascol         ;   sauvegardé.
.1246	20 8a 13	out            jsr  popreg         ; Récupère tous les registres.
.1249	60		               rts
>124a	00		cx   .byte     $00
>124b	00		cy   .byte     $00
>124c	00		bcol .byte     $00
.124d			cursave
.124d	08		               php
.124e	38		               sec
.124f	20 20 12	               jsr  cursor         ; Voir cette fonction plus haut.
.1252	28		               plp
.1253	60		               rts
.1254			curput
.1254	08		               php
.1255	18		               clc
.1256	20 20 12	               jsr  cursor         ; Voir cette fonction plus haut.
.1259	28		               plp
.125a	60		               rts
.125b			putsxy
.125b	20 ed 12	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.125e	86 fb		               stx  zpage1         ; On place la position de la
.1260	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.1262	a0 00		               ldy  #$00           ; On charge l'index à 0.
.1264	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.1266	aa		               tax                 ;   dans X.
.1267	20 42 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.126a	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.126c	a8		               tay                 ; dans Y.
.126d	20 11 12	               jsr  gotoxy         ; on positionne le curseur.
.1270	20 42 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1273	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.1275	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.1277	20 f7 11	               jsr  puts           ;   l'affiche.
.127a	20 28 13	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.127d	60		               rts
>127e	00 00		straddr   .word     $00
>1280	00		px        .byte     $00
>1281	00		py        .byte     $00
>1282	00 00		zp1       .word     $00
.1284			putscxy
.1284	20 ed 12	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.1287	86 fb		               stx  zpage1         ; On place la position de la
.1289	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.128b	a0 00		               ldy  #$00           ; On charge l'index à 0.
.128d	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.1290	48		               pha                 ;   actuelle de basic.
.1291	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.1293	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.1296	20 42 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1299	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.129b	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.129d	20 5b 12	               jsr  putsxy         ;   l'affiche.
.12a0	68		               pla                 ; On replace la couleur basic
.12a1	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.12a4	20 28 13	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.12a7	60		               rts
.12a8			putrahex
.12a8	20 5b 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.12ab	20 7b 15	               jsr  atohex         ; Conversion de a chaîne hexa.
.12ae	a2 18		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.12b0	a0 15		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.12b2	20 f7 11	               jsr  puts           ; Affiche la chaîne.
.12b5	20 8a 13	               jsr  popreg         ; Récupère tous les registres.
.12b8	60		               rts
.12b9			kputrahexxy
.12b9			bputrahexxy
.12b9			putrahexxy
.12b9	08		               php                 ; Sauvegarde le registre de
.12ba	48		               pha                 ;   status et le registre a.
.12bb	20 7b 15	               jsr  atohex         ; Convertion de a en hexadécimal.
.12be	a2 15		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.12c0	a0 15		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.12c2	20 5b 12	               jsr  putsxy         ; Positionne et affiche la chaîne.
.12c5	68		               pla                 ; Récupère le registre a et
.12c6	28		               plp                 ;   le registre de status.
.12c7	60		               rts
.12c8			putrahexcxy
.12c8	20 5b 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.12cb	20 7b 15	               jsr  atohex         ; Convertion de a en hexadécimal.
.12ce	a2 15		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.12d0	a0 15		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.12d2	20 5b 12	               jsr  putsxy         ; Colore, positionne et affiche la
.12d5	20 8a 13	               jsr  popreg         ; Récupère tous les registres.
.12d8	60		               rts
.12d9			setinverse
.12d9	48		               pha
.12da	a9 12		               lda  #$12
.12dc	20 d2 ff	               jsr  chrout
.12df	68		               pla
.12e0	60		               rts
.12e1			clrinverse
.12e1	48		               pha
.12e2	a9 92		               lda  #$92
.12e4	20 d2 ff	               jsr  chrout
.12e7	68		               pla
.12e8	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>12e9	00		rp        .byte     0
>12ea	00		ra        .byte     0
>12eb	00 00		pc        .word     0
.12ed			pushall
.12ed			push
.12ed	08		          php            ; stack : flg, pcl, pch
.12ee	78		          sei
.12ef	8d ea 12	          sta  ra        ; save a
.12f2	68		          pla            ; stack : pcl, pch
.12f3	8d e9 12	          sta  rp        ; save rp
.12f6	68		          pla            ; stack : pch
.12f7	8d eb 12	          sta  pc        ; save pcl
.12fa	68		          pla            ; stack : -
.12fb	8d ec 12	          sta  pc+1      ; save pch
.12fe	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1300	48		          pha            ; stack : zp1l
.1301	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1303	48		          pha            ; stack : zp1h, zp1l
.1304	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1306	48		          pha            ; stack : zp2l, zp1h, zp1l
.1307	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.1309	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.130a	ad e9 12	          lda  rp        ; get rp
.130d	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.130e	ad ea 12	          lda  ra        ; get a
.1311	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1312	8a		          txa            ; get x
.1313	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1314	98		          tya            ; get y
.1315	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1316	ad ec 12	          lda  pc+1      ; get pch
.1319	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.131a	ad eb 12	          lda  pc        ; get pcl
.131d	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.131e	ad e9 12	          lda  rp        ; get rp
.1321	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1322	ad ea 12	          lda  ra        ; get a
.1325	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1326	58		          cli
.1327	60		          rts
.1328			pullall
.1328			pull
.1328			popall
.1328			pop
.1328	78		          sei
.1329	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.132a	8d eb 12	          sta  pc        ; save pcl
.132d	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.132e	8d ec 12	          sta  pc+1      ; save pch
.1331	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1332	a8		          tay            ; set y
.1333	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1334	aa		          tax            ; set x
.1335	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1336	8d ea 12	          sta  ra        ; save a
.1339	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.133a	8d e9 12	          sta  rp        ; save rp
.133d	68		          pla            ; stack : zp2l, zp1h, zp1l
.133e	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.1340	68		          pla            ; stack : zp1h, zp1l
.1341	85 fd		          sta  zpage2    ; get zpage2 High byte
.1343	68		          pla            ; stack : zp1l
.1344	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1346	68		          pla            ; stack :
.1347	85 fb		          sta  zpage1    ; get zpage1 High byte
.1349	ad ec 12	          lda  pc+1      ; get pch
.134c	48		          pha            ; stack : pch
.134d	ad eb 12	          lda  pc
.1350	48		          pha            ; stack : pcl, pch
.1351	ad e9 12	          lda  rp        ; get rp
.1354	48		          pha            ; stack : rp, pcl, pch
.1355	ad ea 12	          lda  ra        ; set ra
.1358	58		          cli
.1359	28		          plp            ; stack : pcl, pch
.135a	60		          rts
.135b			pushreg
.135b	08		          php            ; stack : flg, pcl, pch
.135c	78		          sei
.135d	8d ea 12	          sta  ra        ; save a
.1360	68		          pla            ; stack : pcl, pch
.1361	8d e9 12	          sta  rp        ; save rp
.1364	68		          pla            ; stack : pch
.1365	8d eb 12	          sta  pc        ; save pcl
.1368	68		          pla            ; stack : -
.1369	8d ec 12	          sta  pc+1      ; save pch
.136c	ad e9 12	          lda  rp        ; get rp
.136f	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1370	ad ea 12	          lda  ra        ; get a
.1373	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1374	8a		          txa            ; get x
.1375	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1376	98		          tya            ; get y
.1377	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1378	ad ec 12	          lda  pc+1      ; get pch
.137b	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.137c	ad eb 12	          lda  pc        ; get pcl
.137f	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1380	ad e9 12	          lda  rp        ; get rp
.1383	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1384	ad ea 12	          lda  ra        ; get a
.1387	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1388	58		          cli
.1389	60		          rts
.138a			pullreg
.138a			popreg
.138a	78		          sei
.138b	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.138c	8d eb 12	          sta  pc        ; save pcl
.138f	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1390	8d ec 12	          sta  pc+1      ; save pch
.1393	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1394	a8		          tay            ; set y
.1395	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1396	aa		          tax            ; set x
.1397	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1398	8d ea 12	          sta  ra        ; save a
.139b	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.139c	8d e9 12	          sta  rp        ; save rp
.139f	ad ec 12	          lda  pc+1      ; get pch
.13a2	48		          pha            ; stack : pch
.13a3	ad eb 12	          lda  pc
.13a6	48		          pha            ; stack : pcl, pch
.13a7	ad e9 12	          lda  rp        ; get rp
.13aa	48		          pha            ; stack : rp, pcl, pch
.13ab	ad ea 12	          lda  ra        ; set ra
.13ae	58		          cli
.13af	28		          plp            ; stack : pcl, pch
.13b0	60		          rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.13b1			blkfill
.13b1	20 ed 12	bf0            jsr  push
.13b4	20 7c 14	               jsr  savezp1
.13b7	84 fc		               sty  zpage1+1
.13b9	a0 00		               ldy  #$00
.13bb	84 fb		               sty  zpage1
.13bd	91 fb		bf1            sta  (zpage1),y
.13bf	c8		               iny
.13c0	d0 fb		               bne  bf1
.13c2	20 8b 14	               jsr  restzp1
.13c5	20 28 13	               jsr  pop
.13c8	60		               rts
.13c9			memfill
.13c9	20 ed 12	               jsr  push
.13cc	20 b1 13	mf1            jsr  blkfill
.13cf	c8		               iny
.13d0	ca		               dex
.13d1	d0 f9		               bne  mf1
.13d3	20 28 13	               jsr  pop
.13d6	60		               rts
.13d7			memmove
.13d7	20 ed 12	               jsr  push
.13da	ba		               tsx            ; On se crée un pointeur ...
.13db	8a		               txa
.13dc	18		               clc
.13dd	69 0b		               adc  #11
.13df	a8		               tay
.13e0	a2 06		               ldx  #$06
.13e2	b9 00 01	nextbyte       lda  $0100,y
.13e5	99 31 14	               sta  words,y
.13e8	c8		               iny
.13e9	ca		               dex
.13ea	d0 f6		               bne  nextbyte
.13ec	ad 31 14	               lda  s
.13ef	8d 08 14	               sta  source+1
.13f2	ad 32 14	               lda  s+1
.13f5	8d 09 14	               sta  source+2
.13f8	ad 33 14	               lda  d
.13fb	8d 05 14	               sta  destin+1
.13fe	ad 34 14	               lda  d+1
.1401	8d 06 14	               sta  destin+2
.1404	ad ff ff	destin         lda  $ffff
.1407	8d ff ff	source         sta  $ffff
.140a	ee 05 14	               inc  destin+1
.140d	d0 03		               bne  src
.140f	ee 06 14	               inc  destin+2
.1412	ee 08 14	src            inc  source+1
.1415	d0 03		               bne  cnt
.1417	ee 09 14	               inc  source+2
.141a	ad 35 14	cnt            lda  compte
.141d	d0 08		               bne  decit
.141f	ad 36 14	               lda  compte+1
.1422	f0 09		               beq  fini
.1424	ce 36 14	               dec  compte+1
.1427	ce 35 14	decit          dec  compte
.142a	4c 04 14	               jmp  destin
.142d	20 28 13	fini           jsr  pop
.1430	60		               rts
.1431			words
>1431	00 00		s         .word     $0000
>1433	00 00		d         .word     $0000
>1435	00 00		compte    .word     $0000
.1437			decword
.1437	20 ed 12	               jsr  push
.143a	86 fd		               stx  zpage2
.143c	84 fe		               sty  zpage2+1
.143e	20 28 13	               jsr  pop
.1441	60		               rts
.1442			inczpage1
.1442			inczp1
.1442	08		               php
.1443	48		               pha
.1444	e6 fb		               inc  zpage1
.1446	a5 fb		               lda  zpage1
.1448	d0 02		               bne  nopage
.144a	e6 fc		               inc  zpage1+1
.144c	68		nopage         pla
.144d	28		               plp
.144e	60		               rts
.144f			deczpage1
.144f			deczp1
.144f	08		               php
.1450	48		               pha
.1451	c6 fb		               dec  zpage1
.1453	a5 fb		               lda  zpage1
.1455	c9 ff		               cmp  #$ff
.1457	f0 02		               beq  report
.1459	d0 02		               bne  nopage
.145b	c6 fc		report         dec  zpage1+1
.145d	68		nopage         pla
.145e	28		               plp
.145f	60		               rts
.1460			inczpage2
.1460			inczp2
.1460	08		               php
.1461	48		               pha
.1462	e6 fd		               inc  zpage2
.1464	a5 fd		               lda  zpage2
.1466	d0 02		               bne  nopage
.1468	e6 fe		               inc  zpage2+1
.146a	68		nopage         pla
.146b	28		               plp
.146c	60		               rts
.146d			deczpage2
.146d			deczp2
.146d	08		               php
.146e	c6 fd		               dec  zpage2
.1470	a5 fd		               lda  zpage2
.1472	c9 ff		               cmp  #$ff
.1474	f0 02		               beq  report
.1476	d0 02		               bne  nopage
.1478	c6 fe		report         dec  zpage2+1
.147a	28		nopage         plp
.147b	60		               rts
.147c			savezp1
.147c	08		               php
.147d	48		               pha
.147e	a5 fb		               lda  zpage1
.1480	8d 0d 15	               sta  zp1
.1483	a5 fc		               lda  zpage1+1
.1485	8d 0e 15	               sta  zp1+1
.1488	68		               pla
.1489	28		               plp
.148a	60		               rts
.148b			restzp1
.148b	08		               php
.148c	48		               pha
.148d	ad 0d 15	               lda  zp1
.1490	85 fb		               sta  zpage1
.1492	ad 0e 15	               lda  zp1+1
.1495	85 fc		               sta  zpage1+1
.1497	68		               pla
.1498	28		               plp
.1499	60		               rts
.149a			savezp2
.149a	08		               php
.149b	48		               pha
.149c	a5 fd		               lda  zpage2
.149e	8d 0f 15	               sta  zp2
.14a1	a5 fe		               lda  zpage2+1
.14a3	8d 10 15	               sta  zp2+1
.14a6	68		               pla
.14a7	28		               plp
.14a8	60		               rts
.14a9			restzp2
.14a9	08		               php
.14aa	48		               pha
.14ab	ad 0f 15	               lda  zp2
.14ae	85 fd		               sta  zpage2
.14b0	ad 10 15	               lda  zp2+1
.14b3	85 fe		               sta  zpage2+1
.14b5	68		               pla
.14b6	28		               plp
.14b7	60		               rts
.14b8			xy2addr
.14b8	08		               php
.14b9	48		               pha
.14ba	8a		               txa
.14bb	48		               pha
.14bc	98		               tya
.14bd	48		               pha
.14be	ad 08 15	               lda  addr1+1
.14c1	8d 0a 15	               sta  addr2+1
.14c4	ad 07 15	               lda  addr1
.14c7	8d 09 15	               sta  addr2
.14ca	c0 00		               cpy  #$00
.14cc	f0 0f		               beq  addx
.14ce	18		moreline       clc
.14cf	6d 06 15	               adc  ymult
.14d2	90 03		               bcc  norepy
.14d4	ee 0a 15	               inc  addr2+1
.14d7	8d 09 15	norepy         sta  addr2
.14da	88		               dey
.14db	d0 f1		               bne  moreline
.14dd	8a		addx           txa
.14de	18		               clc
.14df	6d 09 15	               adc  addr2
.14e2	90 03		               bcc  thatsit
.14e4	ee 0a 15	               inc  addr2+1
.14e7	8d 09 15	thatsit        sta  addr2
.14ea	68		               pla
.14eb	a8		               tay
.14ec	68		               pla
.14ed	aa		               tax
.14ee	68		               pla
.14ef	28		               plp
.14f0	60		               rts
.14f1			loop
.14f1	ce 11 15	               dec  loopcount
.14f4	d0 03		               bne  norep
.14f6	ce 12 15	               dec  loopcount+1
.14f9	ad 11 15	norep          lda  loopcount
.14fc	c9 00		               cmp  #$00
.14fe	d0 05		               bne  out
.1500	4d 12 15	               eor  loopcount+1
.1503	c9 ff		               cmp  #$ff
.1505	60		out            rts
>1506	28		ymult          .byte     40
>1507	00 00		addr1          .word     $0000
>1509	00 00		addr2          .word     $0000
>150b	00 00		bytecnt        .word     $0000
>150d	00 00		zp1            .word     $0000
>150f	00 00		zp2            .word     $0000
>1511	00 00		loopcount      .word     $0000

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1513	01		a2hexcol       .byte     1              ; pour aputscxy
>1514	00		a2hexbkcol     .byte     %00000000
.1515			a2hexpos
>1515	00		a2hexpx        .byte     0              ; pour aputsxy
>1516	00		a2hexpy        .byte     0
>1517	24		a2hexprefix    .byte     "$"            ; pour aputs
>1518	00 00		a2hexstr       .word     $00
>151a	00 00		               .word     $00
>151c	00		               .byte     0              ; 0 end string
>151d	01		abincol        .byte     1
>151e	00		abinbkcol      .byte     %00000000
>151f	30 30 30 30	abin           .null     "00000000"
>1523	30 30 30 30 00
>1528	20 20 20 00	adec           .null     "   "
.152c			putahexfmtxy
.152c	20 ed 12	               jsr  push
.152f	20 7b 15	               jsr  atohex
.1532	ae 15 15	               ldx  a2hexpx
.1535	ac 16 15	               ldy  a2hexpy
.1538	20 11 12	               jsr  gotoxy
.153b	a2 17		               ldx  #<a2hexprefix
.153d	a0 15		               ldy  #>a2hexprefix
.153f	20 f7 11	               jsr  puts
.1542	20 28 13	               jsr  pop
.1545	60		               rts
.1546			putahexfmt
.1546	20 ed 12	               jsr  push
.1549	20 7b 15	               jsr  atohex
.154c	a2 17		               ldx  #<a2hexprefix
.154e	a0 15		               ldy  #>a2hexprefix
.1550	20 f7 11	               jsr  puts
.1553	20 28 13	               jsr  pop
.1556	60		               rts
.1557			putahex
.1557	20 ed 12	               jsr  push
.155a	20 7b 15	               jsr  atohex
.155d	a2 18		               ldx  #<a2hexstr
.155f	a0 15		               ldy  #>a2hexstr
.1561	20 f7 11	               jsr  puts
.1564	20 28 13	               jsr  pop
.1567	60		               rts
.1568			nibtohex
.1568	08		               php
.1569	29 0f		               and  #$0f
.156b	f8		               sed
.156c	18		               clc
.156d	69 90		               adc  #$90
.156f	69 40		               adc  #$40
.1571	d8		               cld
.1572	28		               plp
.1573	60		               rts
.1574			lsra4bits
.1574	08		               php
.1575	4a		               lsr
.1576	4a		               lsr
.1577	4a		               lsr
.1578	4a		               lsr
.1579	28		               plp
.157a	60		               rts
.157b			atohex
.157b	08		               php
.157c	48		               pha
.157d	48		               pha
.157e	20 74 15	               jsr  lsra4bits
.1581	20 68 15	               jsr  nibtohex
.1584	8d 18 15	               sta  a2hexstr
.1587	68		               pla
.1588	20 68 15	               jsr  nibtohex
.158b	8d 19 15	               sta  a2hexstr+1
.158e	a9 00		               lda  #$00                ; set end of string
.1590	8d 1a 15	               sta  a2hexstr+2
.1593	68		               pla
.1594	28		               plp
.1595	60		               rts
.1596			xy2hex
.1596	20 ed 12	               jsr  push
.1599	20 7b 15	               jsr  atohex
.159c	8a		               txa
.159d	48		               pha
.159e	20 74 15	               jsr  lsra4bits
.15a1	20 68 15	               jsr  nibtohex
.15a4	8d 18 15	               sta  a2hexstr
.15a7	68		               pla
.15a8	20 68 15	               jsr  nibtohex
.15ab	8d 19 15	               sta  a2hexstr+1
.15ae	98		               tya
.15af	48		               pha
.15b0	20 74 15	               jsr  lsra4bits
.15b3	20 68 15	               jsr  nibtohex
.15b6	8d 1a 15	               sta  a2hexstr+2
.15b9	68		               pla
.15ba	20 68 15	               jsr  nibtohex
.15bd	8d 1b 15	               sta  a2hexstr+3
.15c0	a9 00		               lda  #$00                ; 0 ended string
.15c2	8d 1c 15	               sta  a2hexstr+4
.15c5	20 28 13	               jsr  pop
.15c8			atobin
.15c8	20 ed 12	               jsr  push
.15cb	a2 08		               ldx  #8
.15cd	a0 00		               ldy  #0
.15cf	18		               clc
.15d0	2a		nextbit        rol
.15d1	48		               pha
.15d2	69 00		               adc  #$00
.15d4	29 01		               and  #$01
.15d6	20 68 15	               jsr  nibtohex
.15d9	99 1f 15	               sta  abin,y
.15dc	68		               pla
.15dd	c8		               iny
.15de	ca		               dex
.15df	d0 ef		               bne  nextbit
.15e1	a9 00		               lda  #0
.15e3	99 1f 15	               sta  abin,y
.15e6	20 28 13	               jsr  pull
.15e9	60		               rts
.15ea			abinsetmccol
.15ea	20 5b 13	               jsr  pushreg
.15ed	20 8a 13	               jsr  popreg
.15f0	60		               rts
.15f1			putabin
.15f1	20 c8 15	               jsr     atobin
.15f4	20 ed 12	               jsr     push
.15f7	a2 1f		               ldx     #<abin
.15f9	a0 15		               ldy     #>abin
.15fb	20 f7 11	               jsr     puts
.15fe	20 28 13	               jsr     pop
.1601	60		               rts
.1602			printabin
.1602	20 ed 12	               jsr     push
.1605	a2 1f		               ldx     #<abin
.1607	a0 15		               ldy     #>abin
.1609	20 f7 11	               jsr     puts
.160c	20 28 13	               jsr     pop
.160f	60		               rts
.1610			putabinfmt
.1610	08		               php
.1611	48		               pha
.1612	a9 25		               lda     #"%"
.1614	20 f1 11	               jsr     putch
.1617	68		               pla
.1618	20 f1 15	               jsr     putabin
.161b	28		               plp
.161c	60		               rts
.161d			putabinxy
.161d	20 11 12	               jsr     gotoxy
.1620	20 f1 15	               jsr     putabin
.1623	60		               rts
.1624			putabinfmtxy
.1624	20 11 12	               jsr     gotoxy
.1627	20 10 16	               jsr     putabinfmt
.162a	60		               rts
.162b			atodec
.162b	20 ed 12	               jsr  push
.162e	f8		               sed            ; On se place en mode décimal.
.162f	aa		               tax            ; On déplace a dans x.
.1630	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.1632	a9 00		               lda  #$00      ; 0 dans A.
.1634	18		nextbit        clc            ; Bit carry a 0.
.1635	69 01		               adc  #$01      ; Ajoute 1 a A.
.1637	90 01		               bcc  decx      ; Pas de carry, pas de report.
.1639	c8		               iny            ; On incrémente Y
.163a	ca		decx           dex            ; X=X-1
.163b	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.163d	48		               pha            ; A sur le stack.
.163e	98		               tya            ; Y dans A (MSB)
.163f	20 68 15	               jsr  nibtohex  ; a hex petsci ...
.1642	8d 28 15	               sta  adec      ; ... dans tampon.
.1645	68		               pla            ; Récupere A
.1646	48		               pha            ;
.1647	20 68 15	               jsr  nibtohex
.164a	8d 2a 15	               sta  adec+2
.164d	68		               pla
.164e	6a		               ror
.164f	6a		               ror
.1650	6a		               ror
.1651	6a		               ror
.1652	20 68 15	               jsr  nibtohex
.1655	8d 29 15	               sta  adec+1
.1658	d8		               cld            ; On revient en mode binaire.
.1659	20 28 13	               jsr  pull
.165c	60		               rts
.165d			putadec
.165d	20 ed 12	               jsr  push
.1660	20 2b 16	               jsr  atodec
.1663	a2 28		               ldx  #<adec
.1665	a0 15		               ldy  #>adec+1
.1667	20 f7 11	               jsr  puts
.166a	20 28 13	               jsr  pop
.166d	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.166e			waitstop
.166e	20 ed 12	               jsr  push
.1671	20 ed f6	wait           jsr  k_stop
.1674	d0 fb		               bne  wait
.1676	20 28 13	               jsr  pop
.1679	60		               rts
.167a			anykey
.167a	08		               php
.167b	48		               pha
.167c	a5 cb		nokey          lda 203
.167e	c9 40		               cmp #64
.1680	f0 fa		               beq nokey
.1682	20 8c 16	               jsr releasekey
.1685	a9 00		               lda #0
.1687	85 c6		               sta 198
.1689	68		               pla
.168a	28		               plp
.168b	60		               rts
.168c			releasekey
.168c	08		               php
.168d	48		               pha
.168e	a5 cb		keypressed     lda 203
.1690	c9 40		               cmp #64
.1692	d0 fa		               bne keypressed
.1694	68		               pla
.1695	28		               plp
.1696	60		               rts
.1697			getkey
.1697	20 e4 ff	gkagain        jsr  getin
.169a	c9 00		               cmp  #0
.169c	f0 f9		               beq  gkagain
.169e	60		               rts
.169f			kbflushbuff
.169f	08		               php
.16a0	48		               pha
.16a1	20 e4 ff	again          jsr  getin
.16a4	c9 00		               cmp  #0
.16a6	d0 f9		               bne  again
.16a8	68		               pla
.16a9	28		               plp
.16aa	60		               rts
.16ab			waitkey
.16ab	20 ed 12	               jsr  push
.16ae	8d fc 16	               sta  thekey
.16b1	20 e4 ff	nope           jsr  getin
.16b4	20 d2 ff	               jsr  chrout
.16b7	cd fc 16	               cmp  thekey
.16ba	d0 f5		               bne  nope
.16bc	20 d2 ff	               jsr  chrout
.16bf	20 28 13	               jsr  pop
.16c2	60		               rts
.16c3			waitspace
.16c3	20 ed 12	               jsr  push
.16c6	a9 7f		wait           lda  #$7f  ;%01111111
.16c8	8d 00 dc	               sta  $dc00
.16cb	ad 01 dc	               lda  $dc01
.16ce	29 10		               and  #$10  ;mask %00010000
.16d0	d0 f4		               bne  wait
.16d2	20 28 13	               jsr  pop
.16d5			waitsstop
.16d5	20 ed 12	               jsr  push
.16d8	20 ed f6	wait           jsr  k_stop  ;%01111111
.16db	d0 fb		               bne  wait
.16dd	20 28 13	               jsr  pop
.16e0			waitreturn
.16e0	20 ed 12	               jsr  push
.16e3	ad fd 16	               lda  thecount
.16e6	8d 00 04	               sta  scrnram
.16e9	a9 02		               lda  #$02
.16eb	8d 00 d8	               sta  colorram
.16ee	20 e4 ff	nope           jsr  getin
.16f1	c9 0d		nohex          cmp  #$0d
.16f3	d0 f9		               bne  nope
.16f5	ee fd 16	               inc  thecount
.16f8	20 28 13	               jsr  pop
.16fb	60		               rts
>16fc	00		thekey         .byte   0
>16fd	01		thecount       .byte   $01
>16fe	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1702	00 00 00 00 00 00 00 00 00 0d 00 00
>170e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1712	00 00 00 00 00 00 00 00 00 00 00 00
>171e	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1722	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>172e	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1732	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>173e	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>1742	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>174e	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>1752	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>175e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>1762	00 00 00 00 00 00 00 00 00 00 00 00
>176e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>1772	00 00 00 00 00 00 00 00 00 00 00 00
>177e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>1782	00 00 00 00 00 00 00 00 00 00 00 00
>178e	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>1792	00 00 00 00 00 00 00 00 00 00 00 00
>179e	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>17a2	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>17ae	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>17b2	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>17be	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>17c2	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>17ce	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>17d2	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>17de	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>17e2	00 00 00 00 00 00 00 00 00 00 00 00
>17ee	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>17f2	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-showregs.asm

.17fe			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.17fe	08		               php                 ; Sauvegarde le registre de status sur stack.
.17ff	8d f9 19	               sta  rega           ; Sauvegarde Acc en mémoire.
.1802	68		               pla                 ; Récupère le registre de status du stack.
.1803	8d fc 19	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.1806	8e fa 19	               stx  regx           ; Sauvegarde le registre X en mémoire.
.1809	8c fb 19	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.180c	ba		               tsx                 ; Copie le registre S dans X.
.180d	8e fd 19	               stx  regs           ; Sauvegarde le registre S en mémoire.
.1810	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.1811	8d ff 19	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.1814	8d 01 1a	               sta  regpcl2        ; ... une seconde fois.
.1817	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.1818	8d fe 19	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.181b	8d 00 1a	               sta  regpch2        ; ... une seconde fois.
.181e	ad f9 19	               lda  rega           ; On commence par le registre Acc.
.1821	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1822	20 68 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1825	8d 96 19	               sta  vala+1         ; ... et le place dans la chaine.
.1828	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1829	20 74 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.182c	20 68 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.182f	8d 95 19	               sta  vala           ; ... et le place dans la chaine.
.1832	ad fb 19	               lda  regy           ; Ensuite, le registre Y.
.1835	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1836	20 68 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1839	8d ad 19	               sta  valy+1         ; ... et le place dans la chaine.
.183c	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.183d	20 74 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1840	20 68 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1843	8d ac 19	               sta  valy           ; ... et le place dans la chaine.
.1846	ad fa 19	               lda  regx           ; Ensuite, le registre X.
.1849	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.184a	20 68 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.184d	8d a1 19	               sta  valx+1         ; ... et le place dans la chaine.
.1850	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1851	20 74 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1854	20 68 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1857	8d a0 19	               sta  valx           ; ... et le place dans la chaine.
.185a	ad fc 19	               lda  regp           ; Ensuite, le registre de status.
.185d	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.185e	20 68 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1861	8d b8 19	               sta  valp+1         ; ... et le place dans la chaine.
.1864	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1865	20 74 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1868	20 68 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.186b	8d b7 19	               sta  valp           ; ... et le place dans la chaine.
.186e	ad fd 19	               lda  regs           ; Ensuite, le pointeur de stack.
.1871	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1872	20 68 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1875	8d c3 19	               sta  vals+1         ; ... et le place dans la chaine.
.1878	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1879	20 74 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.187c	20 68 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.187f	8d c2 19	               sta  vals           ; ... et le place dans la chaine.
.1882	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.1883	ad 01 1a	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.1886	69 00		               adc  #$00           ; On y ajoute 1.
.1888	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.188a	ee 00 1a	               inc  regpch2        ; ... en incrémentant le MSB.
.188d	8d 01 1a	noreport       sta  regpcl2        ; On le sauvegarde.
.1890	ad 01 1a	               lda  regpcl2        ; On récupère la partie basse du compteur.
.1893	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1894	20 68 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1897	8d d3 19	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.189a	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.189b	20 74 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.189e	20 68 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18a1	8d d2 19	               sta  valpcl         ; ... et lace le code à la position "--X-".
.18a4	ad 00 1a	               lda regpch2         ; On récupère la partie haute du compteur.
.18a7	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18a8	20 68 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18ab	8d d1 19	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.18ae	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.18af	20 74 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18b2	20 68 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18b5	8d d0 19	               sta  valpch         ; ... et lace le code à la position "X---".
.18b8	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.18ba	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18bb	20 68 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18be	8d e4 19	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.18c1	68		               pla
.18c2	20 74 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18c5	20 68 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18c8	8d e3 19	               sta  valz1l         ; ... et lace le code à la position "--X-".
.18cb	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.18cd	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18ce	20 68 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18d1	8d e2 19	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.18d4	68		               pla
.18d5	20 74 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18d8	20 68 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18db	8d e1 19	               sta  valz1h         ; ... et lace le code à la position "X---".
.18de	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.18e0	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18e1	20 68 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18e4	8d f5 19	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.18e7	68		               pla
.18e8	20 74 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18eb	20 68 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18ee	8d f4 19	               sta  valz2l         ; ... et lace le code à la position "--X-".
.18f1	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.18f3	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18f4	20 68 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18f7	8d f3 19	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.18fa	68		               pla
.18fb	20 74 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18fe	20 68 15	               jsr  nibtohex
.1901	8d f2 19	               sta  valz2h         ; ... et lace le code à la position "X---".
.1904	20 d9 12	               jsr  setinverse     ; On se place en mode inverse vidéo.
.1907	20 5b 13	               jsr  pushreg
.190a	a2 8d		               ldx  #<srega
.190c	a0 19		               ldy  #>srega
.190e	20 84 12	               jsr  putscxy
.1911	20 8a 13	               jsr  popreg
.1914	20 5b 13	               jsr  pushreg
.1917	a2 99		               ldx  #<sregx
.1919	a0 19		               ldy  #>sregx
.191b	20 84 12	               jsr  putscxy
.191e	20 8a 13	               jsr  popreg
.1921	20 5b 13	               jsr  pushreg
.1924	a2 a4		               ldx  #<sregy
.1926	a0 19		               ldy  #>sregy
.1928	20 84 12	               jsr  putscxy
.192b	20 8a 13	               jsr  popreg
.192e	20 5b 13	               jsr  pushreg
.1931	a2 b0		               ldx  #<sregp
.1933	a0 19		               ldy  #>sregp
.1935	20 84 12	               jsr  putscxy
.1938	20 8a 13	               jsr  popreg
.193b	20 5b 13	               jsr  pushreg
.193e	a2 bb		               ldx  #<sregs
.1940	a0 19		               ldy  #>sregs
.1942	20 84 12	               jsr  putscxy
.1945	20 8a 13	               jsr  popreg
.1948	20 5b 13	               jsr  pushreg
.194b	a2 c7		               ldx  #<sregpc
.194d	a0 19		               ldy  #>sregpc
.194f	20 84 12	               jsr  putscxy
.1952	20 8a 13	               jsr  popreg
.1955	20 5b 13	               jsr  pushreg
.1958	a2 d7		               ldx  #<sregz1
.195a	a0 19		               ldy  #>sregz1
.195c	20 84 12	               jsr  putscxy
.195f	20 8a 13	               jsr  popreg
.1962	20 5b 13	               jsr  pushreg
.1965	a2 e8		               ldx  #<sregz2
.1967	a0 19		               ldy  #>sregz2
.1969	20 84 12	               jsr  putscxy
.196c	20 8a 13	               jsr  popreg
.196f	20 e1 12	               jsr  clrinverse     ; On quitte le mode inverse vidéo.
.1972	ad fe 19	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.1975	48		               pha                 ; ... à la bonne position sur la pile.
.1976	ad ff 19	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.1979	48		               pha                 ; ... à la bonne position sur la pile.
.197a	ae fd 19	               ldx  regs           ; On replace tous les registre à leurs ...
.197d	9a		               txs                 ; ...
.197e	ac fb 19	               ldy  regy           ; ...
.1981	ae fa 19	               ldx  regx           ; ...
.1984	ad fc 19	               lda  regp           ; ...
.1987	48		               pha                 ; ...
.1988	ad f9 19	               lda  rega           ; ...
.198b	28		               plp                 ; ... valeurs initiales
.198c	60		               rts
>198d	07 01 17	srega   .byte   cyellow,coln+1,line
>1990	20 20 41 3a	        .text   '  a:$' ;4,24
>1994	24
>1995	00 00 20 00	vala    .byte   0,0,32,0
>1999	03 09 17	sregx   .byte   ccyan,coln+9,line
>199c	20 58 3a 24	        .text   ' x:$' ;4,24
>19a0	00 00 20 00	valx    .byte   0,0,32,0
>19a4	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>19a7	20 59 3a 20	        .text   ' y: $' ;4,24
>19ab	24
>19ac	00 00 20 00	valy    .byte   0,0,32,0
>19b0	08 18 17	sregp   .byte   corange,coln+24,line
>19b3	20 50 3a 24	        .text   ' p:$' ;4,24
>19b7	00 00 20 00	valp    .byte   0,0,32,0
>19bb	0a 1f 17	sregs   .byte   clightred,coln+31,line
>19be	20 53 3a 24	        .text   ' s:$' ;4,24
>19c2	00 00 20 20	vals    .byte   0,0,32,32,0
>19c6	00
>19c7	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>19cb	20 50 43 3a	        .text   ' pc:$' ;4,24
>19cf	24
>19d0	00 00		valpch  .byte   0,0
>19d2	00 00 20 20	valpcl  .byte   0,0,32,32,0
>19d6	00
>19d7	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>19db	20 5a 50 31	        .text   ' zp1:$' ;4,24
>19df	3a 24
>19e1	00 00		valz1h  .byte   0,0
>19e3	00 00 20 20	valz1l  .byte   0,0,32,32,0
>19e7	00
>19e8	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>19ec	20 5a 50 32	        .text   ' zp2:$' ;4,24
>19f0	3a 24
>19f2	00 00		valz2h  .byte   0,0
>19f4	00 00 20 20	valz2l  .byte   0,0,32,32,0
>19f8	00
>19f9	00		rega    .byte   0
>19fa	00		regx    .byte   0
>19fb	00		regy    .byte   0
>19fc	00		regp    .byte   0
>19fd	00		regs    .byte   0
>19fe	00		regpch  .byte   0
>19ff	00		regpcl  .byte   0
>1a00	00		regpch2 .byte   0
>1a01	00		regpcl2 .byte   0
>1a02	00		vzp1h   .byte   0
>1a03	00		vzp1l   .byte   0
>1a04	00		vzp2h   .byte   0
>1a05	00		vzp2l   .byte   0

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-drawbox.asm

.1a06			db_tline
.1a06	08		                php                 ; Sauvegarde les registres.
.1a07	48		                pha
.1a08	a9 b0		                lda #tleft          ; Coin suppérieur gauche.
.1a0a	8d c7 1a	                sta db_left
.1a0d	a9 c0		                lda #hline          ; Ligne horizontale.
.1a0f	8d c9 1a	                sta db_mid
.1a12	a9 ae		                lda #tright         ; Coin suppérieur droit.
.1a14	8d c8 1a	                sta db_right
.1a17	28		                plp                 ; Récupère les registres.
.1a18	68		                pla
.1a19	20 62 1a	                jsr db_drawline
.1a1c	60		                rts
.1a1d			db_bline
.1a1d	08		                php                 ; Sauvegarde les registres.
.1a1e	48		                pha
.1a1f	a9 ad		                lda #bleft          ; Coin inférieur gauche.
.1a21	8d c7 1a	                sta db_left
.1a24	a9 c0		                lda #hline          ; Ligne horizontale.
.1a26	8d c9 1a	                sta db_mid
.1a29	a9 bd		                lda #bright         ; Coin inférieur droit.
.1a2b	8d c8 1a	                sta db_right
.1a2e	28		                plp                 ; Récupère les registres.
.1a2f	68		                pla
.1a30	20 62 1a	                jsr db_drawline
.1a33	60		                rts
.1a34			db_eline
.1a34	08		                php                 ; Sauvegarde les registres.
.1a35	48		                pha
.1a36	a9 dd		                lda #vline          ; Ligne verticale.
.1a38	8d c7 1a	                sta db_left
.1a3b	a9 20		                lda #space          ; Caractère espace.
.1a3d	8d c9 1a	                sta db_mid
.1a40	a9 dd		                lda #vline          ; Ligne verticale.
.1a42	8d c8 1a	                sta db_right
.1a45	28		                plp                 ; Récupère les registres.
.1a46	68		                pla
.1a47	20 62 1a	                jsr db_drawline
.1a4a	60		                rts
.1a4b			db_hline
.1a4b	08		                php                 ; Sauvegarde les registres.
.1a4c	48		                pha
.1a4d	a9 ab		                lda #hleft          ; Extrémité gauche d'une ligne médianne.
.1a4f	8d c7 1a	                sta db_left
.1a52	a9 c0		                lda #hline          ; Ligne horizontale.
.1a54	8d c9 1a	                sta db_mid
.1a57	a9 b3		                lda #hright         ; Extrémité droite d'une ligne médianne.
.1a59	8d c8 1a	                sta db_right
.1a5c	28		                plp                 ; Récupère les registres.
.1a5d	68		                pla
.1a5e	20 62 1a	                jsr db_drawline
.1a61	60		                rts
.1a62			db_drawline
.1a62	20 5b 13	                jsr pushreg         ; Sauvegarde les registres.
.1a65	ad 86 02	                lda bascol          ; Sauvegarde de la ...
.1a68	8d d0 1a	                sta drawbox_bascol  ; ... couleur basic.
.1a6b	ad ce 1a	                lda drawbox_colour  ; Sélectionne la couleur...
.1a6e	8d 86 02	                sta bascol          ; ... de la fenêtre.
.1a71	c9 10		                cmp #$10            ; Couleur inverse vidéo?
.1a73	30 05		                bmi noreverse       ; Non ...
.1a75	a9 12		                lda #18             ; Oui on place basic en inverse ...
.1a77	20 d2 ff	                jsr chrout          ; Vidéo.
.1a7a	ae cf 1a	noreverse       ldx drawbox_curline ; On positionne le curseur au ...
.1a7d	ac cb 1a	                ldy drawbox_left    ; ... coin suppérieur gauche ...
.1a80	18		                clc                 ; ... de la fenêtre.
.1a81	20 f0 ff	                jsr plot
.1a84	ad c7 1a	                lda db_left         ; On dessine le premier caractère.
.1a87	20 d2 ff	                jsr chrout
.1a8a	ad c9 1a	                lda db_mid          ; On dessine la ligne horizontale ...
.1a8d	ae cc 1a	                ldx drawbox_width   ; ... selon la largeur voulue ...
.1a90	ca		                dex                 ; ... de la fenêtre moins les ...
.1a91	ca		                dex                 ; ... deux caractères d'extrémité.
.1a92	20 e4 11	                jsr putnch
.1a95	ad c8 1a	                lda db_right        ; On dessine le dernier caractère.
.1a98	20 d2 ff	                jsr chrout
.1a9b	a9 92		                lda #146            ; On met fin à l'inverse vidéo.
.1a9d	20 d2 ff	                jsr chrout
.1aa0	ad d0 1a	                lda drawbox_bascol  ; On récupère et replace la ...
.1aa3	8d 86 02	                sta bascol          ; ... couleur de basic.
.1aa6	ee cf 1a	                inc drawbox_curline ; Passe à la ligne suivante.
.1aa9	20 8a 13	                jsr popreg          ; Récupère les registres.
.1aac	60		                rts
.1aad			db_drawbox
.1aad	20 5b 13	                jsr pushreg         ; Sauvegarde les registres.
.1ab0	ae cd 1a	                ldx drawbox_height  ; Récupère la hauteur de la fenètre.
.1ab3	20 06 1a	                jsr db_tline        ; Dessine la ligne suppérieure.
.1ab6	ca		                dex                 ; Soustrait 2 pour tenir compte des ...
.1ab7	ca		                dex                 ; lignes suppérieures et inférieures.
.1ab8	f0 06		                beq lastline        ; Si 0 pas de ligne vide dans la fenètre.
.1aba	20 34 1a	moreline        jsr db_eline        ; Dessine une ligne vide de la boîte.
.1abd	ca		                dex                 ; Une ligne de moins à faire.
.1abe	d0 fa		                bne moreline        ; On passe à la prochaine s'il en reste.
.1ac0	20 1d 1a	lastline        jsr db_bline        ; Dessine la ligne inférieure.
.1ac3	20 8a 13	                jsr popreg          ; Récupère les registres.
.1ac6	60		                rts
=176			tleft           =       176         ; Coin suppérieur gauche.
=174			tright          =       174         ; Coin suppérieur droit.
=173			bleft           =       173         ; Coin inférieur gauche.
=189			bright          =       189         ; Coin inférieur droit.
=171			hleft           =       171         ; Extrémité gauche d'une ligne médianne.
=179			hright          =       179         ; Extrémité droite d'une ligne médianne.
=221			vline           =       221         ; Ligne verticale.
=192			hline           =       192         ; Ligne horizontale.
=32			space           =       32          ; Caractère espace.
>1ac7	00		db_left         .byte   0           ; Caractère Gauche de la ligne courante.
>1ac8	00		db_right        .byte   0           ; Caractère droit de la ligne courante.
>1ac9	00		db_mid          .byte   0           ; Caractère central de la ligne courante.
>1aca	00		drawbox_top     .byte   0           ; Coordonné du haut de la boite.
>1acb	00		drawbox_left    .byte   0           ; Coordonné de la gauche de la boîte.
>1acc	00		drawbox_width   .byte   0           ; Largeur de la boîte.
>1acd	00		drawbox_height  .byte   0           ; Hauteur de la boîte.
>1ace	00		drawbox_colour  .byte   0           ; Couleur de la boîte.
>1acf	00		drawbox_curline .byte   0           ; No de la ligne courante à dessiner.
>1ad0	00		drawbox_bascol  .byte   0           ; Case de mémorisation de la couleur Basic.

;******  Return to file: slbug64.asm


;******  End of listing

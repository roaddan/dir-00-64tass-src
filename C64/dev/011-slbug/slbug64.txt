
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L slbug64.txt -o slbug64.prg slbug64.asm
; Thu Sep 25 00:08:45 2025

;Offset	;Hex		;Source

;******  Processing input file: slbug64.asm

="20250924-000001"	                Version = "20250924-000001"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 55 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"
.0854	60		              rts                  ; ... doit se rerminer par un RTS.

;******  Return to file: slbug64.asm

.0855			main
.0855	20 1d 10	               jsr  scrmaninit
.0858	08		               php
.0859	48		               pha
.085a	a9 0e		               lda  #14
.085c	20 d2 ff	               jsr  $ffd2
.085f	68		               pla
.0860	28		               plp
.0861	08		               php
.0862	48		               pha
.0863	a9 08		               lda  #$08
.0865	20 d2 ff	               jsr  $ffd2
.0868	68		               pla
.0869	28		               plp
.086a	a9 05		               lda  #cvert
.086c	8d 20 d0	               sta  vicbordcol
.086f	a9 06		               lda  #cbleu
.0871	8d 21 d0	               sta  vicbackcol
.0874	a9 01		               lda  #cblanc
.0876	8d 86 02	               sta  bascol
.0879	20 3d 10	               jsr  cls
.087c	20 c9 08	               jsr  help
.087f	20 dd 14	               jsr  anykey
.0882	20 a4 08	               jsr  slbug64
.0885	20 c9 08	               jsr  help
.0888	20 be 11	               jsr  pushreg
.088b	48		               pha
.088c	a9 05		               lda  #cvert
.088e	8d 20 d0	               sta  $d020
.0891	68		               pla
.0892	48		               pha
.0893	a9 06		               lda  #cbleu
.0895	8d 21 d0	               sta  $d021
.0898	68		               pla
.0899	48		               pha
.089a	a9 01		               lda  #cblanc
.089c	8d 86 02	               sta  bascol
.089f	68		               pla
.08a0	20 ed 11	               jsr  popreg
.08a3	60		               rts
.08a4			slbug64
.08a4	08		                php
.08a5	48		                pha
.08a6	ad 21 d0	                lda vicbackcol
.08a9	48		                pha
.08aa	a9 00		                lda #cnoir
.08ac	8d 21 d0	                sta vicbackcol
.08af	8d 20 d0	                sta vicbordcol
.08b2	20 61 16	                jsr showregs
.08b5	20 dd 14	                jsr anykey
.08b8	68		                pla
.08b9	20 be 11	               jsr  pushreg
.08bc	a2 00		               ldx  #0
.08be	a0 00		               ldy  #0
.08c0	20 74 10	               jsr  gotoxy
.08c3	20 ed 11	               jsr  popreg
.08c6	68		                pla
.08c7	28		                plp
.08c8	60		                rts
.08c9			help
=4			left = 4
=3			top = 3
=$7			color = cjaune
.08c9	20 50 11	                jsr pushall
.08cc	20 3d 10	                jsr cls
.08cf	a9 0d		                lda #$0d
.08d1	20 54 10	                jsr putch
.08d4	20 54 10	                jsr putch
.08d7	20 54 10	                jsr putch
.08da	20 54 10	                jsr putch
.08dd	a9 12		                lda #b_rvs_on
.08df	20 54 10	                jsr putch
.08e2	20 be 11	                jsr  pushreg
.08e5	ad 86 02	                lda  bascol
.08e8	48		                pha
.08e9	a9 07		                lda  #color
.08eb	8d 86 02	                sta  bascol
.08ee	a0 04		                ldy  #left
.08f0	a2 03		                ldx  #top+0
.08f2	18		                clc
.08f3	20 f0 ff	                jsr  plot
.08f6	a2 85		                ldx  #<tline
.08f8	a0 0e		                ldy  #>tline
.08fa	20 5a 10	                jsr  puts
.08fd	68		                pla
.08fe	8d 86 02	                sta  bascol
.0901	20 ed 11	                jsr  popreg
.0904	20 be 11	                jsr  pushreg
.0907	ad 86 02	                lda  bascol
.090a	48		                pha
.090b	a9 07		                lda  #color
.090d	8d 86 02	                sta  bascol
.0910	a0 05		                ldy  #left+1
.0912	a2 03		                ldx  #top+0
.0914	18		                clc
.0915	20 f0 ff	                jsr  plot
.0918	a2 2b		                ldx  #<texta
.091a	a0 0d		                ldy  #>texta
.091c	20 5a 10	                jsr  puts
.091f	68		                pla
.0920	8d 86 02	                sta  bascol
.0923	20 ed 11	                jsr  popreg
.0926	20 be 11	                jsr  pushreg
.0929	ad 86 02	                lda  bascol
.092c	48		                pha
.092d	a9 07		                lda  #color
.092f	8d 86 02	                sta  bascol
.0932	a0 04		                ldy  #left
.0934	a2 04		                ldx  #top+1
.0936	18		                clc
.0937	20 f0 ff	                jsr  plot
.093a	a2 e8		                ldx  #<eline
.093c	a0 0e		                ldy  #>eline
.093e	20 5a 10	                jsr  puts
.0941	68		                pla
.0942	8d 86 02	                sta  bascol
.0945	20 ed 11	                jsr  popreg
.0948	20 be 11	                jsr  pushreg
.094b	ad 86 02	                lda  bascol
.094e	48		                pha
.094f	a9 07		                lda  #color
.0951	8d 86 02	                sta  bascol
.0954	a0 04		                ldy  #left
.0956	a2 05		                ldx  #top+2
.0958	18		                clc
.0959	20 f0 ff	                jsr  plot
.095c	a2 e8		                ldx  #<eline
.095e	a0 0e		                ldy  #>eline
.0960	20 5a 10	                jsr  puts
.0963	68		                pla
.0964	8d 86 02	                sta  bascol
.0967	20 ed 11	                jsr  popreg
.096a	20 be 11	                jsr  pushreg
.096d	ad 86 02	                lda  bascol
.0970	48		                pha
.0971	a9 07		                lda  #color
.0973	8d 86 02	                sta  bascol
.0976	a0 05		                ldy  #left+1
.0978	a2 05		                ldx  #top+2
.097a	18		                clc
.097b	20 f0 ff	                jsr  plot
.097e	a2 46		                ldx  #<textb
.0980	a0 0d		                ldy  #>textb
.0982	20 5a 10	                jsr  puts
.0985	68		                pla
.0986	8d 86 02	                sta  bascol
.0989	20 ed 11	                jsr  popreg
.098c	20 be 11	                jsr  pushreg
.098f	ad 86 02	                lda  bascol
.0992	48		                pha
.0993	a9 07		                lda  #color
.0995	8d 86 02	                sta  bascol
.0998	a0 04		                ldy  #left
.099a	a2 06		                ldx  #top+3
.099c	18		                clc
.099d	20 f0 ff	                jsr  plot
.09a0	a2 e8		                ldx  #<eline
.09a2	a0 0e		                ldy  #>eline
.09a4	20 5a 10	                jsr  puts
.09a7	68		                pla
.09a8	8d 86 02	                sta  bascol
.09ab	20 ed 11	                jsr  popreg
.09ae	20 be 11	                jsr  pushreg
.09b1	ad 86 02	                lda  bascol
.09b4	48		                pha
.09b5	a9 07		                lda  #color
.09b7	8d 86 02	                sta  bascol
.09ba	a0 05		                ldy  #left+1
.09bc	a2 06		                ldx  #top+3
.09be	18		                clc
.09bf	20 f0 ff	                jsr  plot
.09c2	a2 e1		                ldx  #<textg
.09c4	a0 0d		                ldy  #>textg
.09c6	20 5a 10	                jsr  puts
.09c9	68		                pla
.09ca	8d 86 02	                sta  bascol
.09cd	20 ed 11	                jsr  popreg
.09d0	20 be 11	                jsr  pushreg
.09d3	ad 86 02	                lda  bascol
.09d6	48		                pha
.09d7	a9 07		                lda  #color
.09d9	8d 86 02	                sta  bascol
.09dc	a0 04		                ldy  #left
.09de	a2 07		                ldx  #top+4
.09e0	18		                clc
.09e1	20 f0 ff	                jsr  plot
.09e4	a2 e8		                ldx  #<eline
.09e6	a0 0e		                ldy  #>eline
.09e8	20 5a 10	                jsr  puts
.09eb	68		                pla
.09ec	8d 86 02	                sta  bascol
.09ef	20 ed 11	                jsr  popreg
.09f2	20 be 11	                jsr  pushreg
.09f5	ad 86 02	                lda  bascol
.09f8	48		                pha
.09f9	a9 07		                lda  #color
.09fb	8d 86 02	                sta  bascol
.09fe	a0 04		                ldy  #left
.0a00	a2 07		                ldx  #top+4
.0a02	18		                clc
.0a03	20 f0 ff	                jsr  plot
.0a06	a2 e8		                ldx  #<eline
.0a08	a0 0e		                ldy  #>eline
.0a0a	20 5a 10	                jsr  puts
.0a0d	68		                pla
.0a0e	8d 86 02	                sta  bascol
.0a11	20 ed 11	                jsr  popreg
.0a14	20 be 11	                jsr  pushreg
.0a17	ad 86 02	                lda  bascol
.0a1a	48		                pha
.0a1b	a9 07		                lda  #color
.0a1d	8d 86 02	                sta  bascol
.0a20	a0 04		                ldy  #left
.0a22	a2 08		                ldx  #top+5
.0a24	18		                clc
.0a25	20 f0 ff	                jsr  plot
.0a28	a2 e8		                ldx  #<eline
.0a2a	a0 0e		                ldy  #>eline
.0a2c	20 5a 10	                jsr  puts
.0a2f	68		                pla
.0a30	8d 86 02	                sta  bascol
.0a33	20 ed 11	                jsr  popreg
.0a36	20 be 11	                jsr  pushreg
.0a39	ad 86 02	                lda  bascol
.0a3c	48		                pha
.0a3d	a9 07		                lda  #color
.0a3f	8d 86 02	                sta  bascol
.0a42	a0 05		                ldy  #left+1
.0a44	a2 08		                ldx  #top+5
.0a46	18		                clc
.0a47	20 f0 ff	                jsr  plot
.0a4a	a2 65		                ldx  #<textc
.0a4c	a0 0d		                ldy  #>textc
.0a4e	20 5a 10	                jsr  puts
.0a51	68		                pla
.0a52	8d 86 02	                sta  bascol
.0a55	20 ed 11	                jsr  popreg
.0a58	20 be 11	                jsr  pushreg
.0a5b	ad 86 02	                lda  bascol
.0a5e	48		                pha
.0a5f	a9 07		                lda  #color
.0a61	8d 86 02	                sta  bascol
.0a64	a0 04		                ldy  #left
.0a66	a2 09		                ldx  #top+6
.0a68	18		                clc
.0a69	20 f0 ff	                jsr  plot
.0a6c	a2 e8		                ldx  #<eline
.0a6e	a0 0e		                ldy  #>eline
.0a70	20 5a 10	                jsr  puts
.0a73	68		                pla
.0a74	8d 86 02	                sta  bascol
.0a77	20 ed 11	                jsr  popreg
.0a7a	20 be 11	                jsr  pushreg
.0a7d	ad 86 02	                lda  bascol
.0a80	48		                pha
.0a81	a9 07		                lda  #color
.0a83	8d 86 02	                sta  bascol
.0a86	a0 05		                ldy  #left+1
.0a88	a2 09		                ldx  #top+6
.0a8a	18		                clc
.0a8b	20 f0 ff	                jsr  plot
.0a8e	a2 84		                ldx  #<textd
.0a90	a0 0d		                ldy  #>textd
.0a92	20 5a 10	                jsr  puts
.0a95	68		                pla
.0a96	8d 86 02	                sta  bascol
.0a99	20 ed 11	                jsr  popreg
.0a9c	20 be 11	                jsr  pushreg
.0a9f	ad 86 02	                lda  bascol
.0aa2	48		                pha
.0aa3	a9 07		                lda  #color
.0aa5	8d 86 02	                sta  bascol
.0aa8	a0 04		                ldy  #left
.0aaa	a2 0a		                ldx  #top+7
.0aac	18		                clc
.0aad	20 f0 ff	                jsr  plot
.0ab0	a2 e8		                ldx  #<eline
.0ab2	a0 0e		                ldy  #>eline
.0ab4	20 5a 10	                jsr  puts
.0ab7	68		                pla
.0ab8	8d 86 02	                sta  bascol
.0abb	20 ed 11	                jsr  popreg
.0abe	20 be 11	                jsr  pushreg
.0ac1	ad 86 02	                lda  bascol
.0ac4	48		                pha
.0ac5	a9 07		                lda  #color
.0ac7	8d 86 02	                sta  bascol
.0aca	a0 04		                ldy  #left
.0acc	a2 0b		                ldx  #top+8
.0ace	18		                clc
.0acf	20 f0 ff	                jsr  plot
.0ad2	a2 e8		                ldx  #<eline
.0ad4	a0 0e		                ldy  #>eline
.0ad6	20 5a 10	                jsr  puts
.0ad9	68		                pla
.0ada	8d 86 02	                sta  bascol
.0add	20 ed 11	                jsr  popreg
.0ae0	20 be 11	                jsr  pushreg
.0ae3	ad 86 02	                lda  bascol
.0ae6	48		                pha
.0ae7	a9 07		                lda  #color
.0ae9	8d 86 02	                sta  bascol
.0aec	a0 05		                ldy  #left+1
.0aee	a2 0b		                ldx  #top+8
.0af0	18		                clc
.0af1	20 f0 ff	                jsr  plot
.0af4	a2 a3		                ldx  #<texte
.0af6	a0 0d		                ldy  #>texte
.0af8	20 5a 10	                jsr  puts
.0afb	68		                pla
.0afc	8d 86 02	                sta  bascol
.0aff	20 ed 11	                jsr  popreg
.0b02	20 be 11	                jsr  pushreg
.0b05	ad 86 02	                lda  bascol
.0b08	48		                pha
.0b09	a9 07		                lda  #color
.0b0b	8d 86 02	                sta  bascol
.0b0e	a0 04		                ldy  #left
.0b10	a2 0c		                ldx  #top+9
.0b12	18		                clc
.0b13	20 f0 ff	                jsr  plot
.0b16	a2 e8		                ldx  #<eline
.0b18	a0 0e		                ldy  #>eline
.0b1a	20 5a 10	                jsr  puts
.0b1d	68		                pla
.0b1e	8d 86 02	                sta  bascol
.0b21	20 ed 11	                jsr  popreg
.0b24	20 be 11	                jsr  pushreg
.0b27	ad 86 02	                lda  bascol
.0b2a	48		                pha
.0b2b	a9 07		                lda  #color
.0b2d	8d 86 02	                sta  bascol
.0b30	a0 05		                ldy  #left+1
.0b32	a2 0c		                ldx  #top+9
.0b34	18		                clc
.0b35	20 f0 ff	                jsr  plot
.0b38	a2 c2		                ldx  #<textf
.0b3a	a0 0d		                ldy  #>textf
.0b3c	20 5a 10	                jsr  puts
.0b3f	68		                pla
.0b40	8d 86 02	                sta  bascol
.0b43	20 ed 11	                jsr  popreg
.0b46	20 be 11	                jsr  pushreg
.0b49	ad 86 02	                lda  bascol
.0b4c	48		                pha
.0b4d	a9 07		                lda  #color
.0b4f	8d 86 02	                sta  bascol
.0b52	a0 04		                ldy  #left
.0b54	a2 0d		                ldx  #top+10
.0b56	18		                clc
.0b57	20 f0 ff	                jsr  plot
.0b5a	a2 e8		                ldx  #<eline
.0b5c	a0 0e		                ldy  #>eline
.0b5e	20 5a 10	                jsr  puts
.0b61	68		                pla
.0b62	8d 86 02	                sta  bascol
.0b65	20 ed 11	                jsr  popreg
.0b68	20 be 11	                jsr  pushreg
.0b6b	ad 86 02	                lda  bascol
.0b6e	48		                pha
.0b6f	a9 07		                lda  #color
.0b71	8d 86 02	                sta  bascol
.0b74	a0 04		                ldy  #left
.0b76	a2 0e		                ldx  #top+11
.0b78	18		                clc
.0b79	20 f0 ff	                jsr  plot
.0b7c	a2 c7		                ldx  #<bline
.0b7e	a0 0e		                ldy  #>bline
.0b80	20 5a 10	                jsr  puts
.0b83	68		                pla
.0b84	8d 86 02	                sta  bascol
.0b87	20 ed 11	                jsr  popreg
.0b8a	20 be 11	                jsr  pushreg
.0b8d	ad 86 02	                lda  bascol
.0b90	48		                pha
.0b91	a9 07		                lda  #color
.0b93	8d 86 02	                sta  bascol
.0b96	a0 04		                ldy  #left
.0b98	a2 10		                ldx  #top+13
.0b9a	18		                clc
.0b9b	20 f0 ff	                jsr  plot
.0b9e	a2 85		                ldx  #<tline
.0ba0	a0 0e		                ldy  #>tline
.0ba2	20 5a 10	                jsr  puts
.0ba5	68		                pla
.0ba6	8d 86 02	                sta  bascol
.0ba9	20 ed 11	                jsr  popreg
.0bac	20 be 11	                jsr  pushreg
.0baf	ad 86 02	                lda  bascol
.0bb2	48		                pha
.0bb3	a9 07		                lda  #color
.0bb5	8d 86 02	                sta  bascol
.0bb8	a0 05		                ldy  #left+1
.0bba	a2 10		                ldx  #top+13
.0bbc	18		                clc
.0bbd	20 f0 ff	                jsr  plot
.0bc0	a2 00		                ldx  #<texth
.0bc2	a0 0e		                ldy  #>texth
.0bc4	20 5a 10	                jsr  puts
.0bc7	68		                pla
.0bc8	8d 86 02	                sta  bascol
.0bcb	20 ed 11	                jsr  popreg
.0bce	20 be 11	                jsr  pushreg
.0bd1	ad 86 02	                lda  bascol
.0bd4	48		                pha
.0bd5	a9 07		                lda  #color
.0bd7	8d 86 02	                sta  bascol
.0bda	a0 04		                ldy  #left
.0bdc	a2 11		                ldx  #top+14
.0bde	18		                clc
.0bdf	20 f0 ff	                jsr  plot
.0be2	a2 e8		                ldx  #<eline
.0be4	a0 0e		                ldy  #>eline
.0be6	20 5a 10	                jsr  puts
.0be9	68		                pla
.0bea	8d 86 02	                sta  bascol
.0bed	20 ed 11	                jsr  popreg
.0bf0	20 be 11	                jsr  pushreg
.0bf3	ad 86 02	                lda  bascol
.0bf6	48		                pha
.0bf7	a9 07		                lda  #color
.0bf9	8d 86 02	                sta  bascol
.0bfc	a0 04		                ldy  #left
.0bfe	a2 12		                ldx  #top+15
.0c00	18		                clc
.0c01	20 f0 ff	                jsr  plot
.0c04	a2 e8		                ldx  #<eline
.0c06	a0 0e		                ldy  #>eline
.0c08	20 5a 10	                jsr  puts
.0c0b	68		                pla
.0c0c	8d 86 02	                sta  bascol
.0c0f	20 ed 11	                jsr  popreg
.0c12	20 be 11	                jsr  pushreg
.0c15	ad 86 02	                lda  bascol
.0c18	48		                pha
.0c19	a9 07		                lda  #color
.0c1b	8d 86 02	                sta  bascol
.0c1e	a0 05		                ldy  #left+1
.0c20	a2 12		                ldx  #top+15
.0c22	18		                clc
.0c23	20 f0 ff	                jsr  plot
.0c26	a2 0f		                ldx  #<texti
.0c28	a0 0e		                ldy  #>texti
.0c2a	20 5a 10	                jsr  puts
.0c2d	68		                pla
.0c2e	8d 86 02	                sta  bascol
.0c31	20 ed 11	                jsr  popreg
.0c34	20 be 11	                jsr  pushreg
.0c37	ad 86 02	                lda  bascol
.0c3a	48		                pha
.0c3b	a9 07		                lda  #color
.0c3d	8d 86 02	                sta  bascol
.0c40	a0 04		                ldy  #left
.0c42	a2 13		                ldx  #top+16
.0c44	18		                clc
.0c45	20 f0 ff	                jsr  plot
.0c48	a2 e8		                ldx  #<eline
.0c4a	a0 0e		                ldy  #>eline
.0c4c	20 5a 10	                jsr  puts
.0c4f	68		                pla
.0c50	8d 86 02	                sta  bascol
.0c53	20 ed 11	                jsr  popreg
.0c56	20 be 11	                jsr  pushreg
.0c59	ad 86 02	                lda  bascol
.0c5c	48		                pha
.0c5d	a9 07		                lda  #color
.0c5f	8d 86 02	                sta  bascol
.0c62	a0 05		                ldy  #left+1
.0c64	a2 13		                ldx  #top+16
.0c66	18		                clc
.0c67	20 f0 ff	                jsr  plot
.0c6a	a2 2e		                ldx  #<textj
.0c6c	a0 0e		                ldy  #>textj
.0c6e	20 5a 10	                jsr  puts
.0c71	68		                pla
.0c72	8d 86 02	                sta  bascol
.0c75	20 ed 11	                jsr  popreg
.0c78	20 be 11	                jsr  pushreg
.0c7b	ad 86 02	                lda  bascol
.0c7e	48		                pha
.0c7f	a9 07		                lda  #color
.0c81	8d 86 02	                sta  bascol
.0c84	a0 04		                ldy  #left
.0c86	a2 14		                ldx  #top+17
.0c88	18		                clc
.0c89	20 f0 ff	                jsr  plot
.0c8c	a2 e8		                ldx  #<eline
.0c8e	a0 0e		                ldy  #>eline
.0c90	20 5a 10	                jsr  puts
.0c93	68		                pla
.0c94	8d 86 02	                sta  bascol
.0c97	20 ed 11	                jsr  popreg
.0c9a	20 be 11	                jsr  pushreg
.0c9d	ad 86 02	                lda  bascol
.0ca0	48		                pha
.0ca1	a9 07		                lda  #color
.0ca3	8d 86 02	                sta  bascol
.0ca6	a0 05		                ldy  #left+1
.0ca8	a2 14		                ldx  #top+17
.0caa	18		                clc
.0cab	20 f0 ff	                jsr  plot
.0cae	a2 4d		                ldx  #<textk
.0cb0	a0 0e		                ldy  #>textk
.0cb2	20 5a 10	                jsr  puts
.0cb5	68		                pla
.0cb6	8d 86 02	                sta  bascol
.0cb9	20 ed 11	                jsr  popreg
.0cbc	20 be 11	                jsr  pushreg
.0cbf	ad 86 02	                lda  bascol
.0cc2	48		                pha
.0cc3	a9 07		                lda  #color
.0cc5	8d 86 02	                sta  bascol
.0cc8	a0 04		                ldy  #left
.0cca	a2 15		                ldx  #top+18
.0ccc	18		                clc
.0ccd	20 f0 ff	                jsr  plot
.0cd0	a2 c7		                ldx  #<bline
.0cd2	a0 0e		                ldy  #>bline
.0cd4	20 5a 10	                jsr  puts
.0cd7	68		                pla
.0cd8	8d 86 02	                sta  bascol
.0cdb	20 ed 11	                jsr  popreg
.0cde	a9 92		                lda #b_rvs_off
.0ce0	20 54 10	                jsr putch
.0ce3	20 be 11	                jsr  pushreg
.0ce6	ad 86 02	                lda  bascol
.0ce9	48		                pha
.0cea	a9 01		                lda  #cblanc
.0cec	8d 86 02	                sta  bascol
.0cef	a0 0f		                ldy  #39-24
.0cf1	a2 18		                ldx  #24
.0cf3	18		                clc
.0cf4	20 f0 ff	                jsr  plot
.0cf7	a2 6c		                ldx  #<textl
.0cf9	a0 0e		                ldy  #>textl
.0cfb	20 5a 10	                jsr  puts
.0cfe	68		                pla
.0cff	8d 86 02	                sta  bascol
.0d02	20 ed 11	                jsr  popreg
.0d05	20 8b 11	                jsr popall
.0d08	60		                rts

;******  Processing file: chaines_fr.asm

=158			headtcol        =   b_jaune
=158			normtcol        =   b_jaune
>0d09	00		nextline        .byte   0
>0d0a	20 20 20 20	line            .null           "                                "
>0d0e	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0d1e	20 20 20 20 20 20 20 20 20 20 20 20 00
>0d2b	92		texta           .byte           b_rvs_off
>0d2c	20 d3 cc 2d	                .text           " SL-BUG 64 Version 4.00 "
>0d30	c2 d5 c7 20 36 34 20 d6 45 52 53 49 4f 4e 20 34
>0d40	2e 30 30 20
>0d44	12 00		                .byte           b_rvs_on,0
>0d46	20 20 20 20	textb           .null           "       Pour Commodore 64      "
>0d4a	20 20 20 d0 4f 55 52 20 c3 4f 4d 4d 4f 44 4f 52
>0d5a	45 20 36 34 20 20 20 20 20 20 00
>0d65	20 20 c9 44	textc           .null           "  Idee Originale sur MC-6809  "
>0d69	45 45 20 cf 52 49 47 49 4e 41 4c 45 20 53 55 52
>0d79	20 cd c3 2d 36 38 30 39 20 20 00
>0d84	20 20 d0 41	textd           .null           "  Par Serge Leblanc mai 1994  "
>0d88	52 20 d3 45 52 47 45 20 cc 45 42 4c 41 4e 43 20
>0d98	4d 41 49 20 31 39 39 34 20 20 00
>0da3	20 d0 4f 52	texte           .null           " Port sur C64 Daniel Lafrance "
>0da7	54 20 53 55 52 20 c3 36 34 20 c4 41 4e 49 45 4c
>0db7	20 cc 41 46 52 41 4e 43 45 20 00
>0dc2	20 20 20 20	textf           .null           "      (c) Septembre 2025      "
>0dc6	20 20 28 43 29 20 d3 45 50 54 45 4d 42 52 45 20
>0dd6	32 30 32 35 20 20 20 20 20 20 00
>0de1	20 20 20 d6	textg           .null   format( "   Version: %-17s ",Version)
>0de5	45 52 53 49 4f 4e 3a 20 32 30 32 35 30 39 32 34
>0df5	2d 30 30 30 30 30 31 20 20 20 00
>0e00	92		texth           .byte           b_rvs_off
>0e01	20 d2 c1 c3	                .text           " RACCOURCIS "
>0e05	c3 cf d5 d2 c3 c9 d3 20
>0e0d	12 00		                .byte           b_rvs_on,0
>0e0f	20 c5 58 45	texti           .null   format( " Execution.: SYS%5d ($%4X) ",slbug64,slbug64)
>0e13	43 55 54 49 4f 4e 2e 3a 20 d3 d9 d3 20 32 32 31
>0e23	32 20 28 24 20 38 c1 34 29 20 00
>0e2e	20 c1 49 44	textj           .null   format( " Aide......: SYS%5d ($%4X) ",help,help)
>0e32	45 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 32 32 34
>0e42	39 20 28 24 20 38 c3 39 29 20 00
>0e4d	20 c3 cc d3	textk           .null   format( " CLS.......: SYS%5d ($%4X) ",cls,cls)
>0e51	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 34 31 35
>0e61	37 20 28 24 31 30 33 c4 29 20 00
>0e6c	d5 4e 45 20	textl           .null           "Une clef pour continuer!"
>0e70	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0e80	55 45 52 21 00
>0e85	b0 c0 c0 c0	tline   .byte   176,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,174,0
>0e89	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>0e99	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ae 00
>0ea6	ab c0 c0 c0	mline   .byte   171,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,179,0
>0eaa	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>0eba	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 b3 00
>0ec7	ad c0 c0 c0	bline   .byte   173,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,189,0
>0ecb	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>0edb	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 bd 00
>0ee8	dd 20 20 20	eline   .byte   221,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,221,0
>0eec	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0efc	20 20 20 20 20 20 20 20 20 20 20 dd 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>0f09	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>0f0d	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black         =   144  ;0,  ctrl-1
=5			b_white         =   5    ;1,  ctrl-2
=28			b_red           =   28   ;2,  ctrl-3
=159			b_cyan          =   159  ;3,  ctrl-4
=156			b_purple        =   156  ;4,  ctrl-5
=30			b_green         =   30   ;5,  ctrl-6
=31			b_blue          =   31   ;6,  ctrl-7
=158			b_yellow        =   158  ;7,  ctrl-8
=129			b_orange        =   129  ;8,  C=-1
=149			b_brown         =   149  ;9,  C=-2
=150			b_ltred         =   150  ;10, C=-3
=155			b_gray3         =   155  ;11, C=-4
=155			b_grey3         =   155  ;11, C=-4
=152			b_gray2         =   152  ;12, C=-5
=152			b_grey2         =   152  ;13, C=-5
=153			b_ltgreen       =   153  ;13, C=-6
=154			b_ltblue        =   154  ;14, C=-7
=151			b_gray1         =   151  ;15, C=-8
=151			b_grey1         =   151  ;15, C=-8
=144			b_noir          =   144  ;0,  ctrl-1
=5			b_blanc         =   5    ;1,  ctrl-2
=28			b_rouge         =   28   ;2,  ctrl-3
=156			b_mauve         =   156  ;4,  ctrl-5
=30			b_vert          =   30   ;5,  ctrl-6
=31			b_bleu          =   31   ;6,  ctrl-7
=158			b_jaune         =   158  ;7,  ctrl-8
=149			b_brun          =   149  ;9,  C=-2
=150			b_rose          =   150  ;10, C=-3
=155			b_gris3         =   155  ;11, C=-4
=152			b_gris2         =   152  ;12, C=-5
=153			b_vert2         =   153  ;13, C=-6
=154			b_blue2         =   154  ;14, C=-7
=151			b_gris1         =   151  ;15, C=-8
=151			b_gris          =   151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.0f11			screendis
.0f11	08		               php
.0f12	48		               pha
.0f13	ad 11 d0	               lda  $d011
.0f16	29 ef		               and  #%11101111
.0f18	8d 11 d0	               sta  $d011
.0f1b	68		               pla
.0f1c	28		               plp
.0f1d	60		               rts
.0f1e			screenena
.0f1e	08		               php
.0f1f	48		               pha
.0f20	ad 11 d0	               lda  $d011
.0f23	09 10		               ora  #%00010000
.0f25	8d 11 d0	               sta  $d011
.0f28	68		               pla
.0f29	28		               plp
.0f2a	60		               rts
=8192			bmpram = 8192
.0f2b			victohighres
.0f2b	08		               php
.0f2c	48		               pha
.0f2d	ad 11 d0	               lda  vicmiscfnc
.0f30	09 20		               ora  #%00100000     ; 32
.0f32	8d 11 d0	               sta  vicmiscfnc
.0f35	ad 18 d0	               lda  vicmemptr
.0f38	09 08		               ora  #%00001000     ; $08
.0f3a	8d 18 d0	               sta  vicmemptr
.0f3d	a9 ff		               lda  #$ff           ; 255
.0f3f	85 37		               sta  $0037
.0f41	a9 1f		               lda  #$1f           ; 31
.0f43	85 38		               sta  $0038
.0f45	68		               pla
.0f46	28		               plp
.0f47	60		               rts
.0f48			victonormal
.0f48	08		               php
.0f49	48		               pha
.0f4a	ad 11 d0	               lda  vicmiscfnc
.0f4d	29 df		               and  #%11011111     ; 233
.0f4f	8d 11 d0	               sta  vicmiscfnc
.0f52	ad 18 d0	               lda  vicmemptr
.0f55	29 f7		               and  #%11110111     ; $08
.0f57	8d 18 d0	               sta  vicmemptr
.0f5a	a9 00		               lda  #$00
.0f5c	85 37		               sta  $0037
.0f5e	a9 a0		               lda  #$a0
.0f60	85 38		               sta  $0038
.0f62	20 3d 10	               jsr  cls
.0f65	68		               pla
.0f66	28		               plp
.0f67	60		               rts
.0f68			vicbmpclear
.0f68	20 50 11	               jsr  push
.0f6b	a9 04		               lda  #cmauve
.0f6d	20 96 0f	               jsr  setvicbmpbackcol
.0f70	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.0f72	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.0f74	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.0f76	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.0f78	48		               pha
.0f79	a9 ff		               lda  #<$0000+(8191)
.0f7b	8d 74 13	               sta  loopcount
.0f7e	a9 1f		               lda  #>$0000+(8191)
.0f80	8d 75 13	               sta  loopcount+1
.0f83	68		               pla
.0f84	a0 00		               ldy  #$00
.0f86	a9 0f		next           lda  #$0f
.0f88	91 fb		               sta  (zpage1),y
.0f8a	20 a5 12	               jsr  inczpage1
.0f8d	20 54 13	               jsr  loop
.0f90	d0 f4		               bne  next
.0f92	20 8b 11	               jsr  pop
.0f95	60		               rts
.0f96			setvicbmpbackcol
.0f96	20 50 11	               jsr  push
.0f99	29 0f		               and  #$0f
.0f9b	8d c9 0f	               sta  vicbmpbackcol
.0f9e	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.0fa0	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.0fa2	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.0fa4	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.0fa6	48		               pha
.0fa7	a9 00		               lda  #<$0000+(1024)
.0fa9	8d 74 13	               sta  loopcount
.0fac	a9 04		               lda  #>$0000+(1024)
.0fae	8d 75 13	               sta  loopcount+1
.0fb1	68		               pla
.0fb2	a0 00		               ldy  #$00
.0fb4	b1 fb		next           lda  (zpage1),y
.0fb6	29 f0		               and  #$f0
.0fb8	0d c9 0f	               ora  vicbmpbackcol
.0fbb	91 fb		               sta  (zpage1),y
.0fbd	20 a5 12	               jsr  inczpage1
.0fc0	20 54 13	               jsr  loop
.0fc3	d0 ef		               bne  next
.0fc5	20 8b 11	               jsr  pop
.0fc8	60		               rts
>0fc9	00		vicbmpbackcol  .byte     $00
.0fca			setvicbmpforecol
.0fca	20 50 11	               jsr  push
.0fcd	2a		               rol
.0fce	2a		               rol
.0fcf	2a		               rol
.0fd0	2a		               rol
.0fd1	29 f0		               and  #$f0
.0fd3	8d 01 10	               sta  vicbmpforecol
.0fd6	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.0fd8	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.0fda	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.0fdc	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.0fde	48		               pha
.0fdf	a9 00		               lda  #<$0000+(1024)
.0fe1	8d 74 13	               sta  loopcount
.0fe4	a9 04		               lda  #>$0000+(1024)
.0fe6	8d 75 13	               sta  loopcount+1
.0fe9	68		               pla
.0fea	a0 00		               ldy  #$00
.0fec	b1 fb		next           lda  (zpage1),y
.0fee	29 0f		               and  #$0f
.0ff0	0d 01 10	               ora  vicbmpforecol
.0ff3	91 fb		               sta  (zpage1),y
.0ff5	20 a5 12	               jsr  inczpage1
.0ff8	20 54 13	               jsr  loop
.0ffb	d0 ef		               bne  next
.0ffd	20 8b 11	               jsr  pop
.1000	60		               rts
>1001	00		vicbmpforecol  .byte     $00
.1002			bmphrcalccoords
.1002	20 50 11	               jsr  push
.1005	18		               clc       ; On met Carry à 0
.1006	6a		               ror       ; le bit 0 de a dans carry  ?/2
.1007	8a		               txa       ; x dans a
.1008	4a		               lsr       ; ?/4
.1009	4a		               lsr       ; ?/8 a = (ax)/8
.100a	8d 1b 10	               sta  bmphrcol
.100d	98		               tya       ; Y dans a
.100e	4a		               lsr       ; ?/2
.100f	4a		               lsr       ; ?/4
.1010	4a		               lsr       ; ?/8 a=Y/8
.1011	8d 1a 10	               sta  bmphrrow
.1014	48		               pha
.1015	98		               tya
.1016	20 8b 11	               jsr  pop
.1019	60		               rts
.101a			vicbmpfill
>101a	00		bmphrrow       .byte     $00
>101b	00		bmphrcol       .byte     $00
>101c	00		bmphrmask      .byte     $00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.101d			scrmaninit
.101d	20 be 11	               jsr  pushreg        ; Sauvegarde tous les registres
.1020	20 11 0f	               jsr  screendis      ; Disable screen
.1023	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.1025	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.1028	a9 05		               lda  #vvert         ; vert pour la couleur
.102a	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.102d	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.102f	8d 86 02	               sta  bascol         ; texte.
.1032	20 3d 10	               jsr  cls            ; Efface l'écran.
.1035	20 1e 0f	               jsr  screenena      ; enable screen
.1038	20 ed 11	               jsr  popreg         ; Récupère tous les registres.
.103b	60		               rts
>103c	8e		characterset   .byte b_uppercase
.103d			cls
.103d	08		               php                 ; Sauvegarde les registres
.103e	48		               pha                 ;   modifiés.
.103f	a9 93		               lda  #$93           ; Affiche le code basic de
.1041	20 54 10	               jsr  putch          ;   d'effacement d'écran.
.1044	68		               pla                 ; Récupère les registres
.1045	28		               plp                 ;   modifiés.
.1046	60		               rts
.1047			putnch
.1047	20 be 11	               jsr  pushreg        ; Sauvegarde tous les registres.
.104a	20 d2 ff	again          jsr  $ffd2          ; On affiche A.
.104d	ca		               dex                 ; Un de moins à faire.
.104e	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.1050	20 ed 11	out            jsr  popreg         ; Récupère tous les registres.
.1053	60		               rts
.1054			putch
.1054	08		               php                 ; Sauvegarde le registre de status.
.1055	20 d2 ff	               jsr  $ffd2          ; Affiche le caractère de Acc.
.1058	28		               plp                 ; Récupère le registre de status.
.1059	60		               rts
.105a			puts
.105a	20 50 11	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.105d	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.105f	84 fc		               sty  zpage1+1       ;   dans ZP1.
.1061	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.1063	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.1065	f0 09		               beq  exit           ; Si $00 on sort.
.1067	20 54 10	               jsr  putch          ; Affiche le caractères.
.106a	20 a5 12	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.106d	4c 63 10	               jmp  next           ; Saute chercher le prochain carac.
.1070	20 8b 11	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.1073	60		               rts
.1074			gotoxy
.1074	08		               php                 ; Sauvegarde le registre de
.1075	48		               pha                 ;   status et le registre a.
.1076	18		               clc                 ; Carry = 1 pour que kplot
.1077	8a		               txa                 ;   positionne le curseur.
.1078	48		               pha                 ; On inverse X et Y pcq kplot
.1079	98		               tya                 ;
.107a	aa		               tax                 ;   prend X comme la ligne
.107b	68		               pla                 ;
.107c	a8		               tay                 ;   et Y comme la colonne.
.107d	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.1080	68		               pla                 ; Récupère le registre a et
.1081	28		               plp                 ;   le registre de status.
.1082	60		               rts
.1083			cursor
=$0286			bascol    =    $0286               ; debugme
.1083	20 be 11	               jsr  pushreg        ; Sauvegarde tous les registres.
.1086	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.1088	20 f0 ff	               jsr  kplot          ; On récupère la position du
.108b	8c ad 10	               sty  cx             ;   curseur et on la sauvegarde
.108e	8e ae 10	               stx  cy             ;   dans les vars locales.
.1091	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.1094	8d af 10	               sta  bcol           ; BASIC du texte.
.1097	4c a9 10	               jmp  out            ; c'est fini on sort.
.109a	ae ae 10	restore        ldx  cy             ; Comme C=1, On charge x avec
.109d	ac ad 10	               ldy  cx             ;   la ligne, y ace  la col.
.10a0	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.10a3	ad af 10	               lda  bcol           ; On replace la couleur par basic
.10a6	8d 86 02	               sta  bascol         ;   sauvegardé.
.10a9	20 ed 11	out            jsr  popreg         ; Récupère tous les registres.
.10ac	60		               rts
>10ad	00		cx   .byte     $00
>10ae	00		cy   .byte     $00
>10af	00		bcol .byte     $00
.10b0			cursave
.10b0	08		               php
.10b1	38		               sec
.10b2	20 83 10	               jsr  cursor         ; Voir cette fonction plus haut.
.10b5	28		               plp
.10b6	60		               rts
.10b7			curput
.10b7	08		               php
.10b8	18		               clc
.10b9	20 83 10	               jsr  cursor         ; Voir cette fonction plus haut.
.10bc	28		               plp
.10bd	60		               rts
.10be			putsxy
.10be	20 50 11	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.10c1	86 fb		               stx  zpage1         ; On place la position de la
.10c3	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.10c5	a0 00		               ldy  #$00           ; On charge l'index à 0.
.10c7	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.10c9	aa		               tax                 ;   dans X.
.10ca	20 a5 12	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.10cd	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.10cf	a8		               tay                 ; dans Y.
.10d0	20 74 10	               jsr  gotoxy         ; on positionne le curseur.
.10d3	20 a5 12	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.10d6	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.10d8	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.10da	20 5a 10	               jsr  puts           ;   l'affiche.
.10dd	20 8b 11	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.10e0	60		               rts
>10e1	00 00		straddr   .word     $00
>10e3	00		px        .byte     $00
>10e4	00		py        .byte     $00
>10e5	00 00		zp1       .word     $00
.10e7			putscxy
.10e7	20 50 11	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.10ea	86 fb		               stx  zpage1         ; On place la position de la
.10ec	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.10ee	a0 00		               ldy  #$00           ; On charge l'index à 0.
.10f0	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.10f3	48		               pha                 ;   actuelle de basic.
.10f4	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.10f6	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.10f9	20 a5 12	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.10fc	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.10fe	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.1100	20 be 10	               jsr  putsxy         ;   l'affiche.
.1103	68		               pla                 ; On replace la couleur basic
.1104	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.1107	20 8b 11	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.110a	60		               rts
.110b			putrahex
.110b	20 be 11	               jsr  pushreg        ; Sauvegarde tous les registres.
.110e	20 de 13	               jsr  atohex         ; Conversion de a chaîne hexa.
.1111	a2 7b		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.1113	a0 13		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.1115	20 5a 10	               jsr  puts           ; Affiche la chaîne.
.1118	20 ed 11	               jsr  popreg         ; Récupère tous les registres.
.111b	60		               rts
.111c			kputrahexxy
.111c			bputrahexxy
.111c			putrahexxy
.111c	08		               php                 ; Sauvegarde le registre de
.111d	48		               pha                 ;   status et le registre a.
.111e	20 de 13	               jsr  atohex         ; Convertion de a en hexadécimal.
.1121	a2 78		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.1123	a0 13		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.1125	20 be 10	               jsr  putsxy         ; Positionne et affiche la chaîne.
.1128	68		               pla                 ; Récupère le registre a et
.1129	28		               plp                 ;   le registre de status.
.112a	60		               rts
.112b			putrahexcxy
.112b	20 be 11	               jsr  pushreg        ; Sauvegarde tous les registres.
.112e	20 de 13	               jsr  atohex         ; Convertion de a en hexadécimal.
.1131	a2 78		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.1133	a0 13		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.1135	20 be 10	               jsr  putsxy         ; Colore, positionne et affiche la
.1138	20 ed 11	               jsr  popreg         ; Récupère tous les registres.
.113b	60		               rts
.113c			setinverse
.113c	48		               pha
.113d	a9 12		               lda  #$12
.113f	20 d2 ff	               jsr  $ffd2
.1142	68		               pla
.1143	60		               rts
.1144			clrinverse
.1144	48		               pha
.1145	a9 92		               lda  #$92
.1147	20 d2 ff	               jsr  $ffd2
.114a	68		               pla
.114b	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>114c	00		rp        .byte     0
>114d	00		ra        .byte     0
>114e	00 00		pc        .word     0
.1150			pushall
.1150			push
.1150	08		          php            ; stack : flg, pcl, pch
.1151	78		          sei
.1152	8d 4d 11	          sta  ra        ; save a
.1155	68		          pla            ; stack : pcl, pch
.1156	8d 4c 11	          sta  rp        ; save rp
.1159	68		          pla            ; stack : pch
.115a	8d 4e 11	          sta  pc        ; save pcl
.115d	68		          pla            ; stack : -
.115e	8d 4f 11	          sta  pc+1      ; save pch
.1161	a5 fb		          lda  zpage1    ; get zpage1 low byte
.1163	48		          pha            ; stack : zp1l
.1164	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.1166	48		          pha            ; stack : zp1h, zp1l
.1167	a5 fd		          lda  zpage2    ; get zpage2 low byte
.1169	48		          pha            ; stack : zp2l, zp1h, zp1l
.116a	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.116c	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.116d	ad 4c 11	          lda  rp        ; get rp
.1170	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.1171	ad 4d 11	          lda  ra        ; get a
.1174	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1175	8a		          txa            ; get x
.1176	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1177	98		          tya            ; get y
.1178	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1179	ad 4f 11	          lda  pc+1      ; get pch
.117c	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.117d	ad 4e 11	          lda  pc        ; get pcl
.1180	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1181	ad 4c 11	          lda  rp        ; get rp
.1184	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1185	ad 4d 11	          lda  ra        ; get a
.1188	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1189	58		          cli
.118a	60		          rts
.118b			pullall
.118b			pull
.118b			popall
.118b			pop
.118b	78		          sei
.118c	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.118d	8d 4e 11	          sta  pc        ; save pcl
.1190	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1191	8d 4f 11	          sta  pc+1      ; save pch
.1194	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1195	a8		          tay            ; set y
.1196	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1197	aa		          tax            ; set x
.1198	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1199	8d 4d 11	          sta  ra        ; save a
.119c	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.119d	8d 4c 11	          sta  rp        ; save rp
.11a0	68		          pla            ; stack : zp2l, zp1h, zp1l
.11a1	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.11a3	68		          pla            ; stack : zp1h, zp1l
.11a4	85 fd		          sta  zpage2    ; get zpage2 High byte
.11a6	68		          pla            ; stack : zp1l
.11a7	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.11a9	68		          pla            ; stack :
.11aa	85 fb		          sta  zpage1    ; get zpage1 High byte
.11ac	ad 4f 11	          lda  pc+1      ; get pch
.11af	48		          pha            ; stack : pch
.11b0	ad 4e 11	          lda  pc
.11b3	48		          pha            ; stack : pcl, pch
.11b4	ad 4c 11	          lda  rp        ; get rp
.11b7	48		          pha            ; stack : rp, pcl, pch
.11b8	ad 4d 11	          lda  ra        ; set ra
.11bb	58		          cli
.11bc	28		          plp            ; stack : pcl, pch
.11bd	60		          rts
.11be			pushreg
.11be	08		          php            ; stack : flg, pcl, pch
.11bf	78		          sei
.11c0	8d 4d 11	          sta  ra        ; save a
.11c3	68		          pla            ; stack : pcl, pch
.11c4	8d 4c 11	          sta  rp        ; save rp
.11c7	68		          pla            ; stack : pch
.11c8	8d 4e 11	          sta  pc        ; save pcl
.11cb	68		          pla            ; stack : -
.11cc	8d 4f 11	          sta  pc+1      ; save pch
.11cf	ad 4c 11	          lda  rp        ; get rp
.11d2	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.11d3	ad 4d 11	          lda  ra        ; get a
.11d6	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.11d7	8a		          txa            ; get x
.11d8	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.11d9	98		          tya            ; get y
.11da	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.11db	ad 4f 11	          lda  pc+1      ; get pch
.11de	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.11df	ad 4e 11	          lda  pc        ; get pcl
.11e2	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.11e3	ad 4c 11	          lda  rp        ; get rp
.11e6	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.11e7	ad 4d 11	          lda  ra        ; get a
.11ea	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.11eb	58		          cli
.11ec	60		          rts
.11ed			pullreg
.11ed			popreg
.11ed	78		          sei
.11ee	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.11ef	8d 4e 11	          sta  pc        ; save pcl
.11f2	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.11f3	8d 4f 11	          sta  pc+1      ; save pch
.11f6	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.11f7	a8		          tay            ; set y
.11f8	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.11f9	aa		          tax            ; set x
.11fa	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.11fb	8d 4d 11	          sta  ra        ; save a
.11fe	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.11ff	8d 4c 11	          sta  rp        ; save rp
.1202	ad 4f 11	          lda  pc+1      ; get pch
.1205	48		          pha            ; stack : pch
.1206	ad 4e 11	          lda  pc
.1209	48		          pha            ; stack : pcl, pch
.120a	ad 4c 11	          lda  rp        ; get rp
.120d	48		          pha            ; stack : rp, pcl, pch
.120e	ad 4d 11	          lda  ra        ; set ra
.1211	58		          cli
.1212	28		          plp            ; stack : pcl, pch
.1213	60		          rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.1214			blkfill
.1214	20 50 11	bf0            jsr  push
.1217	20 df 12	               jsr  savezp1
.121a	84 fc		               sty  zpage1+1
.121c	a0 00		               ldy  #$00
.121e	84 fb		               sty  zpage1
.1220	91 fb		bf1            sta  (zpage1),y
.1222	c8		               iny
.1223	d0 fb		               bne  bf1
.1225	20 ee 12	               jsr  restzp1
.1228	20 8b 11	               jsr  pop
.122b	60		               rts
.122c			memfill
.122c	20 50 11	               jsr  push
.122f	20 14 12	mf1            jsr  blkfill
.1232	c8		               iny
.1233	ca		               dex
.1234	d0 f9		               bne  mf1
.1236	20 8b 11	               jsr  pop
.1239	60		               rts
.123a			memmove
.123a	20 50 11	               jsr  push
.123d	ba		               tsx            ; On se crée un pointeur ...
.123e	8a		               txa
.123f	18		               clc
.1240	69 0b		               adc  #11
.1242	a8		               tay
.1243	a2 06		               ldx  #$06
.1245	b9 00 01	nextbyte       lda  $0100,y
.1248	99 94 12	               sta  words,y
.124b	c8		               iny
.124c	ca		               dex
.124d	d0 f6		               bne  nextbyte
.124f	ad 94 12	               lda  s
.1252	8d 6b 12	               sta  source+1
.1255	ad 95 12	               lda  s+1
.1258	8d 6c 12	               sta  source+2
.125b	ad 96 12	               lda  d
.125e	8d 68 12	               sta  destin+1
.1261	ad 97 12	               lda  d+1
.1264	8d 69 12	               sta  destin+2
.1267	ad ff ff	destin         lda  $ffff
.126a	8d ff ff	source         sta  $ffff
.126d	ee 68 12	               inc  destin+1
.1270	d0 03		               bne  src
.1272	ee 69 12	               inc  destin+2
.1275	ee 6b 12	src            inc  source+1
.1278	d0 03		               bne  cnt
.127a	ee 6c 12	               inc  source+2
.127d	ad 98 12	cnt            lda  compte
.1280	d0 08		               bne  decit
.1282	ad 99 12	               lda  compte+1
.1285	f0 09		               beq  fini
.1287	ce 99 12	               dec  compte+1
.128a	ce 98 12	decit          dec  compte
.128d	4c 67 12	               jmp  destin
.1290	20 8b 11	fini           jsr  pop
.1293	60		               rts
.1294			words
>1294	00 00		s         .word     $0000
>1296	00 00		d         .word     $0000
>1298	00 00		compte    .word     $0000
.129a			decword
.129a	20 50 11	               jsr  push
.129d	86 fd		               stx  zpage2
.129f	84 fe		               sty  zpage2+1
.12a1	20 8b 11	               jsr  pop
.12a4	60		               rts
.12a5			inczpage1
.12a5			inczp1
.12a5	08		               php
.12a6	48		               pha
.12a7	e6 fb		               inc  zpage1
.12a9	a5 fb		               lda  zpage1
.12ab	d0 02		               bne  nopage
.12ad	e6 fc		               inc  zpage1+1
.12af	68		nopage         pla
.12b0	28		               plp
.12b1	60		               rts
.12b2			deczpage1
.12b2			deczp1
.12b2	08		               php
.12b3	48		               pha
.12b4	c6 fb		               dec  zpage1
.12b6	a5 fb		               lda  zpage1
.12b8	c9 ff		               cmp  #$ff
.12ba	f0 02		               beq  report
.12bc	d0 02		               bne  nopage
.12be	c6 fc		report         dec  zpage1+1
.12c0	68		nopage         pla
.12c1	28		               plp
.12c2	60		               rts
.12c3			inczpage2
.12c3			inczp2
.12c3	08		               php
.12c4	48		               pha
.12c5	e6 fd		               inc  zpage2
.12c7	a5 fd		               lda  zpage2
.12c9	d0 02		               bne  nopage
.12cb	e6 fe		               inc  zpage2+1
.12cd	68		nopage         pla
.12ce	28		               plp
.12cf	60		               rts
.12d0			deczpage2
.12d0			deczp2
.12d0	08		               php
.12d1	c6 fd		               dec  zpage2
.12d3	a5 fd		               lda  zpage2
.12d5	c9 ff		               cmp  #$ff
.12d7	f0 02		               beq  report
.12d9	d0 02		               bne  nopage
.12db	c6 fe		report         dec  zpage2+1
.12dd	28		nopage         plp
.12de	60		               rts
.12df			savezp1
.12df	08		               php
.12e0	48		               pha
.12e1	a5 fb		               lda  zpage1
.12e3	8d 70 13	               sta  zp1
.12e6	a5 fc		               lda  zpage1+1
.12e8	8d 71 13	               sta  zp1+1
.12eb	68		               pla
.12ec	28		               plp
.12ed	60		               rts
.12ee			restzp1
.12ee	08		               php
.12ef	48		               pha
.12f0	ad 70 13	               lda  zp1
.12f3	85 fb		               sta  zpage1
.12f5	ad 71 13	               lda  zp1+1
.12f8	85 fc		               sta  zpage1+1
.12fa	68		               pla
.12fb	28		               plp
.12fc	60		               rts
.12fd			savezp2
.12fd	08		               php
.12fe	48		               pha
.12ff	a5 fd		               lda  zpage2
.1301	8d 72 13	               sta  zp2
.1304	a5 fe		               lda  zpage2+1
.1306	8d 73 13	               sta  zp2+1
.1309	68		               pla
.130a	28		               plp
.130b	60		               rts
.130c			restzp2
.130c	08		               php
.130d	48		               pha
.130e	ad 72 13	               lda  zp2
.1311	85 fd		               sta  zpage2
.1313	ad 73 13	               lda  zp2+1
.1316	85 fe		               sta  zpage2+1
.1318	68		               pla
.1319	28		               plp
.131a	60		               rts
.131b			xy2addr
.131b	08		               php
.131c	48		               pha
.131d	8a		               txa
.131e	48		               pha
.131f	98		               tya
.1320	48		               pha
.1321	ad 6b 13	               lda  addr1+1
.1324	8d 6d 13	               sta  addr2+1
.1327	ad 6a 13	               lda  addr1
.132a	8d 6c 13	               sta  addr2
.132d	c0 00		               cpy  #$00
.132f	f0 0f		               beq  addx
.1331	18		moreline       clc
.1332	6d 69 13	               adc  ymult
.1335	90 03		               bcc  norepy
.1337	ee 6d 13	               inc  addr2+1
.133a	8d 6c 13	norepy         sta  addr2
.133d	88		               dey
.133e	d0 f1		               bne  moreline
.1340	8a		addx           txa
.1341	18		               clc
.1342	6d 6c 13	               adc  addr2
.1345	90 03		               bcc  thatsit
.1347	ee 6d 13	               inc  addr2+1
.134a	8d 6c 13	thatsit        sta  addr2
.134d	68		               pla
.134e	a8		               tay
.134f	68		               pla
.1350	aa		               tax
.1351	68		               pla
.1352	28		               plp
.1353	60		               rts
.1354			loop
.1354	ce 74 13	               dec  loopcount
.1357	d0 03		               bne  norep
.1359	ce 75 13	               dec  loopcount+1
.135c	ad 74 13	norep          lda  loopcount
.135f	c9 00		               cmp  #$00
.1361	d0 05		               bne  out
.1363	4d 75 13	               eor  loopcount+1
.1366	c9 ff		               cmp  #$ff
.1368	60		out            rts
>1369	28		ymult          .byte     40
>136a	00 00		addr1          .word     $0000
>136c	00 00		addr2          .word     $0000
>136e	00 00		bytecnt        .word     $0000
>1370	00 00		zp1            .word     $0000
>1372	00 00		zp2            .word     $0000
>1374	00 00		loopcount      .word     $0000

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>1376	01		a2hexcol       .byte     1              ; pour aputscxy
>1377	00		a2hexbkcol     .byte     %00000000
.1378			a2hexpos
>1378	00		a2hexpx        .byte     0              ; pour aputsxy
>1379	00		a2hexpy        .byte     0
>137a	24		a2hexprefix    .byte     "$"            ; pour aputs
>137b	00 00		a2hexstr       .word     $00
>137d	00 00		               .word     $00
>137f	00		               .byte     0              ; 0 end string
>1380	01		abincol        .byte     1
>1381	00		abinbkcol      .byte     %00000000
>1382	30 30 30 30	abin           .null     "00000000"
>1386	30 30 30 30 00
>138b	20 20 20 00	adec           .null     "   "
.138f			putahexfmtxy
.138f	20 50 11	               jsr  push
.1392	20 de 13	               jsr  atohex
.1395	ae 78 13	               ldx  a2hexpx
.1398	ac 79 13	               ldy  a2hexpy
.139b	20 74 10	               jsr  gotoxy
.139e	a2 7a		               ldx  #<a2hexprefix
.13a0	a0 13		               ldy  #>a2hexprefix
.13a2	20 5a 10	               jsr  puts
.13a5	20 8b 11	               jsr  pop
.13a8	60		               rts
.13a9			putahexfmt
.13a9	20 50 11	               jsr  push
.13ac	20 de 13	               jsr  atohex
.13af	a2 7a		               ldx  #<a2hexprefix
.13b1	a0 13		               ldy  #>a2hexprefix
.13b3	20 5a 10	               jsr  puts
.13b6	20 8b 11	               jsr  pop
.13b9	60		               rts
.13ba			putahex
.13ba	20 50 11	               jsr  push
.13bd	20 de 13	               jsr  atohex
.13c0	a2 7b		               ldx  #<a2hexstr
.13c2	a0 13		               ldy  #>a2hexstr
.13c4	20 5a 10	               jsr  puts
.13c7	20 8b 11	               jsr  pop
.13ca	60		               rts
.13cb			nibtohex
.13cb	08		               php
.13cc	29 0f		               and  #$0f
.13ce	f8		               sed
.13cf	18		               clc
.13d0	69 90		               adc  #$90
.13d2	69 40		               adc  #$40
.13d4	d8		               cld
.13d5	28		               plp
.13d6	60		               rts
.13d7			lsra4bits
.13d7	08		               php
.13d8	4a		               lsr
.13d9	4a		               lsr
.13da	4a		               lsr
.13db	4a		               lsr
.13dc	28		               plp
.13dd	60		               rts
.13de			atohex
.13de	08		               php
.13df	48		               pha
.13e0	48		               pha
.13e1	20 d7 13	               jsr  lsra4bits
.13e4	20 cb 13	               jsr  nibtohex
.13e7	8d 7b 13	               sta  a2hexstr
.13ea	68		               pla
.13eb	20 cb 13	               jsr  nibtohex
.13ee	8d 7c 13	               sta  a2hexstr+1
.13f1	a9 00		               lda  #$00                ; set end of string
.13f3	8d 7d 13	               sta  a2hexstr+2
.13f6	68		               pla
.13f7	28		               plp
.13f8	60		               rts
.13f9			xy2hex
.13f9	20 50 11	               jsr  push
.13fc	20 de 13	               jsr  atohex
.13ff	8a		               txa
.1400	48		               pha
.1401	20 d7 13	               jsr  lsra4bits
.1404	20 cb 13	               jsr  nibtohex
.1407	8d 7b 13	               sta  a2hexstr
.140a	68		               pla
.140b	20 cb 13	               jsr  nibtohex
.140e	8d 7c 13	               sta  a2hexstr+1
.1411	98		               tya
.1412	48		               pha
.1413	20 d7 13	               jsr  lsra4bits
.1416	20 cb 13	               jsr  nibtohex
.1419	8d 7d 13	               sta  a2hexstr+2
.141c	68		               pla
.141d	20 cb 13	               jsr  nibtohex
.1420	8d 7e 13	               sta  a2hexstr+3
.1423	a9 00		               lda  #$00                ; 0 ended string
.1425	8d 7f 13	               sta  a2hexstr+4
.1428	20 8b 11	               jsr  pop
.142b			atobin
.142b	20 50 11	               jsr  push
.142e	a2 08		               ldx  #8
.1430	a0 00		               ldy  #0
.1432	18		               clc
.1433	2a		nextbit        rol
.1434	48		               pha
.1435	69 00		               adc  #$00
.1437	29 01		               and  #$01
.1439	20 cb 13	               jsr  nibtohex
.143c	99 82 13	               sta  abin,y
.143f	68		               pla
.1440	c8		               iny
.1441	ca		               dex
.1442	d0 ef		               bne  nextbit
.1444	a9 00		               lda  #0
.1446	99 82 13	               sta  abin,y
.1449	20 8b 11	               jsr  pull
.144c	60		               rts
.144d			abinsetmccol
.144d	20 be 11	               jsr  pushreg
.1450	20 ed 11	               jsr  popreg
.1453	60		               rts
.1454			putabin
.1454	20 2b 14	               jsr     atobin
.1457	20 50 11	               jsr     push
.145a	a2 82		               ldx     #<abin
.145c	a0 13		               ldy     #>abin
.145e	20 5a 10	               jsr     puts
.1461	20 8b 11	               jsr     pop
.1464	60		               rts
.1465			printabin
.1465	20 50 11	               jsr     push
.1468	a2 82		               ldx     #<abin
.146a	a0 13		               ldy     #>abin
.146c	20 5a 10	               jsr     puts
.146f	20 8b 11	               jsr     pop
.1472	60		               rts
.1473			putabinfmt
.1473	08		               php
.1474	48		               pha
.1475	a9 25		               lda     #"%"
.1477	20 54 10	               jsr     putch
.147a	68		               pla
.147b	20 54 14	               jsr     putabin
.147e	28		               plp
.147f	60		               rts
.1480			putabinxy
.1480	20 74 10	               jsr     gotoxy
.1483	20 54 14	               jsr     putabin
.1486	60		               rts
.1487			putabinfmtxy
.1487	20 74 10	               jsr     gotoxy
.148a	20 73 14	               jsr     putabinfmt
.148d	60		               rts
.148e			atodec
.148e	20 50 11	               jsr  push
.1491	f8		               sed            ; On se place en mode décimal.
.1492	aa		               tax            ; On déplace a dans x.
.1493	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.1495	a9 00		               lda  #$00      ; 0 dans A.
.1497	18		nextbit        clc            ; Bit carry a 0.
.1498	69 01		               adc  #$01      ; Ajoute 1 a A.
.149a	90 01		               bcc  decx      ; Pas de carry, pas de report.
.149c	c8		               iny            ; On incrémente Y
.149d	ca		decx           dex            ; X=X-1
.149e	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.14a0	48		               pha            ; A sur le stack.
.14a1	98		               tya            ; Y dans A (MSB)
.14a2	20 cb 13	               jsr  nibtohex  ; a hex petsci ...
.14a5	8d 8b 13	               sta  adec      ; ... dans tampon.
.14a8	68		               pla            ; Récupere A
.14a9	48		               pha            ;
.14aa	20 cb 13	               jsr  nibtohex
.14ad	8d 8d 13	               sta  adec+2
.14b0	68		               pla
.14b1	6a		               ror
.14b2	6a		               ror
.14b3	6a		               ror
.14b4	6a		               ror
.14b5	20 cb 13	               jsr  nibtohex
.14b8	8d 8c 13	               sta  adec+1
.14bb	d8		               cld            ; On revient en mode binaire.
.14bc	20 8b 11	               jsr  pull
.14bf	60		               rts
.14c0			putadec
.14c0	20 50 11	               jsr  push
.14c3	20 8e 14	               jsr  atodec
.14c6	a2 8b		               ldx  #<adec
.14c8	a0 13		               ldy  #>adec+1
.14ca	20 5a 10	               jsr  puts
.14cd	20 8b 11	               jsr  pop
.14d0	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.14d1			waitstop
.14d1	20 50 11	               jsr  push
.14d4	20 ed f6	wait           jsr  k_stop
.14d7	d0 fb		               bne  wait
.14d9	20 8b 11	               jsr  pop
.14dc	60		               rts
.14dd			anykey
.14dd	08		               php
.14de	48		               pha
.14df	a5 cb		nokey          lda 203
.14e1	c9 40		               cmp #64
.14e3	f0 fa		               beq nokey
.14e5	20 ef 14	               jsr releasekey
.14e8	a9 00		               lda #0
.14ea	85 c6		               sta 198
.14ec	68		               pla
.14ed	28		               plp
.14ee	60		               rts
.14ef			releasekey
.14ef	08		               php
.14f0	48		               pha
.14f1	a5 cb		keypressed     lda 203
.14f3	c9 40		               cmp #64
.14f5	d0 fa		               bne keypressed
.14f7	68		               pla
.14f8	28		               plp
.14f9	60		               rts
.14fa			getkey
.14fa	20 e4 ff	gkagain        jsr  getin
.14fd	c9 00		               cmp  #0
.14ff	f0 f9		               beq  gkagain
.1501	60		               rts
.1502			kbflushbuff
.1502	08		               php
.1503	48		               pha
.1504	20 e4 ff	again          jsr  getin
.1507	c9 00		               cmp  #0
.1509	d0 f9		               bne  again
.150b	68		               pla
.150c	28		               plp
.150d	60		               rts
.150e			waitkey
.150e	20 50 11	               jsr  push
.1511	8d 5f 15	               sta  thekey
.1514	20 e4 ff	nope           jsr  getin
.1517	20 d2 ff	               jsr  chrout
.151a	cd 5f 15	               cmp  thekey
.151d	d0 f5		               bne  nope
.151f	20 d2 ff	               jsr  chrout
.1522	20 8b 11	               jsr  pop
.1525	60		               rts
.1526			waitspace
.1526	20 50 11	               jsr  push
.1529	a9 7f		wait           lda  #$7f  ;%01111111
.152b	8d 00 dc	               sta  $dc00
.152e	ad 01 dc	               lda  $dc01
.1531	29 10		               and  #$10  ;mask %00010000
.1533	d0 f4		               bne  wait
.1535	20 8b 11	               jsr  pop
.1538			waitsstop
.1538	20 50 11	               jsr  push
.153b	20 ed f6	wait           jsr  k_stop  ;%01111111
.153e	d0 fb		               bne  wait
.1540	20 8b 11	               jsr  pop
.1543			waitreturn
.1543	20 50 11	               jsr  push
.1546	ad 60 15	               lda  thecount
.1549	8d 00 04	               sta  scrnram
.154c	a9 02		               lda  #$02
.154e	8d 00 d8	               sta  colorram
.1551	20 e4 ff	nope           jsr  getin
.1554	c9 0d		nohex          cmp  #$0d
.1556	d0 f9		               bne  nope
.1558	ee 60 15	               inc  thecount
.155b	20 8b 11	               jsr  pop
.155e	60		               rts
>155f	00		thekey         .byte   0
>1560	01		thecount       .byte   $01
>1561	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>1565	00 00 00 00 00 00 00 00 00 0d 00 00
>1571	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>1575	00 00 00 00 00 00 00 00 00 00 00 00
>1581	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>1585	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1591	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>1595	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>15a1	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>15a5	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>15b1	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>15b5	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>15c1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>15c5	00 00 00 00 00 00 00 00 00 00 00 00
>15d1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>15d5	00 00 00 00 00 00 00 00 00 00 00 00
>15e1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>15e5	00 00 00 00 00 00 00 00 00 00 00 00
>15f1	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>15f5	00 00 00 00 00 00 00 00 00 00 00 00
>1601	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>1605	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1611	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>1615	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>1621	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>1625	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>1631	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>1635	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>1641	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>1645	00 00 00 00 00 00 00 00 00 00 00 00
>1651	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>1655	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-showregs.asm

.1661			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.1661	08		               php                 ; Sauvegarde le registre de status sur stack.
.1662	8d 5c 18	               sta  rega           ; Sauvegarde Acc en mémoire.
.1665	68		               pla                 ; Récupère le registre de status du stack.
.1666	8d 5f 18	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.1669	8e 5d 18	               stx  regx           ; Sauvegarde le registre X en mémoire.
.166c	8c 5e 18	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.166f	ba		               tsx                 ; Copie le registre S dans X.
.1670	8e 60 18	               stx  regs           ; Sauvegarde le registre S en mémoire.
.1673	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.1674	8d 62 18	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.1677	8d 64 18	               sta  regpcl2        ; ... une seconde fois.
.167a	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.167b	8d 61 18	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.167e	8d 63 18	               sta  regpch2        ; ... une seconde fois.
.1681	ad 5c 18	               lda  rega           ; On commence par le registre Acc.
.1684	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1685	20 cb 13	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1688	8d f9 17	               sta  vala+1         ; ... et le place dans la chaine.
.168b	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.168c	20 d7 13	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.168f	20 cb 13	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1692	8d f8 17	               sta  vala           ; ... et le place dans la chaine.
.1695	ad 5e 18	               lda  regy           ; Ensuite, le registre Y.
.1698	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1699	20 cb 13	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.169c	8d 10 18	               sta  valy+1         ; ... et le place dans la chaine.
.169f	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.16a0	20 d7 13	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.16a3	20 cb 13	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.16a6	8d 0f 18	               sta  valy           ; ... et le place dans la chaine.
.16a9	ad 5d 18	               lda  regx           ; Ensuite, le registre X.
.16ac	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.16ad	20 cb 13	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.16b0	8d 04 18	               sta  valx+1         ; ... et le place dans la chaine.
.16b3	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.16b4	20 d7 13	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.16b7	20 cb 13	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.16ba	8d 03 18	               sta  valx           ; ... et le place dans la chaine.
.16bd	ad 5f 18	               lda  regp           ; Ensuite, le registre de status.
.16c0	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.16c1	20 cb 13	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.16c4	8d 1b 18	               sta  valp+1         ; ... et le place dans la chaine.
.16c7	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.16c8	20 d7 13	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.16cb	20 cb 13	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.16ce	8d 1a 18	               sta  valp           ; ... et le place dans la chaine.
.16d1	ad 60 18	               lda  regs           ; Ensuite, le pointeur de stack.
.16d4	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.16d5	20 cb 13	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.16d8	8d 26 18	               sta  vals+1         ; ... et le place dans la chaine.
.16db	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.16dc	20 d7 13	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.16df	20 cb 13	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.16e2	8d 25 18	               sta  vals           ; ... et le place dans la chaine.
.16e5	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.16e6	ad 64 18	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.16e9	69 00		               adc  #$00           ; On y ajoute 1.
.16eb	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.16ed	ee 63 18	               inc  regpch2        ; ... en incrémentant le MSB.
.16f0	8d 64 18	noreport       sta  regpcl2        ; On le sauvegarde.
.16f3	ad 64 18	               lda  regpcl2        ; On récupère la partie basse du compteur.
.16f6	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.16f7	20 cb 13	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.16fa	8d 36 18	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.16fd	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.16fe	20 d7 13	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1701	20 cb 13	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1704	8d 35 18	               sta  valpcl         ; ... et lace le code à la position "--X-".
.1707	ad 63 18	               lda regpch2         ; On récupère la partie haute du compteur.
.170a	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.170b	20 cb 13	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.170e	8d 34 18	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.1711	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1712	20 d7 13	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1715	20 cb 13	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1718	8d 33 18	               sta  valpch         ; ... et lace le code à la position "X---".
.171b	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.171d	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.171e	20 cb 13	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1721	8d 47 18	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.1724	68		               pla
.1725	20 d7 13	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1728	20 cb 13	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.172b	8d 46 18	               sta  valz1l         ; ... et lace le code à la position "--X-".
.172e	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.1730	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1731	20 cb 13	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1734	8d 45 18	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.1737	68		               pla
.1738	20 d7 13	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.173b	20 cb 13	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.173e	8d 44 18	               sta  valz1h         ; ... et lace le code à la position "X---".
.1741	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.1743	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1744	20 cb 13	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1747	8d 58 18	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.174a	68		               pla
.174b	20 d7 13	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.174e	20 cb 13	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1751	8d 57 18	               sta  valz2l         ; ... et lace le code à la position "--X-".
.1754	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.1756	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1757	20 cb 13	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.175a	8d 56 18	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.175d	68		               pla
.175e	20 d7 13	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1761	20 cb 13	               jsr  nibtohex
.1764	8d 55 18	               sta  valz2h         ; ... et lace le code à la position "X---".
.1767	20 3c 11	               jsr  setinverse     ; On se place en mode inverse vidéo.
.176a	20 be 11	               jsr  pushreg
.176d	a2 f0		               ldx  #<srega
.176f	a0 17		               ldy  #>srega
.1771	20 e7 10	               jsr  putscxy
.1774	20 ed 11	               jsr  popreg
.1777	20 be 11	               jsr  pushreg
.177a	a2 fc		               ldx  #<sregx
.177c	a0 17		               ldy  #>sregx
.177e	20 e7 10	               jsr  putscxy
.1781	20 ed 11	               jsr  popreg
.1784	20 be 11	               jsr  pushreg
.1787	a2 07		               ldx  #<sregy
.1789	a0 18		               ldy  #>sregy
.178b	20 e7 10	               jsr  putscxy
.178e	20 ed 11	               jsr  popreg
.1791	20 be 11	               jsr  pushreg
.1794	a2 13		               ldx  #<sregp
.1796	a0 18		               ldy  #>sregp
.1798	20 e7 10	               jsr  putscxy
.179b	20 ed 11	               jsr  popreg
.179e	20 be 11	               jsr  pushreg
.17a1	a2 1e		               ldx  #<sregs
.17a3	a0 18		               ldy  #>sregs
.17a5	20 e7 10	               jsr  putscxy
.17a8	20 ed 11	               jsr  popreg
.17ab	20 be 11	               jsr  pushreg
.17ae	a2 2a		               ldx  #<sregpc
.17b0	a0 18		               ldy  #>sregpc
.17b2	20 e7 10	               jsr  putscxy
.17b5	20 ed 11	               jsr  popreg
.17b8	20 be 11	               jsr  pushreg
.17bb	a2 3a		               ldx  #<sregz1
.17bd	a0 18		               ldy  #>sregz1
.17bf	20 e7 10	               jsr  putscxy
.17c2	20 ed 11	               jsr  popreg
.17c5	20 be 11	               jsr  pushreg
.17c8	a2 4b		               ldx  #<sregz2
.17ca	a0 18		               ldy  #>sregz2
.17cc	20 e7 10	               jsr  putscxy
.17cf	20 ed 11	               jsr  popreg
.17d2	20 44 11	               jsr  clrinverse     ; On quitte le mode inverse vidéo.
.17d5	ad 61 18	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.17d8	48		               pha                 ; ... à la bonne position sur la pile.
.17d9	ad 62 18	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.17dc	48		               pha                 ; ... à la bonne position sur la pile.
.17dd	ae 60 18	               ldx  regs           ; On replace tous les registre à leurs ...
.17e0	9a		               txs                 ; ...
.17e1	ac 5e 18	               ldy  regy           ; ...
.17e4	ae 5d 18	               ldx  regx           ; ...
.17e7	ad 5f 18	               lda  regp           ; ...
.17ea	48		               pha                 ; ...
.17eb	ad 5c 18	               lda  rega           ; ...
.17ee	28		               plp                 ; ... valeurs initiales
.17ef	60		               rts
>17f0	07 01 17	srega   .byte   cyellow,coln+1,line
>17f3	20 20 41 3a	        .text   '  a:$' ;4,24
>17f7	24
>17f8	00 00 20 00	vala    .byte   0,0,32,0
>17fc	03 09 17	sregx   .byte   ccyan,coln+9,line
>17ff	20 58 3a 24	        .text   ' x:$' ;4,24
>1803	00 00 20 00	valx    .byte   0,0,32,0
>1807	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>180a	20 59 3a 20	        .text   ' y: $' ;4,24
>180e	24
>180f	00 00 20 00	valy    .byte   0,0,32,0
>1813	08 18 17	sregp   .byte   corange,coln+24,line
>1816	20 50 3a 24	        .text   ' p:$' ;4,24
>181a	00 00 20 00	valp    .byte   0,0,32,0
>181e	0a 1f 17	sregs   .byte   clightred,coln+31,line
>1821	20 53 3a 24	        .text   ' s:$' ;4,24
>1825	00 00 20 20	vals    .byte   0,0,32,32,0
>1829	00
>182a	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>182e	20 50 43 3a	        .text   ' pc:$' ;4,24
>1832	24
>1833	00 00		valpch  .byte   0,0
>1835	00 00 20 20	valpcl  .byte   0,0,32,32,0
>1839	00
>183a	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>183e	20 5a 50 31	        .text   ' zp1:$' ;4,24
>1842	3a 24
>1844	00 00		valz1h  .byte   0,0
>1846	00 00 20 20	valz1l  .byte   0,0,32,32,0
>184a	00
>184b	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>184f	20 5a 50 32	        .text   ' zp2:$' ;4,24
>1853	3a 24
>1855	00 00		valz2h  .byte   0,0
>1857	00 00 20 20	valz2l  .byte   0,0,32,32,0
>185b	00
>185c	00		rega    .byte   0
>185d	00		regx    .byte   0
>185e	00		regy    .byte   0
>185f	00		regp    .byte   0
>1860	00		regs    .byte   0
>1861	00		regpch  .byte   0
>1862	00		regpcl  .byte   0
>1863	00		regpch2 .byte   0
>1864	00		regpcl2 .byte   0
>1865	00		vzp1h   .byte   0
>1866	00		vzp1l   .byte   0
>1867	00		vzp2h   .byte   0
>1868	00		vzp2l   .byte   0

;******  Return to file: slbug64.asm


;******  End of listing

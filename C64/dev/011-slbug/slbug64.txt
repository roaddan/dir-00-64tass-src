
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L slbug64.txt -o slbug64.prg slbug64.asm
; Wed Sep 24 16:51:56 2025

;Offset	;Hex		;Source

;******  Processing input file: slbug64.asm

="20250924-000001"	                Version = "20250924-000001"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	2a 50 52 4f	               .text "*programmation assembleur sur c64*"
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2a
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	2a 50 41 52	               .text "*par daniel lafrance*"
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2a
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 54 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"

;******  Return to file: slbug64.asm

.0854			main
.0854	20 14 c1	               jsr  scrmaninit
.0857	08		               php
.0858	48		               pha
.0859	a9 0e		               lda  #14
.085b	20 d2 ff	               jsr  $ffd2
.085e	68		               pla
.085f	28		               plp
.0860	08		               php
.0861	48		               pha
.0862	a9 08		               lda  #$08
.0864	20 d2 ff	               jsr  $ffd2
.0867	68		               pla
.0868	28		               plp
.0869	a9 05		               lda  #cvert
.086b	8d 20 d0	               sta  vicbordcol
.086e	a9 06		               lda  #cbleu
.0870	8d 21 d0	               sta  vicbackcol
.0873	a9 01		               lda  #cblanc
.0875	8d 86 02	               sta  bascol
.0878	20 34 c1	               jsr  cls
.087b	20 97 08	               jsr  help
.087e	20 82 08	               jsr  slbug64
.0881	60		               rts
.0882			slbug64
.0882	08		                php
.0883	48		                pha
.0884	20 d4 c5	                jsr anykey
.0887	ad 20 d0	                lda vicbordcol
.088a	48		                pha
.088b	a9 10		                lda #$10
.088d	8d 20 d0	                sta vicbordcol
.0890	68		                pla
.0891	8d 20 d0	                sta vicbordcol
.0894	68		                pla
.0895	28		                plp
.0896	60		                rts
.0897			help
.0897	20 47 c2	                jsr pushall
.089a	20 34 c1	                jsr cls
.089d	20 b5 c2	               jsr  pushreg
.08a0	a2 9c		               ldx  #<line
.08a2	a0 81		               ldy  #>line
.08a4	20 51 c1	               jsr  puts
.08a7	20 e4 c2	               jsr  popreg
.08aa	20 b5 c2	               jsr  pushreg
.08ad	a2 00		               ldx  #<headera
.08af	a0 80		               ldy  #>headera
.08b1	20 51 c1	               jsr  puts
.08b4	20 e4 c2	               jsr  popreg
.08b7	20 b5 c2	               jsr  pushreg
.08ba	a2 9c		               ldx  #<line
.08bc	a0 81		               ldy  #>line
.08be	20 51 c1	               jsr  puts
.08c1	20 e4 c2	               jsr  popreg
.08c4	20 b5 c2	               jsr  pushreg
.08c7	a2 4b		               ldx  #<headerb
.08c9	a0 80		               ldy  #>headerb
.08cb	20 51 c1	               jsr  puts
.08ce	20 e4 c2	               jsr  popreg
.08d1	20 b5 c2	               jsr  pushreg
.08d4	a2 9c		               ldx  #<line
.08d6	a0 81		               ldy  #>line
.08d8	20 51 c1	               jsr  puts
.08db	20 e4 c2	               jsr  popreg
.08de	20 b5 c2	               jsr  pushreg
.08e1	a2 96		               ldx  #<headerc
.08e3	a0 80		               ldy  #>headerc
.08e5	20 51 c1	               jsr  puts
.08e8	20 e4 c2	               jsr  popreg
.08eb	20 b5 c2	               jsr  pushreg
.08ee	a2 9c		               ldx  #<line
.08f0	a0 81		               ldy  #>line
.08f2	20 51 c1	               jsr  puts
.08f5	20 e4 c2	               jsr  popreg
.08f8	20 b5 c2	               jsr  pushreg
.08fb	a2 06		               ldx  #<shortcuts
.08fd	a0 81		               ldy  #>shortcuts
.08ff	20 51 c1	               jsr  puts
.0902	20 e4 c2	               jsr  popreg
.0905	20 b5 c2	               jsr  pushreg
.0908	a2 9c		               ldx  #<line
.090a	a0 81		               ldy  #>line
.090c	20 51 c1	               jsr  puts
.090f	20 e4 c2	               jsr  popreg
.0912	20 82 c2	                jsr popall
.0915	60		                rts

;******  Processing file: chaines_fr.asm

.8000			headera
>8000	20 20 20 20	                .text          "    **** SL-BUG 64 Version 4.00 ****"
>8004	2a 2a 2a 2a 20 d3 cc 2d c2 d5 c7 20 36 34 20 d6
>8014	45 52 53 49 4f 4e 20 34 2e 30 30 20 2a 2a 2a 2a
>8024	0d		                .byte   $0d
>8025	20 20 20 20	                .text          "    *       Pour Commodore 64      *"
>8029	2a 20 20 20 20 20 20 20 d0 4f 55 52 20 c3 4f 4d
>8039	4d 4f 44 4f 52 45 20 36 34 20 20 20 20 20 20 2a
>8049	0d 00		                .byte   $0d,0
>804b	20 20 20 20	headerb         .text          "    *  Idee Originale: S. Leblanc  *"
>804f	2a 20 20 c9 44 45 45 20 cf 52 49 47 49 4e 41 4c
>805f	45 3a 20 d3 2e 20 cc 45 42 4c 41 4e 43 20 20 2a
>806f	0d		                .byte   $0d
>8070	20 20 20 20	                .text          "    * Version originale sur MC6809 *"
>8074	2a 20 d6 45 52 53 49 4f 4e 20 4f 52 49 47 49 4e
>8084	41 4c 45 20 53 55 52 20 cd c3 36 38 30 39 20 2a
>8094	0d 00		                .byte   $0d,$0
>8096	20 20 20 20	headerc         .text          "    * Port sur C64 Daniel Lafrance *"
>809a	2a 20 d0 4f 52 54 20 53 55 52 20 c3 36 34 20 c4
>80aa	41 4e 49 45 4c 20 cc 41 46 52 41 4e 43 45 20 2a
>80ba	0d		                .byte   $0d
>80bb	20 20 20 20	                .text          "    *      (c) Septembre 2025      *"
>80bf	2a 20 20 20 20 20 20 28 43 29 20 d3 45 50 54 45
>80cf	4d 42 52 45 20 32 30 32 35 20 20 20 20 20 20 2a
>80df	0d		                .byte   $0d
>80e0	20 20 20 20	                .text   format("    * Version: %-20s*",Version)
>80e4	2a 20 d6 45 52 53 49 4f 4e 3a 20 32 30 32 35 30
>80f4	39 32 34 2d 30 30 30 30 30 31 20 20 20 20 20 2a
>8104	0d 00		                .byte   $0d,0
>8106	0d		shortcuts       .byte   $0d
>8107	20 20 20 20	                .text          "    *---- R A C C O U R C I S -----*"
>810b	2a 2d 2d 2d 2d 20 d2 20 c1 20 c3 20 c3 20 cf 20
>811b	d5 20 d2 20 c3 20 c9 20 d3 20 2d 2d 2d 2d 2d 2a
>812b	0d		                .byte   $0d
>812c	20 20 20 20	                .text   format("    * Execution.: SYS%05d ($%04X) *",slbug64,slbug64)
>8130	2a 20 c5 58 45 43 55 54 49 4f 4e 2e 3a 20 d3 d9
>8140	d3 30 32 31 37 38 20 28 24 30 38 38 32 29 20 2a
>8150	0d		                .byte   $0d
>8151	20 20 20 20	                .text   format("    * Aide......: SYS%05d ($%04X) *",help,help)
>8155	2a 20 c1 49 44 45 2e 2e 2e 2e 2e 2e 3a 20 d3 d9
>8165	d3 30 32 31 39 39 20 28 24 30 38 39 37 29 20 2a
>8175	0d		                .byte   $0d
>8176	20 20 20 20	                .text   format("    * CLS.......: SYS%05d ($%04X) *",cls,cls)
>817a	2a 20 c3 cc d3 2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9
>818a	d3 34 39 34 36 30 20 28 24 c3 31 33 34 29 20 2a
>819a	0d 00		                .byte   $0d,0
>819c	20 20 20 20	line            .text          "    *------------------------------*"
>81a0	2a 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d
>81b0	2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2d 2a
>81c0	0d 00		                .byte   $0d,0
>81c2	20 cc 41 4e	helptext        .text   format(" Lancement de slbug64  : SYS%5d",slbug64)
>81c6	43 45 4d 45 4e 54 20 44 45 20 53 4c 42 55 47 36
>81d6	34 20 20 3a 20 d3 d9 d3 20 32 31 37 38
>81e3	0d		                .byte   $0d
>81e4	20 45 58 2e	                .text   format(" ex.: SYS%5d",slbug64)
>81e8	3a 20 d3 d9 d3 20 32 31 37 38
>81f2	0d 00		                .byte   $0d,0

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>c000	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>c004	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black        =    144  ;0,  ctrl-1
=5			b_white        =    5    ;1,  ctrl-2
=28			b_red          =    28   ;2,  ctrl-3
=159			b_cyan         =    159  ;3,  ctrl-4
=156			b_purple       =    156  ;4,  ctrl-5
=30			b_green        =    30   ;5,  ctrl-6
=31			b_blue         =    31   ;6,  ctrl-7
=158			b_yellow       =    158  ;7,  ctrl-8
=129			b_orange       =    129  ;8,  C=-1
=149			b_brown        =    149  ;9,  C=-2
=150			b_ltred        =    150  ;10, C=-3
=155			b_gray3        =    155  ;11, C=-4
=155			b_grey3        =    155  ;11, C=-4
=152			b_gray2        =    152  ;12, C=-5
=152			b_grey2        =    152  ;13, C=-5
=153			b_ltgreen      =    153  ;13, C=-6
=154			b_ltblue       =    154  ;14, C=-7
=151			b_gray1        =    151  ;15, C=-8
=151			b_grey1        =    151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.c008			screendis
.c008	08		               php
.c009	48		               pha
.c00a	ad 11 d0	               lda  $d011
.c00d	29 ef		               and  #%11101111
.c00f	8d 11 d0	               sta  $d011
.c012	68		               pla
.c013	28		               plp
.c014	60		               rts
.c015			screenena
.c015	08		               php
.c016	48		               pha
.c017	ad 11 d0	               lda  $d011
.c01a	09 10		               ora  #%00010000
.c01c	8d 11 d0	               sta  $d011
.c01f	68		               pla
.c020	28		               plp
.c021	60		               rts
=8192			bmpram = 8192
.c022			victohighres
.c022	08		               php
.c023	48		               pha
.c024	ad 11 d0	               lda  vicmiscfnc
.c027	09 20		               ora  #%00100000     ; 32
.c029	8d 11 d0	               sta  vicmiscfnc
.c02c	ad 18 d0	               lda  vicmemptr
.c02f	09 08		               ora  #%00001000     ; $08
.c031	8d 18 d0	               sta  vicmemptr
.c034	a9 ff		               lda  #$ff           ; 255
.c036	85 37		               sta  $0037
.c038	a9 1f		               lda  #$1f           ; 31
.c03a	85 38		               sta  $0038
.c03c	68		               pla
.c03d	28		               plp
.c03e	60		               rts
.c03f			victonormal
.c03f	08		               php
.c040	48		               pha
.c041	ad 11 d0	               lda  vicmiscfnc
.c044	29 df		               and  #%11011111     ; 233
.c046	8d 11 d0	               sta  vicmiscfnc
.c049	ad 18 d0	               lda  vicmemptr
.c04c	29 f7		               and  #%11110111     ; $08
.c04e	8d 18 d0	               sta  vicmemptr
.c051	a9 00		               lda  #$00
.c053	85 37		               sta  $0037
.c055	a9 a0		               lda  #$a0
.c057	85 38		               sta  $0038
.c059	20 34 c1	               jsr  cls
.c05c	68		               pla
.c05d	28		               plp
.c05e	60		               rts
.c05f			vicbmpclear
.c05f	20 47 c2	               jsr  push
.c062	a9 04		               lda  #cmauve
.c064	20 8d c0	               jsr  setvicbmpbackcol
.c067	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.c069	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.c06b	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.c06d	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.c06f	48		               pha
.c070	a9 ff		               lda  #<$0000+(8191)
.c072	8d 6b c4	               sta  loopcount
.c075	a9 1f		               lda  #>$0000+(8191)
.c077	8d 6c c4	               sta  loopcount+1
.c07a	68		               pla
.c07b	a0 00		               ldy  #$00
.c07d	a9 0f		next           lda  #$0f
.c07f	91 fb		               sta  (zpage1),y
.c081	20 9c c3	               jsr  inczpage1
.c084	20 4b c4	               jsr  loop
.c087	d0 f4		               bne  next
.c089	20 82 c2	               jsr  pop
.c08c	60		               rts
.c08d			setvicbmpbackcol
.c08d	20 47 c2	               jsr  push
.c090	29 0f		               and  #$0f
.c092	8d c0 c0	               sta  vicbmpbackcol
.c095	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.c097	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.c099	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.c09b	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.c09d	48		               pha
.c09e	a9 00		               lda  #<$0000+(1024)
.c0a0	8d 6b c4	               sta  loopcount
.c0a3	a9 04		               lda  #>$0000+(1024)
.c0a5	8d 6c c4	               sta  loopcount+1
.c0a8	68		               pla
.c0a9	a0 00		               ldy  #$00
.c0ab	b1 fb		next           lda  (zpage1),y
.c0ad	29 f0		               and  #$f0
.c0af	0d c0 c0	               ora  vicbmpbackcol
.c0b2	91 fb		               sta  (zpage1),y
.c0b4	20 9c c3	               jsr  inczpage1
.c0b7	20 4b c4	               jsr  loop
.c0ba	d0 ef		               bne  next
.c0bc	20 82 c2	               jsr  pop
.c0bf	60		               rts
>c0c0	00		vicbmpbackcol  .byte     $00
.c0c1			setvicbmpforecol
.c0c1	20 47 c2	               jsr  push
.c0c4	2a		               rol
.c0c5	2a		               rol
.c0c6	2a		               rol
.c0c7	2a		               rol
.c0c8	29 f0		               and  #$f0
.c0ca	8d f8 c0	               sta  vicbmpforecol
.c0cd	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.c0cf	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.c0d1	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.c0d3	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.c0d5	48		               pha
.c0d6	a9 00		               lda  #<$0000+(1024)
.c0d8	8d 6b c4	               sta  loopcount
.c0db	a9 04		               lda  #>$0000+(1024)
.c0dd	8d 6c c4	               sta  loopcount+1
.c0e0	68		               pla
.c0e1	a0 00		               ldy  #$00
.c0e3	b1 fb		next           lda  (zpage1),y
.c0e5	29 0f		               and  #$0f
.c0e7	0d f8 c0	               ora  vicbmpforecol
.c0ea	91 fb		               sta  (zpage1),y
.c0ec	20 9c c3	               jsr  inczpage1
.c0ef	20 4b c4	               jsr  loop
.c0f2	d0 ef		               bne  next
.c0f4	20 82 c2	               jsr  pop
.c0f7	60		               rts
>c0f8	00		vicbmpforecol  .byte     $00
.c0f9			bmphrcalccoords
.c0f9	20 47 c2	               jsr  push
.c0fc	18		               clc       ; On met Carry à 0
.c0fd	6a		               ror       ; le bit 0 de a dans carry  ?/2
.c0fe	8a		               txa       ; x dans a
.c0ff	4a		               lsr       ; ?/4
.c100	4a		               lsr       ; ?/8 a = (ax)/8
.c101	8d 12 c1	               sta  bmphrcol
.c104	98		               tya       ; Y dans a
.c105	4a		               lsr       ; ?/2
.c106	4a		               lsr       ; ?/4
.c107	4a		               lsr       ; ?/8 a=Y/8
.c108	8d 11 c1	               sta  bmphrrow
.c10b	48		               pha
.c10c	98		               tya
.c10d	20 82 c2	               jsr  pop
.c110	60		               rts
.c111			vicbmpfill
>c111	00		bmphrrow       .byte     $00
>c112	00		bmphrcol       .byte     $00
>c113	00		bmphrmask      .byte     $00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.c114			scrmaninit
.c114	20 b5 c2	               jsr  pushreg        ; Sauvegarde tous les registres
.c117	20 08 c0	               jsr  screendis      ; Disable screen
.c11a	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.c11c	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.c11f	a9 05		               lda  #vvert         ; vert pour la couleur
.c121	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.c124	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.c126	8d 86 02	               sta  bascol         ; texte.
.c129	20 34 c1	               jsr  cls            ; Efface l'écran.
.c12c	20 15 c0	               jsr  screenena      ; enable screen
.c12f	20 e4 c2	               jsr  popreg         ; Récupère tous les registres.
.c132	60		               rts
>c133	8e		characterset   .byte b_uppercase
.c134			cls
.c134	08		               php                 ; Sauvegarde les registres
.c135	48		               pha                 ;   modifiés.
.c136	a9 93		               lda  #$93           ; Affiche le code basic de
.c138	20 4b c1	               jsr  putch          ;   d'effacement d'écran.
.c13b	68		               pla                 ; Récupère les registres
.c13c	28		               plp                 ;   modifiés.
.c13d	60		               rts
.c13e			putnch
.c13e	20 b5 c2	               jsr  pushreg        ; Sauvegarde tous les registres.
.c141	20 d2 ff	again          jsr  $ffd2          ; On affiche A.
.c144	ca		               dex                 ; Un de moins à faire.
.c145	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.c147	20 e4 c2	out            jsr  popreg         ; Récupère tous les registres.
.c14a	60		               rts
.c14b			putch
.c14b	08		               php                 ; Sauvegarde le registre de status.
.c14c	20 d2 ff	               jsr  $ffd2          ; Affiche le caractère de Acc.
.c14f	28		               plp                 ; Récupère le registre de status.
.c150	60		               rts
.c151			puts
.c151	20 47 c2	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.c154	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.c156	84 fc		               sty  zpage1+1       ;   dans ZP1.
.c158	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.c15a	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.c15c	f0 09		               beq  exit           ; Si $00 on sort.
.c15e	20 4b c1	               jsr  putch          ; Affiche le caractères.
.c161	20 9c c3	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c164	4c 5a c1	               jmp  next           ; Saute chercher le prochain carac.
.c167	20 82 c2	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.c16a	60		               rts
.c16b			gotoxy
.c16b	08		               php                 ; Sauvegarde le registre de
.c16c	48		               pha                 ;   status et le registre a.
.c16d	18		               clc                 ; Carry = 1 pour que kplot
.c16e	8a		               txa                 ;   positionne le curseur.
.c16f	48		               pha                 ; On inverse X et Y pcq kplot
.c170	98		               tya                 ;
.c171	aa		               tax                 ;   prend X comme la ligne
.c172	68		               pla                 ;
.c173	a8		               tay                 ;   et Y comme la colonne.
.c174	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.c177	68		               pla                 ; Récupère le registre a et
.c178	28		               plp                 ;   le registre de status.
.c179	60		               rts
.c17a			cursor
=$0286			bascol    =    $0286               ; debugme
.c17a	20 b5 c2	               jsr  pushreg        ; Sauvegarde tous les registres.
.c17d	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.c17f	20 f0 ff	               jsr  kplot          ; On récupère la position du
.c182	8c a4 c1	               sty  cx             ;   curseur et on la sauvegarde
.c185	8e a5 c1	               stx  cy             ;   dans les vars locales.
.c188	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.c18b	8d a6 c1	               sta  bcol           ; BASIC du texte.
.c18e	4c a0 c1	               jmp  out            ; c'est fini on sort.
.c191	ae a5 c1	restore        ldx  cy             ; Comme C=1, On charge x avec
.c194	ac a4 c1	               ldy  cx             ;   la ligne, y ace  la col.
.c197	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.c19a	ad a6 c1	               lda  bcol           ; On replace la couleur par basic
.c19d	8d 86 02	               sta  bascol         ;   sauvegardé.
.c1a0	20 e4 c2	out            jsr  popreg         ; Récupère tous les registres.
.c1a3	60		               rts
>c1a4	00		cx   .byte     $00
>c1a5	00		cy   .byte     $00
>c1a6	00		bcol .byte     $00
.c1a7			cursave
.c1a7	08		               php
.c1a8	38		               sec
.c1a9	20 7a c1	               jsr  cursor         ; Voir cette fonction plus haut.
.c1ac	28		               plp
.c1ad	60		               rts
.c1ae			curput
.c1ae	08		               php
.c1af	18		               clc
.c1b0	20 7a c1	               jsr  cursor         ; Voir cette fonction plus haut.
.c1b3	28		               plp
.c1b4	60		               rts
.c1b5			putsxy
.c1b5	20 47 c2	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.c1b8	86 fb		               stx  zpage1         ; On place la position de la
.c1ba	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.c1bc	a0 00		               ldy  #$00           ; On charge l'index à 0.
.c1be	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.c1c0	aa		               tax                 ;   dans X.
.c1c1	20 9c c3	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c1c4	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.c1c6	a8		               tay                 ; dans Y.
.c1c7	20 6b c1	               jsr  gotoxy         ; on positionne le curseur.
.c1ca	20 9c c3	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c1cd	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.c1cf	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.c1d1	20 51 c1	               jsr  puts           ;   l'affiche.
.c1d4	20 82 c2	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.c1d7	60		               rts
>c1d8	00 00		straddr   .word     $00
>c1da	00		px        .byte     $00
>c1db	00		py        .byte     $00
>c1dc	00 00		zp1       .word     $00
.c1de			putscxy
.c1de	20 47 c2	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.c1e1	86 fb		               stx  zpage1         ; On place la position de la
.c1e3	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.c1e5	a0 00		               ldy  #$00           ; On charge l'index à 0.
.c1e7	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.c1ea	48		               pha                 ;   actuelle de basic.
.c1eb	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.c1ed	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.c1f0	20 9c c3	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.c1f3	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.c1f5	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.c1f7	20 b5 c1	               jsr  putsxy         ;   l'affiche.
.c1fa	68		               pla                 ; On replace la couleur basic
.c1fb	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.c1fe	20 82 c2	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.c201	60		               rts
.c202			putrahex
.c202	20 b5 c2	               jsr  pushreg        ; Sauvegarde tous les registres.
.c205	20 d5 c4	               jsr  atohex         ; Conversion de a chaîne hexa.
.c208	a2 72		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.c20a	a0 c4		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.c20c	20 51 c1	               jsr  puts           ; Affiche la chaîne.
.c20f	20 e4 c2	               jsr  popreg         ; Récupère tous les registres.
.c212	60		               rts
.c213			kputrahexxy
.c213			bputrahexxy
.c213			putrahexxy
.c213	08		               php                 ; Sauvegarde le registre de
.c214	48		               pha                 ;   status et le registre a.
.c215	20 d5 c4	               jsr  atohex         ; Convertion de a en hexadécimal.
.c218	a2 6f		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.c21a	a0 c4		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.c21c	20 b5 c1	               jsr  putsxy         ; Positionne et affiche la chaîne.
.c21f	68		               pla                 ; Récupère le registre a et
.c220	28		               plp                 ;   le registre de status.
.c221	60		               rts
.c222			putrahexcxy
.c222	20 b5 c2	               jsr  pushreg        ; Sauvegarde tous les registres.
.c225	20 d5 c4	               jsr  atohex         ; Convertion de a en hexadécimal.
.c228	a2 6f		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.c22a	a0 c4		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.c22c	20 b5 c1	               jsr  putsxy         ; Colore, positionne et affiche la
.c22f	20 e4 c2	               jsr  popreg         ; Récupère tous les registres.
.c232	60		               rts
.c233			setinverse
.c233	48		               pha
.c234	a9 12		               lda  #$12
.c236	20 d2 ff	               jsr  $ffd2
.c239	68		               pla
.c23a	60		               rts
.c23b			clrinverse
.c23b	48		               pha
.c23c	a9 92		               lda  #$92
.c23e	20 d2 ff	               jsr  $ffd2
.c241	68		               pla
.c242	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>c243	00		rp        .byte     0
>c244	00		ra        .byte     0
>c245	00 00		pc        .word     0
.c247			pushall
.c247			push
.c247	08		          php            ; stack : flg, pcl, pch
.c248	78		          sei
.c249	8d 44 c2	          sta  ra        ; save a
.c24c	68		          pla            ; stack : pcl, pch
.c24d	8d 43 c2	          sta  rp        ; save rp
.c250	68		          pla            ; stack : pch
.c251	8d 45 c2	          sta  pc        ; save pcl
.c254	68		          pla            ; stack : -
.c255	8d 46 c2	          sta  pc+1      ; save pch
.c258	a5 fb		          lda  zpage1    ; get zpage1 low byte
.c25a	48		          pha            ; stack : zp1l
.c25b	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.c25d	48		          pha            ; stack : zp1h, zp1l
.c25e	a5 fd		          lda  zpage2    ; get zpage2 low byte
.c260	48		          pha            ; stack : zp2l, zp1h, zp1l
.c261	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.c263	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.c264	ad 43 c2	          lda  rp        ; get rp
.c267	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c268	ad 44 c2	          lda  ra        ; get a
.c26b	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c26c	8a		          txa            ; get x
.c26d	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c26e	98		          tya            ; get y
.c26f	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c270	ad 46 c2	          lda  pc+1      ; get pch
.c273	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c274	ad 45 c2	          lda  pc        ; get pcl
.c277	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c278	ad 43 c2	          lda  rp        ; get rp
.c27b	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c27c	ad 44 c2	          lda  ra        ; get a
.c27f	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c280	58		          cli
.c281	60		          rts
.c282			pullall
.c282			pull
.c282			popall
.c282			pop
.c282	78		          sei
.c283	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c284	8d 45 c2	          sta  pc        ; save pcl
.c287	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c288	8d 46 c2	          sta  pc+1      ; save pch
.c28b	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c28c	a8		          tay            ; set y
.c28d	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c28e	aa		          tax            ; set x
.c28f	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c290	8d 44 c2	          sta  ra        ; save a
.c293	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c294	8d 43 c2	          sta  rp        ; save rp
.c297	68		          pla            ; stack : zp2l, zp1h, zp1l
.c298	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.c29a	68		          pla            ; stack : zp1h, zp1l
.c29b	85 fd		          sta  zpage2    ; get zpage2 High byte
.c29d	68		          pla            ; stack : zp1l
.c29e	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.c2a0	68		          pla            ; stack :
.c2a1	85 fb		          sta  zpage1    ; get zpage1 High byte
.c2a3	ad 46 c2	          lda  pc+1      ; get pch
.c2a6	48		          pha            ; stack : pch
.c2a7	ad 45 c2	          lda  pc
.c2aa	48		          pha            ; stack : pcl, pch
.c2ab	ad 43 c2	          lda  rp        ; get rp
.c2ae	48		          pha            ; stack : rp, pcl, pch
.c2af	ad 44 c2	          lda  ra        ; set ra
.c2b2	58		          cli
.c2b3	28		          plp            ; stack : pcl, pch
.c2b4	60		          rts
.c2b5			pushreg
.c2b5	08		          php            ; stack : flg, pcl, pch
.c2b6	78		          sei
.c2b7	8d 44 c2	          sta  ra        ; save a
.c2ba	68		          pla            ; stack : pcl, pch
.c2bb	8d 43 c2	          sta  rp        ; save rp
.c2be	68		          pla            ; stack : pch
.c2bf	8d 45 c2	          sta  pc        ; save pcl
.c2c2	68		          pla            ; stack : -
.c2c3	8d 46 c2	          sta  pc+1      ; save pch
.c2c6	ad 43 c2	          lda  rp        ; get rp
.c2c9	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.c2ca	ad 44 c2	          lda  ra        ; get a
.c2cd	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c2ce	8a		          txa            ; get x
.c2cf	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2d0	98		          tya            ; get y
.c2d1	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2d2	ad 46 c2	          lda  pc+1      ; get pch
.c2d5	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2d6	ad 45 c2	          lda  pc        ; get pcl
.c2d9	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2da	ad 43 c2	          lda  rp        ; get rp
.c2dd	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2de	ad 44 c2	          lda  ra        ; get a
.c2e1	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2e2	58		          cli
.c2e3	60		          rts
.c2e4			pullreg
.c2e4			popreg
.c2e4	78		          sei
.c2e5	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2e6	8d 45 c2	          sta  pc        ; save pcl
.c2e9	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2ea	8d 46 c2	          sta  pc+1      ; save pch
.c2ed	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.c2ee	a8		          tay            ; set y
.c2ef	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.c2f0	aa		          tax            ; set x
.c2f1	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.c2f2	8d 44 c2	          sta  ra        ; save a
.c2f5	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.c2f6	8d 43 c2	          sta  rp        ; save rp
.c2f9	ad 46 c2	          lda  pc+1      ; get pch
.c2fc	48		          pha            ; stack : pch
.c2fd	ad 45 c2	          lda  pc
.c300	48		          pha            ; stack : pcl, pch
.c301	ad 43 c2	          lda  rp        ; get rp
.c304	48		          pha            ; stack : rp, pcl, pch
.c305	ad 44 c2	          lda  ra        ; set ra
.c308	58		          cli
.c309	28		          plp            ; stack : pcl, pch
.c30a	60		          rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.c30b			blkfill
.c30b	20 47 c2	bf0            jsr  push
.c30e	20 d6 c3	               jsr  savezp1
.c311	84 fc		               sty  zpage1+1
.c313	a0 00		               ldy  #$00
.c315	84 fb		               sty  zpage1
.c317	91 fb		bf1            sta  (zpage1),y
.c319	c8		               iny
.c31a	d0 fb		               bne  bf1
.c31c	20 e5 c3	               jsr  restzp1
.c31f	20 82 c2	               jsr  pop
.c322	60		               rts
.c323			memfill
.c323	20 47 c2	               jsr  push
.c326	20 0b c3	mf1            jsr  blkfill
.c329	c8		               iny
.c32a	ca		               dex
.c32b	d0 f9		               bne  mf1
.c32d	20 82 c2	               jsr  pop
.c330	60		               rts
.c331			memmove
.c331	20 47 c2	               jsr  push
.c334	ba		               tsx            ; On se crée un pointeur ...
.c335	8a		               txa
.c336	18		               clc
.c337	69 0b		               adc  #11
.c339	a8		               tay
.c33a	a2 06		               ldx  #$06
.c33c	b9 00 01	nextbyte       lda  $0100,y
.c33f	99 8b c3	               sta  words,y
.c342	c8		               iny
.c343	ca		               dex
.c344	d0 f6		               bne  nextbyte
.c346	ad 8b c3	               lda  s
.c349	8d 62 c3	               sta  source+1
.c34c	ad 8c c3	               lda  s+1
.c34f	8d 63 c3	               sta  source+2
.c352	ad 8d c3	               lda  d
.c355	8d 5f c3	               sta  destin+1
.c358	ad 8e c3	               lda  d+1
.c35b	8d 60 c3	               sta  destin+2
.c35e	ad ff ff	destin         lda  $ffff
.c361	8d ff ff	source         sta  $ffff
.c364	ee 5f c3	               inc  destin+1
.c367	d0 03		               bne  src
.c369	ee 60 c3	               inc  destin+2
.c36c	ee 62 c3	src            inc  source+1
.c36f	d0 03		               bne  cnt
.c371	ee 63 c3	               inc  source+2
.c374	ad 8f c3	cnt            lda  compte
.c377	d0 08		               bne  decit
.c379	ad 90 c3	               lda  compte+1
.c37c	f0 09		               beq  fini
.c37e	ce 90 c3	               dec  compte+1
.c381	ce 8f c3	decit          dec  compte
.c384	4c 5e c3	               jmp  destin
.c387	20 82 c2	fini           jsr  pop
.c38a	60		               rts
.c38b			words
>c38b	00 00		s         .word     $0000
>c38d	00 00		d         .word     $0000
>c38f	00 00		compte    .word     $0000
.c391			decword
.c391	20 47 c2	               jsr  push
.c394	86 fd		               stx  zpage2
.c396	84 fe		               sty  zpage2+1
.c398	20 82 c2	               jsr  pop
.c39b	60		               rts
.c39c			inczpage1
.c39c			inczp1
.c39c	08		               php
.c39d	48		               pha
.c39e	e6 fb		               inc  zpage1
.c3a0	a5 fb		               lda  zpage1
.c3a2	d0 02		               bne  nopage
.c3a4	e6 fc		               inc  zpage1+1
.c3a6	68		nopage         pla
.c3a7	28		               plp
.c3a8	60		               rts
.c3a9			deczpage1
.c3a9			deczp1
.c3a9	08		               php
.c3aa	48		               pha
.c3ab	c6 fb		               dec  zpage1
.c3ad	a5 fb		               lda  zpage1
.c3af	c9 ff		               cmp  #$ff
.c3b1	f0 02		               beq  report
.c3b3	d0 02		               bne  nopage
.c3b5	c6 fc		report         dec  zpage1+1
.c3b7	68		nopage         pla
.c3b8	28		               plp
.c3b9	60		               rts
.c3ba			inczpage2
.c3ba			inczp2
.c3ba	08		               php
.c3bb	48		               pha
.c3bc	e6 fd		               inc  zpage2
.c3be	a5 fd		               lda  zpage2
.c3c0	d0 02		               bne  nopage
.c3c2	e6 fe		               inc  zpage2+1
.c3c4	68		nopage         pla
.c3c5	28		               plp
.c3c6	60		               rts
.c3c7			deczpage2
.c3c7			deczp2
.c3c7	08		               php
.c3c8	c6 fd		               dec  zpage2
.c3ca	a5 fd		               lda  zpage2
.c3cc	c9 ff		               cmp  #$ff
.c3ce	f0 02		               beq  report
.c3d0	d0 02		               bne  nopage
.c3d2	c6 fe		report         dec  zpage2+1
.c3d4	28		nopage         plp
.c3d5	60		               rts
.c3d6			savezp1
.c3d6	08		               php
.c3d7	48		               pha
.c3d8	a5 fb		               lda  zpage1
.c3da	8d 67 c4	               sta  zp1
.c3dd	a5 fc		               lda  zpage1+1
.c3df	8d 68 c4	               sta  zp1+1
.c3e2	68		               pla
.c3e3	28		               plp
.c3e4	60		               rts
.c3e5			restzp1
.c3e5	08		               php
.c3e6	48		               pha
.c3e7	ad 67 c4	               lda  zp1
.c3ea	85 fb		               sta  zpage1
.c3ec	ad 68 c4	               lda  zp1+1
.c3ef	85 fc		               sta  zpage1+1
.c3f1	68		               pla
.c3f2	28		               plp
.c3f3	60		               rts
.c3f4			savezp2
.c3f4	08		               php
.c3f5	48		               pha
.c3f6	a5 fd		               lda  zpage2
.c3f8	8d 69 c4	               sta  zp2
.c3fb	a5 fe		               lda  zpage2+1
.c3fd	8d 6a c4	               sta  zp2+1
.c400	68		               pla
.c401	28		               plp
.c402	60		               rts
.c403			restzp2
.c403	08		               php
.c404	48		               pha
.c405	ad 69 c4	               lda  zp2
.c408	85 fd		               sta  zpage2
.c40a	ad 6a c4	               lda  zp2+1
.c40d	85 fe		               sta  zpage2+1
.c40f	68		               pla
.c410	28		               plp
.c411	60		               rts
.c412			xy2addr
.c412	08		               php
.c413	48		               pha
.c414	8a		               txa
.c415	48		               pha
.c416	98		               tya
.c417	48		               pha
.c418	ad 62 c4	               lda  addr1+1
.c41b	8d 64 c4	               sta  addr2+1
.c41e	ad 61 c4	               lda  addr1
.c421	8d 63 c4	               sta  addr2
.c424	c0 00		               cpy  #$00
.c426	f0 0f		               beq  addx
.c428	18		moreline       clc
.c429	6d 60 c4	               adc  ymult
.c42c	90 03		               bcc  norepy
.c42e	ee 64 c4	               inc  addr2+1
.c431	8d 63 c4	norepy         sta  addr2
.c434	88		               dey
.c435	d0 f1		               bne  moreline
.c437	8a		addx           txa
.c438	18		               clc
.c439	6d 63 c4	               adc  addr2
.c43c	90 03		               bcc  thatsit
.c43e	ee 64 c4	               inc  addr2+1
.c441	8d 63 c4	thatsit        sta  addr2
.c444	68		               pla
.c445	a8		               tay
.c446	68		               pla
.c447	aa		               tax
.c448	68		               pla
.c449	28		               plp
.c44a	60		               rts
.c44b			loop
.c44b	ce 6b c4	               dec  loopcount
.c44e	d0 03		               bne  norep
.c450	ce 6c c4	               dec  loopcount+1
.c453	ad 6b c4	norep          lda  loopcount
.c456	c9 00		               cmp  #$00
.c458	d0 05		               bne  out
.c45a	4d 6c c4	               eor  loopcount+1
.c45d	c9 ff		               cmp  #$ff
.c45f	60		out            rts
>c460	28		ymult          .byte     40
>c461	00 00		addr1          .word     $0000
>c463	00 00		addr2          .word     $0000
>c465	00 00		bytecnt        .word     $0000
>c467	00 00		zp1            .word     $0000
>c469	00 00		zp2            .word     $0000
>c46b	00 00		loopcount      .word     $0000

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>c46d	01		a2hexcol       .byte     1              ; pour aputscxy
>c46e	00		a2hexbkcol     .byte     %00000000
.c46f			a2hexpos
>c46f	00		a2hexpx        .byte     0              ; pour aputsxy
>c470	00		a2hexpy        .byte     0
>c471	24		a2hexprefix    .byte     "$"            ; pour aputs
>c472	00 00		a2hexstr       .word     $00
>c474	00 00		               .word     $00
>c476	00		               .byte     0              ; 0 end string
>c477	01		abincol        .byte     1
>c478	00		abinbkcol      .byte     %00000000
>c479	30 30 30 30	abin           .null     "00000000"
>c47d	30 30 30 30 00
>c482	20 20 20 00	adec           .null     "   "
.c486			putahexfmtxy
.c486	20 47 c2	               jsr  push
.c489	20 d5 c4	               jsr  atohex
.c48c	ae 6f c4	               ldx  a2hexpx
.c48f	ac 70 c4	               ldy  a2hexpy
.c492	20 6b c1	               jsr  gotoxy
.c495	a2 71		               ldx  #<a2hexprefix
.c497	a0 c4		               ldy  #>a2hexprefix
.c499	20 51 c1	               jsr  puts
.c49c	20 82 c2	               jsr  pop
.c49f	60		               rts
.c4a0			putahexfmt
.c4a0	20 47 c2	               jsr  push
.c4a3	20 d5 c4	               jsr  atohex
.c4a6	a2 71		               ldx  #<a2hexprefix
.c4a8	a0 c4		               ldy  #>a2hexprefix
.c4aa	20 51 c1	               jsr  puts
.c4ad	20 82 c2	               jsr  pop
.c4b0	60		               rts
.c4b1			putahex
.c4b1	20 47 c2	               jsr  push
.c4b4	20 d5 c4	               jsr  atohex
.c4b7	a2 72		               ldx  #<a2hexstr
.c4b9	a0 c4		               ldy  #>a2hexstr
.c4bb	20 51 c1	               jsr  puts
.c4be	20 82 c2	               jsr  pop
.c4c1	60		               rts
.c4c2			nibtohex
.c4c2	08		               php
.c4c3	29 0f		               and  #$0f
.c4c5	f8		               sed
.c4c6	18		               clc
.c4c7	69 90		               adc  #$90
.c4c9	69 40		               adc  #$40
.c4cb	d8		               cld
.c4cc	28		               plp
.c4cd	60		               rts
.c4ce			lsra4bits
.c4ce	08		               php
.c4cf	4a		               lsr
.c4d0	4a		               lsr
.c4d1	4a		               lsr
.c4d2	4a		               lsr
.c4d3	28		               plp
.c4d4	60		               rts
.c4d5			atohex
.c4d5	08		               php
.c4d6	48		               pha
.c4d7	48		               pha
.c4d8	20 ce c4	               jsr  lsra4bits
.c4db	20 c2 c4	               jsr  nibtohex
.c4de	8d 72 c4	               sta  a2hexstr
.c4e1	68		               pla
.c4e2	20 c2 c4	               jsr  nibtohex
.c4e5	8d 73 c4	               sta  a2hexstr+1
.c4e8	a9 00		               lda  #$00                ; set end of string
.c4ea	8d 74 c4	               sta  a2hexstr+2
.c4ed	68		               pla
.c4ee	28		               plp
.c4ef	60		               rts
.c4f0			xy2hex
.c4f0	20 47 c2	               jsr  push
.c4f3	20 d5 c4	               jsr  atohex
.c4f6	8a		               txa
.c4f7	48		               pha
.c4f8	20 ce c4	               jsr  lsra4bits
.c4fb	20 c2 c4	               jsr  nibtohex
.c4fe	8d 72 c4	               sta  a2hexstr
.c501	68		               pla
.c502	20 c2 c4	               jsr  nibtohex
.c505	8d 73 c4	               sta  a2hexstr+1
.c508	98		               tya
.c509	48		               pha
.c50a	20 ce c4	               jsr  lsra4bits
.c50d	20 c2 c4	               jsr  nibtohex
.c510	8d 74 c4	               sta  a2hexstr+2
.c513	68		               pla
.c514	20 c2 c4	               jsr  nibtohex
.c517	8d 75 c4	               sta  a2hexstr+3
.c51a	a9 00		               lda  #$00                ; 0 ended string
.c51c	8d 76 c4	               sta  a2hexstr+4
.c51f	20 82 c2	               jsr  pop
.c522			atobin
.c522	20 47 c2	               jsr  push
.c525	a2 08		               ldx  #8
.c527	a0 00		               ldy  #0
.c529	18		               clc
.c52a	2a		nextbit        rol
.c52b	48		               pha
.c52c	69 00		               adc  #$00
.c52e	29 01		               and  #$01
.c530	20 c2 c4	               jsr  nibtohex
.c533	99 79 c4	               sta  abin,y
.c536	68		               pla
.c537	c8		               iny
.c538	ca		               dex
.c539	d0 ef		               bne  nextbit
.c53b	a9 00		               lda  #0
.c53d	99 79 c4	               sta  abin,y
.c540	20 82 c2	               jsr  pull
.c543	60		               rts
.c544			abinsetmccol
.c544	20 b5 c2	               jsr  pushreg
.c547	20 e4 c2	               jsr  popreg
.c54a	60		               rts
.c54b			putabin
.c54b	20 22 c5	               jsr     atobin
.c54e	20 47 c2	               jsr     push
.c551	a2 79		               ldx     #<abin
.c553	a0 c4		               ldy     #>abin
.c555	20 51 c1	               jsr     puts
.c558	20 82 c2	               jsr     pop
.c55b	60		               rts
.c55c			printabin
.c55c	20 47 c2	               jsr     push
.c55f	a2 79		               ldx     #<abin
.c561	a0 c4		               ldy     #>abin
.c563	20 51 c1	               jsr     puts
.c566	20 82 c2	               jsr     pop
.c569	60		               rts
.c56a			putabinfmt
.c56a	08		               php
.c56b	48		               pha
.c56c	a9 25		               lda     #"%"
.c56e	20 4b c1	               jsr     putch
.c571	68		               pla
.c572	20 4b c5	               jsr     putabin
.c575	28		               plp
.c576	60		               rts
.c577			putabinxy
.c577	20 6b c1	               jsr     gotoxy
.c57a	20 4b c5	               jsr     putabin
.c57d	60		               rts
.c57e			putabinfmtxy
.c57e	20 6b c1	               jsr     gotoxy
.c581	20 6a c5	               jsr     putabinfmt
.c584	60		               rts
.c585			atodec
.c585	20 47 c2	               jsr  push
.c588	f8		               sed            ; On se place en mode décimal.
.c589	aa		               tax            ; On déplace a dans x.
.c58a	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.c58c	a9 00		               lda  #$00      ; 0 dans A.
.c58e	18		nextbit        clc            ; Bit carry a 0.
.c58f	69 01		               adc  #$01      ; Ajoute 1 a A.
.c591	90 01		               bcc  decx      ; Pas de carry, pas de report.
.c593	c8		               iny            ; On incrémente Y
.c594	ca		decx           dex            ; X=X-1
.c595	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.c597	48		               pha            ; A sur le stack.
.c598	98		               tya            ; Y dans A (MSB)
.c599	20 c2 c4	               jsr  nibtohex  ; a hex petsci ...
.c59c	8d 82 c4	               sta  adec      ; ... dans tampon.
.c59f	68		               pla            ; Récupere A
.c5a0	48		               pha            ;
.c5a1	20 c2 c4	               jsr  nibtohex
.c5a4	8d 84 c4	               sta  adec+2
.c5a7	68		               pla
.c5a8	6a		               ror
.c5a9	6a		               ror
.c5aa	6a		               ror
.c5ab	6a		               ror
.c5ac	20 c2 c4	               jsr  nibtohex
.c5af	8d 83 c4	               sta  adec+1
.c5b2	d8		               cld            ; On revient en mode binaire.
.c5b3	20 82 c2	               jsr  pull
.c5b6	60		               rts
.c5b7			putadec
.c5b7	20 47 c2	               jsr  push
.c5ba	20 85 c5	               jsr  atodec
.c5bd	a2 82		               ldx  #<adec
.c5bf	a0 c4		               ldy  #>adec+1
.c5c1	20 51 c1	               jsr  puts
.c5c4	20 82 c2	               jsr  pop
.c5c7	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.c5c8			waitstop
.c5c8	20 47 c2	               jsr  push
.c5cb	20 ed f6	wait           jsr  k_stop
.c5ce	d0 fb		               bne  wait
.c5d0	20 82 c2	               jsr  pop
.c5d3	60		               rts
.c5d4			anykey
.c5d4	08		               php
.c5d5	48		               pha
.c5d6	a5 cb		nokey          lda 203
.c5d8	c9 40		               cmp #64
.c5da	f0 fa		               beq nokey
.c5dc	20 e2 c5	               jsr releasekey
.c5df	68		               pla
.c5e0	28		               plp
.c5e1	60		               rts
.c5e2			releasekey
.c5e2	08		               php
.c5e3	48		               pha
.c5e4	a5 cb		keypressed     lda 203
.c5e6	c9 40		               cmp #64
.c5e8	d0 fa		               bne keypressed
.c5ea	68		               pla
.c5eb	28		               plp
.c5ec	60		               rts
.c5ed			getkey
.c5ed	20 e4 ff	gkagain        jsr  getin
.c5f0	c9 00		               cmp  #0
.c5f2	f0 f9		               beq  gkagain
.c5f4	60		               rts
.c5f5			kbflushbuff
.c5f5	08		               php
.c5f6	48		               pha
.c5f7	20 e4 ff	again          jsr  getin
.c5fa	c9 00		               cmp  #0
.c5fc	d0 f9		               bne  again
.c5fe	68		               pla
.c5ff	28		               plp
.c600	60		               rts
.c601			waitkey
.c601	20 47 c2	               jsr  push
.c604	8d 52 c6	               sta  thekey
.c607	20 e4 ff	nope           jsr  getin
.c60a	20 d2 ff	               jsr  chrout
.c60d	cd 52 c6	               cmp  thekey
.c610	d0 f5		               bne  nope
.c612	20 d2 ff	               jsr  chrout
.c615	20 82 c2	               jsr  pop
.c618	60		               rts
.c619			waitspace
.c619	20 47 c2	               jsr  push
.c61c	a9 7f		wait           lda  #$7f  ;%01111111
.c61e	8d 00 dc	               sta  $dc00
.c621	ad 01 dc	               lda  $dc01
.c624	29 10		               and  #$10  ;mask %00010000
.c626	d0 f4		               bne  wait
.c628	20 82 c2	               jsr  pop
.c62b			waitsstop
.c62b	20 47 c2	               jsr  push
.c62e	20 ed f6	wait           jsr  k_stop  ;%01111111
.c631	d0 fb		               bne  wait
.c633	20 82 c2	               jsr  pop
.c636			waitreturn
.c636	20 47 c2	               jsr  push
.c639	ad 53 c6	               lda  thecount
.c63c	8d 00 04	               sta  scrnram
.c63f	a9 02		               lda  #$02
.c641	8d 00 d8	               sta  colorram
.c644	20 e4 ff	nope           jsr  getin
.c647	c9 0d		nohex          cmp  #$0d
.c649	d0 f9		               bne  nope
.c64b	ee 53 c6	               inc  thecount
.c64e	20 82 c2	               jsr  pop
.c651	60		               rts
>c652	00		thekey         .byte   0
>c653	01		thecount       .byte   $01
>c654	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>c658	00 00 00 00 00 00 00 00 00 0d 00 00
>c664	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>c668	00 00 00 00 00 00 00 00 00 00 00 00
>c674	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>c678	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>c684	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>c688	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>c694	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>c698	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>c6a4	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>c6a8	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>c6b4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>c6b8	00 00 00 00 00 00 00 00 00 00 00 00
>c6c4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>c6c8	00 00 00 00 00 00 00 00 00 00 00 00
>c6d4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>c6d8	00 00 00 00 00 00 00 00 00 00 00 00
>c6e4	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>c6e8	00 00 00 00 00 00 00 00 00 00 00 00
>c6f4	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>c6f8	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>c704	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>c708	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>c714	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>c718	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>c724	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>c728	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>c734	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>c738	00 00 00 00 00 00 00 00 00 00 00 00
>c744	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>c748	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: slbug64.asm


;******  End of listing

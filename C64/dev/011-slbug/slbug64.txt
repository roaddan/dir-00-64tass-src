
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -C -m -a -I /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib -i -L slbug64.txt -o slbug64.prg slbug64.asm
; Fri Oct 17 14:17:59 2025

;Offset	;Hex		;Source

;******  Processing input file: slbug64.asm

="20251017-125301"	                Version = "20251017-125301"

;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/header-c64.asm

>0801	29 08		bcmd1          .word bcmd2         ;Adresse de la commande basic suivante.
>0803	01 00		               .word 1             ;Numero de la ligne Basic.
>0805	8f		               .byte $8F           ;Le token de la commande REM du Basic
>0806	20 50 52 4f	               .text " programmation assembleur sur c64."
>080a	47 52 41 4d 4d 41 54 49 4f 4e 20 41 53 53 45 4d
>081a	42 4c 45 55 52 20 53 55 52 20 43 36 34 2e
>0828	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0829	44 08		bcmd2          .word bcmd3         ;Adresse de la commande basic suivante.
>082b	02 00		               .word 2             ;Numero de la ligne Basic.
>082d	8f		               .byte $8F           ;Le token de la commande REM du Basic
>082e	20 50 41 52	               .text " par daniel lafrance."
>0832	20 44 41 4e 49 45 4c 20 4c 41 46 52 41 4e 43 45
>0842	2e
>0843	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>0844	4f 08		bcmd3          .word bcmd4         ;Adresse de la commande basic suivante.
>0846	03 00		               .word 3             ;Numero de la ligne Basic.
>0848	9e		               .byte $9e           ;Le token de la commande SYS du Basic
>0849	30 32 31 32	               .text format("%05d",hpgmstart)
>084d	39
>084e	00		               .byte $00           ;Un zéro pour indiquer la fin de cette
>084f	00 00		bcmd4          .word $0000         ;L'adresse de la commande Basic suivante.
.0851	20 55 08	hpgmstart     jsr   main           ; Le programme principale doit s'appeler "main"
.0854	60		              rts                  ; ... doit se rerminer par un RTS.

;******  Return to file: slbug64.asm

.0855			main
.0855	20 a5 11	               jsr  scrmaninit
.0858	08		               php
.0859	48		               pha
.085a	a9 0e		               lda  #14
.085c	20 d2 ff	               jsr  $ffd2
.085f	68		               pla
.0860	28		               plp
.0861	08		               php
.0862	48		               pha
.0863	a9 08		               lda  #$08
.0865	20 d2 ff	               jsr  $ffd2
.0868	68		               pla
.0869	28		               plp
.086a	a9 05		               lda  #cvert
.086c	8d 20 d0	               sta  vicbordcol
.086f	a9 06		               lda  #cbleu
.0871	8d 21 d0	               sta  vicbackcol
.0874	a9 01		               lda  #cblanc
.0876	8d 86 02	               sta  bascol
.0879	20 c5 11	               jsr  cls
.087c	20 87 0c	               jsr  help
.087f	20 65 16	               jsr  anykey
.0882	20 c0 08	               jsr  slbug64
.0885	20 46 13	               jsr  pushreg
.0888	a2 00		               ldx  #0
.088a	a0 00		               ldy  #0
.088c	20 fc 11	               jsr  gotoxy
.088f	20 75 13	               jsr  popreg
.0892	20 65 16	               jsr  anykey
.0895	20 c5 11	               jsr  cls
.0898	20 46 13	               jsr  pushreg
.089b	48		               pha
.089c	a9 05		               lda  #cvert
.089e	8d 20 d0	               sta  $d020
.08a1	68		               pla
.08a2	48		               pha
.08a3	a9 06		               lda  #cbleu
.08a5	8d 21 d0	               sta  $d021
.08a8	68		               pla
.08a9	48		               pha
.08aa	a9 01		               lda  #cblanc
.08ac	8d 86 02	               sta  bascol
.08af	68		               pla
.08b0	20 75 13	               jsr  popreg
.08b3	08		               php
.08b4	48		               pha
.08b5	a9 09		               lda  #$09
.08b7	20 d2 ff	               jsr  $ffd2
.08ba	68		               pla
.08bb	28		               plp
.08bc	20 42 a6	               jsr  $a642
.08bf	60		               rts
.08c0			slbug64
.08c0	08		                php
.08c1	48		                pha
.08c2	ad 21 d0	                lda vicbackcol
.08c5	48		                pha
.08c6	a9 00		                lda #cnoir
.08c8	8d 21 d0	                sta vicbackcol
.08cb	8d 20 d0	                sta vicbordcol
.08ce	20 65 16	                jsr anykey
.08d1	68		                pla
.08d2	20 46 13	               jsr  pushreg
.08d5	a2 00		               ldx  #0
.08d7	a0 00		               ldy  #0
.08d9	20 fc 11	               jsr  gotoxy
.08dc	20 75 13	               jsr  popreg
.08df	20 c5 11	                jsr cls
.08e2	08		                php                 ; Sauvegarde les registres.
.08e3	48		                pha
.08e4	a9 00		                lda #0           ; Initialise le paramètre top et la ...
.08e6	8d b5 1a	                sta drawbox_top
.08e9	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.08ec	a9 00		                lda #0          ; Initialise le paramètre left.
.08ee	8d b6 1a	                sta drawbox_left
.08f1	a9 28		                lda #40         ; Initialise le paramètre width.
.08f3	8d b7 1a	                sta drawbox_width
.08f6	a9 18		                lda #24        ; Initialise le paramètre height.
.08f8	8d b8 1a	                sta drawbox_height
.08fb	a9 0c		                lda #cgris1        ; Initialise le paramètre colour.
.08fd	8d b9 1a	                sta drawbox_colour
.0900	68		                pla                 ; Récupère les registres.
.0901	28		                plp
.0902	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0905	a9 12		                    lda #18         ; le titre zzzzzz
.0907	20 d2 ff	                    jsr chrout
.090a	20 46 13	                jsr pushreg
.090d	ad 86 02	                lda bascol
.0910	48		                pha
.0911	a9 0c		                lda #cgris1
.0913	8d 86 02	                sta bascol
.0916	a0 01		                ldy #0+1
.0918	a2 00		                ldx  #0
.091a	18		                clc
.091b	20 f0 ff	                jsr  plot
.091e	a2 03		                ldx  #<titre
.0920	a0 10		                ldy  #>titre
.0922	20 e2 11	                jsr  puts
.0925	68		                pla
.0926	8d 86 02	                sta  bascol
.0929	20 75 13	                jsr  popreg
.092c	a9 92		                    lda #146
.092e	20 d2 ff	                    jsr chrout
.0931	ee 0b 10	                inc titre+8
.0934	08		                php                 ; Sauvegarde les registres.
.0935	48		                pha
.0936	a9 01		                lda #1           ; Initialise le paramètre top et la ...
.0938	8d b5 1a	                sta drawbox_top
.093b	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.093e	a9 01		                lda #1          ; Initialise le paramètre left.
.0940	8d b6 1a	                sta drawbox_left
.0943	a9 26		                lda #38         ; Initialise le paramètre width.
.0945	8d b7 1a	                sta drawbox_width
.0948	a9 05		                lda #5        ; Initialise le paramètre height.
.094a	8d b8 1a	                sta drawbox_height
.094d	a9 17		                lda #cjaune+reverse        ; Initialise le paramètre colour.
.094f	8d b9 1a	                sta drawbox_colour
.0952	68		                pla                 ; Récupère les registres.
.0953	28		                plp
.0954	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0957	20 46 13	                jsr pushreg
.095a	ad 86 02	                lda bascol
.095d	48		                pha
.095e	a9 17		                lda #cjaune+reverse
.0960	8d 86 02	                sta bascol
.0963	a0 02		                ldy #1+1
.0965	a2 01		                ldx  #1
.0967	18		                clc
.0968	20 f0 ff	                jsr  plot
.096b	a2 03		                ldx  #<titre
.096d	a0 10		                ldy  #>titre
.096f	20 e2 11	                jsr  puts
.0972	68		                pla
.0973	8d 86 02	                sta  bascol
.0976	20 75 13	                jsr  popreg
.0979	ee 0b 10	                inc titre+8
.097c	08		                php                 ; Sauvegarde les registres.
.097d	48		                pha
.097e	a9 06		                lda #6           ; Initialise le paramètre top et la ...
.0980	8d b5 1a	                sta drawbox_top
.0983	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0986	a9 01		                lda #1          ; Initialise le paramètre left.
.0988	8d b6 1a	                sta drawbox_left
.098b	a9 13		                lda #19         ; Initialise le paramètre width.
.098d	8d b7 1a	                sta drawbox_width
.0990	a9 11		                lda #17        ; Initialise le paramètre height.
.0992	8d b8 1a	                sta drawbox_height
.0995	a9 13		                lda #ccyan+reverse        ; Initialise le paramètre colour.
.0997	8d b9 1a	                sta drawbox_colour
.099a	68		                pla                 ; Récupère les registres.
.099b	28		                plp
.099c	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.099f	20 46 13	                jsr pushreg
.09a2	ad 86 02	                lda bascol
.09a5	48		                pha
.09a6	a9 13		                lda #ccyan+reverse
.09a8	8d 86 02	                sta bascol
.09ab	a0 02		                ldy #1+1
.09ad	a2 06		                ldx  #6
.09af	18		                clc
.09b0	20 f0 ff	                jsr  plot
.09b3	a2 03		                ldx  #<titre
.09b5	a0 10		                ldy  #>titre
.09b7	20 e2 11	                jsr  puts
.09ba	68		                pla
.09bb	8d 86 02	                sta  bascol
.09be	20 75 13	                jsr  popreg
.09c1	ee 0b 10	                inc titre+8
.09c4	08		                php                 ; Sauvegarde les registres.
.09c5	48		                pha
.09c6	a9 06		                lda #6           ; Initialise le paramètre top et la ...
.09c8	8d b5 1a	                sta drawbox_top
.09cb	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.09ce	a9 14		                lda #20          ; Initialise le paramètre left.
.09d0	8d b6 1a	                sta drawbox_left
.09d3	a9 13		                lda #19         ; Initialise le paramètre width.
.09d5	8d b7 1a	                sta drawbox_width
.09d8	a9 11		                lda #17        ; Initialise le paramètre height.
.09da	8d b8 1a	                sta drawbox_height
.09dd	a9 05		                lda #cvert        ; Initialise le paramètre colour.
.09df	8d b9 1a	                sta drawbox_colour
.09e2	68		                pla                 ; Récupère les registres.
.09e3	28		                plp
.09e4	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.09e7	a9 12		                    lda #18         ; le titre zzzzzz
.09e9	20 d2 ff	                    jsr chrout
.09ec	20 46 13	                jsr pushreg
.09ef	ad 86 02	                lda bascol
.09f2	48		                pha
.09f3	a9 05		                lda #cvert
.09f5	8d 86 02	                sta bascol
.09f8	a0 15		                ldy #20+1
.09fa	a2 06		                ldx  #6
.09fc	18		                clc
.09fd	20 f0 ff	                jsr  plot
.0a00	a2 03		                ldx  #<titre
.0a02	a0 10		                ldy  #>titre
.0a04	20 e2 11	                jsr  puts
.0a07	68		                pla
.0a08	8d 86 02	                sta  bascol
.0a0b	20 75 13	                jsr  popreg
.0a0e	a9 92		                    lda #146
.0a10	20 d2 ff	                    jsr chrout
.0a13	20 65 16	                jsr anykey
.0a16	ee 0b 10	                inc titre+8
.0a19	08		                php                 ; Sauvegarde les registres.
.0a1a	48		                pha
.0a1b	a9 05		                lda #5           ; Initialise le paramètre top et la ...
.0a1d	8d b5 1a	                sta drawbox_top
.0a20	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0a23	a9 05		                lda #5          ; Initialise le paramètre left.
.0a25	8d b6 1a	                sta drawbox_left
.0a28	a9 11		                lda #17         ; Initialise le paramètre width.
.0a2a	8d b7 1a	                sta drawbox_width
.0a2d	a9 05		                lda #5        ; Initialise le paramètre height.
.0a2f	8d b8 1a	                sta drawbox_height
.0a32	a9 1c		                lda #cgris1+reverse        ; Initialise le paramètre colour.
.0a34	8d b9 1a	                sta drawbox_colour
.0a37	68		                pla                 ; Récupère les registres.
.0a38	28		                plp
.0a39	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0a3c	20 46 13	                jsr pushreg
.0a3f	ad 86 02	                lda bascol
.0a42	48		                pha
.0a43	a9 1c		                lda #cgris1+reverse
.0a45	8d 86 02	                sta bascol
.0a48	a0 06		                ldy #5+1
.0a4a	a2 05		                ldx  #5
.0a4c	18		                clc
.0a4d	20 f0 ff	                jsr  plot
.0a50	a2 03		                ldx  #<titre
.0a52	a0 10		                ldy  #>titre
.0a54	20 e2 11	                jsr  puts
.0a57	68		                pla
.0a58	8d 86 02	                sta  bascol
.0a5b	20 75 13	                jsr  popreg
.0a5e	ee 0b 10	                inc titre+8
.0a61	08		                php                 ; Sauvegarde les registres.
.0a62	48		                pha
.0a63	a9 05		                lda #5           ; Initialise le paramètre top et la ...
.0a65	8d b5 1a	                sta drawbox_top
.0a68	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0a6b	a9 14		                lda #20          ; Initialise le paramètre left.
.0a6d	8d b6 1a	                sta drawbox_left
.0a70	a9 11		                lda #17         ; Initialise le paramètre width.
.0a72	8d b7 1a	                sta drawbox_width
.0a75	a9 05		                lda #5        ; Initialise le paramètre height.
.0a77	8d b8 1a	                sta drawbox_height
.0a7a	a9 0b		                lda #cgris0        ; Initialise le paramètre colour.
.0a7c	8d b9 1a	                sta drawbox_colour
.0a7f	68		                pla                 ; Récupère les registres.
.0a80	28		                plp
.0a81	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0a84	a9 12		                    lda #18         ; le titre zzzzzz
.0a86	20 d2 ff	                    jsr chrout
.0a89	20 46 13	                jsr pushreg
.0a8c	ad 86 02	                lda bascol
.0a8f	48		                pha
.0a90	a9 0b		                lda #cgris0
.0a92	8d 86 02	                sta bascol
.0a95	a0 15		                ldy #20+1
.0a97	a2 05		                ldx  #5
.0a99	18		                clc
.0a9a	20 f0 ff	                jsr  plot
.0a9d	a2 03		                ldx  #<titre
.0a9f	a0 10		                ldy  #>titre
.0aa1	20 e2 11	                jsr  puts
.0aa4	68		                pla
.0aa5	8d 86 02	                sta  bascol
.0aa8	20 75 13	                jsr  popreg
.0aab	a9 92		                    lda #146
.0aad	20 d2 ff	                    jsr chrout
.0ab0	ee 0b 10	                inc titre+8
.0ab3	08		                php                 ; Sauvegarde les registres.
.0ab4	48		                pha
.0ab5	a9 09		                lda #9           ; Initialise le paramètre top et la ...
.0ab7	8d b5 1a	                sta drawbox_top
.0aba	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0abd	a9 09		                lda #9          ; Initialise le paramètre left.
.0abf	8d b6 1a	                sta drawbox_left
.0ac2	a9 11		                lda #17         ; Initialise le paramètre width.
.0ac4	8d b7 1a	                sta drawbox_width
.0ac7	a9 05		                lda #5        ; Initialise le paramètre height.
.0ac9	8d b8 1a	                sta drawbox_height
.0acc	a9 1a		                lda #crose+reverse        ; Initialise le paramètre colour.
.0ace	8d b9 1a	                sta drawbox_colour
.0ad1	68		                pla                 ; Récupère les registres.
.0ad2	28		                plp
.0ad3	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0ad6	20 46 13	                jsr pushreg
.0ad9	ad 86 02	                lda bascol
.0adc	48		                pha
.0add	a9 1a		                lda #crose+reverse
.0adf	8d 86 02	                sta bascol
.0ae2	a0 0a		                ldy #9+1
.0ae4	a2 09		                ldx  #9
.0ae6	18		                clc
.0ae7	20 f0 ff	                jsr  plot
.0aea	a2 03		                ldx  #<titre
.0aec	a0 10		                ldy  #>titre
.0aee	20 e2 11	                jsr  puts
.0af1	68		                pla
.0af2	8d 86 02	                sta  bascol
.0af5	20 75 13	                jsr  popreg
.0af8	ee 0b 10	                inc titre+8
.0afb	08		                php                 ; Sauvegarde les registres.
.0afc	48		                pha
.0afd	a9 0b		                lda #11           ; Initialise le paramètre top et la ...
.0aff	8d b5 1a	                sta drawbox_top
.0b02	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0b05	a9 0b		                lda #11          ; Initialise le paramètre left.
.0b07	8d b6 1a	                sta drawbox_left
.0b0a	a9 11		                lda #17         ; Initialise le paramètre width.
.0b0c	8d b7 1a	                sta drawbox_width
.0b0f	a9 05		                lda #5        ; Initialise le paramètre height.
.0b11	8d b8 1a	                sta drawbox_height
.0b14	a9 02		                lda #crouge        ; Initialise le paramètre colour.
.0b16	8d b9 1a	                sta drawbox_colour
.0b19	68		                pla                 ; Récupère les registres.
.0b1a	28		                plp
.0b1b	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0b1e	a9 12		                    lda #18         ; le titre zzzzzz
.0b20	20 d2 ff	                    jsr chrout
.0b23	20 46 13	                jsr pushreg
.0b26	ad 86 02	                lda bascol
.0b29	48		                pha
.0b2a	a9 02		                lda #crouge
.0b2c	8d 86 02	                sta bascol
.0b2f	a0 0c		                ldy #11+1
.0b31	a2 0b		                ldx  #11
.0b33	18		                clc
.0b34	20 f0 ff	                jsr  plot
.0b37	a2 03		                ldx  #<titre
.0b39	a0 10		                ldy  #>titre
.0b3b	20 e2 11	                jsr  puts
.0b3e	68		                pla
.0b3f	8d 86 02	                sta  bascol
.0b42	20 75 13	                jsr  popreg
.0b45	a9 92		                    lda #146
.0b47	20 d2 ff	                    jsr chrout
.0b4a	ee 0b 10	                inc titre+8
.0b4d	08		                php                 ; Sauvegarde les registres.
.0b4e	48		                pha
.0b4f	a9 0d		                lda #13           ; Initialise le paramètre top et la ...
.0b51	8d b5 1a	                sta drawbox_top
.0b54	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0b57	a9 0d		                lda #13          ; Initialise le paramètre left.
.0b59	8d b6 1a	                sta drawbox_left
.0b5c	a9 11		                lda #17         ; Initialise le paramètre width.
.0b5e	8d b7 1a	                sta drawbox_width
.0b61	a9 05		                lda #5        ; Initialise le paramètre height.
.0b63	8d b8 1a	                sta drawbox_height
.0b66	a9 14		                lda #cmauve+reverse        ; Initialise le paramètre colour.
.0b68	8d b9 1a	                sta drawbox_colour
.0b6b	68		                pla                 ; Récupère les registres.
.0b6c	28		                plp
.0b6d	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0b70	20 46 13	                jsr pushreg
.0b73	ad 86 02	                lda bascol
.0b76	48		                pha
.0b77	a9 14		                lda #cmauve+reverse
.0b79	8d 86 02	                sta bascol
.0b7c	a0 0e		                ldy #13+1
.0b7e	a2 0d		                ldx  #13
.0b80	18		                clc
.0b81	20 f0 ff	                jsr  plot
.0b84	a2 03		                ldx  #<titre
.0b86	a0 10		                ldy  #>titre
.0b88	20 e2 11	                jsr  puts
.0b8b	68		                pla
.0b8c	8d 86 02	                sta  bascol
.0b8f	20 75 13	                jsr  popreg
.0b92	ee 0b 10	                inc titre+8
.0b95	08		                php                 ; Sauvegarde les registres.
.0b96	48		                pha
.0b97	a9 0f		                lda #15           ; Initialise le paramètre top et la ...
.0b99	8d b5 1a	                sta drawbox_top
.0b9c	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0b9f	a9 0f		                lda #15          ; Initialise le paramètre left.
.0ba1	8d b6 1a	                sta drawbox_left
.0ba4	a9 11		                lda #17         ; Initialise le paramètre width.
.0ba6	8d b7 1a	                sta drawbox_width
.0ba9	a9 05		                lda #5        ; Initialise le paramètre height.
.0bab	8d b8 1a	                sta drawbox_height
.0bae	a9 06		                lda #cbleu        ; Initialise le paramètre colour.
.0bb0	8d b9 1a	                sta drawbox_colour
.0bb3	68		                pla                 ; Récupère les registres.
.0bb4	28		                plp
.0bb5	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0bb8	a9 12		                    lda #18         ; le titre zzzzzz
.0bba	20 d2 ff	                    jsr chrout
.0bbd	20 46 13	                jsr pushreg
.0bc0	ad 86 02	                lda bascol
.0bc3	48		                pha
.0bc4	a9 06		                lda #cbleu
.0bc6	8d 86 02	                sta bascol
.0bc9	a0 10		                ldy #15+1
.0bcb	a2 0f		                ldx  #15
.0bcd	18		                clc
.0bce	20 f0 ff	                jsr  plot
.0bd1	a2 03		                ldx  #<titre
.0bd3	a0 10		                ldy  #>titre
.0bd5	20 e2 11	                jsr  puts
.0bd8	68		                pla
.0bd9	8d 86 02	                sta  bascol
.0bdc	20 75 13	                jsr  popreg
.0bdf	a9 92		                    lda #146
.0be1	20 d2 ff	                    jsr chrout
.0be4	ee 0b 10	                inc titre+8
.0be7	08		                php                 ; Sauvegarde les registres.
.0be8	48		                pha
.0be9	a9 11		                lda #17           ; Initialise le paramètre top et la ...
.0beb	8d b5 1a	                sta drawbox_top
.0bee	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0bf1	a9 11		                lda #17          ; Initialise le paramètre left.
.0bf3	8d b6 1a	                sta drawbox_left
.0bf6	a9 11		                lda #17         ; Initialise le paramètre width.
.0bf8	8d b7 1a	                sta drawbox_width
.0bfb	a9 05		                lda #5        ; Initialise le paramètre height.
.0bfd	8d b8 1a	                sta drawbox_height
.0c00	a9 13		                lda #ccyan+reverse        ; Initialise le paramètre colour.
.0c02	8d b9 1a	                sta drawbox_colour
.0c05	68		                pla                 ; Récupère les registres.
.0c06	28		                plp
.0c07	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0c0a	20 46 13	                jsr pushreg
.0c0d	ad 86 02	                lda bascol
.0c10	48		                pha
.0c11	a9 13		                lda #ccyan+reverse
.0c13	8d 86 02	                sta bascol
.0c16	a0 12		                ldy #17+1
.0c18	a2 11		                ldx  #17
.0c1a	18		                clc
.0c1b	20 f0 ff	                jsr  plot
.0c1e	a2 03		                ldx  #<titre
.0c20	a0 10		                ldy  #>titre
.0c22	20 e2 11	                jsr  puts
.0c25	68		                pla
.0c26	8d 86 02	                sta  bascol
.0c29	20 75 13	                jsr  popreg
.0c2c	ee 0b 10	                inc titre+8
.0c2f	08		                php                 ; Sauvegarde les registres.
.0c30	48		                pha
.0c31	a9 13		                lda #19           ; Initialise le paramètre top et la ...
.0c33	8d b5 1a	                sta drawbox_top
.0c36	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0c39	a9 13		                lda #19          ; Initialise le paramètre left.
.0c3b	8d b6 1a	                sta drawbox_left
.0c3e	a9 11		                lda #17         ; Initialise le paramètre width.
.0c40	8d b7 1a	                sta drawbox_width
.0c43	a9 05		                lda #5        ; Initialise le paramètre height.
.0c45	8d b8 1a	                sta drawbox_height
.0c48	a9 05		                lda #cvert        ; Initialise le paramètre colour.
.0c4a	8d b9 1a	                sta drawbox_colour
.0c4d	68		                pla                 ; Récupère les registres.
.0c4e	28		                plp
.0c4f	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0c52	a9 12		                    lda #18         ; le titre zzzzzz
.0c54	20 d2 ff	                    jsr chrout
.0c57	20 46 13	                jsr pushreg
.0c5a	ad 86 02	                lda bascol
.0c5d	48		                pha
.0c5e	a9 05		                lda #cvert
.0c60	8d 86 02	                sta bascol
.0c63	a0 14		                ldy #19+1
.0c65	a2 13		                ldx  #19
.0c67	18		                clc
.0c68	20 f0 ff	                jsr  plot
.0c6b	a2 03		                ldx  #<titre
.0c6d	a0 10		                ldy  #>titre
.0c6f	20 e2 11	                jsr  puts
.0c72	68		                pla
.0c73	8d 86 02	                sta  bascol
.0c76	20 75 13	                jsr  popreg
.0c79	a9 92		                    lda #146
.0c7b	20 d2 ff	                    jsr chrout
.0c7e	20 65 16	                jsr anykey
.0c81	20 e9 17	                jsr showregs
.0c84	68		                pla
.0c85	28		                plp
.0c86	60		                rts
=16			reverse = 16
.0c87			help
=4			left = 4
=4			top = 4
=$1			color = cblanc
=$a			color2 = crose
.0c87	20 d8 12	                jsr pushall
.0c8a	20 c5 11	                jsr cls
.0c8d	a9 0d		                lda #$0d
.0c8f	20 dc 11	                jsr putch
.0c92	20 dc 11	                jsr putch
.0c95	20 dc 11	                jsr putch
.0c98	20 dc 11	                jsr putch
.0c9b	a9 12		                lda #b_rvs_on
.0c9d	20 dc 11	                jsr putch
.0ca0	08		                php                 ; Sauvegarde les registres.
.0ca1	48		                pha
.0ca2	a9 04		                lda #top           ; Initialise le paramètre top et la ...
.0ca4	8d b5 1a	                sta drawbox_top
.0ca7	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0caa	a9 04		                lda #left          ; Initialise le paramètre left.
.0cac	8d b6 1a	                sta drawbox_left
.0caf	a9 20		                lda #32         ; Initialise le paramètre width.
.0cb1	8d b7 1a	                sta drawbox_width
.0cb4	a9 0a		                lda #10        ; Initialise le paramètre height.
.0cb6	8d b8 1a	                sta drawbox_height
.0cb9	a9 11		                lda #color+reverse        ; Initialise le paramètre colour.
.0cbb	8d b9 1a	                sta drawbox_colour
.0cbe	68		                pla                 ; Récupère les registres.
.0cbf	28		                plp
.0cc0	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0cc3	20 46 13	                jsr pushreg
.0cc6	ad 86 02	                lda bascol
.0cc9	48		                pha
.0cca	a9 11		                lda #color+reverse
.0ccc	8d 86 02	                sta bascol
.0ccf	a0 05		                ldy #left+1
.0cd1	a2 04		                ldx  #top
.0cd3	18		                clc
.0cd4	20 f0 ff	                jsr  plot
.0cd7	a2 a9		                ldx  #<texta
.0cd9	a0 0e		                ldy  #>texta
.0cdb	20 e2 11	                jsr  puts
.0cde	68		                pla
.0cdf	8d 86 02	                sta  bascol
.0ce2	20 75 13	                jsr  popreg
.0ce5	20 46 13	                jsr pushreg
.0ce8	ad 86 02	                lda bascol
.0ceb	48		                pha
.0cec	a9 01		                lda #color
.0cee	8d 86 02	                sta bascol
.0cf1	a0 05		                ldy #left+1
.0cf3	a2 06		                ldx  #top+2
.0cf5	18		                clc
.0cf6	20 f0 ff	                jsr  plot
.0cf9	a2 c4		                ldx  #<textb
.0cfb	a0 0e		                ldy  #>textb
.0cfd	20 e2 11	                jsr  puts
.0d00	68		                pla
.0d01	8d 86 02	                sta  bascol
.0d04	20 75 13	                jsr  popreg
.0d07	20 46 13	                jsr pushreg
.0d0a	ad 86 02	                lda bascol
.0d0d	48		                pha
.0d0e	a9 01		                lda #color
.0d10	8d 86 02	                sta bascol
.0d13	a0 05		                ldy #left+1
.0d15	a2 07		                ldx  #top+3
.0d17	18		                clc
.0d18	20 f0 ff	                jsr  plot
.0d1b	a2 e3		                ldx  #<textc
.0d1d	a0 0e		                ldy  #>textc
.0d1f	20 e2 11	                jsr  puts
.0d22	68		                pla
.0d23	8d 86 02	                sta  bascol
.0d26	20 75 13	                jsr  popreg
.0d29	20 46 13	                jsr pushreg
.0d2c	ad 86 02	                lda bascol
.0d2f	48		                pha
.0d30	a9 01		                lda #color
.0d32	8d 86 02	                sta bascol
.0d35	a0 05		                ldy #left+1
.0d37	a2 08		                ldx  #top+4
.0d39	18		                clc
.0d3a	20 f0 ff	                jsr  plot
.0d3d	a2 02		                ldx  #<textd
.0d3f	a0 0f		                ldy  #>textd
.0d41	20 e2 11	                jsr  puts
.0d44	68		                pla
.0d45	8d 86 02	                sta  bascol
.0d48	20 75 13	                jsr  popreg
.0d4b	20 46 13	                jsr pushreg
.0d4e	ad 86 02	                lda bascol
.0d51	48		                pha
.0d52	a9 01		                lda #color
.0d54	8d 86 02	                sta bascol
.0d57	a0 05		                ldy #left+1
.0d59	a2 0a		                ldx  #top+6
.0d5b	18		                clc
.0d5c	20 f0 ff	                jsr  plot
.0d5f	a2 21		                ldx  #<texte
.0d61	a0 0f		                ldy  #>texte
.0d63	20 e2 11	                jsr  puts
.0d66	68		                pla
.0d67	8d 86 02	                sta  bascol
.0d6a	20 75 13	                jsr  popreg
.0d6d	20 46 13	                jsr pushreg
.0d70	ad 86 02	                lda bascol
.0d73	48		                pha
.0d74	a9 01		                lda #color
.0d76	8d 86 02	                sta bascol
.0d79	a0 05		                ldy #left+1
.0d7b	a2 0b		                ldx  #top+7
.0d7d	18		                clc
.0d7e	20 f0 ff	                jsr  plot
.0d81	a2 40		                ldx  #<textf
.0d83	a0 0f		                ldy  #>textf
.0d85	20 e2 11	                jsr  puts
.0d88	68		                pla
.0d89	8d 86 02	                sta  bascol
.0d8c	20 75 13	                jsr  popreg
.0d8f	20 46 13	                jsr pushreg
.0d92	ad 86 02	                lda bascol
.0d95	48		                pha
.0d96	a9 01		                lda #color
.0d98	8d 86 02	                sta bascol
.0d9b	a0 05		                ldy #left+1
.0d9d	a2 0c		                ldx  #top+8
.0d9f	18		                clc
.0da0	20 f0 ff	                jsr  plot
.0da3	a2 5f		                ldx  #<textg
.0da5	a0 0f		                ldy  #>textg
.0da7	20 e2 11	                jsr  puts
.0daa	68		                pla
.0dab	8d 86 02	                sta  bascol
.0dae	20 75 13	                jsr  popreg
.0db1	08		                php                 ; Sauvegarde les registres.
.0db2	48		                pha
.0db3	a9 0f		                lda #top+11           ; Initialise le paramètre top et la ...
.0db5	8d b5 1a	                sta drawbox_top
.0db8	8d ba 1a	                sta drawbox_curline ; ... position de la ligne à traiter.
.0dbb	a9 04		                lda #left          ; Initialise le paramètre left.
.0dbd	8d b6 1a	                sta drawbox_left
.0dc0	a9 20		                lda #32         ; Initialise le paramètre width.
.0dc2	8d b7 1a	                sta drawbox_width
.0dc5	a9 06		                lda #6        ; Initialise le paramètre height.
.0dc7	8d b8 1a	                sta drawbox_height
.0dca	a9 1a		                lda #color2+reverse        ; Initialise le paramètre colour.
.0dcc	8d b9 1a	                sta drawbox_colour
.0dcf	68		                pla                 ; Récupère les registres.
.0dd0	28		                plp
.0dd1	20 98 1a	                jsr db_drawbox      ; Dessine la fenêtre.
.0dd4	20 46 13	                jsr pushreg
.0dd7	ad 86 02	                lda bascol
.0dda	48		                pha
.0ddb	a9 1a		                lda #color2+reverse
.0ddd	8d 86 02	                sta bascol
.0de0	a0 05		                ldy #left+1
.0de2	a2 0f		                ldx  #top+11
.0de4	18		                clc
.0de5	20 f0 ff	                jsr  plot
.0de8	a2 7e		                ldx  #<texth
.0dea	a0 0f		                ldy  #>texth
.0dec	20 e2 11	                jsr  puts
.0def	68		                pla
.0df0	8d 86 02	                sta  bascol
.0df3	20 75 13	                jsr  popreg
.0df6	20 46 13	                jsr pushreg
.0df9	ad 86 02	                lda bascol
.0dfc	48		                pha
.0dfd	a9 0a		                lda #color2
.0dff	8d 86 02	                sta bascol
.0e02	a0 05		                ldy #left+1
.0e04	a2 11		                ldx  #top+13
.0e06	18		                clc
.0e07	20 f0 ff	                jsr  plot
.0e0a	a2 8d		                ldx  #<texti
.0e0c	a0 0f		                ldy  #>texti
.0e0e	20 e2 11	                jsr  puts
.0e11	68		                pla
.0e12	8d 86 02	                sta  bascol
.0e15	20 75 13	                jsr  popreg
.0e18	20 46 13	                jsr pushreg
.0e1b	ad 86 02	                lda bascol
.0e1e	48		                pha
.0e1f	a9 0a		                lda #color2
.0e21	8d 86 02	                sta bascol
.0e24	a0 05		                ldy #left+1
.0e26	a2 12		                ldx  #top+14
.0e28	18		                clc
.0e29	20 f0 ff	                jsr  plot
.0e2c	a2 ac		                ldx  #<textj
.0e2e	a0 0f		                ldy  #>textj
.0e30	20 e2 11	                jsr  puts
.0e33	68		                pla
.0e34	8d 86 02	                sta  bascol
.0e37	20 75 13	                jsr  popreg
.0e3a	20 46 13	                jsr pushreg
.0e3d	ad 86 02	                lda bascol
.0e40	48		                pha
.0e41	a9 0a		                lda #color2
.0e43	8d 86 02	                sta bascol
.0e46	a0 05		                ldy #left+1
.0e48	a2 13		                ldx  #top+15
.0e4a	18		                clc
.0e4b	20 f0 ff	                jsr  plot
.0e4e	a2 cb		                ldx  #<textk
.0e50	a0 0f		                ldy  #>textk
.0e52	20 e2 11	                jsr  puts
.0e55	68		                pla
.0e56	8d 86 02	                sta  bascol
.0e59	20 75 13	                jsr  popreg
.0e5c	a9 92		                lda #b_rvs_off
.0e5e	20 dc 11	                jsr putch
.0e61	20 46 13	                jsr pushreg
.0e64	ad 86 02	                lda bascol
.0e67	48		                pha
.0e68	a9 01		                lda #cblanc
.0e6a	8d 86 02	                sta bascol
.0e6d	a0 0f		                ldy #39-24
.0e6f	a2 18		                ldx  #24
.0e71	18		                clc
.0e72	20 f0 ff	                jsr  plot
.0e75	a2 ea		                ldx  #<textl
.0e77	a0 0f		                ldy  #>textl
.0e79	20 e2 11	                jsr  puts
.0e7c	68		                pla
.0e7d	8d 86 02	                sta  bascol
.0e80	20 75 13	                jsr  popreg
.0e83	20 13 13	                jsr popall
.0e86	60		                rts

;******  Processing file: chaines_fr.asm

=158			headtcol        =   b_jaune
=158			normtcol        =   b_jaune
>0e87	00		nextline        .byte   0
>0e88	20 20 20 20	line            .null           "                                "
>0e8c	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>0e9c	20 20 20 20 20 20 20 20 20 20 20 20 00
>0ea9	92		texta           .byte           b_rvs_off
>0eaa	20 d3 cc 2d	                .text           " SL-BUG 64 Version 4.00 "
>0eae	c2 d5 c7 20 36 34 20 d6 45 52 53 49 4f 4e 20 34
>0ebe	2e 30 30 20
>0ec2	12 00		                .byte           b_rvs_on,0
>0ec4	20 20 20 20	textb           .null           "     Version Commodore 64     "
>0ec8	20 d6 45 52 53 49 4f 4e 20 c3 4f 4d 4d 4f 44 4f
>0ed8	52 45 20 36 34 20 20 20 20 20 00
>0ee3	20 20 c9 44	textc           .null           "  Idee Originale sur MC-6809  "
>0ee7	45 45 20 cf 52 49 47 49 4e 41 4c 45 20 53 55 52
>0ef7	20 cd c3 2d 36 38 30 39 20 20 00
>0f02	20 20 d0 41	textd           .null           "  Par Serge Leblanc mai 1994  "
>0f06	52 20 d3 45 52 47 45 20 cc 45 42 4c 41 4e 43 20
>0f16	4d 41 49 20 31 39 39 34 20 20 00
>0f21	20 d0 4f 52	texte           .null           " Port C64 par Daniel Lafrance "
>0f25	54 20 c3 36 34 20 50 41 52 20 c4 41 4e 49 45 4c
>0f35	20 cc 41 46 52 41 4e 43 45 20 00
>0f40	20 20 20 20	textf           .null           "       (c) Octobre 2025       "
>0f44	20 20 20 28 43 29 20 cf 43 54 4f 42 52 45 20 32
>0f54	30 32 35 20 20 20 20 20 20 20 00
>0f5f	20 20 20 d6	textg           .null   format( "   Version: %-17s ",Version)
>0f63	45 52 53 49 4f 4e 3a 20 32 30 32 35 31 30 31 37
>0f73	2d 31 32 35 33 30 31 20 20 20 00
>0f7e	92		texth           .byte           b_rvs_off
>0f7f	20 d2 c1 c3	                .text           " RACCOURCIS "
>0f83	c3 cf d5 d2 c3 c9 d3 20
>0f8b	12 00		                .byte           b_rvs_on,0
>0f8d	20 c5 58 45	texti           .null   format( " Execution.: SYS%5d ($%4X) ",slbug64,slbug64)
>0f91	43 55 54 49 4f 4e 2e 3a 20 d3 d9 d3 20 32 32 34
>0fa1	30 20 28 24 20 38 c3 30 29 20 00
>0fac	20 c1 49 44	textj           .null   format( " Aide......: SYS%5d ($%4X) ",help,help)
>0fb0	45 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 33 32 30
>0fc0	37 20 28 24 20 c3 38 37 29 20 00
>0fcb	20 c3 cc d3	textk           .null   format( " CLS.......: SYS%5d ($%4X) ",cls,cls)
>0fcf	2e 2e 2e 2e 2e 2e 2e 3a 20 d3 d9 d3 20 34 35 34
>0fdf	39 20 28 24 31 31 c3 35 29 20 00
>0fea	d5 4e 45 20	textl           .null           "Une clef pour continuer!"
>0fee	43 4c 45 46 20 50 4f 55 52 20 43 4f 4e 54 49 4e
>0ffe	55 45 52 21 00
>1003	c6 45 4e 45	titre           .null   "Fenetre A"
>1007	54 52 45 20 c1 00
>100d	b0 c0 c0 c0	tline   .byte   176,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,174,0
>1011	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>1021	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 ae 00
>102e	ab c0 c0 c0	mline   .byte   171,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,179,0
>1032	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>1042	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 b3 00
>104f	ad c0 c0 c0	bline   .byte   173,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,192,189,0
>1053	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0
>1063	c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 c0 bd 00
>1070	dd 20 20 20	eline   .byte   221,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,221,0
>1074	20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20
>1084	20 20 20 20 20 20 20 20 20 20 20 dd 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/macros-64tass.asm


;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-kernal.asm

=$00			u6510ddr       =    $00       ; 0       6510 port data dir. reg. (def: %xx101111)
=$01			u6510map       =    $01       ; 1       6510 port used as memory map reg.
=$02			unused2        =    $02       ; 2       Unused.
=$03			adray1         =    $03       ; 3-4     Vector to routine to convert a number ...
=$05			adray2         =    $05       ; 5-6     Vector to routine to convert a number ...
=$07			b_charac       =    $07       ; 7       Search character for scanning ...
=$08			b_endchr       =    $08       ; 8       Search character for scanning ...
=$09			b_trmpos       =    $09       ; 9       Cursor column position before the ...
=$0a			verck          =    $0a       ; 10      Flag: 0=Load or 1=Check
=$0b			b_count        =    $0b       ; 11      Index into the Text Input Buffer ...
=$0c			dimflg         =    $0c       ; 12      Flags for routine that locate or build array.
=$0d			valtyp         =    $0d       ; 13 Flag: Type of data ($ff=string or $00=numeric)
=$0e			intflg         =    $0e       ; 14 Numeric data Type ($80=Integer or $00=Float)
=$0f			garbfl         =    $0f       ; 15 Flag for list, Garbage collection, ...
=$10			subflg         =    $10       ; 16 Flag: Subscript reference to an array or ...
=$11			inpflg         =    $11       ; 17 Flag: Is data input to GET, READ or INPUT.
=$12			tansgn         =    $12       ; 18 Flag: Sign of result of TAN or SIN.
=$13			channl         =    $13       ; 19 Current i/o channel # (CMD logical file).
=$14			linnum         =    $14       ; 20-21 Integer line number value.
=$16			temppt         =    $16       ; 22      Ptr to next space in temp. string stack.
=$17			lastpt         =    $17       ; 23-24 Ptr to last string in temp. string stack.
=$2b			txttab         =    $2b       ; 43-44 Ptr to start of BASIC Program text.
=$2d			vartab         =    $2d       ; 45-46 Ptr to start of BASIC Variable area.
=$2f			arytab         =    $2f       ; 47-48 Ptr to start of BASIC Array area.
=$31			strebd         =    $31       ; 49-50 Ptr to END of BASIC Array area(+1) ...
=$33			fretop         =    $33       ; 51-52 Ptr to bottom of string text area.
=$35			frespc         =    $35       ; 53-54 Temp. ptr for string.
=$37			memsiz         =    $37       ; 55-56 Ptr to highest address used by BASIC.
=$39			curlib         =    $39       ; 57-58 Current BASIC line number.
=$3b			oldlin         =    $3b       ; 59-60 Previous BASIC line number.
=$3d			oldtxt         =    $3d       ; 61-62 Ptr to current BASIC statement address.
=$3f			datlin         =    $3f       ; 63-64 Current DATA line number.
=$41			datptr         =    $41       ; 65-66 Current DATA item address ptr.
=$43			impptr         =    $43       ; 67-68 GET, READ or INPUT info. source ptr.
=$45			varnam         =    $45       ; 69-70 Current BASIC variable name.
=$47			varpnt         =    $47       ; 71-72 Ptr to current BASIC variable value.
=$49			forpnt         =    $49       ; 73-74 Temp Ptr to index variable used by FOR.
=$4b			opptr          =    $4b       ; 75-76 Math operator table displacement.
=$4d			opmask         =    $4d       ; 77 Mask for comparison operation.
=$4e			defpnt         =    $4e       ; 78-79 Pointer to current FN descriptor.
=$50			dscpnt         =    $50       ; 80-82 Tmp ptr to current string descriptor.
=$53			four6          =    $53       ;  83 Constant of garbage collector.
=$54			jmper          =    $54       ;  84-86 Jump to function Instruction.
=$61			fac1           =    $61       ;  97-102 Floating point Accumulator #1
=$73			chrget         =    $73       ;  115
=$79			chrgot         =    $79       ;  121
=$90			kiostatus      =    $90       ;  144 Kernal I/O status word (st) (byte)
=$b7			curfnlen       =    $b7       ;  183 Current filename length (byte)
=$b9			cursecadd      =    $b9       ;  185 Current secondary address (byte)
=$ba			curdevno       =    $ba       ;  186 Current device number (byte)
=$bb			curfptr        =    $bb       ;  187 Current file pointer (word)
=$c1			stal           =    $c1       ;  $c1-$c2 (193-194) ptr to ram address to load/save
=$c5			lstx           =    $c5       ;  197 matrix coordinate of last key pressed
=$c6			ndx            =    $c6       ;  198 Number of character in keyboard buffer
=$fb			zpage1         =    $fb       ;  251 zero page 1 address (word)
=$fd			zpage2         =    $fd       ;  253 zero page 2 address (word)
=$fb			zeropage       =    zpage1
=$fd			zonepage       =    zpage2
=$277			kbbuff         =    $277      ;  631
=$286			carcol         =    $286      ;  646 basic next chr colscreenram (byte)
=$288			hibase         =    $288      ;  648
=$286			kcarcol        =    carcol
=$286			bascol         =    carcol
=$28d			shflag         =    $28d      ; 653
=$30a			ieval          =    $30a
=$314			cinv           =    $314      ; $314-$315 brk instruction interupt
=$33c			tbuffer        =    $33c      ; 828-1019 Cassette i/o buffer
=$326			ibsout         =    $326      ; 806
=$33c			tpbuff         =    $33c      ; $033c-$03fb (828-1019)
=$400			scrnram        =    $400      ; 1024 video character ram
=$400			scrram0        =    scrnram   ; 1024
=$500			scrram1        =    $500      ; 1280
=$600			scrram2        =    $600      ; 1536
=$700			scrram3        =    $700      ; 1792
=$801			basicsta       =    $801      ; 2049  basic start address
=$a000			basicrom       =    $a000     ; 40960 Basic rom base address
=$d000			chargen        =    $d000
=$d400			sid            =    $d400     ; 54272 sid base address
=$d800			colorram       =    $d800     ; 55296 video color ram
=$d800			colram         =    $d800     ; 55296 video color ram
=$d800			colram0        =    colorram  ; 55296
=$d900			colram1        =    $d900     ; 55552
=$da00			colram2        =    $da00     ; 55808
=$db00			colram3        =    $db00     ; 56064
>1091	00 d8 00 d9	colorptr  .word     colram0,colram1,colram2,colram3
>1095	00 da 00 db
=$dc00			cia1           =    $dc00     ; 56320 cia1 base address
=$dc00			cia1pra        =    $dc00     ; 56320 cia1 dataport A (keyboard column Write)
=$dc01			cia1prb        =    $dc01     ; 56321 cia1 dataport B (keyboard row read)
=$dc02			cia1ddra       =    $dc02     ; 56322 cia1 data direction A
=$dc03			cia1ddrb       =    $dc03     ; 56323 cia1 data direction B
=$dc04			cia1tmalo      =    $dc04     ; 56324 cia1 timer A low byte
=$dc05			cia1tmahi      =    $dc05     ; 56325 cia1 timer A high byte
=$dc06			cia1tmblo      =    $dc06     ; 56326 cia1 timer B low byte
=$dc07			cia1tmbhi      =    $dc07     ; 56327 cia1 timer B high byte
=$dc08			cia1todten     =    $dc08     ; 56328 cia1 time of day clock seconds/10
=$dc09			cia1todsec     =    $dc09     ; 56329 cia1 time of day clock seconds
=$dc0a			cia1todmin     =    $dc0a     ; 56330 cia1 time of day clock minutes
=$dc0b			cia1todhrs     =    $dc0b     ; 56331 cia1 time of day clock hours
=$dc0c			cia1sdr        =    $dc0c     ; 56332 cia1 serial data port
=$dc0d			cia1icr        =    $dc0d     ; 56333 cia1 Interupt control register
=$dc0e			cia1cra        =    $dc0e     ; 56334 cia1 control register A
=$dc0f			cia1crb        =    $dc0f     ; 56335 cia1 control register B
=$dd00			cia2           =    $dd00     ; 56576 cia2 base address
=$dd00			cia2pra        =    $dd00     ; 56576 cia2 dataport A
=$dd01			cia2prb        =    $dd01     ; 56577 cia2 dataport B
=$dd02			cia2ddra       =    $dd02     ; 56578 cia2 data direction A
=$dd03			cia2ddrb       =    $dd03     ; 56579 cia2 data direction B
=$dd04			cia2tmalo      =    $dd04     ; 56580 cia2 timer A low byte
=$dd05			cia2tmahi      =    $dd05     ; 56581 cia2 timer A high byte
=$dd06			cia2tmblo      =    $dd06     ; 56582 cia2 timer B low byte
=$dd07			cia2tmbhi      =    $dd07     ; 56583 cia2 timer B high byte
=$dd08			cia2todten     =    $dd08     ; 56584 cia2 time of day clock seconds/10
=$dd09			cia2todsec     =    $dd09     ; 56585 cia2 time of day clock seconds
=$dd0a			cia2todmin     =    $dd0a     ; 56586 cia2 time of day clock minutes
=$dd0b			cia2todhrs     =    $dd0b     ; 56587 cia2 time of day clock hours
=$dd0c			cia2sdr        =    $dd0c     ; 56588 cia2 serial data port
=$dd0d			cia2icr        =    $dd0d     ; 56589 cia2 Interupt control register
=$dd0e			cia2cra        =    $dd0e     ; 56590 cia2 control register A
=$dd0f			cia2crb        =    $dd0f     ; 56501 cia2 control register B
=$e000			kernalrom      =    $e000     ; 57344 start of kernal rom
=$ea31			irq            =    $ea31     ; 59953 irq entry point
=$03			bstop          =    $03       ;  03 [STOP],     [CTRL]-[C]
=$05			bwhite         =    $05       ;  05 [CTRL]+[2], [CTRL]-[E], Set colour to WHITE
=$08			block          =    $08       ;  08 Disable char map switch with [SHIFT]+[C=]
=$09			bunlock        =    $09       ;  09 Enabled char map switch with [SHIFT]+[C=]
=$0d			bcarret        =    $0d       ;  11 [RETURN]
=$0e			btext          =    $0e       ;  14 CTRL]-[N] select Upper/lowercase charset
=$11			bcrsdn         =    $11       ;  17 [CRS-D]           Cursor DOWN 1 line
=$12			brevcol        =    $12       ;  18 [CTRL]+[9]        REVERSE VIDEO ON
=$13			bhome          =    $13       ;  19 [HOME]            Cursor HOME
=$14			bdelete        =    $14       ;  20 [DELETE]          Delete 1 char
=$1c			bred           =    $1c       ;  28 [CTRL]+[3]        Set colour to RED
=$1d			bcuright       =    $1d       ;  29 [CRS-R]           Cursor RIGHT
=$1e			bgreen         =    $1e       ;  30 [CTRL]+[6]        Set colour to GREEN
=$1f			bblue          =    $1f       ;  31 [CTRL]+[7]        Set colour to BLUE
=$81			borange        =    $81       ; 129 [C=]+[1]          Set colour to ORANGE
=$85			f1key          =    $85       ; 133 [F1]
=$86			f2key          =    $86       ; 134 [F2]
=$87			f3key          =    $87       ; 135 [F3]
=$88			f4key          =    $88       ; 136 [F4]
=$89			f5key          =    $89       ; 137 [F5]
=$8a			f6key          =    $8a       ; 138 [F6]
=$8b			f7key          =    $8b       ; 139 [F7]
=$8c			f8key          =    $8c       ; 140 [F8]
=17			dcurkey        =    17
=145			ucurkey        =    145
=29			rcurkey        =    29
=157			lcurkey        =    157
=95			larrowkey      =    95
=94			uarrowkey      =    94
=19			homekey        =    19
=147			clearkey       =    147
=20			delkey         =    20
=148			inskey         =    148
=$8d			bcarret1       =    $8d       ; 141 [SHIFT]+[RETURN]
=$8e			bgraph         =    $8e       ; 142 select Uppercase+graphics charset
=$90			bblack         =    $90       ; 144 [CTRL]+[1]        Set colour to BLACK
=$91			bcuup          =    $91       ; 145 [SHIFT]+[CRS-D]   cursor UP 1 line
=$92			brevoff        =    $92       ; 146 [CTRL]+[0]        REVERSE VIDEO OFF
=$93			bclear         =    $93       ; 147 [SHIFT]+[HOME]    CLEAR SCREEN
=$94			binsert        =    $94       ; 148 [SHIFT]+[DELETE]  INSERT a char
=$95			bbrown         =    $95       ; 149 [C=]+[2]          Set colour to BROWN
=$96			bltred         =    $96       ; 150 [C=]+[3]          Set colour to PINK
=$97			bdkgrey        =    $97       ; 151 [C=]+[4]          Set colour to DARK GREY
=$98			bmdgrey        =    $98       ; 152 [C=]+[5]          Set colour to MEDIUM GREY
=$99			bltgreen       =    $99       ; 153 [C=]+[6]          Set colour to LIGHT GREEN
=$9a			bltblue        =    $9a       ; 154 [C=]+[7]          Set colour to LIGHT BLUE
=$9b			bltgrey        =    $9b       ; 155 [C=]+[8]          Set colour to LIGHT GREY
=$9c			bmagenta       =    $9c       ; 156 [CTRL]+[5]        Set colour to MAGENTA
=$9d			bculeft        =    $9d       ; 157 [SHIFT]+[CRS-R]   cursor RIGHT 1 pos
=$9e			byellow        =    $9e       ; 158 [CTRL]+[8]        Set colour to YELLOW
=$9f			bcyan          =    $9f       ; 159 [CTRL]+[4]        Set colour to CYAN
=$a0			bspace1        =    $a0       ; 169                   space
=$e0			bspace2        =    $e0       ; 224                   space
=$0			cnoir          =    $0
=$1			cblanc         =    $1
=$2			crouge         =    $2
=$3			cocean         =    $3
=$4			cmauve         =    $4
=$5			cvert          =    $5
=$6			cbleu          =    $6
=$7			cjaune         =    $7
=$8			corange        =    $8
=$9			cbrun          =    $9
=$a			crose          =    $a
=$b			cgrisfonce     =    $b
=$c			cgrismoyen     =    $c
=$b			cgris0         =    $b
=$c			cgris1         =    $c
=$d			cvertpale      =    $d
=$e			cbleupale      =    $e
=$f			cgrispale      =    $f
=$f			cgris3          =    $f
=$0			cblack         =    $0
=$1			cwhite         =    $1
=$2			cred           =    $2
=$3			ccyan          =    $3
=$4			cpurple        =    $4
=$5			cgreen         =    $5
=$6			cblue          =    $6
=$7			cyellow        =    $7
=$9			cbrown         =    $9
=$a			clightred      =    $a
=$b			cdarkgray      =    $b
=$c			cmidgray       =    $c
=$d			clightgreen    =    $d
=$e			clightblue     =    $e
=$f			clightgray     =    $f
=$00			vnoir          =    %00000000
=$00			vblack         =    %00000000
=$01			vblanc         =    %00000001
=$01			vwhite         =    %00000001
=$02			vrouge         =    %00000010
=$02			vred           =    %00000010
=$03			vocean         =    %00000011
=$03			vcyan          =    %00000011
=$04			vmauve         =    %00000100
=$04			vpurple        =    %00000100
=$05			vvert          =    %00000101
=$05			vgreen         =    %00000101
=$06			vbleu          =    %00000110
=$06			vblue          =    %00000110
=$07			vjaune         =    %00000111
=$07			vyellow        =    %00000111
=$08			vorange        =    %00001000
=$09			vbrun          =    %00001001
=$09			vbrown         =    %00001001
=$0a			vrose          =    %00001010
=$0a			vpink          =    %00001010
=$0b			vgris          =    %00001011
=$0b			vgray          =    %00001011
=$0b			vgrey          =    %00001011
=$0c			vgris1         =    %00001100
=$0c			vgray1         =    %00001100
=$0c			vgrey1         =    %00001100
=$0d			vvert1         =    %00001101
=$0d			vgreen1        =    %00001101
=$0e			vbleu1         =    %00001110
=$0e			vblue1         =    %00001110
=$0f			vgris2         =    %00001111
=$0f			vgray2         =    %00001111
=$0f			vgrey2         =    %00001111
=$e1d4			setprms=$e1d4  ; Set parameters for LOAD, SAVE, and verify
=$ed09			stalk=$ed09    ; Send Talk command to serial bus.
=$ed0c			slisten=$ed0c  ; Send LISTEN command to serial bus.
=$ed40			sflush=$ed40   ; Flush serial bus output cache at memory address $0095, to
=$edb9			slisten2=$edb9 ; Send LISTEN secondary addressto serial bus.
=$edb9			stalk2=$edb9  ; Send TALK secondary addressto serial bus.
=$eddd			sbout=$eddd    ; Write byte to serial bus.
=$edef			sutalk=$edef   ; Send UNTalk command to serial bus.
=$edfe			sulisten=$edfe ; Send UNLISTEN command to serial bus.
=$ee85			sclkhigh=$ee85 ; Set CLOCK OUT to High
=$ee8e			sclklow=$ee8e  ; Set CLOCK OUT to low
=$ee97			sdathigh=$ee97 ; Set DATA OUT to High
=$eea0			sdatlow=$eea0  ; Set DATA OUT to low
=$eea9			sclkdta=$eea9  ; Read CLOCK IN and DATA IN.
=$f1ad			sbread=$f1ad   ; Read one byte from serial port.
=$f237			sstdin=$F237   ; Define serial bus as standard input; do not send TALK
=$f279			sstdout=$F279  ; Define serial bus as standard output; do not send LISTEN
=$f3d5			sfopen=$F3D5   ; Open file on serial bus; do not send file name if secondary
=$f528			sutclose=$F528 ; Send UNTALK and CLOSE command to serial bus.
=$f63f			sulclose=$F63F ; Send UNLISTEN and CLOSE command to serial bus.
=$f642			sfclose=$F642  ; Close file on serial bus; do not send CLOSE secondary address
=$fe21			stimeout=$FE21 ; Unknown. (Set serial bus timeout.)
=$ffa5			acptr=$ffa5    ; jmp $ee13 Recoit un caractere provenant du port serie
=$ffc6			chkin=$ffc6    ; jmp ($031e) Define an input channel.
=$ffc9			chkout=$ffc9   ; jmp ($0320) Define an output channel.
=$ffcf			chrin=$ffcf    ; jmp ($0324) Get a character from the input channel
=$ffd2			chrout=$ffd2   ; jmp ($0326) Output a character
=$ff81			cint=$ff81     ; jsr $e518 Initialize the screen editor and vic-ii chip
=$ffa8			ciout=$ffa8    ; jmp $eddd Transmit a byte over the serial bus
=$ffe7			clall=$ffe7    ; jmp ($032c) Close all open files
=$ffc3			close=$ffc3    ; jmp ($031c) Close a logical file
=$ffcc			clrchn=$ffcc   ; jmp ($0322) - Clear all i/o channels.
=$ffe4			getin=$ffe4    ; jmp ($032a) Get a character.
=$fff3			iobase=$fff3   ; jmp $e500 Define i/o memory page
=$ff84			ioinit=$ff84   ; ($fda3) Initialize i/o devices.
=$ffb1			listen=$ffb1   ; jmp ($ed0c) Command a device on the serial bus to listen.
=$ffd5			load=$ffd5     ; jmp $f4e9 Load device to RAM.
=$ff9c			membot=$ff9c   ; jmp $fe34 Get/set bottom of memory.
=$ff99			memtop=$ff99   ; jmp $fe25 Get/Set top of ram
=$ffc0			open=$ffc0     ; jmp ($031a) Open a logical file
=$fff0			plot=$fff0     ; jmp $e50a Set or retrieve cursor location x=column, y=line
=$ff87			ramtas=$ff87   ; ($fd50) Initialise ram, tape buffer and screen.
=$ffde			rdtim=$ffde    ; jmp $f6dd Read system clock
=$ffb7			readst=$ffb7   ; jmp $fe07 Read i/o status word
=$ff8a			restor=$ff8a   ; jmp $fd15 Restore default I/O vectors.
=$ffd8			save=$ffd8     ; jmp $f5dd Save memory to a device.
=$ff9f			scnkey=$ff9f   ; jmp $ea87 Scan the keyboard
=$ffed			screen=$ffed   ; jmp $e505 Return screen format
=$ff93			second=$ff93   ; jmp $edb9 Send secondary address after listen
=$ffba			setlfs=$ffba   ; jmp $fe00 Set up a logical file
=$ff90			setmsg=$ff90   ; jmp $fe18 Set kernal message output flag
=$ffbd			setnam=$ffbd   ; jmp $fdf9 Set up file name
=$ffdb			settim=$ffdb   ; jmp $f6e4 Set the system clock.
=$ffa2			settmo=$ffa2   ; jmp $fe21 Set ieee bus card timeout flag
=$ffe1			stop=$ffe1     ; jmp ($0328) Check if stop key is pressed.
=$ffb4			talk=$ffb4     ; jmp $ed09 Command a device on the serial bus to talk
=$ff96			tksa=$ff96     ; jmp $edc7 Send a secondary address to a device commanded to talk
=$ffea			udtim=$ffea    ; jmp $f69b Update the system clock
=$ffae			unlsn=$ffae    ; jmp $edfe Send an unlisten command
=$ffab			untlk=$ffab    ; jmp $edef Send an untalk command
=$ff8d			vector=$ff8d   ; jmp $fd1a Read/set I/O vectors.
=$e043			kd_poly1       =    $e043
=$e059			kd_poly2       =    $e059
=$e08d			kd_rmulc       =    $e08d       ;
=$e092			kd_raddc       =    $e092       ;
=$e097			kd_rnd         =    $e097
=$e12a			kd_sys         =    $e12a
=$e156			kd_save        =    $e156
=$e165			kd_verify      =    $e165
=$e168			kd_load        =    $e168
=$f1ca			kd_chrout      =    $f1ca
=$ff81			kcint          =    cint           ;   , init vic + ecran.
=$ff84			kioinit        =    ioinit         ;   , init i/o dev.
=$ff87			kramtas        =    ramtas         ;   , test de memoire.
=$ffa8			kciout         =    ciout          ;a  ,tx byte  acia
=$ff8a			krestor        =    restor         ;   , set ram plafond
=$ff8d			kvector        =    vector         ;
=$ff90			ksetmsg        =    setmsg         ;a  , set sys. msg. out
=$ff93			ksecond        =    second         ;a  , tx adresse sec.
=$ff96			ktksa          =    tksa           ;a  , talk adresse sec.
=$ff99			kmemtop        =    memtop         ; yx, (c) get mem high
=$ff9c			kmembot        =    membot         ; yx, (c) get mem low
=$ff9f			kscankey       =    scnkey         ;   , scan clavier
=$ffa2			ksettmo        =    settmo         ;a  , set ieee timeout
=$ffa5			kacptr         =    acptr          ;a  ,rx serie.
=$ffab			kuntlk         =    untlk          ;   , iec-cmc stop talk
=$ffae			kunlsn         =    unlsn          ;   , iec-cmd stop lsn
=$ffb1			klisten        =    listen         ;a  , iec-cmd dev ecout
=$ffb4			ktalk          =    talk           ;a  , iec-cmd dev parle
=$ffb7			kreadst        =    readst         ;a  , lecture i/o stats
=$ffba			ksetlfs        =    setlfs         ;ayx, init fich logi.
=$ffbd			ksetnam        =    setnam         ;ayx, init num.nom.fich
=$ffc0			kopen          =    open           ;axy, ouvre fich-nom
=$ffc3			kclose         =    close          ;a  , ferme fichier #a.
=$ffc6			kchkin         =    chkin          ;  x,open canal in.
=$ffc9			kchkout        =    chkout         ;  x,open canal out
=$ffcc			kclrchn        =    clrchn         ;   , ferme canaux i/o.
=$ffcf			kchrin         =    chrin          ;a  ,recup. un car.
=$ffd2			kchrout        =    chrout         ;a  ,sort un car.
=$ffd5			kload          =    load           ;ayx, dev->ram
=$ffd8			ksave          =    save           ;   , sauve mem->dev
=$ffdb			ksettim        =    settim         ;axy, init sysclock
=$ffde			krdtim         =    rdtim          ;axy, lecture sysclock
=$ffe1			kstop          =    stop           ;a  , ret. stopkey stat
=$ffe4			kgetin         =    getin          ;a  , recup. car. #dev.
=$ffe7			kclall         =    clall          ;   , ferme fichiers.
=$ffea			kudtim         =    udtim          ;   , maj sysclock
=$ffed			kscreen        =    screen         ; yx, get format ecran
=$fff0			kplot          =    plot           ; yx, (c) get csr pos.
=$fff3			kiobase        =    iobase         ; yx, def. i/o mem page
=$e39a			k_echostartup  =    $e39a
=$e716			k_putch        =    $e716; 52) Print a character.           ;a--;---; a= char
=$e7a0			k_cls          =    $e7a0
=$e87c			k_cursordown   =    $e87c
=$e8ea			k_scrollup     =    $e8ea
=$e94e			k_home         =    $e94e
=$e965			k_insertline   =    $e965
=$e9c8			k_screlldown   =    $e9c8
=$ed0c			k_devsndlstn   =    $ed0c; 55) Send 'LISTEN'>IEEE/Serial.   ;a--;---; a=dev #
=$ee13			k_ieeein       =    $ee13; 60) Input from IEEE/Serial.      ;---;a--; a=Data byte
=$eef6			k_devsndutalk  =    $eef6; 58) Send 'UNTALK'>IEEE/Serial.   ;---;---;
=$ef04			k_devsndulstn  =    $ef04; 59) Send 'UNLISTEN'>IEEE/Serial. ;---;---;
=$f12f			k_putsysmsg    =    $f12f; 53) Print system message.        ;--y;---; y=msg offset
=$f291			k_cloself      =    $f291; 61) Close logical file .         ;a--;---; a=file #
=$f49e			k_loadsub      =    $f49e; 63) LOAD subroutine.             ;axy;---; a=# start=yyxx
=$f5af			k_prnsrch      =    $f5af; 64) Print SEARCHING if imm mode. ;---;---;
=$f5b3			k_echosearch   =    $f5b3; 64b) Skipping test part of 64.   ;---;---;
=$f5c1			k_prnfnam      =    $f5c1; 65) Print filename.              ;---;---;
=$f6ed			k_stop         =    $f6ed; 62) Check for STOP key.          ;---;---; z=1 pressed
=$f7ea			k_gettaphdblk  =    $f7ea; 66) Find a tape hdr blk.         ;a--;---; a=len
=$f7ea			k_fndtaphdblk  =    $f7ea; 67) Find any tape hdr blk.       ;---;---;
=$f817			k_waittapplay  =    $f817; 68) Press PLAY... (wait)         ;---;---;
=$f841			k_rdtape2buff  =    $f841; 69) Read tape to buffer.         ;---;---;
=$f847			k_readtape     =    $f847; 70) Read tape.                   ;---;---;
=$f864			k_wrbuff2tape  =    $f864; 71) write buffer to tape.        ;---;---;
=$f869			k_wrtape       =    $f869; 72) write tape.                  ;a--;---; a=ldr len
=$fb8e			k_resettapeio  =    $fb8e; 73) Reset tape I/O.              ;---;---;
=$fcbd			k_setintvect   =    $fcbd; 74) set interupt vector.         ;---;---;
=$fce2			k_coldreset    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldstart    =    $fce2; 75) Power on reset.              ;---;---;
=$fce2			k_coldboot     =    $fce2; 75) Power on reset.              ;---;---;
=$fe66			k_warmreset    =    $fe66;     Warm resetstart
=$fe66			k_warmboot     =    $fe66;     Warm resetstart
=$fe66			k_warmstart    =    $fe66;     Warm resetstart
=$ff93			k_devsndaddr2  =    $ff93; 56) Send second address.         ;a--;---; a=SAor#$60
=$5f			arrowleft      =    $5f
=$06			ctrl_al        =    $06
=$5f			escape         =    $5f
=$06			ctrl_escape    =    $06
=$a9			pound          =    $a9
=$13			home           =    $13
=$93			clear          =    $93
=$5e			uparrow        =    $5e
=$de			pisign         =    $de
=$03			runstop        =    $03
=$11			cursd          =    $11
=$91			cursu          =    $91
=$1d			cursr          =    $1d
=$9d			cursl          =    $9d
=$85			key_f1         =    $85
=$86			key_f3         =    $86
=$87			key_f5         =    $87
=$88			key_f7         =    $88
=$89			key_f2         =    $89
=$8a			key_f4         =    $8a
=$8b			key_f6         =    $8b
=$8c			key_f8         =    $8c
=$0d			enter          =    $0d
=$8d			comd_enter     =    $8d
=$41			key_a          =    $41
=$42			key_b          =    $42
=$43			key_c          =    $43
=$44			key_d          =    $44
=$45			key_e          =    $45
=$46			key_f          =    $46
=$47			key_g          =    $47
=$48			key_h          =    $48
=$49			key_i          =    $49
=$4a			key_j          =    $4a
=$4b			key_k          =    $4b
=$4c			key_l          =    $4c
=$4d			key_m          =    $4d
=$4e			key_n          =    $4e
=$4f			key_o          =    $4f
=$50			key_p          =    $50
=$51			key_q          =    $51
=$52			key_r          =    $52
=$53			key_s          =    $53
=$54			key_t          =    $54
=$55			key_u          =    $55
=$56			key_v          =    $56
=$57			key_w          =    $57
=$58			key_x          =    $58
=$59			key_y          =    $59
=$5a			key_z          =    $5a
=$c1			shift_a        =    $c1
=$c2			shift_b        =    $c2
=$c3			shift_c        =    $c3
=$c4			shift_d        =    $c4
=$c5			shift_e        =    $c5
=$c6			shift_f        =    $c6
=$c7			shift_g        =    $c7
=$c8			shift_h        =    $c8
=$c9			shift_i        =    $c9
=$ca			shift_j        =    $ca
=$cb			shift_k        =    $cb
=$cc			shift_l        =    $cc
=$cd			shift_m        =    $cd
=$ce			shift_n        =    $ce
=$cf			shift_o        =    $cf
=$d0			shift_p        =    $d0
=$d1			shift_q        =    $d1
=$d2			shift_r        =    $d2
=$d3			shift_s        =    $d3
=$d4			shift_t        =    $d4
=$d5			shift_u        =    $d5
=$d6			shift_v        =    $d6
=$d7			shift_w        =    $d7
=$d8			shift_x        =    $d8
=$d9			shift_y        =    $d9
=$da			shift_z        =    $da
=$01			ctrl_a         =    $01
=$02			ctrl_b         =    $02
=$03			ctrl_c         =    $03
=$04			ctrl_d         =    $04
=$05			ctrl_e         =    $05
=$06			ctrl_f         =    $06
=$07			ctrl_g         =    $07
=$08			ctrl_h         =    $08
=$09			ctrl_i         =    $09
=$0a			ctrl_j         =    $0a
=$0b			ctrl_k         =    $0b
=$0c			ctrl_l         =    $0c
=$0d			ctrl_m         =    $0d
=$0d			key_enter      =    $0d
=$0e			ctrl_n         =    $0e
=$0f			ctrl_o         =    $0f
=$10			ctrl_p         =    $10
=$11			ctrl_q         =    $11
=$12			ctrl_r         =    $12
=$13			ctrl_s         =    $13
=$14			ctrl_t         =    $14
=$15			ctrl_u         =    $15
=$16			ctrl_v         =    $16
=$17			ctrl_w         =    $17
=$18			ctrl_x         =    $18
=$19			ctrl_y         =    $19
=$1a			ctrl_z         =    $1a
=$b0			comd_a         =    $b0
=$bf			comd_b         =    $bf
=$bc			comd_c         =    $bc
=$ac			comd_d         =    $ac
=$b1			comd_e         =    $b1
=$bb			comd_f         =    $bb
=$a5			comd_g         =    $a5
=$b4			comd_h         =    $b4
=$a2			comd_i         =    $a2
=$b5			comd_j         =    $b5
=$a1			comd_k         =    $a1
=$b6			comd_l         =    $b6
=$a7			comd_m         =    $a7
=$aa			comd_n         =    $aa
=$b9			comd_o         =    $b9
=$af			comd_p         =    $af
=$ab			comd_q         =    $ab
=$b2			comd_r         =    $b2
=$ae			comd_s         =    $ae
=$a3			comd_t         =    $a3
=$b8			comd_u         =    $b8
=$be			comd_v         =    $be
=$b3			comd_w         =    $b3
=$bd			comd_x         =    $bd
=$b7			comd_y         =    $b7
=$ad			comd_z         =    $ad
=0			kerr00         =    0    ; routine ended by the stop key.
=1			kerr01         =    1    ; too many files open.
=2			kerr02         =    2    ; file already open.
=3			kerr03         =    3    ; file not open.
=4			kerr04         =    4    ; file not found.
=5			kerr05         =    5    ; device not present.
=6			kerr06         =    6    ; file is not an input file.
=7			kerr07         =    7    ; file is not an output file.
=8			kerr08         =    8    ; file name is missing.
=9			kerr09         =    9    ; illegal device number.
=240			kerrf0         =    240  ; top-of-memory change rs-232 buffer allocation.

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-vicii.asm

=$0400			viciiscn    =   $0400
=$0400			viciiscn0   =   $0400
=$04f0			viciiscn1   =   $04f0
=$05e0			viciiscn2   =   $05e0
=$06d0			viciiscn3   =   $06d0
=$d000			vic = $d000			; VicII C64 memorymap base address
=53248			vicsprt0x = vic+$00	; $d000, 53248 Sprt 0 Horizontal position (X)
=53249			vicsprt0y = vic+$01	; $d001, 53249 Sprt 0 Vertical position (Y)
=53250			vicsprt1x = vic+$02	; $d002, 53250 Sprt 1 Horizontal position (X)
=53251			vicsprt1y = vic+$03	; $d003, 53251 Sprt 1 Vertical position (Y)
=53252			vicsprt2x = vic+$04	; $d004, 53252 Sprt 2 Horizontal position (X)
=53253			vicsprt2y = vic+$05	; $d005, 53253 Sprt 2 Vertical position (Y)
=53254			vicsprt3x = vic+$06	; $d006, 53254 Sprt 3 Horizontal position (X)
=53255			vicsprt3y = vic+$07	; $d007, 53255 Sprt 3 Vertical position (Y)
=53256			vicsprt4x = vic+$08	; $d008, 53256 Sprt 4 Horizontal position (X)
=53257			vicsprt4y = vic+$09	; $d009, 53257 Sprt 4 Vertical position (Y)
=53258			vicsprt5x = vic+$0a	; $d00a, 53258 Sprt 5 Horizontal position (X)
=53259			vicsprt5y = vic+$0b	; $d00b, 53259 Sprt 5 Vertical position (Y)
=53260			vicsprt6x = vic+$0c	; $d00c, 53260 Sprt 6 Horizontal position (X)
=53261			vicsprt6y = vic+$0d	; $d00d, 53261 Sprt 6 Vertical position (Y)
=53262			vicsprt7x = vic+$0e	; $d00e, 53262 Sprt 7 Horizontal position (X)
=53263			vicsprt7y = vic+$0f	; $d00f, 53263 Sprt 7 Vertical position (Y)
=53264			vicspxmsb = vic+$10	; $D010, 53264
=53265			vicctrl0v  = vic+$11	; $d011, 53265
=53265			vicmiscfnc = vicctrl0v
=53266			vicraster = vic+$12	; $d012, 53266	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53267			viclpenhp = vic+$13	; $d013, 53267	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53268			viclpenvp = vic+$14	; $d014, 53268	     	|b7|b6|b5|b4|b3|b2|b1|b0|
=53269			vicsprctl = vic+$15	; $d015, 53269	     	|s7|s6|s5|s4|s3|s2|s1|s0|
=53270			vicctrl1h = vic+$16	; $d016, 53270
=53271			vicsprtexv = vic+$17	; $d017, 53271	     |s7|s6|s5|s4|s3|s2|s1|s0|
=53272			vicmemptr  = vic+$18	; $d018, 53272
=53273			vicirqreg  = vic+$19	; $d019, 53273
=53274			vicirqena  = vic+$1a	; $d01a, 53274
=53275			vicsprtprio = vic+$1b 	; $d01b, 53275		|s7|s6|s5|s4|s3|s2|s1|s0|
=53276			vicsprtmcol = vic+$1c 	; $d01c, 53276		|s7|s6|s5|s4|s3|s2|s1|s0|
=53277			vicsprtexh = vic+$1d 	; $d01d, 53277		|s7|s6|s5|s4|s3|s2|s1|s0|
=53278			vicsprscol = vic+$1e 	; $d01e, 53278		|s7|s6|s5|s4|s3|s2|s1|s0|
=53279			vicsprbakcol = vic+$1f ; $d01f, 53279		|s7|s6|s5|s4|s3|s2|s1|s0|
=53280			vicbordcol = vic+$20 	; $d020, 53280		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol  = vic+$21 	; $d021, 53281
=53281			vicback0col = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53281			vicbackcol0 = vic+$21 	; $d021, 53281		|--|--|--|--|c3|c2|c1|c0|
=53282			vicback1col = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53282			vicbackcol1 = vic+$22 	; $d022, 53282		|--|--|--|--|c3|c2|c1|c0|
=53283			vicback2col = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53283			vicbackcol2 = vic+$23 	; $d023, 53283		|--|--|--|--|c3|c2|c1|c0|
=53284			vicback3col = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53284			vicbackcol3 = vic+$24 	; $d024, 53284		|--|--|--|--|c3|c2|c1|c0|
=53285			vicsprtmcol0 = vic+$25 	; $d025, 53285		|--|--|--|--|c3|c2|c1|c0|
=53286			vicsprtmcol1 = vic+$26 	; $d026, 53286		|--|--|--|--|c3|c2|c1|c0|
=53287			vicsprt0col = vic+$27 	; $d027, 53287		|--|--|--|--|c3|c2|c1|c0|
=53288			vicsprt1col = vic+$28 	; $d028, 53288		|--|--|--|--|c3|c2|c1|c0|
=53289			vicsprt2col = vic+$29 	; $d029, 53289		|--|--|--|--|c3|c2|c1|c0|
=53290			vicsprt3col = vic+$2a 	; $d02a, 53290		|--|--|--|--|c3|c2|c1|c0|
=53291			vicsprt4col = vic+$2b 	; $d02b, 53291		|--|--|--|--|c3|c2|c1|c0|
=53292			vicsprt5col = vic+$2c 	; $d02c, 53292		|--|--|--|--|c3|c2|c1|c0|
=53293			vicsprt6col = vic+$2d 	; $d02d, 53293		|--|--|--|--|c3|c2|c1|c0|
=53294			vicsprt7col = vic+$2e 	; $d02e, 53294		|--|--|--|--|c3|c2|c1|c0|

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/map-c64-basic2.asm

=144			b_black         =   144  ;0,  ctrl-1
=5			b_white         =   5    ;1,  ctrl-2
=28			b_red           =   28   ;2,  ctrl-3
=159			b_cyan          =   159  ;3,  ctrl-4
=156			b_purple        =   156  ;4,  ctrl-5
=30			b_green         =   30   ;5,  ctrl-6
=31			b_blue          =   31   ;6,  ctrl-7
=158			b_yellow        =   158  ;7,  ctrl-8
=129			b_orange        =   129  ;8,  C=-1
=149			b_brown         =   149  ;9,  C=-2
=150			b_ltred         =   150  ;10, C=-3
=155			b_gray3         =   155  ;11, C=-4
=155			b_grey3         =   155  ;11, C=-4
=152			b_gray2         =   152  ;12, C=-5
=152			b_grey2         =   152  ;13, C=-5
=153			b_ltgreen       =   153  ;13, C=-6
=154			b_ltblue        =   154  ;14, C=-7
=151			b_gray1         =   151  ;15, C=-8
=151			b_grey1         =   151  ;15, C=-8
=144			b_noir          =   144  ;0,  ctrl-1
=5			b_blanc         =   5    ;1,  ctrl-2
=28			b_rouge         =   28   ;2,  ctrl-3
=156			b_mauve         =   156  ;4,  ctrl-5
=30			b_vert          =   30   ;5,  ctrl-6
=31			b_bleu          =   31   ;6,  ctrl-7
=158			b_jaune         =   158  ;7,  ctrl-8
=149			b_brun          =   149  ;9,  C=-2
=150			b_rose          =   150  ;10, C=-3
=155			b_gris3         =   155  ;11, C=-4
=152			b_gris2         =   152  ;12, C=-5
=153			b_vert2         =   153  ;13, C=-6
=154			b_blue2         =   154  ;14, C=-7
=151			b_gris1         =   151  ;15, C=-8
=151			b_gris          =   151  ;15, C=-8
=18			b_rvs_on       =    18   ;    ctrl-9
=146			b_rvs_off      =    146  ;    ctrl-0
=14			b_lowercase    =    14
=142			b_uppercase    =    142
=145			b_crsr_up      =    145
=17			b_crsr_down    =    17
=157			b_crsr_left    =    157
=29			b_crsr_right   =    29
=19			b_home         =    19
=147			b_clr_home     =    147
=20			b_insert       =    20
=141			b_shft_ret     =    141
=148			b_delete       =    148
=133			b_f1           =    133
=137			b_f2           =    137
=134			b_f3           =    134
=138			b_f4           =    138
=135			b_f5           =    135
=139			b_f6           =    139
=136			b_f7           =    136
=140			b_f8           =    140
=8			b_dis_cmd      =    8
=9			b_ena_cmd      =    9
=172			b_ul           =    172
=187			b_ur           =    187
=188			b_ll           =    188
=190			b_lr           =    190
=182			b_vl           =    182
=181			b_vr           =    181
=184			b_bo           =    184
=185			b_to           =    185
=$00			b_eot          =    $00
=$0200			b_inpbuff      =    $0200
=$0d			b_crlf         =    $0d
=$20			b_space        =    $20
=$61			b_fac1         =    $61
=$69			b_fac2         =    $69
=$a3bb			b_opentxtspc   = $a3bb ; Open space in BASIC text.   ;a-y;---; Array top $yyaa
=$a408			b_chkavailmem  = $a408 ; Check available Memory. *1  ;a-y;---; Array top $yyaa
=$a435			b_outofmem     = $a435 ; ?Out of memory.             ;---;---;
=$a437			b_errormesg    = $a437 ; Send BASIC error message.   ;a--;---; a = errno
=$a474			b_warmstart    = $a474 ; Basic warm start.           ;---;---;
=$a48a			b_chrgetentry  = $a48a ; Main CHRGET entry.          ;---;---;
=$a49c			b_newline      = $a49c ; Crunch tokens, insert line. ;-x-;---; x = buff len
=$a52a			b_clrready     = $a52a ; Fix chaining CLR and READY. ;---;---;
=$a533			b_fixchaining  = $a533 ; Fix chaining.               ;---;---;
=$a560			b_kbgetline    = $a560 ; Recieve line from keyboard.
=$a579			b_crunchtkns   = $a579 ; Crunch token. *7            ;-x-;---: x = buff len
=$a613			b_findline     = $a613 ; Find line in BASIC.         ;ax-;---; strBAS = $xxaa
=$a642			b_new          = $a642 ; Do NEW                      ;---;---;
=$a659			b_resetclr     = $a659 ; Reset BASIC and do CLR      ;---;---;
=$a65e			b_clr          = $a65e ; Do CLR                      ;---;---;
=$a68e			b_rstchrget    = $a68e ; Rst CHRGET to BASIC start   ;---;a--; strBAS hi
=$a857			b_continue     = $a857 ; Do CONTINUE.                ;a-y;---; curline $yyaa
=$a96b			b_getint       = $a96b ; Get int from BASIX text.    ;---;---;
=$aad3			b_sndcr        = $aad3 ; Send RETURN, LF in scr mode.;---;a--; a = LF
=$aad7			b_sndcrlf      = $aad7 ; Send RETURN, LINEFEED.      ;---;a--; a = LF
=$ab1e			b_outstr_ay    = $ab1e ; Print string from $yyaa.    ;a-y;---; sptr = $yyaa
=$ab1e			b_puts         = b_outstr_ay
=$ab24			b_outstrprep   = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$ab45			b_printqm      = $ab45 ; Print '?'.                  ;---;---;
=$ab47			b_sendchar     = $ab47 ; Send char in a to device.   ;a--;a--; a = char
=$abf9			b_intobuff     = $abf9 ; Input characters from std in anf write to buff. at $200.
=$ad8a			b_frmnum       = $ad8a ; Evaluate numeric expression and/or check for data type mismatch
=$ad9e			b_evalexpr     = $ad9e ; Evaluate expression.
=$aefd			b_chk4comma    = $aefd ; Check for coma.             ;---;a--; a = char
=$aefa			b_chk4lpar     = $aefa ; check for '('.              ;---;a--; a = char
=$aef7			b_chk4rpar     = $aef7 ; check for ')'.              ;---;a--; a = char
=$af08			b_syntaxerr    = $af08 ; send 'SYNTAX ERROR'.        ;---;---;
=$afe6			b_fort         = $afe6 ; FAC1 = FAC1 or FAC2.
=$afe9			b_fandt        = $afe9 ; FAC1 = FAC1 and FAC2.
=$b0e7			b_fndfloatvar  = $b0e7 ; find float var by name.     ;---;a-y; addr = $yyaa
=$b185			b_bumpvaraddr  = $b185 ; Bumb var addr by 2. *31     ;---;a-y; addr = $yyaa
=$b1aa			b_ftoint       = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b1bf			b_float2int    = $b1bf ; FAC1 to int in $64(lsb),$65(msb).
=$b1d2			b_num2int      = $b1d2 ; Converts float num expr to int in $64(lsb),$65(msb).
=$b248			b_fcerr        = $b248 ; Print ILLEGAL QUANTITY error message.
=$b391			b_int2float    = $b391 ; Int to float in Acc#1.      ;---;---;
=$b3a2			b_ytofac1      = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$b79e			b_getacc1lsb   = $b79e ; Get Acc#1 LSB in x.         ;---;-x-; x = Acc#1 LSB
=$b7a1			b_fac1tox      = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7b5			b_str2float    = $b7b5 ; Evaluate str to float (VAL) ;---;---;
=$b7b9			b_strxy2float  = $b7b9 ; Eval. float from str in xy. ;---;-xy; strptr = $yyxx
=$b7e9			b_evfint2x     = $b7e9 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b7eb			b_getpokeprms  = $b7eb ; Get 2 params for POKE, WAIT.;---;-x-; x = Param2
=$b7f7			b_getadr       = $b7f7 ; Convert Floating point number to an Unsighed TwoByte Integer.
=$b849			b_faddh        = $b849 ; FAC1 = FAC1 + 0.5
=$b850			b_fsub         = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$b853			b_fsubt        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b867			b_fadd         = $b867 ; FAC1 = FVAR + FAC1.         ;a-y;---; ptr = $yyaa
=$b867			b_memfloatadd  = $b867 ; Add from memory.            ;a-y;---; ptr = $yyaa
=$b86a			b_faddt        = $b86a ; FAC1 = FAC2 + FCA1
=$b86a			b_f2addf1      = $b86a ; FAC1 = FAC2 + FCA1
=$b947			b_fcomp2       = $b947 ; FAC1 = INV(FAC1) + 1
=$ba28			b_fmulv        = $ba28 ; FCA1 = FAC1 * FVAR.         ;a-y;---; ptr = $yyaa
=$ba28			b_memfloatmul  = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$ba2b			b_fmult        = $ba2b ; FAC1 = FAC1 * FAC2
=$ba8c			b_conupk       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bae2			b_mul10        = $bae2 ; FAC1 = FAC1 * 10.
=$bae2			b_acc1mul10    = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			B_fdiv10       = $bafe ; FAC1 = FAC1 / 10.
=$bb0f			b_fdiv         = $bb0f ;
=$bb0f			b_vdivf        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$bb12			b_fdivt        = $bb12 ; FAC1 = FAC2 / FAC1.
=$bba2			b_movfm        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$bba2			b_memvar2acc1  = $bba2 ; Unpack mem var to Acc#1.    ;a-y;---; ptr = $yyaa
=$bbc7			b_cpfac1tow2   = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bbca			b_cpfac1tow1   = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$bbd0			b_cpfac1to49   = $bbd0 ; Copy FAC1 to FORPNT ($49-$4a)
=$bbd4			b_fac1toaddr   = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bbd7			b_cpfac1toxy   = $bbd7 ; Copy Acc#1 to mem location. ;-xy;---; ptr = $yyxx
=$bbfc			b_movfa        = $bbfc ;
=$bbfc			b_acc2toacc1   = $bbfc ; Copy Acc#2 to Acc#1.        ;---;---;
=$bc2b			b_fac1sign     = $bc2b ; Check sign of FAC1
=$bc39			b_sgn          = $bc39 ; FAC1 = SIGN(FAC1)
=$bc3c			b_atofac1      = $bc3c ; Convert int a to FAC1       ;a--;---; a = int
=$bc44			b_int2fac1     = $bc44 ; $62(lsb),$63(msb) int to FAC1
=$bc58			b_abs          = $bc58 ; FAC1 = ABS(FAC1)
=$bc5b			b_fcomp        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc0c			b_movaf        = $bc0c ;
=$bc0c			b_rndac1ac2    = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$bc0f			b_urndac1ac2   = $bc0f ; Move unrnd Acc#1 to Acc#2.  ;---;---;
=$bc1b			b_round        = $bc1b ;
=$bc1b			b_rndac1       = $bc1b ; Round Acc#1.                ;---;---;
=$bc9b			b_qint         = $bc9b ; Converts FAC1 to int in FAC1.
=$bccc			b_int          = $bccc ; FAC1 = INT(FAC1)
=$bcf3			b_fin          = $bcf3 ; Conv. ascii dec num to FAC1,
=$bd7e			b_addf1acc     = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$bdcd			b_linptr       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdcd			b_putint       = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$bdd7			b_putfloat     = $bdd7 ; Print Acc#1 float.          ;---;---;
=$bddd			b_fout         = $bddd ;
=$bddd			b_num2str      = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bf71			b_sqr          = $bf71 ; FAC1 = SQRT(FAC1).
=$bf7b			b_fpwrt        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$e059			b_poly2        = $e059 ; Ploynomial evaluation
=$e3bf			b_initcgt      = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bdcd			b_axout        = $bdcd ; Print fix point value.      ;ax-;---; Value = $xxaa
=$e3bf			b_intcgt       = $e3bf ; Initialize all Basic zero page fixed value lication.
=$bcf3			b_ascflt       = $bcf3 ; Conv. ascii dec num to FAC1,
=$abf9			b_prompt       = $abf9 ; Input characters from std in anf write to buff. at $200.
=$0073			b_chrget       = $0073
=$0079			b_chrgot       = $0079
=$bddd			b_facasc       = $bddd ; Cnv num to str at $0100. *48;a-y;---; a=#$00, y=#$01
=$bba2			b_fvtf1        = $bba2 ; Copy FVAR to FAC1.          ;a-y;---; ptr = $yyaa
=$ab24			b_strout       = $ab24 ; Print precomputated string. ;a--;---; a = strlen
=$bbca			b_f1t57        = $bbca ; Copy FAC1 to WORK#1 ($57-$5b)
=$ba28			b_f1xfv        = $ba28 ; Multiply from memory.       ;a-y;---; ptr = $yyaa
=$bbd4			b_f1tmem       = $bbd4 ; Copy FAC1 to memory.        ;-xy;---; ptr = $yyxx
=$bae2			b_f1x10        = $bae2 ; Multiply Acc#1 by 10.       ;---;---; ptr = $yyaa
=$bafe			b_f1d10        = $bafe ; FAC1 = FAC1 / 10.
=$bc2b			b_sgnf1        = $bc2b ; Check sign of FAC1
=$bc0c			b_f1tf2        = $bc0c ; Move rnd Acc#1 to Acc#2.    ;---;---;
=$ba2b			b_f1xf2        = $ba2b ; FAC1 = FAC1 * FAC2
=$bb0f			b_fvdf1        = $bb0f ; FAC1 = FVAR / FAC1.         ;a-y;---; ptr = $yyaa
=$ba8c			b_memtf2       = $ba8c ; Copy FVAR to FAC2.          ;a-y;---; ptr = $yyaa
=$bb12			b_f2df1        = $bb12 ; FAC1 = FAC2 / FAC1.
=$b867			b_f1pfv        = $b867 ; FAC1 = FAC1 + FVAR.         ;a-y;---; ptr = $yyaa
=$b853			b_f2sf1        = $b853 ; FAC1 = FAC2 - FAC1.         ;---;---;
=$b850			b_fvsf1        = $b850 ; FAC1 = FVAR - FAC1.         ;a-y;---; ptr = $yyaa
=$bd7e			b_f1pacc       = $bd7e ; Add Acc to FAC1 (a=0-9)     ;a--;---;
=$b86a			b_f1pf2        = $b86a ; FAC1 = FAC2 + FCA1
=$bf7b			b_expon        = $bf7b ; FAC1 = FAC1 ^ FAC2.
=$afe9			b_fpand        = $afe9 ; FAC1 = FAC1 and FAC2.
=$afe6			b_f1orf2       = $afe6 ; FAC1 = FAC1 or FAC2.
=$bf71			b_sqrtf1       = $bf71 ; FAC1 = SQRT(FAC1).
=$bccc			b_intf1        = $bccc ; FAC1 = INT(FAC1)
=$bbc7			b_f1t5c        = $bbc7 ; Copy FAC1 to WORK#2 ($5c-$60)
=$bc5b			b_f1cfv        = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$bc5b			b_comp         = $bc5b ; FAC1 = FAC1 comp(FVAR).     ;a-y;---; ptr = $yyaa
=$b7a1			b_f1tx         = $b7a1 ; Conv FAC1 to byte in x.     ;---;-x-; x = byte
=$b1aa			b_fltay        = $b1aa ; FAC1 to word in $aayy       ;---;a-y; imt = $aayy
=$b3a2			b_ytfl1        = $b3a2 ; Convert int(y) to FAC1.     ;--y;---;
=$e059			b_poly         = $e059 ; Ploynomial evaluation

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-vicii.asm

.1099			screendis
.1099	08		               php
.109a	48		               pha
.109b	ad 11 d0	               lda  $d011
.109e	29 ef		               and  #%11101111
.10a0	8d 11 d0	               sta  $d011
.10a3	68		               pla
.10a4	28		               plp
.10a5	60		               rts
.10a6			screenena
.10a6	08		               php
.10a7	48		               pha
.10a8	ad 11 d0	               lda  $d011
.10ab	09 10		               ora  #%00010000
.10ad	8d 11 d0	               sta  $d011
.10b0	68		               pla
.10b1	28		               plp
.10b2	60		               rts
=8192			bmpram = 8192
.10b3			victohighres
.10b3	08		               php
.10b4	48		               pha
.10b5	ad 11 d0	               lda  vicmiscfnc
.10b8	09 20		               ora  #%00100000     ; 32
.10ba	8d 11 d0	               sta  vicmiscfnc
.10bd	ad 18 d0	               lda  vicmemptr
.10c0	09 08		               ora  #%00001000     ; $08
.10c2	8d 18 d0	               sta  vicmemptr
.10c5	a9 ff		               lda  #$ff           ; 255
.10c7	85 37		               sta  $0037
.10c9	a9 1f		               lda  #$1f           ; 31
.10cb	85 38		               sta  $0038
.10cd	68		               pla
.10ce	28		               plp
.10cf	60		               rts
.10d0			victonormal
.10d0	08		               php
.10d1	48		               pha
.10d2	ad 11 d0	               lda  vicmiscfnc
.10d5	29 df		               and  #%11011111     ; 233
.10d7	8d 11 d0	               sta  vicmiscfnc
.10da	ad 18 d0	               lda  vicmemptr
.10dd	29 f7		               and  #%11110111     ; $08
.10df	8d 18 d0	               sta  vicmemptr
.10e2	a9 00		               lda  #$00
.10e4	85 37		               sta  $0037
.10e6	a9 a0		               lda  #$a0
.10e8	85 38		               sta  $0038
.10ea	20 c5 11	               jsr  cls
.10ed	68		               pla
.10ee	28		               plp
.10ef	60		               rts
.10f0			vicbmpclear
.10f0	20 d8 12	               jsr  push
.10f3	a9 04		               lda  #cmauve
.10f5	20 1e 11	               jsr  setvicbmpbackcol
.10f8	a9 00		               lda  #<8192              ; Place le LSB de 8192 ...
.10fa	85 fb		               sta  zpage1              ; ... dans le lsb de zpage1.
.10fc	a9 20		               lda  #>8192              ; Place le MSB de 8192 ...
.10fe	85 fc		               sta  zpage1+1            ; ... dans le Msb de zpage1.
.1100	48		               pha
.1101	a9 ff		               lda  #<$0000+(8191)
.1103	8d fc 14	               sta  loopcount
.1106	a9 1f		               lda  #>$0000+(8191)
.1108	8d fd 14	               sta  loopcount+1
.110b	68		               pla
.110c	a0 00		               ldy  #$00
.110e	a9 0f		next           lda  #$0f
.1110	91 fb		               sta  (zpage1),y
.1112	20 2d 14	               jsr  inczpage1
.1115	20 dc 14	               jsr  loop
.1118	d0 f4		               bne  next
.111a	20 13 13	               jsr  pop
.111d	60		               rts
.111e			setvicbmpbackcol
.111e	20 d8 12	               jsr  push
.1121	29 0f		               and  #$0f
.1123	8d 51 11	               sta  vicbmpbackcol
.1126	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.1128	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.112a	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.112c	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.112e	48		               pha
.112f	a9 00		               lda  #<$0000+(1024)
.1131	8d fc 14	               sta  loopcount
.1134	a9 04		               lda  #>$0000+(1024)
.1136	8d fd 14	               sta  loopcount+1
.1139	68		               pla
.113a	a0 00		               ldy  #$00
.113c	b1 fb		next           lda  (zpage1),y
.113e	29 f0		               and  #$f0
.1140	0d 51 11	               ora  vicbmpbackcol
.1143	91 fb		               sta  (zpage1),y
.1145	20 2d 14	               jsr  inczpage1
.1148	20 dc 14	               jsr  loop
.114b	d0 ef		               bne  next
.114d	20 13 13	               jsr  pop
.1150	60		               rts
>1151	00		vicbmpbackcol  .byte     $00
.1152			setvicbmpforecol
.1152	20 d8 12	               jsr  push
.1155	2a		               rol
.1156	2a		               rol
.1157	2a		               rol
.1158	2a		               rol
.1159	29 f0		               and  #$f0
.115b	8d 89 11	               sta  vicbmpforecol
.115e	a0 00		               ldy  #<1024              ; Place le LSB de 8192 ...
.1160	84 fb		               sty  zpage1              ; ... dans le lsb de zpage1.
.1162	a0 04		               ldy  #>1024              ; Place le MSB de 8192 ...
.1164	84 fc		               sty  zpage1+1            ; ... dans le Msb de zpage1.
.1166	48		               pha
.1167	a9 00		               lda  #<$0000+(1024)
.1169	8d fc 14	               sta  loopcount
.116c	a9 04		               lda  #>$0000+(1024)
.116e	8d fd 14	               sta  loopcount+1
.1171	68		               pla
.1172	a0 00		               ldy  #$00
.1174	b1 fb		next           lda  (zpage1),y
.1176	29 0f		               and  #$0f
.1178	0d 89 11	               ora  vicbmpforecol
.117b	91 fb		               sta  (zpage1),y
.117d	20 2d 14	               jsr  inczpage1
.1180	20 dc 14	               jsr  loop
.1183	d0 ef		               bne  next
.1185	20 13 13	               jsr  pop
.1188	60		               rts
>1189	00		vicbmpforecol  .byte     $00
.118a			bmphrcalccoords
.118a	20 d8 12	               jsr  push
.118d	18		               clc       ; On met Carry à 0
.118e	6a		               ror       ; le bit 0 de a dans carry  ?/2
.118f	8a		               txa       ; x dans a
.1190	4a		               lsr       ; ?/4
.1191	4a		               lsr       ; ?/8 a = (ax)/8
.1192	8d a3 11	               sta  bmphrcol
.1195	98		               tya       ; Y dans a
.1196	4a		               lsr       ; ?/2
.1197	4a		               lsr       ; ?/4
.1198	4a		               lsr       ; ?/8 a=Y/8
.1199	8d a2 11	               sta  bmphrrow
.119c	48		               pha
.119d	98		               tya
.119e	20 13 13	               jsr  pop
.11a1	60		               rts
.11a2			vicbmpfill
>11a2	00		bmphrrow       .byte     $00
>11a3	00		bmphrcol       .byte     $00
>11a4	00		bmphrmask      .byte     $00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-basic2.asm

.11a5			scrmaninit
.11a5	20 46 13	               jsr  pushreg        ; Sauvegarde tous les registres
.11a8	20 99 10	               jsr  screendis      ; Disable screen
.11ab	a9 06		               lda  #vbleu         ; Place bleue pour la couleur
.11ad	8d 21 d0	               sta  vicbackcol     ;   d'arrière plan,
.11b0	a9 05		               lda  #vvert         ; vert pour la couleur
.11b2	8d 20 d0	               sta  vicbordcol     ;   de la bordure d'écran,
.11b5	a9 01		               lda  #vblanc        ;   et blanc pour la couleur du
.11b7	8d 86 02	               sta  bascol         ; texte.
.11ba	20 c5 11	               jsr  cls            ; Efface l'écran.
.11bd	20 a6 10	               jsr  screenena      ; enable screen
.11c0	20 75 13	               jsr  popreg         ; Récupère tous les registres.
.11c3	60		               rts
>11c4	8e		characterset   .byte b_uppercase
.11c5			cls
.11c5	08		               php                 ; Sauvegarde les registres
.11c6	48		               pha                 ;   modifiés.
.11c7	a9 93		               lda  #$93           ; Affiche le code basic de
.11c9	20 d2 ff	               jsr  chrout         ;   d'effacement d'écran.
.11cc	68		               pla                 ; Récupère les registres
.11cd	28		               plp                 ;   modifiés.
.11ce	60		               rts
.11cf			putnch
.11cf	20 46 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.11d2	20 d2 ff	again          jsr  chrout         ; On affiche A.
.11d5	ca		               dex                 ; Un de moins à faire.
.11d6	d0 fa		               bne  again          ; Si pas à 0 on en affiche encore.
.11d8	20 75 13	out            jsr  popreg         ; Récupère tous les registres.
.11db	60		               rts
.11dc			putch
.11dc	08		               php                 ; Sauvegarde le registre de status.
.11dd	20 d2 ff	               jsr  chrout         ; Affiche le caractère de Acc.
.11e0	28		               plp                 ; Récupère le registre de status.
.11e1	60		               rts
.11e2			puts
.11e2	20 d8 12	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.11e5	86 fb		               stx  zpage1         ; Place l'adresse de la chaine
.11e7	84 fc		               sty  zpage1+1       ;   dans ZP1.
.11e9	a0 00		               ldy  #0             ; Initialise l'index du mode (ZP),Y
.11eb	b1 fb		next           lda  (zpage1),y     ; Lit un charactère.
.11ed	f0 09		               beq  exit           ; Si $00 on sort.
.11ef	20 d2 ff	               jsr  chrout         ; Affiche le caractères.
.11f2	20 2d 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.11f5	4c eb 11	               jmp  next           ; Saute chercher le prochain carac.
.11f8	20 13 13	exit           jsr  popall         ; Récupère registre, ZP1 et ZP2.
.11fb	60		               rts
.11fc			gotoxy
.11fc	08		               php                 ; Sauvegarde le registre de
.11fd	48		               pha                 ;   status et le registre a.
.11fe	18		               clc                 ; Carry = 1 pour que kplot
.11ff	8a		               txa                 ;   positionne le curseur.
.1200	48		               pha                 ; On inverse X et Y pcq kplot
.1201	98		               tya                 ;
.1202	aa		               tax                 ;   prend X comme la ligne
.1203	68		               pla                 ;
.1204	a8		               tay                 ;   et Y comme la colonne.
.1205	20 f0 ff	               jsr  kplot          ; Positionne le curseur
.1208	68		               pla                 ; Récupère le registre a et
.1209	28		               plp                 ;   le registre de status.
.120a	60		               rts
.120b			cursor
=$0286			bascol    =    $0286               ; debugme
.120b	20 46 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.120e	90 12		               bcc  restore        ; Si C=0 c'est une récupération.
.1210	20 f0 ff	               jsr  kplot          ; On récupère la position du
.1213	8c 35 12	               sty  cx             ;   curseur et on la sauvegarde
.1216	8e 36 12	               stx  cy             ;   dans les vars locales.
.1219	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.121c	8d 37 12	               sta  bcol           ; BASIC du texte.
.121f	4c 31 12	               jmp  out            ; c'est fini on sort.
.1222	ae 36 12	restore        ldx  cy             ; Comme C=1, On charge x avec
.1225	ac 35 12	               ldy  cx             ;   la ligne, y ace  la col.
.1228	20 f0 ff	               jsr  kplot          ; On positionne le curseur.
.122b	ad 37 12	               lda  bcol           ; On replace la couleur par basic
.122e	8d 86 02	               sta  bascol         ;   sauvegardé.
.1231	20 75 13	out            jsr  popreg         ; Récupère tous les registres.
.1234	60		               rts
>1235	00		cx   .byte     $00
>1236	00		cy   .byte     $00
>1237	00		bcol .byte     $00
.1238			cursave
.1238	08		               php
.1239	38		               sec
.123a	20 0b 12	               jsr  cursor         ; Voir cette fonction plus haut.
.123d	28		               plp
.123e	60		               rts
.123f			curput
.123f	08		               php
.1240	18		               clc
.1241	20 0b 12	               jsr  cursor         ; Voir cette fonction plus haut.
.1244	28		               plp
.1245	60		               rts
.1246			putsxy
.1246	20 d8 12	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.1249	86 fb		               stx  zpage1         ; On place la position de la
.124b	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.124d	a0 00		               ldy  #$00           ; On charge l'index à 0.
.124f	b1 fb		               lda  (zpage1),y     ; Charge la coordonné X
.1251	aa		               tax                 ;   dans X.
.1252	20 2d 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1255	b1 fb		               lda  (zpage1),y     ; Charge la coordonnée Y
.1257	a8		               tay                 ; dans Y.
.1258	20 fc 11	               jsr  gotoxy         ; on positionne le curseur.
.125b	20 2d 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.125e	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.1260	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.1262	20 e2 11	               jsr  puts           ;   l'affiche.
.1265	20 13 13	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.1268	60		               rts
>1269	00 00		straddr   .word     $00
>126b	00		px        .byte     $00
>126c	00		py        .byte     $00
>126d	00 00		zp1       .word     $00
.126f			putscxy
.126f	20 d8 12	               jsr  pushall        ; Sauvegarde registres, ZP1 et ZP2.
.1272	86 fb		               stx  zpage1         ; On place la position de la
.1274	84 fc		               sty  zpage1+1       ;   chaine dans le pointeur ZP1.
.1276	a0 00		               ldy  #$00           ; On charge l'index à 0.
.1278	ad 86 02	               lda  bascol         ; On sauvegarde la couleur
.127b	48		               pha                 ;   actuelle de basic.
.127c	b1 fb		               lda  (zpage1),y     ; On charge le paramètre de
.127e	8d 86 02	               sta  bascol         ;   couleur et le force a Basic.
.1281	20 2d 14	               jsr  inczp1         ; Inc. le pointeur ZP1 en 16 bits.
.1284	a6 fb		               ldx  zpage1         ; On charge la nouvelle adresse
.1286	a4 fc		               ldy  zpage1+1       ;   de la chaine et on
.1288	20 46 12	               jsr  putsxy         ;   l'affiche.
.128b	68		               pla                 ; On replace la couleur basic
.128c	8d 86 02	               sta  bascol         ;   que nous avions sauvegardée.
.128f	20 13 13	               jsr  popall         ; Récupère registre, ZP1 et ZP2.
.1292	60		               rts
.1293			putrahex
.1293	20 46 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.1296	20 66 15	               jsr  atohex         ; Conversion de a chaîne hexa.
.1299	a2 03		               ldx  #<a2hexstr     ; Charge l'adresse de la chaîne
.129b	a0 15		               ldy  #>a2hexstr     ;   hexa dans $YYXX.
.129d	20 e2 11	               jsr  puts           ; Affiche la chaîne.
.12a0	20 75 13	               jsr  popreg         ; Récupère tous les registres.
.12a3	60		               rts
.12a4			kputrahexxy
.12a4			bputrahexxy
.12a4			putrahexxy
.12a4	08		               php                 ; Sauvegarde le registre de
.12a5	48		               pha                 ;   status et le registre a.
.12a6	20 66 15	               jsr  atohex         ; Convertion de a en hexadécimal.
.12a9	a2 00		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.12ab	a0 15		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.12ad	20 46 12	               jsr  putsxy         ; Positionne et affiche la chaîne.
.12b0	68		               pla                 ; Récupère le registre a et
.12b1	28		               plp                 ;   le registre de status.
.12b2	60		               rts
.12b3			putrahexcxy
.12b3	20 46 13	               jsr  pushreg        ; Sauvegarde tous les registres.
.12b6	20 66 15	               jsr  atohex         ; Convertion de a en hexadécimal.
.12b9	a2 00		               ldx  #<a2hexpos     ; Charge l'adresse de la chaîne
.12bb	a0 15		               ldy  #>a2hexpos     ;   hexa dans $YYXX.
.12bd	20 46 12	               jsr  putsxy         ; Colore, positionne et affiche la
.12c0	20 75 13	               jsr  popreg         ; Récupère tous les registres.
.12c3	60		               rts
.12c4			setinverse
.12c4	48		               pha
.12c5	a9 12		               lda  #$12
.12c7	20 d2 ff	               jsr  chrout
.12ca	68		               pla
.12cb	60		               rts
.12cc			clrinverse
.12cc	48		               pha
.12cd	a9 92		               lda  #$92
.12cf	20 d2 ff	               jsr  chrout
.12d2	68		               pla
.12d3	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-pushpop.asm

>12d4	00		rp        .byte     0
>12d5	00		ra        .byte     0
>12d6	00 00		pc        .word     0
.12d8			pushall
.12d8			push
.12d8	08		          php            ; stack : flg, pcl, pch
.12d9	78		          sei
.12da	8d d5 12	          sta  ra        ; save a
.12dd	68		          pla            ; stack : pcl, pch
.12de	8d d4 12	          sta  rp        ; save rp
.12e1	68		          pla            ; stack : pch
.12e2	8d d6 12	          sta  pc        ; save pcl
.12e5	68		          pla            ; stack : -
.12e6	8d d7 12	          sta  pc+1      ; save pch
.12e9	a5 fb		          lda  zpage1    ; get zpage1 low byte
.12eb	48		          pha            ; stack : zp1l
.12ec	a5 fc		          lda  zpage1+1  ; get zpage1 High byte
.12ee	48		          pha            ; stack : zp1h, zp1l
.12ef	a5 fd		          lda  zpage2    ; get zpage2 low byte
.12f1	48		          pha            ; stack : zp2l, zp1h, zp1l
.12f2	a5 fe		          lda  zpage2+1  ; get zpage2 High byte
.12f4	48		          pha            ; stack : zp2h, zp2l, zp1h, zp1l
.12f5	ad d4 12	          lda  rp        ; get rp
.12f8	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.12f9	ad d5 12	          lda  ra        ; get a
.12fc	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.12fd	8a		          txa            ; get x
.12fe	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.12ff	98		          tya            ; get y
.1300	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1301	ad d7 12	          lda  pc+1      ; get pch
.1304	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1305	ad d6 12	          lda  pc        ; get pcl
.1308	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1309	ad d4 12	          lda  rp        ; get rp
.130c	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.130d	ad d5 12	          lda  ra        ; get a
.1310	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1311	58		          cli
.1312	60		          rts
.1313			pullall
.1313			pull
.1313			popall
.1313			pop
.1313	78		          sei
.1314	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1315	8d d6 12	          sta  pc        ; save pcl
.1318	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1319	8d d7 12	          sta  pc+1      ; save pch
.131c	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.131d	a8		          tay            ; set y
.131e	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.131f	aa		          tax            ; set x
.1320	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1321	8d d5 12	          sta  ra        ; save a
.1324	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1325	8d d4 12	          sta  rp        ; save rp
.1328	68		          pla            ; stack : zp2l, zp1h, zp1l
.1329	85 fe		          sta  zpage2+1  ; get zpage1 low byte
.132b	68		          pla            ; stack : zp1h, zp1l
.132c	85 fd		          sta  zpage2    ; get zpage2 High byte
.132e	68		          pla            ; stack : zp1l
.132f	85 fc		          sta  zpage1+1  ; get zpage2 low byte
.1331	68		          pla            ; stack :
.1332	85 fb		          sta  zpage1    ; get zpage1 High byte
.1334	ad d7 12	          lda  pc+1      ; get pch
.1337	48		          pha            ; stack : pch
.1338	ad d6 12	          lda  pc
.133b	48		          pha            ; stack : pcl, pch
.133c	ad d4 12	          lda  rp        ; get rp
.133f	48		          pha            ; stack : rp, pcl, pch
.1340	ad d5 12	          lda  ra        ; set ra
.1343	58		          cli
.1344	28		          plp            ; stack : pcl, pch
.1345	60		          rts
.1346			pushreg
.1346	08		          php            ; stack : flg, pcl, pch
.1347	78		          sei
.1348	8d d5 12	          sta  ra        ; save a
.134b	68		          pla            ; stack : pcl, pch
.134c	8d d4 12	          sta  rp        ; save rp
.134f	68		          pla            ; stack : pch
.1350	8d d6 12	          sta  pc        ; save pcl
.1353	68		          pla            ; stack : -
.1354	8d d7 12	          sta  pc+1      ; save pch
.1357	ad d4 12	          lda  rp        ; get rp
.135a	48		          pha            ; stack : flg, zp2h, zp2l, zp1h, zp1l
.135b	ad d5 12	          lda  ra        ; get a
.135e	48		          pha            ; stack : a, flg, zp2h, zp2l, zp1h, zp1l
.135f	8a		          txa            ; get x
.1360	48		          pha            ; stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.1361	98		          tya            ; get y
.1362	48		          pha            ; stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1363	ad d7 12	          lda  pc+1      ; get pch
.1366	48		          pha            ; stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1367	ad d6 12	          lda  pc        ; get pcl
.136a	48		          pha            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.136b	ad d4 12	          lda  rp        ; get rp
.136e	48		          pha            ; stack : flg, pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.136f	ad d5 12	          lda  ra        ; get a
.1372	28		          plp            ; stack : pcl, pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1373	58		          cli
.1374	60		          rts
.1375			pullreg
.1375			popreg
.1375	78		          sei
.1376	68		          pla            ; get pcl stack : pch, y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.1377	8d d6 12	          sta  pc        ; save pcl
.137a	68		          pla            ; get pch stack : y, x, a, flg, zp2h, zp2l, zp1h, zp1l
.137b	8d d7 12	          sta  pc+1      ; save pch
.137e	68		          pla            ; get y stack : x, a, flg, zp2h, zp2l, zp1h, zp1l
.137f	a8		          tay            ; set y
.1380	68		          pla            ; get x stack : a, flg, zp2h, zp2l, zp1h, zp1l
.1381	aa		          tax            ; set x
.1382	68		          pla            ; get a stack : flg, zp2h, zp2l, zp1h, zp1l
.1383	8d d5 12	          sta  ra        ; save a
.1386	68		          pla            ; get flag stack : zp2h, zp2l, zp1h, zp1l
.1387	8d d4 12	          sta  rp        ; save rp
.138a	ad d7 12	          lda  pc+1      ; get pch
.138d	48		          pha            ; stack : pch
.138e	ad d6 12	          lda  pc
.1391	48		          pha            ; stack : pcl, pch
.1392	ad d4 12	          lda  rp        ; get rp
.1395	48		          pha            ; stack : rp, pcl, pch
.1396	ad d5 12	          lda  ra        ; set ra
.1399	58		          cli
.139a	28		          plp            ; stack : pcl, pch
.139b	60		          rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-mem.asm

.139c			blkfill
.139c	20 d8 12	bf0            jsr  push
.139f	20 67 14	               jsr  savezp1
.13a2	84 fc		               sty  zpage1+1
.13a4	a0 00		               ldy  #$00
.13a6	84 fb		               sty  zpage1
.13a8	91 fb		bf1            sta  (zpage1),y
.13aa	c8		               iny
.13ab	d0 fb		               bne  bf1
.13ad	20 76 14	               jsr  restzp1
.13b0	20 13 13	               jsr  pop
.13b3	60		               rts
.13b4			memfill
.13b4	20 d8 12	               jsr  push
.13b7	20 9c 13	mf1            jsr  blkfill
.13ba	c8		               iny
.13bb	ca		               dex
.13bc	d0 f9		               bne  mf1
.13be	20 13 13	               jsr  pop
.13c1	60		               rts
.13c2			memmove
.13c2	20 d8 12	               jsr  push
.13c5	ba		               tsx            ; On se crée un pointeur ...
.13c6	8a		               txa
.13c7	18		               clc
.13c8	69 0b		               adc  #11
.13ca	a8		               tay
.13cb	a2 06		               ldx  #$06
.13cd	b9 00 01	nextbyte       lda  $0100,y
.13d0	99 1c 14	               sta  words,y
.13d3	c8		               iny
.13d4	ca		               dex
.13d5	d0 f6		               bne  nextbyte
.13d7	ad 1c 14	               lda  s
.13da	8d f3 13	               sta  source+1
.13dd	ad 1d 14	               lda  s+1
.13e0	8d f4 13	               sta  source+2
.13e3	ad 1e 14	               lda  d
.13e6	8d f0 13	               sta  destin+1
.13e9	ad 1f 14	               lda  d+1
.13ec	8d f1 13	               sta  destin+2
.13ef	ad ff ff	destin         lda  $ffff
.13f2	8d ff ff	source         sta  $ffff
.13f5	ee f0 13	               inc  destin+1
.13f8	d0 03		               bne  src
.13fa	ee f1 13	               inc  destin+2
.13fd	ee f3 13	src            inc  source+1
.1400	d0 03		               bne  cnt
.1402	ee f4 13	               inc  source+2
.1405	ad 20 14	cnt            lda  compte
.1408	d0 08		               bne  decit
.140a	ad 21 14	               lda  compte+1
.140d	f0 09		               beq  fini
.140f	ce 21 14	               dec  compte+1
.1412	ce 20 14	decit          dec  compte
.1415	4c ef 13	               jmp  destin
.1418	20 13 13	fini           jsr  pop
.141b	60		               rts
.141c			words
>141c	00 00		s         .word     $0000
>141e	00 00		d         .word     $0000
>1420	00 00		compte    .word     $0000
.1422			decword
.1422	20 d8 12	               jsr  push
.1425	86 fd		               stx  zpage2
.1427	84 fe		               sty  zpage2+1
.1429	20 13 13	               jsr  pop
.142c	60		               rts
.142d			inczpage1
.142d			inczp1
.142d	08		               php
.142e	48		               pha
.142f	e6 fb		               inc  zpage1
.1431	a5 fb		               lda  zpage1
.1433	d0 02		               bne  nopage
.1435	e6 fc		               inc  zpage1+1
.1437	68		nopage         pla
.1438	28		               plp
.1439	60		               rts
.143a			deczpage1
.143a			deczp1
.143a	08		               php
.143b	48		               pha
.143c	c6 fb		               dec  zpage1
.143e	a5 fb		               lda  zpage1
.1440	c9 ff		               cmp  #$ff
.1442	f0 02		               beq  report
.1444	d0 02		               bne  nopage
.1446	c6 fc		report         dec  zpage1+1
.1448	68		nopage         pla
.1449	28		               plp
.144a	60		               rts
.144b			inczpage2
.144b			inczp2
.144b	08		               php
.144c	48		               pha
.144d	e6 fd		               inc  zpage2
.144f	a5 fd		               lda  zpage2
.1451	d0 02		               bne  nopage
.1453	e6 fe		               inc  zpage2+1
.1455	68		nopage         pla
.1456	28		               plp
.1457	60		               rts
.1458			deczpage2
.1458			deczp2
.1458	08		               php
.1459	c6 fd		               dec  zpage2
.145b	a5 fd		               lda  zpage2
.145d	c9 ff		               cmp  #$ff
.145f	f0 02		               beq  report
.1461	d0 02		               bne  nopage
.1463	c6 fe		report         dec  zpage2+1
.1465	28		nopage         plp
.1466	60		               rts
.1467			savezp1
.1467	08		               php
.1468	48		               pha
.1469	a5 fb		               lda  zpage1
.146b	8d f8 14	               sta  zp1
.146e	a5 fc		               lda  zpage1+1
.1470	8d f9 14	               sta  zp1+1
.1473	68		               pla
.1474	28		               plp
.1475	60		               rts
.1476			restzp1
.1476	08		               php
.1477	48		               pha
.1478	ad f8 14	               lda  zp1
.147b	85 fb		               sta  zpage1
.147d	ad f9 14	               lda  zp1+1
.1480	85 fc		               sta  zpage1+1
.1482	68		               pla
.1483	28		               plp
.1484	60		               rts
.1485			savezp2
.1485	08		               php
.1486	48		               pha
.1487	a5 fd		               lda  zpage2
.1489	8d fa 14	               sta  zp2
.148c	a5 fe		               lda  zpage2+1
.148e	8d fb 14	               sta  zp2+1
.1491	68		               pla
.1492	28		               plp
.1493	60		               rts
.1494			restzp2
.1494	08		               php
.1495	48		               pha
.1496	ad fa 14	               lda  zp2
.1499	85 fd		               sta  zpage2
.149b	ad fb 14	               lda  zp2+1
.149e	85 fe		               sta  zpage2+1
.14a0	68		               pla
.14a1	28		               plp
.14a2	60		               rts
.14a3			xy2addr
.14a3	08		               php
.14a4	48		               pha
.14a5	8a		               txa
.14a6	48		               pha
.14a7	98		               tya
.14a8	48		               pha
.14a9	ad f3 14	               lda  addr1+1
.14ac	8d f5 14	               sta  addr2+1
.14af	ad f2 14	               lda  addr1
.14b2	8d f4 14	               sta  addr2
.14b5	c0 00		               cpy  #$00
.14b7	f0 0f		               beq  addx
.14b9	18		moreline       clc
.14ba	6d f1 14	               adc  ymult
.14bd	90 03		               bcc  norepy
.14bf	ee f5 14	               inc  addr2+1
.14c2	8d f4 14	norepy         sta  addr2
.14c5	88		               dey
.14c6	d0 f1		               bne  moreline
.14c8	8a		addx           txa
.14c9	18		               clc
.14ca	6d f4 14	               adc  addr2
.14cd	90 03		               bcc  thatsit
.14cf	ee f5 14	               inc  addr2+1
.14d2	8d f4 14	thatsit        sta  addr2
.14d5	68		               pla
.14d6	a8		               tay
.14d7	68		               pla
.14d8	aa		               tax
.14d9	68		               pla
.14da	28		               plp
.14db	60		               rts
.14dc			loop
.14dc	ce fc 14	               dec  loopcount
.14df	d0 03		               bne  norep
.14e1	ce fd 14	               dec  loopcount+1
.14e4	ad fc 14	norep          lda  loopcount
.14e7	c9 00		               cmp  #$00
.14e9	d0 05		               bne  out
.14eb	4d fd 14	               eor  loopcount+1
.14ee	c9 ff		               cmp  #$ff
.14f0	60		out            rts
>14f1	28		ymult          .byte     40
>14f2	00 00		addr1          .word     $0000
>14f4	00 00		addr2          .word     $0000
>14f6	00 00		bytecnt        .word     $0000
>14f8	00 00		zp1            .word     $0000
>14fa	00 00		zp2            .word     $0000
>14fc	00 00		loopcount      .word     $0000

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-hex.asm

>14fe	01		a2hexcol       .byte     1              ; pour aputscxy
>14ff	00		a2hexbkcol     .byte     %00000000
.1500			a2hexpos
>1500	00		a2hexpx        .byte     0              ; pour aputsxy
>1501	00		a2hexpy        .byte     0
>1502	24		a2hexprefix    .byte     "$"            ; pour aputs
>1503	00 00		a2hexstr       .word     $00
>1505	00 00		               .word     $00
>1507	00		               .byte     0              ; 0 end string
>1508	01		abincol        .byte     1
>1509	00		abinbkcol      .byte     %00000000
>150a	30 30 30 30	abin           .null     "00000000"
>150e	30 30 30 30 00
>1513	20 20 20 00	adec           .null     "   "
.1517			putahexfmtxy
.1517	20 d8 12	               jsr  push
.151a	20 66 15	               jsr  atohex
.151d	ae 00 15	               ldx  a2hexpx
.1520	ac 01 15	               ldy  a2hexpy
.1523	20 fc 11	               jsr  gotoxy
.1526	a2 02		               ldx  #<a2hexprefix
.1528	a0 15		               ldy  #>a2hexprefix
.152a	20 e2 11	               jsr  puts
.152d	20 13 13	               jsr  pop
.1530	60		               rts
.1531			putahexfmt
.1531	20 d8 12	               jsr  push
.1534	20 66 15	               jsr  atohex
.1537	a2 02		               ldx  #<a2hexprefix
.1539	a0 15		               ldy  #>a2hexprefix
.153b	20 e2 11	               jsr  puts
.153e	20 13 13	               jsr  pop
.1541	60		               rts
.1542			putahex
.1542	20 d8 12	               jsr  push
.1545	20 66 15	               jsr  atohex
.1548	a2 03		               ldx  #<a2hexstr
.154a	a0 15		               ldy  #>a2hexstr
.154c	20 e2 11	               jsr  puts
.154f	20 13 13	               jsr  pop
.1552	60		               rts
.1553			nibtohex
.1553	08		               php
.1554	29 0f		               and  #$0f
.1556	f8		               sed
.1557	18		               clc
.1558	69 90		               adc  #$90
.155a	69 40		               adc  #$40
.155c	d8		               cld
.155d	28		               plp
.155e	60		               rts
.155f			lsra4bits
.155f	08		               php
.1560	4a		               lsr
.1561	4a		               lsr
.1562	4a		               lsr
.1563	4a		               lsr
.1564	28		               plp
.1565	60		               rts
.1566			atohex
.1566	08		               php
.1567	48		               pha
.1568	48		               pha
.1569	20 5f 15	               jsr  lsra4bits
.156c	20 53 15	               jsr  nibtohex
.156f	8d 03 15	               sta  a2hexstr
.1572	68		               pla
.1573	20 53 15	               jsr  nibtohex
.1576	8d 04 15	               sta  a2hexstr+1
.1579	a9 00		               lda  #$00                ; set end of string
.157b	8d 05 15	               sta  a2hexstr+2
.157e	68		               pla
.157f	28		               plp
.1580	60		               rts
.1581			xy2hex
.1581	20 d8 12	               jsr  push
.1584	20 66 15	               jsr  atohex
.1587	8a		               txa
.1588	48		               pha
.1589	20 5f 15	               jsr  lsra4bits
.158c	20 53 15	               jsr  nibtohex
.158f	8d 03 15	               sta  a2hexstr
.1592	68		               pla
.1593	20 53 15	               jsr  nibtohex
.1596	8d 04 15	               sta  a2hexstr+1
.1599	98		               tya
.159a	48		               pha
.159b	20 5f 15	               jsr  lsra4bits
.159e	20 53 15	               jsr  nibtohex
.15a1	8d 05 15	               sta  a2hexstr+2
.15a4	68		               pla
.15a5	20 53 15	               jsr  nibtohex
.15a8	8d 06 15	               sta  a2hexstr+3
.15ab	a9 00		               lda  #$00                ; 0 ended string
.15ad	8d 07 15	               sta  a2hexstr+4
.15b0	20 13 13	               jsr  pop
.15b3			atobin
.15b3	20 d8 12	               jsr  push
.15b6	a2 08		               ldx  #8
.15b8	a0 00		               ldy  #0
.15ba	18		               clc
.15bb	2a		nextbit        rol
.15bc	48		               pha
.15bd	69 00		               adc  #$00
.15bf	29 01		               and  #$01
.15c1	20 53 15	               jsr  nibtohex
.15c4	99 0a 15	               sta  abin,y
.15c7	68		               pla
.15c8	c8		               iny
.15c9	ca		               dex
.15ca	d0 ef		               bne  nextbit
.15cc	a9 00		               lda  #0
.15ce	99 0a 15	               sta  abin,y
.15d1	20 13 13	               jsr  pull
.15d4	60		               rts
.15d5			abinsetmccol
.15d5	20 46 13	               jsr  pushreg
.15d8	20 75 13	               jsr  popreg
.15db	60		               rts
.15dc			putabin
.15dc	20 b3 15	               jsr     atobin
.15df	20 d8 12	               jsr     push
.15e2	a2 0a		               ldx     #<abin
.15e4	a0 15		               ldy     #>abin
.15e6	20 e2 11	               jsr     puts
.15e9	20 13 13	               jsr     pop
.15ec	60		               rts
.15ed			printabin
.15ed	20 d8 12	               jsr     push
.15f0	a2 0a		               ldx     #<abin
.15f2	a0 15		               ldy     #>abin
.15f4	20 e2 11	               jsr     puts
.15f7	20 13 13	               jsr     pop
.15fa	60		               rts
.15fb			putabinfmt
.15fb	08		               php
.15fc	48		               pha
.15fd	a9 25		               lda     #"%"
.15ff	20 dc 11	               jsr     putch
.1602	68		               pla
.1603	20 dc 15	               jsr     putabin
.1606	28		               plp
.1607	60		               rts
.1608			putabinxy
.1608	20 fc 11	               jsr     gotoxy
.160b	20 dc 15	               jsr     putabin
.160e	60		               rts
.160f			putabinfmtxy
.160f	20 fc 11	               jsr     gotoxy
.1612	20 fb 15	               jsr     putabinfmt
.1615	60		               rts
.1616			atodec
.1616	20 d8 12	               jsr  push
.1619	f8		               sed            ; On se place en mode décimal.
.161a	aa		               tax            ; On déplace a dans x.
.161b	a0 00		               ldy  #$00      ; On pointe Y au début de la str.
.161d	a9 00		               lda  #$00      ; 0 dans A.
.161f	18		nextbit        clc            ; Bit carry a 0.
.1620	69 01		               adc  #$01      ; Ajoute 1 a A.
.1622	90 01		               bcc  decx      ; Pas de carry, pas de report.
.1624	c8		               iny            ; On incrémente Y
.1625	ca		decx           dex            ; X=X-1
.1626	d0 f7		               bne  nextbit   ; Pas encore a 0, on boucle.
.1628	48		               pha            ; A sur le stack.
.1629	98		               tya            ; Y dans A (MSB)
.162a	20 53 15	               jsr  nibtohex  ; a hex petsci ...
.162d	8d 13 15	               sta  adec      ; ... dans tampon.
.1630	68		               pla            ; Récupere A
.1631	48		               pha            ;
.1632	20 53 15	               jsr  nibtohex
.1635	8d 15 15	               sta  adec+2
.1638	68		               pla
.1639	6a		               ror
.163a	6a		               ror
.163b	6a		               ror
.163c	6a		               ror
.163d	20 53 15	               jsr  nibtohex
.1640	8d 14 15	               sta  adec+1
.1643	d8		               cld            ; On revient en mode binaire.
.1644	20 13 13	               jsr  pull
.1647	60		               rts
.1648			putadec
.1648	20 d8 12	               jsr  push
.164b	20 16 16	               jsr  atodec
.164e	a2 13		               ldx  #<adec
.1650	a0 15		               ldy  #>adec+1
.1652	20 e2 11	               jsr  puts
.1655	20 13 13	               jsr  pop
.1658	60		               rts

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-cbm-keyb.asm

.1659			waitstop
.1659	20 d8 12	               jsr  push
.165c	20 ed f6	wait           jsr  k_stop
.165f	d0 fb		               bne  wait
.1661	20 13 13	               jsr  pop
.1664	60		               rts
.1665			anykey
.1665	08		               php
.1666	48		               pha
.1667	a5 cb		nokey          lda 203
.1669	c9 40		               cmp #64
.166b	f0 fa		               beq nokey
.166d	20 77 16	               jsr releasekey
.1670	a9 00		               lda #0
.1672	85 c6		               sta 198
.1674	68		               pla
.1675	28		               plp
.1676	60		               rts
.1677			releasekey
.1677	08		               php
.1678	48		               pha
.1679	a5 cb		keypressed     lda 203
.167b	c9 40		               cmp #64
.167d	d0 fa		               bne keypressed
.167f	68		               pla
.1680	28		               plp
.1681	60		               rts
.1682			getkey
.1682	20 e4 ff	gkagain        jsr  getin
.1685	c9 00		               cmp  #0
.1687	f0 f9		               beq  gkagain
.1689	60		               rts
.168a			kbflushbuff
.168a	08		               php
.168b	48		               pha
.168c	20 e4 ff	again          jsr  getin
.168f	c9 00		               cmp  #0
.1691	d0 f9		               bne  again
.1693	68		               pla
.1694	28		               plp
.1695	60		               rts
.1696			waitkey
.1696	20 d8 12	               jsr  push
.1699	8d e7 16	               sta  thekey
.169c	20 e4 ff	nope           jsr  getin
.169f	20 d2 ff	               jsr  chrout
.16a2	cd e7 16	               cmp  thekey
.16a5	d0 f5		               bne  nope
.16a7	20 d2 ff	               jsr  chrout
.16aa	20 13 13	               jsr  pop
.16ad	60		               rts
.16ae			waitspace
.16ae	20 d8 12	               jsr  push
.16b1	a9 7f		wait           lda  #$7f  ;%01111111
.16b3	8d 00 dc	               sta  $dc00
.16b6	ad 01 dc	               lda  $dc01
.16b9	29 10		               and  #$10  ;mask %00010000
.16bb	d0 f4		               bne  wait
.16bd	20 13 13	               jsr  pop
.16c0			waitsstop
.16c0	20 d8 12	               jsr  push
.16c3	20 ed f6	wait           jsr  k_stop  ;%01111111
.16c6	d0 fb		               bne  wait
.16c8	20 13 13	               jsr  pop
.16cb			waitreturn
.16cb	20 d8 12	               jsr  push
.16ce	ad e8 16	               lda  thecount
.16d1	8d 00 04	               sta  scrnram
.16d4	a9 02		               lda  #$02
.16d6	8d 00 d8	               sta  colorram
.16d9	20 e4 ff	nope           jsr  getin
.16dc	c9 0d		nohex          cmp  #$0d
.16de	d0 f9		               bne  nope
.16e0	ee e8 16	               inc  thecount
.16e3	20 13 13	               jsr  pop
.16e6	60		               rts
>16e7	00		thekey         .byte   0
>16e8	01		thecount       .byte   $01
>16e9	00 00 00 00	asciitorom     .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0d,$00,$00  ;$00
>16ed	00 00 00 00 00 00 00 00 00 0d 00 00
>16f9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$10
>16fd	00 00 00 00 00 00 00 00 00 00 00 00
>1709	20 21 22 23	               .byte     $20,$21,$22,$23,$24,$25,$26,$27,$28,$29,$2a,$2b,$2c,$2d,$2e,$2f  ;$20
>170d	24 25 26 27 28 29 2a 2b 2c 2d 2e 2f
>1719	30 31 32 33	               .byte     $30,$31,$32,$33,$34,$35,$36,$37,$38,$39,$3a,$3b,$3c,$3d,$3e,$3f  ;$30
>171d	34 35 36 37 38 39 3a 3b 3c 3d 3e 3f
>1729	00 01 02 03	               .byte     $00,$01,$02,$03,$04,$05,$06,$07,$08,$09,$0a,$0b,$0c,$0d,$0e,$0f  ;$40
>172d	04 05 06 07 08 09 0a 0b 0c 0d 0e 0f
>1739	10 11 12 13	               .byte     $10,$11,$12,$13,$14,$15,$16,$17,$18,$19,$1a,$1b,$1c,$1d,$1e,$1f  ;$50
>173d	14 15 16 17 18 19 1a 1b 1c 1d 1e 1f
>1749	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$60
>174d	00 00 00 00 00 00 00 00 00 00 00 00
>1759	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$70
>175d	00 00 00 00 00 00 00 00 00 00 00 00
>1769	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$80
>176d	00 00 00 00 00 00 00 00 00 00 00 00
>1779	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$90
>177d	00 00 00 00 00 00 00 00 00 00 00 00
>1789	60 61 62 63	               .byte     $60,$61,$62,$63,$64,$65,$66,$67,$68,$69,$6a,$6b,$6c,$6d,$6e,$6f  ;$a0
>178d	64 65 66 67 68 69 6a 6b 6c 6d 6e 6f
>1799	70 71 72 73	               .byte     $70,$71,$72,$73,$74,$75,$76,$77,$78,$79,$7a,$7b,$7c,$7d,$7e,$7f  ;$b0
>179d	74 75 76 77 78 79 7a 7b 7c 7d 7e 7f
>17a9	40 41 42 43	               .byte     $40,$41,$42,$43,$44,$45,$46,$47,$48,$49,$4a,$4b,$4c,$4d,$4e,$4f  ;$c0
>17ad	44 45 46 47 48 49 4a 4b 4c 4d 4e 4f
>17b9	50 51 52 53	               .byte     $50,$51,$52,$53,$54,$55,$56,$57,$58,$59,$5a,$5b,$5c,$5d,$5e,$5f  ;$d0
>17bd	54 55 56 57 58 59 5a 5b 5c 5d 5e 5f
>17c9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$e0
>17cd	00 00 00 00 00 00 00 00 00 00 00 00
>17d9	00 00 00 00	               .byte     $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00  ;$f0
>17dd	00 00 00 00 00 00 00 00 00 00 00 00

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-std-showregs.asm

.17e9			showregs
=23			line    =   23
=0			coln    =   0
=$01			colr    =   vblanc
.17e9	08		               php                 ; Sauvegarde le registre de status sur stack.
.17ea	8d e4 19	               sta  rega           ; Sauvegarde Acc en mémoire.
.17ed	68		               pla                 ; Récupère le registre de status du stack.
.17ee	8d e7 19	               sta  regp           ; Sauvegarde le registre de status en mémoire.
.17f1	8e e5 19	               stx  regx           ; Sauvegarde le registre X en mémoire.
.17f4	8c e6 19	               sty  regy           ; Sauvegarde le registre Y en mémoire.
.17f7	ba		               tsx                 ; Copie le registre S dans X.
.17f8	8e e8 19	               stx  regs           ; Sauvegarde le registre S en mémoire.
.17fb	68		               pla                 ; Récupère le MSB de l'adresse de retour ...
.17fc	8d ea 19	               sta  regpcl         ; ... et le sauvegarde en mémoire ...
.17ff	8d ec 19	               sta  regpcl2        ; ... une seconde fois.
.1802	68		               pla                 ; Récupère le LSB de l'adresse de retour ...
.1803	8d e9 19	               sta  regpch         ; ... et le sauvegarde en mémoire ...
.1806	8d eb 19	               sta  regpch2        ; ... une seconde fois.
.1809	ad e4 19	               lda  rega           ; On commence par le registre Acc.
.180c	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.180d	20 53 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1810	8d 81 19	               sta  vala+1         ; ... et le place dans la chaine.
.1813	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1814	20 5f 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1817	20 53 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.181a	8d 80 19	               sta  vala           ; ... et le place dans la chaine.
.181d	ad e6 19	               lda  regy           ; Ensuite, le registre Y.
.1820	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1821	20 53 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1824	8d 98 19	               sta  valy+1         ; ... et le place dans la chaine.
.1827	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1828	20 5f 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.182b	20 53 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.182e	8d 97 19	               sta  valy           ; ... et le place dans la chaine.
.1831	ad e5 19	               lda  regx           ; Ensuite, le registre X.
.1834	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1835	20 53 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1838	8d 8c 19	               sta  valx+1         ; ... et le place dans la chaine.
.183b	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.183c	20 5f 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.183f	20 53 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1842	8d 8b 19	               sta  valx           ; ... et le place dans la chaine.
.1845	ad e7 19	               lda  regp           ; Ensuite, le registre de status.
.1848	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1849	20 53 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.184c	8d a3 19	               sta  valp+1         ; ... et le place dans la chaine.
.184f	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1850	20 5f 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1853	20 53 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.1856	8d a2 19	               sta  valp           ; ... et le place dans la chaine.
.1859	ad e8 19	               lda  regs           ; Ensuite, le pointeur de stack.
.185c	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.185d	20 53 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1860	8d ae 19	               sta  vals+1         ; ... et le place dans la chaine.
.1863	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1864	20 5f 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1867	20 53 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.186a	8d ad 19	               sta  vals           ; ... et le place dans la chaine.
.186d	38		               sec                 ; Prépade le ADC en plaçant 0 dans Carry.
.186e	ad ec 19	               lda  regpcl2        ; On charge la LSB de l'adresse de retour.
.1871	69 00		               adc  #$00           ; On y ajoute 1.
.1873	90 03		               bcc  noreport       ; Si pas de Carry on ne fait pas de report.
.1875	ee eb 19	               inc  regpch2        ; ... en incrémentant le MSB.
.1878	8d ec 19	noreport       sta  regpcl2        ; On le sauvegarde.
.187b	ad ec 19	               lda  regpcl2        ; On récupère la partie basse du compteur.
.187e	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.187f	20 53 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1882	8d be 19	               sta  valpcl+1       ; ... et lace le code à la position "---X".
.1885	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.1886	20 5f 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.1889	20 53 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.188c	8d bd 19	               sta  valpcl         ; ... et lace le code à la position "--X-".
.188f	ad eb 19	               lda regpch2         ; On récupère la partie haute du compteur.
.1892	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.1893	20 53 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.1896	8d bc 19	               sta  valpch+1       ; ... et lace le code à la position "-X--".
.1899	68		               pla                 ; Récupère la valeur de l'Acc temporaire.
.189a	20 5f 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.189d	20 53 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18a0	8d bb 19	               sta  valpch         ; ... et lace le code à la position "X---".
.18a3	a5 fb		               lda  zpage1         ; On charge le LSB de ZP1 ($fb).
.18a5	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18a6	20 53 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18a9	8d cf 19	               sta  valz1l+1       ; ... et lace le code à la position "---X".
.18ac	68		               pla
.18ad	20 5f 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18b0	20 53 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18b3	8d ce 19	               sta  valz1l         ; ... et lace le code à la position "--X-".
.18b6	a5 fc		               lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).
.18b8	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18b9	20 53 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18bc	8d cd 19	               sta  valz1h+1       ; ... et lace le code à la position "-X--".
.18bf	68		               pla
.18c0	20 5f 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18c3	20 53 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18c6	8d cc 19	               sta  valz1h         ; ... et lace le code à la position "X---".
.18c9	a5 fd		               lda  zpage2         ; On charge le LSB de ZP2 ($fd).
.18cb	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18cc	20 53 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18cf	8d e0 19	               sta  valz2l+1       ; ... et lace le code à la position "---X".
.18d2	68		               pla
.18d3	20 5f 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18d6	20 53 15	               jsr  nibtohex       ; Converti le second quartet (0-F) ...
.18d9	8d df 19	               sta  valz2l         ; ... et lace le code à la position "--X-".
.18dc	a5 fe		               lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).
.18de	48		               pha                 ; Sauvegarde temporaire de la valeur de Acc.
.18df	20 53 15	               jsr  nibtohex       ; Converti le premier quartet (0-F) ...
.18e2	8d de 19	               sta  valz2h+1       ; ... et lace le code à la position "-X--".
.18e5	68		               pla
.18e6	20 5f 15	               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.
.18e9	20 53 15	               jsr  nibtohex
.18ec	8d dd 19	               sta  valz2h         ; ... et lace le code à la position "X---".
.18ef	20 c4 12	               jsr  setinverse     ; On se place en mode inverse vidéo.
.18f2	20 46 13	               jsr  pushreg
.18f5	a2 78		               ldx  #<srega
.18f7	a0 19		               ldy  #>srega
.18f9	20 6f 12	               jsr  putscxy
.18fc	20 75 13	               jsr  popreg
.18ff	20 46 13	               jsr  pushreg
.1902	a2 84		               ldx  #<sregx
.1904	a0 19		               ldy  #>sregx
.1906	20 6f 12	               jsr  putscxy
.1909	20 75 13	               jsr  popreg
.190c	20 46 13	               jsr  pushreg
.190f	a2 8f		               ldx  #<sregy
.1911	a0 19		               ldy  #>sregy
.1913	20 6f 12	               jsr  putscxy
.1916	20 75 13	               jsr  popreg
.1919	20 46 13	               jsr  pushreg
.191c	a2 9b		               ldx  #<sregp
.191e	a0 19		               ldy  #>sregp
.1920	20 6f 12	               jsr  putscxy
.1923	20 75 13	               jsr  popreg
.1926	20 46 13	               jsr  pushreg
.1929	a2 a6		               ldx  #<sregs
.192b	a0 19		               ldy  #>sregs
.192d	20 6f 12	               jsr  putscxy
.1930	20 75 13	               jsr  popreg
.1933	20 46 13	               jsr  pushreg
.1936	a2 b2		               ldx  #<sregpc
.1938	a0 19		               ldy  #>sregpc
.193a	20 6f 12	               jsr  putscxy
.193d	20 75 13	               jsr  popreg
.1940	20 46 13	               jsr  pushreg
.1943	a2 c2		               ldx  #<sregz1
.1945	a0 19		               ldy  #>sregz1
.1947	20 6f 12	               jsr  putscxy
.194a	20 75 13	               jsr  popreg
.194d	20 46 13	               jsr  pushreg
.1950	a2 d3		               ldx  #<sregz2
.1952	a0 19		               ldy  #>sregz2
.1954	20 6f 12	               jsr  putscxy
.1957	20 75 13	               jsr  popreg
.195a	20 cc 12	               jsr  clrinverse     ; On quitte le mode inverse vidéo.
.195d	ad e9 19	               lda  regpch         ; On replace ls MSB l'adresse de retour ...
.1960	48		               pha                 ; ... à la bonne position sur la pile.
.1961	ad ea 19	               lda  regpcl         ; On replace ls LSB l'adresse de retour ...
.1964	48		               pha                 ; ... à la bonne position sur la pile.
.1965	ae e8 19	               ldx  regs           ; On replace tous les registre à leurs ...
.1968	9a		               txs                 ; ...
.1969	ac e6 19	               ldy  regy           ; ...
.196c	ae e5 19	               ldx  regx           ; ...
.196f	ad e7 19	               lda  regp           ; ...
.1972	48		               pha                 ; ...
.1973	ad e4 19	               lda  rega           ; ...
.1976	28		               plp                 ; ... valeurs initiales
.1977	60		               rts
>1978	07 01 17	srega   .byte   cyellow,coln+1,line
>197b	20 20 41 3a	        .text   '  a:$' ;4,24
>197f	24
>1980	00 00 20 00	vala    .byte   0,0,32,0
>1984	03 09 17	sregx   .byte   ccyan,coln+9,line
>1987	20 58 3a 24	        .text   ' x:$' ;4,24
>198b	00 00 20 00	valx    .byte   0,0,32,0
>198f	0d 10 17	sregy   .byte   clightgreen,coln+16,line
>1992	20 59 3a 20	        .text   ' y: $' ;4,24
>1996	24
>1997	00 00 20 00	valy    .byte   0,0,32,0
>199b	08 18 17	sregp   .byte   corange,coln+24,line
>199e	20 50 3a 24	        .text   ' p:$' ;4,24
>19a2	00 00 20 00	valp    .byte   0,0,32,0
>19a6	0a 1f 17	sregs   .byte   clightred,coln+31,line
>19a9	20 53 3a 24	        .text   ' s:$' ;4,24
>19ad	00 00 20 20	vals    .byte   0,0,32,32,0
>19b1	00
>19b2	0e 01 18 20	sregpc  .byte   clightblue,coln+1,line+1,32
>19b6	20 50 43 3a	        .text   ' pc:$' ;4,24
>19ba	24
>19bb	00 00		valpch  .byte   0,0
>19bd	00 00 20 20	valpcl  .byte   0,0,32,32,0
>19c1	00
>19c2	04 0d 18 20	sregz1  .byte   cpurple,coln+13,line+1,32
>19c6	20 5a 50 31	        .text   ' zp1:$' ;4,24
>19ca	3a 24
>19cc	00 00		valz1h  .byte   0,0
>19ce	00 00 20 20	valz1l  .byte   0,0,32,32,0
>19d2	00
>19d3	0f 1a 18 20	sregz2  .byte   clightgray,coln+26,line+1,32
>19d7	20 5a 50 32	        .text   ' zp2:$' ;4,24
>19db	3a 24
>19dd	00 00		valz2h  .byte   0,0
>19df	00 00 20 20	valz2l  .byte   0,0,32,32,0
>19e3	00
>19e4	00		rega    .byte   0
>19e5	00		regx    .byte   0
>19e6	00		regy    .byte   0
>19e7	00		regp    .byte   0
>19e8	00		regs    .byte   0
>19e9	00		regpch  .byte   0
>19ea	00		regpcl  .byte   0
>19eb	00		regpch2 .byte   0
>19ec	00		regpcl2 .byte   0
>19ed	00		vzp1h   .byte   0
>19ee	00		vzp1l   .byte   0
>19ef	00		vzp2h   .byte   0
>19f0	00		vzp2l   .byte   0

;******  Return to file: slbug64.asm


;******  Processing file: /Users/Locals/C64/00-usbkey32go/d-00-64tass-src/lib/lib-c64-drawbox.asm

.19f1			db_tline
.19f1	08		                php                 ; Sauvegarde les registres.
.19f2	48		                pha
.19f3	a9 b0		                lda #tleft          ; Coin suppérieur gauche.
.19f5	8d b2 1a	                sta db_left
.19f8	a9 c0		                lda #hline          ; Ligne horizontale.
.19fa	8d b4 1a	                sta db_mid
.19fd	a9 ae		                lda #tright         ; Coin suppérieur droit.
.19ff	8d b3 1a	                sta db_right
.1a02	28		                plp                 ; Récupère les registres.
.1a03	68		                pla
.1a04	20 4d 1a	                jsr db_drawline
.1a07	60		                rts
.1a08			db_bline
.1a08	08		                php                 ; Sauvegarde les registres.
.1a09	48		                pha
.1a0a	a9 ad		                lda #bleft          ; Coin inférieur gauche.
.1a0c	8d b2 1a	                sta db_left
.1a0f	a9 c0		                lda #hline          ; Ligne horizontale.
.1a11	8d b4 1a	                sta db_mid
.1a14	a9 bd		                lda #bright         ; Coin inférieur droit.
.1a16	8d b3 1a	                sta db_right
.1a19	28		                plp                 ; Récupère les registres.
.1a1a	68		                pla
.1a1b	20 4d 1a	                jsr db_drawline
.1a1e	60		                rts
.1a1f			db_eline
.1a1f	08		                php                 ; Sauvegarde les registres.
.1a20	48		                pha
.1a21	a9 dd		                lda #vline          ; Ligne verticale.
.1a23	8d b2 1a	                sta db_left
.1a26	a9 20		                lda #space          ; Caractère espace.
.1a28	8d b4 1a	                sta db_mid
.1a2b	a9 dd		                lda #vline          ; Ligne verticale.
.1a2d	8d b3 1a	                sta db_right
.1a30	28		                plp                 ; Récupère les registres.
.1a31	68		                pla
.1a32	20 4d 1a	                jsr db_drawline
.1a35	60		                rts
.1a36			db_hline
.1a36	08		                php                 ; Sauvegarde les registres.
.1a37	48		                pha
.1a38	a9 ab		                lda #hleft          ; Extrémité gauche d'une ligne médianne.
.1a3a	8d b2 1a	                sta db_left
.1a3d	a9 c0		                lda #hline          ; Ligne horizontale.
.1a3f	8d b4 1a	                sta db_mid
.1a42	a9 b3		                lda #hright         ; Extrémité droite d'une ligne médianne.
.1a44	8d b3 1a	                sta db_right
.1a47	28		                plp                 ; Récupère les registres.
.1a48	68		                pla
.1a49	20 4d 1a	                jsr db_drawline
.1a4c	60		                rts
.1a4d			db_drawline
.1a4d	20 46 13	                jsr pushreg         ; Sauvegarde les registres.
.1a50	ad 86 02	                lda bascol          ; Sauvegarde de la ...
.1a53	8d bb 1a	                sta drawbox_bascol  ; ... couleur basic.
.1a56	ad b9 1a	                lda drawbox_colour  ; Sélectionne la couleur...
.1a59	8d 86 02	                sta bascol          ; ... de la fenêtre.
.1a5c	c9 10		                cmp #$10            ; Couleur inverse vidéo?
.1a5e	30 05		                bmi noreverse       ; Non ...
.1a60	a9 12		                lda #18             ; Oui on place basic en inverse ...
.1a62	20 d2 ff	                jsr chrout          ; Vidéo.
.1a65	ae ba 1a	noreverse       ldx drawbox_curline ; On positionne le curseur au ...
.1a68	ac b6 1a	                ldy drawbox_left    ; ... coin suppérieur gauche ...
.1a6b	18		                clc                 ; ... de la fenêtre.
.1a6c	20 f0 ff	                jsr plot
.1a6f	ad b2 1a	                lda db_left         ; On dessine le premier caractère.
.1a72	20 d2 ff	                jsr chrout
.1a75	ad b4 1a	                lda db_mid          ; On dessine la ligne horizontale ...
.1a78	ae b7 1a	                ldx drawbox_width   ; ... selon la largeur voulue ...
.1a7b	ca		                dex                 ; ... de la fenêtre moins les ...
.1a7c	ca		                dex                 ; ... deux caractères d'extrémité.
.1a7d	20 cf 11	                jsr putnch
.1a80	ad b3 1a	                lda db_right        ; On dessine le dernier caractère.
.1a83	20 d2 ff	                jsr chrout
.1a86	a9 92		                lda #146            ; On met fin à l'inverse vidéo.
.1a88	20 d2 ff	                jsr chrout
.1a8b	ad bb 1a	                lda drawbox_bascol  ; On récupère et replace la ...
.1a8e	8d 86 02	                sta bascol          ; ... couleur de basic.
.1a91	ee ba 1a	                inc drawbox_curline ; Passe à la ligne suivante.
.1a94	20 75 13	                jsr popreg          ; Récupère les registres.
.1a97	60		                rts
.1a98			db_drawbox
.1a98	20 46 13	                jsr pushreg         ; Sauvegarde les registres.
.1a9b	ae b8 1a	                ldx drawbox_height  ; Récupère la hauteur de la fenètre.
.1a9e	20 f1 19	                jsr db_tline        ; Dessine la ligne suppérieure.
.1aa1	ca		                dex                 ; Soustrait 2 pour tenir compte des ...
.1aa2	ca		                dex                 ; lignes suppérieures et inférieures.
.1aa3	f0 06		                beq lastline        ; Si 0 pas de ligne vide dans la fenètre.
.1aa5	20 1f 1a	moreline        jsr db_eline        ; Dessine une ligne vide de la boîte.
.1aa8	ca		                dex                 ; Une ligne de moins à faire.
.1aa9	d0 fa		                bne moreline        ; On passe à la prochaine s'il en reste.
.1aab	20 08 1a	lastline        jsr db_bline        ; Dessine la ligne inférieure.
.1aae	20 75 13	                jsr popreg          ; Récupère les registres.
.1ab1	60		                rts
=176			tleft           =       176         ; Coin suppérieur gauche.
=174			tright          =       174         ; Coin suppérieur droit.
=173			bleft           =       173         ; Coin inférieur gauche.
=189			bright          =       189         ; Coin inférieur droit.
=171			hleft           =       171         ; Extrémité gauche d'une ligne médianne.
=179			hright          =       179         ; Extrémité droite d'une ligne médianne.
=221			vline           =       221         ; Ligne verticale.
=192			hline           =       192         ; Ligne horizontale.
=32			space           =       32          ; Caractère espace.
>1ab2	00		db_left         .byte   0           ; Caractère Gauche de la ligne courante.
>1ab3	00		db_right        .byte   0           ; Caractère droit de la ligne courante.
>1ab4	00		db_mid          .byte   0           ; Caractère central de la ligne courante.
>1ab5	00		drawbox_top     .byte   0           ; Coordonné du haut de la boite.
>1ab6	00		drawbox_left    .byte   0           ; Coordonné de la gauche de la boîte.
>1ab7	00		drawbox_width   .byte   0           ; Largeur de la boîte.
>1ab8	00		drawbox_height  .byte   0           ; Hauteur de la boîte.
>1ab9	00		drawbox_colour  .byte   0           ; Couleur de la boîte.
>1aba	00		drawbox_curline .byte   0           ; No de la ligne courante à dessiner.
>1abb	00		drawbox_bascol  .byte   0           ; Case de mémorisation de la couleur Basic.

;******  Return to file: slbug64.asm


;******  End of listing

;***************************************; Affiche en hexadécimal le contenu des ; registres A, X, Y, P, S et PC; sur la ligne 25 de l'écran.;***************************************showregs        .blockline    =   23coln    =   0colr    =   vblancbkcol   =   bkcol3                php    ;-----------------------------------     ; stack-> p, pch, pcl    ;-----------------------------------                 sta  rega                pla    ;-----------------------------------     ; stack-> pch, pcl    ;-----------------------------------                 sta  regp                stx  regx                sty  regy                tsx                   stx  regs                pla    ;-----------------------------------     ; stack-> pcl         ;-----------------------------------                 sta  regpcl                         sta  regpcl2                pla                           ;-----------------------------------     ; stack->     ;-----------------------------------                 sta  regpch                sta  regpch2            ;-----------------------------------     ; conversion de A en hexadecimal    ;-----------------------------------                 lda  rega                pha    ;-----------------------------------     ; stack-> a    ;-----------------------------------                 jsr  nibtohex                sta  vala+1                pla    ;-----------------------------------     ; stack->      ;-----------------------------------                 jsr  lsra4bits                jsr  nibtohex                sta  vala    ;-----------------------------------     ; conversion de Y en hexadecimal    ;-----------------------------------                 lda  regy                pha    ;-----------------------------------     ; stack-> a    ;-----------------------------------                 jsr  nibtohex                sta  valy+1                pla        ;-----------------------------------     ; stack->     ;-----------------------------------                 jsr  lsra4bits                jsr  nibtohex                sta  valy    ;-----------------------------------     ; conversion de X en hexadecimal    ;-----------------------------------                 lda  regx                pha    ;-----------------------------------     ; stack-> a    ;-----------------------------------                 jsr  nibtohex                sta  valx+1                pla    ;-----------------------------------     ; stack->    ;-----------------------------------                 jsr  lsra4bits                jsr  nibtohex                sta  valx    ;-----------------------------------     ; conversion de P en hexadecimal    ;-----------------------------------                 lda  regp                pha    ;-----------------------------------     ; stack-> a    ;-----------------------------------                 jsr  nibtohex                sta  valp+1                pla    ;-----------------------------------     ; stack->     ;-----------------------------------                 jsr  lsra4bits                jsr  nibtohex                sta  valp    ;-----------------------------------     ; conversion de S en hexadecimal    ;-----------------------------------                 lda  regs                pha    ;-----------------------------------     ; stack-> a    ;-----------------------------------                 jsr  nibtohex                sta  vals+1                pla    ;-----------------------------------     ; stack->     ;-----------------------------------                 jsr  lsra4bits                jsr  nibtohex                sta  vals    ;-----------------------------------     ; conversion de pch en hexadecimal    ;-----------------------------------                 clc                lda regpcl2                adc #$01                sta regpcl2                lda regpcl2                bne noreport                inc regpch2    noreport    lda regpch2                pha    ;-----------------------------------     ; stack-> a    ;-----------------------------------                 jsr  nibtohex                sta  valpch+1                pla    ;-----------------------------------     ; stack->     ;-----------------------------------                 jsr  lsra4bits                jsr  nibtohex                sta  valpch    ;-----------------------------------     ; conversion de pcl en hexadecimal    ;-----------------------------------                 lda  regpcl2                pha    ;-----------------------------------     ; stack-> a    ;-----------------------------------                 jsr  nibtohex                sta  valpcl+1                pla    ;-----------------------------------     ; stack->     ;-----------------------------------                 jsr  lsra4bits                jsr  nibtohex                sta  valpcl    ;-----------------------------------     ; stack->   ZP1 et ZP2    ;-----------------------------------                 lda  zpage1                pha                jsr  nibtohex                sta  valz1l                 pla                jsr  lsra4bits                jsr  nibtohex                sta  valz1l+1                 lda  zpage1+1                pha                jsr  nibtohex                sta  valz1h                 pla                jsr  lsra4bits                jsr  nibtohex                sta  valz1h+1                lda  zpage2                pha                jsr  nibtohex                sta  valz2l                 pla                jsr  lsra4bits                jsr  nibtohex                sta  valz2l+1                 lda  zpage2+1                pha                jsr  nibtohex                sta  valz2h                 pla                jsr  lsra4bits                jsr  nibtohex                sta  valz2h+1                     ;-----------------------------------     ; On affiche les chaines    ;-----------------------------------                 jsr  setinverse                sei                ldx  #<srega                ldy  #>srega+1                jsr  putscxy                ldx  #<sregx                ldy  #>sregx+1                jsr  putscxy                ldx  #<sregy                ldy  #>sregy+1                jsr  putscxy                ldx  #<sregp                ldy  #>sregp+1                jsr  putscxy                ldx  #<sregs                ldy  #>sregs+1                jsr  putscxy                ldx  #<sregpc                ldy  #>sregpc+1                jsr  putscxy                ldx  #<sregz1                ldy  #>sregz1+1                jsr  putscxy                ldx  #<sregz2                ldy  #>sregz2+1                jsr  putscxy                cli                jsr  clrinverse                lda  regpch                pha    ;-----------------------------------     ; stack-> pcl    ;-----------------------------------                 lda  regpcl                pha    ;-----------------------------------     ; stack-> pch, pcl    ;-----------------------------------                 ;ldx  regs                ;txs                ldy  regy                ldx  regx                lda  regp                pha    ;-----------------------------------     ; stack-> p, pch, pcl    ;-----------------------------------                 lda  rega                plp    ;-----------------------------------     ; stack-> pch, pcl    ;-----------------------------------                 rtssrega   .byte   colr,coln,line        .text   ' a:$' ;4,24vala    .byte   0,0,0sregx   .byte   colr,coln+6,line        .text   ' x:$' ;4,24valx    .byte   0,0,0sregy   .byte   colr,coln+12,line        .text   ' y:$' ;4,24valy    .byte   0,0,0sregp   .byte   colr,coln+18,line        .text   ' p:$' ;4,24valp    .byte   0,0,0sregs   .byte   colr,coln+24,line        .text   ' s:$' ;4,24vals    .byte   0,0,0sregpc  .byte   colr,coln+30,line        .text   ' pc:$' ;4,24valpch  .byte   0,0valpcl  .byte   0,0,32,0sregz1  .byte   colr,coln+3,line+1        .text   ' zp1:$' ;4,24valz1h  .byte   0,0valz1l  .byte   0,0,32,0sregz2  .byte   colr,coln+15,line+1        .text   ' zp2:$' ;4,24valz2h  .byte   0,0valz2l  .byte   0,0,32,0rega    .byte   0regx    .byte   0regy    .byte   0regp    .byte   0regs    .byte   0regpch  .byte   0regpch2 .byte   0regpcl  .byte   0regpcl2 .byte   0vzp1h   .byte   0vzp1l   .byte   0vzp2h   .byte   0vzp2l   .byte   0                .bend
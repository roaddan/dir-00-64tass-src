;-------------------------------------------------------------------------------; Scripteur ......: Daniel Lafrance, Québec, canada.; Nom du fichier .: lib-c64-showregs.asm; Cernière m.à j. : 20250521; Inspiration ....: ;-------------------------------------------------------------------------------;-------------------------------------------------------------------------------; Affiche en hexadécimal le contenu des registres A, X, Y, P, S, PC, ZP1 et ZP2; sur la ligne 25 de l'écran.;-------------------------------------------------------------------------------showregs        .blockline    =   23coln    =   0colr    =   vblanc               php                 ; Sauvegarde le registre de status sur stack.               ;sei    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> p, pcl, pch    ;---------------------------------------------------------------------------                sta  rega           ; Sauvegarde Acc en mémoire.               pla                 ; Récupère le registre de status du stack.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> pcl, pch    ;---------------------------------------------------------------------------                sta  regp           ; Sauvegarde le registre de status en mémoire.               stx  regx           ; Sauvegarde le registre X en mémoire.               sty  regy           ; Sauvegarde le registre Y en mémoire.               tsx                 ; Copie le registre S dans X.               stx  regs           ; Sauvegarde le registre S en mémoire.               pla                 ; Récupère le MSB de l'adresse de retour ...     ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> pch         ;---------------------------------------------------------------------------                sta  regpcl         ; ... et le sauvegarde en mémoire ...               sta  regpcl2        ; ... une seconde fois.                pla                 ; Récupère le LSB de l'adresse de retour ...     ;---------------------------------------------------------------------------     ; Valeurs actuelles stack->     ;---------------------------------------------------------------------------                sta  regpch         ; ... et le sauvegarde en mémoire ...               sta  regpch2        ; ... une seconde fois.     ;---------------------------------------------------------------------------     ;---------------------------------------------------------------------------     ; Conversion de A en hexadecimal des valeurs des registres et création des     ; chaînes d'affichage des registres.     ;---------------------------------------------------------------------------     ;---------------------------------------------------------------------------                lda  rega           ; On commence par le registre Acc.               pha                 ; Sauvegarde temporaire de la valeur de Acc.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> a    ;---------------------------------------------------------------------------                jsr  nibtohex       ; Converti le premier quartet (0-F) ...               sta  vala+1         ; ... et le place dans la chaine.               pla                 ; Récupère la valeur de l'Acc temporaire.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack->      ;---------------------------------------------------------------------------                jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.               jsr  nibtohex       ; Converti le second quartet (0-F) ...               sta  vala           ; ... et le place dans la chaine.    ;---------------------------------------------------------------------------     ; Conversion de Y en hexadecimal    ;---------------------------------------------------------------------------                lda  regy           ; Ensuite, le registre Y.               pha                 ; Sauvegarde temporaire de la valeur de Acc.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> a    ;---------------------------------------------------------------------------                jsr  nibtohex       ; Converti le premier quartet (0-F) ...               sta  valy+1         ; ... et le place dans la chaine.               pla                 ; Récupère la valeur de l'Acc temporaire.        ;---------------------------------------------------------------------------     ; Valeurs actuelles stack->     ;---------------------------------------------------------------------------                jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.               jsr  nibtohex       ; Converti le second quartet (0-F) ...               sta  valy           ; ... et le place dans la chaine.    ;---------------------------------------------------------------------------     ; conversion de X en hexadecimal    ;---------------------------------------------------------------------------                lda  regx           ; Ensuite, le registre X.               pha                 ; Sauvegarde temporaire de la valeur de Acc.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> a    ;---------------------------------------------------------------------------                jsr  nibtohex       ; Converti le premier quartet (0-F) ...               sta  valx+1         ; ... et le place dans la chaine.               pla                 ; Récupère la valeur de l'Acc temporaire.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack->    ;---------------------------------------------------------------------------                jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.               jsr  nibtohex       ; Converti le second quartet (0-F) ...               sta  valx           ; ... et le place dans la chaine.    ;---------------------------------------------------------------------------     ; conversion de P en hexadecimal    ;---------------------------------------------------------------------------                lda  regp           ; Ensuite, le registre de status.               pha                 ; Sauvegarde temporaire de la valeur de Acc.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> a    ;---------------------------------------------------------------------------                jsr  nibtohex       ; Converti le premier quartet (0-F) ...               sta  valp+1         ; ... et le place dans la chaine.               pla                 ; Récupère la valeur de l'Acc temporaire.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack->     ;---------------------------------------------------------------------------                jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.               jsr  nibtohex       ; Converti le second quartet (0-F) ...               sta  valp           ; ... et le place dans la chaine.    ;---------------------------------------------------------------------------     ; conversion de S en hexadecimal    ;---------------------------------------------------------------------------                lda  regs           ; Ensuite, le pointeur de stack.               pha                 ; Sauvegarde temporaire de la valeur de Acc.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> a    ;---------------------------------------------------------------------------                jsr  nibtohex       ; Converti le premier quartet (0-F) ...               sta  vals+1         ; ... et le place dans la chaine.               pla                 ; Récupère la valeur de l'Acc temporaire.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack->     ;---------------------------------------------------------------------------                jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.               jsr  nibtohex       ; Converti le second quartet (0-F) ...               sta  vals           ; ... et le place dans la chaine.    ;---------------------------------------------------------------------------     ; Conversion de pch en hexadecimal    ; On doit ajouter 1 à la valeur de l'adresse de retour pour que celle-ci     ; représente l'adresse réelle de la prochaine instruction suivant le JSR.    ;---------------------------------------------------------------------------                sec                 ; Prépade le ADC en plaçant 0 dans Carry.               lda  regpcl2        ; On charge la LSB de l'adresse de retour.                adc  #$00           ; On y ajoute 1.               bcc  noreport       ; Si pas de Carry on ne fait pas de report.               inc  regpch2        ; ... en incrémentant le MSB.noreport       sta  regpcl2        ; On le sauvegarde.    ;---------------------------------------------------------------------------     ; conversion de pcl en hexadecimal    ;---------------------------------------------------------------------------                lda  regpcl2        ; On récupère la partie basse du compteur.               pha                 ; Sauvegarde temporaire de la valeur de Acc.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> a    ;---------------------------------------------------------------------------                jsr  nibtohex       ; Converti le premier quartet (0-F) ...               sta  valpcl+1       ; ... et lace le code à la position "---X".               pla                 ; Récupère la valeur de l'Acc temporaire.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack->     ;---------------------------------------------------------------------------                jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.               jsr  nibtohex       ; Converti le second quartet (0-F) ...               sta  valpcl         ; ... et lace le code à la position "--X-".    ;---------------------------------------------------------------------------     ; conversion de pch en hexadecimal    ;---------------------------------------------------------------------------                lda regpch2         ; On récupère la partie haute du compteur.               pha                 ; Sauvegarde temporaire de la valeur de Acc.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> a    ;---------------------------------------------------------------------------                jsr  nibtohex       ; Converti le premier quartet (0-F) ...               sta  valpch+1       ; ... et lace le code à la position "-X--".               pla                 ; Récupère la valeur de l'Acc temporaire.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack->     ;---------------------------------------------------------------------------                jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.               jsr  nibtohex       ; Converti le second quartet (0-F) ...               sta  valpch         ; ... et lace le code à la position "X---".    ;---------------------------------------------------------------------------     ; Construit l'affichage de ZP1.    ;---------------------------------------------------------------------------                lda  zpage1         ; On charge le LSB de ZP1 ($fb).               pha                 ; Sauvegarde temporaire de la valeur de Acc.               jsr  nibtohex       ; Converti le premier quartet (0-F) ...               sta  valz1l+1       ; ... et lace le code à la position "---X".                pla               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.               jsr  nibtohex       ; Converti le second quartet (0-F) ...               sta  valz1l         ; ... et lace le code à la position "--X-".                lda  zpage1+1         ; On charge le MSB de ZP1 ($fc).               pha                 ; Sauvegarde temporaire de la valeur de Acc.               jsr  nibtohex       ; Converti le premier quartet (0-F) ...               sta  valz1h+1       ; ... et lace le code à la position "-X--".                pla               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.               jsr  nibtohex       ; Converti le second quartet (0-F) ...               sta  valz1h         ; ... et lace le code à la position "X---".    ;---------------------------------------------------------------------------     ; Construit l'affichage de ZP2.    ;---------------------------------------------------------------------------                lda  zpage2         ; On charge le LSB de ZP2 ($fd).               pha                 ; Sauvegarde temporaire de la valeur de Acc.               jsr  nibtohex       ; Converti le premier quartet (0-F) ...               sta  valz2l+1       ; ... et lace le code à la position "---X".                 pla               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.               jsr  nibtohex       ; Converti le second quartet (0-F) ...               sta  valz2l         ; ... et lace le code à la position "--X-".                lda  zpage2+1       ; On charge le MSB de ZP2 ($fc).               pha                 ; Sauvegarde temporaire de la valeur de Acc.               jsr  nibtohex       ; Converti le premier quartet (0-F) ...               sta  valz2h+1       ; ... et lace le code à la position "-X--".               pla               jsr  lsra4bits      ; Divise par 16 la valeur de l'Acc.               jsr  nibtohex               sta  valz2h         ; ... et lace le code à la position "X---".    ;---------------------------------------------------------------------------     ; On affiche les chaines    ;---------------------------------------------------------------------------                jsr  setinverse     ; On se place en mode inverse vidéo.               #printcxy srega     ; On affiche les registres Acc, ...               #printcxy sregx     ; ... X, ...               #printcxy sregy     ; ... Y, ...               #printcxy sregp     ; ... P, ...               #printcxy sregs     ; ... S, ...               #printcxy sregpc    ; ... PC, ...               #printcxy sregz1    ; ... ZP1 et ...               #printcxy sregz2    ; ... ZP2.               jsr  clrinverse     ; On quitte le mode inverse vidéo.               lda  regpch         ; On replace ls MSB l'adresse de retour ...               pha                 ; ... à la bonne position sur la pile.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> pch    ;---------------------------------------------------------------------------                lda  regpcl         ; On replace ls LSB l'adresse de retour ...               pha                 ; ... à la bonne position sur la pile.    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> pcl, pch    ;---------------------------------------------------------------------------                ldx  regs           ; On replace tous les registre à leurs ...               txs                 ; ...               ldy  regy           ; ...               ldx  regx           ; ...               lda  regp           ; ...               pha                 ; ...    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> p, pcl, pch    ;---------------------------------------------------------------------------                lda  rega           ; ...               plp                 ; ... valeurs initiales    ;---------------------------------------------------------------------------     ; Valeurs actuelles stack-> pcl, pch    ;---------------------------------------------------------------------------                rts;-------------------------------------------------------------------------------; Variables locales privées.;-------------------------------------------------------------------------------srega   .byte   cyellow,coln+1,line        .text   '  a:$' ;4,24vala    .byte   0,0,32,0sregx   .byte   ccyan,coln+9,line        .text   ' x:$' ;4,24valx    .byte   0,0,32,0sregy   .byte   clightgreen,coln+16,line        .text   ' y: $' ;4,24valy    .byte   0,0,32,0sregp   .byte   corange,coln+24,line        .text   ' p:$' ;4,24valp    .byte   0,0,32,0sregs   .byte   clightred,coln+31,line        .text   ' s:$' ;4,24vals    .byte   0,0,32,32,0sregpc  .byte   clightblue,coln+1,line+1,32        .text   ' pc:$' ;4,24valpch  .byte   0,0valpcl  .byte   0,0,32,32,0sregz1  .byte   cpurple,coln+13,line+1,32        .text   ' zp1:$' ;4,24valz1h  .byte   0,0valz1l  .byte   0,0,32,32,0sregz2  .byte   clightgray,coln+26,line+1,32        .text   ' zp2:$' ;4,24valz2h  .byte   0,0valz2l  .byte   0,0,32,32,0rega    .byte   0regx    .byte   0regy    .byte   0regp    .byte   0regs    .byte   0regpch  .byte   0regpcl  .byte   0regpch2 .byte   0regpcl2 .byte   0vzp1h   .byte   0vzp1l   .byte   0vzp2h   .byte   0vzp2l   .byte   0               .bend